<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>路由 on Linner&#39;s Blog</title>
    <link>/docs/vue/routers/</link>
    <description>Recent content in 路由 on Linner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>Copyright © 2020-2023 Linner. All Rights Reserved.
</copyright>
    <lastBuildDate>Tue, 26 Sep 2023 15:12:36 +0800</lastBuildDate><atom:link href="/docs/vue/routers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue 路由组件缓存</title>
      <link>/docs/vue/routers/cache/</link>
      <pubDate>Tue, 26 Sep 2023 15:12:36 +0800</pubDate>
      
      <guid>/docs/vue/routers/cache/</guid>
      <description><![CDATA[Vue Router中，开启路由组件缓存可以使用&lt;keep-alive&gt;将&lt;router-view&gt;包裹起来。使用了&lt]]></description>
      <content:encoded><![CDATA[<p>Vue Router中，开启路由组件缓存可以使用<code>&lt;keep-alive&gt;</code>将<code>&lt;router-view&gt;</code>包裹起来。使用了<code>&lt;keep-alive&gt;</code>之后，路由组件被用户切换掉时，不会被销毁。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">keep-alive</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;&lt;/</span><span class="nt">router-view</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">keep-alive</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>&lt;keep-alive&gt;</code>默认会缓存当前在<code>&lt;router-view&gt;</code>中展示的所有组件。如果要指定缓存的组件，可以使用<code>include</code>。在<code>include</code>中指定要缓存的组件的名称即可。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">keep-alive</span> <span class="na">include</span><span class="o">=</span><span class="s">&#34;Home&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;&lt;/</span><span class="nt">router-view</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">keep-alive</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>如果要指定缓存多个组件，可以使用<code>v-bind</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">keep-alive</span> <span class="na">:include</span><span class="o">=</span><span class="s">&#34;[&#39;Home&#39;, &#39;About&#39;]&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;&lt;/</span><span class="nt">router-view</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">keep-alive</span><span class="p">&gt;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 编程式路由导航</title>
      <link>/docs/vue/routers/navigation/</link>
      <pubDate>Tue, 26 Sep 2023 13:19:57 +0800</pubDate>
      
      <guid>/docs/vue/routers/navigation/</guid>
      <description><![CDATA[编程式路由导航是指不通过&lt;router-link&gt;创建&lt;a&gt;标签来定义导航链接，而是借助路由组件实例中的$route]]></description>
      <content:encoded><![CDATA[<p>编程式路由导航是指不通过<code>&lt;router-link&gt;</code>创建<code>&lt;a&gt;</code>标签来定义导航链接，而是借助路由组件实例中的<code>$router</code>实例，通过编写代码来实现路由导航。</p>
<p>使用编程式路由导航，可以让路由的跳转方式变得更加灵活。</p>
<hr>
<h1 id="两种导航方式" data-numberify>两种导航方式<a class="anchor ms-1" href="#两种导航方式"></a></h1>
<p><code>$router</code>也有与<code>&lt;router-link&gt;</code>相同两种导航方式，分别是<code>push</code>和<code>replace</code>。这两种方式分别调用两个不同的API，不过这两个API的使用方式是一致的。并且他们传入的参数与<code>&lt;router-link&gt;</code>中<code>to</code> props的值一样，可以传入两种类型的参数。</p>
<ul>
<li>
<p><code>$router.push()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$router</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;/user/zhangsan&#39;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;user&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">  <span class="nx">params</span><span class="o">:</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;zhangsan&#39;</span> 
</span></span><span class="line"><span class="cl">  <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p><code>$router.replace()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$router</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;/user/zhangsan&#39;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">replace</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;user&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">  <span class="nx">params</span><span class="o">:</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;zhangsan&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
</ul>
<p>一般情况下，<code>push</code>和<code>replace</code>的区别是，<code>replace</code>模式不会向<code>history</code>添加新记录。</p>
<p><code>$router.push()</code>可以在配置对象中加入一个<code>replace:true</code>，起到与<code>$router.replace()</code>相同的效果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/user/zhangsan&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">  <span class="nx">replace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 相当于
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">router</span><span class="p">.</span><span class="nx">replace</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/user/zhangsan&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><hr>
<h1 id="移动历史记录" data-numberify>移动历史记录<a class="anchor ms-1" href="#移动历史记录"></a></h1>
<p><code>$router</code>还封装了一些用于操作当前应用历史浏览记录的API：</p>
<ul>
<li>
<p><code>$router.forward()</code>：向前移动一条记录。</p>
</li>
<li>
<p><code>router.back()</code>：回退上一条记录。</p>
</li>
<li>
<p><code>$router.go(n)</code>：携带一个整数类型的参数，用于在历史堆栈中前进后退$n$步（类似于<code>window.history.go(n)</code>）。</p>
<ul>
<li>当$n$为正整数时，在历史堆栈中前进$n$步。</li>
<li>当$n$为负整数时，在历史堆栈中后退$|n|$步。</li>
<li>如果移动的步数超过历史堆栈的长度（$|n|$过大），那么移动静默失败。</li>
</ul>
<p>例如：</p>
<ul>
<li><code>$router.go(1)</code>：向前移动一条记录。与<code>$router.forward()</code>相同。</li>
<li><code>$router.go(-1)</code>：回退上一条记录。与<code>$router.back()</code>相同。</li>
<li><code>$router.go(3)</code>：向前移动3条记录。</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 路由通过 Props 传参</title>
      <link>/docs/vue/routers/passing-props/</link>
      <pubDate>Tue, 26 Sep 2023 10:27:58 +0800</pubDate>
      
      <guid>/docs/vue/routers/passing-props/</guid>
      <description><![CDATA[路由的props配置可以让路由组件更方便地接收到参数。在组件中使用$route会让组件与路由紧耦合（使用组件必须配置路由）。通过props可]]></description>
      <content:encoded><![CDATA[<p>路由的<code>props</code>配置可以让路由组件更方便地接收到参数。在组件中使用<code>$route</code>会让组件与路由紧耦合（使用组件必须配置路由）。通过<code>props</code>可以解除组件与路由的紧耦合。</p>
<blockquote>
<p>注：使用<code>props</code>，让组件通过<code>props</code>接收参数，让路由通过<code>props</code>给组件传递参数。这样当组件被用在其它不使用路由的组件中时，组件依然可以通过<code>props</code>接收参数，而无需配置路由。</p>
</blockquote>
<hr>
<h1 id="对象模式" data-numberify>对象模式<a class="anchor ms-1" href="#对象模式"></a></h1>
<p>当<code>props</code>是一个对象时，它将被作为组件的<code>props</code>，原封不动地被传递给组件<code>props</code>。在<code>props</code>为静态的时候可以使用这种方式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/promotion/from-newsletter&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">component</span><span class="o">:</span> <span class="nx">Promotion</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span><span class="o">:</span> <span class="p">{</span> <span class="nx">newsletterPopup</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><hr>
<h1 id="布尔模式" data-numberify>布尔模式<a class="anchor ms-1" href="#布尔模式"></a></h1>
<p>在路由中，给<code>props</code>设置一个为<code>true</code>的布尔值，路由会自动将当前的所有<code>params</code>通过<code>props</code>传递给组件。</p>
<p>例如<code>User</code>组件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span>  <span class="nx">VueRouter</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;User&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">props</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>通过以下方式给<code>User</code>配置路由，并以<code>props</code>形式将<code>params</code>传递给<code>User</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">component</span><span class="o">:</span> <span class="nx">User</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>  <span class="c1">// 以 props 形式将 params 传递给 User 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>也就是说，当<code>props</code>设置为<code>true</code>时，<code>$route.params</code>将被设置为组件的<code>props</code>。</p>
<hr>
<h1 id="函数模式" data-numberify>函数模式<a class="anchor ms-1" href="#函数模式"></a></h1>
<p>将<code>props</code>设置为函数类型，可以在函数中定义传递给组件的<code>props</code>。这种方式可以包括将<code>query</code>、<code>parmas</code>作为<code>props</code>传递，传递静态的<code>props</code>等等。</p>
<p>函数模式的路由<code>props</code>，可以接收到一个<code>route</code>参数，这个参数的与其对应的路由组件实例中的<code>$route</code>类似，可以通过<code>route.query</code>和<code>route.params</code>获取Query参数和路径参数。</p>
<p>基本用法示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/searchUser&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">component</span><span class="o">:</span> <span class="nx">searchUser</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span><span class="p">(</span><span class="nx">route</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">id</span><span class="o">:</span> <span class="nx">route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="nx">route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p><code>props</code>可以使用Lambda表达式定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/searchUsers&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">component</span><span class="o">:</span> <span class="nx">searchUsers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span><span class="o">:</span> <span class="nx">route</span> <span class="p">=&gt;</span> <span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">id</span><span class="o">:</span> <span class="nx">route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="nx">route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}),</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p><code>props</code>可以使用解构赋值或多重解构赋值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/searchUsers&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">component</span><span class="o">:</span> <span class="nx">searchUsers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span><span class="o">:</span> <span class="p">({</span><span class="nx">query</span><span class="o">:</span><span class="p">{</span><span class="nx">id</span><span class="p">,</span> <span class="nx">name</span><span class="p">}})</span> <span class="p">=&gt;</span> <span class="p">({</span><span class="nx">id</span><span class="p">,</span> <span class="nx">name</span><span class="p">}),</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>将所有的<code>query</code>和<code>params</code>作为<code>props</code>传递：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/searchUsers&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">component</span><span class="o">:</span> <span class="nx">searchUsers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span><span class="o">:</span> <span class="p">({</span><span class="nx">query</span><span class="p">,</span> <span class="nx">params</span><span class="p">})</span> <span class="p">=&gt;</span> <span class="p">({...</span><span class="nx">query</span><span class="p">,</span> <span class="p">...</span><span class="nx">params</span><span class="p">}),</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 嵌套路由</title>
      <link>/docs/vue/routers/nested-routes/</link>
      <pubDate>Mon, 25 Sep 2023 04:29:24 +0000</pubDate>
      
      <guid>/docs/vue/routers/nested-routes/</guid>
      <description><![CDATA[Vue 嵌套路由又称多级路由。一些应用程序的UI由多层嵌套的组件组成（即一个路由下又配置了其它几个路由）。通过Vue Router，可以使用嵌套路由]]></description>
      <content:encoded><![CDATA[<p>Vue 嵌套路由又称多级路由。一些应用程序的UI由多层嵌套的组件组成（即一个路由下又配置了其它几个路由）。通过Vue Router，可以使用嵌套路由配置来表达这种关系。</p>
<p>接<a href="../introduction">路由介绍</a>中的案例，为<code>Home</code>组件新增两个路由<code>News</code>和<code>Message</code>。</p>
<hr>
<h1 id="配置嵌套路由" data-numberify>配置嵌套路由<a class="anchor ms-1" href="#配置嵌套路由"></a></h1>
<p>首先是配置Router（<code>router/index.js</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">VueRouter</span> <span class="nx">from</span> <span class="s1">&#39;vue-router&#39;</span>  <span class="c1">// 引入 VueRouter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 引入组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="nx">Home</span> <span class="nx">from</span> <span class="s1">&#39;../pages/Home.vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">About</span> <span class="nx">from</span> <span class="s1">&#39;../pages/About.vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">News</span> <span class="nx">from</span> <span class="s1">&#39;../pages/News.vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Message</span> <span class="nx">from</span> <span class="s1">&#39;../pages/Message.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VueRouter</span><span class="p">)</span>  <span class="c1">// 应用 VueRouter 插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 创建并导出 Router
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="c1">// 一级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/about&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">About</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="c1">// 一级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/home&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">Home</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span> <span class="c1">// 二级路由，路径开头无需加 “/” 分隔符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;news&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">component</span><span class="o">:</span> <span class="nx">News</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span> <span class="c1">// 二级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;message&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">component</span><span class="o">:</span> <span class="nx">Message</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>在Router配置中，<code>routes</code>配置项的每个元素都是一级路由（<code>About</code>和<code>Home</code>）。在每个一级路由中，可以使用<code>children</code>配置项为每个一级路由配置其子路由，也就是二级路由。<code>children</code>配置项的配置方式与<code>routes</code>配置项基本一致。</p>
<p>路由可以配置多个级别，也就是说除了一级路由可以使用<code>children</code>配置二级路由外，二级路由也可以使用<code>children</code>配置三级路由，以此类推。理论上可以配置无限个级别的路由，但是在实际开发过程中，路由最多可能就配置到第六层级。</p>
<hr>
<h1 id="使用嵌套路由" data-numberify>使用嵌套路由<a class="anchor ms-1" href="#使用嵌套路由"></a></h1>
<p>配置完嵌套路由后，需要在对应的组件中使用<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code>来链接和展示。</p>
<p>嵌套路由的使用方式与普通的一级路由一样，都是使用<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code>来链接和展示路由组件。只不过<code>&lt;router-link&gt;</code>在使用时有一些小细节。</p>
<p>如上，在<code>Home</code>组件中为其子路由添加<code>&lt;router-link&gt;</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> 
</span></span><span class="line"><span class="cl">  <span class="na">class</span><span class="o">=</span><span class="s">&#34;list-group-item&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="na">active-class</span><span class="o">=</span><span class="s">&#34;active&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="na">to</span><span class="o">=</span><span class="s">&#34;/home/news&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  News
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> 
</span></span><span class="line"><span class="cl">  <span class="na">class</span><span class="o">=</span><span class="s">&#34;list-group-item&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="na">active-class</span><span class="o">=</span><span class="s">&#34;active&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="na">to</span><span class="o">=</span><span class="s">&#34;/home/message&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  Message
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>可以看出，为<code>News</code>和<code>Message</code>添加的<code>&lt;router-link&gt;</code>，其<code>to</code> Prop配置的都是以<code>/home</code>开头的完整的目录路径。</p>
<p>这是因为，如果使用相对路径，那么路由的路径可能会出错。</p>
<hr>
<h1 id="路由-query-传参" data-numberify>路由 Query 传参<a class="anchor ms-1" href="#路由-query-传参"></a></h1>
<p>路由有了嵌套的关系之后，必然会涉及到父子路由之间数据的传递。Vue Router可以像调用API一样，让路由通过Query的形式传递参数。</p>
<blockquote>
<p>Query传参形式也就是在URL后，以<code>?</code>为开始，使用<code>&amp;</code>分隔每个参数项的参数传递方式。例如：<code>http://localhost:8080/home/user?name=张三</code></p>
</blockquote>
<p>假设现在有个名为<code>MessageDetail</code>的路由组件，该组件是<code>Message</code>的子路由组件，且需要<code>Message</code>给他传递一些消息数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="cm">/* import... */</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">MessageDetail</span> <span class="nx">from</span> <span class="s1">&#39;../pages/MessageDetail.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VueRouter</span><span class="p">)</span>  <span class="c1">// 应用 VueRouter 插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 创建并导出 Router
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="c1">// 一级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/about&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">About</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="c1">// 一级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/home&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">Home</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span> <span class="c1">// 二级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;news&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">component</span><span class="o">:</span> <span class="nx">News</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span> <span class="c1">// 二级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;message&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">component</span><span class="o">:</span> <span class="nx">Message</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="c1">// 三级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;detail&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nx">component</span><span class="o">:</span> <span class="nx">MessageDetail</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><h2 id="传递-query-参数" data-numberify>传递 Query 参数<a class="anchor ms-1" href="#传递-query-参数"></a></h2>
<p>在Vue Router中，使用<code>&lt;router-link&gt;</code>的<code>to</code> prop给Route组件实例传参。<code>&lt;router-link&gt;</code>传递Query参数有两种方式：</p>
<ul>
<li>
<p>字符串拼接：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> 
</span></span><span class="line"><span class="cl">  <span class="na">:to</span><span class="o">=</span><span class="s">&#34;`/home/message/detail?id=${message.id}&amp;title=${message.title}`&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ message.title }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>传入对象：通过<code>v-bind</code>指令给<code>to</code> prop传递一个对象类型的参数。通过这个<code>to</code> prop对象指定传递的Query</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">:to</span><span class="o">=</span><span class="s">&#34;{
</span></span></span><span class="line"><span class="cl"><span class="s">  path: &#39;/home/message/detail&#39;,
</span></span></span><span class="line"><span class="cl"><span class="s">  query: {
</span></span></span><span class="line"><span class="cl"><span class="s">    id: message.id,
</span></span></span><span class="line"><span class="cl"><span class="s">    title: message.title,
</span></span></span><span class="line"><span class="cl"><span class="s">  }
</span></span></span><span class="line"><span class="cl"><span class="s">}&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ message.title }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在<code>to</code> prop对象中的<code>query</code>属性中配置传递的参数以及它们的值。<code>query</code>属性的<code>key</code>是传递的参数的名称，<code>value</code>是传递的参数的值（就像Axios的<code>params</code>配置那样）。</p>
</li>
</ul>
<h2 id="接收-query-参数" data-numberify>接收 Query 参数<a class="anchor ms-1" href="#接收-query-参数"></a></h2>
<p>接收参数需要在对应的路由组件中进行配置。</p>
<p>如上，在<code>MessageDetail</code>路由组件中，使用路由组件实例的<code>$route.query</code>对象接收并获取这些参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">id</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">title</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></div><p>Vue Router的Query参数都会被对应的路由组件的实例中的<code>$route.query</code>对象接收。通过<code>$route.query.argName</code>的形式获取这些参数的值。</p>
<blockquote>
<p>注：</p>
<p>获取Query参数的形式很固定，为了使代码更加简介、书写更加简便，可以如上使用<code>computed</code>属性来接收它们的值。当然还有其它更简便的方法。</p>
<p>在Vue Router中，使用Query形式传递的参数，即使它们在对应的路由组件中没有被使用，依然会被<code>$route.query</code>接收到。</p>
</blockquote>
<hr>
<h1 id="命名路由" data-numberify>命名路由<a class="anchor ms-1" href="#命名路由"></a></h1>
<p>当嵌套路由的路径过长时，在<code>&lt;router-link&gt;</code>的<code>to</code> prop中，就需要配置一串冗长的路径。通过为路由指定<code>name</code>字段，然后在<code>&lt;router-link&gt;</code>的<code>to</code> prop对象中使用<code>name</code>属性指定使用的路由。</p>
<p>修改上例，给<code>MessageDetail</code>的路由添加<code>name</code>，并且在<code>&lt;router-link&gt;</code>使用<code>to</code> prop的<code>name</code>指定它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;MessageDetail&#39;</span><span class="p">,</span>  <span class="c1">// 路由名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;detail&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">component</span><span class="o">:</span> <span class="nx">MessageDetail</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">:to</span><span class="o">=</span><span class="s">&#34;{
</span></span></span><span class="line"><span class="cl"><span class="s">  name: &#39;MessageDetail&#39;,
</span></span></span><span class="line"><span class="cl"><span class="s">  params: {
</span></span></span><span class="line"><span class="cl"><span class="s">    id: message.id,
</span></span></span><span class="line"><span class="cl"><span class="s">    title: message.title,
</span></span></span><span class="line"><span class="cl"><span class="s">  }
</span></span></span><span class="line"><span class="cl"><span class="s">}&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ message.title }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在<code>&lt;router-link&gt;</code>使用<code>to</code> prop的<code>name</code>指定了路由后，就无需使用<code>to</code> prop的<code>path</code>指定一段冗长的路径。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 动态路由匹配</title>
      <link>/docs/vue/routers/dynamic-matching/</link>
      <pubDate>Mon, 25 Sep 2023 04:27:20 +0000</pubDate>
      
      <guid>/docs/vue/routers/dynamic-matching/</guid>
      <description><![CDATA[在Vue Router中，路由路径有以下几种匹配形式： 静态匹配：即完全按照path中的内容，进行相等匹配。 动态匹配：根据path中定义的路径匹]]></description>
      <content:encoded><![CDATA[<p>在Vue Router中，路由路径有以下几种匹配形式：</p>
<ul>
<li><strong>静态匹配</strong>：即完全按照<code>path</code>中的内容，进行相等匹配。</li>
<li><strong>动态匹配</strong>：根据<code>path</code>中定义的路径匹配规则匹配多个路径。</li>
</ul>
<hr>
<h1 id="路径参数" data-numberify>路径参数<a class="anchor ms-1" href="#路径参数"></a></h1>
<p>Vue中的动态参数匹配使用的是<strong>路径参数匹配</strong>。路径参数是路径中的一个动态字段。路径参数的值会动态变化，根据这些路径参数的值，可以读取相应的数据或展示相应的页面。</p>
<p>例如，有个<code>User</code>组件对所有用户进行渲染，但用户ID不同。使用路径参数，可以让用户ID像路径中的某个资源或目录一样在URL中展示。变换不同的用户ID，就像切换目录一样路由到不同的用户界面。</p>
<p>使用路径参数包含3个步骤：</p>
<ul>
<li>在Router配置文件（<code>router/index.js</code>）中，配置路径参数的匹配规则。</li>
<li>使用<code>&lt;router-link&gt;</code>传递路径参数。</li>
<li>在对应的路由组件中使用<code>$route.params</code>接收路径参数。</li>
</ul>
<h2 id="配置路径参数匹配规则" data-numberify>配置路径参数匹配规则<a class="anchor ms-1" href="#配置路径参数匹配规则"></a></h2>
<p>在Router配置文件的<code>route</code>元素或<code>children</code>中的<code>path</code>属性上配置当前路由的路径参数匹配规则。</p>
<p>例如，在<code>User</code>路由组件中使用路径参数，其路由配置如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">User</span> <span class="nx">from</span> <span class="s1">&#39;../pages/User.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">User</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>如上<code>User</code>的路由规则可以使用<code>/user/zhangsan</code>、<code>/user/lisi</code>等方式映射。</p>
<p>将<a href="../nested-routes/#%e8%b7%af%e7%94%b1-query-%e4%bc%a0%e5%8f%82">嵌套路由 —— 路由 Query 传参</a>中的<code>MessageDetail</code>改为使用路径参数形式传参，其路由配置如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* about route... */</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/home&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">Home</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* news route... */</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;message&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">component</span><span class="o">:</span> <span class="nx">Message</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;:id/:title&#39;</span><span class="p">,</span> <span class="c1">// 路径传参
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="nx">component</span><span class="o">:</span> <span class="nx">MessageDetail</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>在<code>MessageDetail</code>的<code>path</code>中，使用了两个以<code>:</code>为开头的占位符（<code>:id</code>和<code>:title</code>）。<code>:</code>后是当前路径参数的名称（<code>id</code>和<code>title</code>）。</p>
<hr>
<h2 id="传递路径参数" data-numberify>传递路径参数<a class="anchor ms-1" href="#传递路径参数"></a></h2>
<p>传递路径参数的方式与传递Query参数的方式十分相同。传递路径参数也有两种方式：</p>
<ul>
<li>
<p>字符拼接：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">:to</span><span class="o">=</span><span class="s">&#34;`/home/message/${message.id}/${message.title}`&#34;</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>传入对象：与传递Query参数的方式基本相同。不同的是，传递路径参数需要配置的是<code>to</code> prop对象中<code>params</code>属性。并且传递路径参数时不能使用<code>path</code>属性指定路由，必须使用<code>name</code>来指定路由。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">:to</span><span class="o">=</span><span class="s">&#34;{
</span></span></span><span class="line"><span class="cl"><span class="s">  name: &#39;MessageDetail&#39;,
</span></span></span><span class="line"><span class="cl"><span class="s">  params: {
</span></span></span><span class="line"><span class="cl"><span class="s">    id: message.id,
</span></span></span><span class="line"><span class="cl"><span class="s">    title: message.title,
</span></span></span><span class="line"><span class="cl"><span class="s">  },
</span></span></span><span class="line"><span class="cl"><span class="s">}&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ message.title }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在<code>params</code>中配置传递的参数以及它们的值。<code>params</code>属性的<code>key</code>是传递的参数的名称（对应路由配置中占位符里<code>:</code>后的内容），<code>value</code>是传递的参数的值（就像Axios的<code>params</code>配置那样）。</p>
</li>
</ul>
<h2 id="接收路径参数" data-numberify>接收路径参数<a class="anchor ms-1" href="#接收路径参数"></a></h2>
<p>接收路径参数的形式与接收Query参数的形式也十分相似。在对应的路由组件实例中，使用<code>$route.params</code>来接收并获取这些路径参数。</p>
<p>接上例，在<code>MessageDetail</code>中接收并获取路径参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">id</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">title</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在路由实例中，通过<code>$route.params.argName</code>的形式获取路径参数的值。</p>
<blockquote>
<p>注：</p>
<p>获取路径参数的形式很固定，为了使代码更加简介、书写更加简便，可以如上使用<code>computed</code>属性来接收它们的值。当然还有其它更简便的方法。</p>
<p>路径参数需要在路由的<code>path</code>中使用占位符配置，否则Vue Router不会接收到这些路径参数。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 路由</title>
      <link>/docs/vue/routers/introduction/</link>
      <pubDate>Sat, 23 Sep 2023 05:27:36 +0000</pubDate>
      
      <guid>/docs/vue/routers/introduction/</guid>
      <description><![CDATA[Vue.js路由（Router）允许通过不同的URL访问不同的内容。通过Vue Router，可以实现SPA（Single Page web Applicat]]></description>
      <content:encoded><![CDATA[<p>Vue.js路由（Router）允许通过不同的URL访问不同的内容。通过Vue Router，可以实现SPA（Single Page web Application，单页Web应用）。</p>
<p>SPA是指整个Web应用中，只有一个完整的页面。在点击SPA中的导航链接时，浏览器不会刷新页面，而是做页面的局部更新。Vue SPA的数据通过Ajax请求获取。</p>
<p>在使用Router之前，需要理清SPA中Route和Router之间的关系：</p>
<ul>
<li>
<p>Route：指的是SPA的路径与页面（组件）之间的一个对应关系。通常是将路径作为某条特定Route的<code>key</code>，将页面作为该Route的<code>value</code>。</p>
<blockquote>
<p>在前端路由中，Route Value指的是页面（组件）；在后端路由中，Route Value指的是Function。</p>
</blockquote>
</li>
<li>
<p>Router：指的是控制整个SPA中所有的Routes的一个角色。Router需要根据所有的Routes，通过Route Key来给出对应的Route Value。</p>
</li>
</ul>
<hr>
<h1 id="安装-vue-router" data-numberify>安装 Vue Router<a class="anchor ms-1" href="#安装-vue-router"></a></h1>
<p>在Node.js环境中安装<code>vue-router</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm i vue-router
</span></span></code></pre></div><p>需要注意的是，兼容Vue2的<code>vue-router@3</code>，而当前默认安装的是<code>vue-router@4</code>（适用于Vue3），如果在Vue2的环境下，就需要安装<code>vue-router@3</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm i vue-router@3
</span></span></code></pre></div><hr>
<h1 id="配置-router" data-numberify>配置 Router<a class="anchor ms-1" href="#配置-router"></a></h1>
<p>安装完成后，首先需要引入Vue Router：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">VueRouter</span> <span class="nx">from</span> <span class="s1">&#39;vue-router&#39;</span>  <span class="c1">// 引入 VueRouter
</span></span></span></code></pre></div><p>接着就是在Vue中应用Vue Router插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VueRouter</span><span class="p">)</span>  <span class="c1">// 应用 VueRouter 插件
</span></span></span></code></pre></div><p>假设现在要为两个组件<code>Home</code>和<code>About</code>配置路由，那么其Router的基本配置（配置文件可以存放在项目根目录下的<code>router/index.js</code>）如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">VueRouter</span> <span class="nx">from</span> <span class="s1">&#39;vue-router&#39;</span>  <span class="c1">// 引入 VueRouter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 引入组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="nx">Home</span> <span class="nx">from</span> <span class="s1">&#39;../pages/Home.vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">About</span> <span class="nx">from</span> <span class="s1">&#39;../pages/About.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VueRouter</span><span class="p">)</span>  <span class="c1">// 应用 VueRouter 插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 创建并导出 Router
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 路由规则：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/about&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">About</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/home&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">Home</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>在<code>routes</code>中指定的每个路由规则都使用对象来定义，这个对象的<code>path</code>属性定义路由的路径，<code>component</code>属性定义该路径下路由的组件。</p>
<p>路由配置完成后，就可以将其配置在<code>main.js</code>（Vue实例）中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">router</span> <span class="nx">from</span> <span class="s1">&#39;./router&#39;</span> <span class="c1">// 引入 Router
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">productionTip</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">router</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>注：</p>
<ul>
<li>通常，路由组件被存放在项目根目录下的<code>pages</code>文件夹中，而一般组件通常存放在<code>components</code>。</li>
<li>使用路由切换页面时，被切换掉的路由组件，默认会被销毁。再次被切换回来时，才去重新挂载。</li>
<li>每个路由组件实例对象都有自己的<code>$route</code>属性，里面存放着组件自生的路由信息。</li>
<li>整个应用（Vue实例）中只有唯一的一个Router，可以通过路由组件实例对象的<code>$router</code>属性获取。</li>
</ul>
<hr>
<h1 id="使用-router" data-numberify>使用 Router<a class="anchor ms-1" href="#使用-router"></a></h1>
<p>将组件配置在Vue实例之后，就可以在任意组件中使用路由。使用路由时，有两个基本的组件：</p>
<ul>
<li><code>&lt;router-link&gt;</code>：在页面中展示路由链接。该组件会被Vue渲染成<code>&lt;a&gt;</code>标签。</li>
<li><code>&lt;router-view&gt;</code>：根据用户打开的路径，渲染对应的组件。可以将其放在任何地方，以适应你的布局。</li>
</ul>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">active-class</span><span class="o">=</span><span class="s">&#34;active&#34;</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/about&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  About
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">active-class</span><span class="o">=</span><span class="s">&#34;active&#34;</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/home&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  Home
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;&lt;/</span><span class="nt">router-view</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>当点击对应的<code>&lt;router-link&gt;</code>，Vue会根据<code>&lt;router-link&gt;</code>上的<code>to</code>属性，改变应用的路径，并根据<code>to</code>属性将对应的组件渲染到<code>&lt;router-view&gt;</code>的位置上。</p>
<p><code>&lt;router-link&gt;</code>的<code>active-class</code>可以指定一个当<code>&lt;router-link&gt;</code>处于活动状态时的CSS样式。Vue会根据情况，自动将该样式应用到对应的元素中。</p>
<hr>
<h1 id="router-link-的两种模式" data-numberify>Router Link 的两种模式<a class="anchor ms-1" href="#router-link-的两种模式"></a></h1>
<p><code>&lt;router-link&gt;</code>默认是<code>push</code>模式，也就是点击<code>&lt;router-link&gt;</code>后，浏览器会将当前浏览记录<code>push</code>到当前页面的浏览历史记录栈的栈顶。也就是说，<code>push</code>模式的<code>&lt;router-link&gt;</code>可以在浏览器中保存访问历史，让当前应用可以根据历史记录前进后退。</p>
<p><code>&lt;router-link&gt;</code>还支持<code>replace</code>模式，<code>replace</code>模式就是将当前浏览记录替换历史记录栈顶的记录。</p>
<blockquote>
<p>在导航时，<code>push</code>模式会向<code>history</code>添加新记录，而<code>replace</code>模式不会。</p>
</blockquote>
<p><code>&lt;router-link&gt;</code>开启历史记录，可以在<code>&lt;router-link&gt;</code>中使用<code>v-bind</code>将<code>replace</code>设置为<code>true</code>，也就是<code>:replace=&quot;true&quot;</code>。开启<code>replace</code>可以使用简便的写法，直接在<code>&lt;router-link&gt;</code>中添加<code>replace</code>即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> 
</span></span><span class="line"><span class="cl">  <span class="na">replace</span>
</span></span><span class="line"><span class="cl">  <span class="na">active-class</span><span class="o">=</span><span class="s">&#34;active&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="na">to</span><span class="o">=</span><span class="s">&#34;/about&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  About
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>

