<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Vue on Linner&#39;s Blog</title>
    <link>/docs/vue/</link>
    <description>Recent content in Vue on Linner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>Copyright © 2020-2023 Linner. All Rights Reserved.
</copyright>
    <lastBuildDate>Thu, 28 Sep 2023 14:09:10 +0800</lastBuildDate><atom:link href="/docs/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vuex 插件</title>
      <link>/docs/vue/vuex/</link>
      <pubDate>Fri, 22 Sep 2023 10:47:45 +0000</pubDate>
      
      <guid>/docs/vue/vuex/</guid>
      <description><![CDATA[Vuex是由Vue官方开发的一个专为Vue.js开发的状态管理库。Vuex可以集中存储管理应用的所有组件的状态，并以相应的规则保证状态以一种]]></description>
      <content:encoded><![CDATA[<p>Vuex是由Vue官方开发的一个专为Vue.js开发的<u>状态管理库</u>。Vuex可以<u>集中存储管理应用的所有组件的状态</u>，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
<p>Vuex基于“单向数据流”理念：</p>
<p><picture><img class="img-fluid " alt="Vuex 单向数据流示意图" src="/docs/vue/vuex/1695380224992.png" loading="lazy" width="1280" height="866" />
</picture>

</p>
<p>Vuex的工作模式如下：</p>
<p><picture><img class="img-fluid " alt="Vuex 工作模式" src="/docs/vue/vuex/1695380408716.png" loading="lazy" width="701" height="551" />
</picture>

</p>
<p>Vuex应用的核心就是Store（仓库）。Store基本上就是一个容器，它包含着应用中大部分的状态（State）。</p>
<p>使用Vuex也可以实现任意组件间通信。但是官方在文档中提到，如果要构建一个简单的网页应用，使用Vuex可能是繁琐冗余的。</p>
<blockquote>
<p>如果应用够简单，最好不要使用Vuex。一个简单的Store模式就足够了。</p>
<p>如果需要构建一个中大型单页应用，就需要考虑如何更好地在组件外部管理状态，Vuex将会成为自然而然的选择。</p>
</blockquote>
<hr>
<h1 id="安装-vuex" data-numberify>安装 Vuex<a class="anchor ms-1" href="#安装-vuex"></a></h1>
<p>在Node.js环境下，可以运行下方命令安装Vuex：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm i vuex
</span></span></code></pre></div><p>但是需要注意的是，目前不指定Vuex版本的情况下，安装的是<code>vuex@4</code>，而<code>vuex@4</code>适用于Vue3，适用于Vue2的Vuex版本是<code>vuex@3</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装适用于 Vue2 的 Vuex 3</span>
</span></span><span class="line"><span class="cl">npm i vuex@3
</span></span></code></pre></div><p>安装好后，就可以在项目中导入Vuex：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vuex</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span>
</span></span></code></pre></div><p>导入Vuex后，需要在Vue中开启Vuex插件：</p>
<pre tabindex="0"><code>Vue.use(Vuex)
</code></pre><hr>
<h1 id="配置-vuex" data-numberify>配置 Vuex<a class="anchor ms-1" href="#配置-vuex"></a></h1>
<p>Vuex的基本配置如下（Vuex配置文件可以是项目根目录下的<code>vuex/store.js</code>或<code>store/index.js</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vuex</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span> <span class="c1">// 引入 Vuex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">Vuex</span><span class="p">)</span> <span class="c1">// 使用 Vuex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Actions 用于响应组件中的动作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">actions</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Mutations 用于操作数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">mutations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// State 用于存储数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Getters 用于将 State 中的数据进行加工
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">getters</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 创建并导出 Store
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">Vuex</span><span class="p">.</span><span class="nx">Store</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">actions</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mutations</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">state</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getters</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>创建好Store之后，需要将其导入到<code>main.js</code>中，并配置在Vue实例上：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">store</span> <span class="nx">from</span> <span class="s1">&#39;./store&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">store</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>配置好后，当前Vue实例，以及Vue实例下的所有组件，都能通过<code>this.$store</code>访问Store的API。</p>
<hr>
<h1 id="使用-store" data-numberify>使用 Store<a class="anchor ms-1" href="#使用-store"></a></h1>
<p>Store中，常用的API如下：</p>
<ul>
<li><code>$store.dispatch()</code>：将数据分发给对应的Action。</li>
<li><code>$store.commit()</code>：将数据（载荷）提交给对应的Mutation.</li>
</ul>
<p>Store中，常用的数据对象如下：</p>
<ul>
<li><code>$store.state</code>：访问State中的状态数据（可以认为是一个全局的<code>data</code>）。</li>
<li><code>$store.getters</code>：对State中的状态数据进行相应处理，并获取对应的处理结果（可以认为是一个全局的，没有Setter的<code>computed</code>）。</li>
</ul>
<h2 id="dispatch" data-numberify>dispatch<a class="anchor ms-1" href="#dispatch"></a></h2>
<p><code>$store.dispatch(actionName, data)</code>：</p>
<ul>
<li><code>actionName</code>：指定一个Action的名称，<code>String</code>类型。对应<code>store</code>配置中<code>actions</code>配置对象下的一个相同名称的方法<code>actionName()</code>。</li>
<li><code>data</code>：分发给<code>actionName()</code>的数据，任意类型。<code>actionName()</code>使用第2个形参<code>value</code>接收。</li>
</ul>
<p>每一个Action，在<code>actions</code>中都有一个与之对应的方法。在组件实例中，使用<code>$store.dispatch()</code>来将数据分发给对应的Action方法处理。每个Action都有一个唯一的<code>actionName</code>。</p>
<blockquote>
<p>通常，actionName是以小驼峰规则命名。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;demoAction&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span></code></pre></div><p><code>demoAction</code>对应的Action：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">actions</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">demoAction</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* demoAction的处理逻辑... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>context</code>是一个上下文对象，每一个Action都会接收到这个参数。<code>context</code>封装了<code>$store</code>中的一些方法。通过<code>context</code>，可以将当前处理转发给其它Action，或是将处理提交到某个Mutation。</p>
<p><code>context</code>中封装了如下方法和对象：</p>
<ul>
<li><code>context.dispatch()</code></li>
<li><code>context.commit()</code></li>
<li><code>context.state</code></li>
<li><code>context.getters</code></li>
</ul>
<p>这些方法和对象的用法与<code>$store</code>中的相同。</p>
<blockquote>
<p><code>context</code>可以看作是一个小型的<code>$store</code>，它封装了<code>$store</code>中常用的方法和对象。使用者可以根据处理逻辑（上下文）调用<code>context</code>中的方法，所以才命名为<code>context</code>。</p>
<p>在Action中，应该将<code>context.state</code>视为只读的。因为Action的职责不是对状态进行修改，并且Vue.js devtools（Vue.js开发者工具）捕获不到Action对<code>context.state</code>的修改（尽管这些修改可能会生效），所以应该尽量避免在Action中对<code>context.state</code>的修改。</p>
</blockquote>
<p>通常情况下，Action是用来对数据进行一些校验或简单的处理，然后将数据转派给下一个Action或提交给某个Mutation。</p>
<p><code>$store.dispatch()</code>在调用时可以仅传递一个参数，也就是<code>actionName</code>。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;plusOne&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="commit" data-numberify>commit<a class="anchor ms-1" href="#commit"></a></h2>
<p><code>$store.commit(mutationName, payload)</code>：</p>
<ul>
<li><code>mutationName</code>：指定一个Mutation的名称（事件类型），<code>String</code>类型。对应<code>store</code>配置中<code>mutations</code>配置对象下的一个相同名称的方法<code>mutationName()</code>。</li>
<li><code>payload</code>：提交给<code>mutationName()</code>的数据（载荷），任意类型。<code>mutationName()</code>使用第2个形参<code>value</code>接收。</li>
</ul>
<blockquote>
<p>通常，mutationName是以全大写+下划线规则命名。</p>
</blockquote>
<p><code>$store.commit()</code>的用法和<code>$store.dispatch()</code>十分相似，不同的是<code>$store.commit()</code>是将载荷提交给某个Mutation。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;demoMutation&#39;</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span>
</span></span></code></pre></div><p><code>demoMutation</code>对应的Mutation：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mutations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">demoMutation</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* demoMutation的处理逻辑... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>state</code>即对应Store配置中的<code>state</code>配置对象（相当于<code>$store.state</code>）。每一个Mutation都会接收到这个<code>state</code>对象。通过<code>state</code>对象，Mutation可以获取State中的状态数据，并对状态数据进行编辑。</p>
<p>与Action不同，Mutation通常是作为状态数据处理的角色存在。Mutation可以直接修改State中的数据；而Action通常不修改State中的数据，Action一般只是读取State中的数据。</p>
<blockquote>
<p>Action不用作修改数据还有一个原因，如果在Action中修改State中的数据，Vue.js devtools并不能捕获到这些修改。即使在Action对State的修改能生效，也不建议在Action中对State进行修改，在Actions中，应该将State（<code>context.$state</code>）视为只读的。</p>
</blockquote>
<p>一般情况下（官方给的示意图中），Store对数据的处理流程是：<code>$store.dispatch</code> $\Rightarrow$ <code>$store.commit</code>。实际上，对一些简单的操作，不需要对传递的数据进行校验或处理的情况下，可以在组件实例中直接调用<code>$store.commit</code>将数据提交给Mutation处理。</p>
<p><code>$store.commit()</code>在调用时可以仅传递一个参数，也就是<code>mutationName</code>。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;plusOne&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="state" data-numberify>state<a class="anchor ms-1" href="#state"></a></h2>
<p>在组件中读取State中的数据，可以通过<code>this.$store.state.dataName</code>的形式读取（<code>dataName</code>指要读取的数据）。需要注意的是，在组件实例中不要修改State中的数据。也就是说，在组件实例中应该将<code>this.$store.state</code>视为只读。</p>
<p>例如在Store的<code>state</code>配置项中定义一个状态数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">siteTitle</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// 网站的标题
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>在组件实例中获取<code>state</code>中的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span>
</span></span></code></pre></div><p>在组件实例中推荐使用<code>computed</code>来获取<code>state</code>中的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">siteTitle</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>也可以通过<code>computed</code>的Setter来修改<code>state</code>中的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">siteTitle</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">set</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;SET_SITE_TITLE&#39;</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mutations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">SET_SITE_TITLE</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span> <span class="o">=</span> <span class="nx">payload</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>接着，就可以在组件实例中，像使用一般的数据一样，对<code>siteTitle</code>进行各种操作。</p>
<hr>
<h2 id="getters" data-numberify>getters<a class="anchor ms-1" href="#getters"></a></h2>
<p><code>$store.getters</code>就像是一个全局的<code>computed</code>，可以在获取State中的数据之前，对数据进行一些处理。但与<code>computed</code>不同的是，<code>getters</code>只能用于获取，不能用于修改数据。</p>
<p>在Store的<code>getters</code>配置中，每个<code>getter</code>以函数的形式被定义，且每个<code>getter</code>接收一个<code>state</code>参数。这个<code>state</code>参数用于获取State中的数据。</p>
<p>每个<code>getter</code>都有一个唯一的名称，并且就像<code>computed</code>一样，在Vue实例中使用<code>this.$store.getterName</code>来获取相应的<code>getter</code>，<code>getterName</code>与<code>getter</code>定义时的函数名称相同。<code>getter</code>同样也是使用返回值来确定值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getters</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">demoGetter</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* demoGetter 的处理逻辑... */</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="cm">/* demoGetter 的值 */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>例如要获取一个转为大写的<code>siteTitle</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getters</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">siteTitleUpperCase</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在组件实例中获取该值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">gettets</span><span class="p">.</span><span class="nx">siteTitleUpperCase</span>
</span></span></code></pre></div><p>同样可以使用<code>computed</code>来读取该值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">siteTitleUpperCase</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">gettets</span><span class="p">.</span><span class="nx">siteTitleUpperCase</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="vuex-映射" data-numberify>Vuex 映射<a class="anchor ms-1" href="#vuex-映射"></a></h1>
<p>在组件实例中，使用Store中的<code>state</code>和<code>getter</code>时，配合<code>computed</code>可以使代码更加精简。而Vuex原型正好提供了一些辅助的API，可以在组件实例中快速地为<code>state</code>和<code>getters</code>中的数据创建对应的<code>computed</code>。</p>
<ul>
<li><code>mapState()</code></li>
<li><code>mapGetters()</code></li>
<li><code>mapMutations()</code></li>
<li><code>mapActions()</code></li>
</ul>
<p>在使用这些辅助函数之前，需要先引入。这些辅助函数的引入方法都是相同的，下面进行例举了辅助函数的引入方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">mapState</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span> <span class="c1">// 引入 mapState
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">mapState</span><span class="p">,</span> <span class="nx">mapGetters</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span> <span class="c1">// 引入 mapState 和 mapGetters
</span></span></span></code></pre></div><h2 id="mapstate" data-numberify>mapState<a class="anchor ms-1" href="#mapstate"></a></h2>
<p><code>mapState()</code>可以将State中的数据映射到组件实例中的<code>computed</code>中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="nx">mapState</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr1</span><span class="o">:</span> <span class="s1">&#39;stateAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr2</span><span class="o">:</span> <span class="s1">&#39;stateAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr3</span><span class="o">:</span> <span class="s1">&#39;stateAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}),</span>
</span></span></code></pre></div><p>或者使用对象扩展运算符：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">...</span><span class="nx">mapState</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computedAttr1</span><span class="o">:</span> <span class="s1">&#39;stateAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computedAttr2</span><span class="o">:</span> <span class="s1">&#39;stateAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computedAttr3</span><span class="o">:</span> <span class="s1">&#39;stateAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}),</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>上方所示的两个<code>mapState()</code>相当于在<code>computed</code>中进行如下定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr1</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr1</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr2</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr3</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr3</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>也就是说，<code>mapState()</code>返回的是一个类似于<code>computed</code>配置对象的对象。这个对象中的每个属性都是函数类型，相当于一个个设置了Setter的<code>computed</code>属性。</p>
<p>使用<code>mapState()</code>生成的<code>computed</code>被称为<code>vuex bindings</code>（可以在Vue开发者工具中查看）。</p>
<p><code>mapState()</code>可以传入两种类型的参数：</p>
<ul>
<li>
<p>一种就是如上所示的<code>Object</code>类型参数。</p>
<p>传入的对象中，其每个属性的<code>key</code>是作为实例中的<code>computed</code>属性名称，每个属性的<code>value</code>以<code>String</code>类型的形式指定了State中某个属性的名称。</p>
<p>该方式通过传入对象中的每个属性的<code>value</code>指定State中的属性，然后以每个属性的<code>key</code>作为它们的<code>computed</code>属性来生成<code>vuex bindings</code>。</p>
</li>
<li>
<p>另一种方式就是传入字符串数组类型的参数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">mapState</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;stateAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;stateAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;stateAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">]),</span>
</span></span></code></pre></div><p>这种方式通过字符串数组指定一系列要作为<code>computed</code>（<code>vuex binding</code>）属性使用的State属性。这种方式可以直接使用对应State属性的名称来使用这些<code>vuex binding</code>属性。</p>
<p>上方<code>mapState()</code>相当于在<code>computed</code>中配置了以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">stateAttr1</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr1</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="nx">stateAttr2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr2</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="nx">stateAttr3</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr3</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="mapgetters" data-numberify>mapGetters<a class="anchor ms-1" href="#mapgetters"></a></h2>
<p><code>mapGetters()</code>可以将<code>getters</code>中的数据映射到组件实例中的<code>computed</code>中。生成的属性同样被称为<code>vuex bindings</code>。</p>
<p><code>mapGetters()</code>的用法和<code>mapState()</code>几乎相同，它们都可以传入两种类型的参数，并且返回值也是一个属性都为函数类型的对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">mapGetters</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr1</span><span class="o">:</span> <span class="s1">&#39;gettersAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr2</span><span class="o">:</span> <span class="s1">&#39;gettersAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr3</span><span class="o">:</span> <span class="s1">&#39;gettersAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">mapGetters</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;gettersAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;gettersAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;gettersAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span></code></pre></div><p>上述两种使用方式，都是相当于在<code>computed</code>进行如下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr1</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">getters</span><span class="p">.</span><span class="nx">gettersAttr1</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">getters</span><span class="p">.</span><span class="nx">gettersAttr2</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr3</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">getters</span><span class="p">.</span><span class="nx">gettersAttr3</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="mapmutations" data-numberify>mapMutations<a class="anchor ms-1" href="#mapmutations"></a></h2>
<p><code>mapMutations()</code>用于在<code>methods</code>中快速生成提交（<code>commit</code>）对应Mutations事件的方法。<code>mapMutations()</code>同样拥有两种形参类型。</p>
<p><code>mapMutations()</code>作用于<code>methods</code>，但是用法基本上与<code>mapState()</code>和<code>mapGetters()</code>相同。并且<code>mapMutations()</code>传入的也是一个属性为<code>function</code>类型的对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="nx">mapMutations</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">increment</span><span class="o">:</span> <span class="s1">&#39;INCREMENT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">decrement</span><span class="o">:</span> <span class="s1">&#39;DECREMENT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}),</span>
</span></span></code></pre></div><p>相当于在<code>methods</code>中进行如下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">increment</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;INCREMENT&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">decrement</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;DECREMENT&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>所以在调用或者绑定事件时，需要以<code>increment()</code>或<code>increment(value)</code>的形式。否则，以<code>increment</code>（如<code>@click=&quot;increment&quot;</code>）的形式绑定事件，传入的<code>value</code>参数就是当前绑定事件的对象（可能会造成数据错误）。</p>
<p><code>mapMutations()</code>数组参数写法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="nx">mapMutations</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;INCREMENT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;DECREMENT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]),</span>
</span></span></code></pre></div><p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">INCREMENT</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;INCREMENT&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">DECREMENT</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;DECREMENT&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="mapactions" data-numberify>mapActions<a class="anchor ms-1" href="#mapactions"></a></h2>
<p><code>mapActions()</code>用于在<code>methods</code>中快速生成分发（<code>dispatch</code>）对应Action的方法。</p>
<p><code>mapMutations()</code>的用法基本上与<code>mapMutations()</code>相同。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="nx">mapActions</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">increment</span><span class="o">:</span> <span class="s1">&#39;increment&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">decrement</span><span class="err">：</span><span class="s1">&#39;decrement&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}),</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="nx">mapActions</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;increment&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;decrement&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]),</span>
</span></span></code></pre></div><p>上述两种方式相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">increment</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;increment&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">decrement</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;decrement&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>同样使用<code>increment()</code>或<code>increment(value)</code>的形式调用或绑定事件。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 过渡和动画</title>
      <link>/docs/vue/animations/</link>
      <pubDate>Wed, 20 Sep 2023 09:47:53 +0000</pubDate>
      
      <guid>/docs/vue/animations/</guid>
      <description><![CDATA[Vue封装了一套可以快速构建基于状态变化的过渡和过度与动画的组件&lt;transition&gt;（&lt;Transition&gt;）]]></description>
      <content:encoded><![CDATA[<p>Vue封装了一套可以快速构建基于状态变化的过渡和过度与动画的组件<code>&lt;transition&gt;</code>（<code>&lt;Transition&gt;</code>）和<code>&lt;transition-group&gt;</code>（<code>&lt;TransitionGroup&gt;</code>）。</p>
<p><code>&lt;transition&gt;</code>和<code>&lt;transition-group&gt;</code>是Vue内置的组件，无需注册即可使用。它们可以将进入和离开的动画应用到通过默认插槽传递给它的元素或组件上。</p>
<p>它们的进入/离开动画的切换可以由<code>v-if</code>或<code>v-show</code>所触发。</p>
<hr>
<h1 id="transition-组件" data-numberify>Transition 组件<a class="anchor ms-1" href="#transition-组件"></a></h1>
<p><code>&lt;transition&gt;</code>用于在一个元素或组件进入和离开DOM时应用动画。</p>
<p>最基本的用法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;isShow = !isShow&#34;</span><span class="p">&gt;</span>显示/隐藏<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">    &lt;transition&gt; 用于给元素自动加上动画效果
</span></span></span><span class="line"><span class="cl"><span class="c">   --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">transition</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;isShow&#34;</span><span class="p">&gt;</span>Hello Vue.js!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">transition</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isShow</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">h1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="kc">orange</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">v-enter-active</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">animation</span><span class="p">:</span> <span class="n">fade</span> <span class="mi">1</span><span class="kt">s</span> <span class="kc">linear</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">v-leave-active</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">animation</span><span class="p">:</span> <span class="n">fade</span> <span class="mi">1</span><span class="kt">s</span> <span class="kc">linear</span> <span class="kc">reverse</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="k">keyframes</span> <span class="nt">fade</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">from</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">-100</span><span class="kt">%</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nt">to</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">0</span><span class="kt">px</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>当<code>&lt;transition&gt;</code>中的元素被显示或隐藏时，Vue会在适当的时机自动将一些CSS过渡<code>class</code>往目标元素上添加或移除。</p>
<blockquote>
<p><code>&lt;transition&gt;</code>仅支持单个元素或组件作为其插槽内容。如果内容是一个组件，该组件必须仅有一个根元素。</p>
</blockquote>
<hr>
<h1 id="css-过渡-class" data-numberify>CSS 过渡 class<a class="anchor ms-1" href="#css-过渡-class"></a></h1>
<p>Vue中一共有6种应用于进入与离开过度效果的 CSS <code>class</code>：</p>
<p>Vue2的CSS过渡<code>class</code>：</p>
<p><picture><img class="img-fluid " alt="Vue2 CSS 过渡 class" src="/docs/vue/animations/1695255059938.png" loading="lazy" width="1200" height="600" />
</picture>

</p>
<p>Vue3的CSS过渡<code>class</code>：</p>
<p><picture><img class="img-fluid " alt="Vue3 CSS 过渡 class" src="/docs/vue/animations/1695253388660.png" loading="lazy" width="1376" height="700" />
</picture>

</p>
<ul>
<li><code>v-enter</code>（Vue2）/ <code>v-enter-from</code>（Vue3）：进入动画的起始状态。在元素插入之前添加，在元素插入完成后的下一帧移除。</li>
<li><code>v-enter-active</code>：进入动画的生效状态。应用于整个进入动画阶段。在元素被插入之前添加，在过渡或动画完成之后移除。这个<code>class</code>可以被用来定义进入动画的持续时间、延迟与速度曲线类型。</li>
<li><code>v-enter-to</code>（<code>2.1.8</code>版及以上）：进入动画的结束状态。在元素插入完成后的下一帧被添加 (也就是<code>v-enter-from</code>被移除的同时)，在过渡或动画完成之后移除。</li>
<li><code>v-leave</code>（Vue2）/ <code>v-leave-from</code>（Vue3）：离开动画的起始状态。在离开过渡效果被触发时立即添加，在一帧后被移除。</li>
<li><code>v-leave-active</code>：离开动画的生效状态。应用于整个离开动画阶段。在离开过渡效果被触发时立即添加，在过渡或动画完成之后移除。这个<code>class</code>可以被用来定义离开动画的持续时间、延迟与速度曲线类型。</li>
<li><code>v-leave-to</code>（<code>2.1.8</code>版及以上）：离开动画的结束状态。在一个离开动画被触发后的下一帧被添加 (也就是<code>v-leave-from</code>被移除的同时)，在过渡或动画完成之后移除。</li>
</ul>
<blockquote>
<p>注：Vue3将过渡类名<code>v-enter</code>修改为<code>v-enter-from</code>，将过渡类名<code>v-leave</code>修改为<code>v-leave-from</code>。</p>
</blockquote>
<hr>
<h1 id="过度效果命名" data-numberify>过度效果命名<a class="anchor ms-1" href="#过度效果命名"></a></h1>
<p><code>&lt;transition&gt;</code>和<code>&lt;transition-group&gt;</code>有一个名为<code>name</code>的<code>prop</code>，它可以为过渡效果命名，并将该名称作用于其一系列CSS过渡<code>class</code>的名称前缀。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">transition</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;fade&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">transition</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>那么其一系列的CSS过渡<code>class</code>的名称如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="c">/* 进入的起点 和 离开的终点 */</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-enter</span> <span class="c">/* 或 .fade-enter-from */</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-leave-to</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">-100</span><span class="kt">%</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">/* 进入 和 离开的过程 */</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-enter-active</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-leave-active</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">transition</span><span class="p">:</span> <span class="mf">0.5</span><span class="kt">s</span> <span class="kc">linear</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">/* 进入的终点 和 离开的起点 */</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-enter-to</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-leave</span> <span class="c">/* 或 .fade-leave-from */</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="自定义过渡-class" data-numberify>自定义过渡 class<a class="anchor ms-1" href="#自定义过渡-class"></a></h1>
<p>可以向<code>&lt;transition&gt;</code>和<code>&lt;transition-group&gt;</code>传递以下的<code>props</code>来指定自定义的过渡<code>class</code>。</p>
<ul>
<li><code>enter-class</code>（Vue2）/ <code>enter-from-class</code>（Vue3）：定义目标元素<u>进入动画起点</u>的过渡<code>class</code>。</li>
<li><code>enter-active-class</code>：定义目标元素<u>进入动画过程</u>的过渡<code>class</code>。</li>
<li><code>enter-to-class</code>（<code>2.1.8+</code>）：定义目标元素<u>进入动画终点</u>的过渡<code>class</code>。</li>
<li><code>leave-class</code>（Vue2）/ <code>leave-from-class</code>（Vue3）：定义目标元素<u>离开动画起点</u>的过渡<code>class</code>。</li>
<li><code>leave-active-class</code>：定义目标元素<u>离开动画过程</u>的过渡<code>class</code>。</li>
<li><code>leave-to-class</code>（<code>2.1.8+</code>）：定义目标元素<u>离开动画终点</u>的过渡<code>class</code>。</li>
</ul>
<p>传入的这些<code>class</code>会覆盖相应阶段的默认<code>class</code>名。这个功能在Vue的动画机制下集成其他的第三方CSS动画库时非常有用。</p>
<p>例如使用<code>animate.css</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;isShow = !isShow&#34;</span><span class="p">&gt;</span>显示/隐藏<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">transition</span>
</span></span><span class="line"><span class="cl">    <span class="na">appear</span>
</span></span><span class="line"><span class="cl">    <span class="na">name</span><span class="o">=</span><span class="s">&#34;animate__animated animate__bounce&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">enter-active-class</span><span class="o">=</span><span class="s">&#34;animate__swing&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">leave-active-class</span><span class="o">=</span><span class="s">&#34;animate__backOutUp&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;!isShow&#34;</span><span class="p">&gt;</span>Hello Vue.js!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">transition</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="s1">&#39;animate.css&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isShow</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">h1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="kc">orange</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="transitiongroup-组件" data-numberify>TransitionGroup 组件<a class="anchor ms-1" href="#transitiongroup-组件"></a></h1>
<p><code>&lt;transition-group&gt;</code>支持和<code>&lt;transition&gt;</code>基本相同的<code>props</code>、CSS过渡<code>class</code>和JavaScript钩子监听器，但有以下几点区别：</p>
<ul>
<li>默认情况下，它不会渲染一个容器元素。但可以通过传入<code>tag</code> prop来指定一个元素作为容器元素来渲染。</li>
<li>过渡模式在这里不可用，因为我们不再是在互斥的元素之间进行切换。</li>
<li><code>&lt;transition-group&gt;</code>中渲染的每个元素都必须有一个唯一的<code>key</code>属性值。</li>
<li>CSS过渡<code>class</code>会被应用在列表内的元素上，而不是容器元素上。</li>
</ul>
<p><code>&lt;transition-group&gt;</code>用于同时渲染多个元素，通常情况下渲染的是列表元素。被<code>&lt;transition-group&gt;</code>渲染的每个元素都需要有一个我i唯一的<code>key</code>属性值。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 插件</title>
      <link>/docs/vue/plugins/</link>
      <pubDate>Mon, 18 Sep 2023 01:48:20 +0000</pubDate>
      
      <guid>/docs/vue/plugins/</guid>
      <description><![CDATA[Vue插件主要用于增强Vue。 定义插件 在Vue中，插件的本质是一个包含install()方法的对象。 install()方法： 参数1：Vue原]]></description>
      <content:encoded><![CDATA[<p>Vue插件主要用于增强Vue。</p>
<hr>
<h1 id="定义插件" data-numberify>定义插件<a class="anchor ms-1" href="#定义插件"></a></h1>
<p>在Vue中，插件的本质是一个包含<code>install()</code>方法的对象。</p>
<p><code>install()</code>方法：</p>
<ol>
<li>参数1：Vue原型对象.</li>
<li>参数2 ~ n：第二个参数开始之后的参数（包括第二个）是插件使用者传递的数据。</li>
</ol>
<p>定义一个简单的插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * plugins.js
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Vue 插件
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">myPlugin</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">install</span><span class="p">(</span><span class="nx">Vue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello my plugin!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Vue</span><span class="p">);</span> <span class="c1">// 获取 Vue 原型对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* 
</span></span></span><span class="line"><span class="cl"><span class="cm">      可以在插件中使用 Vue 原型对象定义一些全局的配置
</span></span></span><span class="line"><span class="cl"><span class="cm">      例如定义全局过滤器、全局指令、全局混入，在Vue原型添加方法等等...
</span></span></span><span class="line"><span class="cl"><span class="cm">      甚至可以在插件中启用其它插件
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>接收参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">plugin</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">install</span><span class="p">(</span><span class="nx">Vue</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="使用插件" data-numberify>使用插件<a class="anchor ms-1" href="#使用插件"></a></h1>
<p>要使用插件需要以下两个步骤：</p>
<ol>
<li>引入插件。</li>
<li>使用<code>Vue.use()</code>方法使插件生效。</li>
</ol>
<p><code>Vue.use()</code>方法：</p>
<ol>
<li>参数1：要启用的插件的配置对象。</li>
<li>参数2 ~ n：要传递给插件的参数，这些参数会传递给插件的<code>install()</code>中的参数2 ~ n。</li>
</ol>
<p>例如使用上方定义的插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * main.js
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 引入插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span><span class="nx">myPlugin</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./plugins&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 使用插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">myPlugin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">productionTip</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">render</span><span class="o">:</span> <span class="nx">h</span> <span class="p">=&gt;</span> <span class="nx">h</span><span class="p">(</span><span class="nx">App</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>使用时传入参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">myPlugin</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 入门</title>
      <link>/docs/vue/introduction/</link>
      <pubDate>Sat, 19 Aug 2023 07:36:10 +0000</pubDate>
      
      <guid>/docs/vue/introduction/</guid>
      <description><![CDATA[Vue.js 是一套构建用户界面的渐进式框架。Vue 只关注视图层，采用自底向上增量开发的设计。Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的]]></description>
      <content:encoded><![CDATA[<p>Vue.js 是一套构建用户界面的渐进式框架。Vue 只关注视图层，采用自底向上增量开发的设计。Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
<p>在学习Vue之前需要了解HTML、CSS和JavaScript。</p>
<p>Vue的特点：</p>
<ul>
<li>
<p>采用组件化模式，提高代码复用率、且让代码更好维护。</p>
</li>
<li>
<p>采用声明式编码，让编码人员无需直接操作DOM，提高开发效率。</p>
<p>使用传统JS操作DOM属于命令式编码。</p>
</li>
<li>
<p>使用虚拟DOM和优秀的Diff算法，尽量复用DOM节点。</p>
</li>
</ul>
<p>Vue官网为：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener noreferrer">https://cn.vuejs.org/<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<hr>
<h1 id="安装-vue" data-numberify>安装 Vue<a class="anchor ms-1" href="#安装-vue"></a></h1>
<p>安装Vue的方式有很多，可以在<a href="https://v2.cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener noreferrer">Vue2文档<i class="fas fa-external-link-square-alt ms-1"></i></a>中查阅。</p>
<p>其中最简单的方式就是通过<code>&lt;script&gt;</code>标签引入。通过<code>&lt;script&gt;</code>标签，可以直接使用Vue CDN引入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>通常引入的Vue有两种版本：</p>
<ul>
<li>
<p>开发版本：包含完整的警告和调试模式。如上方引入的即为<code>vue@2.7.14</code>的开发版本。</p>
</li>
<li>
<p>生产版本：删除了警告。通常Vue开发版本的文件名为<code>vue.min.js</code>。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
</ul>
<p>在使用Vue时，通常会在浏览器中安装Vue的开发者工具插件：<a href="https://github.com/vuejs/devtools#vue-devtools" target="_blank" rel="noopener noreferrer">https://github.com/vuejs/devtools#vue-devtools<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<hr>
<h1 id="hello" data-numberify>Hello<a class="anchor ms-1" href="#hello"></a></h1>
<p>下方演示了Vue的基本使用方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Hello Vue<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;root&#34;</span><span class="p">&gt;</span> <span class="c">&lt;!-- Vue 容器 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello, {{name}}<span class="c">&lt;!-- 插值表达式 --&gt;</span>!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">      阻止 vue 在启动时生成生产提示
</span></span></span><span class="line"><span class="cl"><span class="cm">      Vue 2.x 中可能不会生效，直接修改 Vue 源码
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">productionTip</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建 Vue 实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#root&#39;</span><span class="p">,</span>  <span class="c1">// 将实例与容器进行绑定
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="c1">// data 中用于存储数据，存储的数据供 el 所指定的容器使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Vue.js&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>Hello实例中的一些关键点：</p>
<ul>
<li>
<p>Vue 容器：</p>
<ul>
<li>
<p>容器中的代码依然符合 HTML 规范，只不过混入了一些特殊的 Vue 语法。</p>
</li>
<li>
<p>容器中的代码被称为 Vue模板。</p>
</li>
<li>
<p>插值语法：在HTML标签体中，使用两个花括号<code>{{ }}</code>将JS表达式引起来。与语句不同的是，表达式指可以生成值的语句，这个语句可以放在任何需要值的地方。</p>
<p>也就是说插值表达式一定需要有值（或返回值）。</p>
<p>插值表达式中的变量、方法都是在对应 Vue实例 的 <code>data</code> 中定义的。当<code>data</code>发生了改变，页面中对应的数据也会发生改变。</p>
<blockquote>
<p>插值是，Vue模板语法中的一种。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Vue 实例：Vue 实例用于解析 Vue 容器，Vue 实例会根据配置对象的信息去解析对应的模板。创建Vue 实例时需要传入一个配置对象。</p>
<ul>
<li>
<p><code>el</code>属性：将实例与容器进行绑定，<code>el</code> 的值通常为 CSS 选择器字符串。</p>
<p><code>el</code>属性中传入的值也可以是具体的Element对象，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">)</span> <span class="c1">// el 还可以这么绑定
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p><code>data</code>：<code>data</code> 中用于存储数据（对象或方法），存储的数据供 <code>el</code> 所指定的容器使用。<code>data</code> 可以是对象或函数。</p>
</li>
</ul>
<p>Vue实例和Vue容器是一对一关系。当一个实例的<code>el</code>配置有多个与之对应的容器时，Vue不会报错，但页面显示会有问题；当一个容器被多个实例指定时，Vue会报错。</p>
<p>真实开发中只有一个Vue实例，并且会配合着组件一起使用。</p>
</li>
</ul>
<hr>
<h1 id="创建-vue-实例的另一种方式" data-numberify>创建 Vue 实例的另一种方式<a class="anchor ms-1" href="#创建-vue-实例的另一种方式"></a></h1>
<p>在创建Vue实例时，可以不用立即指定<code>el</code>来绑定容器。</p>
<p>可以通过<code>vm.$mount()</code>来绑定容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello {{name}}!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Linner&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 $mount() 绑定容器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">vm</span><span class="p">.</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p><code>vm.$mount()</code>是Vue原型对象上的一个方法。</p>
</blockquote>
<hr>
<h1 id="数据对象的函数式写法" data-numberify>数据对象的函数式写法<a class="anchor ms-1" href="#数据对象的函数式写法"></a></h1>
<p>Vue实例中的<code>data</code>不仅可以作为对象去定义，还能作为函数去定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello {{name}}!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 函数式 data，将返回值作为数据对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">data</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">         * data() 的 this 是当前的Vue实例对象
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 定义data()时不要使用箭头函数
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 如果将data()定义为箭头函数，那么this就不再是当前Vue的实例对象了
</span></span></span><span class="line"><span class="cl"><span class="cm">         */</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Linner&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="mvvm-模型" data-numberify>MVVM 模型<a class="anchor ms-1" href="#mvvm-模型"></a></h1>
<p>Vue是在MVVM模型的基础上进行设计，MVVM模型包含以下3个部分：</p>
<ul>
<li><strong>M</strong>（Model）：模型，对应Vue实例<code>data</code>中的数据。</li>
<li><strong>V</strong>（View）：模板，即Vue容器。</li>
<li><strong>VM</strong>（View Model）：视图模型，对应Vue实例对象。</li>
</ul>
<p><picture><img class="img-fluid " alt="Vue 和 MVVM 模型" src="/docs/vue/introduction/uTools_1692692952621.png" loading="lazy" width="770" height="409" />
</picture>

</p>
<ul>
<li>DOM Listeners：DOM监听器，监听View中数据的改变，并根据Data Bindings指定的关系，将View中被修改的数据在Model中做相应的改变。</li>
<li>Data Bindings：数据绑定，将View与Model中对应的数据进行绑定，表示视图与模型间的一种对应关系。</li>
</ul>
<p>在代码中，Vue和MVVM模型的对应关系如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Hello Vue<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span> <span class="c">&lt;!-- View --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello, {{name}}!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 在代码中，可以使用vm代表Vue实例，vm表示View Model
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span> <span class="c1">// View Model
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="c1">// Model
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Vue.js&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">vm</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>

