<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Vue on Linner&#39;s Blog</title>
    <link>/docs/vue/</link>
    <description>Recent content in Vue on Linner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>Copyright © 2020-2023 Linner. All Rights Reserved.
</copyright>
    <lastBuildDate>Fri, 22 Sep 2023 10:47:45 +0000</lastBuildDate><atom:link href="/docs/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vuex 插件</title>
      <link>/docs/vue/vuex/</link>
      <pubDate>Fri, 22 Sep 2023 10:47:45 +0000</pubDate>
      
      <guid>/docs/vue/vuex/</guid>
      <description><![CDATA[Vuex是由Vue官方开发的一个专为Vue.js开发的状态管理库。Vuex可以集中存储管理应用的所有组件的状态，并以相应的规则保证状态以一种]]></description>
      <content:encoded><![CDATA[<p>Vuex是由Vue官方开发的一个专为Vue.js开发的<u>状态管理库</u>。Vuex可以<u>集中存储管理应用的所有组件的状态</u>，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
<p>Vuex基于“单向数据流”理念：</p>
<p><picture><img class="img-fluid " alt="Vuex 单向数据流示意图" src="/docs/vue/vuex/1695380224992.png" loading="lazy" width="1280" height="866" />
</picture>

</p>
<p>Vuex的工作模式如下：</p>
<p><picture><img class="img-fluid " alt="Vuex 工作模式" src="/docs/vue/vuex/1695380408716.png" loading="lazy" width="701" height="551" />
</picture>

</p>
<p>Vuex应用的核心就是Store（仓库）。Store基本上就是一个容器，它包含着应用中大部分的状态（State）。</p>
<p>使用Vuex也可以实现任意组件间通信。但是官方在文档中提到，如果要构建一个简单的网页应用，使用Vuex可能是繁琐冗余的。</p>
<blockquote>
<p>如果应用够简单，最好不要使用Vuex。一个简单的Store模式就足够了。</p>
<p>如果需要构建一个中大型单页应用，就需要考虑如何更好地在组件外部管理状态，Vuex将会成为自然而然的选择。</p>
</blockquote>
<hr>
<h1 id="安装-vuex" data-numberify>安装 Vuex<a class="anchor ms-1" href="#安装-vuex"></a></h1>
<p>在Node.js环境下，可以运行下方命令安装Vuex：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm i vuex
</span></span></code></pre></div><p>但是需要注意的是<code>vuex@4</code>使用于Vue3，而适用于Vue2的Vuex版本是<code>vuex@3</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装适用于 Vue2 的 Vuex 3</span>
</span></span><span class="line"><span class="cl">npm i vuex@3
</span></span></code></pre></div><p>安装好后，就可以在项目中导入Vuex：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vuex</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span>
</span></span></code></pre></div><p>导入Vuex后，需要在Vue中开启Vuex插件：</p>
<pre tabindex="0"><code>Vue.use(Vuex)
</code></pre><hr>
<h1 id="配置-vuex" data-numberify>配置 Vuex<a class="anchor ms-1" href="#配置-vuex"></a></h1>
<p>Vuex的基本配置如下（Vuex配置文件可以是项目根目录下的<code>vuex/store.js</code>或<code>store/index.js</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vuex</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span> <span class="c1">// 引入 Vuex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">Vuex</span><span class="p">)</span> <span class="c1">// 使用 Vuex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Actions 用于响应组件中的动作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">actions</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Mutations 用于操作数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">mutations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// State 用于存储数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Getters 用于将 State 中的数据进行加工
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">getters</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 创建并导出 Store
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">Vuex</span><span class="p">.</span><span class="nx">Store</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">actions</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mutations</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">state</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getters</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>创建好Store之后，需要将其导入到<code>main.js</code>中，并配置在Vue实例上：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">store</span> <span class="nx">from</span> <span class="s1">&#39;./store&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">store</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>配置好后，当前Vue实例，以及Vue实例下的所有组件，都能通过<code>this.$store</code>访问Store的API。</p>
<hr>
<h1 id="使用-store" data-numberify>使用 Store<a class="anchor ms-1" href="#使用-store"></a></h1>
<p>Store中，常用的API如下：</p>
<ul>
<li><code>$store.dispatch()</code>：将数据分发给对应的Action。</li>
<li><code>$store.commit()</code>：将数据（载荷）提交给对应的Mutation.</li>
</ul>
<p>Store中，常用的数据对象如下：</p>
<ul>
<li><code>$store.state</code>：访问State中的状态数据（可以认为是一个全局的<code>data</code>）。</li>
<li><code>$store.getters</code>：对State中的状态数据进行相应处理，并获取对应的处理结果（可以认为是一个全局的，没有Setter的<code>computed</code>）。</li>
</ul>
<h2 id="dispatch" data-numberify>dispatch<a class="anchor ms-1" href="#dispatch"></a></h2>
<p><code>$store.dispatch(actionName, data)</code>：</p>
<ul>
<li><code>actionName</code>：指定一个Action的名称，<code>String</code>类型。对应<code>store</code>配置中<code>actions</code>配置对象下的一个相同名称的方法<code>actionName()</code>。</li>
<li><code>data</code>：分发给<code>actionName()</code>的数据，任意类型。<code>actionName()</code>使用第2个形参<code>value</code>接收。</li>
</ul>
<p>每一个Action，在<code>actions</code>中都有一个与之对应的方法。在组件实例中，使用<code>$store.dispatch()</code>来将数据分发给对应的Action方法处理。每个Action都有一个唯一的<code>actionName</code>。</p>
<blockquote>
<p>通常，actionName是以小驼峰规则命名。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;demoAction&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span></code></pre></div><p><code>demoAction</code>对应的Action：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">actions</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">demoAction</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* demoAction的处理逻辑... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>context</code>是一个上下文对象，每一个Action都会接收到这个参数。<code>context</code>封装了<code>$store</code>中的一些方法。通过<code>context</code>，可以将当前处理转发给其它Action，或是将处理提交到某个Mutation。</p>
<p><code>context</code>中封装了如下方法和对象：</p>
<ul>
<li><code>context.dispatch()</code></li>
<li><code>context.commit()</code></li>
<li><code>context.state</code></li>
<li><code>context.getters</code></li>
</ul>
<p>这些方法和对象的用法与<code>$store</code>中的相同。</p>
<blockquote>
<p><code>context</code>可以看作是一个小型的<code>$store</code>，它封装了<code>$store</code>中常用的方法和对象。使用者可以根据处理逻辑（上下文）调用<code>context</code>中的方法，所以才命名为<code>context</code>。</p>
<p>在Action中，应该将<code>context.state</code>视为只读的。因为Action的职责不是对状态进行修改，并且Vue.js devtools（Vue.js开发者工具）捕获不到Action对<code>context.state</code>的修改（尽管这些修改可能会生效），所以应该尽量避免在Action中对<code>context.state</code>的修改。</p>
</blockquote>
<p>通常情况下，Action是用来对数据进行一些校验或简单的处理，然后将数据转派给下一个Action或提交给某个Mutation。</p>
<p><code>$store.dispatch()</code>在调用时可以仅传递一个参数，也就是<code>actionName</code>。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;plusOne&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="commit" data-numberify>commit<a class="anchor ms-1" href="#commit"></a></h2>
<p><code>$store.commit(mutationName, payload)</code>：</p>
<ul>
<li><code>mutationName</code>：指定一个Mutation的名称（事件类型），<code>String</code>类型。对应<code>store</code>配置中<code>mutations</code>配置对象下的一个相同名称的方法<code>mutationName()</code>。</li>
<li><code>payload</code>：提交给<code>mutationName()</code>的数据（载荷），任意类型。<code>mutationName()</code>使用第2个形参<code>value</code>接收。</li>
</ul>
<blockquote>
<p>通常，mutationName是以全大写+下划线规则命名。</p>
</blockquote>
<p><code>$store.commit()</code>的用法和<code>$store.dispatch()</code>十分相似，不同的是<code>$store.commit()</code>是将载荷提交给某个Mutation。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;demoMutation&#39;</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span>
</span></span></code></pre></div><p><code>demoMutation</code>对应的Mutation：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mutations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">demoMutation</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* demoMutation的处理逻辑... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>state</code>即对应Store配置中的<code>state</code>配置对象（相当于<code>$store.state</code>）。每一个Mutation都会接收到这个<code>state</code>对象。通过<code>state</code>对象，Mutation可以获取State中的状态数据，并对状态数据进行编辑。</p>
<p>与Action不同，Mutation通常是作为状态数据处理的角色存在。Mutation可以直接修改State中的数据；而Action通常不修改State中的数据，Action一般只是读取State中的数据。</p>
<blockquote>
<p>Action不用作修改数据还有一个原因，如果在Action中修改State中的数据，Vue.js devtools并不能捕获到这些修改。即使在Action对State的修改能生效，也不建议在Action中对State进行修改，在Actions中，应该将State（<code>context.$state</code>）视为只读的。</p>
</blockquote>
<p>一般情况下（官方给的示意图中），Store对数据的处理流程是：<code>$store.dispatch</code> $\Rightarrow$ <code>$store.commit</code>。实际上，对一些简单的操作，不需要对传递的数据进行校验或处理的情况下，可以在组件实例中直接调用<code>$store.commit</code>将数据提交给Mutation处理。</p>
<p><code>$store.commit()</code>在调用时可以仅传递一个参数，也就是<code>mutationName</code>。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;plusOne&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="state" data-numberify>state<a class="anchor ms-1" href="#state"></a></h2>
<p>在组件中读取State中的数据，可以通过<code>this.$store.state.dataName</code>的形式读取（<code>dataName</code>指要读取的数据）。需要注意的是，在组件实例中不要修改State中的数据。也就是说，在组件实例中应该将<code>this.$store.state</code>视为只读。</p>
<p>例如在Store的<code>state</code>配置项中定义一个状态数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">siteTitle</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// 网站的标题
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>在组件实例中获取<code>state</code>中的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span>
</span></span></code></pre></div><p>在组件实例中推荐使用<code>computed</code>来获取<code>state</code>中的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">siteTitle</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>也可以通过<code>computed</code>的Setter来修改<code>state</code>中的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">siteTitle</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">set</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;SET_SITE_TITLE&#39;</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mutations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">SET_SITE_TITLE</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span> <span class="o">=</span> <span class="nx">payload</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>接着，就可以在组件实例中，像使用一般的数据一样，对<code>siteTitle</code>进行各种操作。</p>
<hr>
<h2 id="getters" data-numberify>getters<a class="anchor ms-1" href="#getters"></a></h2>
<p><code>$store.getters</code>就像是一个全局的<code>computed</code>，可以在获取State中的数据之前，对数据进行一些处理。但与<code>computed</code>不同的是，<code>getters</code>只能用于获取，不能用于修改数据。</p>
<p>在Store的<code>getters</code>配置中，每个<code>getter</code>以函数的形式被定义，且每个<code>getter</code>接收一个<code>state</code>参数。这个<code>state</code>参数用于获取State中的数据。</p>
<p>每个<code>getter</code>都有一个唯一的名称，并且就像<code>computed</code>一样，在Vue实例中使用<code>this.$store.getterName</code>来获取相应的<code>getter</code>，<code>getterName</code>与<code>getter</code>定义时的函数名称相同。<code>getter</code>同样也是使用返回值来确定值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getters</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">demoGetter</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* demoGetter 的处理逻辑... */</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="cm">/* demoGetter 的值 */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>例如要获取一个转为大写的<code>siteTitle</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getters</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">siteTitleUpperCase</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在组件实例中获取该值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">gettets</span><span class="p">.</span><span class="nx">siteTitleUpperCase</span>
</span></span></code></pre></div><p>同样可以使用<code>computed</code>来读取该值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">siteTitleUpperCase</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">gettets</span><span class="p">.</span><span class="nx">siteTitleUpperCase</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="vuex-映射" data-numberify>Vuex 映射<a class="anchor ms-1" href="#vuex-映射"></a></h1>
<p>在组件实例中，使用Store中的<code>state</code>和<code>getter</code>时，配合<code>computed</code>可以使代码更加精简。而Vuex原型正好提供了一些辅助的API，可以在组件实例中快速地为<code>state</code>和<code>getters</code>中的数据创建对应的<code>computed</code>。</p>
<ul>
<li><code>mapState()</code></li>
<li><code>mapGetters()</code></li>
<li><code>mapMutations()</code></li>
<li><code>mapActions()</code></li>
</ul>
<p>在使用这些辅助函数之前，需要先引入。这些辅助函数的引入方法都是相同的，下面进行例举了辅助函数的引入方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">mapState</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span> <span class="c1">// 引入 mapState
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">mapState</span><span class="p">,</span> <span class="nx">mapGetters</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span> <span class="c1">// 引入 mapState 和 mapGetters
</span></span></span></code></pre></div><h2 id="mapstate" data-numberify>mapState<a class="anchor ms-1" href="#mapstate"></a></h2>
<p><code>mapState()</code>可以将State中的数据映射到组件实例中的<code>computed</code>中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="nx">mapState</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr1</span><span class="o">:</span> <span class="s1">&#39;stateAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr2</span><span class="o">:</span> <span class="s1">&#39;stateAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr3</span><span class="o">:</span> <span class="s1">&#39;stateAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}),</span>
</span></span></code></pre></div><p>或者使用对象扩展运算符：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">...</span><span class="nx">mapState</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computedAttr1</span><span class="o">:</span> <span class="s1">&#39;stateAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computedAttr2</span><span class="o">:</span> <span class="s1">&#39;stateAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computedAttr3</span><span class="o">:</span> <span class="s1">&#39;stateAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}),</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>上方所示的两个<code>mapState()</code>相当于在<code>computed</code>中进行如下定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr1</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr1</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr2</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr3</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr3</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>也就是说，<code>mapState()</code>返回的是一个类似于<code>computed</code>配置对象的对象。这个对象中的每个属性都是函数类型，相当于一个个设置了Setter的<code>computed</code>属性。</p>
<p>使用<code>mapState()</code>生成的<code>computed</code>被称为<code>vuex bindings</code>（可以在Vue开发者工具中查看）。</p>
<p><code>mapState()</code>可以传入两种类型的参数：</p>
<ul>
<li>
<p>一种就是如上所示的<code>Object</code>类型参数。</p>
<p>传入的对象中，其每个属性的<code>key</code>是作为实例中的<code>computed</code>属性名称，每个属性的<code>value</code>以<code>String</code>类型的形式指定了State中某个属性的名称。</p>
<p>该方式通过传入对象中的每个属性的<code>value</code>指定State中的属性，然后以每个属性的<code>key</code>作为它们的<code>computed</code>属性来生成<code>vuex bindings</code>。</p>
</li>
<li>
<p>另一种方式就是传入字符串数组类型的参数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">mapState</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;stateAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;stateAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;stateAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">]),</span>
</span></span></code></pre></div><p>这种方式通过字符串数组指定一系列要作为<code>computed</code>（<code>vuex binding</code>）属性使用的State属性。这种方式可以直接使用对应State属性的名称来使用这些<code>vuex binding</code>属性。</p>
<p>上方<code>mapState()</code>相当于在<code>computed</code>中配置了以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">stateAttr1</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr1</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="nx">stateAttr2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr2</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="nx">stateAttr3</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr3</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="mapgetters" data-numberify>mapGetters<a class="anchor ms-1" href="#mapgetters"></a></h2>
<p><code>mapGetters()</code>可以将<code>getters</code>中的数据映射到组件实例中的<code>computed</code>中。生成的属性同样被称为<code>vuex bindings</code>。</p>
<p><code>mapGetters()</code>的用法和<code>mapState()</code>几乎相同，它们都可以传入两种类型的参数，并且返回值也是一个属性都为函数类型的对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">mapGetters</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr1</span><span class="o">:</span> <span class="s1">&#39;gettersAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr2</span><span class="o">:</span> <span class="s1">&#39;gettersAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr3</span><span class="o">:</span> <span class="s1">&#39;gettersAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">mapGetters</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;gettersAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;gettersAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;gettersAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span></code></pre></div><p>上述两种使用方式，都是相当于在<code>computed</code>进行如下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr1</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">getters</span><span class="p">.</span><span class="nx">gettersAttr1</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">getters</span><span class="p">.</span><span class="nx">gettersAttr2</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr3</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">getters</span><span class="p">.</span><span class="nx">gettersAttr3</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="mapmutations" data-numberify>mapMutations<a class="anchor ms-1" href="#mapmutations"></a></h2>
<p><code>mapMutations()</code>用于在<code>methods</code>中快速生成提交（<code>commit</code>）对应Mutations事件的方法。<code>mapMutations()</code>同样拥有两种形参类型。</p>
<p><code>mapMutations()</code>作用于<code>methods</code>，但是用法基本上与<code>mapState()</code>和<code>mapGetters()</code>相同。并且<code>mapMutations()</code>传入的也是一个属性为<code>function</code>类型的对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="nx">mapMutations</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">increment</span><span class="o">:</span> <span class="s1">&#39;INCREMENT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">decrement</span><span class="o">:</span> <span class="s1">&#39;DECREMENT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}),</span>
</span></span></code></pre></div><p>相当于在<code>methods</code>中进行如下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">increment</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;INCREMENT&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">decrement</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;DECREMENT&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>所以在调用或者绑定事件时，需要以<code>increment()</code>或<code>increment(value)</code>的形式。否则，以<code>increment</code>（如<code>@click=&quot;increment&quot;</code>）的形式绑定事件，传入的<code>value</code>参数就是当前绑定事件的对象（可能会造成数据错误）。</p>
<p><code>mapMutations()</code>数组参数写法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="nx">mapMutations</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;INCREMENT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;DECREMENT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]),</span>
</span></span></code></pre></div><p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">INCREMENT</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;INCREMENT&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">DECREMENT</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;DECREMENT&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="mapactions" data-numberify>mapActions<a class="anchor ms-1" href="#mapactions"></a></h2>
<p><code>mapActions()</code>用于在<code>methods</code>中快速生成分发（<code>dispatch</code>）对应Action的方法。</p>
<p><code>mapMutations()</code>的用法基本上与<code>mapMutations()</code>相同。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="nx">mapActions</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">increment</span><span class="o">:</span> <span class="s1">&#39;increment&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">decrement</span><span class="err">：</span><span class="s1">&#39;decrement&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}),</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="nx">mapActions</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;increment&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;decrement&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]),</span>
</span></span></code></pre></div><p>上述两种方式相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">increment</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;increment&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">decrement</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;decrement&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>同样使用<code>increment()</code>或<code>increment(value)</code>的形式调用或绑定事件。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue CLI 服务代理</title>
      <link>/docs/vue/dev-server-poxy/</link>
      <pubDate>Thu, 21 Sep 2023 04:59:57 +0000</pubDate>
      
      <guid>/docs/vue/dev-server-poxy/</guid>
      <description><![CDATA[通常情况下，跨域问题是由服务端依靠CORS或JSONP等方法解决。为了在开发过程中不依靠后端解决跨域问题，可以使用一台与前端页面服务的Hos]]></description>
      <content:encoded><![CDATA[<p>通常情况下，跨域问题是由服务端依靠CORS或JSONP等方法解决。为了在开发过程中不依靠后端解决跨域问题，可以使用一台与前端页面服务的Host相同的代理服务器，将请求发送给这台代理服务器，然后再由代理服务器将请求转发给真实的服务器。</p>
<p>使用服务代理可绕开浏览器同源策略的限制。服务代理可以使用Nginx等应用创建，当然Vue CLI也支持创建代理。</p>
<p>Vue CLI代理需要在<code>vue.config.js</code>中进行配置。</p>
<blockquote>
<p>注：Vue CLI代理仅是在开发过程中使用的。</p>
</blockquote>
<hr>
<h1 id="简单代理" data-numberify>简单代理<a class="anchor ms-1" href="#简单代理"></a></h1>
<p>Vue CLI创建代理最简单的方式就是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">devServer</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">proxy</span><span class="o">:</span> <span class="s1">&#39;http://localhost:4000&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>配置完成后，重启前端页面服务，然后将原本请求的Host改为与页面服务相同的Host即可。例如本地页面服务为<code>http://localhost:8080</code>，要发送的Ajax请求为<code>http://localhost:4000/api/user</code>。那么将Ajax请求改为<code>http://localhost:8080/api/user</code>即可通过服务代理绕过浏览器的同源策略。</p>
<blockquote>
<p>由于页面的端口与服务代理的端口一致，所以在发送请求时，可以将<code>http://localhost:8080/api/user</code>直接简写为<code>/api/user</code>。</p>
</blockquote>
<p>这种配置方式的服务代理，首先会根据请求路径，在项目的<code>public</code>目录下寻找对应的资源：</p>
<ul>
<li>如果<code>public</code>目录中有请求所对应的资源，那么服务器就直接将该资源发送给浏览器；</li>
<li>如果<code>public</code>目录中没有请求所对应的资源，那么服务器就会将这次请求通过代理的方式完整地转发给<code>proxy</code>配置的服务器。</li>
</ul>
<p>例如<code>http://localhost:8080/api/user</code>：</p>
<ul>
<li>如果<code>public</code>目录中有<code>api</code>目录，并且<code>api</code>目录下一个名为<code>user</code>这个资源，那么服务器就直接将<code>user</code>这个资源发送给浏览器。</li>
<li>如果<code>public</code>目录中没有<code>api</code>目录或者有<code>api</code>目录但是<code>api</code>目录下没有名为<code>user</code>的资源，那么服务器就会认为该请求需要走代理。</li>
</ul>
<p>也就是说，当请求了前端不存在的资源时，请求就会被转发给被代理的服务器（优先匹配前端资源）。</p>
<p>这种配置方式的优缺点如下：</p>
<ul>
<li>优点：配置简单。</li>
<li>缺点：不能配置多个代理，不能灵活控制某些请求是否走代理。</li>
</ul>
<hr>
<h1 id="完整配置" data-numberify>完整配置<a class="anchor ms-1" href="#完整配置"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">devServer</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">proxy</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;/api&#39;</span><span class="o">:</span> <span class="p">{</span>             <span class="c1">// 访问代理时的路径前缀
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;&lt;url&gt;&#39;</span><span class="p">,</span>    <span class="c1">// 代理的目标路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">ws</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>           <span class="c1">// 是否支持 webSocket
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">changeOrigin</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 是否将请求头中的Host改成与target一样的Host（默认为true）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;/foo&#39;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;&lt;other_url&gt;&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">devServer</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">proxy</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;/api&#39;</span><span class="o">:</span> <span class="p">{</span>                           <span class="c1">// 路径前缀
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;http://localhost:5000&#39;</span><span class="p">,</span>  <span class="c1">// 代理目标
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">ws</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>那么在使用代理请求<code>http://localhost:5000</code>的资源时，除了使用当前服务的Host外，还需要加上路径前缀<code>/api</code>。即通过<code>http://localhost:8080/api</code>对<code>http://localhost:5000</code>的资源进行访问。</p>
<p>在使用<code>http://localhost:8080/api</code>访问时，代理会将整个访问路径（包括前缀）原封不动地转发给<code>http://localhost:5000</code>这个服务器。例如请求<code>http://localhost:8080/api/user</code>那么<code>http://localhost:5000</code>会接收到<code>/api/user</code>这个请求。</p>
<p>如果在转发时要将路径前缀去掉（例如请求<code>http://localhost:8080/api/user</code>，<code>http://localhost:5000</code>接收到的是<code>/user</code>请求），可以配置路径转发规则<code>pathRewrite</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">devServer</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">proxy</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;/api&#39;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;http://localhost:5000&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">pathRewrite</span><span class="o">:</span> <span class="p">{</span>  <span class="c1">// 路径转发规则
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="c1">// key：用于匹配路径的正则匹配表达式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="c1">// value：是替换路径中匹配的内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="s1">&#39;^/api&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">ws</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">changeOrigin</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在微服务架构中，一个服务使用一台（或多台）服务器运行，那么可以根据服务来精简配置项。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">devServer</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">proxy</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;/users&#39;</span><span class="o">:</span> <span class="p">{</span>  <span class="c1">// http://localhost:5000/users
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;http://localhost:5000&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;/orders&#39;</span><span class="o">:</span> <span class="p">{</span>  <span class="c1">// http://localhost:5001/orders
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;http://localhost:5001&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>使用完整配置时的优缺点如下：</p>
<ul>
<li>优点：可以配置多个代理，可以灵活地控制请求是否使用代理。</li>
<li>缺点：配置略繁琐，请求资源时必须使用路径前缀。</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 过渡和动画</title>
      <link>/docs/vue/animations/</link>
      <pubDate>Wed, 20 Sep 2023 09:47:53 +0000</pubDate>
      
      <guid>/docs/vue/animations/</guid>
      <description><![CDATA[Vue封装了一套可以快速构建基于状态变化的过渡和过度与动画的组件&lt;transition&gt;（&lt;Transition&gt;）]]></description>
      <content:encoded><![CDATA[<p>Vue封装了一套可以快速构建基于状态变化的过渡和过度与动画的组件<code>&lt;transition&gt;</code>（<code>&lt;Transition&gt;</code>）和<code>&lt;transition-group&gt;</code>（<code>&lt;TransitionGroup&gt;</code>）。</p>
<p><code>&lt;transition&gt;</code>和<code>&lt;transition-group&gt;</code>是Vue内置的组件，无需注册即可使用。它们可以将进入和离开的动画应用到通过默认插槽传递给它的元素或组件上。</p>
<p>它们的进入/离开动画的切换可以由<code>v-if</code>或<code>v-show</code>所触发。</p>
<hr>
<h1 id="transition-组件" data-numberify>Transition 组件<a class="anchor ms-1" href="#transition-组件"></a></h1>
<p><code>&lt;transition&gt;</code>用于在一个元素或组件进入和离开DOM时应用动画。</p>
<p>最基本的用法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;isShow = !isShow&#34;</span><span class="p">&gt;</span>显示/隐藏<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">    &lt;transition&gt; 用于给元素自动加上动画效果
</span></span></span><span class="line"><span class="cl"><span class="c">   --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">transition</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;isShow&#34;</span><span class="p">&gt;</span>Hello Vue.js!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">transition</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isShow</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">h1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="kc">orange</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">v-enter-active</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">animation</span><span class="p">:</span> <span class="n">fade</span> <span class="mi">1</span><span class="kt">s</span> <span class="kc">linear</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">v-leave-active</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">animation</span><span class="p">:</span> <span class="n">fade</span> <span class="mi">1</span><span class="kt">s</span> <span class="kc">linear</span> <span class="kc">reverse</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="k">keyframes</span> <span class="nt">fade</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">from</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">-100</span><span class="kt">%</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nt">to</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">0</span><span class="kt">px</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>当<code>&lt;transition&gt;</code>中的元素被显示或隐藏时，Vue会在适当的时机自动将一些CSS过渡<code>class</code>往目标元素上添加或移除。</p>
<blockquote>
<p><code>&lt;transition&gt;</code>仅支持单个元素或组件作为其插槽内容。如果内容是一个组件，该组件必须仅有一个根元素。</p>
</blockquote>
<hr>
<h1 id="css-过渡-class" data-numberify>CSS 过渡 class<a class="anchor ms-1" href="#css-过渡-class"></a></h1>
<p>Vue中一共有6种应用于进入与离开过度效果的 CSS <code>class</code>：</p>
<p>Vue2的CSS过渡<code>class</code>：</p>
<p><picture><img class="img-fluid " alt="Vue2 CSS 过渡 class" src="/docs/vue/animations/1695255059938.png" loading="lazy" width="1200" height="600" />
</picture>

</p>
<p>Vue3的CSS过渡<code>class</code>：</p>
<p><picture><img class="img-fluid " alt="Vue3 CSS 过渡 class" src="/docs/vue/animations/1695253388660.png" loading="lazy" width="1376" height="700" />
</picture>

</p>
<ul>
<li><code>v-enter</code>（Vue2）/ <code>v-enter-from</code>（Vue3）：进入动画的起始状态。在元素插入之前添加，在元素插入完成后的下一帧移除。</li>
<li><code>v-enter-active</code>：进入动画的生效状态。应用于整个进入动画阶段。在元素被插入之前添加，在过渡或动画完成之后移除。这个<code>class</code>可以被用来定义进入动画的持续时间、延迟与速度曲线类型。</li>
<li><code>v-enter-to</code>（<code>2.1.8</code>版及以上）：进入动画的结束状态。在元素插入完成后的下一帧被添加 (也就是<code>v-enter-from</code>被移除的同时)，在过渡或动画完成之后移除。</li>
<li><code>v-leave</code>（Vue2）/ <code>v-leave-from</code>（Vue3）：离开动画的起始状态。在离开过渡效果被触发时立即添加，在一帧后被移除。</li>
<li><code>v-leave-active</code>：离开动画的生效状态。应用于整个离开动画阶段。在离开过渡效果被触发时立即添加，在过渡或动画完成之后移除。这个<code>class</code>可以被用来定义离开动画的持续时间、延迟与速度曲线类型。</li>
<li><code>v-leave-to</code>（<code>2.1.8</code>版及以上）：离开动画的结束状态。在一个离开动画被触发后的下一帧被添加 (也就是<code>v-leave-from</code>被移除的同时)，在过渡或动画完成之后移除。</li>
</ul>
<blockquote>
<p>注：Vue3将过渡类名<code>v-enter</code>修改为<code>v-enter-from</code>，将过渡类名<code>v-leave</code>修改为<code>v-leave-from</code>。</p>
</blockquote>
<hr>
<h1 id="过度效果命名" data-numberify>过度效果命名<a class="anchor ms-1" href="#过度效果命名"></a></h1>
<p><code>&lt;transition&gt;</code>和<code>&lt;transition-group&gt;</code>有一个名为<code>name</code>的<code>prop</code>，它可以为过渡效果命名，并将该名称作用于其一系列CSS过渡<code>class</code>的名称前缀。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">transition</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;fade&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">transition</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>那么其一系列的CSS过渡<code>class</code>的名称如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="c">/* 进入的起点 和 离开的终点 */</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-enter</span> <span class="c">/* 或 .fade-enter-from */</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-leave-to</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">-100</span><span class="kt">%</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">/* 进入 和 离开的过程 */</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-enter-active</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-leave-active</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">transition</span><span class="p">:</span> <span class="mf">0.5</span><span class="kt">s</span> <span class="kc">linear</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">/* 进入的终点 和 离开的起点 */</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-enter-to</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-leave</span> <span class="c">/* 或 .fade-leave-from */</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="自定义过渡-class" data-numberify>自定义过渡 class<a class="anchor ms-1" href="#自定义过渡-class"></a></h1>
<p>可以向<code>&lt;transition&gt;</code>和<code>&lt;transition-group&gt;</code>传递以下的<code>props</code>来指定自定义的过渡<code>class</code>。</p>
<ul>
<li><code>enter-class</code>（Vue2）/ <code>enter-from-class</code>（Vue3）：定义目标元素<u>进入动画起点</u>的过渡<code>class</code>。</li>
<li><code>enter-active-class</code>：定义目标元素<u>进入动画过程</u>的过渡<code>class</code>。</li>
<li><code>enter-to-class</code>（<code>2.1.8+</code>）：定义目标元素<u>进入动画终点</u>的过渡<code>class</code>。</li>
<li><code>leave-class</code>（Vue2）/ <code>leave-from-class</code>（Vue3）：定义目标元素<u>离开动画起点</u>的过渡<code>class</code>。</li>
<li><code>leave-active-class</code>：定义目标元素<u>离开动画过程</u>的过渡<code>class</code>。</li>
<li><code>leave-to-class</code>（<code>2.1.8+</code>）：定义目标元素<u>离开动画终点</u>的过渡<code>class</code>。</li>
</ul>
<p>传入的这些<code>class</code>会覆盖相应阶段的默认<code>class</code>名。这个功能在Vue的动画机制下集成其他的第三方CSS动画库时非常有用。</p>
<p>例如使用<code>animate.css</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;isShow = !isShow&#34;</span><span class="p">&gt;</span>显示/隐藏<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">transition</span>
</span></span><span class="line"><span class="cl">    <span class="na">appear</span>
</span></span><span class="line"><span class="cl">    <span class="na">name</span><span class="o">=</span><span class="s">&#34;animate__animated animate__bounce&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">enter-active-class</span><span class="o">=</span><span class="s">&#34;animate__swing&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">leave-active-class</span><span class="o">=</span><span class="s">&#34;animate__backOutUp&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;!isShow&#34;</span><span class="p">&gt;</span>Hello Vue.js!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">transition</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="s1">&#39;animate.css&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isShow</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">h1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="kc">orange</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="transitiongroup-组件" data-numberify>TransitionGroup 组件<a class="anchor ms-1" href="#transitiongroup-组件"></a></h1>
<p><code>&lt;transition-group&gt;</code>支持和<code>&lt;transition&gt;</code>基本相同的<code>props</code>、CSS过渡<code>class</code>和JavaScript钩子监听器，但有以下几点区别：</p>
<ul>
<li>默认情况下，它不会渲染一个容器元素。但可以通过传入<code>tag</code> prop来指定一个元素作为容器元素来渲染。</li>
<li>过渡模式在这里不可用，因为我们不再是在互斥的元素之间进行切换。</li>
<li><code>&lt;transition-group&gt;</code>中渲染的每个元素都必须有一个唯一的<code>key</code>属性值。</li>
<li>CSS过渡<code>class</code>会被应用在列表内的元素上，而不是容器元素上。</li>
</ul>
<p><code>&lt;transition-group&gt;</code>用于同时渲染多个元素，通常情况下渲染的是列表元素。被<code>&lt;transition-group&gt;</code>渲染的每个元素都需要有一个我i唯一的<code>key</code>属性值。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 插件</title>
      <link>/docs/vue/plugins/</link>
      <pubDate>Mon, 18 Sep 2023 01:48:20 +0000</pubDate>
      
      <guid>/docs/vue/plugins/</guid>
      <description><![CDATA[Vue插件主要用于增强Vue。 定义插件 在Vue中，插件的本质是一个包含install()方法的对象。 install()方法： 参数1：Vue原]]></description>
      <content:encoded><![CDATA[<p>Vue插件主要用于增强Vue。</p>
<hr>
<h1 id="定义插件" data-numberify>定义插件<a class="anchor ms-1" href="#定义插件"></a></h1>
<p>在Vue中，插件的本质是一个包含<code>install()</code>方法的对象。</p>
<p><code>install()</code>方法：</p>
<ol>
<li>参数1：Vue原型对象.</li>
<li>参数2 ~ n：第二个参数开始之后的参数（包括第二个）是插件使用者传递的数据。</li>
</ol>
<p>定义一个简单的插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * plugins.js
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Vue 插件
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">myPlugin</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">install</span><span class="p">(</span><span class="nx">Vue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello my plugin!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Vue</span><span class="p">);</span> <span class="c1">// 获取 Vue 原型对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* 
</span></span></span><span class="line"><span class="cl"><span class="cm">      可以在插件中使用 Vue 原型对象定义一些全局的配置
</span></span></span><span class="line"><span class="cl"><span class="cm">      例如定义全局过滤器、全局指令、全局混入，在Vue原型添加方法等等...
</span></span></span><span class="line"><span class="cl"><span class="cm">      甚至可以在插件中启用其它插件
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>接收参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">plugin</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">install</span><span class="p">(</span><span class="nx">Vue</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="使用插件" data-numberify>使用插件<a class="anchor ms-1" href="#使用插件"></a></h1>
<p>要使用插件需要以下两个步骤：</p>
<ol>
<li>引入插件。</li>
<li>使用<code>Vue.use()</code>方法使插件生效。</li>
</ol>
<p><code>Vue.use()</code>方法：</p>
<ol>
<li>参数1：要启用的插件的配置对象。</li>
<li>参数2 ~ n：要传递给插件的参数，这些参数会传递给插件的<code>install()</code>中的参数2 ~ n。</li>
</ol>
<p>例如使用上方定义的插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * main.js
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 引入插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span><span class="nx">myPlugin</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./plugins&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 使用插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">myPlugin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">productionTip</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">render</span><span class="o">:</span> <span class="nx">h</span> <span class="p">=&gt;</span> <span class="nx">h</span><span class="p">(</span><span class="nx">App</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>使用时传入参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">myPlugin</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 生命周期</title>
      <link>/docs/vue/life-cycle/</link>
      <pubDate>Wed, 13 Sep 2023 07:16:05 +0000</pubDate>
      
      <guid>/docs/vue/life-cycle/</guid>
      <description><![CDATA[Vue生命周期指的是Vue实例或Vue组件实例在创建时经历的一系列初始化步骤。 在这个过程中Vue为用户提供了一些可供用户自定义的函数，即生命]]></description>
      <content:encoded><![CDATA[<p>Vue生命周期指的是Vue实例或Vue组件实例在创建时经历的一系列初始化步骤。</p>
<p>在这个过程中Vue为用户提供了一些可供用户自定义的函数，即生命周期回调函数。这些函数又称为生命周期函数或生命周期钩子。</p>
<hr>
<h1 id="生命周期图示" data-numberify>生命周期图示<a class="anchor ms-1" href="#生命周期图示"></a></h1>
<p>Vue组件的生命周期图示如下：</p>
<p><picture><img class="img-fluid " alt="Vue.js 生命周期" src="/docs/vue/life-cycle/1694591410572.png" loading="lazy" width="1266" height="2002" />
</picture>

</p>
<p>下图是尚硅谷天禹所给的有关Vue生命周期的解释：</p>
<p><picture><img class="img-fluid " alt="Vue.js 生命周期解释" src="/docs/vue/life-cycle/1694591763923.png" loading="lazy" width="1469" height="1892" />
</picture>

</p>
<hr>
<h1 id="生命周期函数" data-numberify>生命周期函数<a class="anchor ms-1" href="#生命周期函数"></a></h1>
<p>生命周期函数本质是Vue在生命周期过程中的某些关键时刻帮用户调用的一些特殊名称的函数。</p>
<p>生命周期函数的名字不可更改，但函数的具体内容由程序员根据需求编写。</p>
<p>生命周期函数中的<code>this</code>指向的是当前的Vue实例或当前组件的实例对象。</p>
<p>下方代码演示了Vue生命周期函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- &lt;h2 v-text=&#34;num&#34;&gt;&lt;/h2&gt; --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Current Number：{{num}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;add&#34;</span><span class="p">&gt;</span>Number+1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;bye&#34;</span><span class="p">&gt;</span>销毁Vue实例<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">num</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">add</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;add.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">num</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">bye</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Bye.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">         * vm.$destroy()：
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 销毁vm，清理它与其它实例的连接，解绑全部指令及事件监听器（自定义事件）
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 但是在销毁之前vm对页面所作的改变，在销毁之后依旧呈现在页面中
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 销毁了vm之后仅仅意味着没有vm来管理页面的修改了
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 在某些Vue版本（如 2.6.12）中，销毁了vm后事件绑定的函数依然可以被调用
</span></span></span><span class="line"><span class="cl"><span class="cm">         */</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">$destroy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">num</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The [num] was updated.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 生命周期和事件初始化完成
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">beforeCreate</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;beforeCreate.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>  <span class="c1">// Vue 实例中还没有 _data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="kr">debugger</span>  <span class="c1">// 断点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 数据监测和数据代理初始化完成
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">created</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;created.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="kr">debugger</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 模板解析完成，已生成虚拟DOM
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">beforeMount</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;beforeMount.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByName</span><span class="p">(</span><span class="s1">&#39;h2&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">innerText</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="kr">debugger</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 虚拟DOM已经转为真实DOM插入页面
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;mounted.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$el</span> <span class="k">instanceof</span> <span class="nx">HTMLElement</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="kr">debugger</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * data 更新后重新编译页面之前
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">beforeUpdate</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;beforeUpdate.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="kr">debugger</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * data 更新之后页面已经编译完成
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">updated</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;updated.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="kr">debugger</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * vm被销毁之前
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">beforeDestroy</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;beforeDestroy.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">()</span>  <span class="c1">// 此时已经不能对页面做出更改了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="kr">debugger</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * vm已经被销毁
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">destroyed</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;destroyed.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>可以看出在Vue的生命周期过程中共有8个（4对）钩子函数。</p>
<hr>
<h1 id="创建流程" data-numberify>创建流程<a class="anchor ms-1" href="#创建流程"></a></h1>
<ol>
<li>
<p><code>beforeCreate()</code>：生命周期和事件初始化完成时执行。</p>
<p>数据代理和数据监测还未开始。</p>
</li>
<li>
<p><code>created()</code>：数据监测和数据代理初始化完成时执行。</p>
</li>
</ol>
<p>创建指的是数据代理和数据监测被创建。</p>
<blockquote>
<p>注：在<code>watch</code>中，配置了<code>immediate:true</code>的<code>watch</code>是在Init Reactivity阶段（也就是Init Options API中）第1次执行<code>handler()</code>方法。</p>
<p>也就是说，配置了<u><code>immediate:true</code>的<code>watch</code></u>，其<code>handler()</code>会<u>在<code>beforeCreate()</code>之后<code>created()</code>之前进行第1次执行</u>。</p>
</blockquote>
<hr>
<h1 id="挂载流程" data-numberify>挂载流程<a class="anchor ms-1" href="#挂载流程"></a></h1>
<ol>
<li>
<p><code>beforeMount()</code>：模板解析完成。</p>
<p>此时已生成虚拟DOM，但页面还未经过编译，展示的是模板的原内容。在此对DOM的操作，最终都不奏效</p>
</li>
<li>
<p><code>mounted()</code>：虚拟DOM已经转为真实DOM插入页面时执行。</p>
<p>此时页面中呈现的是已经Vue编译过的DOM，对DOM的操作有效（使用Vue的过程尽可能避免操作DOM）。</p>
<p>一般在此时进行如下等初始化操作：</p>
<ul>
<li>开启定时器</li>
<li>发送网络请求</li>
<li>订阅消息</li>
<li>绑定自定义事件</li>
</ul>
</li>
</ol>
<hr>
<h1 id="数据更新流程" data-numberify>数据更新流程<a class="anchor ms-1" href="#数据更新流程"></a></h1>
<ol>
<li>
<p><code>beforeUpdate()</code>：数据更新后重新编译页面之前执行。</p>
<p>数据是修改之后的，但页面还未重新编译，仍是旧的（更新之前的内容）。</p>
</li>
<li>
<p><code>updated()</code>：数据更新之后执行。</p>
<p>此时页面已经编译完成。数据在更新之后，页面已经完成了编译，与数据同步。此时已经完成了<code>Model =&gt; View</code>的更新。</p>
</li>
</ol>
<hr>
<h1 id="销毁流程" data-numberify>销毁流程<a class="anchor ms-1" href="#销毁流程"></a></h1>
<ol>
<li>
<p><code>beforeDestory()</code>：<code>vm</code>被销毁之前（还未销毁）执行。</p>
<p>此时<code>vm</code>中所有的<code>data</code>、<code>methods</code>、指令等等都处于可用状态。</p>
<p>一般在此阶段执行如下等收尾操作：</p>
<ul>
<li>关闭定时器</li>
<li>取消订阅消息</li>
<li>解绑自定义事件</li>
</ul>
<p>此时所有对数据的修改不会再触发更新（不能再对页面做出更改）。</p>
</li>
<li>
<p><code>destroyed()</code>：<code>vm</code>被销毁之后（销毁完毕）执行。</p>
<p>此时<code>vm</code>中所有的监听器、子组件和（自定义）事件监听器被移除。</p>
<blockquote>
<p>一般很少在这个钩子里做处理。</p>
</blockquote>
</li>
</ol>
<p>销毁与<code>vm.$destroy()</code>相关。只有对<code>vm</code>（Vue实例）调用<code>vm.$destroy()</code>后，<code>vm</code>才会开始进行销毁流程。</p>
<p><code>vm.$destroy()</code>：</p>
<ul>
<li>销毁<code>vm</code>，清理它与其它实例的连接，解绑全部指令及事件监听器（自定义事件）。</li>
<li>在销毁之前（调用<code>vm.$destroy()</code>之前），<code>vm</code>对页面所作的改变，在销毁之后依旧呈现在页面中。</li>
<li>销毁了<code>vm</code>之后仅仅意味着没有<code>vm</code>来管理页面的修改了。</li>
<li>在某些Vue版本（如 2.6.12）中，销毁了<code>vm</code>后事件绑定的函数依然可以被调用。即原生DOM事件依然有效。</li>
</ul>
<blockquote>
<p>在大多数场景中，不应该调用<code>vm.$destroy()</code>。最好使用<code>v-if</code>和<code>v-for</code>指令，以数据驱动的方式控制子组件的生命周期。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 数据代理与监听</title>
      <link>/docs/vue/data-proxy-watch/</link>
      <pubDate>Tue, 12 Sep 2023 05:03:31 +0000</pubDate>
      
      <guid>/docs/vue/data-proxy-watch/</guid>
      <description><![CDATA[数据代理是指通过一个对象代理另一个对象中属性的（读/写）操作。 数据代理的原理 数据代理可以通过Object.defineProperty()实]]></description>
      <content:encoded><![CDATA[<p>数据代理是指通过一个对象代理另一个对象中属性的（读/写）操作。</p>
<h1 id="数据代理的原理" data-numberify>数据代理的原理<a class="anchor ms-1" href="#数据代理的原理"></a></h1>
<p>数据代理可以通过<code>Object.defineProperty()</code>实现。在Vue中，很多技术的实现都使用到了<code>Object.defineProperty()</code>这个方法。</p>
<p><code>Object.defineProperty()</code>的用法如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// age: 18,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 使用 Object.defineProperty() 给对象添加属性
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 1. 参数1：要添加属性的对象
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 2. 参数2：要给对象添加的属性名称
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 3. 参数3：要添加的属性的配置
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">value</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>  <span class="c1">// 定义属性的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 控制属性是否可枚举，默认为false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 控制属性是否可被写入（修改），默认为false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 控制属性是否可被删除，默认为false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// console.log(Object.keys(person));
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">articleSize</span> <span class="o">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">article</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Vue&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// size: articleSize,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">article</span><span class="p">,</span> <span class="s1">&#39;size&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">   * Getter：
</span></span></span><span class="line"><span class="cl"><span class="cm">   * 当article.size被读取时，get()会被调用，并且将返回值作为article.size的值
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The article.size is read.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">articleSize</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">   * Setter：
</span></span></span><span class="line"><span class="cl"><span class="cm">   * 当article.size被修改时，set()会被调用，并且将参数value作为article.size的值
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`The article.size is modified to </span><span class="si">${</span><span class="nx">value</span><span class="si">}</span><span class="sb">.`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">articleSize</span> <span class="o">=</span> <span class="nx">value</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">article</span><span class="p">);</span>
</span></span></code></pre></div><p>假设有两个对象<code>obj1</code>和<code>obj2</code>，需要能通过<code>obj2</code>来修改<code>obj1</code>，可以这样实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="mi">100</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">y</span><span class="o">:</span> <span class="mi">200</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj2</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">obj1</span><span class="p">.</span><span class="nx">x</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">obj1</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">value</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><hr>
<h1 id="vue-数据代理" data-numberify>Vue 数据代理<a class="anchor ms-1" href="#vue-数据代理"></a></h1>
<p>Vue实例实际上是Vue实例中的<code>data</code>的数据代理对象。Vue实例中的<code>data</code>通过数据代理，将其对象中的属性交予Vue实例来直接管理。</p>
<p>验证Vue数据代理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>数据代理<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>姓名：{{name}}<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>年龄：{{age}}<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">age</span><span class="o">:</span> <span class="s1">&#39;18&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">vm</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`vm._data === data ??? </span><span class="si">${</span><span class="nx">vm</span><span class="p">.</span><span class="nx">_data</span> <span class="o">===</span> <span class="nx">data</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>实际上，Vue对象在实例化时，会将配置（<code>options</code>）中的<code>data</code>实例化为<code>vm._data</code>。所以实际上<code>vm</code>对象代理的是<code>vm._data</code>对象。</p>
<p>由于Vue模板语法中，在使用插值时获取的是Vue实例中的对象。如果Vue没有使用数据代理，那么要获取<code>data</code>中的数据，相应的表达式应该写作<code>{{_data.name}}</code>（假设获取<code>name</code>）。当使用了数据代理，<code>data</code>中的对象可以通过Vue实例对象来进行操作，那么表达式就可以直接写作<code>{{name}}</code>。</p>
<hr>
<h1 id="vue-计算属性" data-numberify>Vue 计算属性<a class="anchor ms-1" href="#vue-计算属性"></a></h1>
<p>Vue.js计算属性在处理一些复杂逻辑时是很有用的。</p>
<p>计算属性的关键词是<code>computed</code>，在Vue实例的配置中指定<code>computed</code>即可定义计算属性。</p>
<p>Vue计算属性示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  姓：<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;firstName&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  名：<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;lastName&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  姓名：<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;fullName&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">firstName</span><span class="o">:</span> <span class="s1">&#39;张&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">lastName</span><span class="o">:</span> <span class="s1">&#39;三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">fullName</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="c1">// 此处的 this 依旧是指向 vm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="kr">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>计算属性中有两种方法（就像数据代理一样）：</p>
<ul>
<li>
<p>Getter：</p>
<p>作用：当对应的计算属性（如上例为<code>fullName</code>）被读取时，<code>get()</code>就会被调用，且返回值作为该计算属性的值。</p>
<p>Vue对计算属性做了缓存，所以当计算属性被读取时，并不总是会调用<code>get()</code>方法。</p>
<p>计算属性的<code>get()</code>方法被调用的时机：</p>
<ol>
<li>初次读取该计算属性时。</li>
<li>所依赖的数据（这类数据必须是由Vue来管理的数据，如<code>firstName</code>、<code>lastName</code>）发生变化时。其它不被依赖的属性发生改变时， get() 方法不会被调用。</li>
</ol>
<p>常见的计算数据不需要修改，因此仅使用Getter即可。当仅使用Getter时，可以使用以下简写形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">computedAttribute</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>即，将计算属性使用函数式定义（上方所示是对象式定义），该函数即用作该计算属性的<code>get()</code>。例如将上例修改为仅使用Getter的简写形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">firstName</span><span class="o">:</span> <span class="s1">&#39;张&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">lastName</span><span class="o">:</span> <span class="s1">&#39;三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fullName</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 此处的 this 依旧是指向 vm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div></li>
<li>
<p>Setter：</p>
<p>如果计算属性会被用户修改，则需要使用Setter；否则，Setter可省略。</p>
<p>作用：当对应的计算属性被修改时，<code>set()</code>就会被调用，且返回值作为该计算属性的值。</p>
</li>
</ul>
<p>使用计算属性的好处：与<code>methods</code>相比，计算属性内部有缓存机制（复用），效率更高，更加方便调试。</p>
<blockquote>
<p>注：计算属性不能与<code>data</code>属性重名。</p>
</blockquote>
<hr>
<h1 id="vue-监听属性" data-numberify>Vue 监听属性<a class="anchor ms-1" href="#vue-监听属性"></a></h1>
<p>通过Vue.js提供的监听属性<code>watch</code>来响应数据的变化。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>今天天气很{{info}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;isHot = !isHot&#34;</span><span class="p">&gt;</span>切换天气<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isHot</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">info</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">isHot</span> <span class="o">?</span> <span class="s1">&#39;炎热&#39;</span> <span class="o">:</span> <span class="s1">&#39;凉爽&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">info</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">immediate</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>  <span class="c1">// 初始化时执行 handler()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">handler</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="kr">const</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">newValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">oldValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The attribute &#34;info&#34; was updated: &#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">update</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><ul>
<li>在<code>watch</code>中，将要监听的属性直接作为<code>watch</code>配置的属性定义即可（名称要相同）。如上例，要监听计算属性<code>info</code>，则直接在<code>watch</code>中定义<code>info</code>即可。</li>
<li><code>watch</code>可监听的属性包括<code>data</code>、<code>computed</code>中的属性。</li>
<li>Handler：当监听的属性发生改变时，其对应的<code>handler()</code>方法会被调用。</li>
</ul>
<p>如果在监听属性的配置中，不需要添加其它属性来修改配置（仅定义了<code>handler()</code>时），可以使用以下简写形式来定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">watchingAttribute</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* handler ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>即函数式定义监听属性，定义的函数将作为该属性的<code>handler()</code>所使用。如上例，将其修改为仅定义Handler的简写形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isHot</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">info</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">isHot</span> <span class="o">?</span> <span class="s1">&#39;炎热&#39;</span> <span class="o">:</span> <span class="s1">&#39;凉爽&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">info</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">newValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">oldValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The attribute &#34;info&#34; was updated: &#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">update</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>监听属性还有另外一种定义的形式，使用Vue示例对象的方法<code>vm.$watch()</code>来定义。</p>
<p><code>vm.$watch()</code>接受两个参数：</p>
<ol>
<li>参数1：指定监听的属性。</li>
<li>参数2：该监听属性的配置对象（与在Vue示例中的配置对象一样）。</li>
</ol>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isHot</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">info</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">isHot</span> <span class="o">?</span> <span class="s1">&#39;炎热&#39;</span> <span class="o">:</span> <span class="s1">&#39;凉爽&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;info&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">immediate</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">handler</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">newValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">oldValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The attribute &#34;info&#34; was updated: &#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">update</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>仅配置Handler时，简写形式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;info&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">newValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">oldValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The attribute &#34;info&#34; was updated: &#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">update</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><hr>
<h1 id="vue-深度监听" data-numberify>Vue 深度监听<a class="anchor ms-1" href="#vue-深度监听"></a></h1>
<p>Vue中的<code>watch</code>：</p>
<ul>
<li><code>watch</code>默认不监测对象内部值的改变（只监视对象整体的改变）。</li>
<li>配置<code>deep: true</code>可以监测对象内部值的改变（监视对象多层内部属性的改变）。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>numbers.x = {{numbers.x}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;numbers.x++&#34;</span><span class="p">&gt;</span>x + 1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;numbers.x = 0&#34;</span><span class="p">&gt;</span>x = 0<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>numbers.y = {{numbers.y}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;numbers.y++&#34;</span><span class="p">&gt;</span>y + 1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;numbers.y = 0&#34;</span><span class="p">&gt;</span>y = 0<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;numbers = {x: 666, y: 233}&#34;</span><span class="p">&gt;</span>改变 numbers<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">numbers</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">x</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">y</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 监听对象内部属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="s1">&#39;numbers.x&#39;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">handler</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">            <span class="nx">variable</span><span class="o">:</span> <span class="s1">&#39;numbers.x&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">newValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">oldValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="p">});</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;numbers.y&#39;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">handler</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">            <span class="nx">variable</span><span class="o">:</span> <span class="s1">&#39;numbers.y&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">newValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">oldValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="p">});</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 监听对象内部多层级属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">numbers</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">deep</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 开启监听多级结构中所有属性的变化（深度监视）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">handler</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">            <span class="nx">variable</span><span class="o">:</span> <span class="s1">&#39;numbers&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">newValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">oldValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="p">});</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>其中，提供了另外一种用于监听对象内部属性变化的<code>watch</code>简写形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="s1">&#39;numbers.y&#39;</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></div><p>对<a href="/docs/vue/data-proxy-watch/#vue-%e8%ae%a1%e7%ae%97%e5%b1%9e%e6%80%a7">计算属性</a>中的案例进行修改，让名字的修改延迟1秒：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  姓：<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;user.firstName&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  名：<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;user.lastName&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  姓名：<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>{{user.fullName}}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">user</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">firstName</span><span class="o">:</span> <span class="s1">&#39;张&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">lastName</span><span class="o">:</span> <span class="s1">&#39;三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fullName</span><span class="o">:</span> <span class="s1">&#39;张-三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>        
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">user</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">deep</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">handler</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">           * 延迟 1s 进行修改
</span></span></span><span class="line"><span class="cl"><span class="cm">           * 这里的setTimeout()不能使用 function 定义的函数，只能使用lambda，因为使用function的话函数中的this指向的是window
</span></span></span><span class="line"><span class="cl"><span class="cm">           */</span>
</span></span><span class="line"><span class="cl">          <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="nx">val</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">val</span><span class="p">.</span><span class="nx">lastName</span>
</span></span><span class="line"><span class="cl">          <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p>计算属性不能进行异步操作，所以在有些情况下使用监听属性相对较好。</p>
<p>由Vue管理的函数，最好以普通函数<code>function() {}</code>的形式去定义；而其它不被Vue所管理的函数（例如定时器回调函数、Ajax回调函数、Promise回调函数），最好使用lambda表达式<code>() =&gt; {}</code>的形式去定义。</p>
</blockquote>
<hr>
<h1 id="数据劫持" data-numberify>数据劫持<a class="anchor ms-1" href="#数据劫持"></a></h1>
<p>Vue加载<code>data</code>配置和<code>data</code>中的数据发生更新的过程大致如下：</p>
<ol>
<li>
<p>加工<code>data</code>配置。</p>
<p>Vue为<code>data</code>中每个属性都通过<code>Object.defineProperty()</code>添加了Getter和Setter（响应式处理）。当对<code>data</code>中的属性进行更改时，会自动调用对应的Setter。当调用Setter时，Setter会自动解析模板中对应的内容。</p>
<p>Setter调用时执行的流程大致如下：</p>
<ol>
<li>重新解析模板，生成新的虚拟DOM。</li>
<li>新旧虚拟DOM对比。</li>
<li>更新页面。</li>
</ol>
<p>Vue中Getter和Setter的大致实现方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">x</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">y</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 创建监视者实例对象，用于监视data中属性的变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">obs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Observer</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 模拟Vue实例对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">vm</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">_data</span> <span class="o">=</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">obs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">Observer</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 汇总对象中所有的属性形成一个数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 遍历
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">keys</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">key</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">set</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">key</span><span class="si">}</span><span class="sb"> 被修改`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;解析模板，生成虚拟DOM&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;......&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">val</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Vue通过递归将<code>data</code>中所有的对象及其属性通过<code>Object.defineProperty()</code>的方式设置了Getter和Setter。通过<code>Object.defineProperty()</code>添加Getter和Setter来进行响应式处理的动作叫做<strong>数据劫持</strong>。</p>
<blockquote>
<p>数组中的对象仅会对它们的属性进行响应式处理，而数组中的元素是没有Getter和Setter的（没有进行响应式处理）。</p>
</blockquote>
</li>
<li>
<p>将加工完成的<code>data</code>赋给Vue示例的<code>_data</code>属性。即<code>vm._data = data</code>。</p>
</li>
</ol>
<hr>
<h1 id="添加新的响应式数据" data-numberify>添加新的响应式数据<a class="anchor ms-1" href="#添加新的响应式数据"></a></h1>
<p>例如页面中存在需要后续添加的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>姓名：{{user.name}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>性别：{{user.sex}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>年龄：<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>真实年龄：{{user.age.rAge}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>对外年龄：{{user.age.sAge}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>好友：<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;&lt;</span><span class="nt">tr</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>姓名<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>年龄<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;/</span><span class="nt">tr</span><span class="p">&gt;&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;(friend, index) in user.friends&#34;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#34;index&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{friend.name}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{friend.age}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">user</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// sex: &#39;男&#39;,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">age</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">rAge</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">sAge</span><span class="o">:</span> <span class="mi">29</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">friends</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">35</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">36</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>这部分后续添加的数据（如上例中的<code>user.sex</code>），直接为其赋值（<code>vm._data.user = '男'</code>）并不能让页面产生改变。这是因为在Vue实例中，后续添加的数据Vue并不会自动帮它们进行响应式数据处理（即通过<code>Object.defineProperty()</code>添加Getter和Setter）。</p>
<p>为了解决这些问题，Vue提供了一个<code>Vue.set()</code>方法来为Vue实例或Vue组件实例中的数据对象添加新的响应式数据。<code>Vue.set()</code>方法的参数如下：</p>
<ol>
<li>参数1（<code>target</code>）：要添加属性的对象。</li>
<li>参数2（<code>key</code>）：要为<code>target</code>添加的属性名称。</li>
<li>参数3（<code>value</code>）：要为<code>target</code>对象添加的<code>key</code>属性所赋的值。</li>
</ol>
<p>如上例，可以使用以下方式添加响应式数据<code>user.sex</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">_data</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span> <span class="s1">&#39;sex&#39;</span><span class="p">,</span> <span class="s1">&#39;男&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>此时页面才能进行正常的更新。</p>
<p>在Vue实例中也存在这样的方法，即<code>vm.$set()</code>方法（参数与<code>Vue.set()</code>一致）。如上例，添加响应式数据<code>user.sex</code>的另一种方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span> <span class="s1">&#39;sex&#39;</span><span class="p">,</span> <span class="s1">&#39;男&#39;</span><span class="p">)</span>
</span></span></code></pre></div><blockquote>
<p><code>Vue.set()</code>和<code>vm.$set()</code>中参数<code>target</code>的前缀可以是<code>vm._data</code>也可以是<code>vm</code>这是因为在Vue实例<code>vm</code>中，Vue将<code>vm._data</code>中的一些属性交给了<code>vm</code>来代理（数据代理）。</p>
</blockquote>
<p>对上例进行修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;addSex&#34;</span><span class="p">&gt;</span>添加性别（默认值是男）<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>姓名：{{user.name}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;user.sex&#34;</span><span class="p">&gt;</span>性别：{{user.sex}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>年龄：<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>真实年龄：{{user.age.rAge}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>对外年龄：{{user.age.sAge}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>好友：<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;&lt;</span><span class="nt">tr</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>姓名<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>年龄<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;/</span><span class="nt">tr</span><span class="p">&gt;&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;(friend, index) in user.friends&#34;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#34;index&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{friend.name}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{friend.age}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">user</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// sex: &#39;男&#39;,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">age</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">rAge</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">sAge</span><span class="o">:</span> <span class="mi">29</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">friends</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">35</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">36</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">addSex</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span> <span class="s1">&#39;sex&#39;</span><span class="p">,</span> <span class="s1">&#39;男&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p><code>Vue.set()</code>和<code>vm.$set()</code>的使用有一些局限性。它们在使用时不允许<code>target</code>为Vue实例对象或Vue实例对象的直接数据对象（如<code>_data</code>等，Vue组件实例对象也一样）。</p>
<p>在Vue中，后续添加的新对象，如果添加的方式满足Vue的规范，添加的元素Vue会对其进行响应式处理。</p>
</blockquote>
<hr>
<h1 id="vue-数组的修改" data-numberify>Vue 数组的修改<a class="anchor ms-1" href="#vue-数组的修改"></a></h1>
<p>在Vue中，对数组的某些修改并不会使页面发生改变。例如直接使用数组索引对元素赋值(如<code>list[0] = 0</code>)。这是因为Vue在加载和更新时并不会对数组中元素的本身作响应式处理（但是数组中对象元素的属性会做响应式处理），所以导致直接使用索引对数组元素赋值的修改并不会使页面发生改变。</p>
<p>问题演示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>姓名：{{user.name}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>年龄：<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>真实年龄：{{user.age.rAge}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>对外年龄：{{user.age.sAge}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>好友：<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;&lt;</span><span class="nt">tr</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>姓名<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>年龄<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;/</span><span class="nt">tr</span><span class="p">&gt;&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;(friend, index) in user.friends&#34;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#34;index&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{friend.name}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{friend.age}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>爱好：<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;(hobby, index) in user.hobbies&#34;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#34;index&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      {{hobby}}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">user</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">age</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">rAge</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">sAge</span><span class="o">:</span> <span class="mi">29</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hobbies</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;唱&#39;</span><span class="p">,</span> <span class="s1">&#39;跳&#39;</span><span class="p">,</span> <span class="s1">&#39;Rap&#39;</span><span class="p">,</span> <span class="s1">&#39;篮球&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="nx">friends</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">35</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">36</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在浏览器控制台中使用如下命令修改数组元素，并不会让页面更新：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">hobbies</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;唱歌&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">hobbies</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;跳舞&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">hobbies</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;打篮球&#39;</span>
</span></span></code></pre></div><p>为了解决这些问题，Vue指定了7个操作数组的方法，并承认它们的操作是对数组进行了修改，所以使用这7个方法对数组进行修改后，页面才能正常更新。Vue指定的这7个操作数组的方法分别是：</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>array.push()</code></td>
<td style="text-align:left">向数组的末尾添加一个或者多个元素，并返回新数组的长度</td>
</tr>
<tr>
<td style="text-align:center"><code>array.pop()</code></td>
<td style="text-align:left">删除并返回数组的最后一个元素</td>
</tr>
<tr>
<td style="text-align:center"><code>array.shift()</code></td>
<td style="text-align:left">删除并返回数组的第一个元素</td>
</tr>
<tr>
<td style="text-align:center"><code>array.unshift()</code></td>
<td style="text-align:left">向数组的开头添加一个或多个元素，并返回新数组的长度</td>
</tr>
<tr>
<td style="text-align:center"><code>array.splice()</code></td>
<td style="text-align:left">删除元素，并向数组添加新元素</td>
</tr>
<tr>
<td style="text-align:center"><code>array.sort()</code></td>
<td style="text-align:left">对数组的元素进行排序</td>
</tr>
<tr>
<td style="text-align:center"><code>array.reverse()</code></td>
<td style="text-align:left">颠倒数组中元素的顺序</td>
</tr>
</tbody>
</table>
<p>这7个方法能奏效是因为Vue对<code>Array.prototype</code>中对应的这7个方法进行了封装。</p>
<p>Vue封装的这7个方法大致上都做了以下两件事：</p>
<ol>
<li>调用<code>Array.prototype</code>中对应的原生方法。</li>
<li>数据更新引起的模板的解析和页面更改等操作。</li>
</ol>
<p>在Vue官方文档中，将这7个方法称为<u>数组的变更方法</u>。这7个方法其实是对数组变化的监测。</p>
<p>其实在Vue中修改数组也可以使用<code>Vue.set()</code>和<code>vm.$set()</code>。如上例，在控制台修改其中的数组元素：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">_data</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">hobbies</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;唱歌&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">hobbies</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;跳舞&#39;</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h1 id="vue-数据监听总结" data-numberify>Vue 数据监听总结<a class="anchor ms-1" href="#vue-数据监听总结"></a></h1>
<p>Vue会监听<code>data</code>中所有层次的数据。</p>
<ul>
<li>
<p>监听对象中数据的方式：</p>
<p>通过Setter实现监听，且要在<code>new Vue()</code>时就传入要监测的数据。</p>
<p>在Vue监听对象中需要注意：</p>
<ul>
<li>
<p>对象中后追加的属性，Vue默认不做响应式处理。</p>
</li>
<li>
<p>如需给后添加的属性做响应式，请使用如下API：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">propertyName</span><span class="o">|</span><span class="nx">index</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">propertyName</span><span class="o">|</span><span class="nx">index</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>监听数组中数据的方式：</p>
<p>通过包裹数组更新元素的7个方法实现，本质就是做了两件事：</p>
<ol>
<li>调用原生（<code>Array.prototype</code>）对应的方法对数组进行更新。</li>
<li>重新解析模板，进而更新页面。</li>
</ol>
<p>在Vue修改数组中的某个元素一定要用如下方法：</p>
<ul>
<li>
<p>使用以下API：</p>
<ul>
<li><code>array.push()</code></li>
<li><code>array.pop()</code></li>
<li><code>array.shift()</code></li>
<li><code>array.unshift()</code></li>
<li><code>array.splice()</code></li>
<li><code>array.sort()</code></li>
<li><code>array.reverse()</code></li>
</ul>
</li>
<li>
<p>使用<code>Vue.set()</code>或<code>vm.$set()</code></p>
<blockquote>
<p>注：<code>Vue.set()</code>和<code>vm.$set()</code>不能给<code>vm</code>或<code>vm</code>的根数据对象添加属性。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 介绍</title>
      <link>/docs/vue/introduction/</link>
      <pubDate>Sat, 19 Aug 2023 07:36:10 +0000</pubDate>
      
      <guid>/docs/vue/introduction/</guid>
      <description><![CDATA[Vue.js 是一套构建用户界面的渐进式框架。Vue 只关注视图层，采用自底向上增量开发的设计。Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的]]></description>
      <content:encoded><![CDATA[<p>Vue.js 是一套构建用户界面的渐进式框架。Vue 只关注视图层，采用自底向上增量开发的设计。Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
<p>在学习Vue之前需要了解HTML、CSS和JavaScript。</p>
<p>Vue的特点：</p>
<ul>
<li>
<p>采用组件化模式，提高代码复用率、且让代码更好维护。</p>
</li>
<li>
<p>采用声明式编码，让编码人员无需直接操作DOM，提高开发效率。</p>
<p>使用传统JS操作DOM属于命令式编码。</p>
</li>
<li>
<p>使用虚拟DOM和优秀的Diff算法，尽量复用DOM节点。</p>
</li>
</ul>
<p>Vue官网为：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener noreferrer">https://cn.vuejs.org/<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<hr>
<h1 id="安装-vue" data-numberify>安装 Vue<a class="anchor ms-1" href="#安装-vue"></a></h1>
<p>安装Vue的方式有很多，可以在<a href="https://v2.cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener noreferrer">Vue2文档<i class="fas fa-external-link-square-alt ms-1"></i></a>中查阅。</p>
<p>其中最简单的方式就是通过<code>&lt;script&gt;</code>标签引入。通过<code>&lt;script&gt;</code>标签，可以直接使用Vue CDN引入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>通常引入的Vue有两种版本：</p>
<ul>
<li>
<p>开发版本：包含完整的警告和调试模式。如上方引入的即为<code>vue@2.7.14</code>的开发版本。</p>
</li>
<li>
<p>生产版本：删除了警告。通常Vue开发版本的文件名为<code>vue.min.js</code>。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
</ul>
<p>在使用Vue时，通常会在浏览器中安装Vue的开发者工具插件：<a href="https://github.com/vuejs/devtools#vue-devtools" target="_blank" rel="noopener noreferrer">https://github.com/vuejs/devtools#vue-devtools<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<hr>
<h1 id="hello" data-numberify>Hello<a class="anchor ms-1" href="#hello"></a></h1>
<p>下方演示了Vue的基本使用方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Hello Vue<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;root&#34;</span><span class="p">&gt;</span> <span class="c">&lt;!-- Vue 容器 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello, {{name}}<span class="c">&lt;!-- 插值表达式 --&gt;</span>!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">      阻止 vue 在启动时生成生产提示
</span></span></span><span class="line"><span class="cl"><span class="cm">      Vue 2.x 中可能不会生效，直接修改 Vue 源码
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">productionTip</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建 Vue 实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#root&#39;</span><span class="p">,</span>  <span class="c1">// 将实例与容器进行绑定
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="c1">// data 中用于存储数据，存储的数据供 el 所指定的容器使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Vue.js&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>Hello实例中的一些关键点：</p>
<ul>
<li>
<p>Vue 容器：</p>
<ul>
<li>
<p>容器中的代码依然符合 HTML 规范，只不过混入了一些特殊的 Vue 语法。</p>
</li>
<li>
<p>容器中的代码被称为 Vue模板。</p>
</li>
<li>
<p>插值语法：在HTML标签体中，使用两个花括号<code>{{ }}</code>将JS表达式引起来。与语句不同的是，表达式指可以生成值的语句，这个语句可以放在任何需要值的地方。</p>
<p>也就是说插值表达式一定需要有值（或返回值）。</p>
<p>插值表达式中的变量、方法都是在对应 Vue实例 的 <code>data</code> 中定义的。当<code>data</code>发生了改变，页面中对应的数据也会发生改变。</p>
<blockquote>
<p>插值是，Vue模板语法中的一种。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Vue 实例：Vue 实例用于解析 Vue 容器，Vue 实例会根据配置对象的信息去解析对应的模板。创建Vue 实例时需要传入一个配置对象。</p>
<ul>
<li>
<p><code>el</code>属性：将实例与容器进行绑定，<code>el</code> 的值通常为 CSS 选择器字符串。</p>
<p><code>el</code>属性中传入的值也可以是具体的Element对象，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">)</span> <span class="c1">// el 还可以这么绑定
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p><code>data</code>：<code>data</code> 中用于存储数据（对象或方法），存储的数据供 <code>el</code> 所指定的容器使用。<code>data</code> 可以是对象或函数。</p>
</li>
</ul>
<p>Vue实例和Vue容器是一对一关系。当一个实例的<code>el</code>配置有多个与之对应的容器时，Vue不会报错，但页面显示会有问题；当一个容器被多个实例指定时，Vue会报错。</p>
<p>真实开发中只有一个Vue实例，并且会配合着组件一起使用。</p>
</li>
</ul>
<hr>
<h1 id="创建-vue-实例的另一种方式" data-numberify>创建 Vue 实例的另一种方式<a class="anchor ms-1" href="#创建-vue-实例的另一种方式"></a></h1>
<p>在创建Vue实例时，可以不用立即指定<code>el</code>来绑定容器。</p>
<p>可以通过<code>vm.$mount()</code>来绑定容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello {{name}}!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Linner&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 $mount() 绑定容器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">vm</span><span class="p">.</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p><code>vm.$mount()</code>是Vue原型对象上的一个方法。</p>
</blockquote>
<hr>
<h1 id="数据对象的函数式写法" data-numberify>数据对象的函数式写法<a class="anchor ms-1" href="#数据对象的函数式写法"></a></h1>
<p>Vue实例中的<code>data</code>不仅可以作为对象去定义，还能作为函数去定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello {{name}}!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 函数式 data，将返回值作为数据对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">data</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">         * data() 的 this 是当前的Vue实例对象
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 定义data()时不要使用箭头函数
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 如果将data()定义为箭头函数，那么this就不再是当前Vue的实例对象了
</span></span></span><span class="line"><span class="cl"><span class="cm">         */</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Linner&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="mvvm-模型" data-numberify>MVVM 模型<a class="anchor ms-1" href="#mvvm-模型"></a></h1>
<p>Vue是在MVVM模型的基础上进行设计，MVVM模型包含以下3个部分：</p>
<ul>
<li><strong>M</strong>（Model）：模型，对应Vue实例<code>data</code>中的数据。</li>
<li><strong>V</strong>（View）：模板，即Vue容器。</li>
<li><strong>VM</strong>（View Model）：视图模型，对应Vue实例对象。</li>
</ul>
<p><picture><img class="img-fluid " alt="Vue 和 MVVM 模型" src="/docs/vue/introduction/uTools_1692692952621.png" loading="lazy" width="770" height="409" />
</picture>

</p>
<ul>
<li>DOM Listeners：DOM监听器，监听View中数据的改变，并根据Data Bindings指定的关系，将View中被修改的数据在Model中做相应的改变。</li>
<li>Data Bindings：数据绑定，将View与Model中对应的数据进行绑定，表示视图与模型间的一种对应关系。</li>
</ul>
<p>在代码中，Vue和MVVM模型的对应关系如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Hello Vue<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span> <span class="c">&lt;!-- View --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello, {{name}}!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 在代码中，可以使用vm代表Vue实例，vm表示View Model
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span> <span class="c1">// View Model
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="c1">// Model
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Vue.js&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">vm</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>

