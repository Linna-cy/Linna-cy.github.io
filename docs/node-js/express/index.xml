<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Express on Linner&#39;s Blog</title>
    <link>/docs/node-js/express/</link>
    <description>Recent content in Express on Linner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>Copyright © 2020-2023 Linner. All Rights Reserved.
</copyright>
    <lastBuildDate>Mon, 14 Aug 2023 08:48:27 +0000</lastBuildDate><atom:link href="/docs/node-js/express/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Node.js Express 中间件</title>
      <link>/docs/node-js/express/middleware/</link>
      <pubDate>Mon, 14 Aug 2023 08:48:27 +0000</pubDate>
      
      <guid>/docs/node-js/express/middleware/</guid>
      <description><![CDATA[中间件（Middleware），特指业务流程的中间处理环节。 当一个请求到达Express的服务器之后，可以连续调用多个中间件，从而对这次请求]]></description>
      <content:encoded><![CDATA[<p>中间件（Middleware），特指业务流程的中间处理环节。</p>
<p>当一个请求到达Express的服务器之后，可以连续调用多个中间件，从而对这次请求进行预处理。</p>
<p>Express中间件的调用流程如下：</p>
<p><picture><img class="img-fluid " alt="Express 中间件的调用流程" src="/docs/node-js/express/middleware/uTools_1691849455821.png" loading="lazy" width="848" height="473" />
</picture>

</p>
<p>Express的中间件，本质上就是一个处理函数。Express中间件的格式如下：</p>
<p><picture><img class="img-fluid " alt="Expres 中间件的格式" src="/docs/node-js/express/middleware/uTools_1691849710319.png" loading="lazy" width="901" height="289" />
</picture>

</p>
<blockquote>
<p>注：中间件函数的形参列表中，必须包含<code>next</code>函数。而路由的处理函数中只包含<code>request</code>（<code>res</code>）和<code>response</code>（<code>res</code>）。</p>
<p>利用中间件，可以实现后端中Filter（拦截器）或Interceptor（拦截器）等功能。</p>
</blockquote>
<p>在中间件调用流程中，<code>next()</code>函数就是实现<u>多个中间件连续调用</u>的关键。<code>next()</code>表示<u>将流转关系转交给下一个中间件或路由</u>。</p>
<p>中间件的作用：通过中间件，可以在多个中间件之间共享同一份<code>request</code>和<code>response</code>。在开发中，可以通过在上游的中间件中，统一为<code>request</code>或<code>response</code>对象添加自定义属性或方法（在上游做统一的处理），供下游的中间件或路由进行使用。</p>
<hr>
<h1 id="全局中间件" data-numberify>全局中间件<a class="anchor ms-1" href="#全局中间件"></a></h1>
<p>全局中间件是指客户端发起的任何请求，到达服务器之后，都会触发的中间件。通过<code>app.user(globalMiddleware)</code>，就可以定义一个全局生效的中间件。这个全局生效的中间件，因为使用<code>app.user()</code>定义，没有指定请求方式、请求地址，所以任何到达服务器的请求，都会经过这个中间件。</p>
<p>如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 定义中间件函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">globalMiddleware</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Middleware function...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 把流转关系转交给下一个中间件或路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 注册全局生效的中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">globalMiddleware</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 全局中间件无论什么请求方式、请求路径，都会被调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;This is home page...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Post user...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>定义中间件，可以直接在<code>app.use()</code>中定义并注册中间件函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Middleware function...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>全局中间件还可通过<code>app.all()</code>来进行定义和注册：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="s1">&#39;/*&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Middleware function...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><hr>
<h1 id="局部中间件" data-numberify>局部中间件<a class="anchor ms-1" href="#局部中间件"></a></h1>
<p>局部生效的中间件是指在特定的请求方式或请求路径下才会生效的中间件。</p>
<ul>
<li>
<p>特定请求路径生效的中间件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 局部生效的中间件（只在请求路径为 /user 下才生效）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Middleware function...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;This is home page...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 局部中间件只有在特定的请求方式、请求路径下才能生效
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Post user...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="sb">`Get user by id </span><span class="si">${</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="si">}</span><span class="sb">...`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p>特定请求方式生效的中间件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 局部生效的中间件（只在请求方式为 GET 下才生效）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/*&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Middleware function...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 把流转关系转交给下一个中间件或路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 局部中间件只有在特定的请求方式、请求路径下才能生效
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;This is home page...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Post user...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="sb">`Get user </span><span class="si">${</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span><span class="si">}</span><span class="sb">...`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>使用<code>app.get()</code>或<code>app.post()</code>定义处理所有请求路径的中间件，需要使用通配符<code>*</code>来定义请求URL。即<code>/*</code>匹配所有进入服务器的请求路径；<code>app.get('/*', ...)</code>匹配所有进入服务器的GET请求；<code>app.post('/*', ...)</code>匹配所有进入服务器的POST请求。</p>
</li>
</ul>
<blockquote>
<p>注：一般使用中间件，都是对某一部分请求进行处理。如果指定了请求方式，使用<code>app.METHOD()</code>注册中间件时，一般都要在请求URL中使用通配符匹配某一部分请求；如果使用<code>app.all()</code>注册中间件时，也同样需要使用通配符。<code>app.use()</code>则不需要，因为<code>app.use()</code>会匹配当前目录的任何子目录。</p>
<p>Express中的通配符<code>*</code>能匹配所有字符串，包括<code>/</code>。<code>*</code>通配符通常有以下几种用法：</p>
</blockquote>
<ul>
<li>
<p><code>/*</code>：匹配所有的请求路径。</p>
<p>例如：</p>
<ul>
<li><code>http://127.0.0.1/</code></li>
<li><code>http://127.0.0.1/dir</code></li>
<li><code>http://127.0.0.1/dir/index.html</code></li>
</ul>
</li>
<li>
<p><code>/dir/*</code>：匹配所有以<code>/dir</code>开头，但不包括<code>/dir</code>的请求路径。</p>
<p>例如：</p>
<ul>
<li><code>http://127.0.0.1/dir/a</code></li>
<li><code>http://127.0.0.1/dir/b</code></li>
<li><code>http://127.0.0.1/dir/index.html</code></li>
</ul>
<p>但不匹配<code>http://127.0.0.1/dir</code>本身。</p>
</li>
<li>
<p><code>/dir*</code>：匹配所有以<code>/dir</code>开头，且包括<code>/dir</code>的请求路径。</p>
<p>例如：</p>
<ul>
<li><code>http://127.0.0.1/dir</code></li>
<li><code>http://127.0.0.1/dir/a</code></li>
<li><code>http://127.0.0.1/dir/index.html</code></li>
<li><code>http://127.0.0.1/dir123</code></li>
</ul>
</li>
</ul>
<hr>
<h1 id="进行统一处理" data-numberify>进行统一处理<a class="anchor ms-1" href="#进行统一处理"></a></h1>
<p>通过中间件，可以为到达服务器的请求进行一些统一的处理。在同一条处理链上的中间件共享同一份<code>request</code>和<code>response</code>对象。通过在上游的中间件中，统一为<code>request</code>或<code>response</code>对象添加自定义属性或方法（在上游做统一的处理），供下游的中间件或路由进行使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 注册全局生效的中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取请求到达服务器的时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">time</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 为 request 对象挂载自定义属性，从而把时间共享给后面的所有路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">req</span><span class="p">.</span><span class="nx">startTime</span> <span class="o">=</span> <span class="nx">time</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 把流转关系转交给下一个中间件或路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="sb">`[</span><span class="si">${</span><span class="nx">req</span><span class="p">.</span><span class="nx">startTime</span><span class="si">}</span><span class="sb">] This is home page...`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="sb">`[</span><span class="si">${</span><span class="nx">req</span><span class="p">.</span><span class="nx">startTime</span><span class="si">}</span><span class="sb">] Post user...`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><hr>
<h1 id="中间件调用链" data-numberify>中间件调用链<a class="anchor ms-1" href="#中间件调用链"></a></h1>
<p>可以连续多次定义同一种请求方式、请求路径的中间件。请求到达服务器后，会按照中间件被定义的先后顺序，依次调用这些中间件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 连续注册全局中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Middleware 1 running...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Middleware 2 running...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Middleware 3 running...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;This is home page...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>启动服务器，通过 GET <code>http://127.0.0.1/</code>请求后，终端打印内容如下：</p>
<pre tabindex="0"><code>Middleware 1 running...
Middleware 2 running...
Middleware 3 running...
</code></pre><p>如果注册的多个中间件，它们的请求方式或请求路径各有不同，Express会按照它们各自的条件进行匹配。如果一个同时被多个中间件匹配到，Express也是按照它们被定义的顺序去执行这些中间件。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">const</span> <span class="n">express</span> <span class="o">=</span> <span class="n">require</span><span class="o">(</span><span class="err">&#39;</span><span class="n">express</span><span class="err">&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="n">app</span> <span class="o">=</span> <span class="n">express</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 连续注册中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">app</span><span class="o">.</span><span class="na">use</span><span class="o">(</span><span class="err">&#39;</span><span class="o">/</span><span class="n">user</span><span class="o">/*</span><span class="err">&#39;</span><span class="o">,</span> <span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">res</span><span class="o">,</span> <span class="n">next</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">const</span> <span class="n">msg</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">Through</span> <span class="o">/</span><span class="n">user</span><span class="o">/*</span> <span class="n">middleware</span><span class="o">...</span><span class="err">\</span><span class="n">n</span><span class="err">&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">req</span><span class="o">.</span><span class="na">msg</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">msg</span> <span class="o">?</span> <span class="n">req</span><span class="o">.</span><span class="na">msg</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">:</span> <span class="n">msg</span>
</span></span><span class="line"><span class="cl">    <span class="nf">next</span><span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="na">use</span><span class="o">((</span><span class="n">req</span><span class="o">,</span> <span class="n">res</span><span class="o">,</span> <span class="n">next</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">const</span> <span class="n">msg</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">Through</span> <span class="o">/*</span> <span class="n">middleware</span><span class="o">...</span><span class="err">\</span><span class="n">n</span><span class="err">&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">req</span><span class="o">.</span><span class="na">msg</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">msg</span> <span class="o">?</span> <span class="n">req</span><span class="o">.</span><span class="na">msg</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">:</span> <span class="n">msg</span>
</span></span><span class="line"><span class="cl">    <span class="nf">next</span><span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="na">use</span><span class="o">(</span><span class="err">&#39;</span><span class="o">/</span><span class="n">user</span><span class="o">*</span><span class="err">&#39;</span><span class="o">,</span> <span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">res</span><span class="o">,</span> <span class="n">next</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">const</span> <span class="n">msg</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">Through</span> <span class="o">/</span><span class="n">user</span><span class="o">*</span> <span class="n">middleware</span><span class="o">...</span><span class="err">\</span><span class="n">n</span><span class="err">&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">req</span><span class="o">.</span><span class="na">msg</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">msg</span> <span class="o">?</span> <span class="n">req</span><span class="o">.</span><span class="na">msg</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">:</span> <span class="n">msg</span>
</span></span><span class="line"><span class="cl">    <span class="nf">next</span><span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="err">&#39;</span><span class="o">/</span><span class="n">user</span><span class="o">/:</span><span class="n">id</span><span class="err">&#39;</span><span class="o">,</span> <span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">res</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">res</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">msg</span> <span class="o">+</span> <span class="err">`</span><span class="n">Get</span> <span class="n">user</span> <span class="n">by</span> <span class="n">id</span> <span class="n">$</span><span class="o">{</span><span class="n">req</span><span class="o">.</span><span class="na">params</span><span class="o">[</span><span class="err">&#39;</span><span class="n">id</span><span class="err">&#39;</span><span class="o">]}...</span><span class="err">`</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="na">listen</span><span class="o">(</span><span class="mi">80</span><span class="o">,</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">console</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="err">&#39;</span><span class="n">Server</span> <span class="n">running</span> <span class="n">at</span> <span class="n">http</span><span class="o">:</span><span class="c1">//127.0.0.1/&#39;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">})</span>
</span></span></code></pre></div><p>启动服务器，发送 GET <code>http://127.0.0.1/user/1</code>，客户端接收到的数据如下：</p>
<pre tabindex="0"><code>Through /user/* middleware...
Through /* middleware...
Through /user* middleware...
Get user by id 1...
</code></pre><p><code>app.use()</code>、<code>app.METHOD()</code>和<code>app.all()</code>都支持同时注册多个回调函数，所以可以使用下列方式来连续定义多个中间件（以<code>app.use()</code>为例）：</p>
<ul>
<li>
<p><code>app.use(mw1, mw2, ...)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mw1</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Middleware 1 running...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mw2</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Middleware 2 running...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">mw1</span><span class="p">,</span> <span class="nx">mw2</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Middleware 3 running...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p><code>app.use([mw1, mw2, ...], ...)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mw1</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Middleware 1 running...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mw2</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Middleware 2 running...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">([</span><span class="nx">mw1</span><span class="p">,</span> <span class="nx">mw2</span><span class="p">],</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Middleware 3 running...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="注意事项" data-numberify>注意事项<a class="anchor ms-1" href="#注意事项"></a></h1>
<p>使用中间件时，有以下注意事项：</p>
<ul>
<li>一定要在路由之前注册中间件。</li>
<li>客户端发送过来的请求，可以连续调用多个中间件进行处理。</li>
<li>连续调用多个中间件时，多个中间件之间，共享<code>request</code>和<code>response</code>对象。</li>
<li>执行完中间件的业务代码之后，不要忘记调用<code>next()</code>函数。</li>
<li>为了防止代码透辑混乱，调用<code>next()</code>函数后不要再写额外的代码。</li>
<li>调用<code>res.send()</code>会终止业务逻辑处理，后续的中间件都不会被执行。</li>
</ul>
<hr>
<h1 id="中间件分类" data-numberify>中间件分类<a class="anchor ms-1" href="#中间件分类"></a></h1>
<p>Express官方将常见的中间件用法分成了5大类：</p>
<ul>
<li><strong>应用级别的中间件</strong>：通过<code>app.use()</code>或<code>app.METHOD()</code>等，绑定到<code>app</code>实例上的中间件。</li>
<li><strong>路由级别的中间件</strong>：绑定到<code>express.Router()</code>实例上的中间件。路由级别中间件的用法与应用级别中间件的用法没有任何区别，仅仅是绑定的对象不同。</li>
<li><strong>错误级别的中间件</strong>：专门用来捕获项目中发生的异常错误，从而防止项目异常崩溃的问题。错误级别中间件的处理函数中，必须包含4个形参，形参顺序从前到后分别是 <code>(err, req, res, next)</code>。</li>
<li><strong>Express内置的中间件</strong>。</li>
<li><strong>第三方的中间件</strong>。</li>
</ul>
<h2 id="路由级别中间件" data-numberify>路由级别中间件<a class="anchor ms-1" href="#路由级别中间件"></a></h2>
<p>通过在<code>express.Router()</code>实例上绑定全局中间件，可以为该路由下的所有请求进行统一处理。例如：</p>
<ul>
<li>
<p><code>user.js</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * User 路由模块
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 统一处理 /user 请求，所有到达该路由的请求都会先经过此中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">req</span><span class="p">.</span><span class="nx">msg</span> <span class="o">=</span> <span class="s2">&#34;Through user&#39;s Middleware...\n&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 访问 GET /user，会经过该模块的全局中间件
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 客户端获得的响应数据如下：
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Through user&#39;s Middleware...
</span></span></span><span class="line"><span class="cl"><span class="cm"> * This is user page...
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">msg</span> <span class="o">+</span> <span class="s1">&#39;This is user page...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 访问 GET /user/1，会经过该模块的全局中间件
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 客户端获得的响应数据如下：
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Through user&#39;s Middleware...
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Get user by id 1 ...
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">msg</span> <span class="o">+</span> <span class="sb">`Get user by id </span><span class="si">${</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span><span class="si">}</span><span class="sb"> ...`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 访问 POST /user/add，会经过该模块的全局中间件
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 客户端获得的响应数据如下：
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Through user&#39;s Middleware...
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Add new user...
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/add&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">msg</span> <span class="o">+</span> <span class="s1">&#39;Add new user...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 向外导出路由对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></span></code></pre></div></li>
<li>
<p><code>app.js</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./user&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="nx">router</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 请求 GET / 不会通过 user.js 中定义的中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;This is home page...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="错误级别中间件" data-numberify>错误级别中间件<a class="anchor ms-1" href="#错误级别中间件"></a></h2>
<p>错误级别中间件是专门用来捕获项目中发生的异常错误，从而防止项目异常崩溃的问题。错误级别中间件的处理函数中，形参顺序从前到后分别是 <code>(err, req, res, next)</code>。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Server running error!&#39;</span><span class="p">)</span>    <span class="c1">// 抛出自定义异常
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;This is home page&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 定义并注册错误级别中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;[error]: &#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Error! &#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>启动服务器，发送 GET <code>http://127.0.0.1/</code> 请求，客户端接收到的数据如下：</p>
<pre tabindex="0"><code>Error! Server running error!
</code></pre><p>终端打印：</p>
<pre tabindex="0"><code>[error]: Server running error!
</code></pre><blockquote>
<p>注：<strong>错误级别的中间件必须注册在所有路由之后！</strong></p>
</blockquote>
<blockquote>
<p>注：在正常情况下，服务器发生异常时，发送给客户端的是一个异常页面。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Error<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">pre</span><span class="p">&gt;</span>Error: Server running error!<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span> <span class="ni">&amp;nbsp;</span> <span class="ni">&amp;nbsp;</span>at /root/study-js/express/middleware-error.js:5:11<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span> <span class="ni">&amp;nbsp;</span> <span class="ni">&amp;nbsp;</span>at Layer.handle [as handle_request] (/root/study-js/express/node_modules/express/lib/router/layer.js:95:5)<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span> <span class="ni">&amp;nbsp;</span> <span class="ni">&amp;nbsp;</span>at next (/root/study-js/express/node_modules/express/lib/router/route.js:137:13)<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span> <span class="ni">&amp;nbsp;</span> <span class="ni">&amp;nbsp;</span>at Route.dispatch (/root/study-js/express/node_modules/express/lib/router/route.js:112:3)<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span> <span class="ni">&amp;nbsp;</span> <span class="ni">&amp;nbsp;</span>at Layer.handle [as handle_request] (/root/study-js/express/node_modules/express/lib/router/layer.js:95:5)<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span> <span class="ni">&amp;nbsp;</span> <span class="ni">&amp;nbsp;</span>at /root/study-js/express/node_modules/express/lib/router/index.js:281:22<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span> <span class="ni">&amp;nbsp;</span> <span class="ni">&amp;nbsp;</span>at Function.process_params (/root/study-js/express/node_modules/express/lib/router/index.js:341:12)<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span> <span class="ni">&amp;nbsp;</span> <span class="ni">&amp;nbsp;</span>at next (/root/study-js/express/node_modules/express/lib/router/index.js:275:10)<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span> <span class="ni">&amp;nbsp;</span> <span class="ni">&amp;nbsp;</span>at expressInit (/root/study-js/express/node_modules/express/lib/middleware/init.js:40:5)<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span> <span class="ni">&amp;nbsp;</span> <span class="ni">&amp;nbsp;</span>at Layer.handle [as handle_request] (/root/study-js/express/node_modules/express/lib/router/layer.js:95:5)<span class="p">&lt;/</span><span class="nt">pre</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在使用了错误级别的中间件后，服务器发生异常时，可以自定义客户端显示的内容。</p>
</blockquote>
<h2 id="express-内置中间件" data-numberify>Express 内置中间件<a class="anchor ms-1" href="#express-内置中间件"></a></h2>
<p>自Express4.16.0版本开始，Express内置了3个常用的中间件，极大的提高了Express项目的开发效率和体验：</p>
<ul>
<li>
<p><code>express.static()</code>：快速托管静态资源的内置中间件，例如：HTML、图片、CSS等（无兼客性要求，旧版亦可使用）。</p>
</li>
<li>
<p><code>express.json()</code>：解析JSON格式的请求体数据（有兼容性要求，仅在4.16.0及其后续版本中可用）。</p>
<p>使用方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// 配置解析 application/json 格式数据的内置中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
</span></span></code></pre></div><p>配置了<code>express.json()</code>中间件之后，就可以在其它中间件中，使用<code>request.body</code>获取从客户端发送过来的JSON数据。示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 配置 express.json()，解析JSON格式请求体数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 使用 request.body 接收客户端发送的请求体数据
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 默认情况下，若不配置解析表单数据的中间件，则 request.body 默认为 undefined
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;OK&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p><code>express.urlencoded()</code>：解析URL-encoded格式的请求体数据（有兼容性要求）。</p>
<p>使用方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// 配置解析 application/x-www-form-urlencoded 格式数据的内置中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="nx">extended</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}))</span>
</span></span></code></pre></div><p><code>express.urlencoded()</code>配置完成后，同样也是使用<code>request.body</code>获取数据。示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 配置 express.urlencoded()，解析 form-data 中的 urlencoded 格式数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="nx">extended</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// urlencoded 格式数据也是使用 request.body 接收，默认也为 undefined
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/book&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;OK&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>注：<code>express.json()</code>和<code>express.urlencoded()</code>可以同时配置，两者并没有冲突。</p>
</blockquote>
<h2 id="第三方中间件" data-numberify>第三方中间件<a class="anchor ms-1" href="#第三方中间件"></a></h2>
<p>第三方中间件是指非Express官方内置的，而是由其它第三方团队（用户）所开发出来的中间件。在开发过程中，根据项目需求使用一些第三方中间件，可以提高项目开发的效率。</p>
<p>例如<code>body-parser</code>这个第三方中间件，在Express 4.16.0之前的版本中，经常被人们用来解析请求体数据。<code>body-parser</code>使用步骤如下：</p>
<ol>
<li>
<p>安装<code>body-parser</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm i body-parser
</span></span></code></pre></div></li>
<li>
<p>使用<code>require()</code>导入中间件。</p>
</li>
<li>
<p>调用<code>app.use()</code>注册并使用中间件。</p>
</li>
</ol>
<p>示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 导入并注册 body-parse
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">parser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">parser</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">parser</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="nx">extended</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// body-parser 同样是使用 request.body 来获取请求体数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;OK&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><h2 id="自定义中间件" data-numberify>自定义中间件<a class="anchor ms-1" href="#自定义中间件"></a></h2>
<p>以手动模拟一个类似于<code>express.urlencoded()</code>的解析POST表单数据的中间件为例，实现步骤如下：</p>
<ol>
<li>
<p>定义中间件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">qs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;querystring&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">urlencoded</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* 请求数据处理过程... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p>监听<code>request</code>的<code>data</code>事件。</p>
<p>要解析POST表单数据，首先需要获取表单数据，所以需要监听<code>request</code>的<code>data</code>事件来获取客户端发送到服务器的数据。</p>
<p>如果数据量比较大，无法一次性发送完毕，客户端会把数据切割后，分批发送到服务器。所以<code>data</code>事件可能会触发多次，每一次触发<code>datā</code>事件时，获取到的数据可能只是完整数据的一部分，需要手动对接收到的数据进行拼接。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">dataStr</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 监听 request 的 data 事件
</span></span></span><span class="line"><span class="cl"><span class="cm"> * chunk 用于获取从客户端接收到的数据
</span></span></span><span class="line"><span class="cl"><span class="cm"> * chunk 获取到的数据可能不完整，需要手动拼接
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dataStr</span> <span class="o">+=</span> <span class="nx">chunk</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p>监听<code>request</code>的<code>end</code>事件。</p>
<p>当请求体数据接收完毕之后，会自动触发<code>request</code>的<code>end</code>事件。因此可以在<code>request</code>的<code>end</code>事件中，拿到处理完成的请求体数据。</p>
</li>
<li>
<p>使用<code>querystring</code>模块解析请求体数据。</p>
<p>Node.js内置了一个<code>querystring</code>模块，专门用来处理查询字符。通过这个横块提供的<code>parse()</code>函数，可以轻松把查询字符串解析成对象格式。</p>
</li>
<li>
<p>将解析出来的数据对象挂载为<code>request.body</code>。</p>
<p>上游中间件与下游中间件之间都是共享同一份<code>request</code>和<code>response</code>。因此可以将解析出来的数据挂载为<code>request</code>的自定义属性（例如<code>request.body</code>）供下游使用。</p>
<p>步骤3-4的实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 监听 request 的 end 事件
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// TODO: 把字符串格式的请求体数据，解析成对象格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">dataStr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">req</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">body</span>
</span></span><span class="line"><span class="cl">    <span class="nx">next</span><span class="p">()</span>  <span class="c1">// 解析完请求体之后，调用 next() 将请求流转到下游中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p>将自定义中间件封装为模块。</p>
<p>模块（<code>custom-body-parser</code>）的完整实现如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">qs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;querystring&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">urlencoded</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">dataStr</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 监听 request 的 data 事件
</span></span></span><span class="line"><span class="cl"><span class="cm">     * chunk 用于获取从客户端接收到的数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     * chunk 获取到的数据可能不完整，需要手动拼接
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">dataStr</span> <span class="o">+=</span> <span class="nx">chunk</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 监听 request 的 end 事件
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// console.log(dataStr);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// TODO: 把字符串格式的请求体数据，解析成对象格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kr">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">dataStr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// console.log(body);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">req</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">body</span>
</span></span><span class="line"><span class="cl">        <span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">urlencoded</span> <span class="p">}</span>
</span></span></code></pre></div><p>对模块进行测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">parser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./custom-body-parser&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 注册自定义的解析表单数据中间件
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">parser</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Node.js Express 路由</title>
      <link>/docs/node-js/express/router/</link>
      <pubDate>Sat, 12 Aug 2023 13:32:52 +0000</pubDate>
      
      <guid>/docs/node-js/express/router/</guid>
      <description><![CDATA[路由的类型 在Express中，路由指的是客户端的请求与服务器处理函数之间的映射关系。Express中的路由分三部分组成： app.METHOD(PATH, HANDLER) METHOD：请]]></description>
      <content:encoded><![CDATA[<h1 id="路由的类型" data-numberify>路由的类型<a class="anchor ms-1" href="#路由的类型"></a></h1>
<p>在Express中，路由指的是客户端的请求与服务器处理函数之间的映射关系。Express中的路由分三部分组成：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">METHOD</span><span class="p">(</span><span class="nx">PATH</span><span class="p">,</span> <span class="nx">HANDLER</span><span class="p">)</span>
</span></span></code></pre></div><ul>
<li><code>METHOD</code>：请求的类型。</li>
<li><code>PATH</code>：请求的URL地址。</li>
<li><code>HANDLER</code>：请求的处理（回调）函数。</li>
</ul>
<hr>
<h1 id="路由的匹配过程" data-numberify>路由的匹配过程<a class="anchor ms-1" href="#路由的匹配过程"></a></h1>
<p>每当一个请求到达服务器之后，需要先经过路由的匹配，只有匹配成功之后，才会调用对应的处理函数。</p>
<p>在匹配时，Express会按照路由被定义的顺序进行匹配，如果请求的类型和请求的URL同时匹配成功，则Express会将这次请求，转
交给对应的函数进行处理。</p>
<p>关于路由的基本使用，已经在 <a href="/docs/node-js/express/express-base/">Express 基础</a> 中进行了介绍。</p>
<hr>
<h1 id="路由的模块化使用" data-numberify>路由的模块化使用<a class="anchor ms-1" href="#路由的模块化使用"></a></h1>
<p>为了方使对路由进行模块化的管理，Express不建议将路由直接挂载到<code>app</code>上，而是推荐将路由抽离为单独的模块。</p>
<p>将路由抽离为单独模块的步骤如下：</p>
<ol>
<li>创建路由模块对应的 <code>.js</code> 文件。</li>
<li>调用 <code>express.Router()</code> 函数创建路由对象。</li>
<li>向路由对象上挂载具体的路由。</li>
<li>使用 <code>module.exports</code> 向外共享路由对象。</li>
<li>使用 <code>app.use()</code> 函数注册路由模块。</li>
</ol>
<p>例如，为<code>user</code>模块创建一个路由对象：</p>
<ol>
<li>
<p>新建一个<code>app.js</code>文件，获取<code>app</code>对象，并使用<code>app.listen()</code>方法监听端口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;http://127.0.0.1/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p>为<code>user</code>API请求创建一个<code>user.js</code>模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * User路由模块
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 创建路由对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 使用 router 对象挂载具体的路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/user/list&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Get users list...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/user/add&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Add new user...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 向外导出路由对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>app.js</code>中，导入<code>user.js</code>模块，并使用<code>app.use()</code>函数注册<code>user.js</code>模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 导入并注册路由模块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./user&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * app.use() 可用来注册全局中间件
</span></span></span><span class="line"><span class="cl"><span class="cm"> * app.use() 还可以为路由模块添加路由前缀，例如：
</span></span></span><span class="line"><span class="cl"><span class="cm"> * app.use(&#39;/api&#39;, router)
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
</ol>
<p>接着启动服务器，使用对应方式进行请求。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Node.js Express 模块基础</title>
      <link>/docs/node-js/express/base/</link>
      <pubDate>Thu, 10 Aug 2023 15:11:28 +0000</pubDate>
      
      <guid>/docs/node-js/express/base/</guid>
      <description><![CDATA[Express是一个Web开发框架。Express本质上是NPM上的一个第三方模块，提供了快速创建Web服务器、API接口服务器的方法。Ex]]></description>
      <content:encoded><![CDATA[<p>Express是一个Web开发框架。Express本质上是NPM上的一个第三方模块，提供了快速创建Web服务器、API接口服务器的方法。Express中文网地址为<a href="https://www.expressjs.com.cn/" target="_blank" rel="noopener noreferrer">https://www.expressjs.com.cn/<i class="fas fa-external-link-square-alt ms-1"></i></a>，官网地址为<a href="https://expressjs.com/" target="_blank" rel="noopener noreferrer">https://expressjs.com/<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p>使用Node.js提供的原生<code>http</code>模块也一样可以创建Web服务器。只不过<code>http</code>模块用起来很麻烦、开发效率低，而Express在基于<code>http</code>的基础上进行了进一步的封装，能极大提高开发效率。</p>
<p>安装Express 4.17.2版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm i express@4.17.2
</span></span></code></pre></div><p>使用Express的基本步骤如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 创建 Web 服务器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 监听 80 端口，服务器启动成功后执行回调函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Express server running at http://127.0.0.1&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>启动服务器，程序会先执行<code>app.listen()</code>方法中的回调函数。</p>
<hr>
<h1 id="请求处理" data-numberify>请求处理<a class="anchor ms-1" href="#请求处理"></a></h1>
<p>在Express中，请求方式并不需要自己使用Request对象去判断，可以直接调用Express提供的方法：</p>
<ul>
<li>
<p><code>app.get()</code>：监听 GET 请求。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 监听客户端 GET /user 请求
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 参数1：客户端请求的 URL 地址
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 参数2：请求对应的处理函数
</span></span></span><span class="line"><span class="cl"><span class="cm"> *      - req: Request 对象，包含了请求相关的属性与方法
</span></span></span><span class="line"><span class="cl"><span class="cm"> *      - res: Response 对象，包含了响应相关的属性与方法
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/uer&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 向客户端发送 JSON 对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">id</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;zhangsan&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">age</span><span class="o">:</span> <span class="s1">&#39;20&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">gender</span><span class="o">:</span> <span class="s1">&#39;man&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p><code>app.post()</code>：监听 POST 请求。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 监听客户端 POST /login 请求
</span></span></span><span class="line"><span class="cl"><span class="cm"> * post() 方法的参数与 get() 方法类似
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 向客户端发送文本消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;登录成功!&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
</ul>
<p>在Express中，可以使用Response对象的<code>send()</code>方法向客户端响应数据，响应的数据可以是JSON、文本、HTML等等。</p>
<blockquote>
<p>注：在调用了<code>res.send()</code>方法之后，代表业务逻辑处理完毕，所以<code>res.send()</code>方法之后不能再添加任何处理逻辑。</p>
</blockquote>
<p>Express支持所有关于HTTP的请求，可以通过使用<code>app.METHOD()</code>来指定请求方式。例如DELETE请求使用<code>app.delete()</code>。</p>
<p>Express还支持通过<code>app.all()</code>来匹配所有请求方式。</p>
<hr>
<h1 id="获取请求参数" data-numberify>获取请求参数<a class="anchor ms-1" href="#获取请求参数"></a></h1>
<p>获取查询参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 request.query 对象，获取查询（路径）参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取具体的查询参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">password</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">name</span> <span class="o">||</span> <span class="o">!</span><span class="nx">password</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;登录失败! 请输入用户名密码!&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="o">==</span> <span class="s1">&#39;admin&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">password</span> <span class="o">==</span> <span class="s1">&#39;123456&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;登录成功!&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;登录失败! 用户名或密码不正确!&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>例如，使用 POST <code>http://localhost/login?name=admin&amp;password=123456</code> 进行请求时，可以通过<code>req.query['name']</code>和<code>req.query['password']</code>获取<code>name=admin</code>和<code>password=123456</code>这两个参数。然后将获取到的参数进行判断。</p>
<p>获取动态参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 动态参数使用 &#34;:&#34; + 参数名 定义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 使用 request.params 对象获取动态（URL）参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 向客户端发送 JSON 对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">id</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;zhangsan&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">age</span><span class="o">:</span> <span class="s1">&#39;20&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">gender</span><span class="o">:</span> <span class="s1">&#39;man&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>例如，使用 GET <code>http://localhost/user/1</code> 进行请求时，通过<code>req.params['id']</code>获取URL中这个<code>:id</code>参数。</p>
<hr>
<h1 id="托管静态资源" data-numberify>托管静态资源<a class="anchor ms-1" href="#托管静态资源"></a></h1>
<p>Express中使用<code>express.static()</code>和<code>app.use()</code>方法可以方便地托管静态资源。例如，托管存放静态资源的<code>public</code>目录：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 使用 express.static() 方法托管静态资源
</span></span></span><span class="line"><span class="cl"><span class="cm"> * express.static() 需要使用 app.use() 方法，并将其作为参数放入 app.use() 中
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 在进行访问时，默认直接在根路径下请求资源，无需使用 public 作为请求路径
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 并且 public 下的 index.html 会作为 GET / 请求时默认响应的页面
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 注：public 目录需要与当前 .js 文件同级
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="s1">&#39;public&#39;</span><span class="p">))</span>
</span></span></code></pre></div><p><code>express.static()</code>可以通过多次调用来托管多个静态目录：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="s1">&#39;public&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 可以多次使用 express.static() 托管多个静态资源
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 在访问静态资源时，express.static() 会根据目录的添加顺序查找所需的文件
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="s1">&#39;files&#39;</span><span class="p">))</span>
</span></span></code></pre></div><p>Express托管静态目录时，可以指定访问当前资源的路径前缀：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * app.use() 可以使用路径前缀来访问静态资源
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 只需要将 路径前缀 作为 参数1，将 express.static() 方法作为 参数2 即可
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/static&#39;</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="s1">&#39;static&#39;</span><span class="p">))</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>

