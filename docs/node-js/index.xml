<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Node.js on Linner&#39;s Blog</title>
    <link>/docs/node-js/</link>
    <description>Recent content in Node.js on Linner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>Copyright © 2020-2023 Linner. All Rights Reserved.
</copyright>
    <lastBuildDate>Mon, 07 Aug 2023 08:05:53 +0000</lastBuildDate><atom:link href="/docs/node-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTTP 模块</title>
      <link>/docs/node-js/http-module/</link>
      <pubDate>Mon, 07 Aug 2023 08:05:53 +0000</pubDate>
      
      <guid>/docs/node-js/http-module/</guid>
      <description><![CDATA[http模块是Node.js官方提供的、用于创建Web服务器的模块。通过http模块提供的http.createServer()方法，就能像]]></description>
      <content:encoded><![CDATA[<p><code>http</code>模块是Node.js官方提供的、用于创建Web服务器的模块。通过<code>http</code>模块提供的<code>http.createServer()</code>方法，就能像Web服务器一样对外提供Web资源服务。</p>
<p>在Node.js中无需使用第三方Web服务器软件，通过<code>http</code>模块就能模拟服务器软件，从而对外提供Web服务。</p>
<p><code>http</code>模块主要用于搭建HTTP服务端和客户端，使用HTTP服务器或客户端功能必须调用<code>http</code>模块。在Node.js中使用Web服务的基本步骤如下：</p>
<ol>
<li>
<p>导入<code>http</code>模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">)</span>
</span></span></code></pre></div></li>
<li>
<p>创建Web服务器实例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">()</span>
</span></span></code></pre></div></li>
<li>
<p>为服务器实例绑定<code>request</code>事件，监听客户端的请求。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">server</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Someone visit our web server.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* Request Handle... */</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p>启动服务器。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="c1">// 监听 8080 端口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1:8080&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* Started Handle... */</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
</ol>
<p>HTTP Demo如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// 1. 导入 http 模块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 2. 创建 web 服务器实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 3. 为服务器实例绑定 request 事件，监听客户端请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">server</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 设置响应头信息
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 状态码：200
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 内容类型: 文本
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 发送响应数据 &#34;Hello World!&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Hello World!\n&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Someone visit our web server.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 4. 启动服务器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1:8080&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>在<code>server.on()</code>方法的回调函数的参数列表中，<code>req</code>就是Request（请求）对象，<code>res</code>就是Response（响应）对象。</p>
<hr>
<h1 id="request-对象" data-numberify>Request 对象<a class="anchor ms-1" href="#request-对象"></a></h1>
<p>Request 对象用于获取客户端发送给服务端的请求信息。</p>
<p>获取请求信息（<code>http.createServer()</code>也能注册回调函数，下方演示了使用方式）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">createServer</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;http&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">createServer</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Request URL: &#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>         <span class="c1">// 请求URL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Request Method: &#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">method</span><span class="p">);</span>   <span class="c1">// 请求方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1:8080&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><hr>
<h1 id="response-对象" data-numberify>Response 对象<a class="anchor ms-1" href="#response-对象"></a></h1>
<p>Request 对象用于服务端响应给客户端数据。</p>
<p>Request 对象响应数据的方式是，调用<code>res.end()</code>方法。就如HTTP Demo中所示。下方展示了另外一个Demo，该Demo展示了Response对象的使用，还展示了<code>http.Server</code>对象的链式调用，并且通过给响应头设置字符集的方式解决中文乱码问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">createServer</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://127.0.0.1:8080&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">createServer</span><span class="p">().</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置响应数据类型并解决中文乱码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain; charset=utf-8&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 发送响应数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="sb">`请求地址: </span><span class="si">${</span><span class="nx">url</span><span class="si">}${</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="si">}</span><span class="sb">\n请求方式: </span><span class="si">${</span><span class="nx">req</span><span class="p">.</span><span class="nx">method</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 当调用了 res.end() 之后，就表示响应已经结束了，此时再进行任何响应都是无效的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at &#39;</span> <span class="o">+</span> <span class="nx">url</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><hr>
<h1 id="根据-url-进行响应" data-numberify>根据 URL 进行响应<a class="anchor ms-1" href="#根据-url-进行响应"></a></h1>
<p>使用Node.js的<code>http</code>模块，为文件系统模块中<a href="/docs/node-js/node-fs/#%e6%a1%88%e4%be%8b2">案例2</a>生成的<code>clock</code>页面搭建Web Server：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">server</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// res.setHeader(&#39;Content-Type&#39;, &#39;text/html; charset=utf-8&#39;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">let</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">url</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// URL处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">DIR_NAME</span> <span class="o">=</span> <span class="s1">&#39;clock&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">url</span> <span class="o">==</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">url</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">DIR_NAME</span><span class="p">,</span> <span class="s1">&#39;index.html&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 匹配以&#39;/index&#39;开头的URL请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s1">&#39;/index&#39;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">url</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">DIR_NAME</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 资源路径拼接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">PATH</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">PATH</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 展示错误消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="sb">`&lt;h1&gt;404 Error! </span><span class="si">${</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="si">}</span><span class="sb"> Not Found!&lt;/h1&gt;`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 发送相应数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server listen at http://127.0.0.1:8080/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>事件循环</title>
      <link>/docs/node-js/node-event/</link>
      <pubDate>Sun, 06 Aug 2023 14:46:07 +0000</pubDate>
      
      <guid>/docs/node-js/node-event/</guid>
      <description><![CDATA[Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。 Node.js 几乎每一个 API 都是支持回调函]]></description>
      <content:encoded><![CDATA[<p>Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。</p>
<p>Node.js 几乎每一个 API 都是支持回调函数的。</p>
<p>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。</p>
<p>Node.js 单线程类似进入一个<code>while(true)</code>的事件循环，直到没有事件观察者时退出。每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数。</p>
<hr>
<h1 id="事件驱动程序" data-numberify>事件驱动程序<a class="anchor ms-1" href="#事件驱动程序"></a></h1>
<p>Node.js 使用事件驱动模型。在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数：</p>
<p><picture><img class="img-fluid " alt="事件驱动流程" src="/docs/node-js/node-event/uTools_1691333689230.png" loading="lazy" width="626" height="252" />
</picture>

</p>
<p>这套流程有点类似于观察者模式，事件相当于一个主题（Subject），而所有注册到这个事件上的处理函数相当于观察者（Observer）。当主题发生改变（事件触发）时，通知观察者进行更新（触发相应的回调函数）。</p>
<hr>
<h1 id="事件模块" data-numberify>事件模块<a class="anchor ms-1" href="#事件模块"></a></h1>
<p>Node.js 有多个内置的事件，可以通过引入 <code>events</code> 模块，并通过实例化 <code>EventEmitter</code> 类来绑定和监听事件，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// 引入 events 模块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">events</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 创建 EventEmitter 对象
</span></span></span><span class="line"><span class="cl"><span class="cm"> * EventEmitter可用于注册事件处理和触发事件
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">eventEmitter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">events</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 绑定 data_received 事件处理程序
</span></span></span><span class="line"><span class="cl"><span class="cm"> * eventEmitter.on() 方法：
</span></span></span><span class="line"><span class="cl"><span class="cm"> * - 参数1：绑定的事件名称
</span></span></span><span class="line"><span class="cl"><span class="cm"> * - 参数2：触发事件时执行的回调函数
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">DATA_RECEIVED</span> <span class="o">=</span> <span class="s1">&#39;data_received&#39;</span> 
</span></span><span class="line"><span class="cl"><span class="nx">eventEmitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">DATA_RECEIVED</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Receiving Successful!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 绑定 connection 事件处理程序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">CONNECTION</span> <span class="o">=</span> <span class="s1">&#39;connection&#39;</span> 
</span></span><span class="line"><span class="cl"><span class="nx">eventEmitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">CONNECTION</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Connected Successful!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 触发 data_received 事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">eventEmitter</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="nx">DATA_RECEIVED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 触发 connection 事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">eventEmitter</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="nx">CONNECTION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Executed...&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p>执行结果如下：</p>
<pre tabindex="0"><code>Connected Successful!
Receiving Successful!
Executed...
</code></pre>]]></content:encoded>
    </item>
    
    <item>
      <title>文件系统模块</title>
      <link>/docs/node-js/node-fs/</link>
      <pubDate>Sun, 06 Aug 2023 07:35:26 +0000</pubDate>
      
      <guid>/docs/node-js/node-fs/</guid>
      <description><![CDATA[使用fs模块，首先需要导入： const fs = require(&#39;fs&#39;) 读取文件 下方是一个通过fs.readFile()读取文件的示例： // 1. 导入fs模块，来操作文件 const fs = require(&#39;fs&#39;) /** *]]></description>
      <content:encoded><![CDATA[<p>使用<code>fs</code>模块，首先需要导入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h1 id="读取文件" data-numberify>读取文件<a class="anchor ms-1" href="#读取文件"></a></h1>
<p>下方是一个通过<code>fs.readFile()</code>读取文件的示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// 1. 导入fs模块，来操作文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 2. 调用 fs.readFile() 方法读取文件
</span></span></span><span class="line"><span class="cl"><span class="cm"> *  - 参数1（必须）：读取文件的存放路径
</span></span></span><span class="line"><span class="cl"><span class="cm"> *  - 参数2（可选）：读取文件时采用的编码格式，默认指定utf8
</span></span></span><span class="line"><span class="cl"><span class="cm"> *  - 参数3（必须）：回调函数，拿到读取失败（err）和成功的结果（dataStr）
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">dataStr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 2.1 打印失败的结果
</span></span></span><span class="line"><span class="cl"><span class="cm">     *   - 如果读取成功，则 err 的值为 null，dataStr的值为 文件的内容
</span></span></span><span class="line"><span class="cl"><span class="cm">     *   - 如果读取失败，则 err 的值为 错误对象，dataStr的值为 undefined
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;-------------&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 2.2 打印成功的结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">dataStr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><code>fs.readFile()</code>用于异步读取文件。当<code>fs.readFile()</code>读取到文件之后，会将信息传递给<code>err</code>和<code>dataStr</code>对象。<code>err</code>对象可用于读取成功与否的判断，并且记录了读取失败时的信息；<code>dataStr</code>对象记录了读取到的文件内容。</p>
<p>判断文件是否读取成功：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">fileName</span> <span class="o">=</span> <span class="s1">&#39;test.txt&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">fileName</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">dataStr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;readFileErr: &#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Read &#39;</span> <span class="o">+</span> <span class="nx">fileName</span> <span class="o">+</span> <span class="s1">&#39; success!&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">dataStr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><code>fs</code>模块还有一个<code>readFileSync()</code>方法，用于即时地文件读取，它与<code>readFile()</code>异步地文件读取区别如下：</p>
<ul>
<li>
<p><code>readFile()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">readFile</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Program started...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">fileName</span> <span class="o">=</span> <span class="s1">&#39;test.txt&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nx">readFile</span><span class="p">(</span><span class="nx">fileName</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">dataStr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;-------------&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;readFileErr: &#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Read &#39;</span> <span class="o">+</span> <span class="nx">fileName</span> <span class="o">+</span> <span class="s1">&#39; success!&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">dataStr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;-------------&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Program ended...&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p>输出结果：</p>
<pre tabindex="0"><code>Program started...
Program ended...
-------------
Read test.txt success!
Hello Node.js!
-------------
</code></pre><p>可以发现异步地文件读取，不会立即执行回调函数，而是直接执行下一条指令，直到文件读取成功才执行回调。</p>
</li>
<li>
<p><code>readFileSync()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">readFileSync</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;fs&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// readFileSync() 不能注册回调函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">fileData</span> <span class="o">=</span> <span class="nx">readFileSync</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">fileData</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;-------------&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Readed Success!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 没有指定字符集的话是返回一个 Buffer 对象，所以要将其转为 String
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">var</span> <span class="nx">fileContent</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="nx">fileData</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fileContent</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;-------------&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Readed Error!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Program ended...&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p>输出：</p>
<pre tabindex="0"><code>Program started...
-------------
Readed Success!
Hello Node.js!
-------------
Program ended...
</code></pre></li>
</ul>
<hr>
<h1 id="写入内容" data-numberify>写入内容<a class="anchor ms-1" href="#写入内容"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// 1. 导入fs.writeFile() 方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="p">{</span> <span class="nx">writeFile</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 2. 调用 fs.wirteFile() 方法，写入文件的内容
</span></span></span><span class="line"><span class="cl"><span class="cm"> *  - 参数1（必须）：文件的存放路径
</span></span></span><span class="line"><span class="cl"><span class="cm"> *  - 参数2（必须）：要写入文件的内容
</span></span></span><span class="line"><span class="cl"><span class="cm"> *  - 参数3（可选）：设置文件模式
</span></span></span><span class="line"><span class="cl"><span class="cm"> *  - 参数4（必须）：回调函数
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">writeFile</span><span class="p">(</span><span class="s1">&#39;test1.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;Writes new content&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 2.1 如果文件写入成功，则 err == null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 2.3 如果文件写入失败，则 err == 错误对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><blockquote>
<p>注：要触发文件不存在，<code>err</code>返回错误对象的前提是路径也不存在，否则<code>fs.wirteFile()</code>默认会创建一个新文件并写入。例如你当前目录下不存在<code>test</code>这个目录的话，可以将路径改成<code>test/test.txt</code>来让<code>err</code>返回错误对象。</p>
</blockquote>
<p>判断文件写入是否成功：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">writeFile</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;fs&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">writeFile</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;Writes new content...&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;writeFileErr: &#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Writing Success!&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><code>fs.writeFile()</code>也有与<code>fs.readFile()</code>类似的即时函数<code>fs.writeFileSync()</code>，作用与<code>fs.readFileSync()</code>类似。</p>
<hr>
<h1 id="路径动态拼接问题" data-numberify>路径动态拼接问题<a class="anchor ms-1" href="#路径动态拼接问题"></a></h1>
<p>在使用<code>fs</code>模块操作文件时，如果提供的操作路径是以<code>./</code>或<code>../</code>开头的相对路径时，很容易出现路径动态拼接错误的问题。</p>
<p>演示路径动态拼接问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">readFile</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;./test.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Reading Success!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span></code></pre></div><p>切换到上层目录，执行该JS，会发现报错：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">cd</span> ..
</span></span><span class="line"><span class="cl">$ node js/path-problem.js
</span></span><span class="line"><span class="cl">ENOENT: no such file or directory, open <span class="s1">&#39;./test.txt&#39;</span>
</span></span></code></pre></div><p>这是因为代码在运行的时候，会<u>以执行Node命令时所处的目录</u>，动态拼接出被操作文件的完整路径。</p>
<p>在使用<code>fs</code>模块操作文件时，可以通过<code>__dirname</code>直接提供完整的路径，不要提供以<code>./</code>或<code>../</code>开头的相对路径，从而防止路径动态拼接的问题。</p>
<p>修改如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">readFile</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 出现路径拼接问题，是因为使用了 &#39;./&#39; 或 &#39;../&#39; 之类的相对路径
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Node在运行JS时，会将这类相对路径进行处理，使用当前JS文件所在的目录拼接在打开的文件路径上
</span></span></span><span class="line"><span class="cl"><span class="cm"> * __dirname 表示当前JS文件所处的目录
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">readFile</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/test.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Reading Success!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>再次执行，文件可以成功打开。</p>
<hr>
<h1 id="path-模块处理路径" data-numberify>Path 模块处理路径<a class="anchor ms-1" href="#path-模块处理路径"></a></h1>
<p><code>path</code>模块是Node.js官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求。</p>
<p>常用的方法有：</p>
<ul>
<li><code>path.join()</code>：将多个路径片段拼接成一个完整的路径字符串。</li>
<li><code>path.basename()</code>：从路径字符串中，将文件名解析出来。</li>
<li><code>path.extname()</code>：从路径字符串中，将文件名扩展名解析出来。</li>
</ul>
<p>使用之前需要先导入<code>path</code>模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p><code>path.join()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// path.join() 将参数列表中的字符串进行路径拼接，并返回拼接结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">pathStr</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;/dir1&#39;</span><span class="p">,</span> <span class="s1">&#39;dir2/dir3&#39;</span><span class="p">,</span> <span class="s1">&#39;../&#39;</span><span class="p">,</span> <span class="s1">&#39;./dir4&#39;</span><span class="p">,</span> <span class="s1">&#39;dir5&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">pathStr</span><span class="p">);</span>
</span></span></code></pre></div><p>输出结果如下：</p>
<pre tabindex="0"><code>/dir1/dir2/dir4/dir5
</code></pre><blockquote>
<p>注：<code>path.join()</code>方法仅用于路径拼接，相当于路径字符串的处理，不对路径的存在与否进行检查。</p>
</blockquote>
<p>利用<code>path.join()</code>替代<code>+</code>号拼接路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">readFile</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">join</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">readFile</span><span class="p">(</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;test.txt&#39;</span><span class="p">),</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><code>path.basename()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">fpath</span> <span class="o">=</span> <span class="s1">&#39;/var/local/html/blog/index.html&#39;</span> <span class="c1">// 文件存放路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 根据路径解析文件（目录）名
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">basename</span><span class="p">(</span><span class="nx">fpath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">nameWithoutExt</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">basename</span><span class="p">(</span><span class="nx">fpath</span><span class="p">,</span> <span class="s1">&#39;.html&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fullName</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">nameWithoutExt</span><span class="p">);</span>
</span></span></code></pre></div><p>输出结果如下：</p>
<pre tabindex="0"><code>index.html
index
</code></pre><p><code>path.basename(path[, ext])</code>参数和返回值：</p>
<ul>
<li>
<p><code>path</code>（必选）：表示要解析的路径字符串。</p>
</li>
<li>
<p><code>ext</code>（可选）：表示文件扩展名（后缀）。</p>
<p>经过测试后你会发现，<code>path.basename()</code>只是将最后一段字符串解析出来，然后将其后缀中与<code>ext</code>相同的部分去除后返回。</p>
</li>
<li>
<p>返回值：路径中的最后一部分（有可能是文件名，也有可能是目录名）。当指定扩展名时，返回的有可能是不包含扩展名的名称。</p>
</li>
</ul>
<p>与<code>path.join()</code>类似<code>path.basename()</code>仅仅是做关于路径的字符串解析，并不关心实际上是否存在这样的路径。<code>path.basename()</code>解析到的不仅是文件名，还可以是目录名。并且<code>path.basename()</code>在解析后缀时，如果当前路径的<code>basename</code>没有相应的后缀，<code>path.basename()</code>会将整个<code>basename</code>返回。</p>
<p><code>path.extname()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">fpath</span> <span class="o">=</span> <span class="s1">&#39;/var/local/html/blog/index.html&#39;</span> <span class="c1">// 文件存放路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">extName</span> <span class="o">=</span>  <span class="nx">path</span><span class="p">.</span><span class="nx">extname</span><span class="p">(</span><span class="nx">fpath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">extName</span><span class="p">);</span>
</span></span></code></pre></div><p>输出结果为：</p>
<pre tabindex="0"><code>.html
</code></pre><hr>
<h1 id="案例" data-numberify>案例<a class="anchor ms-1" href="#案例"></a></h1>
<h2 id="案例1" data-numberify>案例1<a class="anchor ms-1" href="#案例1"></a></h2>
<p>使用fs文件系统模块，将文件中的考试数据，整理到新的文件中。</p>
<p>创建一个<code>score.txt</code>文件，内容如下：</p>
<pre tabindex="0"><code>小红=99 小白=100 小黄=70 小黑=66 小绿=88
</code></pre><p>编写JS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// 1. 导入 fs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 2. 读取文件内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;score.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">dataStr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 3. 判断是否读取成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;readFileErr: &#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// console.log(&#39;Reading Success!&#39;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// console.log(dataStr);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 4.1 按照空格分割
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">arrOld</span> <span class="o">=</span> <span class="nx">dataStr</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// console.log(arrOld);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 4.2 循环分割后的数组，对每项数据进行替换操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">arrNew</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">arrOld</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">arrNew</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">,</span> <span class="s1">&#39;: &#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// console.log(arrNew);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 4.3 把新数组中的每项进行合并，得到新字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">newStr</span> <span class="o">=</span> <span class="nx">arrNew</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\r\n&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// console.log(newStr);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 5. 把处理完的成绩，写入新文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="s1">&#39;score-ok.txt&#39;</span><span class="p">,</span> <span class="nx">newStr</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;writeFileErr: &#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Writing Success!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>处理完的结果大致如下：</p>
<pre tabindex="0"><code>小红: 99
小白: 100
小黄: 70
小黑: 66
小绿: 88
</code></pre><h2 id="案例2" data-numberify>案例2<a class="anchor ms-1" href="#案例2"></a></h2>
<p>使用<code>fs</code>和<code>path</code>模块将下方HTML文件拆分成对应的<code>html</code>、<code>css</code>和<code>js</code>文件，并写入到<code>clock</code>目录下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>index首页<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">html</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">body</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">margin</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">height</span><span class="p">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">background-image</span><span class="p">:</span> <span class="nb">linear-gradient</span><span class="p">(</span><span class="kc">to</span> <span class="kc">bottom</span> <span class="kc">right</span><span class="p">,</span> <span class="kc">red</span><span class="p">,</span> <span class="kc">gold</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nc">box</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">width</span><span class="p">:</span> <span class="mi">400</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">height</span><span class="p">:</span> <span class="mi">250</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">background-color</span><span class="p">:</span> <span class="nb">rgba</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mf">0.6</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">border-radius</span><span class="p">:</span> <span class="mi">6</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">position</span><span class="p">:</span> <span class="kc">absolute</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">left</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">top</span><span class="p">:</span> <span class="mi">40</span><span class="kt">%</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">transform</span><span class="p">:</span> <span class="nb">translate</span><span class="p">(</span><span class="mi">-50</span><span class="kt">%</span><span class="p">,</span> <span class="mi">-50</span><span class="kt">%</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">box-shadow</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="mi">1</span><span class="kt">px</span> <span class="mi">10</span><span class="kt">px</span> <span class="mh">#fff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">text-shadow</span><span class="p">:</span> <span class="mi">0</span><span class="kt">px</span> <span class="mi">1</span><span class="kt">px</span> <span class="mi">30</span><span class="kt">px</span> <span class="kc">white</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">justify-content</span><span class="p">:</span> <span class="kc">space-around</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">align-items</span><span class="p">:</span> <span class="kc">center</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">font-size</span><span class="p">:</span> <span class="mi">70</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">user-select</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">20</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c">/* 盒子投影 */</span>
</span></span><span class="line"><span class="cl">      <span class="kp">-webkit-</span><span class="n">box-reflect</span><span class="p">:</span> <span class="kc">below</span> <span class="mi">0</span><span class="kt">px</span> <span class="kp">-webkit-</span><span class="nf">gradient</span><span class="p">(</span><span class="kc">linear</span><span class="p">,</span> <span class="kc">left</span> <span class="kc">top</span><span class="p">,</span> <span class="kc">left</span> <span class="kc">bottom</span><span class="p">,</span> <span class="nf">from</span><span class="p">(</span><span class="kc">transparent</span><span class="p">),</span> <span class="nf">color-stop</span><span class="p">(</span><span class="mi">0</span><span class="kt">%</span><span class="p">,</span> <span class="kc">transparent</span><span class="p">),</span> <span class="nf">to</span><span class="p">(</span><span class="nb">rgba</span><span class="p">(</span><span class="mi">250</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mf">.2</span><span class="p">)));</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;HH&#34;</span><span class="p">&gt;</span>00<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>:<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;mm&#34;</span><span class="p">&gt;</span>00<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>:<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;ss&#34;</span><span class="p">&gt;</span>00<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 定时器，每隔 1 秒执行 1 次
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">setInterval</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">HH</span> <span class="o">=</span> <span class="nx">dt</span><span class="p">.</span><span class="nx">getHours</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">mm</span> <span class="o">=</span> <span class="nx">dt</span><span class="p">.</span><span class="nx">getMinutes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">ss</span> <span class="o">=</span> <span class="nx">dt</span><span class="p">.</span><span class="nx">getSeconds</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 为页面上的元素赋值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#HH&#39;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">padZero</span><span class="p">(</span><span class="nx">HH</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#mm&#39;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">padZero</span><span class="p">(</span><span class="nx">mm</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#ss&#39;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">padZero</span><span class="p">(</span><span class="nx">ss</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 补零函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">function</span> <span class="nx">padZero</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">n</span> <span class="o">&gt;</span> <span class="mi">9</span> <span class="o">?</span> <span class="nx">n</span> <span class="o">:</span> <span class="s1">&#39;0&#39;</span> <span class="o">+</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>html-handle.js</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// 1.1 导入 fs 和 path 模块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 1.2 定义正则表达式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">regStyle</span> <span class="o">=</span> <span class="sr">/&lt;style&gt;[\s\S]*&lt;\/style&gt;/</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">regScript</span> <span class="o">=</span> <span class="sr">/&lt;script&gt;[\s\S]*&lt;\/script&gt;/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 1.3 设置目录名并创建目录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">DIR_NAME</span> <span class="o">=</span> <span class="s1">&#39;clock&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">DIR_FULL_PATH</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="nx">DIR_NAME</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">fs</span><span class="p">.</span><span class="nx">existsSync</span><span class="p">(</span><span class="nx">DIR_FULL_PATH</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fs</span><span class="p">.</span><span class="nx">mkdirSync</span><span class="p">(</span><span class="nx">DIR_FULL_PATH</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 2.1 读取文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;index.html&#39;</span><span class="p">),</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 2.2 读取失败时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 2.3 读取成功后，调用对应的3个方法解析出css，js和html文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">resolveCSS</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">resolveJS</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">resolveHTML</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 3.1 处理 CSS 样式文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">resolveCSS</span><span class="p">(</span><span class="nx">htmlStr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 3.2 使用正则提取页面的 &lt;style&gt;&lt;/style&gt;标签
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">regStr</span> <span class="o">=</span> <span class="nx">regStyle</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">htmlStr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 3.3 将提取出来的字符串，进行替换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// console.log(regStr);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">newCSS</span> <span class="o">=</span> <span class="nx">regStr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;&lt;style&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;&lt;/style&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// console.log(newCSS);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 3.4 将提取的样式写入到新文件中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">var</span> <span class="nx">fullPath</span> <span class="o">=</span>  <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="nx">DIR_NAME</span><span class="p">,</span> <span class="s1">&#39;index.css&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">fullPath</span><span class="p">,</span> <span class="nx">newCSS</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Writing css successful!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 4.1 处理 JS 样式文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">resolveJS</span><span class="p">(</span><span class="nx">htmlStr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 4.2 使用正则提取页面的 &lt;script&gt;&lt;/script&gt;标签
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">regStr</span> <span class="o">=</span> <span class="nx">regScript</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">htmlStr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 4.3 将提取出来的字符串，进行替换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">newJS</span> <span class="o">=</span> <span class="nx">regStr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;&lt;script&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;&lt;/script&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 4.4 将提取的样式写入到新文件中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">var</span> <span class="nx">fullPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="nx">DIR_NAME</span><span class="p">,</span> <span class="s1">&#39;index.js&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">fullPath</span><span class="p">,</span> <span class="nx">newJS</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Writing js successful!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 5. 处理 html 文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">resolveHTML</span><span class="p">(</span><span class="nx">htmlStr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 5.1 将内嵌的 &lt;style&gt; 和 &lt;script&gt; 替换为外联的 &lt;link&gt; 和 &lt;script&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">newHTML</span> <span class="o">=</span> <span class="nx">htmlStr</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">regStyle</span><span class="p">,</span> <span class="s1">&#39;&lt;link rel=&#34;stylesheet&#34; href=&#34;./index.css&#34; /&gt;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">regScript</span><span class="p">,</span> <span class="s1">&#39;&lt;script src=&#34;./index.js&#34;&gt;&lt;/script&gt;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 5.2 将替换完成之后的 html 代码，写入到 index.html 中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">var</span> <span class="nx">fullPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="nx">DIR_NAME</span><span class="p">,</span> <span class="s1">&#39;index.html&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">fullPath</span><span class="p">,</span> <span class="nx">newHTML</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Writing html successful!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Node.js 介绍</title>
      <link>/docs/node-js/introduction/</link>
      <pubDate>Sun, 06 Aug 2023 06:48:14 +0000</pubDate>
      
      <guid>/docs/node-js/introduction/</guid>
      <description><![CDATA[Node.js是一个基于Chrome V8引擎的JavaScript运行环境。 浏览器可以当作是JavaScript的前端运行环境；Node.j]]></description>
      <content:encoded><![CDATA[<p>Node.js是一个基于Chrome V8引擎的JavaScript运行环境。</p>
<p>浏览器可以当作是JavaScript的前端运行环境；Node.js可以看作是JavaScript的后端运行环境。但是在Node.js中无法调用DOM和BOM等浏览器内置API。</p>
<p>Node.js的安装这里就不介绍了，推荐使用NVM来管理Node.js：<a href="/blog/2023/08/nvm-%e5%ae%89%e8%a3%85/">NVM安装</a>。</p>
<p>查看Node.js的版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">node -v
</span></span></code></pre></div><p>升级<code>npm</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo npm install npm -g
</span></span></code></pre></div><p>使用淘宝镜像安装<code>cnpm</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo npm install -g cnpm --registry<span class="o">=</span>https://registry.npmmirror.com
</span></span></code></pre></div><hr>
<h1 id="npm" data-numberify>NPM<a class="anchor ms-1" href="#npm"></a></h1>
<p>NPM（Node Package Manager）是 Node.js 的包管理工具，用于在 Node.js 环境中安装、管理和共享代码模块。NPM 是随同 Node.js 一起安装的，默认集成在 Node.js 安装包中。它通过命令行接口提供了一系列命令，用于管理 Node.js 应用程序所需的模块，同时也可以在前端开发中使用。</p>
<p>以下是 NPM 的一些重要功能和用途：</p>
<ul>
<li>模块管理：NPM 允许开发者轻松地安装、更新和删除 Node.js 模块。</li>
<li>依赖管理：通过在项目的 <code>package.json</code> 文件中定义依赖项和版本范围，NPM 可以管理项目所需的各个模块的版本依赖关系。这样，当共享项目时，其他开发者可以执行 <code>npm install</code> 命令安装项目所需的模块及其指定的版本。</li>
<li>脚本管理：NPM 允许在项目的 <code>package.json</code> 文件中定义脚本命令，开发者可以使用 <code>npm run &lt;script&gt;</code> 命令来运行这些脚本。这方便了开发者在项目中自定义和组织各种构建、测试、部署等任务。</li>
<li>模块共享：NPM 是一个庞大的开源模块生态系统，开发者可以将自己编写的模块发布到 NPM 供其他开发者使用。通过 <code>npm publish</code> 命令，开发者可以将自己的模块发布到 NPM 上，并通过 <code>npm install</code> 命令在其他项目中安装和使用这些模块。</li>
</ul>
<p>NPM模块管理命令：</p>
<ul>
<li>
<p>安装模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm install &lt;package-name&gt;      <span class="c1"># 本地安装</span>
</span></span><span class="line"><span class="cl">npm install &lt;package-name&gt; -g   <span class="c1"># 全局安装</span>
</span></span></code></pre></div><ul>
<li>
<p>本地安装：将安装包放在 <code>./node_modules</code> 下（运行 <code>npm</code> 命令时所在的目录），如果没有 <code>node_modules</code> 目录，会在当前执行 <code>npm</code> 命令的目录下生成 <code>node_modules</code> 目录。</p>
<p>本地安装的NPM包可以通过 <code>require()</code> 来引入本地安装的包。</p>
</li>
<li>
<p>全局安装：将安装包放在 <code>/usr/local</code> 下或者 <code>node</code> 的安装目录。</p>
<p>全局安装的NPM包可以直接在命令行使用。</p>
</li>
<li>
<p><code>npm</code>：</p>
<p>在一个包文件夹内执行<code>npm link</code>可以在全局文件内创建一个指向执行<code>npm link</code>命令目录的符号链接。</p>
<p>其它目录下执行 <code>npm link package-name</code> 命令，将会创建一个从全局安装的 <code>package-name</code> NPM包到当前文件内 <code>node_modules</code> 目录下的符号链接。包的名称可能有作用域前缀，如果有，<code>package-name</code> 也要对应加上。</p>
</li>
</ul>
<blockquote>
<p>如果出现以下错误：</p>
<pre tabindex="0"><code>npm err! Error: connect ECONNREFUSED 127.0.0.1:8087
</code></pre><p>可以关闭代理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm config <span class="nb">set</span> proxy null
</span></span></code></pre></div></blockquote>
</li>
<li>
<p>卸载模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm uninstall package-name
</span></span></code></pre></div><p>卸载后，可以到 <code>/node_modules/</code> 目录下查看包是否还存在，或者使用以下命令查看：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm ls
</span></span></code></pre></div></li>
<li>
<p>搜索模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm search express
</span></span></code></pre></div></li>
</ul>
<p><code>cnpm</code>的用法与<code>npm</code>类似，例如安装模块可以使用<code>cnpm install</code>，卸载模块可以使用<code>npm uninstall</code>。更多<code>cnpm</code>的用法可以查看 <a href="https://npmmirror.com/" target="_blank" rel="noopener noreferrer">npmmirror 镜像站<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<hr>
<h1 id="hello-nodejs" data-numberify>Hello Node.js<a class="anchor ms-1" href="#hello-nodejs"></a></h1>
<p>使用Node.js运行JavaScript，首先需要创建一个<code>.js</code>文件。例如<code>hello.js</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello Node.js!&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>然后在终端中运行<code>node</code>命令来运行该JS文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">node hello.js
</span></span></code></pre></div><hr>
<h1 id="导入模块" data-numberify>导入模块<a class="anchor ms-1" href="#导入模块"></a></h1>
<p>Node.js中，导入模块使用下方语法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;module-name&#39;</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h1 id="repl-交互式解释器" data-numberify>REPL 交互式解释器<a class="anchor ms-1" href="#repl-交互式解释器"></a></h1>
<p>Node.js REPL（Read Eval Print Loop，交互式解释器）是Node.js的终端交互式解释器，类似Python那样。</p>
<p>使用Node REPL的方法是在终端直接使用<code>node</code>命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ node
</span></span><span class="line"><span class="cl">&gt; console.log<span class="o">(</span><span class="s2">&#34;Hello Node.js!&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">Hello Node.js!
</span></span><span class="line"><span class="cl">undefined
</span></span><span class="line"><span class="cl">&gt; <span class="m">1</span> + <span class="m">4</span>
</span></span><span class="line"><span class="cl"><span class="m">5</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>

