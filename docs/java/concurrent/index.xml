<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>并发编程 on Linner&#39;s Blog</title>
    <link>/docs/java/concurrent/</link>
    <description>Recent content in 并发编程 on Linner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020-2024 Linner. All Rights Reserved.
</copyright>
    <lastBuildDate>Sun, 10 Dec 2023 07:53:03 +0000</lastBuildDate><atom:link href="/docs/java/concurrent/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 线程的创建</title>
      <link>/docs/java/concurrent/create-thread/</link>
      <pubDate>Sun, 10 Dec 2023 07:53:03 +0000</pubDate>
      
      <guid>/docs/java/concurrent/create-thread/</guid>
      <description><![CDATA[Java提供了三种创建线程的方法： 重写Thread类的run()； 通过实现Runnable接口； 通过Callable和FutureTask创]]></description>
      <content:encoded><![CDATA[<p>Java提供了三种创建线程的方法：</p>
<ul>
<li>重写<code>Thread</code>类的<code>run()</code>；</li>
<li>通过实现<code>Runnable</code>接口；</li>
<li>通过<code>Callable</code>和<code>FutureTask</code>创建线程。</li>
</ul>
<hr>
<h1 id="通过-thread-类创建" data-numberify>通过 Thread 类创建<a class="anchor ms-1" href="#通过-thread-类创建"></a></h1>
<p>在Java中，每一个线程实际的创建和运行都是通过<code>Thread</code>类。<code>Thread</code>类的<code>run()</code>方法就是当前线程的入口点（入口方法）。</p>
<blockquote>
<p>在Java中，在运行<code>main()</code>方法时，实际上是创建了一个名为<code>main</code>的线程。而<code>main()</code>方法则是当前应用程序<code>main</code>线程的入口点（入口方法）。</p>
</blockquote>
<p>直接通过<code>Thread</code>类的无参构造函数创建<code>Thread</code>对象，创建出来的线程并没有任何实际的作用。也就是说它的<code>run()</code>方法并没有执行任何实际的任务。</p>
<p>通过<code>Thread</code>类直接创建线程，需要重写<code>Thread</code>的<code>run()</code>方法。重写方法有两种方式：</p>
<ul>
<li>
<p>通过匿名内部类重写<code>run()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CreateThread</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 匿名内部类创建线程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&#34;running...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// 运行线程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&#34;running...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><code>Thread</code>类的<code>start()</code>方法可以用于启动线程。当线程被创建之后，需要手动执行<code>start()</code>方法，线程才会被真正启动。</p>
<p>需要注意的是，每个<code>thread</code>对象的<u><code>start()</code>方法仅能被执行一次</u>。如果<code>start()</code>方法被多次执行，<code>start()</code>会抛出一个<code>IllegalThreadStateException</code>异常。</p>
</blockquote>
<p>输出如下：</p>
<pre tabindex="0"><code>16:47:40.097 [main] DEBUG CreateThread - running...
16:47:40.097 [Thread-0] DEBUG CreateThread - running...
</code></pre></li>
<li>
<p>通过继承重写<code>run()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">MyThread</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&#34;running...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">new</span> <span class="n">MyThread</span><span class="o">(</span><span class="s">&#34;my-thread&#34;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&#34;running...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>输出如下：</p>
<pre tabindex="0"><code>16:47:40.097 [main] DEBUG MyThread - running...
16:47:40.097 [Thread-0] DEBUG MyThread - running...
</code></pre></li>
</ul>
<blockquote>
<p>PS：</p>
<p>为了更好地区分各线程，可以引入<code>logback</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>ch.qos.logback<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>logback-classic<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.2.3<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>接着在项目的<code>resources</code>的目录下添加一个<code>logback.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;configuration</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns=</span><span class="s">&#34;http://ch.qos.logback/xml/ns/logback&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://ch.qos.logback/xml/ns/logback logback.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&#34;STDOUT&#34;</span> <span class="na">class=</span><span class="s">&#34;ch.qos.logback.core.ConsoleAppender&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;encoder&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;pattern&gt;</span>%date{HH:mm:ss} [%t] %logger - %m%n<span class="nt">&lt;/pattern&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/encoder&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/appender&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;logger</span> <span class="na">name=</span><span class="s">&#34;c&#34;</span> <span class="na">level=</span><span class="s">&#34;debug&#34;</span> <span class="na">additivity=</span><span class="s">&#34;false&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">&#34;STDOUT&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/logger&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;root</span> <span class="na">level=</span><span class="s">&#34;ERROR&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">&#34;STDOUT&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/root&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/configuration&gt;</span>
</span></span></code></pre></div></blockquote>
<hr>
<h1 id="线程名称" data-numberify>线程名称<a class="anchor ms-1" href="#线程名称"></a></h1>
<p>通过<code>Thread</code>创建线程时，可以为线程设置名称，设置线程的名称有两种方式：</p>
<ul>
<li>
<p>通过构造函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="s">&#34;my-thread&#34;</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 设置线程名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}.</span><span class="na">start</span><span class="o">();</span>
</span></span></code></pre></div></li>
<li>
<p>通过<code>setName()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="n">thread</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;my-thread&#34;</span><span class="o">);</span>  <span class="c1">// 设置线程名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="通过-runnable-创建" data-numberify>通过 Runnable 创建<a class="anchor ms-1" href="#通过-runnable-创建"></a></h1>
<p><code>Runnable</code>是一个接口类，它只包含了<code>run()</code>这一个接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@FunctionalInterface</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Runnable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用<code>Runnable</code>创建<code>Thread</code>，首先需要实现<code>Runnable</code>接口，然后再将实现的<code>Runnable</code>对象传递给Thread的构造函数进行实例化。实现<code>Runnable</code>的方式如下几种：</p>
<ul>
<li>
<p>通过匿名内部类实现<code>run()</code>方法。</p>
</li>
<li>
<p>通过Lambda表达式直接实现<code>run()</code>方法。</p>
<blockquote>
<p>由于<code>Runnable</code>中有且仅有一个接口<code>run()</code>，并且<code>Runnable</code>被<code>@FunctionalInterface</code>注解标注（标注了<code>@FunctionalInterface</code>的接口类可以直接使用Lambda来实现）。所以<code>Runnable</code>可以直接通过Lambda表达式来实现。</p>
</blockquote>
<p>示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 实现 Runnable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Runnable</span> <span class="n">runnable</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&#34;running...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 将 Runnable 传递给 Thread 的构造函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">runnable</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span></span></code></pre></div></li>
<li>
<p>通过创建新的类来实现<code>Runnable</code>接口。</p>
</li>
</ul>
<blockquote>
<p>当使用<code>Runnable</code>来实例化<code>Thread</code>时，可以在实例化<code>Thread</code>的同时传递一个<code>String</code>类型的参数来指定<code>Thread</code>的名称。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="s">&#34;my-thread&#34;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span></span></code></pre></div></blockquote>
<p>使用<code>Runnable</code>实例化<code>Thread</code>的好处是，可以实现“线程”（<code>Thread</code>）和“任务”（要执行的代码，即<code>Runnable</code>）的分离。</p>
<h2 id="runnable-和-thread" data-numberify>Runnable 和 Thread<a class="anchor ms-1" href="#runnable-和-thread"></a></h2>
<p>实际上，<code>Thread</code>实现了<code>Runnable</code>接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Thread</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">Runnable</span> <span class="n">target</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Thread</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">init</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="s">&#34;Thread-&#34;</span> <span class="o">+</span> <span class="n">nextThreadNum</span><span class="o">(),</span> <span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 此时 target 为 null, run() 方法没有实际的执行代码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Thread</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">init</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">target</span><span class="o">,</span> <span class="s">&#34;Thread-&#34;</span> <span class="o">+</span> <span class="n">nextThreadNum</span><span class="o">(),</span> <span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// init() 中会将 target 赋给成员变量, 也就是 this.target = target (下同)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Thread</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">target</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">init</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">target</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">target</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/* 省略其它... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在<code>Thread</code>中</p>
<hr>
<h1 id="通过-callable-和-futuretask-创建" data-numberify>通过 Callable 和 FutureTask 创建<a class="anchor ms-1" href="#通过-callable-和-futuretask-创建"></a></h1>
<p><code>Callable</code>是一个接口类，它和<code>Runnable</code>一样只包含了一个方法，并且都被<code>@FunctionalInterface</code>所修饰。只不过<code>Callable</code>需要实现的不是<code>run()</code>接口，而是<code>call()</code>接口。<code>Callable</code>的定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@FunctionalInterface</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Callable</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">V</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>可以看到<code>Callable</code>需要指定一个泛型<code>V</code>，而这个泛型<code>V</code>是作为<code>call()</code>接口的返回值。</p>
<p><code>Callable</code>和<code>Runnable</code>一样可以使用三种方式实现（此处略）。与<code>Runnable</code>不同的是，<code>Callable</code>不是作为<code>Thread</code>构造方法的参数传入，而是作为<code>FutureTask</code>的参数传入。</p>
<p>通过<code>Callable</code>和<code>FutureTask</code>创建<code>Thread</code>通常包含以下步骤：</p>
<ol>
<li>实现<code>Callable</code>；</li>
<li>通过<code>Callable</code>构造<code>FutureTask</code>；</li>
<li>通过<code>FutureTask</code>构造<code>Thread</code>。</li>
</ol>
<p>由于<code>Callable</code>被<code>@FunctionalInterface</code>所修饰，所以可以使用Lambda简化代码。代码示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FutureTask</span><span class="o">&lt;&gt;(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&#34;running...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">1000</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">100</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">task</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 获取线程执行结果, 等待返回结果 (阻塞)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&#34;{}&#34;</span><span class="o">,</span> <span class="n">task</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span></span></code></pre></div><p>如上所示，通过<code>Callable</code>和<code>FutureTask</code>创建<code>Thread</code>的好处就是，可以使用<code>FutureTask</code>对象来获取<code>call()</code>方法的执行结果。</p>
<blockquote>
<p><code>FutureTask</code>同样有<code>run()</code>方法。因为<code>FutureTask</code>实现了<code>RunnableFuture</code>接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FutureTask</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">RunnableFuture</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>而<code>RunnableFuture</code>继承了<code>Runnable</code>接口。所以<code>FutureTask</code>是被作为<code>Runnable</code>的一个实现类被传入<code>Thread</code>的构造函数中。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>并发编程</title>
      <link>/docs/java/concurrent/introduction/</link>
      <pubDate>Thu, 07 Dec 2023 08:08:35 +0000</pubDate>
      
      <guid>/docs/java/concurrent/introduction/</guid>
      <description><![CDATA[概念 Java 并发编程中涵盖了以下这些概念： 进程 线程 并发 并行 进程 进程（Process）是指在计算机中正在运行的一个程序的实例。进程是操作系统进行资源]]></description>
      <content:encoded><![CDATA[<h1 id="概念" data-numberify>概念<a class="anchor ms-1" href="#概念"></a></h1>
<p>Java 并发编程中涵盖了以下这些概念：</p>
<ul>
<li>进程</li>
<li>线程</li>
<li>并发</li>
<li>并行</li>
</ul>
<hr>
<h1 id="进程" data-numberify>进程<a class="anchor ms-1" href="#进程"></a></h1>
<p><strong>进程</strong>（Process）是指在计算机中正在运行的一个<strong>程序的实例</strong>。进程是操作系统进行资源分配和调度的<strong>基本单位</strong>（<strong>资源分配的最小单位</strong>），用于执行程序的代码和管理与该程序相关的资源。每个进程都有自己的地址空间、内存、文件句柄等资源。</p>
<p>进程的一些相关概念：</p>
<ul>
<li>
<p><strong>程序</strong>：程序是静态的，是<u>一组指令和数据的集合</u>；而进程是<u>程序在执行时的一个<strong>实例</strong></u>，是一个<u>动态的实体</u>。</p>
<p>程序被运行时，程序的代码从硬盘被加载到内存中，此时就开启了一个进程。</p>
<p>程序可以同时运行多个实例进程，也可以仅运行一个实例线程。</p>
</li>
<li>
<p><strong>地址空间</strong>：进程的地址空间包括<u>代码段</u>、<u>数据段</u>、<u>堆</u>和<u>栈</u>。</p>
<p>地址空间使得每个进程都在自己的独立内存空间中运行，不受其他进程的影响（隔离）。</p>
</li>
<li>
<p><strong>资源分配</strong>：操作系统负责为每个进程分配分配和管理资源，例如处理器时间、文件和输入/输出设备等。</p>
</li>
<li>
<p><strong>并发执行</strong>：在多核CPU中，多个进程可以并发执行（在相同的时间段内运行）。操作系统通过调度算法控制进程的执行顺序。</p>
</li>
<li>
<p><strong>进程状态</strong>：一个进程可以处于不同的状态。一般进程有三种状态（进程的三态模型）：就绪、运行、阻塞。</p>
</li>
<li>
<p><strong>多线程</strong>：一个进程可以包含多个线程，这些线程<strong>共享同一地址空间和资源</strong>。多线程可以提高程序的并发性和效率。</p>
</li>
</ul>
<hr>
<h1 id="线程" data-numberify>线程<a class="anchor ms-1" href="#线程"></a></h1>
<p><strong>线程</strong>（Thread）是进程中的一个<strong>执行流</strong>，是操作系统能够进行运算调度的<strong>最小单位</strong>（<strong>最小调度单位</strong>）。与进程相比，线程更轻量级，多个线程可以共享同一进程的资源，包括地址空间、文件描述符和其他相关的进程状态信息。线程之间的共享和通信相对于进程来说更加容易。</p>
<p>线程的一些相关概念：</p>
<ul>
<li><strong>轻量级</strong>：相对于进程而言，线程是轻量级的。创建、撤销和切换线程的<u>开销相对较小</u>。</li>
<li><strong>共享资源</strong>：同一进程内的线程共享相同的地址空间和其他资源。这使得线程之间的通信更加方便，但也需要考虑同步和互斥的问题。</li>
<li><strong>独立调度</strong>：线程在进程内独立调度，每个线程都有自己的执行状态、程序计数器、寄存器集合等信息。</li>
<li><strong>并发执行</strong>：多个线程可以并发执行，它们在同一进程内共享进程的资源。这提高了程序的并发性和性能。</li>
<li><strong>多线程编程</strong>：多线程编程是一种并发编程的方式，允许程序中的多个执行流同时执行。多线程可以用于提高程序的响应性、资源利用率和性能。</li>
<li><strong>线程同步</strong>：由于线程共享相同的资源，需要通过同步机制来避免竞态条件和数据访问冲突。常见的同步机制包括互斥锁、信号量、条件变量等。</li>
</ul>
<hr>
<h1 id="进程和线程的对比" data-numberify>进程和线程的对比<a class="anchor ms-1" href="#进程和线程的对比"></a></h1>
<ul>
<li>
<p>进程基本上是相互独立的，而<strong>线程存在于进程内，是进程的一个子集</strong>。</p>
<p>一个进程包含了一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。</p>
<p>一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。</p>
</li>
<li>
<p>在Java中，<strong>线程</strong>作为<strong>运算调度的最小单位</strong>，<strong>进程</strong>作为<strong>资源分配的最小单位</strong>。</p>
</li>
<li>
<p>进程拥有共享的资源，如内存空间等，供其内部的线程共享。</p>
</li>
<li>
<p><strong>进程间通信较为复杂</strong>：</p>
<ul>
<li>同一台计算机的进程通信称为 IPC（Inter-Process Communication）。</li>
<li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如HTTP协议。</li>
</ul>
</li>
<li>
<p><strong>线程通信相对简单</strong>，因为它们共享进程内的内存。多个线程可以访问同一个共享变量。</p>
</li>
<li>
<p><strong>线程更轻量</strong>，线程上下文切换成本一般上要比进程上下文切换低。比起多进程，<strong>多线程使用了更小的资源开销</strong>。</p>
</li>
</ul>
<hr>
<h1 id="并行与并发" data-numberify>并行与并发<a class="anchor ms-1" href="#并行与并发"></a></h1>
<ul>
<li>
<p><strong>并行</strong>（Parallel）：指两个或多个任务在同一时刻发生。</p>
<p>并行通常是在多核处理器上同时执行多个线程或进程，其中每个核心独立执行一个任务。</p>
</li>
<li>
<p><strong>并发</strong>（Concurrent）：指两个或多个任务在重叠的时间段内执行，但不一定同时进行。</p>
<p>并发可以通过时间片轮转等方式实现任务间的快速切换。例如通过操作系统中的多任务处理，多个任务之间通过时间片共享CPU资源，看起来好像在同时执行。</p>
</li>
<li>
<p><strong>串行</strong>（Serial）：指任务按照顺序一个接一个地执行，每个任务必须等待前一个任务完成后才能开始。</p>
<p>在单核CPU下，线程实际是<strong>串行执行</strong>的。当CPU时间片很小时，CPU在线程间的切换速度快到人类无法察觉时，从宏观上来看就是并行执行。也就是说，微观串行，宏观并行。</p>
<blockquote>
<p>多线程串行执行意味着当一个线程在执行时，其它线程会处于阻塞或等待状态。在这种情况下，CPU频繁地切换线程执行，实际上执行的效率会下降，不如单线程执行。</p>
</blockquote>
<blockquote>
<p>多线程的目标是实现并发执行，充分利用多核处理器或多处理单元的优势。也就是说，单核CPU并不能充分发挥多线程的优势。</p>
</blockquote>
</li>
</ul>
<p>它们的关键区别在于：</p>
<ul>
<li><strong>并行</strong>：强调<u>多个任务在同一时刻发生</u>，通常需要多个处理单元。</li>
<li><strong>并发</strong>：强调<u>多个任务在重叠的时间段内执行</u>，不一定需要多个处理单元。</li>
<li><strong>串行</strong>：强调<u>任务按照顺序</u>一个接一个地<u>执行</u>。</li>
</ul>
<p>引用 Rob Pike 的一段描述：</p>
<blockquote>
<p>并发是同一时间应对（dealing with）多件事情的能力；并行是同一时间动手做（doing）多件事情的能力。</p>
</blockquote>
<hr>
<h1 id="多线程的应用" data-numberify>多线程的应用<a class="anchor ms-1" href="#多线程的应用"></a></h1>
<ul>
<li><strong>异步调用</strong>：多线程可以让方法的执行变为异步的。程序在处理多个任务时，可以创建一些新的线程，将这些任务交给线程去同时处理，而无需等待任务执行完成后再接着执行下一个任务。</li>
<li><strong>提高效率</strong>：利用多核CPU的优势来提高程序的运行效率。</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

