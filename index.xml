<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linner&#39;s Blog</title>
    <link>/</link>
    <description>Recent content on Linner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>Copyright © 2020-2023 Linner. All Rights Reserved.
</copyright>
    <lastBuildDate>Sun, 06 Aug 2023 06:48:14 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Node.js 介绍</title>
      <link>/docs/node-js/introduction/</link>
      <pubDate>Sun, 06 Aug 2023 06:48:14 +0000</pubDate>
      
      <guid>/docs/node-js/introduction/</guid>
      <description><![CDATA[Node.js是一个基于Chrome V8引擎的JavaScript运行环境。 浏览器可以当作是JavaScript的前端运行环境；Node.j]]></description>
      <content:encoded><![CDATA[<p>Node.js是一个基于Chrome V8引擎的JavaScript运行环境。</p>
<p>浏览器可以当作是JavaScript的前端运行环境；Node.js可以看作是JavaScript的后端运行环境。但是在Node.js中无法调用DOM和BOM等浏览器内置API。</p>
<p>Node.js的安装这里就不介绍了，推荐使用NVM来管理Node.js：<a href="/blog/2023/08/nvm-%e5%ae%89%e8%a3%85/">NVM安装</a>。</p>
<p>查看Node.js的版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">node -v
</span></span></code></pre></div><p>升级<code>npm</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo npm install npm -g
</span></span></code></pre></div><p>使用淘宝镜像安装<code>cnpm</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo npm install -g cnpm --registry<span class="o">=</span>https://registry.npmmirror.com
</span></span></code></pre></div><hr>
<h1 id="npm" data-numberify>NPM<a class="anchor ms-1" href="#npm"></a></h1>
<p>NPM（Node Package Manager）是 Node.js 的包管理工具，用于在 Node.js 环境中安装、管理和共享代码模块。NPM 是随同 Node.js 一起安装的，默认集成在 Node.js 安装包中。它通过命令行接口提供了一系列命令，用于管理 Node.js 应用程序所需的模块，同时也可以在前端开发中使用。</p>
<p>以下是 NPM 的一些重要功能和用途：</p>
<ul>
<li>模块管理：NPM 允许开发者轻松地安装、更新和删除 Node.js 模块。</li>
<li>依赖管理：通过在项目的 <code>package.json</code> 文件中定义依赖项和版本范围，NPM 可以管理项目所需的各个模块的版本依赖关系。这样，当共享项目时，其他开发者可以执行 <code>npm install</code> 命令安装项目所需的模块及其指定的版本。</li>
<li>脚本管理：NPM 允许在项目的 <code>package.json</code> 文件中定义脚本命令，开发者可以使用 <code>npm run &lt;script&gt;</code> 命令来运行这些脚本。这方便了开发者在项目中自定义和组织各种构建、测试、部署等任务。</li>
<li>模块共享：NPM 是一个庞大的开源模块生态系统，开发者可以将自己编写的模块发布到 NPM 供其他开发者使用。通过 <code>npm publish</code> 命令，开发者可以将自己的模块发布到 NPM 上，并通过 <code>npm install</code> 命令在其他项目中安装和使用这些模块。</li>
</ul>
<p>NPM模块管理命令：</p>
<ul>
<li>
<p>安装模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm install &lt;package-name&gt;      <span class="c1"># 本地安装</span>
</span></span><span class="line"><span class="cl">npm install &lt;package-name&gt; -g   <span class="c1"># 全局安装</span>
</span></span></code></pre></div><ul>
<li>
<p>本地安装：将安装包放在 <code>./node_modules</code> 下（运行 <code>npm</code> 命令时所在的目录），如果没有 <code>node_modules</code> 目录，会在当前执行 <code>npm</code> 命令的目录下生成 <code>node_modules</code> 目录。</p>
<p>本地安装的NPM包可以通过 <code>require()</code> 来引入本地安装的包。</p>
</li>
<li>
<p>全局安装：将安装包放在 <code>/usr/local</code> 下或者 <code>node</code> 的安装目录。</p>
<p>全局安装的NPM包可以直接在命令行使用。</p>
</li>
<li>
<p><code>npm</code>：</p>
<p>在一个包文件夹内执行<code>npm link</code>可以在全局文件内创建一个指向执行<code>npm link</code>命令目录的符号链接。</p>
<p>其它目录下执行 <code>npm link package-name</code> 命令，将会创建一个从全局安装的 <code>package-name</code> NPM包到当前文件内 <code>node_modules</code> 目录下的符号链接。包的名称可能有作用域前缀，如果有，<code>package-name</code> 也要对应加上。</p>
</li>
</ul>
<blockquote>
<p>如果出现以下错误：</p>
<pre tabindex="0"><code>npm err! Error: connect ECONNREFUSED 127.0.0.1:8087
</code></pre><p>可以关闭代理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm config <span class="nb">set</span> proxy null
</span></span></code></pre></div></blockquote>
</li>
<li>
<p>卸载模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm uninstall package-name
</span></span></code></pre></div><p>卸载后，可以到 <code>/node_modules/</code> 目录下查看包是否还存在，或者使用以下命令查看：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm ls
</span></span></code></pre></div></li>
<li>
<p>搜索模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm search express
</span></span></code></pre></div></li>
</ul>
<p><code>cnpm</code>的用法与<code>npm</code>类似，例如安装模块可以使用<code>cnpm install</code>，卸载模块可以使用<code>npm uninstall</code>。更多<code>cnpm</code>的用法可以查看 <a href="https://npmmirror.com/" target="_blank" rel="noopener noreferrer">npmmirror 镜像站<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<hr>
<h1 id="hello-nodejs" data-numberify>Hello Node.js<a class="anchor ms-1" href="#hello-nodejs"></a></h1>
<p>使用Node.js运行JavaScript，首先需要创建一个<code>.js</code>文件。例如<code>hello.js</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello Node.js!&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>然后在终端中运行<code>node</code>命令来运行该JS文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">node hello.js
</span></span></code></pre></div><hr>
<h1 id="导入模块" data-numberify>导入模块<a class="anchor ms-1" href="#导入模块"></a></h1>
<p>Node.js中，导入模块使用下方语法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;module-name&#39;</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h1 id="repl-交互式解释器" data-numberify>REPL 交互式解释器<a class="anchor ms-1" href="#repl-交互式解释器"></a></h1>
<p>Node.js REPL（Read Eval Print Loop，交互式解释器）是Node.js的终端交互式解释器，类似Python那样。</p>
<p>使用Node REPL的方法是在终端直接使用<code>node</code>命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ node
</span></span><span class="line"><span class="cl">&gt; console.log<span class="o">(</span><span class="s2">&#34;Hello Node.js!&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">Hello Node.js!
</span></span><span class="line"><span class="cl">undefined
</span></span><span class="line"><span class="cl">&gt; <span class="m">1</span> + <span class="m">4</span>
</span></span><span class="line"><span class="cl"><span class="m">5</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>NVM 安装</title>
      <link>/blog/2023/08/nvm-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sun, 06 Aug 2023 05:31:54 +0000</pubDate>
      
      <guid>/blog/2023/08/nvm-%E5%AE%89%E8%A3%85/</guid>
      <description><![CDATA[Debian 安装 NVM NVM（Node Version Manager）是一个用于管理 Node.js 版本的工具。它允许你在同一台机器上同时安装和切换不同的 Node.js 版本，以便于在不同项目中使]]></description>
      <content:encoded><![CDATA[<h1 id="debian-安装-nvm" data-numberify>Debian 安装 NVM<a class="anchor ms-1" href="#debian-安装-nvm"></a></h1>
<p>NVM（Node Version Manager）是一个用于管理 Node.js 版本的工具。它允许你在同一台机器上同时安装和切换不同的 Node.js 版本，以便于在不同项目中使用特定的 Node.js 版本。</p>
<p>NVM 支持在 Linux、macOS、和 Windows 系统上使用，并且与不同的 Shell（如 Bash、Zsh）兼容。</p>
<p>在Debian上安装NVM的步骤如下（Ubuntu同理）：</p>
<ol>
<li>
<p>安装NVM之前，需要先安装依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt update
</span></span><span class="line"><span class="cl">sudo apt upgrade
</span></span><span class="line"><span class="cl">sudo apt install curl build-essential gnupg2 -y
</span></span></code></pre></div></li>
<li>
<p>下载并执行NVM的安装脚本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh <span class="p">|</span> bash
</span></span></code></pre></div><p>如果你要指定安装NVM的版本，可以修改以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">curl https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh <span class="p">|</span> bash
</span></span></code></pre></div><p>将<code>v0.38.0</code>换成你所需的版本即可。</p>
</li>
<li>
<p>等待下载，并且脚本执行成功后，重新加载终端的配置信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">source</span> .bashrc
</span></span></code></pre></div><p>如果你使用的是ZSH，可以：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">source</span> .zshrc
</span></span></code></pre></div><p>不同的终端，重新加载对应的配置文件即可。</p>
</li>
</ol>
<hr>
<h1 id="安装脚本无法下载的问题" data-numberify>安装脚本无法下载的问题<a class="anchor ms-1" href="#安装脚本无法下载的问题"></a></h1>
<p>如果遇到NVM的<code>install.sh</code>无法下载的问题，例如<code>curl</code>报以下错误：</p>
<pre tabindex="0"><code>curl: (6) Could not resolve host: raw.githubusercontent.com
</code></pre><p>多半是域名污染导致的。就算你使用科学的方法，也不一定能下载成功，还是会报一样的错误。</p>
<p>解决这种问题可以先从域名IP查询网站上查询IP：<a href="https://www.ipaddress.com/" target="_blank" rel="noopener noreferrer">https://www.ipaddress.com/<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p>然后将查询到的IP通过本地的<code>hosts</code>文件来解析。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vim /etc/hosts
</span></span></code></pre></div><p>然后加入以下内容：</p>
<pre tabindex="0"><code>185.199.108.133 raw.githubusercontent.com
</code></pre><p>上方的<code>185.199.108.133</code>这个IP，替换成你查询到的结果即可。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Spring AMQP</title>
      <link>/docs/spring/springcloud/communications/spring-amqp/</link>
      <pubDate>Fri, 04 Aug 2023 08:40:11 +0000</pubDate>
      
      <guid>/docs/spring/springcloud/communications/spring-amqp/</guid>
      <description><![CDATA[AMQP（Advanced Message Queuing Protocol）是用于在应用程序之间传递业务消息的开放标准。该协议与语言和平台无关，更符合微服务中独立性的要]]></description>
      <content:encoded><![CDATA[<p>AMQP（Advanced Message Queuing Protocol）是用于在应用程序之间传递业务消息的开放标准。该协议与语言和平台无关，更符合微服务中独立性的要求。</p>
<p>RabbitMQ实现了AMQP协议。<a href="https://spring.io/projects/spring-amqp" target="_blank" rel="noopener noreferrer">Spring AMQP<i class="fas fa-external-link-square-alt ms-1"></i></a>是基于AMQP协议定义的一套API规范，提供了模板来发送和接收消息。包含两部分，其中<code>spring-amqp</code>是基础抽象，<code>spring-rabbit</code>是底层的默认实现。</p>
<p>Spring AMQP的依赖如下，其中包含了RabbitMQ的依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- AMQP依赖，包含RabbitMQ --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-amqp<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在Spring中使用RabbitMQ可以使用Spring AMQP的依赖。对于RabbitMQ来说，Publisher和Consumer都是使用这个依赖，所以这个依赖坐标可以放在它们的父工程中。</p>
<p>导入依赖后，需要先编写<code>application.yml</code>，添加RabbitMQ连接信息（Publisher和Consumer都需要编写此配置）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rabbitmq</span><span class="p">:</span><span class="w">   </span><span class="c"># RabbitMQ配置信息</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">localhost  </span><span class="w"> </span><span class="c"># 主机地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5672</span><span class="w">        </span><span class="c"># 端口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">virtual-host</span><span class="p">:</span><span class="w"> </span><span class="l">/  </span><span class="w"> </span><span class="c"># 虚拟主机</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">linner </span><span class="w"> </span><span class="c"># 用户名</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">  </span><span class="c"># 密码</span><span class="w">
</span></span></span></code></pre></div><p>RabbitMQ官方文档中给出了5个Demo，它们分别对应几种不同的用法：</p>
<ul>
<li>
<p>基本消息队列（Basic Queue）：</p>
<p><picture><img class="img-fluid " alt="Basic Queue" src="/docs/spring/springcloud/communications/spring-amqp/uTools_1691056818833.png" loading="lazy" width="286" height="158" />
</picture>

</p>
</li>
<li>
<p>工作消息队列（Work Queue）：</p>
<p><picture><img class="img-fluid " alt="Work Queue" src="/docs/spring/springcloud/communications/spring-amqp/uTools_1691056877775.png" loading="lazy" width="258" height="231" />
</picture>

</p>
</li>
<li>
<p>发布与订阅（Publish/Subscribe）。</p>
<p>根据交换机类型的不同，可分为三种：</p>
<ul>
<li>
<p>Fanout Exchange（广播）：</p>
<p><picture><img class="img-fluid " alt="Fanout Exchange" src="/docs/spring/springcloud/communications/spring-amqp/uTools_1691057092864.png" loading="lazy" width="272" height="182" />
</picture>

</p>
</li>
<li>
<p>Direct Exchange（路由，Routing）：</p>
<p><picture><img class="img-fluid " alt="Direct Exchange" src="/docs/spring/springcloud/communications/spring-amqp/uTools_1691057130360.png" loading="lazy" width="262" height="212" />
</picture>

</p>
</li>
<li>
<p>Topic Exchange（主题）：</p>
<p><picture><img class="img-fluid " alt="Topic Exchange" src="/docs/spring/springcloud/communications/spring-amqp/uTools_1691057168656.png" loading="lazy" width="276" height="209" />
</picture>

</p>
</li>
</ul>
</li>
</ul>
<p>接下来分别按照这5个模型来实现。</p>
<hr>
<h1 id="基本消息队列" data-numberify>基本消息队列<a class="anchor ms-1" href="#基本消息队列"></a></h1>
<p>基本消息队列模型只包含三种角色：</p>
<ul>
<li><strong>Publisher</strong>：消息发布者，将消息发送到队列Queue。</li>
<li><strong>Queue</strong>：消息队列，负责接受并缓存消息。</li>
<li><strong>Consumer</strong>：订阅队列，处理队列中的消息。</li>
</ul>
<p>Spring AMQP通过RabbitMQ提供的AMQP接口，整合了RabbitMQ，让RabbitMQ使用起来更加方便。</p>
<p>Spring AMQP提供了<code>RabbitTemplate</code>来给RabbitMQ发送消息，在使用之时直接<code>@Autowired</code>即可。</p>
<p>在<code>Publisher</code>模块中新建一个<code>SpringAmqpTest</code>测试类，然后使用<code>RabbitTemplate</code>发送消息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringAmqpTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSimpleQueue</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">queueName</span> <span class="o">=</span> <span class="s">&#34;simple.queue&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;Hello Spring AMQP!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;发送消息：[&#34;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>将以上代码放在业务代码中即可实现异步通讯。</p>
<p>在<code>Consumer</code>中新建一个<code>listener</code>包，并且在包中创建<code>SpringRabbitListener</code>，然后使用<code>@RabbitListener</code>定义接收消息的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringRabbitListener</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;simple.queue&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenSimpleQueue</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;收到消息：[&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>直接启动<code>Consumer</code>的启动类即可开始接收消息。</p>
<blockquote>
<p>注：<code>@RabbitListener</code>的<code>queues</code>属性没有创建消息队列的能力。如果先启动<code>Consumer</code>报错<code>Failed to declare queue: simple.queue</code>，可以创建一个<code>RabbitConfig</code>，然后在<code>RabbitConfig</code>中创建队列；或者直接在启动类中创建队列。</p>
<p>在<code>Consumer</code>中创建<code>simple.queue</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RabbitConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Queue</span> <span class="nf">getSimpleQueue</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Queue</span><span class="o">(</span><span class="s">&#34;simple.queue&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>另外还需要注意，导入的<code>Queue</code>是<code>org.springframework.amqp.core</code>包下的。</p>
</blockquote>
<hr>
<h1 id="工作队列模型" data-numberify>工作队列模型<a class="anchor ms-1" href="#工作队列模型"></a></h1>
<p>修改<code>Publisher</code>，模拟每秒钟发送50条消息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringAmqpTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testWorkQueue</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">queueName</span> <span class="o">=</span> <span class="s">&#34;work.queue&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;Hello Message__&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">message</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;发送消息：[&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>   <span class="c1">// 休眠 20ms，1s == 1000ms，所以1s最多只能发50条
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>修改<code>Consumer</code>，模拟两个消费者共同接收<code>work.queue</code>的消息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringRabbitListener</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queuesToDeclare</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@Queue</span><span class="o">(</span><span class="n">WORK_QUEUE</span><span class="o">)})</span> <span class="c1">// 声明并订阅Queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenWorkQueue1</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;消费者 1 收到消息：[&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>   <span class="c1">// 用不同的日志级别区分消费者1和消费者2，更易于阅读
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>   <span class="c1">// 处理速度约：50条/s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queuesToDeclare</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@Queue</span><span class="o">(</span><span class="n">WORK_QUEUE</span><span class="o">)})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenWorkQueue2</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;消费者 2 收到消息：[&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>  <span class="c1">// 处理速度约：5条/s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>@RabbitListener</code>的<code>queuesToDeclare</code>属性是<code>@Queue</code>类型数组。<code>queuesToDeclare</code>在指定多个队列的同时，会去声明它们，这样就能不通过创建Bean来声明它们。</p>
<p>先启动<code>Consumer</code>，然后在启动<code>Publisher</code>，发现消息被两个消费者平分处理了（一个消费者处理单数号消息，另一个处理双数号消息），并没有按照各自处理速度去分配。这是因为消费者存在消费预取。无论在规定时间内是否能处理得完，消费者都会按照配置去自动预取。所以就导致了两个消费者各取一半消息去处理。</p>
<p>要解决这个消费预取限制，让消费者能根据自己的能力预取消息，可以在<code>application.yml</code>中修改<code>spring.rebbitmq.listener.simple.prefetch</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rabbitmq</span><span class="p">:</span><span class="w">   </span><span class="c"># RabbitMQ配置信息</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##### 连接信息... #####</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">listener</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">simple</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">prefetch</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="c"># 每次只能预取 1 条消息，处理完才能获取下一条</span><span class="w">
</span></span></span></code></pre></div><p>然后按照上方，先启动（或重启）<code>Consumer</code>，然后在启动<code>Publisher</code>，观察控制台打印的日志可以发现这次处理完50条消息的时间大约为1秒。</p>
<p>工作队列模式的特点是：</p>
<ul>
<li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理。</li>
<li>通过设置Prefetch来控制消费者预取的消息数量。</li>
</ul>
<hr>
<h1 id="发布订阅模型" data-numberify>发布/订阅模型<a class="anchor ms-1" href="#发布订阅模型"></a></h1>
<p>发布/订阅模式通过Exchange（交换机）方式实现了将同一消息发送给多个消费者。</p>
<p>发布/订阅的模型如图：</p>
<p><picture><img class="img-fluid " alt="发布/订阅模型" src="/docs/spring/springcloud/communications/spring-amqp/image-20210717165309625.png" loading="lazy" width="1431" height="462" />
</picture>

</p>
<p>模型中多了Exchange角色，并且过程略有变化：</p>
<ul>
<li><strong>Publisher</strong>（生产者）：值要发送消息的程序，但是不再发送到队列中，而是发给Exchange（交换机）。</li>
<li><strong>Exchange</strong>（交换机）：一方面，接收生产者发送的消息；另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。
<ul>
<li>Topic：</li>
</ul>
</li>
<li><strong>Consumer</strong>（消费者）：订阅队列，处理队列中的消息。。</li>
<li><strong>Queue</strong>：接收消息、缓存消息。</li>
</ul>
<blockquote>
<p>注：Exchange负责消息路由，而不是存储，路由失败则消息丢失。</p>
</blockquote>
<p>常见Exchange类型包括：</p>
<ul>
<li>Fanout（扇出）：广播，将消息交给所有绑定到交换机的队列。</li>
<li>Direct（定向）：路由，把消息交给符合指定Routing Key的队列。</li>
<li>Topic（话题）：通配符，把消息交给符合Routing Pattern（路由模式）的队列。</li>
</ul>
<p>Spring AMQP提供了声明交换机、队列、绑定关系的API，声明交换机API的继承关系图如下：</p>
<p><picture><img class="img-fluid " alt="交换机API继承关系图" src="/docs/spring/springcloud/communications/spring-amqp/1691157574294.png" loading="lazy" width="1212" height="410" />
</picture>

</p>
<h2 id="fanout-exchange" data-numberify>Fanout Exchange<a class="anchor ms-1" href="#fanout-exchange"></a></h2>
<p>Fanout Exchange会将接收到的消息路由到每一个跟其绑定的Queue。声明队列、声明交换机和绑定关系都要在Consumer中完成。</p>
<p>在<code>Consumer</code>中添加新的配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FanoutConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">FANOUT_EXCHANGE</span> <span class="o">=</span> <span class="s">&#34;linner.fanout&#34;</span><span class="o">;</span>   <span class="c1">// 交换机名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">FANOUT_QUEUE_1</span> <span class="o">=</span> <span class="s">&#34;fanout.queue1&#34;</span><span class="o">;</span>    <span class="c1">// 队列1名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">FANOUT_QUEUE_2</span> <span class="o">=</span> <span class="s">&#34;fanout.queue2&#34;</span><span class="o">;</span>    <span class="c1">// 队列2名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 声明FanoutExchange交换机
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">FanoutExchange</span> <span class="nf">getFanoutExchange</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">FanoutExchange</span><span class="o">(</span><span class="n">FANOUT_EXCHANGE</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 声明第1个队列
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span><span class="o">(</span><span class="s">&#34;fanoutQueue1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Queue</span> <span class="nf">getFanoutQueue1</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Queue</span><span class="o">(</span><span class="n">FANOUT_QUEUE_1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 绑定队列1和交换机
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Binding</span> <span class="nf">bindingQueue1</span><span class="o">(</span><span class="n">Queue</span> <span class="n">fanoutQueue1</span><span class="o">,</span> <span class="n">FanoutExchange</span> <span class="n">fanoutExchange</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">BindingBuilder</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="n">fanoutQueue1</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="n">fanoutExchange</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span><span class="o">(</span><span class="s">&#34;fanoutQueue2&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Queue</span> <span class="nf">getFanoutQueue2</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Queue</span><span class="o">(</span><span class="n">FANOUT_QUEUE_2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Binding</span> <span class="nf">bindingQueue2</span><span class="o">(</span><span class="n">Queue</span> <span class="n">fanoutQueue2</span><span class="o">,</span> <span class="n">FanoutExchange</span> <span class="n">fanoutExchange</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">BindingBuilder</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="n">fanoutQueue2</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="n">fanoutExchange</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* 第3个队列以相同方式声明，并绑定... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后修改<code>Consumer</code>的<code>SpringRabbitListener</code>类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringRabbitListener</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="o">{</span><span class="n">FanoutConfig</span><span class="o">.</span><span class="na">FANOUT_QUEUE_1</span><span class="o">})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenFanoutQueue1</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;消费者收到 [&#34;</span> <span class="o">+</span> <span class="n">FanoutConfig</span><span class="o">.</span><span class="na">FANOUT_QUEUE_1</span> <span class="o">+</span> <span class="s">&#34;] 的消息: [&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="o">{</span><span class="n">FanoutConfig</span><span class="o">.</span><span class="na">FANOUT_QUEUE_2</span><span class="o">})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenFanoutQueue2</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;消费者收到 [&#34;</span> <span class="o">+</span> <span class="n">FanoutConfig</span><span class="o">.</span><span class="na">FANOUT_QUEUE_2</span> <span class="o">+</span> <span class="s">&#34;] 的消息: [&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>修改<code>Publisher</code>，添加新的测试方法模拟发送消息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringAmqpTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">FANOUT_EXCHANGE</span> <span class="o">=</span> <span class="s">&#34;linner.fanout&#34;</span><span class="o">;</span>  <span class="c1">// 交换机名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSendFanoutExchange</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;Hello everyone!&#34;</span><span class="o">;</span> <span class="c1">// 消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 发送消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">FANOUT_EXCHANGE</span><span class="o">,</span> <span class="s">&#34;&#34;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;发送消息：[&#34;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>先运行<code>Consumer</code>，然后再运行<code>Publisher</code>的<code>testSendFanoutExchange()</code>测试方法发送消息，在<code>Consumer</code>的终端可以发现，两个消费者都接收到消息了。</p>
<p><code>RabbitTemplate</code>的<code>convertAndSend()</code>方法有不同的实现，可以向队列发送消息，也可以向交换机发送。</p>
<p>Fanout Exchange的特点：</p>
<ul>
<li>可以有多个队列；</li>
<li>每个队列都要绑定到Exchange；</li>
<li>生产者发送的消息，只能发送到Exchange，由Exchange决定发给哪个队列，生产者无法决定（也不知道）；</li>
<li>交换机把消息发送给绑定过的所有队列；</li>
<li>订阅队列的消费者都能拿到消息。</li>
</ul>
<p>Fanout Exchange的作用：</p>
<ul>
<li>接收Publisher发送的消息；</li>
<li>将消息按照规则路由到与之绑定的队列，Fanout Exchange的会将消息路由到每个绑定的队列；</li>
<li>不能缓存消息，路由失败，消息丢失。</li>
</ul>
<h2 id="direct-exchange" data-numberify>Direct Exchange<a class="anchor ms-1" href="#direct-exchange"></a></h2>
<p>Direct Exchange通过Binding Key（绑定密钥）和Routing Key（路由密钥）将消息路由到不同的队列上。</p>
<p>在Direct Exchange模式下，队列在声明时可以指定一个或多个Binding Key；Publisher在向Exchange发送消息时，通过指定Routing Key，告诉Exchange要将消息发送到哪个队列上。</p>
<p>在<code>Consumer</code>中添加新的<code>listen</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringRabbitListener</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DIRECT_EXCHANGE_NAME</span> <span class="o">=</span> <span class="s">&#34;linner.direct&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DIRECT_QUEUE_1_NAME</span> <span class="o">=</span> <span class="s">&#34;direct.queue1&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DIRECT_QUEUE_2_NAME</span> <span class="o">=</span> <span class="s">&#34;direct.queue2&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">bindings</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@QueueBinding</span><span class="o">(</span>   <span class="c1">// 设置绑定关系，绑定队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">value</span> <span class="o">=</span> <span class="nd">@Queue</span><span class="o">(</span><span class="n">DIRECT_QUEUE_1_NAME</span><span class="o">),</span>    <span class="c1">// 设置绑定的队列（会自动创建队列）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">exchange</span> <span class="o">=</span> <span class="nd">@Exchange</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="n">DIRECT_EXCHANGE_NAME</span><span class="o">,</span>   <span class="c1">// 设置绑定的交换机（会自动创建交换机）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">type</span> <span class="o">=</span> <span class="n">ExchangeTypes</span><span class="o">.</span><span class="na">DIRECT</span> <span class="cm">/* 设置交换机类型，默认为Direct */</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">key</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;red&#34;</span><span class="o">,</span> <span class="s">&#34;blue&#34;</span><span class="o">}</span>   <span class="c1">// Binding Keys，可以指定多个，当
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">)})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenDirectQueue1</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;消费者收到 [&#34;</span> <span class="o">+</span> <span class="n">DIRECT_QUEUE_1_NAME</span> <span class="o">+</span> <span class="s">&#34;] 的消息: [&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">bindings</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@QueueBinding</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">value</span> <span class="o">=</span> <span class="nd">@Queue</span><span class="o">(</span><span class="n">DIRECT_QUEUE_2_NAME</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">exchange</span> <span class="o">=</span> <span class="nd">@Exchange</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="n">DIRECT_EXCHANGE_NAME</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">type</span> <span class="o">=</span> <span class="n">ExchangeTypes</span><span class="o">.</span><span class="na">DIRECT</span> <span class="cm">/* 默认 */</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">key</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;red&#34;</span><span class="o">,</span> <span class="s">&#34;yellow&#34;</span><span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">)})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenDirectQueue2</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;消费者收到 [&#34;</span> <span class="o">+</span> <span class="n">DIRECT_QUEUE_2_NAME</span> <span class="o">+</span> <span class="s">&#34;] 的消息: [&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>@RabbitListener</code>的<code>bindings</code>属性提供了简便的绑定方式。<code>bindings</code>属性是<code>@QueueBinding</code>类型数组，可以同时有多个绑定。其中的每个绑定使用<code>@QueueBinding</code>来定义。</p>
<p><code>@QueueBinding</code>通常需要设置的属性有以下三个：</p>
<ul>
<li><code>value</code>：指明绑定的队列，类型为<code>@Queue</code>。通过使用<code>@Queue</code>来声明并订阅队列。</li>
<li><code>exchange</code>：指明绑定的交换机，类型为<code>@Exchange</code>。通过使用<code>@Exchange</code>，可以指定交换机的名称和类型。交换机类型可以使用<code>ExchangeTypes</code>下的字符串常量。</li>
<li><code>key</code>：指明Binding Key(s)，是一个字符串数组类型。</li>
</ul>
<p>在<code>Publisher</code>中添加新的<code>testSend</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringAmqpTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DIRECT_EXCHANGE</span> <span class="o">=</span> <span class="s">&#34;linner.direct&#34;</span><span class="o">;</span>  <span class="c1">// 交换机名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSendDirectExchange</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">routingKey</span> <span class="o">=</span> <span class="s">&#34;red&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;Hello direct exchange &#34;</span> <span class="o">+</span> <span class="n">routingKey</span> <span class="o">+</span> <span class="s">&#34;!&#34;</span><span class="o">;</span> <span class="c1">// 消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 发送消息（发送消息时需要指定Routing Key）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">DIRECT_EXCHANGE</span><span class="o">,</span> <span class="n">routingKey</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;发送消息：[&#34;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>先启动<code>Consumer</code>，然后再启动<code>Publisher</code>的<code>testSendDirectExchange()</code>方法来进行测试。你可以通过将<code>routingKey</code>修改为<code>blue</code>或<code>yellow</code>来测试其它路由密钥。</p>
<p>Direct Exchange的规则是这样的：</p>
<ul>
<li>Queue绑定一个或多个Binding Key(s)到Exchange。</li>
<li>Publisher在给Exchange发送消息时，指定Routing Key。</li>
<li>Exchange收到消息，并且根据Publisher指定的Routing Key去匹配对应的Queue(s)。当Exchange发现有Queue(s)的Binding Keys中，有与Publisher指定的Routing Key对应的Key时，就将消息发送给对应的Queue(s)。</li>
</ul>
<blockquote>
<p>注：如果在Direct Exchange模式下使用Fanout Exchange的方式发送消息（即<code>rabbitTemplate.convertAndSend(DIRECT_EXCHANGE, &quot;&quot;, message);</code>），那么是不会有任何一个队列接收到此消息的。除非在绑定队列时，设置了这样一个Key：<code>key = {&quot;&quot;}</code>。Direct Exchange模式将<code>&quot;&quot;</code>识别为一个Key。</p>
</blockquote>
<h2 id="topic-exchange" data-numberify>Topic Exchange<a class="anchor ms-1" href="#topic-exchange"></a></h2>
<p>Topic Exchange模式与Direct Exchange模式类似，区别在于Topic Exchange下的Routing Key必须是个多个单词的列表，并且以<code>.</code>分割。</p>
<p>例如：</p>
<ul>
<li><code>china.news</code>：代表有中国的新闻消息；</li>
<li><code>china.weather</code>：代表中国的天气消息。</li>
</ul>
<p>Topic Exchange模式中，Queue与Exchange指定Binding Key时可以使用通配符：</p>
<table>
<thead>
<tr>
<th style="text-align:center">通配符</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>#</code></td>
<td style="text-align:left">代指0个或多个单词。</td>
</tr>
<tr>
<td style="text-align:center"><code>*</code></td>
<td style="text-align:left">代指1个单词。</td>
</tr>
</tbody>
</table>
<p>在<code>Consumer</code>中添加新的<code>listen</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringRabbitListener</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TOPIC_EXCHANGE_NAME</span> <span class="o">=</span> <span class="s">&#34;linner.topic&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TOPIC_QUEUE_1_NAME</span> <span class="o">=</span> <span class="s">&#34;topic.queue1&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TOPIC_QUEUE_2_NAME</span> <span class="o">=</span> <span class="s">&#34;topic.queue2&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">bindings</span> <span class="o">=</span> <span class="nd">@QueueBinding</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">value</span> <span class="o">=</span> <span class="nd">@Queue</span><span class="o">(</span><span class="n">TOPIC_QUEUE_1_NAME</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">exchange</span> <span class="o">=</span> <span class="nd">@Exchange</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">name</span> <span class="o">=</span> <span class="n">TOPIC_EXCHANGE_NAME</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">type</span> <span class="o">=</span> <span class="n">ExchangeTypes</span><span class="o">.</span><span class="na">TOPIC</span>  <span class="c1">// 设置交换机类型为Topic
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">key</span> <span class="o">=</span> <span class="s">&#34;china.#&#34;</span>                     <span class="c1">// 设置包含通配符的Binding Key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenTopicQueue1</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;消费者收到 [&#34;</span> <span class="o">+</span> <span class="n">TOPIC_QUEUE_1_NAME</span> <span class="o">+</span> <span class="s">&#34;] 的消息: [&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">bindings</span> <span class="o">=</span> <span class="nd">@QueueBinding</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">value</span> <span class="o">=</span> <span class="nd">@Queue</span><span class="o">(</span><span class="n">TOPIC_QUEUE_2_NAME</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">exchange</span> <span class="o">=</span> <span class="nd">@Exchange</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">name</span> <span class="o">=</span> <span class="n">TOPIC_EXCHANGE_NAME</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">type</span> <span class="o">=</span> <span class="n">ExchangeTypes</span><span class="o">.</span><span class="na">TOPIC</span>
</span></span><span class="line"><span class="cl">            <span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">key</span> <span class="o">=</span> <span class="s">&#34;#.news&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenTopicQueue2</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;消费者收到 [&#34;</span> <span class="o">+</span> <span class="n">TOPIC_QUEUE_2_NAME</span> <span class="o">+</span> <span class="s">&#34;] 的消息: [&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在<code>Publisher</code>中添加新的<code>testSend</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringAmqpTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TOPIC_EXCHANGE</span> <span class="o">=</span> <span class="s">&#34;linner.topic&#34;</span><span class="o">;</span>  <span class="c1">// 交换机名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSendTopicExchange</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">routingKey</span> <span class="o">=</span> <span class="s">&#34;china.news&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;Hello &#34;</span> <span class="o">+</span> <span class="n">TOPIC_EXCHANGE</span> <span class="o">+</span> <span class="s">&#34; &#34;</span> <span class="o">+</span> <span class="n">routingKey</span> <span class="o">+</span> <span class="s">&#34;!&#34;</span><span class="o">;</span> <span class="c1">// 消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 发送消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">TOPIC_EXCHANGE</span><span class="o">,</span> <span class="n">routingKey</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;发送消息：[&#34;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>同样是以先启动<code>Consumer</code>，再启动<code>Publisher</code>的方式进行测试，然后再通过修改<code>routingKey</code>来测试不同的匹配规则。</p>
<hr>
<h1 id="消息转换器" data-numberify>消息转换器<a class="anchor ms-1" href="#消息转换器"></a></h1>
<p>在Spring AMOP中，发送消息的<code>RabbitTemplate.convertAndSend()</code>方法，其实发送的是<code>Object</code>类型。在发送消息时，Spring AMOP会将发送的消息序列化为字节发送给RabbitMQ；接收消息的时候，还会把字节反序列化为Java对象。也就是说，通讯过程传输的消息可以是任意类型的对象。</p>
<h2 id="默认序列化方式" data-numberify>默认序列化方式<a class="anchor ms-1" href="#默认序列化方式"></a></h2>
<p>默认情况下Spring AMOP采用的序列化方式是JDK序列化。</p>
<p>在<code>Consumer</code>的<code>RabbitConfig</code>中，添加一个新的队列：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RabbitConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">OBJECT_QUEUE_NAME</span> <span class="o">=</span> <span class="s">&#34;object.queue&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Queue</span> <span class="nf">getObjectQueue</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Queue</span><span class="o">(</span><span class="n">OBJECT_QUEUE_NAME</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后启动<code>Consumer</code>（这是为了展示Spring AMQP默认序列化方式在RabbitMQ中的序列化结果，所以先不在<code>Consumer</code>中接收消息）。</p>
<p>接着在<code>Publisher</code>中创建<code>testSend</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringAmqpTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">OBJECT_QUEUE_NAME</span> <span class="o">=</span> <span class="s">&#34;object.queue&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSendObjectQueue</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">msg</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">msg</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="s">&#34;Linner&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">msg</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">OBJECT_QUEUE_NAME</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>  <span class="c1">// 发送一个Map对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>启动测试方法，在RabbitMQ管理页面可以看到<code>object.queue</code>中存在这样一条消息：</p>
<p><picture><img class="img-fluid " alt="Spring AMOP 默认序列化结果" src="/docs/spring/springcloud/communications/spring-amqp/uTools_1691229847478.png" loading="lazy" width="1146" height="291" />
</picture>

</p>
<p>可以发现JDK序列化存在下列问题：</p>
<ul>
<li>数据体积过大；</li>
<li>有安全漏洞；</li>
<li>可读性差。</li>
</ul>
<h2 id="自定义序列化方式" data-numberify>自定义序列化方式<a class="anchor ms-1" href="#自定义序列化方式"></a></h2>
<p>JSON是一种很好的序列化方式，我们可以将Spring AMQP默认的JDK序列化改成Jackson。</p>
<p>首先导入依赖，由于序列化后还需反序列化，所以<code>Publisher</code>和<code>Consumser</code>模块都需要导入Jackson依赖。我们可以将依赖导入它们的父工程：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--Jackson核心依赖--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.dataformat<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>jackson-dataformat-xml<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>2.9.10<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>然后分别在<code>Publisher</code>和<code>Consumser</code>中替换Spring AMQP默认序列化方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AmqpConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 自定义消息转换器
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MessageConverter</span> <span class="nf">getMessageConverter</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Jackson2JsonMessageConverter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>先运行<code>Publisher.testSendObjectQueue()</code>方法，观察Jackson是否有生效。运行结果如下：</p>
<p><picture><img class="img-fluid " alt="Jackson 序列化结果" src="/docs/spring/springcloud/communications/spring-amqp/uTools_1691230403117.png" loading="lazy" width="619" height="361" />
</picture>

</p>
<p>最后在<code>Consumser</code>中创建一个新的<code>listen</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringRabbitListener</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">OBJECT_QUEUE_NAME</span> <span class="o">=</span> <span class="s">&#34;object.queue&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queuesToDeclare</span> <span class="o">=</span> <span class="nd">@Queue</span><span class="o">(</span><span class="n">OBJECT_QUEUE_NAME</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenObjectQueue</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;消费者收到 [&#34;</span> <span class="o">+</span> <span class="n">OBJECT_QUEUE_NAME</span> <span class="o">+</span> <span class="s">&#34;] 的消息: &#34;</span> <span class="o">+</span> <span class="n">msg</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>重启<code>Consumser</code>，观察终端输出的日志，如果成功打印出Map对象，说明反序列化成功。</p>
<blockquote>
<p>注：自定义Spring AMQP序列化方式时，Publisher和Consumer配置的消息转换器都必须相同。就是说，序列化和反序列化一定要使用同个消息转换器。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>RabbitMQ</title>
      <link>/docs/spring/springcloud/communications/rabbit-mq/</link>
      <pubDate>Thu, 03 Aug 2023 08:10:45 +0000</pubDate>
      
      <guid>/docs/spring/springcloud/communications/rabbit-mq/</guid>
      <description><![CDATA[RabbitMQ官网：https://www.rabbitmq.com/。 官方文档：https://rabbitmq.com/documen]]></description>
      <content:encoded><![CDATA[<p>RabbitMQ官网：<a href="https://www.rabbitmq.com/" target="_blank" rel="noopener noreferrer">https://www.rabbitmq.com/<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p>官方文档：<a href="https://rabbitmq.com/documentation.html" target="_blank" rel="noopener noreferrer">https://rabbitmq.com/documentation.html<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p>官方Demo：<a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener noreferrer">https://www.rabbitmq.com/getstarted.html<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<hr>
<h1 id="部署-rabbitmq" data-numberify>部署 RabbitMQ<a class="anchor ms-1" href="#部署-rabbitmq"></a></h1>
<p>使用Docker来部署RabbitMQ只需要两个步骤：</p>
<ol>
<li>
<p><code>pull</code> RabbitMQ镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker pull rabbitmq:3-management
</span></span></code></pre></div><p>RabbitMQ通过插件的方式提供了一个可视化界面。在RabbitMQ官方的镜像中，带<code>management</code>版本的就是集成了该可视化插件的镜像。</p>
<p>通过Docker官方的镜像源来<code>pull</code> RabbitMQ镜像可能会有点慢，可以使用一些国内的镜像源：</p>
<p>提供方          |镜像URL
中国区官方镜像  |<code>https://registry.docker-cn.com</code>
清华源          |<code>https://docker.mirrors.ustc.edu.cn</code>
阿里源          |<code>https://cr.console.aliyun.com</code>
腾讯源          |<code>https://mirror.ccs.tencentyun.com</code>
网易源          |<code>http://hub-mirror.c.163.com</code>
道客镜像站      |<code>http://f1361db2.m.daocloud.io</code></p>
</li>
<li>
<p>启动RabbitMQ容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">RABBITMQ_DEFAULT_USER</span><span class="o">=</span>linner <span class="se">\ </span>  <span class="c1"># RabbitMQ用户名（默认为guest）</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">RABBITMQ_DEFAULT_PASS</span><span class="o">=</span><span class="m">123456</span> <span class="se">\ </span>  <span class="c1"># RabbitMQ密码（默认为guest）</span>
</span></span><span class="line"><span class="cl">    --name rabbitmq-server <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --hostname rabbitmq <span class="se">\ </span>              <span class="c1"># 域名，单机下可忽略，通常用于集群部署时</span>
</span></span><span class="line"><span class="cl">    -p 15672:15672 <span class="se">\ </span>                   <span class="c1"># 可视化管理界面端口</span>
</span></span><span class="line"><span class="cl">    -p 5672:5672 <span class="se">\ </span>                     <span class="c1"># 服务端口</span>
</span></span><span class="line"><span class="cl">    -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    rabbitmq:3-management
</span></span></code></pre></div></li>
</ol>
<p>启动容器后，进入<a href="http://localhost:15672/" target="_blank" rel="noopener noreferrer">http://localhost:15672/<i class="fas fa-external-link-square-alt ms-1"></i></a>即可进入RabbitMQ管理界面。</p>
<p>使用以下命令查看RabbitMQ日志：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker logs rabbitmq-server <span class="c1"># 替换成你容器的名称</span>
</span></span></code></pre></div><hr>
<h1 id="rabbitmq-结构" data-numberify>RabbitMQ 结构<a class="anchor ms-1" href="#rabbitmq-结构"></a></h1>
<p>RabbitMQ的基本结构如下：</p>
<p><picture><img class="img-fluid " alt="RabbitMQ的基本结构" src="/docs/spring/springcloud/communications/rabbit-mq/image-20210717162752376.png" loading="lazy" width="1401" height="610" />
</picture>

</p>
<p>在RabbitMQ中有几个概念：</p>
<ul>
<li><code>channel</code>：操作RabbitMQ的工具。</li>
<li><code>exchange</code>：路由消息到队列中。</li>
<li><code>queue</code>：缓存消息。</li>
<li><code>virtual host</code>：虚拟主机，是对<code>queue</code>、<code>exchange</code>等资源的逻辑分组。</li>
</ul>
<p>RabbitMQ中的角色主要有：</p>
<ul>
<li>Publisher：生产者。将消息发送给Queue（队列）或Exchange（交换机）。</li>
<li>Consumer：消费者。从Queue获取消息，并做响应的处理。</li>
<li>Exchange：交换机。负责消息路由，将从Publisher接受到的消息分发到不同的Queues上。</li>
<li>Queue：队列。用于从Publishers或Exchange接收消息并存储。</li>
<li>Virtual Host：虚拟主机。隔离不同用户的Exchange、Queue，消息的隔离。</li>
</ul>
<hr>
<h1 id="消息模型" data-numberify>消息模型<a class="anchor ms-1" href="#消息模型"></a></h1>
<p>RabbitMQ官方文档中给出了5个Demo，它们分别对应几种不同的用法：</p>
<ul>
<li>
<p>基本消息队列（Basic Queue）：</p>
<p><picture><img class="img-fluid " alt="Basic Queue" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691056818833.png" loading="lazy" width="286" height="158" />
</picture>

</p>
</li>
<li>
<p>工作消息队列（Work Queue）：</p>
<p><picture><img class="img-fluid " alt="Work Queue" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691056877775.png" loading="lazy" width="258" height="231" />
</picture>

</p>
</li>
<li>
<p>发布与订阅（Publish and Subscribe）。</p>
<p>根据交换机类型的不同，可分为三种：</p>
<ul>
<li>
<p>Fanout Exchange（广播）：</p>
<p><picture><img class="img-fluid " alt="Fanout Exchange" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691057092864.png" loading="lazy" width="272" height="182" />
</picture>

</p>
</li>
<li>
<p>Direct Exchange（路由）：</p>
<p><picture><img class="img-fluid " alt="Direct Exchange" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691057130360.png" loading="lazy" width="262" height="212" />
</picture>

</p>
</li>
<li>
<p>Topic Exchange（主题）：</p>
<p><picture><img class="img-fluid " alt="Topic Exchange" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691057168656.png" loading="lazy" width="276" height="209" />
</picture>

</p>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="rabbitmq-依赖" data-numberify>RabbitMQ 依赖<a class="anchor ms-1" href="#rabbitmq-依赖"></a></h1>
<p>使用RabbitMQ之前需要先导入依赖。可以导入Spring AMQP的依赖，其中包含了RabbitMQ的依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- AMQP依赖，包含RabbitMQ --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-amqp<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>对于RabbitMQ来说，Publisher和Consumer都是使用这个依赖，所以这个依赖坐标可以放在它们的父工程中。</p>
<hr>
<h1 id="基本消息队列" data-numberify>基本消息队列<a class="anchor ms-1" href="#基本消息队列"></a></h1>
<p>最基础的消息队列模型只包含三种角色：</p>
<ul>
<li><strong>Publisher</strong>：消息发布者，将消息发送到队列Queue。</li>
<li><strong>Queue</strong>：消息队列，负责接受并缓存Publisher发送的消息。</li>
<li><strong>Consumer</strong>：订阅队列，处理Queue中的消息。</li>
</ul>
<p>Queue由RabbitMQ实现，需要由我们实现的角色为Publisher和Consumer。</p>
<p>实现基本消息队列可以使用RabbitMQ的原生接口来模拟。创建两个Spring模块<code>Publisher</code>和<code>Consumer</code>来模拟消息的发送和接收：</p>
<ul>
<li>
<p>在<code>Publisher</code>模块中创建<code>PublisherTest</code>测试类来模拟消息发送：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PublisherTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSendMessage</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">TimeoutException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 建立连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ConnectionFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConnectionFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1.1. 设置连接参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setHost</span><span class="o">(</span><span class="s">&#34;localhost&#34;</span><span class="o">);</span>   <span class="c1">// 主机地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="mi">5672</span><span class="o">);</span>          <span class="c1">// 端口号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setVirtualHost</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">);</span>    <span class="c1">// 虚拟主机
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;linner&#34;</span><span class="o">);</span>  <span class="c1">// 账号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;123456&#34;</span><span class="o">);</span>  <span class="c1">// 密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 1.2. 建立连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">newConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 创建通道Channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Channel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createChannel</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 创建队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">queueName</span> <span class="o">=</span> <span class="s">&#34;simple.queue&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">channel</span><span class="o">.</span><span class="na">queueDeclare</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 4. 发送消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;Hello RabbitMQ!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">channel</span><span class="o">.</span><span class="na">basicPublish</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">,</span> <span class="n">queueName</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;发送消息成功：[&#34;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 关闭通道和连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">channel</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>Consumer</code>模块中创建<code>ConsumerTest</code>来模拟消息接收：</p>
<blockquote>
<p>注：接收消息需要在<code>main()</code>中创建回调函数。不能使用一般的测试方法。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span>  <span class="nc">ConsumerTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">TimeoutException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 创建连接工厂，建立连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ConnectionFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConnectionFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1.1. 设置连接参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setHost</span><span class="o">(</span><span class="s">&#34;localhost&#34;</span><span class="o">);</span>   <span class="c1">// 主机地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="mi">5672</span><span class="o">);</span>          <span class="c1">// 端口号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setVirtualHost</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">);</span>    <span class="c1">// 虚拟主机
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;linner&#34;</span><span class="o">);</span>  <span class="c1">// 用户名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;123456&#34;</span><span class="o">);</span>  <span class="c1">// 密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 1.2. 建立连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">newConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 创建通道Channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Channel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createChannel</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 创建队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">queueName</span> <span class="o">=</span> <span class="s">&#34;simple.queue&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">channel</span><span class="o">.</span><span class="na">queueDeclare</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 4. 订阅消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">channel</span><span class="o">.</span><span class="na">basicConsume</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="k">new</span> <span class="n">DefaultConsumer</span><span class="o">(</span><span class="n">channel</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleDelivery</span><span class="o">(</span><span class="n">String</span> <span class="n">consumerTag</span><span class="o">,</span> <span class="n">Envelope</span> <span class="n">envelope</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">AMQP</span><span class="o">.</span><span class="na">BasicProperties</span> <span class="n">properties</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">body</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 5. 处理消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">body</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;接收到消息：[&#34;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;等待接收消息......&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>模拟过程：</p>
<ol>
<li>
<p>先给<code>testSendMessage()</code>打个断点，然后再以调试模式启动<code>PublisherTest</code>，逐条执行。可以在RabbitMQ管理界面中发现创建了对应的连接、通道和消息队列。并且，进入队列后可以发现有一条消息在准备中。</p>
<p>MQ连接：</p>
<p><picture><img class="img-fluid " alt="RabbitMQ 连接" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691073342130.png" loading="lazy" width="968" height="562" />
</picture>

</p>
<p>MQ通道：</p>
<p><picture><img class="img-fluid " alt="RabbitMQ 通道" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691073381002.png" loading="lazy" width="1430" height="436" />
</picture>

</p>
<p>消息队列（Read项为1，表示有1条准备消息）：</p>
<p><picture><img class="img-fluid " alt="消息队列" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691073449245.png" loading="lazy" width="1156" height="471" />
</picture>

</p>
<p>准备中的消息：</p>
<p><picture><img class="img-fluid " alt="准备中的消息" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691073499794.png" loading="lazy" width="547" height="524" />
</picture>

</p>
</li>
<li>
<p>此时启动<code>Consumer</code>，可以发现有一条新的连接和新的通道。并且消息队列中的准备消息变为0。</p>
<p>新的MQ连接：</p>
<p><picture><img class="img-fluid " alt="新的 RabbitMQ 连接" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691073659703.png" loading="lazy" width="917" height="141" />
</picture>

</p>
<p>新的MQ通道：</p>
<p><picture><img class="img-fluid " alt="新的 RabbitMQ 通道" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691073733155.png" loading="lazy" width="1414" height="117" />
</picture>

</p>
<p>消息队列：</p>
<p><picture><img class="img-fluid " alt="消息队列" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691073860449.png" loading="lazy" width="1138" height="114" />
</picture>

</p>
<p>在<code>Consumer</code>的控制台中可以发现打印了一条新消息：</p>
<pre tabindex="0"><code>接收到消息：[Hello RabbitMQ!]
</code></pre></li>
<li>
<p>再次启动<code>PublisherTest</code>，<code>Consumer</code>控制台再次打印一条消息：</p>
<pre tabindex="0"><code>接收到消息：[Hello RabbitMQ!]
</code></pre></li>
</ol>
<p>在搭建基本消息队列的过程中，创建队列之前的操作对于Publisher和Consumer来说是一致的。建立连接这个过程对于Publisher和Consumer来说都是必要的，之所以它们都要创建队列，是为了防止队列不存在的情况发生。它们的流程中不同的是Publisher创建队列后是为了发送消息，Consumer创建队列后是为了接收消息。</p>
<p>创建基本消息队列的流程大致可总结为：</p>
<ol>
<li>建立连接（Connection）。
<ol>
<li>创建连接工厂；</li>
<li>设置连接参数；</li>
<li>最后再建立连接。</li>
</ol>
</li>
<li>利用Connection创建通道（Channel）。</li>
<li>利用Channel声明消息队列。</li>
<li>利用Channel在指定的消息队列中发送消息或订阅消息。
<ul>
<li>对于Publisher来说，需要在消息队列中发送消息。发送完消息后，需要按顺序关闭通道和连接。</li>
<li>对于Consumer来说，需要在消息队列中接收消息。</li>
</ul>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>通讯方式</title>
      <link>/docs/spring/springcloud/communications/introduction/</link>
      <pubDate>Thu, 03 Aug 2023 07:34:34 +0000</pubDate>
      
      <guid>/docs/spring/springcloud/communications/introduction/</guid>
      <description><![CDATA[微服务间通讯有两种方式： 同步通讯：实时响应。 异步通讯：不需要马上回复。 两种方式各有优劣，同步通讯可以立即得到响应，但是却不能跟多个服务同时通]]></description>
      <content:encoded><![CDATA[<p>微服务间通讯有两种方式：</p>
<ul>
<li>同步通讯：实时响应。</li>
<li>异步通讯：不需要马上回复。</li>
</ul>
<p>两种方式各有优劣，同步通讯可以立即得到响应，但是却不能跟多个服务同时通讯。异步通讯可以同时与多个服务通讯，但是往往响应会有所延迟。</p>
<hr>
<h1 id="同步通讯" data-numberify>同步通讯<a class="anchor ms-1" href="#同步通讯"></a></h1>
<p>Feign调用就属于同步方式，虽然调用可以实时得到结果，但存在下面的问题：</p>
<ul>
<li><strong>耦合度高</strong>：消费者与提供者之间存在直接的调用关系。在服务中每次加入新的需求，都要修改原来的代码。</li>
<li><strong>性能下降</strong>：消费者需要等待提供者响应，如果调用链过长，响应时间等于每次调用的时间之和。</li>
<li><strong>资源浪费</strong>：消费者在等待响应过程中，不能释放请求占用的资源，高并发场景下会极度浪费系统资源。</li>
<li><strong>级联失败</strong>：如果提供者出现问题，所有消费者都会跟着出问题。如同多米话骨牌一样，迅速导致整个微服务群故障。</li>
</ul>
<blockquote>
<p>还有一个导致性能下降和资源浪费的原因：消费者在给提供者发请求时，提供者在处理别的消费者的请求，无法及时响应，这也会导致该消费者等待过长时间的响应。</p>
</blockquote>
<p>同步通讯并非只有缺点没有优点，其优点为时效性较强，可以立即得到结果。</p>
<hr>
<h1 id="异步通讯" data-numberify>异步通讯<a class="anchor ms-1" href="#异步通讯"></a></h1>
<p>异步调用可以避免上述同步通讯时造成的问题。</p>
<p>在异步通讯中，使用<strong>事件</strong>（<strong>Event</strong>）和<strong>代理</strong>（<strong>Broker</strong>）处理通讯。在异步通讯中有三种角色：</p>
<ul>
<li><strong>事件发布者</strong>（<strong>Publisher</strong>）：Publisher在处理完自己的业务后，发布一个事件给Broker。</li>
<li><strong>事件代理者</strong>（<strong>Broker</strong>）：Borker在接收到Publisher的事件消息后，将该消息发送给订阅了该事件的Consumer。</li>
<li><strong>事件订阅者</strong>（<strong>Consumer</strong>）：Consumer接收到自己订阅的事件消息后，根据事件做相应的业务处理。并且Consumer可以根据自己的情况和业务处理能力来处理（就好比说能力不够就不要揽太多活，Consumer性能不够就不会同时处理太多业务）。</li>
</ul>
<p>在事件模式中，Publisher在处理完业务后，就只管发布事件给Broker。剩下的由Broker和Consumer完成。这样Publisher与Consumer并没有直接通讯，而且Publisher也无需等待响应，即可以降低耦合、减少级联失败的情况，又能提高性能、减少资源浪费。Broker在这一模式中，就像是一个数据总线，所有的服务要接收数据和发送数据都发到这个总线上；这个总线就像协议一样，让服务间的通讯变得标准和可控。</p>
<blockquote>
<p>在实际应用中，发布者与订阅者是相对的。也就是说，从整个系统来看，发布者可以是订阅者，订阅者也可以是发布者；从具体的业务逻辑线上看，才有某个服务是另外某个服务的发布者，某个服务是另外某个服务的订阅者。</p>
</blockquote>
<p>使用事件模式的异步通讯的好处：</p>
<ul>
<li><strong>吞吐量提升</strong>：发布者无需等待订阅者处理完成，响应更快速。</li>
<li><strong>故障隔离</strong>：服务没有直接调用，不存在级联失败问题。</li>
<li><strong>提高资源利用</strong>：调用间没有阻塞，不会造成无效的资源占用。</li>
<li><strong>耦合度极低</strong>：由Borker做代理，每个服务都可以灵活插拔，可替换。</li>
<li><strong>流量削峰</strong>：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件。</li>
</ul>
<p>虽然异步通讯好处多，但是也不是没有缺点：</p>
<ul>
<li>架构复杂，业务没有明显的流程线，不易于管理。</li>
<li>需要依赖于Broker的可靠、安全、性能（Broker挂了，就没人给订阅者发消息了）。</li>
</ul>
<hr>
<h1 id="mq-技术" data-numberify>MQ 技术<a class="anchor ms-1" href="#mq-技术"></a></h1>
<p>MQ（Message Queue，消息队列），就是存放消息的队列，是实现事件驱动架构中的Broker的一种方法。</p>
<p>比较常见的几种MQ实现及其对比如下：</p>
<pre><code>       | **RabbitMQ**            | **ActiveMQ**                     | **RocketMQ** | **Kafka**
</code></pre>
<p>&mdash;&mdash;&mdash;- | &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; | &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; | &mdash;&mdash;&mdash;&mdash; | &mdash;&mdash;&mdash;-
公司/社区  | Rabbit                  | Apache                           | 阿里         | Apache
开发语言   | Erlang                  | Java                             | Java         | Scala&amp;Java
协议支持   | AMQP，XMPP，SMTP，STOMP | OpenWire，STOMP，REST，XMPP，AMQP| 自定义协议   | 自定义协议
可用性     | 高                      | 一般                             | 高           | 高
单机吞吐量 | 一般                    | 差                               | 高           | 非常高
消息延迟   | 微秒级                  | 毫秒级                           | 毫秒级       | 毫秒以内
消息可靠性 | 高                      | 一般                             | 高           | 一般</p>
<p>一般按照以下方式选取：</p>
<ul>
<li>追求可用性：Kafka、 RocketMQ 、RabbitMQ。</li>
<li>追求可靠性：RabbitMQ、RocketMQ。</li>
<li>追求吞吐能力：RocketMQ、Kafka。</li>
<li>追求消息低延迟：RabbitMQ、Kafka。</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>/docs/docker/docker-compose/</link>
      <pubDate>Wed, 02 Aug 2023 08:32:18 +0000</pubDate>
      
      <guid>/docs/docker/docker-compose/</guid>
      <description><![CDATA[介绍 Docker Compose是一个文本文件，用于定义和运行多容器 Docker应用程序的工具。通过Compose，可以使用YML文件来配置应用程序需要]]></description>
      <content:encoded><![CDATA[<h1 id="介绍" data-numberify>介绍<a class="anchor ms-1" href="#介绍"></a></h1>
<p>Docker Compose是一个文本文件，用于定义和运行多容器 Docker应用程序的工具。通过Compose，可以使用YML文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p>
<p>Compose使用的三个步骤：</p>
<ul>
<li>使用Dockerfile定义应用程序的环境。</li>
<li>使用<code>docker-compose.yml</code>定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li>
<li>最后，执行<code>docker-compose up</code>命令来启动并运行整个应用程序。</li>
</ul>
<p><code>docker-compose.yml</code>的配置案例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">version: &#34;3.8&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">  mysql</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">    image: mysql:5.7.25</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="nt">MYSQL_ROOT_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">    volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">     - &#34;/tmp/mysql/data:/var/lib/mysql&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">     - &#34;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">  web</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">    build: .</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">    ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">     - &#34;8090:8090&#34;</span><span class="w">
</span></span></span></code></pre></div><p>上方的<code>docker-compose.yml</code>描述了一个项目，其中包含两个容器：</p>
<ul>
<li><code>mysql</code>：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录。</li>
<li><code>web</code>：一个基于<code>docker build</code>临时构建的镜像容器，映射端口为<code>8090</code>。</li>
</ul>
<p>Docker Compose的详细语法可参考官网<a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener noreferrer">Compose file reference<i class="fas fa-external-link-square-alt ms-1"></i></a>或者菜鸟教程的<a href="https://www.runoob.com/docker/docker-compose.html" target="_blank" rel="noopener noreferrer">Docker Compose<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p><code>docker-compose.yml</code>可以看做是将多个<code>docker run</code>命令写到一个文件，只是语法稍有差异。</p>
<p>将<code>docker-compose.yml</code>和Dockerfile放置在同一个工作目录中，然后执行以下命令启动程序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker-compose up
</span></span></code></pre></div><p>命令执行成功后Docker Compose会自动帮你构建所需的镜像。</p>
<p>如果想在后台执行该服务可以加上<code>-d</code>参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker-compose up -d
</span></span></code></pre></div><hr>
<h1 id="安装" data-numberify>安装<a class="anchor ms-1" href="#安装"></a></h1>
<p>Linux上可以从Github上下载Compose的二进制包来使用，最新发行的版本地址：<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener noreferrer">https://github.com/docker/compose/releases<i class="fas fa-external-link-square-alt ms-1"></i></a>。运行以下命令以下载 Docker Compose 的当前稳定版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo curl -L <span class="s2">&#34;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-</span><span class="k">$(</span>uname -s<span class="k">)</span><span class="s2">-</span><span class="k">$(</span>uname -m<span class="k">)</span><span class="s2">&#34;</span> -o /usr/local/bin/docker-compose
</span></span></code></pre></div><p>如果要安装其他版本的Compose，请替换URL中的<code>v2.2.2</code>。</p>
<blockquote>
<p>Docker Compose存放在 GitHub，不太稳定。可以通过执行下面的命令，高速安装Docker Compose：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-<span class="sb">`</span>uname -s<span class="sb">`</span>-<span class="sb">`</span>uname -m<span class="sb">`</span> &gt; /usr/local/bin/docker-compose
</span></span></code></pre></div></blockquote>
<p>将可执行权限应用于二进制文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo chmod +x /usr/local/bin/docker-compose
</span></span></code></pre></div><p>创建软链：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
</span></span></code></pre></div><p>测试是否安装成功：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker-compose version
</span></span></code></pre></div><blockquote>
<p>注意： 对于Alpine，需要以下依赖包：<code>py-pip</code>，<code>python-dev</code>，<code>libffi-dev</code>，<code>openssl-dev</code>，<code>gcc</code>，<code>libc-dev和make</code>。</p>
<p>MacOS和Windows的Docker Desktop已经包含Compose和其他Docker应用程序，所以无需再进行安装。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>/docs/docker/dockerfile/</link>
      <pubDate>Tue, 01 Aug 2023 14:26:03 +0000</pubDate>
      
      <guid>/docs/docker/dockerfile/</guid>
      <description><![CDATA[常见的镜像在Docker Hub就能找到，但是要部署自己的服务可能需要自己构建镜像。构建镜像可以使用Dockerfile。Dockerfile]]></description>
      <content:encoded><![CDATA[<p>常见的镜像在Docker Hub就能找到，但是要部署自己的服务可能需要自己构建镜像。构建镜像可以使用Dockerfile。Dockerfile是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>
<h1 id="镜像结构" data-numberify>镜像结构<a class="anchor ms-1" href="#镜像结构"></a></h1>
<p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p>
<p>以MySQL镜像的组成结构为例：</p>
<p><picture><img class="img-fluid " alt="MySQL镜像的组成结构" src="/docs/docker/dockerfile/image-20210731175806273.png" loading="lazy" width="2956" height="1674" />
</picture>

</p>
<p>镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。构建镜像，其实就是实现上述打包的过程。</p>
<h1 id="语法" data-numberify>语法<a class="anchor ms-1" href="#语法"></a></h1>
<p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。我们只需要告诉Docker，镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么。Dockerfile就是描述上述信息的文件。Docker会通过Dockerfile构建镜像。</p>
<p>Dockerfile是一个文本文件，其中包含一个个的指令(Instruction），用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p>
<table>
<thead>
<tr>
<th style="text-align:center">指令</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>FROM</code></td>
<td style="text-align:left">指定基础镜像。必须在Dockerfile的第一行指定。</td>
<td style="text-align:left"><code>FORM centos:6</code></td>
</tr>
<tr>
<td style="text-align:center"><code>ENV</code></td>
<td style="text-align:left">设置环境变量。在使用<code>docker run</code>时可以通过<code>-e</code>重设环境变量值。</td>
<td style="text-align:left"><code>ENV key=value</code></td>
</tr>
<tr>
<td style="text-align:center"><code>COPY</code></td>
<td style="text-align:left">拷贝本地文件到镜像的指定目录。</td>
<td style="text-align:left">复制当前目录下的<code>mysql-5.7.rpm</code>到镜像的<code>/tmp</code>目录：<br><code>COPY ./mysql-5.7.rpm /tmp</code></td>
</tr>
<tr>
<td style="text-align:center"><code>RUN</code></td>
<td style="text-align:left">执行Linux的Shell命令，一般是安装过程的命令。<code>RUN</code>在<code>docker build</code>时执行。</td>
<td style="text-align:left"><code>RUN yum install gcc</code></td>
</tr>
<tr>
<td style="text-align:center"><code>EXPOSE</code></td>
<td style="text-align:left">指定容器运行时监听的端口。</td>
<td style="text-align:left"><code>EXPOSE 8080</code></td>
</tr>
<tr>
<td style="text-align:center"><code>CMD</code></td>
<td style="text-align:left">（可以被覆盖）指定容器创建时的默认命令。<code>CMD</code>在<code>docker run</code>时执行。</td>
<td></td>
</tr>
<tr>
<td style="text-align:center"><code>ENTRYPOINT</code></td>
<td style="text-align:left">(不可被覆盖）镜像中应用的启动命令，容器运行时调用。</td>
<td style="text-align:left"><code>ENTRYPOINT java -jar xxx.jar</code></td>
</tr>
<tr>
<td style="text-align:center"><code>VOLUME</code></td>
<td style="text-align:left">为容器创建挂载点或声明卷。</td>
<td></td>
</tr>
<tr>
<td style="text-align:center"><code>WORKDIR</code></td>
<td style="text-align:left">设置后续指令的工作目录。</td>
<td></td>
</tr>
<tr>
<td style="text-align:center"><code>USER</code></td>
<td style="text-align:left">指定后续指令的用户上下文。</td>
<td></td>
</tr>
<tr>
<td style="text-align:center"><code>SHELL</code></td>
<td style="text-align:left">覆盖Docker中默认的Shell，用于RUN、CMD和ENTRYPOINT指令。</td>
<td></td>
</tr>
</tbody>
</table>
<p>更新详细语法说明，请参考官网文档：<a href="https://docs.docker.com/engine/reference/builder" target="_blank" rel="noopener noreferrer">Dockerfile reference<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p>在使用Ubuntu、Debian这样的容器的时候，我们可能没办法使用它们的<code>systemctl</code>命令。这是因为它们在启动时默认没有初始化系统（<code>init</code>进程没有运行）。新的Debian和Ubuntu镜像中移除了<code>init</code>软件包，我们可以通过Dockerfile在创建一个包含<code>init</code>软件包的Debian镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> debian:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 设置环境变量</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">APT_ETC_DIR</span><span class="o">=</span>/etc/apt <span class="nv">SOURCES_LIST_PATH</span><span class="o">=</span>./sources.list<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 将在本地配置好的镜像源文件拷贝到镜像</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> <span class="nv">$SOURCES_LIST_PATH</span> <span class="nv">$APT_DIR</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 更换镜像源</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt update <span class="o">&amp;&amp;</span> apt-get update<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 安装init软件包</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get install init -y<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 安装ssh</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get install -y openssh-server<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get clean all<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 暴露端口</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">EXPOSE</span><span class="s"> 22</span><span class="err">
</span></span></span></code></pre></div><p>接着通过<code>docker build</code>命令构建镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker build -f ./Dockerfile . -t linner/debian
</span></span></code></pre></div><p>然后使用以下命令运行容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name my-debian <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --privileged<span class="o">=</span><span class="nb">true</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">SOURCES_LIST_PATH</span><span class="o">=</span>/etc/apt/sources.list <span class="se">\ </span>   <span class="c1"># 把本地上使用的镜像源配置拷贝到容器中</span>
</span></span><span class="line"><span class="cl">    linner/debian <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    /sbin/init      <span class="c1"># 启动时运行init</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Docker 容器操作</title>
      <link>/docs/docker/container-options/</link>
      <pubDate>Tue, 01 Aug 2023 14:24:30 +0000</pubDate>
      
      <guid>/docs/docker/container-options/</guid>
      <description><![CDATA[容器状态 Docker容器一般会有以下三种状态： 运行：进程正常运行。 暂停：进程暂停，CPU不再运行，但不会释放内存。 停止：进程终止，回收进程占]]></description>
      <content:encoded><![CDATA[<h1 id="容器状态" data-numberify>容器状态<a class="anchor ms-1" href="#容器状态"></a></h1>
<p>Docker容器一般会有以下三种状态：</p>
<ul>
<li><strong>运行</strong>：进程正常运行。</li>
<li><strong>暂停</strong>：进程暂停，CPU不再运行，但不会释放内存。</li>
<li><strong>停止</strong>：进程终止，回收进程占用的内存、CPU等资源。</li>
</ul>
<p>相关的命令如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>docker run</code></td>
<td style="text-align:left">创建并运行一个容器，正常情况下处于运行状态。</td>
</tr>
<tr>
<td style="text-align:center"><code>docker pause</code></td>
<td style="text-align:left">让一个运行的容器暂停。例如<code>docker pause my-debian</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>docker unpause</code></td>
<td style="text-align:left">让一个容器从暂停状态恢复运行。例如<code>docker unpause my-debian</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>docker stop</code></td>
<td style="text-align:left">停止一个运行的容器。例如<code>docker stop my-debian</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>docker start</code></td>
<td style="text-align:left">让一个停止的容器再次运行。例如<code>docker start my-debian</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>docker rm</code></td>
<td style="text-align:left">删除一个容器。例如<code>docker rm my-debian</code>。</td>
</tr>
</tbody>
</table>
<p><code>docker pause</code>、<code>docker unpause</code>、<code>docker stop</code>、<code>docker start</code>和<code>docker rm</code>的用法十分相似，都是在命令后面指定要操作的容器名称或者容器ID（Container ID）。</p>
<h1 id="创建容器" data-numberify>创建容器<a class="anchor ms-1" href="#创建容器"></a></h1>
<p>创建容器使用<code>docker run</code>命令。可以使用<code>docker run --help</code>查看它的用法。</p>
<p>如果要创建一个<code>debian</code>容器，可以使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -ti <span class="se">\ </span>   <span class="c1"># 参数 -ti 表示使用终端交互式操作</span>
</span></span><span class="line"><span class="cl">    --name my-debian <span class="se">\ </span> <span class="c1"># --name 指定容器的名称</span>
</span></span><span class="line"><span class="cl">    -p 8088:80 <span class="se">\ </span>   <span class="c1"># -p 指定映射的端口，将容器的80端口映射到本地8088</span>
</span></span><span class="line"><span class="cl">    -v /home/debian:/root <span class="se">\ </span><span class="c1"># -v 代表挂载，将本地的/home/deian目录挂载到容器的/root目录</span>
</span></span><span class="line"><span class="cl">    debian:latest <span class="se">\ </span><span class="c1"># 指定创建容器的镜像</span>
</span></span><span class="line"><span class="cl">    /bin/bash       <span class="c1"># 容器运行的命令，这里指运行容器的bash终端程序（也就是常见的命令行窗口）</span>
</span></span></code></pre></div><p>运行该命令会进入创建好的Debian容器中（默认是进入<code>/</code>目录），输入<code>exit</code>可以退出Debian终端。</p>
<p>容器挂载目录和端口映射的语法类似，它们都使用<code>:</code>符号分隔宿主机和容器。<code>:</code>左边的是宿主机的目录地址或端口号，<code>:</code>右边的是容器的目录地址或端口号。它们的语法如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th style="text-align:center">命令参数语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">挂载目录</td>
<td style="text-align:center"><code>-v [宿主机目录或数据卷名称]:[容器目录]</code></td>
</tr>
<tr>
<td style="text-align:center">端口映射</td>
<td style="text-align:center"><code>-p [宿主机可用端口号]:[容器应用端口号]</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>注：在使用<code>docker run</code>指令时，如果指定的镜像未<code>pull</code>，但在镜像仓库中存在，<u><code>docker run</code>会自动从仓库中拉取镜像</u>。</p>
</blockquote>
<p>大部分情况下容器是在后台运行的，可以通过使用<code>-d</code>指定容器的运行模式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -tid --name my-debian debian:latest /bin/bash
</span></span></code></pre></div><p>加了<code>-d</code>参数就不会进入容器里面。</p>
<blockquote>
<p>注：Docker容器和镜像一样，它们除了ID之外都有一个易于使用的标识。Docker容器的标识就是<code>NAME</code>。容器的名称在Docker中标识唯一的一个容器，但是容器的名称可以为空（在<code>docker run</code>时不指定<code>--name</code>）。名称为空的容器需要使用容器ID来对其进行操作。</p>
</blockquote>
<h1 id="操作容器内部" data-numberify>操作容器内部<a class="anchor ms-1" href="#操作容器内部"></a></h1>
<p>在后台运行的容器，我们想要进入容器内部或者在容器运行时运行一些其它命令，可以使用<code>docker exec</code>命令。</p>
<p>例如要进入在后台运行的<code>my-debian</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker <span class="nb">exec</span> -ti my-debian /bin/bash
</span></span></code></pre></div><p>又或者假设你在<code>my-debian</code>中装了MySQL，但是启动容器时MySQL Server并没有启动，此时你可以运行以下命令重启MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker <span class="nb">exec</span> -tid my-debian systemctl restart mysql
</span></span></code></pre></div><h1 id="查看容器" data-numberify>查看容器<a class="anchor ms-1" href="#查看容器"></a></h1>
<p>查看所有正在运行的Docker容器有3种方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker ps
</span></span><span class="line"><span class="cl">docker container ls
</span></span><span class="line"><span class="cl">docker container ps
</span></span></code></pre></div><p>查看Docker所有的容器（包括停止运行的容器）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker ps -a
</span></span><span class="line"><span class="cl">docker container ls -a
</span></span><span class="line"><span class="cl">docker container ps -a
</span></span></code></pre></div><h1 id="数据卷" data-numberify>数据卷<a class="anchor ms-1" href="#数据卷"></a></h1>
<p>在给容器挂载目录之前可以创建一个数据卷，这个数据卷也是在宿主机上的一个文件夹，这个文件夹的路径由Docker确定。一旦完成数据卷挂载，对容器中被挂载目录的一切操作都会作用在数据卷对应的宿主机目录。</p>
<p>数据卷的作用是将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全。</p>
<p>数据卷操作命令是<code>docker volume</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker volume <span class="o">[</span>COMMAND<span class="o">]</span>
</span></span></code></pre></div><p>数据卷操作：</p>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>docker volume create</code></td>
<td style="text-align:left">创建数据卷。例如创建一个存放静态页面的数据卷：<code>docker volume create html</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>docker volume ls</code></td>
<td style="text-align:left">查看所有数据卷。</td>
</tr>
<tr>
<td style="text-align:center"><code>docker volume inspect</code></td>
<td style="text-align:left">查看数据卷详细信息，包括关联的宿主机目录位置。例如查看上面创建的<code>html</code>数据卷：<code>docker volume inspect html</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>docker volume rm</code></td>
<td style="text-align:left">删除指定数据卷。删除<code>html</code>数据卷<code>docker volume rm html</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>docker volume prune</code></td>
<td style="text-align:left">删除所有未使用的数据卷。</td>
</tr>
</tbody>
</table>
<p>假设要将<code>html</code>数据卷挂载到<code>nginx</code>上，可以这样使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name nginx-test <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v html:/usr/share/nginx/html <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 8080:80 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    nginx
</span></span></code></pre></div><blockquote>
<p>注：如果创建容器时发现<code>/usr/share/nginx</code>目录不存在，可以使用<code>Dockerfile</code>先行创建目录。</p>
</blockquote>
<p>例如创建一个MySQL容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -id --name %name% <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 3306:3306 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/docker/mysql/lib:/var/lib/mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/docker/mysql/conf.d:/etc/mysql/conf.d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/docker/mysql/log:/var/log/mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/docker/mysql/my.cnf:/etc/my.cnf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">TZ</span><span class="o">=</span>Asia/Shanghai <span class="se">\ </span>          <span class="c1"># 设置环境变量</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span><span class="m">123456</span> <span class="se">\ </span><span class="c1"># 某些容器创建时是通过环境变量来配置</span>
</span></span><span class="line"><span class="cl">    mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --character-set-server<span class="o">=</span>utf8mb4 <span class="se">\ </span>       <span class="c1"># 这些是mysql命令的参数，与Docker无关</span>
</span></span><span class="line"><span class="cl">    --collation-server<span class="o">=</span>utf8mb4_general_ci
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Docker 镜像操作</title>
      <link>/docs/docker/images-options/</link>
      <pubDate>Tue, 01 Aug 2023 14:22:10 +0000</pubDate>
      
      <guid>/docs/docker/images-options/</guid>
      <description><![CDATA[拉取镜像 在使用容器前，需要先获取相对应的镜像。例如要在Docker中安装MySQL 5.7，需要先获取MySQL 5.7的Docker镜像。相应]]></description>
      <content:encoded><![CDATA[<h1 id="拉取镜像" data-numberify>拉取镜像<a class="anchor ms-1" href="#拉取镜像"></a></h1>
<p>在使用容器前，需要先获取相对应的镜像。例如要在Docker中安装MySQL 5.7，需要先获取MySQL 5.7的Docker镜像。相应的命令为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker pull mysql:5.7
</span></span></code></pre></div><p>命令的本质意思为，从Docker镜像仓库中获取版本为5.7的MySQL镜像。</p>
<p>在Docker中镜像的标识由两部分组成：</p>
<ul>
<li>
<p><strong>Repository</strong>：通常是由镜像主要运行的软件名称组成。例如Tomcat的镜像的Repository就是<code>tomcat</code>。</p>
</li>
<li>
<p><strong>Tag</strong>：通常代表镜像的版本。在没有显式指定Tag的情况下，Docker会给Tag一个默认值<code>latest</code>，代表当前镜像的最新版本。</p>
<p>例如拉取MySQL最新版本的镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker pull mysql
</span></span></code></pre></div><blockquote>
<p>在Docker中，没有指定Tag的情况下，都是指使用<code>latest</code>。</p>
</blockquote>
</li>
</ul>
<p>每个<code>[repository]:[tag]</code>标识了唯一的一个镜像。</p>
<p>镜像除了<code>[repository]:[tag]</code>这个标识外，还有一个镜像ID（Image ID）。但通常使用镜像时都是使用<code>[repository]:[tag]</code>这个标识。</p>
<h1 id="查找镜像" data-numberify>查找镜像<a class="anchor ms-1" href="#查找镜像"></a></h1>
<p>在我们不知道要使用的镜像的具体名称时，除了可以去<a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">Docker Hub<i class="fas fa-external-link-square-alt ms-1"></i></a>上查找外，还可以通过使用<code>docker search</code>命令搜索。例如搜索<code>nginx</code>相关的镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker search nginx
</span></span></code></pre></div><p>这个命令会将镜像仓库中包含<code>nginx</code>字符的镜像一一列举出来。</p>
<p><code>docker search</code>查找的是镜像仓库上的镜像。如果要查看本地镜像，可以使用<code>docker images</code>命令。<code>docker images</code>命令会列出你本地上所有的镜像，并且列出镜像的<code>REPOSITORY</code>、<code>TAG</code>、<code>IMAGE ID</code>等信息。</p>
<h1 id="删除镜像" data-numberify>删除镜像<a class="anchor ms-1" href="#删除镜像"></a></h1>
<p>拉取到本地或者自己创建的镜像，可以使用<code>docker rmi</code>命令来删除。例如删除<code>mysql:5.7</code>镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker rmi mysql:5.7
</span></span></code></pre></div><h1 id="镜像的保存和载入" data-numberify>镜像的保存和载入<a class="anchor ms-1" href="#镜像的保存和载入"></a></h1>
<p>创建在Docker中的镜像，默认情况下是不能移动的。但是可以通过使用<code>docker save</code>命令将镜像导出到磁盘中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker save -o <span class="o">[</span>保存的目标文件路径名称<span class="o">]</span> <span class="o">[</span>镜像名称<span class="o">]</span>
</span></span></code></pre></div><p>例如导出<code>mysql:latest</code>到磁盘：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker save -o mysql_latest.tar mysql:latest
</span></span></code></pre></div><blockquote>
<p>导出的镜像是一个<code>tar</code>（压缩）包。</p>
</blockquote>
<p>将导出的镜像载入Docker可以使用<code>docker load</code>命令：</p>
<pre tabindex="0"><code class="language-shel" data-lang="shel">docker load -i [镜像tar包名]
</code></pre><p>例如将导出的<code>mysql_latest.tar</code>导入Docker：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker load -i mysql_latest.tar
</span></span></code></pre></div><blockquote>
<p>注：在使用tar包导入镜像时，Docker会在tar包中读取镜像的Repository和Tag等信息。由于<code>[repository]:[tag]</code>标识唯一的一个镜像。所以在导入<code>mysql_latest.tar</code>之前需要先在Docker中删掉<code>mysql:latest</code>镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker rmi mysql
</span></span></code></pre></div></blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Docker Hub</title>
      <link>/docs/docker/docker-hub/</link>
      <pubDate>Tue, 01 Aug 2023 14:20:26 +0000</pubDate>
      
      <guid>/docs/docker/docker-hub/</guid>
      <description><![CDATA[DockerHub是一个官方的Docker镜像的托管平台，里面存放了人们配置好的镜像。这样的平台称为Docker Registry。 国内也有这]]></description>
      <content:encoded><![CDATA[<p>DockerHub是一个官方的Docker镜像的托管平台，里面存放了人们配置好的镜像。这样的平台称为Docker Registry。</p>
<p>国内也有这样的Docker仓库，它们被称为Docker的镜像仓库或镜像源。这些镜像源都是与Docker官方仓库同步的。</p>
<p>例如导入腾讯的镜像源：</p>
<ol>
<li>
<p>修改<code>/etc/docker/daemon.json</code>配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vim /etc/docker/daemon.json
</span></span></code></pre></div></li>
<li>
<p>添加以下内容，并保存：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;registry-mirrors&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;https://mirror.ccs.tencentyun.com&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p>重启Docker：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo systemctl restart docker
</span></span></code></pre></div></li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Docker 简介</title>
      <link>/docs/docker/introduction/</link>
      <pubDate>Tue, 01 Aug 2023 14:17:20 +0000</pubDate>
      
      <guid>/docs/docker/introduction/</guid>
      <description><![CDATA[分布式系统的部署问题 大多数Web服务都是运行在Linux系统之上，因为Linux开源、免费、安全、稳定等等。Linux计算机的架构大致如图：]]></description>
      <content:encoded><![CDATA[<h1 id="分布式系统的部署问题" data-numberify>分布式系统的部署问题<a class="anchor ms-1" href="#分布式系统的部署问题"></a></h1>
<p>大多数Web服务都是运行在Linux系统之上，因为Linux开源、免费、安全、稳定等等。Linux计算机的架构大致如图：</p>
<p><picture><img class="img-fluid " alt="Linux计算机架构" src="/docs/docker/introduction/image-20210731144820638.png" loading="lazy" width="2350" height="1314" />
</picture>

</p>
<ul>
<li>计算机硬件：例如CPU、内存、磁盘等。</li>
<li>系统内核：所有Linux发行版的内核都是Linux。内核可以与计算机硬件交互，对外提供内核指令，用于操作计算机硬件。</li>
<li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使系统用起来更加方便。</li>
</ul>
<p>应用与Linux计算机交互过程大致为：</p>
<ol>
<li>应用调用操作系统应用（函数库），实现各种功能。</li>
<li>系统函数库是对内核指令集的封装，会调用内核指令。</li>
<li>内核指令操作计算机硬件。</li>
</ol>
<p>Linux的发行版有很多很多，例如Debain、Ubuntu、CentOS等等。虽然这些都是属于Linxu系统（基于Linux内核），但是它们的操作系统不同，可能会导致软件无法从一个Linux系统移植到另一个Linux系统上。例如，在Ubuntu上运行的软件不一定能移植到CentOS上。</p>
<p>在系统内核相同的情况下，一个应用无法从一个系统移植到另一个系统运行的原因是：不同操作系统提供的系统应用有所不同，那么相应的函数库也会有所差异。软件移植到另外一个系统，由于某些函数库不匹配或不存在，导致软件无法运行。</p>
<p>并且在使用微服务这种分布式架构中，服务是部署在多台服务器上的，每个服务都有它自己依赖的组件和环境等，而它们运行的环境不一定一致，就容易出现各种问题。例如服务部署时所需的函数库、依赖各不相同，有时还会出现冲突。这些都给部署造成很大的麻烦。</p>
<hr>
<h1 id="docker-简介" data-numberify>Docker 简介<a class="anchor ms-1" href="#docker-简介"></a></h1>
<p>Docker就是用来解决这些部署时产生的问题。</p>
<p>Docker是一款运行在Linux上的软件，它使用的是Linux内核来分隔进程，让各进程能相互独立运行。并且通过这种独立性，封装成一个个独立的容器。每个容器可以当作是一个独立的运行环境。Docker还提供了基于镜像的部署模式，可以将容器打包成镜像，或者通过镜像创建容器。在Docker中的两个基本概念：</p>
<ul>
<li>
<p><strong>镜像</strong>（<strong>Image</strong>）：Docker将应用程序及其所需的Libs（函数库）、Deps（依赖）、配置等文件（包括应用）打包在一起，称为<strong>镜像</strong>。这个镜像包含了应用运行所需的完整环境配置。</p>
<p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。<strong>镜像</strong>就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p>
</li>
<li>
<p><strong>容器</strong>（<strong>Container</strong>）：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>。Docker会给容器进程做隔离，对外不可见，避免应用之间互相打扰，防止不同依赖之间的冲突。</p>
<p><strong>容器</strong>就是将这些文件中编写的程序、函数加载到内存中运行，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p>
<blockquote>
<p>Docker容器就像是使用镜像安装完成的、可以运行的操作系统。当然Docker容器跟操作系统也并不一样，但是使用起来差别不大。</p>
</blockquote>
</li>
</ul>
<p>Docker和虚拟机的差别如下：</p>
<ul>
<li>虚拟机（Virtual Machine）：在操作系统中模拟硬件设备，然后运行另一个操作系统。</li>
<li>Docker：仅仅是封装函数库，并没有模拟完整的操作系统。</li>
</ul>
<p><picture><img class="img-fluid " alt="Docker和虚拟机的架构" src="/docs/docker/introduction/image-20210731145914960.png" loading="lazy" width="2246" height="1292" />
</picture>

</p>
<table>
<thead>
<tr>
<th style="text-align:center">特性</th>
<th style="text-align:center">Docker</th>
<th style="text-align:center">虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">性能</td>
<td style="text-align:center">接近原生</td>
<td style="text-align:center">性能较差</td>
</tr>
<tr>
<td style="text-align:center">硬盘占用</td>
<td style="text-align:center">较小，一般为MB</td>
<td style="text-align:center">较大，一般为GB</td>
</tr>
<tr>
<td style="text-align:center">启动</td>
<td style="text-align:center">较快，一般为秒级</td>
<td style="text-align:center">较慢，一般为分钟级</td>
</tr>
</tbody>
</table>
<p>Docker是一个CS架构的程序，由两部分组成：</p>
<ul>
<li><strong>服务端</strong>（<strong>Server</strong>）：Docker守护进程，负责处理Docker指令，管理镜像、容器等。</li>
<li><strong>客户端</strong>（<strong>Client</strong>）：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</li>
<li><strong>仓库</strong>（<strong>Repository</strong>）：仓库可看成一个代码控制中心，用来保存镜像。</li>
</ul>
<p>其架构如图所示：</p>
<p><picture><img class="img-fluid " alt="Docker程序架构" src="/docs/docker/introduction/image-20210731154257653.png" loading="lazy" width="2634" height="1070" />
</picture>

</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>API 测试工具</title>
      <link>/docs/spring/springmvc/api-tools/</link>
      <pubDate>Thu, 27 Jul 2023 13:29:13 +0000</pubDate>
      
      <guid>/docs/spring/springmvc/api-tools/</guid>
      <description><![CDATA[Postman Apifox（作者也在用） Apifox和Postman差不多，但是比Postman更易用。界面美观、支持中文。而且设置接口参数也很方便，还]]></description>
      <content:encoded><![CDATA[<h1 id="postman" data-numberify>Postman<a class="anchor ms-1" href="#postman"></a></h1>
<p><a href="https://www.postman.com/" target="_blank" rel="noopener noreferrer"><picture><img class="img-fluid " alt="Postman" src="/docs/spring/springmvc/api-tools/96bff51802e8a43c.png" loading="lazy" width="1800" height="1095" />
</picture>

<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<h1 id="apifox作者也在用" data-numberify>Apifox（作者也在用）<a class="anchor ms-1" href="#apifox作者也在用"></a></h1>
<p><a href="https://apifox.com/" target="_blank" rel="noopener noreferrer"><picture><img class="img-fluid " alt="Apifox" src="/docs/spring/springmvc/api-tools/dark-purple.png" loading="lazy" width="2600" height="1646" />
</picture>

<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<blockquote>
<p>Apifox和Postman差不多，但是比Postman更易用。界面美观、支持中文。而且设置接口参数也很方便，还能自动生成随机的参数。支持将接口导出为HTML、Markdown、PDF等格式。在编写API测试时，还能用它来编写Markdown文档来进一步说明。</p>
<p>支持多种导入方式：</p>
<p><picture><img class="img-fluid " alt="Apifox数据导入方式" src="/docs/spring/springmvc/api-tools/uTools_1690465592640.png" loading="lazy" width="1255" height="210" />
</picture>

</p>
<p>缺点就是每次开机第一次打开Apifox都需要等待一段时间的加载（也有可能是我机械硬盘太慢了）。</p>
</blockquote>
<h1 id="swaggerknife4j" data-numberify>Swagger（Knife4j）<a class="anchor ms-1" href="#swaggerknife4j"></a></h1>
<p>Swagger是一款用于Java的API文档自动生成的框架。</p>
<p>Knife4j是Swagger的增强UI实现。并且Swagger和Knife4j可以无缝切换。</p>
<p>Knife4j（Swagger）的Maven依赖坐标如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.github.xiaoymin<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>knife4j-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.0.2<span class="nt">&lt;/version&gt;</span> <span class="c">&lt;!-- 版本号 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div>]]></content:encoded>
    <enclosure url="/images/dark-purple.png" length="285763" type="image/.png" />
    </item>
    
    <item>
      <title>Nacos 部署</title>
      <link>/docs/spring/springcloud/nacos-deploy/</link>
      <pubDate>Mon, 24 Jul 2023 02:58:36 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/nacos-deploy/</guid>
      <description><![CDATA[本地部署 Nacos是一个开源项目，已经在Github上开源。在本地搭建Nacos需要访问Nacos项目仓库，你可以选择将该项目clone到本]]></description>
      <content:encoded><![CDATA[<h1 id="本地部署" data-numberify>本地部署<a class="anchor ms-1" href="#本地部署"></a></h1>
<p>Nacos是一个开源项目，已经在Github上开源。在本地搭建Nacos需要访问<a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener noreferrer">Nacos项目仓库<i class="fas fa-external-link-square-alt ms-1"></i></a>，你可以选择将该项目<code>clone</code>到本地自己打包后部署，也可以选择直接访问<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener noreferrer">Nacos的Releases页面<i class="fas fa-external-link-square-alt ms-1"></i></a>下载已经打包好的项目压缩文件进行部署。你也可以访问<a href="https://nacos.io/zh-cn/" target="_blank" rel="noopener noreferrer">Nacos官网<i class="fas fa-external-link-square-alt ms-1"></i></a>查看如何部署。</p>
<ul>
<li>
<p><code>clone</code>到本地：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git clone https://github.com/alibaba/nacos
</span></span></code></pre></div></li>
<li>
<p>访问<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener noreferrer">Nacos的Releases页面<i class="fas fa-external-link-square-alt ms-1"></i></a>：</p>
<p><picture><img class="img-fluid " alt="Nacos的Releases页面" src="/docs/spring/springcloud/nacos-deploy/uTools_1690139609912.png" loading="lazy" width="1715" height="946" />
</picture>

</p>
<p>选择自己想要的版本（如<code>2.2.3</code>）进行下载：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springcloud/nacos-deploy/uTools_1690139697680.png" loading="lazy" width="1021" height="252" />
</picture>

</p>
<p>无论是选择下载<code>.zip</code>还是<code>.tar.gz</code>后缀的压缩包都可以。但是在Linux环境下选择下载<code>.tar.gz</code>为佳。</p>
<p>Linux中解压<code>.tar.gz</code>的命令如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">tar -zxvf 压缩包文件名.tar.gz
</span></span></code></pre></div></li>
</ul>
<p>将下载好的压缩包解压到任意非中文目录下。解压好的目录结构大致如下：</p>
<p><picture><img class="img-fluid " alt="Nacos目录结构" src="/docs/spring/springcloud/nacos-deploy/uTools_1690140191883.png" loading="lazy" width="116" height="198" />
</picture>

</p>
<ul>
<li>
<p><code>target</code>：存放Nacos<code>jar</code>包的目录。</p>
</li>
<li>
<p><code>logs</code>：存放日志文件。</p>
</li>
<li>
<p><code>conf</code>：存放项目的配置文件（如<code>application.properties</code>等）以及搭建存放Nacos配置信息的数据库的<code>.sql</code>脚本文件（如<code>nacos-mysql.sql</code>等）。</p>
</li>
<li>
<p><code>bin</code>：存放启动和关闭Nacos Server的脚本文件以及一些其它的文件。</p>
<p>在Windows系统中启动和关闭Nacos使用的是<code>.cmd</code>文件，即<code>startup.cmd</code>和<code>shutdown.cmd</code>，分别对应启动和关闭。在Linux系统中使用的是<code>.sh</code>文件，<code>startup.sh</code>启动，<code>shutdown.sh</code>关闭。</p>
<p>使用<code>startup.cmd</code>或<code>startup.sh</code>默认为集群模式，可以添加参数<code>-m standalone</code>使用单机模式启动。</p>
<p>Windows系统：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl"><span class="k">cd</span> Nacos的路径\bin
</span></span><span class="line"><span class="cl">.\startup.cmd -m standalone
</span></span></code></pre></div><p>Linux系统：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">cd</span> Nacos的路径/bin
</span></span><span class="line"><span class="cl">./startup.sh -m standalone
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>在Windows系统和Linux系统上进行本地简单地部署Nacos并没有区别，这里不再分别进行赘述。</p>
</blockquote>
<p>访问<a href="http://localhsot:8848/nacos" target="_blank" rel="noopener noreferrer">http://localhsot:8848/nacos<i class="fas fa-external-link-square-alt ms-1"></i></a>即可。默认的用户名和密码均为<code>nacos</code>。</p>
<p>启动成功后的Nacos大概长这样子：</p>
<p><picture><img class="img-fluid " alt="Nacos 页面" src="/docs/spring/springcloud/nacos-deploy/uTools_1690143487422.png" loading="lazy" width="1919" height="682" />
</picture>

</p>
<hr>
<h1 id="基于-mysql-数据库部署" data-numberify>基于 MySQL 数据库部署<a class="anchor ms-1" href="#基于-mysql-数据库部署"></a></h1>
<p>Nacos可以使用MySQL数据库存放配置信息。首先需要确保你的电脑上有MySQL。</p>
<blockquote>
<p>注意：使用MySQL搭建Nacos的数据库，推荐使用MySQL 5，因为Nacos的MySQL驱动版本可以不支持MySQL 8。如果非要使用MySQL 8，可以在Nacos中升级MySQL的驱动。</p>
</blockquote>
<p>首先在MySQL中新建一个数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="n">nacos</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">USE</span><span class="w"> </span><span class="n">nacos</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">source</span><span class="w"> </span><span class="s2">&#34;Nacos的路径/bin/mysql-schema.sql&#34;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>创建成功后的Nacos数据库如下：</p>
<p><picture><img class="img-fluid " alt="Nacos数据库的表" src="/docs/spring/springcloud/nacos-deploy/uTools_1690142171755.png" loading="lazy" width="184" height="290" />
</picture>

</p>
<p>接着修改在<code>conf</code>目录里的<code>application.properties</code>文件（如果没有，就将<code>application.properties.example</code>文件复制一份，改名为<code>application.properties</code>）。需要修改的配置如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1"># 数据源</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.platform</span><span class="o">=</span><span class="s">mysql</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库数量</span>
</span></span><span class="line"><span class="cl"><span class="na">db.num</span><span class="o">=</span><span class="s">1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 连接第1个数据库的url（替换成自己的）</span>
</span></span><span class="line"><span class="cl"><span class="na">db.url.0</span><span class="o">=</span><span class="s">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 连接第1个数据库的用户和密码（替换成自己的）</span>
</span></span><span class="line"><span class="cl"><span class="na">db.user.0</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">db.password.0</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库驱动（如果其它配置正确，但无法启动时，修改该配置）</span>
</span></span><span class="line"><span class="cl"><span class="c1"># db.driver-class-name=com.mysql.cj.jdbc.Driver</span>
</span></span></code></pre></div><p>接下来重启Nacos即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">./shutdown.sh <span class="c1"># 也可以直接 CTRL+C 结束</span>
</span></span><span class="line"><span class="cl">./startup.sh -m standalone
</span></span></code></pre></div><hr>
<h1 id="部署-nacos-集群" data-numberify>部署 Nacos 集群<a class="anchor ms-1" href="#部署-nacos-集群"></a></h1>
<p>在本地部署Nacos集群首先将Nacos整个应用目录复制，要在集群中部署几个Nacos就复制几份。接着再分别修改它们的配置文件<code>application.properties</code>。</p>
<p>例如要部署两个Nacos，做负载均衡：</p>
<p>第一个Nacos的配置文件可以如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1"># 服务端口</span>
</span></span><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">8841</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库配置</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.platform</span><span class="o">=</span><span class="s">mysql</span>
</span></span><span class="line"><span class="cl"><span class="na">db.num</span><span class="o">=</span><span class="s">1</span>
</span></span><span class="line"><span class="cl"><span class="na">db.url.0</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span>
</span></span><span class="line"><span class="cl"><span class="na">db.user.0</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">db.password.0</span><span class="o">=</span><span class="s">root</span>
</span></span></code></pre></div><p>第二个Nacos的配置文件可以如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1"># 服务端口</span>
</span></span><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">8842</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库配置</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.platform</span><span class="o">=</span><span class="s">mysql</span>
</span></span><span class="line"><span class="cl"><span class="na">db.num</span><span class="o">=</span><span class="s">1</span>
</span></span><span class="line"><span class="cl"><span class="na">db.url.0</span><span class="o">=</span><span class="s">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span>
</span></span><span class="line"><span class="cl"><span class="na">db.user.0</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">db.password.0</span><span class="o">=</span><span class="s">root</span>
</span></span></code></pre></div><blockquote>
<p>因为是部署在本地（即一台机器上），所以两个Nacos的端口不能相同（否则会发生冲突）。</p>
</blockquote>
<p>接着使用<code>startup.cmd</code>或<code>startup.sh</code>分别启动这两个Nacos（这里要使用集群模式启动，Nacos默认使用集群模式启动，所以不能加上<code>-m standalone</code>参数）。</p>
<p>此时分别访问这两个服务（例如使用<a href="http://localhost:8841/nacos" target="_blank" rel="noopener noreferrer">http://localhost:8841/nacos<i class="fas fa-external-link-square-alt ms-1"></i></a>和<a href="http://localhost:8842/nacos" target="_blank" rel="noopener noreferrer">http://localhost:8842/nacos<i class="fas fa-external-link-square-alt ms-1"></i></a>访问），都能正常使用。</p>
<p>最后需要给这个Nacos集群加个路由（例如使用Nginx）。Nginx的配置如下：</p>
<pre tabindex="0"><code># Nacos 集群
upstream nacos-cluster {
    server nacos-cluster-test-1:8848;
    server nacos-cluster-test-2:8848;
}

# Nacos 服务
server {
    listen 8849;

    server_name localhost;

    location /nacos {
        proxy_pass http://nacos-cluster;
    }
}
</code></pre><p>添加完配置后重启Nginx即可，这里不做赘述。</p>
<p>配置完后访问<a href="http://localhsot:8848/nacos" target="_blank" rel="noopener noreferrer">http://localhsot:8849/nacos<i class="fas fa-external-link-square-alt ms-1"></i></a>即可。</p>
<hr>
<h1 id="基于-docker-部署" data-numberify>基于 Docker 部署<a class="anchor ms-1" href="#基于-docker-部署"></a></h1>
<p>使用Docker部署，首先需要下载Nacos的镜像。Nacos官方提供了对应的镜像<code>nacos/nacos-server</code>。使用下方命令下载该容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker pull nacos/nacos-server
</span></span></code></pre></div><blockquote>
<p>上方的命令拉取（下载）的是版本为<code>latest</code>。要拉取对应版本的镜像，可以查看Docker官方提供的网站<a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">hub.docker.com<i class="fas fa-external-link-square-alt ms-1"></i></a>，在其中搜索<code>nacos-server</code>并点击<code>tags</code>查找对应的版本（<a href="https://hub.docker.com/r/nacos/nacos-server/tags" target="_blank" rel="noopener noreferrer">点击快速查找Nacos Server版本<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p>例如拉取<code>v1.4.6</code>版本的<code>nacos/nacos-server</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker pull nacos/nacos-server:v1.4.6
</span></span></code></pre></div></blockquote>
<p><code>nacos/nacos-server</code>拉取完成后就可以创建对应容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name nacos-server <span class="se">\ </span><span class="c1"># 容器名称</span>
</span></span><span class="line"><span class="cl">    -p 8848:8848 <span class="se">\ </span><span class="c1"># 端口映射，分号左边为本地端口，分号右边为容器的内部端口</span>
</span></span><span class="line"><span class="cl">    --privileged<span class="o">=</span><span class="nb">true</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">MODE</span><span class="o">=</span>standalone <span class="se">\ </span><span class="c1"># 指定为单机模式（使用Docker创建的Docker容器默认也为集群模式，所以需要指定单机模式）</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">PREFER_HOST_MODE</span><span class="o">=</span>hostname <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/nacos/nacos-server/logs:/home/nacos/logs <span class="se">\ </span><span class="c1"># 文件挂载，分号左边为本地目录，分号右边为容器内部的目录，这里是进行日志文件目录映射</span>
</span></span><span class="line"><span class="cl">    -v /home/nacos/nacos-server/conf/:/home/nacos/conf/ <span class="se">\ </span><span class="c1"># 配置文件映射</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">JVM_XMS</span><span class="o">=</span>256m -e <span class="nv">JVM_XMX</span><span class="o">=</span>256m <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    nacos/nacos-server <span class="se">\ </span><span class="c1"># 创建容器所使用的镜像</span>
</span></span><span class="line"><span class="cl">    /usr/sbin/init
</span></span></code></pre></div><p>访问<a href="http://localhsot:8848/nacos" target="_blank" rel="noopener noreferrer">http://localhsot:8848/nacos<i class="fas fa-external-link-square-alt ms-1"></i></a>即可。默认的用户名和密码均为<code>nacos</code>。</p>
<p>如果是在Windows中使用Docker Desktop部署，目录映射的路径应该这样写：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl">docker run -d \
</span></span><span class="line"><span class="cl">    --name nacos-server \
</span></span><span class="line"><span class="cl">    -p 8848:8848 \
</span></span><span class="line"><span class="cl">    --privileged=true \
</span></span><span class="line"><span class="cl">    -e MODE=standalone \
</span></span><span class="line"><span class="cl">    -e PREFER_HOST_MODE=hostname \
</span></span><span class="line"><span class="cl">    -v /d/docker-volume/nacos/nacos-server/logs:/home/nacos/logs \
</span></span><span class="line"><span class="cl">    -v /d/docker-volume/nacos/nacos-server/conf/:/home/nacos/conf/ \
</span></span><span class="line"><span class="cl">    -e JVM_XMS=256m -e JVM_XMX=256m \
</span></span><span class="line"><span class="cl">    nacos/nacos-server \
</span></span><span class="line"><span class="cl">    /usr/sbin/init
</span></span></code></pre></div><hr>
<h1 id="基于-docker-使用-mysql-部署" data-numberify>基于 Docker 使用 MySQL 部署<a class="anchor ms-1" href="#基于-docker-使用-mysql-部署"></a></h1>
<p>根据如上方法创建Nacos容器，然后修改映射到本地的配置文件。例如修改<code>/home/nacos/nacos-server/conf</code>下的<code>application.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1"># 数据库配置（根据你的配置环境修改）</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.platform</span><span class="o">=</span><span class="s">mysql</span>
</span></span><span class="line"><span class="cl"><span class="na">db.num</span><span class="o">=</span><span class="s">1</span>
</span></span><span class="line"><span class="cl"><span class="na">db.url.0</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span>
</span></span><span class="line"><span class="cl"><span class="na">db.user.0</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">db.password.0</span><span class="o">=</span><span class="s">root</span>
</span></span></code></pre></div><blockquote>
<p>注：这个MySQL需要使用<code>mysql-schema.sql</code>创建<code>nacos</code>数据库。</p>
</blockquote>
<p>如果MySQL也是使用Docker创建的，可以给Nacos容器和MySQL容器添加一个Docker Network，并将它们都加入这个Network中：</p>
<ol>
<li>
<p>创建Docker Network：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker network create nacos-network
</span></span></code></pre></div></li>
<li>
<p>分别将Nacos容器和MySQL容器加入Docker Network（假设MySQL的容器名为<code>mysql</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker network connect nacos-network nacos-server
</span></span><span class="line"><span class="cl">docker network connect nacos-network mysql
</span></span></code></pre></div></li>
</ol>
<p>之后在加入这个Network的容器中，可以将它们的容器名当作IP地址来使用。所以在<code>nacos-server</code>中可以将<code>db.url</code>修改为如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">db.url.0</span><span class="o">=</span><span class="s">jdbc:mysql://mysql:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span>
</span></span></code></pre></div><p>其实使用Docker部署并使用MySQL数据库还有一个简便的方法（按照上述方法直接修改配置文件可能不生效），可以在创建容器的Docker命令中通过<code>nacos-server</code>提供的环境变量直接指定MySQL服务的配置信息（<code>nacos-server</code>容器在创建时会自动生成对应的配置文件）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name nacos-server <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 8848:8848 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network nacos-network<span class="se">\ </span><span class="c1"># 在创建容器时指定Network</span>
</span></span><span class="line"><span class="cl">    --privileged<span class="o">=</span><span class="nb">true</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">SPRING_DATASOURCE_PLATFORM</span><span class="o">=</span>mysql <span class="se">\ </span><span class="c1"># 指定数据源类型为MySQL</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">MYSQL_SERVICE_HOST</span><span class="o">=</span>mysql <span class="se">\ </span><span class="c1"># MySQL服务器的地址（这里加入了Network所以可以直接使用容器名称来当Host）</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">MYSQL_SERVICE_PORT</span><span class="o">=</span><span class="m">3306</span> <span class="se">\ </span><span class="c1"># MySQL服务端口</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">MYSQL_SERVICE_USER</span><span class="o">=</span>root <span class="se">\ </span><span class="c1"># MySQL用户名</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">MYSQL_SERVICE_PASSWORD</span><span class="o">=</span>root <span class="se">\ </span><span class="c1"># MySQL密码</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">MYSQL_SERVICE_DB_NAME</span><span class="o">=</span>nacos <span class="se">\ </span><span class="c1"># MySQL的数据库名称</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">PREFER_HOST_MODE</span><span class="o">=</span>hostname <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /d/27120/docker-volume/nacos/%name%/logs:/home/nacos/logs <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /d/27120/docker-volume/nacos/%name%/conf/:/home/nacos/conf/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">JVM_XMS</span><span class="o">=</span>256m -e <span class="nv">JVM_XMX</span><span class="o">=</span>256m <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    nacos/nacos-server <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    /usr/sbin/init
</span></span></code></pre></div><blockquote>
<p>使用Docker创建的MySQL容器同样需要创建<code>nacos</code>数据库。可以通过其它文件传输方式传输到容器中（这种方式适用于你有一个已经在运行的MySQL容器）。</p>
<p>在容器中创建数据库可以在本机输入命令（假设<code>mysql-schema.sql</code>导入到了容器的<code>root</code>目录中）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker <span class="nb">exec</span> mysql mysql -uroot -proot -e <span class="s2">&#34;CREATE DATABASE nacos; USE nacos; SOURCE /root/mysql-schema.sql;&#34;</span>
</span></span></code></pre></div><p>上方命令第一个<code>mysql</code>是指容器名称，第二个是指容器中的<code>mysql</code>命令。</p>
<p>或者是在本地使用Docker登录MySQL后进行操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker <span class="nb">exec</span> mysql mysql -uroot -p
</span></span><span class="line"><span class="cl"><span class="c1"># 然后输入你的密码，回车</span>
</span></span><span class="line"><span class="cl">mysql&gt; CREATE DATABASE nacos<span class="p">;</span>
</span></span><span class="line"><span class="cl">mysql&gt; USE nacos<span class="p">;</span>
</span></span><span class="line"><span class="cl">mysql&gt; SOURCE /root/mysql-schema.sql<span class="p">;</span>
</span></span></code></pre></div></blockquote>
<p>推荐使用Dockerfile方式创建一个包含<code>nacos</code>数据库的MySQL容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> mysql:5.7</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">TZ</span><span class="o">=</span>Asia/Shanghai<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span><span class="m">123456</span>
</span></span><span class="line"><span class="cl"><span class="k">ENV</span> <span class="nv">LANG</span><span class="o">=</span>C.UTF-8<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./mysql-schema.sql /docker-entrypoint-initdb.d<span class="err">
</span></span></span></code></pre></div><p>这是利用MySQL镜像的机制。MySQL容器在创建时会自动执行<code>/docker-entrypoint-initdb.d</code>目录下的<code>.sh</code>、<code>.sql</code>等文件。因为Nacos官方提供的<code>mysql-schema.sql</code>中并没有创建数据库和使用数据库的SQL语句，所以在创建容器之前还需要对<code>mysql-schema.sql</code>稍加修改。在<code>mysql-schema.sql</code>里面最上方添加这么两句：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w"> </span><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">nacos</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">USE</span><span class="w"> </span><span class="n">nacos</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>需要注意的是这里的数据库名称要和创建<code>nacos-server</code>时配置的一致。</p>
<p>然后将<code>mysql-schema.sql</code>复制到与Dockerfile同级的目录中（或者你也可以在Dockerfile将<code>mysql-schema.sql</code>的路径修改到你想要的位置）。接着使用<code>docker build</code>命令构建镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker build -f .<span class="se">\D</span>ockerfile . -t linner/mysql-nacos
</span></span></code></pre></div><p>最后使用<code>docker run</code>运行容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -id --name mysql-nacos -p 3306:3306 linner/nacos-mysql
</span></span></code></pre></div><blockquote>
<p>因为一些配置在Dockerfile提前设置过了，所以这条构建MySQL容器的命令十分简洁。</p>
</blockquote>
<hr>
<h1 id="基于-docker-搭建-nacos-集群" data-numberify>基于 Docker 搭建 Nacos 集群<a class="anchor ms-1" href="#基于-docker-搭建-nacos-集群"></a></h1>
<p>基于Docker搭建Nacos集群，首先可以创建一个用于创建集群模式Nacos的脚本<code>create_nacos.sh</code>（使用MySQL）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">name</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl"><span class="nv">port</span><span class="o">=</span><span class="nv">$2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name <span class="nv">$name</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p <span class="nv">$port</span>:8848 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network nacos-network <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --privileged<span class="o">=</span><span class="nb">true</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">SPRING_DATASOURCE_PLATFORM</span><span class="o">=</span>mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">MYSQL_SERVICE_HOST</span><span class="o">=</span>mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">MYSQL_SERVICE_PORT</span><span class="o">=</span><span class="m">3306</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">MYSQL_SERVICE_USER</span><span class="o">=</span>root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">MYSQL_SERVICE_PASSWORD</span><span class="o">=</span><span class="m">123456</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">MYSQL_SERVICE_DB_NAME</span><span class="o">=</span>nacos_config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">PREFER_HOST_MODE</span><span class="o">=</span>hostname <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/nacos/<span class="nv">$name</span>/logs:/home/nacos/logs <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/nacos/<span class="nv">$name</span>/conf/:/home/nacos/conf/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">JVM_XMS</span><span class="o">=</span>256m -e <span class="nv">JVM_XMX</span><span class="o">=</span>256m <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    nacos/nacos-server <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    /usr/sbin/init
</span></span></code></pre></div><p>例如创建两个Nacos容器（在本地创建两个容器，端口不能重复）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">./create_nacos.sh nacos1 <span class="m">8841</span>
</span></span><span class="line"><span class="cl">./create_nacos.sh nacos2 <span class="m">8842</span>
</span></span></code></pre></div><p>接着将它们加入<code>nacos-network</code>后重启（如果这两个Nacos容器没有停止运行的话，可以忽略）：</p>
<pre tabindex="0"><code>docker restart nacos1
docker restart nacos2
</code></pre><p>接着配置Nginx的方法和之前描述的方式类似。如果Nginx是使用Docker创建的，也可以将该Nginx容器加入<code>nacos-network</code>，然后直接使用容器的名称作为Host即可。</p>
<p>最后访问Nginx即可。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Eureka</title>
      <link>/docs/spring/springcloud/eureka/</link>
      <pubDate>Mon, 26 Jun 2023 11:46:12 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/eureka/</guid>
      <description><![CDATA[Eureka 服务注册中心 Eureka架构下将服务分为以下两个角色： 注册中心（Eureka Server，服务端）。 客户端（Eureka Client）。 E]]></description>
      <content:encoded><![CDATA[<h1 id="eureka-服务注册中心" data-numberify>Eureka 服务注册中心<a class="anchor ms-1" href="#eureka-服务注册中心"></a></h1>
<p>Eureka架构下将服务分为以下两个角色：</p>
<ul>
<li>注册中心（Eureka Server，服务端）。</li>
<li>客户端（Eureka Client）。</li>
</ul>
<p>Eureka会将客户端（即服务）的信息进行注册，让客户端可以通过Eureka注册中心获取服务信息并进行调用。</p>
<p><strong>Eureka的作用：</strong></p>
<ul>
<li><strong>注册服务信息</strong>：服务提供者启动时向Eureka注册自己的信息，Eureka保存这些服务信息到服务列表中。</li>
<li><strong>获取服务信息</strong>：服务消费者根据服务名称向Eureka拉取服务列表。</li>
<li><strong>负载均衡</strong>：有多个服务提供者时，服务消费者利用负载均衡算法，从Eureka注册的服务列表中挑选一个服务后发起远程调用。</li>
<li><strong>感知服务健康状态</strong>：
<ul>
<li>服务提供者会每隔30秒向Eureka Server发送心跳请求，报告自己的健康状态。</li>
<li>Eureka会更新记录服务信息列表，心跳不正常的服务会被剔除。</li>
</ul>
</li>
</ul>
<p>在Eureka架构中，角色有以下分工：</p>
<ul>
<li>Eureka Server：记录服务信息；进行心跳监控，剔除心跳不正常的服务。</li>
<li>Eureka Client：
<ul>
<li>Provider：注册自己的信息到Eureka Server；每隔30秒向Eureka Server发送心跳。</li>
<li>Consumer：根据服务名称从Eureka Server拉取服务列表；基于服务列表做负载均衡，选中一个服务后发起远程调用。</li>
</ul>
</li>
</ul>
<h2 id="eureka-示例" data-numberify>Eureka 示例<a class="anchor ms-1" href="#eureka-示例"></a></h2>
<p>依照上例，订单服务在获取订单信息时需要从用户服务中获取用户信息并一同发送：</p>
<ol>
<li>
<p>首先需要创建一个新的Maven模块来运行Eureka Server。</p>
<ul>
<li>
<p>Eureka Server的<code>pom.xml</code>如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>asia.linner.demo<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>cloud-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/parent&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>eureka-server<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;maven.compiler.source&gt;</span>8<span class="nt">&lt;/maven.compiler.source&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;maven.compiler.target&gt;</span>8<span class="nt">&lt;/maven.compiler.target&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--Eureka服务端--&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>其中最主要的就是导入<code>eureka-server</code>起步依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--Eureka服务端--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在Eureka中，服务端和客户端有不同的依赖，服务端的起步依赖就是<code>spring-cloud-starter-netflix-eureka-server</code>。</p>
</li>
</ul>
</li>
<li>
<p>编写<code>EurekaApplication</code>启动类，并在启动类上使用<code>@EnableEurekaServer</code>注解装配EurekaServer：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableEurekaServer</span>     <span class="c1">// EurekaServer开关，自动装配EurekaServer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EurekaApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">EurekaApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>eureka-server</code>中，添加<code>application.yml</code>并加入以下配置信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 服务端口（视具体情况进行更改）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8180</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 服务名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">eureka-server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">eureka</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">client</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">service-url</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Eureka的地址信息（如果有多个，则用逗号”,“隔开）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">defaultZone</span><span class="p">:</span><span class="w"> </span><span class="l">http://localhost:8180/eureka</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>分别在<code>order-service</code>和<code>user-service</code>中添加Eureka客户端依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Eureka客户端 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>分别在Eureka客户端的<code>application.yml</code>中添加如下配置信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">eureka</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 配置eureka-server的信息</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">client</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">service-url</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># defaultZone要与eureka-server中的defaultZone相同</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">defaultZone</span><span class="p">:</span><span class="w"> </span><span class="l">http://localhost:8180/eureka</span><span class="w">
</span></span></span></code></pre></div><p>分别在Eureka客户端的<code>application.yml</code>中添加服务名称（<code>spring.application.name</code>），如<code>order-service</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 服务名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">order-service</span><span class="w">
</span></span></span></code></pre></div><p>Eureka Server利用<code>spring.application.name</code>来找到对应模块的信息，并返回。利用<code>spring.application.name</code>也可以做负载均衡。</p>
<blockquote>
<p>由于所有模块都可能作为服务提供者被其他服务调用，所以项目中所有服务模块都应该在Eureka Server中进行注册。</p>
</blockquote>
</li>
<li>
<p>在服务消费者中，需要在注册<code>RestTemplate</code>的方法上使用注解<code>@LoadBalanced</code>来开启Eureka的负载均衡。</p>
<p>如<code>order-service</code>中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="nd">@LoadBalanced</span>   <span class="c1">// 开启Eureka负载均衡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="n">RestTemplate</span> <span class="nf">restTemplate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">RestTemplate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>服务消费者通过Eureka，使用<code>RestTemplate</code>调用其他模块。</p>
<p>如<code>order-service</code>调用<code>user-service</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">OrderMapper</span> <span class="n">orderMapper</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 注入RestTemplate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RestTemplate</span> <span class="n">restTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Order</span> <span class="nf">queryOrderById</span><span class="o">(</span><span class="n">Long</span> <span class="n">orderId</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1.查询订单
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">orderMapper</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">orderId</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2.利用RestTemplate发起HTTP请求，查询用户信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 2.1.URL路径（将服务的IP改为服务的名称）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;http://user-service/user/&#34;</span> <span class="o">+</span> <span class="n">order</span><span class="o">.</span><span class="na">getUserId</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2.2.发送HTTP（GET）请求，实现远程调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForObject</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 3.封装User到Order
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">order</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 4.返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">order</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这里面最主要的是，配置了Eureka后，使用<code>RestTemplate</code>调用其他模块时，URL中的IP可以改为服务提供者（被调模块）的服务名称，并且可以自动做负载均衡。即，原本是使用<code>localhost:8081</code>这个IP端口来调用<code>user-service</code>，但是现在可以直接使用<code>http://user-service</code>来调用<code>user-service</code>提供的接口。</p>
</li>
</ol>
<h2 id="eureka-服务注册配置总结" data-numberify>Eureka 服务注册配置总结<a class="anchor ms-1" href="#eureka-服务注册配置总结"></a></h2>
<p>按照角色配置Eureka，至少需要做如下配置：</p>
<ul>
<li>
<p>Eureka Server：</p>
<p>依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--Eureka服务端--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>配置（<code>application.yml</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Eureka服务端口（视具体情况进行更改）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8180</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 服务名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">eureka-server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">eureka</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">client</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">service-url</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Eureka的地址信息（如果有多个，则用逗号”,“隔开）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">defaultZone</span><span class="p">:</span><span class="w"> </span><span class="l">http://localhost:8180/eureka</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>Eureka Client：</p>
<p>依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Eureka客户端 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>配置（<code>application.yml</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 服务名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">clinet-1-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">eureka</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">client</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">service-url</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># defaultZone要与eureka-server中的defaultZone相同</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">defaultZone</span><span class="p">:</span><span class="w"> </span><span class="l">http://localhost:8180/eureka</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>服务消费者：</p>
<p>开启负载均衡：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="nd">@LoadBalanced</span>   <span class="c1">// 开启Eureka负载均衡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="n">RestTemplate</span> <span class="nf">restTemplate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">RestTemplate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用<code>RestTemplate</code>调用其他服务时，URL中的IP可以改为服务提供者（被调模块）的服务名称。</p>
</li>
</ul>
<hr>
<h1 id="idea-配置模块的多个实例" data-numberify>Idea 配置模块的多个实例<a class="anchor ms-1" href="#idea-配置模块的多个实例"></a></h1>
<ol>
<li>
<p>复制现有的配置：</p>
<p><picture><img class="img-fluid " alt="复制现有的配置" src="/docs/spring/springcloud/eureka/uTools_1687857604691.png" loading="lazy" width="491" height="267" />
</picture>

</p>
</li>
<li>
<p>使用VM Options修改端口，避免与原有的模块产生端口冲突：</p>
<p><picture><img class="img-fluid " alt="修改端口" src="/docs/spring/springcloud/eureka/uTools_1687857691207.png" loading="lazy" width="557" height="317" />
</picture>

</p>
</li>
</ol>
<hr>
<h1 id="ribbon-负载均衡" data-numberify>Ribbon 负载均衡<a class="anchor ms-1" href="#ribbon-负载均衡"></a></h1>
<p>Ribbon是一款负载均衡组件，而Eureka的负载均衡则是基于Ribbon实现的。如上例（<code>order-service</code>）中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="nd">@LoadBalanced</span>   <span class="c1">// 开启Eureka负载均衡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="n">RestTemplate</span> <span class="nf">restTemplate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">RestTemplate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="负载均衡流程" data-numberify>负载均衡流程<a class="anchor ms-1" href="#负载均衡流程"></a></h2>
<p>Eureka中使用注解<code>@LoadBalanced</code>标识<code>RestTemplate</code>，从而实现拦截<code>RestTemplate</code>发起的请求，并获取相应的服务信息和执行负载均衡策略。</p>
<p><code>@LoadBalanced</code>注解使用<code>LoadBalancerInterceptor</code>来执行请求的拦截。<code>LoadBalancerInterceptor</code>实现了<code>ClientHttpRequestInterceptor</code>接口。而<code>ClientHttpRequestInterceptor</code>接口主要用于拦截客户端HTTP请求。</p>
<p><code>ClientHttpRequestInterceptor</code>接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@FunctionalInterface</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ClientHttpRequestInterceptor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">ClientHttpResponse</span> <span class="nf">intercept</span><span class="o">(</span><span class="n">HttpRequest</span> <span class="n">request</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">body</span><span class="o">,</span> <span class="n">ClientHttpRequestExecution</span> <span class="n">execution</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>拦截流程：</p>
<ol>
<li>
<p>使用<code>RestTemplate</code>发送请求时，Eureka会使用<code>LoadBalancerInterceptor</code>的<code>intercept()</code>来执行拦截：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoadBalancerInterceptor</span> <span class="kd">implements</span> <span class="n">ClientHttpRequestInterceptor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">LoadBalancerClient</span> <span class="n">loadBalancer</span><span class="o">;</span>    <span class="c1">// 负载均衡客户端
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ClientHttpResponse</span> <span class="nf">intercept</span><span class="o">(</span><span class="kd">final</span> <span class="n">HttpRequest</span> <span class="n">request</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">body</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="kd">final</span> <span class="n">ClientHttpRequestExecution</span> <span class="n">execution</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">            获取请求发出的URL
</span></span></span><span class="line"><span class="cl"><span class="cm">            例如order-service中获取订单信息时，会发出[http://user-service/user/{userId}]这个请求
</span></span></span><span class="line"><span class="cl"><span class="cm">            这里的request.getURI()会获取到[http://user-service/user/{userId}]这个请求的URI
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="kd">final</span> <span class="n">URI</span> <span class="n">originalUri</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getURI</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">            通过URI获取请求的Host
</span></span></span><span class="line"><span class="cl"><span class="cm">            如：user-service
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">serviceName</span> <span class="o">=</span> <span class="n">originalUri</span><span class="o">.</span><span class="na">getHost</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Assert</span><span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="n">serviceName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;Request URI does not contain a valid hostname: &#34;</span> <span class="o">+</span> <span class="n">originalUri</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">            将Host作为Eureka客户端名称，获取相应的服务信息并执行负载均衡策略
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">loadBalancer</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">serviceName</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                <span class="k">this</span><span class="o">.</span><span class="na">requestFactory</span><span class="o">.</span><span class="na">createRequest</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">body</span><span class="o">,</span> <span class="n">execution</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>LoadBalancerClient</code>是一个客户端执行负载均衡的接口，当实际执行时，使用的是<code>RibbonLoadBalancerClient</code>这个实现类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RibbonLoadBalancerClient</span> <span class="kd">implements</span> <span class="n">LoadBalancerClient</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 实际执行的是这个方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">execute</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">serviceId</span><span class="o">,</span> <span class="c1">// 传入的是serviceName，如 user-service
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">LoadBalancerRequest</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">request</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">            <span class="n">Object</span> <span class="n">hint</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">            根据serviceId获取负载均衡器
</span></span></span><span class="line"><span class="cl"><span class="cm">            loadBalancer中有这么两个属性：
</span></span></span><span class="line"><span class="cl"><span class="cm">            - AllServerList
</span></span></span><span class="line"><span class="cl"><span class="cm">            - UpServerList
</span></span></span><span class="line"><span class="cl"><span class="cm">            它们记录了获取到的Eureka客户端信息
</span></span></span><span class="line"><span class="cl"><span class="cm">            实际执行时，loadBalancer的类型是ZoneAwareLoadBalancer
</span></span></span><span class="line"><span class="cl"><span class="cm">            ZoneAwareLoadBalancer继承了DynamicServerListLoadBalancer
</span></span></span><span class="line"><span class="cl"><span class="cm">            在loadBalancer中，使用IRule定义负载均衡策略
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="n">ILoadBalancer</span> <span class="n">loadBalancer</span> <span class="o">=</span> <span class="n">getLoadBalancer</span><span class="o">(</span><span class="n">serviceId</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">            根据LoadBalancer，执行负载均衡策略，获取Eureka客户端的真实服务地址
</span></span></span><span class="line"><span class="cl"><span class="cm">            如，获取到 localhost:8081
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="n">Server</span> <span class="n">server</span> <span class="o">=</span> <span class="n">getServer</span><span class="o">(</span><span class="n">loadBalancer</span><span class="o">,</span> <span class="n">hint</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="负载均衡策略" data-numberify>负载均衡策略<a class="anchor ms-1" href="#负载均衡策略"></a></h2>
<p>Ribbon的负载均衡策略是使用<code>IRule</code>这个接口来定义。在Eureka中给出了几个负载均衡策略的实现，它们的继承关系图如下：</p>
<p><picture><img class="img-fluid " alt="负载均衡策略继承关系图" src="/docs/spring/springcloud/eureka/uTools_1687859350530.png" loading="lazy" width="1067" height="418" />
</picture>

</p>
<p>Eureka中负载均衡默认的实现是<code>ZoneAvoidanceRule</code>，它们的含义如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>内置负载均衡规则类</strong></th>
<th><strong>规则描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>RoundRobinRule</code></td>
<td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td>
</tr>
<tr>
<td style="text-align:center"><code>AvailabilityFilteringRule</code></td>
<td>对以下两种服务器进行忽略：<ul><li>短路的服务器：<br>在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。<br>短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。</li><li>并发数过高的服务器：<br>如果一个服务器的并发连接数过高，配置了<code>AvailabilityFilteringRule</code>规则的客户端也会将其忽略。<br>并发连接数的上限，可以由客户端的<code>&lt;clientName&gt;.&lt;clientConfigNameSpace&gt;.ActiveConnectionsLimit</code>属性进行配置。</li></ol></td>
</tr>
<tr>
<td style="text-align:center"><code>WeightedResponseTimeRule</code></td>
<td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。<br>这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td>
</tr>
<tr>
<td style="text-align:center"><strong><code>ZoneAvoidanceRule</code></strong></td>
<td>以区域可用的服务器为基础进行服务器的选择。<br>使用Zone对服务器进行分类（这个Zone可以理解为一个机房、一个机架等）。而后再对Zone内的多个服务做轮询。<br>在配置服务注册时，Zone的值可以被设置（按照服务器所在的地理位置进行设置）。使用此规则，服务消费者会优先选择跟自己在同一个Zone内的服务，然后再做轮询。</td>
</tr>
<tr>
<td style="text-align:center"><code>BestAvailableRule</code></td>
<td>忽略那些短路的服务器，并选择并发数较低的服务器。</td>
</tr>
<tr>
<td style="text-align:center"><code>RandomRule</code></td>
<td>随机选择一个可用的服务器。</td>
</tr>
<tr>
<td style="text-align:center"><code>RetryRule</code></td>
<td>重试机制的选择逻辑</td>
</tr>
</tbody>
</table>
<h2 id="配置负载均衡规则" data-numberify>配置负载均衡规则<a class="anchor ms-1" href="#配置负载均衡规则"></a></h2>
<p>配置负载均衡规则有两种方式：</p>
<ul>
<li>
<p>配置<strong>全局默认</strong>的负载均衡规则：</p>
<p>在任何一个配置类或新建一个配置类，然后添加一个新的Bean。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">IRule</span> <span class="nf">getLoadBalancerRule</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 此处以RandomRule为例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="k">new</span> <span class="n">RandomRule</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用Bean的方式配置负载均衡规则，无论当前服务远程调用哪个服务提供者，都是采用这个Bean里面配置的规则。</p>
</li>
<li>
<p>为<strong>指定的服务提供者</strong>配置单独的负载均衡规则：</p>
<p>可以在<code>application.yml</code>中使用<code>serverName.ribbon.NFLoadBalancerRuleClassName</code>配置指定服务的负载均衡规则，它的值是具体规则的实现类的全类名。</p>
<p>例如在<code>order-service</code>中配置<code>user-service</code>的负载均衡规则：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">user-service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ribbon</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 负载均衡规则</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">NFLoadBalancerRuleClassName</span><span class="p">:</span><span class="w"> </span><span class="l">com.netflix.loadbalancer.RandomRule</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
<h2 id="ribbon-饥饿加载" data-numberify>Ribbon 饥饿加载<a class="anchor ms-1" href="#ribbon-饥饿加载"></a></h2>
<ul>
<li>懒加载：第一次访问时才加载。</li>
<li>饥饿加载：在项目启动时就开始加载。</li>
</ul>
<p>Ribbon默认是采用懒加载，即第一次访问时才会去创建<code>LoadBalanceClient</code>，请求时间会很长。而饥饿加载则会在项目启动时创建，降低第一次访问的耗时。</p>
<p>可以在<code>application.yml</code>中，通过下面配置开启Ribbon的饥饿加载：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">ribbon</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">eager-load</span><span class="p">:</span><span class="w"> </span><span class="c"># 饥饿加载</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># 开启饥饿加载</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">clients</span><span class="p">:</span><span class="w"> </span><span class="l">user-service</span><span class="w"> </span><span class="c"># 指定对userservice这个服务饥饿加载</span><span class="w">
</span></span></span></code></pre></div><p><code>ribbon.eager-load.clients</code>是一个集合类型，如果要对多个服务提供者开启饥饿加载，可以这样配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">ribbon</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">eager-load</span><span class="p">:</span><span class="w"> </span><span class="c"># 饥饿加载</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># 开启饥饿加载</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 对多个服务提供者开启饥饿加载</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">clients</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">clinet-1-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">clinet-2-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">clinet-3-service</span><span class="w">
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Feign</title>
      <link>/docs/spring/springcloud/feign/</link>
      <pubDate>Mon, 26 Jun 2023 11:46:12 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/feign/</guid>
      <description><![CDATA[尽管使用了注册中心来解决URL的硬编码等问题，但是如今使用RestTemplate还是存在以下问题： 代码可读性差，编程体验不统一； 参数复杂U]]></description>
      <content:encoded><![CDATA[<p>尽管使用了注册中心来解决URL的硬编码等问题，但是如今使用<code>RestTemplate</code>还是存在以下问题：</p>
<ul>
<li>代码可读性差，编程体验不统一；</li>
<li>参数复杂URL难以维护。</li>
</ul>
<p>Feign是一个声明式的HTTP客户端，作用于服务消费者，在服务消费者中为服务提供者创建一个HTTP远程调用。官方地址：<a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener noreferrer">https://github.com/OpenFeign/feign<i class="fas fa-external-link-square-alt ms-1"></i></a>。其作用就是帮助我们优雅的实现HTTP请求的发送，解决上面提到的问题。</p>
<h1 id="使用-feign" data-numberify>使用 Feign<a class="anchor ms-1" href="#使用-feign"></a></h1>
<p>使用Feign非常简单，大致分为以下步骤：</p>
<ol>
<li>
<p>在<code>pom.xml</code>中引入Feign客户端依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-openfeign<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>在项目的启动类上添加注解<code>@EnableFeignClients</code>以开启Feign的功能。例如为<code>order-service</code>（服务消费者）开启Feign：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableFeignClients</span>
</span></span><span class="line"><span class="cl"><span class="nd">@MapperScan</span><span class="o">(</span><span class="s">&#34;asia.linner.demo.order.mapper&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">OrderApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>为服务提供者编写一个<code>FeignClient</code>接口。例如在<code>order-service</code>（消费者）中为<code>user-service</code>（提供者）编写<code>FeignClient</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@FeignClient</span><span class="o">(</span><span class="s">&#34;user-service&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserClient</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/user/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">Long</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>@FeignClient</code>：标注该接口为<code>FeignClient</code>，其<code>value</code>属性指定一个客户端的服务名称。</li>
<li><code>@GetMapping</code>：为了方便使用，Feign使用的是Spring的注解，其用法和作用与Spring中的类似。</li>
</ul>
<blockquote>
<p><code>FeignClient</code>可以放在项目中的<code>clients</code>包下。</p>
</blockquote>
</li>
<li>
<p>通过<code>FeignClient</code>远程调用服务。例如在<code>order-service</code>（消费者）中通过<code>FeignClient</code>远程调用<code>user-service</code>（提供者）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">OrderMapper</span> <span class="n">orderMapper</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 注入Feign客户端
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserClient</span> <span class="n">userClient</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Order</span> <span class="nf">queryOrderById</span><span class="o">(</span><span class="n">Long</span> <span class="n">orderId</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1.查询订单
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">orderMapper</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">orderId</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2.利用Feign远程调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userClient</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getUserId</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 3.封装User到Order
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">order</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 4.返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">order</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<blockquote>
<p>注意：使用了<code>FeignClient</code>，原本声明<code>RestTemplate</code>的<code>Bean</code>可以删除掉。因为使用<code>FeignClient</code>并不需要<code>RestTemplate</code>的<code>Bean</code>。</p>
</blockquote>
<hr>
<h1 id="feignclient-配置" data-numberify>FeignClient 配置<a class="anchor ms-1" href="#feignclient-配置"></a></h1>
<p>Feign可以修改的配置如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">作用</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>feign.Logger.Level</code></td>
<td style="text-align:center">修改日志级别</td>
<td style="text-align:left">Feign包含四种不同的日志级别：<br><ul><li><code>NONE</code>：不记录任何日志。</li><li><code>BASIC</code>：基础日志级别。记录请求方法、URL以及响应状态代码和执行时间。</li><li><code>HEADERS</code>：记录基本信息以及请求和响应头信息。</li><li><code>FULL</code>：全日志级别。记录基本信息以及请求和响应头信息、请求和响应体信息。</li></ul></td>
</tr>
<tr>
<td style="text-align:center"><code>feign.codec.Decoder</code></td>
<td style="text-align:center">响应结果的解析器</td>
<td style="text-align:left">HTTP远程调用的结果做解析，例如解析JSON字符串为Java对象。</td>
</tr>
<tr>
<td style="text-align:center"><code>feign.codec.Encoder</code></td>
<td style="text-align:center">请求参数编码</td>
<td style="text-align:left">将请求参数编码，便于通过HTTP请求发送。</td>
</tr>
<tr>
<td style="text-align:center"><code>feign.Contract</code></td>
<td style="text-align:center">支持的注解格式</td>
<td style="text-align:left">默认是SpringMVC的注解。</td>
</tr>
<tr>
<td style="text-align:center"><code>feign.Retryer</code></td>
<td style="text-align:center">失败重试机制</td>
<td style="text-align:left">请求失败的重试机制，默认是没有，不过会使用Ribbon的重试。</td>
</tr>
</tbody>
</table>
<p>一般需要配置的是日志级别。有以下几种配置方式：</p>
<p>在<code>application.yml</code>中对全局进行配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">feign</span><span class="p">:</span><span class="w">          </span><span class="c"># Feign配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">client</span><span class="p">:</span><span class="w">       </span><span class="c"># 客户端配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">default</span><span class="p">:</span><span class="w">  </span><span class="c"># 默认配置（全局生效）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">logger-level</span><span class="p">:</span><span class="w"> </span><span class="l">FULL </span><span class="w"> </span><span class="c"># 日志级别</span><span class="w">
</span></span></span></code></pre></div><p>在<code>application.yml</code>中对指定的服务进行配置。例如在<code>order-service</code>中对<code>user-service</code>进行配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">feign</span><span class="p">:</span><span class="w">                </span><span class="c"># Feign配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">client</span><span class="p">:</span><span class="w">             </span><span class="c"># 客户端配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">user-service</span><span class="p">:</span><span class="w">   </span><span class="c"># 指定服务进行配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">logger-level</span><span class="p">:</span><span class="w"> </span><span class="l">HEADERS  </span><span class="w"> </span><span class="c"># 日志级别</span><span class="w">
</span></span></span></code></pre></div><p>只需要将全局默认配置中的<code>default</code>改成指定的服务名称即可。</p>
<p>另外一种方法是创建<code>FeignClient</code>配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">feign.Logger</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * FeignClient配置类
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultFeignClientConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Logger</span><span class="o">.</span><span class="na">Level</span> <span class="nf">getFeignLogLevel</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Logger</span><span class="o">.</span><span class="na">Level</span><span class="o">.</span><span class="na">BASIC</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>注意：<code>FeignClient</code>配置类中的<code>Logger</code>导入的是<code>feign</code>包下的<code>Logger</code>。并且在<code>application.yml</code>中的配置需要注释掉，否则即使开启了配置，配置类中的配置也不会生效。因为<code>application.yml</code>中的配置会将配置类中的配置覆盖掉。</p>
</blockquote>
<p>创建好了<code>FeignClient</code>配置类，这些配置并不会生效。因为<code>FeignClient</code>配置类中并没有任何信息告诉Spring这个是个配置类。所以需要对配置类进行声明。</p>
<p>有两种声明方式，一种是在项目的启动类中进行声明，告诉Spring这个是<code>FeignClient</code>的配置类。并且这种声明方式会在全局生效。声明<code>FeignClient</code>的配置类需要在启动类中使用<code>@EnableFeignClients</code>注解，并为其<code>defaultConfiguration</code>属性指定该<code>FeignClient</code>的配置类的<code>class</code>。例如为<code>order-service</code>声明该配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableFeignClients</span><span class="o">(</span><span class="n">defaultConfiguration</span> <span class="o">=</span> <span class="n">DefaultFeignClientConfig</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>  <span class="c1">// 全局默认的Feign配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@MapperScan</span><span class="o">(</span><span class="s">&#34;asia.linner.demo.order.mapper&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">OrderApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>另外一种方式是，在某个具体服务<code>FeignClient</code>的接口中进行声明。该方式使用<code>@FeignClient</code>注解，并为其<code>configuration</code>属性指定一个<code>FeignClient</code>配置类的<code>class</code>。例如在<code>order-service</code>中为<code>user-service</code>声明使用一个<code>UserFeignClientConfig</code>配置类（假设已经创建好了该配置类）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;user-service&#34;</span><span class="o">,</span> <span class="n">configuration</span> <span class="o">=</span> <span class="n">UserFeignClientConfig</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserClient</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/user/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">Long</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>记录日志会损耗一部分性能，所以除了在开发过程中使用<code>FULL</code>日志级别。在生产环境中最好使用<code>BASIC</code>或<code>NONE</code>日志级别以减少性能损耗（尽量使用<code>BASIC</code>）。</p>
</blockquote>
<hr>
<h1 id="配置连接池" data-numberify>配置连接池<a class="anchor ms-1" href="#配置连接池"></a></h1>
<p>每次HTTP请求，都需要三次握手去建立连接，完成后再断开连接。在高并发的情况下，这样往复地操作会造成的性能损耗是比较大的。引入连接池是为了减少这种性能的损耗。</p>
<p>Feign底层发起HTTP请求，依赖于其它的框架。其底层客户端实现包括：</p>
<table>
<thead>
<tr>
<th style="text-align:center">连接池</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">URLConnection</td>
<td style="text-align:left">默认实现，不支持连接池</td>
</tr>
<tr>
<td style="text-align:center">Apache HttpClient</td>
<td style="text-align:left">支持连接池</td>
</tr>
<tr>
<td style="text-align:center">OKHttp</td>
<td style="text-align:left">支持连接池</td>
</tr>
</tbody>
</table>
<blockquote>
<p>提高Feign的性能主要手段就是使用HttpClient或OKHttp连接池代替默认的URLConnection。</p>
</blockquote>
<p>这里选择使用HttpClient。首先在消费者中引入其依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--HttpClient依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>io.github.openfeign<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>feign-httpclient<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>然后在<code>application.yml</code>中修改配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">feign</span><span class="p">:</span><span class="w">                </span><span class="c"># Feign配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">httpclient</span><span class="p">:</span><span class="w"> </span><span class="c"># HttpClient配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># 如果要使用OKHttp，在feign.okhttp中做相应的配置即可</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># 支持HttpClient的开关</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="c"># 默认是true，但是没引入依赖不会生效</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max-connections</span><span class="p">:</span><span class="w"> </span><span class="m">200</span><span class="w">  </span><span class="c"># 最大连接数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max-connections-per-route</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="w"> </span><span class="c"># 单个请求路径的最大连接数</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>提高Feign的性能还可以对连接池客户端的最大连接数根据实际情况进行相应的配置调整。</p>
</blockquote>
<hr>
<h1 id="抽取api接口" data-numberify>抽取API接口<a class="anchor ms-1" href="#抽取api接口"></a></h1>
<p>由于<code>FeignClient</code>接口中编写的接口方法与其对应的提供者中的Controller的方法一致。所以可以对<code>FeignClient</code>接口和Controller做一个统一的API接口抽取，然后再通过集成的方式分别去实现<code>FeignClient</code>和Controller。但是这样的方法有以下缺点：</p>
<ul>
<li>
<p>服务提供方、服务消费方紧耦合。</p>
</li>
<li>
<p>参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解。</p>
<p>在API父接口的方法参数中使用的注解不会对Spring（也就是Controller）生效。即<code>@PathVariable</code>、<code>@RequestParam</code>这样的注解，在API父接口中声明了，在对应的Controller中也需要再次声明。</p>
</li>
</ul>
<p>以<code>user-service</code>为例：</p>
<ul>
<li>
<p>API父接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserAPI</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/user/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">Long</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>FeignClient</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@FeignClient</span><span class="o">(</span><span class="s">&#34;user-service&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserClient</span> <span class="o">{}</span>
</span></span></code></pre></div></li>
<li>
<p>Controller：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserAPI</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* 业务代码... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>这种方法的优点是简单、实现了代码共享，遵循了面向契约的编程思想。</p>
</blockquote>
<hr>
<h1 id="抽取-feign-api-模块" data-numberify>抽取 feign-api 模块<a class="anchor ms-1" href="#抽取-feign-api-模块"></a></h1>
<p>另外一种方式是将所有的提供者对应的FeignClient抽取为独立的模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，通过Maven引入依赖的方式提供给所有消费者使用。</p>
<p>假设有多个消费者都需要调用到同一个提供者。如果让消费者分别实现自己的FeignClient，不仅会有许多冗余的代码，而且也不利于维护。但是如果使用这种方式将FeignClient抽取出来，可以由实现提供者的程序员来提供对应的feign-api实现。</p>
<p>这样的方法也有一些缺点，在使用一个提供者的接口时，需要同时引入该提供者的所有接口和其它提供者的所有接口。</p>
<p>抽取<code>feign-api</code>的步骤：</p>
<ol>
<li>
<p>创建一个新的模块，命名为<code>feign-api</code>。</p>
</li>
<li>
<p>在<code>feign-api</code>中引入Feign的Stater依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Feign客户端依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-openfeign<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>如果要默认使用<code>HttpClient</code>连接池，还需要导入其坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--HttpClient依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>io.github.openfeign<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>feign-httpclient<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注：引入坐标是为了在消费者的<code>pom.xml</code>中可以不同显式地导入<code>HttpClient</code>的依赖（使用Maven的依赖传递），但是<code>HttpClient</code>的配置还是得在消费者中的<code>application.yml</code>中配置。</p>
<p>如果在<code>feign-api</code>中创建<code>application.yml</code>中并配置<code>HttpClient</code>，这样的配置是不会在消费者中生效的。因为<code>feign-api</code>没有启动类，而且消费者的启动类也不会使用<code>feign-api</code>中<code>application.yml</code>的配置。除非使用配置类编写对<code>HttpClient</code>的配置，并且在消费者中启用这个配置类。</p>
</blockquote>
</li>
<li>
<p>将所有消费者的<code>FeignClient</code>、POJO和<code>DefaultFeignClientConfig</code>都抽取到<code>feign-api</code>模块中。</p>
<blockquote>
<p>注：<code>DefaultFeignClientConfig</code>的抽取是对所有的<code>FeignClient</code>做一个默认的配置抽取。</p>
</blockquote>
</li>
<li>
<p>在消费者中引入<code>feign-api</code>依赖。</p>
</li>
<li>
<p>在消费者中使用<code>feign-api</code>提供的API接口。</p>
<blockquote>
<p>注：需要修改消费者的启动类，在消费者的启动类上使用<code>@EnableFeignClients</code>注解的<code>basePackages</code>或<code>clients</code>属性指定扫描的<code>FeignClient</code>包或具体的<code>FeignClient</code>类，让消费者的启动类能扫描到<code>feign-api</code>的<code>FeignClient</code>。</p>
</blockquote>
</li>
</ol>
<p>以<code>order-service</code>（消费者）和<code>user-service</code>（提供者）为例：</p>
<ol>
<li>
<p>创建<code>feign-api</code>，并导入Feign依赖。</p>
</li>
<li>
<p>将原本编写在<code>order-service</code>中的<code>UserClient</code>、<code>User</code>和<code>DefaultFeignClientConfig</code>抽取出来，放在<code>feign-api</code>中对应的包下。例如：</p>
<p><code>asia.linner.demo.feign</code>（<code>feign-api</code>的包名）下的包结构:</p>
<ul>
<li><code>clients</code>：
<ul>
<li><code>UserClient.java</code></li>
</ul>
</li>
<li><code>pojo</code>：
<ul>
<li><code>User.java</code></li>
</ul>
</li>
<li><code>config</code>：
<ul>
<li><code>DefaultFeignClientConfig.java</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>抽取完成后，原本在<code>order-service</code>中的<code>UserClient</code>、<code>User</code>和<code>DefaultFeignClientConfig</code>都可以删除。但是需要注意复制在<code>feign-api</code>中的<code>UserClient</code>、<code>User</code>和<code>DefaultFeignClientConfig</code>它们的包名要改成<code>feign-api</code>的包名。</p>
</blockquote>
</li>
<li>
<p>在<code>order-service</code>中导入<code>feign-api</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--引入抽取的feign-api模块--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>asia.linner.demo<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>feign-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><blockquote>
<p>在<code>order-service</code>中的Feign依赖可以删除；如果有在<code>feign-api</code>中导入并配置HttpClient，HttpClient的依赖也可以删除。需要注意引入<code>order-service</code>中的<code>UserClient</code>、<code>User</code>和<code>DefaultFeignClientConfig</code>它们的包名要改成<code>feign-api</code>的包名。</p>
</blockquote>
</li>
<li>
<p>让<code>order-service</code>的启动类扫描<code>FeignClient</code>。</p>
<p>因为<code>feign-api</code>和<code>order-service</code>的包名并不相同（如<code>asia.linner.demo.feign</code>和<code>asia.linner.demo.order</code>），所以在没有扫描包指定的情况下<code>order-service</code>的启动类并不能扫描到<code>feign-api</code>中的<code>UserClient</code>，所以会导致<code>order-service</code>中的<code>UserClient</code>注入失败。</p>
<p>Feign的<code>@EnableFeignClients</code>注解提供了两种方式来让消费者的启动类扫描到<code>FeignClient</code>：</p>
<ul>
<li>
<p><code>basePackages</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableFeignClients</span><span class="o">(</span><span class="n">defaultConfiguration</span> <span class="o">=</span> <span class="n">DefaultFeignClientConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">basePackages</span> <span class="o">=</span> <span class="s">&#34;asia.linner.demo.feign.clients&#34;</span> <span class="c1">// 扫描整个clients包
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p><code>clients</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableFeignClients</span><span class="o">(</span><span class="n">defaultConfiguration</span> <span class="o">=</span> <span class="n">DefaultFeignClientConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">clients</span> <span class="o">=</span> <span class="o">{</span><span class="n">UserClient</span><span class="o">.</span><span class="na">class</span><span class="o">}</span>    <span class="c1">// 指定需要加载的FeignClient接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">)</span>
</span></span></code></pre></div><p><code>clients</code>属性的类型是一个<code>class</code>数组，所以可以指定多个<code>FeignClient</code>。推荐使用该方式。</p>
</li>
</ul>
<p>在上述方法中选一种，然后修改<code>order-service</code>的启动类即可。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Gateway</title>
      <link>/docs/spring/springcloud/gateway/</link>
      <pubDate>Mon, 26 Jun 2023 11:46:12 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/gateway/</guid>
      <description><![CDATA[网关 网关是所有微服务的统一入口。网关的核心功能特性： 请求路由：一切请求都必须先经过网关，但网关不处理业务，而是根据某种规则，把请求转发到某个]]></description>
      <content:encoded><![CDATA[<h1 id="网关" data-numberify>网关<a class="anchor ms-1" href="#网关"></a></h1>
<p>网关是所有微服务的统一入口。网关的核心功能特性：</p>
<ul>
<li><strong>请求路由</strong>：一切请求都必须先经过网关，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当路由的目标服务有多个时，还需要做<strong>负载均衡</strong>。</li>
<li><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</li>
<li><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</li>
</ul>
<p>在SpringCloud中网关的实现包括两种：</p>
<ul>
<li>Gateway：基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</li>
<li>Zuul：基于Servlet的实现，属于阻塞式编程。</li>
</ul>
<blockquote>
<p>Spring Cloud Gateway旨在为微服务架构提供一种简单有效的统一的API路由管理方式。</p>
</blockquote>
<hr>
<h1 id="创建-gateway-服务" data-numberify>创建 Gateway 服务<a class="anchor ms-1" href="#创建-gateway-服务"></a></h1>
<p>创建一个Gateway服务的基本步骤如下：</p>
<ol>
<li>
<p>创建一个新的gateway模块。</p>
</li>
<li>
<p>导入Gateway所需依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Nacos服务注册发现依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 网关Gateway依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-gateway<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>因为Gateway属于一个服务，所以需要创建并编写<code>GatewayApplication</code>启动类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GatewayApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">GatewayApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在配置文件<code>application.yml</code>中编写Gateway相关配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">10010</span><span class="w"> </span><span class="c"># 网关端口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gateway</span><span class="w"> </span><span class="c"># 服务名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nacos</span><span class="p">:</span><span class="w">  </span><span class="c"># Nacos配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">server-addr</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:8848</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">gateway</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">routes</span><span class="p">:</span><span class="w">   </span><span class="c"># 网关路由配置（是数组类型，可以配置多个）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">user-service </span><span class="w"> </span><span class="c"># 路由ID，自定义，只要唯一即可</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># uri支持以下两种方式，推荐使用lb方式</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># uri: http://localhost:8081  # 路由的目标地址，使用http表示固定地址（不推荐使用）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://user-service </span><span class="w"> </span><span class="c"># 路由的目标地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="c"># lb是Load Balance的缩写，表示负载均衡</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="c"># 后面是服务地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">predicates</span><span class="p">:</span><span class="w"> </span><span class="c"># 路由断言，判断请求是否符合路由规则的条件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">Path=/user/**</span><span class="w"> </span><span class="c"># 路径断言，匹配&#34;/user/&#34;开头的请求</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">order-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://${spring.cloud.gateway.routes[1].id} </span><span class="w"> </span><span class="c"># 通过yaml变量设置uri</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">predicates</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">Path=/order/**</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">Before=2037-01-20T17:42:47.789-07:00[America/Denver]</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>启动<code>GatewayApplication</code>，使用<code>localhost:10010</code>来访问系统上的服务。</p>
<p>例如访问<code>user-service</code>上的<code>/user/{id}</code>请求，就可以使用<code>http://localhost:10010/user/{id}</code>访问。获取<code>id</code>为<code>1</code>的<code>user</code>就访问<a href="http://localhost:10010/user/1" target="_blank" rel="noopener noreferrer"><code>http://localhost:10010/user/1</code><i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p>如上所述，访问<code>order-service</code>上的<code>/order/{id}</code>就使用<code>http://localhost:10010/order/{id}</code>访问。</p>
</li>
</ol>
<p>使用网关就可以通过网关来访问服务中的资源，并且还能做到负载均衡和权限控制等。</p>
<hr>
<h1 id="路由配置" data-numberify>路由配置<a class="anchor ms-1" href="#路由配置"></a></h1>
<p>Gateway的路由配置如上所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">gateway</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">routes</span><span class="p">:</span><span class="w">   </span><span class="c"># 网关路由配置（是数组类型，可以配置多个）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">user-service </span><span class="w"> </span><span class="c"># 路由ID，自定义，只要唯一即可</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># uri支持以下两种方式，推荐使用lb方式</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># uri: http://localhost:8081  # 路由的目标地址，使用http表示固定地址（不推荐使用）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://user-service </span><span class="w"> </span><span class="c"># 路由的目标地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="c"># lb是Load Balance的缩写，表示负载均衡</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="c"># 后面是服务地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">predicates</span><span class="p">:</span><span class="w"> </span><span class="c"># 路由断言，判断请求是否符合路由规则的条件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">Path=/user/**</span><span class="w"> </span><span class="c"># 路径断言，匹配&#34;/user/&#34;开头的请求</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">order-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://${spring.cloud.gateway.routes[1].id} </span><span class="w"> </span><span class="c"># 通过yaml变量设置uri</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">predicates</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">Path=/order/**</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">Before=2037-01-20T17:42:47.789-07:00[America/Denver]</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>
<p><code>cloud.gateway.routes</code>：Gateway的网关路由配置，数组类型。其元素可以有<code>id</code>、<code>uri</code>和<code>predicates</code>等属性。</p>
</li>
<li>
<p><code>id</code>属性：标识一个服务的路由配置的唯一ID。可由用户自定义，但在当前Gateway网关服务中不可重复存在。</p>
</li>
<li>
<p><code>uri</code>属性：标识当前服务路由配置的目标地址。有两种配置方式：</p>
<ul>
<li>
<p><code>http</code>：使用<code>http://</code>前缀，表示当前的地址是固定地址。例如<code>http://localhost:8081</code>。</p>
</li>
<li>
<p><code>lb</code>：使用<code>lb://</code>前缀，表示当前的地址是非固定的，需要做负载均衡。例如：<code>lb://user-service</code>。</p>
<blockquote>
<p><code>lb</code>是Load Balance的缩写，表示负载均衡。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><code>predicates</code>属性：路由断言，根据Gateway提供的断言工厂，对经过网关的请求进行权限的断言（也就是判断有没有权限可以访问该服务）。<code>predicates</code>是数组属性，可以配置多个规则。</p>
</li>
</ul>
<h1 id="断言工厂" data-numberify>断言工厂<a class="anchor ms-1" href="#断言工厂"></a></h1>
<p>在配置文件中写的断言规则，会被Predicate Factory读取并处理，转变为路由判断的条件。</p>
<p>例如上方<code>Path=/user/**</code>就是按照路径匹配，断言只有<code>/user/**</code>这个请求方式才能通过网关访问到<code>user-service</code>。<code>order-service</code>中的<code>Path=/order/**</code>同理。这两条规则是由<code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来处理的。</p>
<p>在Gateway中还有以下断言工厂：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>名称</strong></th>
<th><strong>说明</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>After</code></td>
<td>是某个时间点后的请求。</td>
<td><code>After=2037-01-20T17:42:47.789-07:00[America/Denver]</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Before</code></td>
<td>是某个时间点之前的请求。</td>
<td><code>Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Between</code></td>
<td>是某两个时间点之前的请求。</td>
<td><code>Between=2037-01-20T17:42:47.789-07:00[America/Denver], 2037-01-21T17:42:47.789-07:00[America/Denver]</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Cookie</code></td>
<td>请求必须包含某些cookie。</td>
<td><code>Cookie=chocolate, ch.p</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Header</code></td>
<td>请求必须包含某些header。</td>
<td><code>Header=X-Request-Id, \d+</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Host</code></td>
<td>请求必须是访问某个host（域名）。</td>
<td><code>Host=**.somehost.org,**.anotherhost.org</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Method</code></td>
<td>请求方式必须是指定方式。</td>
<td><code>Method=GET,POST</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Path</code></td>
<td>请求路径必须符合指定规则。</td>
<td><code>Path=/red/{segment},/blue/**</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Query</code></td>
<td>请求参数必须包含指定参数。</td>
<td><code>Query=name, Jack</code>，<br>或者<code>Query=name</code></td>
</tr>
<tr>
<td style="text-align:center"><code>RemoteAddr</code></td>
<td>请求者的ip必须是指定范围。</td>
<td><code>RemoteAddr=192.168.1.1/24</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Weight</code></td>
<td>权重处理。</td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="路由过滤器" data-numberify>路由过滤器<a class="anchor ms-1" href="#路由过滤器"></a></h1>
<p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理。</p>
<p>Spring提供了31种不同的路由过滤器工厂。常用的有：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>AddRequestHeader</code></td>
<td>给当前请求添加一个请求头。</td>
</tr>
<tr>
<td><code>RemoveRequestHeader</code></td>
<td>移除请求中的一个请求头。</td>
</tr>
<tr>
<td><code>AddResponseHeader</code></td>
<td>给响应结果中添加一个响应头。</td>
</tr>
<tr>
<td><code>RemoveResponseHeader</code></td>
<td>从响应结果中移除有一个响应头。</td>
</tr>
<tr>
<td><code>RequestRateLimiter</code></td>
<td>限制请求的流量。</td>
</tr>
</tbody>
</table>
<p>GatewayFilter的使用也是在<code>application.yml</code>中配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">gateway</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">user-service </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://user-service </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">predicates</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">Path=/user/** </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filters</span><span class="p">:</span><span class="w"> </span><span class="c"># 过滤器</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">AddRequestHeader=Hello, Hello Spring Cloud Gateway!</span><span class="w"> </span><span class="c"># 添加请求头</span><span class="w">
</span></span></span></code></pre></div><h1 id="defaultfilter" data-numberify>DefaultFilter<a class="anchor ms-1" href="#defaultfilter"></a></h1>
<p>上方所示的GatewayFilter只有在访问<code>user-service</code>时才能生效。Spring Cloud Gateway还提供了全局默认的GatewayFilter配置方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">gateway</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">user-service </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://userservice </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">predicates</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">Path=/user/**</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">order-service </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://order-service </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">predicates</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">Path=/order/**</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">default-filters</span><span class="p">:</span><span class="w"> </span><span class="c"># 默认过滤项</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">AddRequestHeader=Truth, Itcast is freaking awesome! </span><span class="w">
</span></span></span></code></pre></div><p>这种方式无论访问的是<code>user-service</code>还是<code>order-service</code>都会生效。</p>
<p>在Spring Cloud Gateway的官方文档中可以查找更多路由工厂及其使用方式：</p>
<p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories" target="_blank" rel="noopener noreferrer"><picture><img class="img-fluid " alt="Spring Cloud Gateway 官方文档" src="/docs/spring/springcloud/gateway/uTools_1690728134391.png" loading="lazy" width="1897" height="949" />
</picture>

<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<h1 id="globalfilter" data-numberify>GlobalFilter<a class="anchor ms-1" href="#globalfilter"></a></h1>
<p>GlobalFilter的作用与GatewayFilter的作用一样，也是处理一切进入网关的请求和微服务响应。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现，可以自定义实现。</p>
<p><code>GlobalFilter</code>接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">GlobalFilter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 处理当前请求，有必要的话通过{@link GatewayFilterChain}将请求交给下一个过滤器处理
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * @param exchange 请求上下文，里面可以获取Request、Responses等信息
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * @param chain 用来把请求委托给下一个过滤器（放行请求）
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * @return {@code Mono&lt;Void&gt;} 返回一个当前过滤器业务结束的标示
</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>
</span></span><span class="line"><span class="cl">	<span class="n">Mono</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">filter</span><span class="o">(</span><span class="n">ServerWebExchange</span> <span class="n">exchange</span><span class="o">,</span> <span class="n">GatewayFilterChain</span> <span class="n">chain</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>注：<code>GlobalFilter</code>是在<code>org.springframework.cloud.gateway.filter</code>包下的，是属于Spring Cloud Gateway中的一部分。</p>
</blockquote>
<p>在Filter中编写自定义逻辑，可以实现登录状态判断、权限校验、请求限流等等功能。</p>
<p>假设实现一个简单的用户权限判断，其判断逻辑如下：</p>
<ul>
<li>请求参数中是否有<code>authorization</code>；</li>
<li><code>authorization</code>参数值是否为<code>admin</code>。</li>
</ul>
<p>如果同时满足则放行，否则拦截。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 识别用户权限
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Order</span><span class="o">(-</span><span class="mi">1</span><span class="o">)</span>   <span class="c1">// 顺序注解（定义过滤器的执行顺序），值越小优先级越高
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizeFilter</span> <span class="kd">implements</span> <span class="n">GlobalFilter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Mono</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">filter</span><span class="o">(</span><span class="n">ServerWebExchange</span> <span class="n">exchange</span><span class="o">,</span> <span class="n">GatewayFilterChain</span> <span class="n">chain</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取请求参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ServerHttpRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="n">exchange</span><span class="o">.</span><span class="na">getRequest</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">MultiValueMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getQueryParams</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取参数中的 authorization
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">auth</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="na">getFirst</span><span class="o">(</span><span class="s">&#34;authorization&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 判断参数值是否等于 admin
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="s">&#34;admin&#34;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">auth</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 4. 是则放行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// chain.filter()的返回值是Mono&lt;Void&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="n">chain</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">exchange</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 否则拦截
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ServerHttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">exchange</span><span class="o">.</span><span class="na">getResponse</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 5.1. 设置状态码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// HttpStatus.UNAUTHORIZED 表示用户未认证，状态码为401
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">response</span><span class="o">.</span><span class="na">setStatusCode</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">UNAUTHORIZED</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 5.2. 拦截请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// setComplete()的返回也是Mono&lt;Void&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">setComplete</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>定义GlobalFilter的过程可总结为：</p>
<ol>
<li>
<p>继承<code>GlobalFilter</code>接口。</p>
</li>
<li>
<p>实现<code>GlobalFilter.filter()</code>方法。</p>
<p>在实现<code>GlobalFilter.filter()</code>时，可以使用<code>exchange</code>对象获取请求的<code>Request</code>、<code>Response</code>、<code>Attribute</code>、<code>Session</code>、<code>FormData</code>等信息。其中获取到的<code>Request</code>和<code>Response</code>分别是<code>ServerHttpRequest</code>和<code>ServerHttpResponse</code>对象。</p>
<blockquote>
<p>使用<code>exchange</code>获取到的对象与使用标准的ServletAPI获取到的不一样。</p>
</blockquote>
<p>放行资源使用的是<code>chain</code>对象。该对象仅有一个方法<code>filter()</code>。该方法接受一个<code>ServerWebExchange</code>对象（也就是<code>exchange</code>，相当于将<code>exchange</code>传给下一级Filter），并返回给上层Filter一个<code>Mono&lt;Void&gt;</code>对象。放行资源时标准的用法是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">return</span> <span class="n">chain</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">exchange</span><span class="o">);</span>
</span></span></code></pre></div><p>拦截资源使用的是从<code>exchange</code>中获取的<code>response</code>对象。调用<code>response</code>对象的<code>setComplete()</code>方法，返回给上层Filter一个<code>Mono&lt;Void&gt;</code>。标准用法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">setComplete</span><span class="o">();</span>
</span></span></code></pre></div><p>这样相当于直接将业务结束标示<code>Mono&lt;Void&gt;</code>返回给上层Filter。而没有调用<code>chain.filter(exchange)</code>的话，请求也就不会进入到下层Filter。</p>
</li>
<li>
<p>为实现的<code>GlobalFilter</code>使用<code>@Component</code>注解，让Spring可以将该过滤器加载为Bean。</p>
</li>
<li>
<p>为实现的<code>GlobalFilter</code>定义顺序（有两种定义方式）。</p>
<p>定义<code>GlobalFilter</code>执行的优先级顺序的一个方法就是使用如上所示的<code>@Order</code>注解。在<code>@Order</code>注解中，其<code>value</code>属性是一个<code>int</code>类型的值，默认为<code>Integer.MAX_VALUE</code>也就是<code>int</code>类型的最大值<code>2147483647</code>（即$2^{31}-1$，按32位补码计算），<code>value</code>越小优先级越高。</p>
<p>另一种方式就是继承一个<code>Ordered</code>接口，并实现其<code>getOrder()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizeFilter</span> <span class="kd">implements</span> <span class="n">GlobalFilter</span><span class="o">,</span> <span class="n">Ordered</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Mono</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">filter</span><span class="o">(</span><span class="n">ServerWebExchange</span> <span class="n">exchange</span><span class="o">,</span> <span class="n">GatewayFilterChain</span> <span class="n">chain</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* 拦截/放行逻辑... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 定义过滤器执行顺序，效果与{@code @Order}相同
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return 过滤器的执行顺序，值越小优先级越高
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getOrder</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<h1 id="过滤器链" data-numberify>过滤器链<a class="anchor ms-1" href="#过滤器链"></a></h1>
<p>请求进入网关后会遇到三类过滤器：</p>
<ul>
<li>当前路由的过滤器；</li>
<li>默认过滤器（DefaultFilter）；</li>
<li>全局过滤器（GlobalFilter）。</li>
</ul>
<p>在请求路由后，Spring Cloud Gateway会将每个路由的路由过滤器、默认过滤器和全局过滤器合并到一个过滤器链（集合）中，并进行排序。然后Spring Cloud Gateway会根据请求，按顺序执行路由对应的过滤器链。</p>
<blockquote>
<p>在CSDN上看到一个Gateway执行流程图，确实是在请求路由之后才开始组装过滤器链：</p>
<p><picture><img class="img-fluid " alt="Gateway执行流程图" src="/docs/spring/springcloud/gateway/20210405115550799.png" loading="lazy" width="1076" height="1268" />
</picture>

</p>
<p>原文链接：<a href="https://blog.csdn.net/riemann_/article/details/115440231" target="_blank" rel="noopener noreferrer">Spring Cloud Gateway 源码剖析之Filter Chain过滤器链<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
</blockquote>
<p>路由过滤器和默认过滤器的实现十分接近，它们的本质都是<code>AddRequestHeaderGatewayFilterFactory</code>，并且最后通过<code>apply()</code>方法读取配置后生成统一的过滤器对象<code>GatewayFilter</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddRequestHeaderGatewayFilterFactory</span>
</span></span><span class="line"><span class="cl">		<span class="kd">extends</span> <span class="n">AbstractNameValueGatewayFilterFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">GatewayFilter</span> <span class="nf">apply</span><span class="o">(</span><span class="n">NameValueConfig</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">GatewayFilter</span><span class="o">()</span> <span class="o">{</span>    <span class="c1">// 生成过滤器对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">			<span class="kd">public</span> <span class="n">Mono</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">filter</span><span class="o">(</span><span class="n">ServerWebExchange</span> <span class="n">exchange</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">					<span class="n">GatewayFilterChain</span> <span class="n">chain</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">			<span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>全局过滤器则是通过<code>FilteringWebHandler</code>中的私有类<code>GatewayFilterAdapter</code>（过滤器适配器）生成，使用<code>loadFilters()</code>将所有<code>GlobalFilter</code>转化为<code>GatewayFilterAdapter</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FilteringWebHandler</span> <span class="kd">implements</span> <span class="n">WebHandler</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">GatewayFilter</span><span class="o">&gt;</span> <span class="n">globalFilters</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">FilteringWebHandler</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">GlobalFilter</span><span class="o">&gt;</span> <span class="n">globalFilters</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">globalFilters</span> <span class="o">=</span> <span class="n">loadFilters</span><span class="o">(</span><span class="n">globalFilters</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 将所有GlobalFilter链转为GatewayFilter
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">GatewayFilter</span><span class="o">&gt;</span> <span class="nf">loadFilters</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">GlobalFilter</span><span class="o">&gt;</span> <span class="n">filters</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">filters</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="n">filter</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">GatewayFilterAdapter</span> <span class="n">gatewayFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GatewayFilterAdapter</span><span class="o">(</span><span class="n">filter</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">filter</span> <span class="k">instanceof</span> <span class="n">Ordered</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="kt">int</span> <span class="n">order</span> <span class="o">=</span> <span class="o">((</span><span class="n">Ordered</span><span class="o">)</span> <span class="n">filter</span><span class="o">).</span><span class="na">getOrder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="k">new</span> <span class="n">OrderedGatewayFilter</span><span class="o">(</span><span class="n">gatewayFilter</span><span class="o">,</span> <span class="n">order</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">gatewayFilter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 加载全局过滤器，与所有的路由过滤器和默认过滤器合并后更具Order排序、组织过滤器链
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Mono</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">handle</span><span class="o">(</span><span class="n">ServerWebExchange</span> <span class="n">exchange</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">Route</span> <span class="n">route</span> <span class="o">=</span> <span class="n">exchange</span><span class="o">.</span><span class="na">getRequiredAttribute</span><span class="o">(</span><span class="n">GATEWAY_ROUTE_ATTR</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 加载所有的默认过滤器和路由过滤器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 加载方式是，先加载默认过滤器链，然后根据Route（规则）加载路由过滤器链，最后合并为一个过滤器链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">List</span><span class="o">&lt;</span><span class="n">GatewayFilter</span><span class="o">&gt;</span> <span class="n">gatewayFilters</span> <span class="o">=</span> <span class="n">route</span><span class="o">.</span><span class="na">getFilters</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">List</span><span class="o">&lt;</span><span class="n">GatewayFilter</span><span class="o">&gt;</span> <span class="n">combined</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="k">this</span><span class="o">.</span><span class="na">globalFilters</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">combined</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">gatewayFilters</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// TODO: needed or cached?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">AnnotationAwareOrderComparator</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">combined</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&#34;Sorted gatewayFilterFactories: &#34;</span> <span class="o">+</span> <span class="n">combined</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="n">DefaultGatewayFilterChain</span><span class="o">(</span><span class="n">combined</span><span class="o">).</span><span class="na">filter</span><span class="o">(</span><span class="n">exchange</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">GatewayFilterAdapter</span> <span class="kd">implements</span> <span class="n">GatewayFilter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kd">final</span> <span class="n">GlobalFilter</span> <span class="n">delegate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 私有类构造方法
</span></span></span><span class="line"><span class="cl"><span class="cm">         */</span>
</span></span><span class="line"><span class="cl">        <span class="n">GatewayFilterAdapter</span><span class="o">(</span><span class="n">GlobalFilter</span> <span class="n">delegate</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">delegate</span> <span class="o">=</span> <span class="n">delegate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 实现GatewayFilter的filter()方法
</span></span></span><span class="line"><span class="cl"><span class="cm">         */</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Mono</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">filter</span><span class="o">(</span><span class="n">ServerWebExchange</span> <span class="n">exchange</span><span class="o">,</span> <span class="n">GatewayFilterChain</span> <span class="n">chain</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">delegate</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">exchange</span><span class="o">,</span> <span class="n">chain</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span> <span class="cm">/* ... */</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>综上所述，Spring Cloud Gateway加载过滤器链的过程大致如下：</p>
<ol>
<li>
<p>加载默认过滤器链。</p>
</li>
<li>
<p>加载路由过滤器链。</p>
</li>
<li>
<p>合并默认过滤器链和路由过滤器链为一条过滤器链。</p>
<p>路由过滤器和默认过滤器的<code>Order</code>由Spring指定，默认是按照声明顺序从1递增。</p>
</li>
<li>
<p>加载全局过滤器链。</p>
</li>
<li>
<p>将全局过滤器链和 默认过滤器与路由过滤器合并的链 合并。</p>
<blockquote>
<p>所有的过滤器都有一个<code>int</code>类型的<code>Order</code>值，<code>Order</code>值越小，优先级越高，执行顺序越靠前。</p>
</blockquote>
<p>当过滤器的<code>Order</code>值一样时，会按照 <strong>默认过滤器 &gt; 路由过滤器 &gt; 全局过滤器</strong> 的顺序执行。</p>
</li>
</ol>
<h1 id="跨域问题处理" data-numberify>跨域问题处理<a class="anchor ms-1" href="#跨域问题处理"></a></h1>
<p>跨域是指发送与当前服务的域名（或端口）不一致的请求。</p>
<p>跨域问题的产生原因是浏览器不允许Ajax请求对域名不同或端口不同的服务发起请求。例如：</p>
<ul>
<li>域名不同： <code>www.taobao.com</code>和<code>www.taobao.org</code>，<code>www.linner.asia</code>和<code>blog.linner.asia</code>。</li>
<li>域名相同，端口不同：<code>localhost:8080</code>和<code>localhost8081</code>。</li>
</ul>
<p>解决方案之一就是CORS。Gateway为我们提供了使用CORS处理跨域问题的方法，只需修改<code>application.yml</code>即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">gateway</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">globalcors</span><span class="p">:</span><span class="w"> </span><span class="c"># 全局的跨域处理</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">add-to-simple-url-handler-mapping</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># 解决options请求被拦截问题</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">cors-configurations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">&#39;[/**]&#39;</span><span class="p">:</span><span class="w">  </span><span class="c"># 对所有请求进行跨域处理</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">allowedOrigins</span><span class="p">:</span><span class="w"> </span><span class="c"># 允许跨域请求的网站</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;http://localhost:5500&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;http://http://127.0.0.1:5500&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">allowedMethods</span><span class="p">:</span><span class="w"> </span><span class="c"># 允许的跨域ajax的请求方式</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;GET&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;POST&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;DELETE&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;PUT&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;OPTIONS&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">allowedHeaders</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;*&#34;</span><span class="w"> </span><span class="c"># 允许在请求中携带的头信息（这里是允许所有）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">allowCredentials</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># 是否允许携带cookie</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">maxAge</span><span class="p">:</span><span class="w"> </span><span class="m">360000</span><span class="w">  </span><span class="c"># 每次跨域检测的有效期（在有效期内浏览器不会重复询问跨域请求）</span><span class="w">
</span></span></span></code></pre></div><p>模拟一个跨域问题：</p>
<ol>
<li>
<p>编写一个简单的页面，其中用Ajax发起跨域请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Document<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>模拟跨域问题<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://unpkg.com/axios/dist/axios.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 发送请求到Gateway网关上
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&#34;http://localhost:10010/user/1?authorization=admin&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">resp</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>使用Tomcat或Nginx之类的Web服务器放置这个Html页面。</p>
<blockquote>
<p>我在模拟时使用的是VS Code的<code>Live Server</code>插件。它会想Web服务器一样在你电脑上开一个端口加载页面，让你能实时预览你的页面效果。用在这里做个简单的静态页面Web服务器也很方便。</p>
<p><picture><img class="img-fluid " alt="Live Server 插件" src="/docs/spring/springcloud/gateway/uTools_1690798301739.png" loading="lazy" width="919" height="238" />
</picture>

</p>
<p>Live Server使用的端口是<code>5500</code>，当然也有可能不同。</p>
</blockquote>
</li>
<li>
<p>在给Gateway网关配置跨域请求处理之前，通过Web服务器访问页面，可以在浏览器控制台发现类似以下的报错：</p>
<p><picture><img class="img-fluid " alt="跨域报错信息" src="/docs/spring/springcloud/gateway/uTools_1690798524991.png" loading="lazy" width="702" height="66" />
</picture>

</p>
</li>
<li>
<p>配置成功后重启Gateway网关，再次访问页面，可以发现浏览器控制台打印出了跨域请求获取到的结果。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Nacos</title>
      <link>/docs/spring/springcloud/nacos/</link>
      <pubDate>Mon, 26 Jun 2023 11:46:12 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/nacos/</guid>
      <description><![CDATA[部署 Nacos Server 安装和配置好Nacos后，在nacos的bin目录中使用脚本启动： Windows： 单机启动： startup.cmd -m standalone Linux： 单机启动： sh startup.sh -m standalone 在浏]]></description>
      <content:encoded><![CDATA[<h1 id="部署-nacos-server" data-numberify>部署 Nacos Server<a class="anchor ms-1" href="#部署-nacos-server"></a></h1>
<p>安装和配置好Nacos后，在<code>nacos</code>的<code>bin</code>目录中使用脚本启动：</p>
<ul>
<li>
<p>Windows：</p>
<p>单机启动：</p>
<pre tabindex="0"><code>startup.cmd -m standalone
</code></pre></li>
<li>
<p>Linux：</p>
<p>单机启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sh startup.sh -m standalone
</span></span></code></pre></div></li>
</ul>
<p>在浏览器中使用对应的IP和端口访问，如<code>http://localhost:8848/nacos</code>。</p>
<p>默认账号和密码均为<code>nacos</code>。</p>
<blockquote>
<p>更多Nacos的部署方式：<a href="/p/nacos-%e9%83%a8%e7%bd%b2/">Nacos 部署</a></p>
</blockquote>
<hr>
<h1 id="服务注册中心" data-numberify>服务注册中心<a class="anchor ms-1" href="#服务注册中心"></a></h1>
<h2 id="nacos-客户端依赖" data-numberify>Nacos 客户端依赖<a class="anchor ms-1" href="#nacos-客户端依赖"></a></h2>
<ul>
<li>
<p>父工程：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">    Spring Cloud Alibaba
</span></span></span><span class="line"><span class="cl"><span class="c">    包含了Nacos的版本管理
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-alibaba-dependencies<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>2.2.5.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>客户端：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Nacos 客户端 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>配置Nacos（<code>application.yml</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nacos</span><span class="p">:</span><span class="w"> </span><span class="c"># Nacos配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">server-addr</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:8848</span><span class="w"> </span><span class="c"># Nacos服务地址</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
<h2 id="服务器集群" data-numberify>服务器集群<a class="anchor ms-1" href="#服务器集群"></a></h2>
<p>在Nacos中配置服务器集群，需要在<code>application.yml</code>使用来配置<code>spring.cloud.nacos.discovery.cluster-name</code>客户端服务器的集群名称：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nacos</span><span class="p">:</span><span class="w"> </span><span class="c"># Nacos配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">server-addr</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:8848</span><span class="w"> </span><span class="c"># Nacos服务地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">discovery</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">cluster-name</span><span class="p">:</span><span class="w"> </span><span class="l">HZ </span><span class="w"> </span><span class="c"># 集群名称</span><span class="w">
</span></span></span></code></pre></div><p>使用Nacos提供的集群配置，就可以将同一机房内的实例划分为一个集群。</p>
<p><picture><img class="img-fluid " alt="服务器集群" src="/docs/spring/springcloud/nacos/uTools_1688717062670.png" loading="lazy" width="1145" height="540" />
</picture>

</p>
<h2 id="负载均衡策略" data-numberify>负载均衡策略<a class="anchor ms-1" href="#负载均衡策略"></a></h2>
<p>Nacos提供了一个负载均衡策略<code>NacosRule</code>配置它和配置其它的Ribbon负载均衡策略相同。在<code>application.yml</code>中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">service-name</span><span class="p">:</span><span class="w"> </span><span class="c"># 服务名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ribbon</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 负载均衡规则</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Nacos提供的负载均衡策略</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">NFLoadBalancerRuleClassName</span><span class="p">:</span><span class="w"> </span><span class="l">com.alibaba.cloud.nacos.ribbon.NacosRule</span><span class="w">
</span></span></span></code></pre></div><p>当然也可以使用Bean的方式配置全局的负载均衡策略：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">IRule</span> <span class="nf">getLoadBalancerRule</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">NacosRule</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>NacosRule</code>会根据当前服务所在的集群，优先挑选与当前服务相同的集群。因为在同一机房同一集群的配置下，访问本地的集群（即相同的集群）速度将会更快。如果相同的集群下无可用实例，才会选择其它示例，并且控制台会给出警告。如果在相同集群的情况下，则使用随机轮询，随机选择一个实例。</p>
<h2 id="访问权重" data-numberify>访问权重<a class="anchor ms-1" href="#访问权重"></a></h2>
<p>默认情况下使用NacosRule是在同集群内随机挑选，并不会考虑机器的性能问题。</p>
<p>为了让性能更快的服务可以被分配到更多的请求，Nacos提供了权重配置来控制访问频率。使用访问权重，可以调节服务被访问到的概率。访问权重的<u>取值为0~1</u>，<u>默认值是1</u>，<u>权重越高</u>，被访问到的<u>概率就越大</u>。如果将访问<u>权重修改为0</u>，那么该实例将<u>永远不会被访问</u>。</p>
<blockquote>
<p>将访问权重修改为0并不意味着服务器停机，只是后续的请求不会使用到这个服务器，而当前该服务器所处理的请求还会继续。</p>
</blockquote>
<p>修改访问权重可以在Nacos控制台中修改：</p>
<p>例如，修改<code>user-service</code>的权重，找到<code>user-service</code>的实例列表，点击编辑，即可修改权重：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springcloud/nacos/image-20210713235133225.png" loading="lazy" width="1229" height="357" />
</picture>

</p>
<p>在弹出的编辑窗口，修改权重：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springcloud/nacos/image-20210713235235219.png" loading="lazy" width="749" height="639" />
</picture>

</p>
<h2 id="非临时实例" data-numberify>非临时实例<a class="anchor ms-1" href="#非临时实例"></a></h2>
<p>Nacos的服务实例（服务提供者）分为两种类型：</p>
<ul>
<li><strong>临时实例</strong>：如果实例宕机超过一定时间，会从服务列表剔除，是所有实例默认的类型。</li>
<li><strong>非临时实例</strong>（永久实例）：如果实例宕机，不会将其从服务列表剔除。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nacos</span><span class="p">:</span><span class="w"> </span><span class="c"># Nacos配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">server-addr</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:8848</span><span class="w"> </span><span class="c"># Nacos服务地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">discovery</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ephemeral</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">  </span><span class="c"># 注册为非临时实例</span><span class="w">
</span></span></span></code></pre></div><h2 id="环境隔离" data-numberify>环境隔离<a class="anchor ms-1" href="#环境隔离"></a></h2>
<p>Nacos提供了<code>namespace</code>（命名空间）来实现环境隔离功能。默认情况下，所有<code>service</code>、<code>data</code>、<code>group</code>都在同一个名为<code>public</code>的<code>namespace</code>。每个<code>namespace</code>都有一个唯一的ID，并且不同<code>namespace</code>下的服务之间互不可见。<code>namespace</code>可以在Nacos控制台中创建。</p>
<p>为服务设置<code>namespace</code>，需要在<code>application.yml</code>中配置<code>spring.cloud.nacos.discovery.namespace</code>，它的值为对应命名空间的ID：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nacos</span><span class="p">:</span><span class="w"> </span><span class="c"># Nacos配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">server-addr</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:8848</span><span class="w"> </span><span class="c"># Nacos服务地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">discovery</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 命名空间，值为对应命名空间的ID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">df79820e-775d-4787-b0a8-0b6e5fabeb13</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="nacos-与-eureka-的区别" data-numberify>Nacos 与 Eureka 的区别<a class="anchor ms-1" href="#nacos-与-eureka-的区别"></a></h1>
<p><picture><img class="img-fluid " alt="Nacos远程调用流程" src="/docs/spring/springcloud/nacos/uTools_1688717257055.png" loading="lazy" width="966" height="370" />
</picture>

</p>
<p>Nacos和Eureka整体结构类似，都有服务注册、服务拉取、心跳等待等，但是也存在一些差异：</p>
<ul>
<li>共同点：
<ul>
<li>都支持服务注册和服务拉取。</li>
<li>都支持服务提供者心跳方式做健康检测。</li>
</ul>
</li>
<li>不同点：
<ul>
<li>
<p>Nacos支持服务端主动检测提供者状态：</p>
<ul>
<li>临时实例采用心跳模式；</li>
<li>非临时实例采用主动检测模式。</li>
</ul>
<p>主动检测的弊端：会给服务器造成一定的压力。一般情况下使用临时实例的心跳模式即可。</p>
</li>
<li>
<p>在Nacos中，临时实例心跳不正常会被剔除，非临时实例则不会被剔除。</p>
</li>
<li>
<p>Nacos支持服务列表变更的消息推送模式，服务列表更新更加及时。</p>
</li>
<li>
<p>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式。</p>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="配置管理" data-numberify>配置管理<a class="anchor ms-1" href="#配置管理"></a></h1>
<p>Nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</p>
<p>在Nacos中，配置获取的步骤如下：</p>
<ol>
<li>项目启动。</li>
<li>读取Nacos中的给服务定义的配置文件。</li>
<li>读取本地配置文件<code>application.yml</code>。与上一步在Nacos中读取到的配置相合并。</li>
<li>创建Spring容器。</li>
<li>加载Bean</li>
</ol>
<p>依赖<code>pom.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Nacos配置管理依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>新建配置文件<code>bootstrap.yml</code>，进行如下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">service-name</span><span class="w"> </span><span class="c"># 服务名</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">profiles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">active</span><span class="p">:</span><span class="w"> </span><span class="l">env-name</span><span class="w"> </span><span class="c"># 环境名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nacos</span><span class="p">:</span><span class="w"> </span><span class="c"># Nacos 配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">server-addr</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:8848</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">file-extension</span><span class="p">:</span><span class="w"> </span><span class="l">yml</span><span class="w"> </span><span class="c"># 配置文件后缀名</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>依赖和配置在需要配置管理的服务中添加和修改。</p>
<p>在<code>bootstrap.yml</code>中已经配置过的配置，在<code>application.yml</code>中可以不用重复配置。</p>
</blockquote>
<p>在Nacos控制台中添加配置文件：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springcloud/nacos/image-20210714164742924.png" loading="lazy" width="1466" height="600" />
</picture>

</p>
<p>对新添加的配置文件进行编辑，编辑完成好后点击发布进行提交：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springcloud/nacos/uTools_1689498771620.png" loading="lazy" width="872" height="771" />
</picture>

</p>
<h2 id="多环境配置共享" data-numberify>多环境配置共享<a class="anchor ms-1" href="#多环境配置共享"></a></h2>
<p>微服务启动时会从Nacos中读取多个配置文件：</p>
<ul>
<li><code>[service-name]-[env-name].[file-extension]</code>：<strong>当前环境配置</strong>。只能在对应环境的情况下进行读取。</li>
<li><code>[service-name].[file-extension]</code>：<strong>共享环境配置</strong>。无论当前实例处于什么环境下，该文件一定会被加载。所以多环境共享配置可以写在这个文件中。</li>
</ul>
<blockquote>
<p><code>[file-extension]</code>为配置中对应的文件扩展名。</p>
</blockquote>
<h2 id="读取配置" data-numberify>读取配置<a class="anchor ms-1" href="#读取配置"></a></h2>
<ul>
<li>
<p>使用<code>@RefreshScope</code>注解进行配置自动刷新：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RefreshScope</span>   <span class="c1">// 配置自动刷新
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${pattern.dateformat}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">dateformat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 返回当前按照规定格式进行格式化的时间
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/now&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">now</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">format</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="n">dateformat</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>使用<code>@ConfigurationProperties</code>注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Data</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 读取以pattern为开头的配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">&#34;pattern&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PatternProperties</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">dateformat</span><span class="o">;</span>  <span class="c1">// 相当于 pattern.dateformat
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">PatternProperties</span> <span class="n">properties</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/now&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">now</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">format</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="n">properties</span><span class="o">.</span><span class="na">getDateformat</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用<code>@ConfigurationProperties</code>注解将配置读取到类中，在配置更改的时候，类将会自动更新，而无需使用<code>@RefreshScope</code>注解。</p>
</li>
</ul>
<h2 id="配置文件优先级" data-numberify>配置文件优先级<a class="anchor ms-1" href="#配置文件优先级"></a></h2>
<p>Nacos中多种配置文件的优先级从高到低的顺序如下：</p>
<ol>
<li><code>[service-name]-[env-name].yml</code></li>
<li><code>[service-name].yml</code></li>
<li>本地配置文件（如<code>application.yml</code>，本地配置文件也有自己的优先级）</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>RestTemplate</title>
      <link>/docs/spring/springcloud/remote-call/</link>
      <pubDate>Mon, 26 Jun 2023 11:46:12 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/remote-call/</guid>
      <description><![CDATA[微服务远程调用 在微服务架构中，不同微服务都应该有自己独立的数据库以减少服务之间的冗余。而不同的服务之间可能需要共享数据。但拆分后的服务，它们]]></description>
      <content:encoded><![CDATA[<h1 id="微服务远程调用" data-numberify>微服务远程调用<a class="anchor ms-1" href="#微服务远程调用"></a></h1>
<p>在微服务架构中，不同微服务都应该有自己独立的数据库以减少服务之间的冗余。而不同的服务之间可能需要共享数据。但拆分后的服务，它们的数据库是相互独立的，一个服务不可能去调用另一个服务的数据库，所以服务之间的信息共享成为一个问题。</p>
<p>为了解决服务之间的信息共享，微服务通过将业务暴露为接口，以供其它微服务使用。这种服务调用方式与用户调用服务的方式是相同的，都是通过URL来远程调用接口。</p>
<p>在微服务远程调用中，有一下两种角色：</p>
<ul>
<li>
<p>服务<strong>提供者</strong>（Provider）：一次业务中，被其它微服务调用的服务。</p>
<p>即提供接口给其它微服务的服务。</p>
</li>
<li>
<p>服务<strong>消费者</strong>（Consumer）：一次业务中，调用其它微服务的服务。</p>
<p>即调用其它微服务提供的接口的服务。</p>
</li>
</ul>
<p>服务的角色是相对而言的。抛开业务来讲，服务既可以是提供者也可以消费者。</p>
<hr>
<h1 id="resttemplate-远程调用" data-numberify>RestTemplate 远程调用<a class="anchor ms-1" href="#resttemplate-远程调用"></a></h1>
<p>在SpringCloud中，微服务的远程调用方式可以通过<code>RestTemplate</code>发起HTTP请求来调用。而HTTP请求做远程调用是与语言无关的调用，只要知道对方的ip、端口、接口路径、请求参数即可。</p>
<p>例如有两个服务，分别是用户服务和订单服务，订单服务在获取订单信息时需要将用户信息一同发送：</p>
<ol>
<li>
<p>使用<code>RestTemplate</code>需要先进行注册（配置）。</p>
<p>在订单服务模块（消费者）中新建一个配置并声明一个Bean：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 创建RestTemplate，并注入Spring容器
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">RestTemplate</span> <span class="nf">getRestTemplate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">RestTemplate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>OrderService</code>中注入<code>RestTemplate</code>，并通过<code>RestTemplate</code>远程调用用户服务模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">OrderMapper</span> <span class="n">orderMapper</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 注入RestTemplate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RestTemplate</span> <span class="n">restTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Order</span> <span class="nf">queryOrderById</span><span class="o">(</span><span class="n">Long</span> <span class="n">orderId</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1.查询订单
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">orderMapper</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">orderId</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2.利用RestTemplate发起HTTP请求，查询用户信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 2.1.URL路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;http://localhost:8081/user/&#34;</span> <span class="o">+</span> <span class="n">order</span><span class="o">.</span><span class="na">getUserId</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2.2.发送HTTP（GET）请求，实现远程调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForObject</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 3.封装User到Order
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">order</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 4.返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">order</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>RestTemplate.getForObject()</code>是<code>RestTemplate</code>调用HTTP-GET请求的方法，该方法接收一个字符串类型的URL参数，并可以通过<code>.class</code>来指定响应的类型。</p>
<p>用户服务模块中相应的接口如下（假设服务的端口为本地<code>8081</code>端口）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据用户ID获取用户信息
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param id 用户ID
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return 用户信息
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">queryById</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">&#34;id&#34;</span><span class="o">)</span> <span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">queryById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<p>使用<code>RestTemplate</code>存在以下问题：</p>
<ul>
<li>URL的硬编码问题。</li>
<li>服务消费者该如何获取服务提供者的地址信息。</li>
<li>如果有多个服务提供者，消费者该如何选择。</li>
<li>消费者如何得知服务提供者的健康状态。</li>
</ul>
<blockquote>
<p><code>RestTemplate</code>是Spring Cloud自带的，所以不用引入依赖。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Spring 环境和配置</title>
      <link>/docs/spring/springcloud/spring-cloud-config/</link>
      <pubDate>Mon, 26 Jun 2023 11:46:12 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/spring-cloud-config/</guid>
      <description><![CDATA[微服务需要根据业务模块拆分，做到单一职责，不要重复开发相同业务。 父工程 微服务是一种分布式开发，要将一个项目拆分为若干个服务，所以会有很多个服]]></description>
      <content:encoded><![CDATA[<p>微服务需要根据业务模块拆分，做到单一职责，不要重复开发相同业务。</p>
<h1 id="父工程" data-numberify>父工程<a class="anchor ms-1" href="#父工程"></a></h1>
<p>微服务是一种分布式开发，要将一个项目拆分为若干个服务，所以会有很多个服务模块。而要统一管理这些服务模块，可以创建一个父工程来管理。</p>
<p>在Maven中，用来统一管理的父工程是一个不包含实际代码，只含有<code>pom.xml</code>的模块。通过在<code>pom.xml</code>定义一些统一的信息（如依赖、依赖的版本等等），从而来管理整个工程。</p>
<p>父工程Maven依赖（<code>pom.xml</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>asia.linner.demo<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>cloud-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 声明子模块 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modules&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>user-service<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>order-service<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/modules&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 打包方式 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 父工程 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>2.3.9.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;relativePath/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/parent&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.reporting.outputEncoding&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;spring-cloud.version&gt;</span>Hoxton.SR10<span class="nt">&lt;/spring-cloud.version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mysql.version&gt;</span>5.1.47<span class="nt">&lt;/mysql.version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mybatis.version&gt;</span>2.1.1<span class="nt">&lt;/mybatis.version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 声明依赖，并不进行导入（子模块依然需要导入，但不用指定版面） --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencyManagement&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- SpringCloud依赖库 --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;artifactId&gt;</span>spring-cloud-dependencies<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;version&gt;</span>${spring-cloud.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- MySQL驱动 --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;version&gt;</span>${mysql.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- MyBatis --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;version&gt;</span>${mybatis.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencyManagement&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.projectlombok<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>lombok<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>其中主要的有：</p>
<ul>
<li>
<p>父工程：和SpringBoot一样，使用SpringCloud需要导入父工程。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 父工程 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>2.3.9.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;relativePath/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/parent&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>SpringCloud依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- SpringCloud依赖库 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-dependencies<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>${spring-cloud.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>声明在<code>&lt;dependencyManagement&gt;</code>的<code>&lt;dependencies&gt;</code>中。SpringCloud依赖库定义了SpringCloud的依赖以及它们的版本。</p>
<blockquote>
<p><code>&lt;dependencyManagement&gt;</code>是对整个项目的依赖版本的管理。在<code>&lt;dependencyManagement&gt;</code>元素中声明所依赖的jar包的版本号等信息，那么所有子项目再次引入此依赖jar包时则无需显式的列出版本号，Maven会沿着父子层级向上寻找拥有<code>&lt;dependencyManagement&gt;</code>元素的项目，然后使用它指定的版本号。</p>
<p>例如在SpringBoot中，引入了父工程<code>spring-boot-starter-parent</code>，那么引入<code>spring-boot-starter-web</code>这些在父工程中已经将版本定义好了的依赖，就无需在当前工程的<code>pom.xml</code>中指定版本。</p>
<p>在当前<code>&lt;dependencies&gt;</code>（不是<code>&lt;dependencyManagement&gt;</code>下的<code>&lt;dependencies&gt;</code>中声明的依赖，会直接被导入，并且被子子项目所继承。</p>
</blockquote>
</li>
<li>
<p><code>&lt;modules&gt;</code>：利用<code>&lt;modules&gt;</code>可以很好地进行多模块开发。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 声明模块 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;modules&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;module&gt;</span>user-service<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;module&gt;</span>order-service<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/modules&gt;</span>
</span></span></code></pre></div><p>在构建当前项目时，Maven会根据<code>&lt;modules&gt;</code>中的声明，去寻找相应的模块并自动完成构建。</p>
<p><code>&lt;modules&gt;</code>的值是对应模块的<code>&lt;artifactId&gt;</code>的值。</p>
</li>
</ul>
<h1 id="微服务拆分" data-numberify>微服务拆分<a class="anchor ms-1" href="#微服务拆分"></a></h1>
<p>子模块Maven依赖示例（<code>pom.xml</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 与父工程中所定义的相对应 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>asia.linner.demo<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>cloud-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/parent&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>user-service<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- MySQL --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- MyBatis --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;finalName&gt;</span>app<span class="nt">&lt;/finalName&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/build&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>其中，该项目的父工程为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>asia.linner.demo<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>cloud-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/parent&gt;</span>
</span></span></code></pre></div><p>模块声明的父工程对应父工程中定义的<code>&lt;groupId&gt;</code>、<code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>。当前项目会继承父工程中定义的版本号和依赖。所以<code>spring-boot-starter-web</code>、<code>mysql-connector-java</code>和<code>mybatis-spring-boot-starter</code>都无需显式地声明版本。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>微服务简介</title>
      <link>/docs/spring/springcloud/introduction/</link>
      <pubDate>Mon, 26 Jun 2023 11:46:12 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/introduction/</guid>
      <description><![CDATA[微服务架构 从前的项目是使用单体架构，单体架构是指将业务的所有功能集中在一个项目中开发，打成一个包部署。 单体架构的优点是： 架构简单； 部署成本低]]></description>
      <content:encoded><![CDATA[<h1 id="微服务架构" data-numberify>微服务架构<a class="anchor ms-1" href="#微服务架构"></a></h1>
<p>从前的项目是使用单体架构，单体架构是指<u>将业务的所有功能集中在一个项目中开发，打成一个包部署</u>。</p>
<p>单体架构的优点是：</p>
<ul>
<li>架构简单；</li>
<li>部署成本低。</li>
</ul>
<p>缺点是模块之间的耦合度高，不利于大型项目开发。</p>
<p>随着互联网行业的发展，服务架构从单体架构逐渐演变为现在流行的微服务架构（属于分布式架构的一种）。</p>
<p><picture><img class="img-fluid " alt="微服务架构" src="/docs/spring/springcloud/introduction/uTools_1687757195463.png" loading="lazy" width="624" height="544" />
</picture>

</p>
<p>分布式架构是指<u>根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务</u>。</p>
<p>分布式架构的优点：</p>
<ul>
<li>降低服务之间的耦合；</li>
<li>有利于服务升级拓展。</li>
</ul>
<p>微服务是一种经过良好架构设计的分布式架构方案。</p>
<p>微服务的架构特征：</p>
<ul>
<li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责。</li>
<li>自治：团队独立、技术独立、数据独立，独立部署和交付。</li>
<li>面向服务：服务提供统一标准的接口，与语言和技术无关。</li>
<li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题。</li>
</ul>
<p>微服务按照服务的不同将项目分为不同的项目，每个项目运行一个服务。</p>
<p>例如，将用户服务和订单服务分为两个项目。</p>
<h1 id="微服务技术栈" data-numberify>微服务技术栈<a class="anchor ms-1" href="#微服务技术栈"></a></h1>
<p>微服务技术栈包括：</p>
<ul>
<li>微服务技术</li>
<li>异步通讯技术</li>
<li>缓存技术</li>
<li>DevOps</li>
<li>搜索技术</li>
</ul>
<h1 id="微服务技术" data-numberify>微服务技术<a class="anchor ms-1" href="#微服务技术"></a></h1>
<blockquote>
<p>在国内知名的微服务落地技术有SpringCloud和阿里的Dubbo。</p>
</blockquote>
<p>常见微服务技术的对比：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><br></th>
<th style="text-align:center">Dubbo</th>
<th style="text-align:center">SpringCloud</th>
<th style="text-align:left">SpringCloudAlibaba</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">注册中心</td>
<td style="text-align:center"><code>Zookeeper</code>、<code>Redis</code></td>
<td style="text-align:center">Eureka、Consul</td>
<td style="text-align:left">Nacos、Eureka</td>
</tr>
<tr>
<td style="text-align:center">服务远程调用</td>
<td style="text-align:center">Dubbo协议</td>
<td style="text-align:center">Feign（HTTP协议）</td>
<td style="text-align:left">Dubbo、Feign</td>
</tr>
<tr>
<td style="text-align:center">配置中心</td>
<td style="text-align:center">无</td>
<td style="text-align:center">SpringCloudConfig</td>
<td style="text-align:left">SpringCloudConfig、Nacos</td>
</tr>
<tr>
<td style="text-align:center">服务网关</td>
<td style="text-align:center">无</td>
<td style="text-align:center">SpringCloudGateway、Zuul</td>
<td style="text-align:left">SpringCloudGateway、Zuul</td>
</tr>
<tr>
<td style="text-align:center">服务监控和保护</td>
<td style="text-align:center">dubbo-admin（功能弱）</td>
<td style="text-align:center">Hystix</td>
<td style="text-align:left">Sentinel</td>
</tr>
</tbody>
</table>
<blockquote>
<p><a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener noreferrer">SpringCloud 官网<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配。而SpringCloud与SpringBoot的之间的版本存在一个兼容关系，可通过官网的说明文档查看。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>软考概念总结篇</title>
      <link>/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/</link>
      <pubDate>Thu, 25 May 2023 11:34:54 +0800</pubDate>
      
      <guid>/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/</guid>
      <description><![CDATA[计算机系统 跳转连接：软件设计师——计算机系统篇 基本单位 位（比特） 最小数据单位 bit、b 字节 最小存储单位 byte、B 1B = 8b 千字节 KB 1KB = 1024B 兆字节]]></description>
      <content:encoded><![CDATA[<h1 id="计算机系统" data-numberify>计算机系统<a class="anchor ms-1" href="#计算机系统"></a></h1>
<p>跳转连接：<a href="/p/%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%b3%bb%e7%bb%9f%e7%af%87/">软件设计师——计算机系统篇</a></p>
<h2 id="基本单位" data-numberify>基本单位<a class="anchor ms-1" href="#基本单位"></a></h2>
<table>
<tr>
    <td>位（比特）<br>最小数据单位</td>
    <td><b>bit、b</b></td>
    <td></td>
</tr>
<tr>
    <td>字节<br>最小存储单位</td>
    <td>byte、B</td>
    <td>1B = 8b</td>
</tr>
<tr>
    <td>千字节</td>
    <td>KB</td>
    <td>1KB = 1024B</td>
</tr>
<tr>
    <td>兆字节</td>
    <td>MB</td>
    <td>1MB = 1024KB</td>
</tr>
<tr>
    <td>吉字节</td>
    <td>GB</td>
    <td>1GB = 1024MB</td>
</tr>
<tr>
    <td>太字节</td>
    <td>TB</td>
    <td>1TB = 1024GB</td>
</tr>
</table>
<h2 id="中央处理单元" data-numberify>中央处理单元<a class="anchor ms-1" href="#中央处理单元"></a></h2>
<p>CPU的功能：</p>
<table>
<thead>
<tr>
<th style="text-align:center">功能</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">程序控制</td>
<td style="text-align:left">通过执行指令来控制程序的执行顺序。</td>
</tr>
<tr>
<td style="text-align:center">操作控制</td>
<td style="text-align:left">CPU产生每条指令的（若干）操作信号并将操作信号送往对应的部件，控制相应的部件按指令的功能要求进行操作。</td>
</tr>
<tr>
<td style="text-align:center">时间控制</td>
<td style="text-align:left">对各种操作进行时间上的控制，即指令执行过程中操作信号的出现时间、持续时间及出现的时间顺序都需要进行严格控制。</td>
</tr>
<tr>
<td style="text-align:center">数据处理</td>
<td style="text-align:left">通过对数据进行算术运算及逻辑运算等方式进行加工处理，数据加工处理的结果被人们所利用。</td>
</tr>
</tbody>
</table>
<p>CPU的组成：</p>
<ul>
<li>运算器：
<ul>
<li>算术逻辑单元（ALU）：处理数据，对数据进行算术运算和逻辑运算。</li>
<li>累加寄存器（AC，累加器）：通用寄存器，存放操作数或者结果。。</li>
<li>数据缓冲寄存器（DR）：暂存由内存读/写的一条指令或一个数据字。</li>
<li>状态条件寄存器（PSW）：保存了当前指令执行完成之后的状态。</li>
</ul>
</li>
<li>控制器：
<ul>
<li>指令寄存器（IR）：暂存要执行的指令。</li>
<li>程序计数器（PC，指令计数器）：寄存信息和指令计数。</li>
<li>地址寄存器（AR）：保存当前CPU所访问的内存单元的地址。</li>
<li>指令译码器（ID）。</li>
</ul>
</li>
<li>寄存器组</li>
<li>内部总线</li>
</ul>
<h2 id="数据编码" data-numberify>数据编码<a class="anchor ms-1" href="#数据编码"></a></h2>
<p><picture><img class="img-fluid " alt="带符号数的范围" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E8%8C%83%E5%9B%B4.png" loading="lazy" width="1174" height="273" />
</picture>

</p>
<h2 id="寻址方式" data-numberify>寻址方式<a class="anchor ms-1" href="#寻址方式"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">寻址方式</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">立即寻址</td>
<td style="text-align:left">操作数就包含在指令中。</td>
</tr>
<tr>
<td style="text-align:center">直接寻址</td>
<td style="text-align:left">操作数在内存，指令给出操作数的地址。</td>
</tr>
<tr>
<td style="text-align:center">寄存器寻址</td>
<td style="text-align:left">操作数在寄存器，指令给出操作数的寄存器名（地址）。</td>
</tr>
<tr>
<td style="text-align:center">寄存器间接寻址</td>
<td style="text-align:left">操作数在内存，寄存器存放操作数的地址，指令给出存放操作数地址的寄存器地址。</td>
</tr>
<tr>
<td style="text-align:center">间接寻址</td>
<td style="text-align:left">指令中给出操作数地址（操作数地址在内存中）的地址。</td>
</tr>
<tr>
<td style="text-align:center">相对寻址</td>
<td style="text-align:left">指令地址码给出的是一个偏移量（可正可负），操作数地址等于本条指令的地址加上该偏移量。</td>
</tr>
<tr>
<td style="text-align:center">变址寻址</td>
<td style="text-align:left">操作数地址等于变址寄存器的内容加偏移量。</td>
</tr>
</tbody>
</table>
<h2 id="校验码" data-numberify>校验码<a class="anchor ms-1" href="#校验码"></a></h2>
<p>编码系统的码距：</p>
<ul>
<li>$\ge 2$：该编码系统具有<u>检错能力</u>；</li>
<li>$\ge 3$：该编码系统才<u>可能有纠错能力</u>。</li>
</ul>
<p>奇偶校验码：</p>
<ul>
<li>码距为2。</li>
<li>仅能检测奇数位数出错。</li>
</ul>
<p>海明码：</p>
<p>设数据位是$n$位，校验位是$k$位，则$n$和$k$必须满足以下关系：</p>
<p>$$
2^k-1 \ge n+k
$$</p>
<p>循环冗余（n,k）码：</p>
<ul>
<li>信息码（数据），占k位；</li>
<li>校验码，占n-k位；</li>
<li>码距为2，可以检错不能纠错。</li>
</ul>
<h2 id="计算机指令集" data-numberify>计算机指令集<a class="anchor ms-1" href="#计算机指令集"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">RISC<br>精简指令集（计算机）</th>
<th style="text-align:center">CISC<br>复杂指令集（计算机）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">指令种类</td>
<td style="text-align:center">少、精简</td>
<td style="text-align:center">多、复杂</td>
</tr>
<tr>
<td style="text-align:center">指令复杂度</td>
<td style="text-align:center">低（简单）</td>
<td style="text-align:center">高（复杂）</td>
</tr>
<tr>
<td style="text-align:center">指令长度</td>
<td style="text-align:center">固定</td>
<td style="text-align:center">变化</td>
</tr>
<tr>
<td style="text-align:center">寻址方式</td>
<td style="text-align:center">少</td>
<td style="text-align:center">复杂多样</td>
</tr>
<tr>
<td style="text-align:center">实现（译码方式）</td>
<td style="text-align:center">硬布线控制逻辑（组合逻辑控制器）</td>
<td style="text-align:center">微程序控制技术</td>
</tr>
<tr>
<td style="text-align:center">通用寄存器数量</td>
<td style="text-align:center">多、大量</td>
<td style="text-align:center">一般</td>
</tr>
<tr>
<td style="text-align:center">流水线技术</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">不支持</td>
</tr>
</tbody>
</table>
<h2 id="流水线技术" data-numberify>流水线技术<a class="anchor ms-1" href="#流水线技术"></a></h2>
<p>执行$n$条指令：</p>
<ul>
<li>
<p>顺序执行总时间：</p>
<p>$$
顺序执行总时间=单条指令执行的时间\times n
$$</p>
</li>
<li>
<p>流水线执行总时间：</p>
<p>$$
流水线执行总时间=一条指令执行的时间+流水线周期 \times (n-1)
$$</p>
<p>流水线（操作）周期为执行时间最长的一段操作的时间。</p>
</li>
<li>
<p>连续输入$n$条指令的吞吐率：</p>
<p>$$
吞吐率=\cfrac {n}{总执行时间}
$$</p>
<p>如果是流水线的吞吐率，则总执行时间为流水线执行总时间。
流水线的吞吐率是最长流水段操作时间的倒数。即：</p>
<p>$$
最长流水段操作时间=\cfrac {流水线执行总时间}{n}
$$</p>
</li>
<li>
<p>加速比：</p>
<p>$$
加速比 = \cfrac{顺序执行总时间}{流水线执行总时间}
$$</p>
</li>
</ul>
<h2 id="存储器" data-numberify>存储器<a class="anchor ms-1" href="#存储器"></a></h2>
<p>按存储器所处位置可分为：</p>
<ul>
<li>内存（主存）：在主机内或主板上，存放机器当前运行所需的程序和数据，以便向CPU提供信息。（相对外存）容量小、速度快。</li>
<li>外存（辅存）：存放当前不参加运行的大量信息，在需要时调入内存。</li>
</ul>
<p>按存储器工作方式：</p>
<ul>
<li>读/写存储器（RAM）。</li>
<li>只读存储器：ROM、PROM、EPROM、EEPROM等。
<ul>
<li>固定只读存储器（ROM）：厂家生产时就写好数据在其中。只能读（用户）不能写。一般用于存放BIOS和微程序控制。</li>
<li>可编程读只读存储器（PROM）：其内容可以由用户一次性地写入，写入后不能再修改。</li>
</ul>
</li>
</ul>
<h2 id="缓存" data-numberify>缓存<a class="anchor ms-1" href="#缓存"></a></h2>
<p>高速缓存中的地址映像方法：</p>
<ul>
<li>
<p>直接映像：主存的块与Cache块的对应关系是固定的。冲突多、关系固定。</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679884025087.png" loading="lazy" width="825" height="526" />
</picture>

</p>
</li>
<li>
<p>全相联映像：允许主存的任一块调入Cache存储器的任一块。冲突少、关系不固定。</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679884252415.png" loading="lazy" width="730" height="538" />
</picture>

</p>
</li>
<li>
<p>组相联映像：将缓存和主存先分为组，组下再分为块。组与组采用直接映像，组内的块采用全相联映像。冲突较少，是直接映像与全相联映像的折中。</p>
</li>
</ul>
<blockquote>
<p>发生块冲突从多到少的顺序：直接映像 &gt; 组相联映像 &gt; 全相联映像。</p>
<p>地址映像都是由硬件自动完成。</p>
</blockquote>
<h2 id="中断" data-numberify>中断<a class="anchor ms-1" href="#中断"></a></h2>
<p>程序查询方式（程序直接控制方式）：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679888001780.png" loading="lazy" width="754" height="1174" />
</picture>

</p>
<ul>
<li>CPU和I/O只能串行工作。CPU需要一直轮询检查，长期处于忙等状态，CPU利用率低。</li>
<li>一次只能读/写一个字。</li>
<li>由CPU将数放入内存。</li>
</ul>
<p>中断驱动方式：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679888578058.png" loading="lazy" width="787" height="1134" />
</picture>

</p>
<ul>
<li>I/O设备通过中断信号主动向CPU报告I/O操作已完成。</li>
<li>CPU和I/O可并行工作。</li>
<li>CPU利用率得到提升。</li>
<li>一次只能读/写一个字。</li>
<li>由CPU将数据放入内存。</li>
</ul>
<p>DMA方式（直接存储器存储方式）：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1679888972074.png" loading="lazy" width="816" height="723" />
</picture>

</p>
<ul>
<li>CPU和I/O可并行工作。</li>
<li>仅在传送数据块多开始和结束时才需要CPU的干预。</li>
<li>由外设直接将数据放入内存。</li>
<li>一次读写的单位为&quot;块&quot;而不是字。</li>
</ul>
<p>DMA传输数据比中断驱动方式传输数据要快一点。</p>
<h2 id="总线" data-numberify>总线<a class="anchor ms-1" href="#总线"></a></h2>
<p>微机中的总线分为：</p>
<ul>
<li>数据总线</li>
<li>地址总线</li>
<li>控制总线</li>
</ul>
<p>常见总线：</p>
<ul>
<li>ISA总线。</li>
<li>EISA总线。</li>
<li>PCI总线：PCI总线是目前微型机上广泛采用的内总线，采用并行传输方式。</li>
<li>PCI Express 总线。</li>
<li>前端总线。</li>
<li>RS-232C。</li>
<li>SCSI总线：小型计算机系统接口（SCSI）是一条并行外总线。</li>
<li>SATA。</li>
<li>USB。</li>
<li>IEEE-1394。</li>
<li>IEEE-488总线。</li>
</ul>
<h2 id="加密与认证技术" data-numberify>加密与认证技术<a class="anchor ms-1" href="#加密与认证技术"></a></h2>
<p>加密技术用于防止第三方窃听：</p>
<ul>
<li>
<p>对称加密：只有一把密钥。加密和解密用同一把密钥。</p>
<ul>
<li>密钥分发有缺陷。</li>
<li>加密解密速度很快。</li>
<li>适合加量大量明文数据。</li>
</ul>
</li>
<li>
<p>非对称加密：</p>
<ul>
<li>加密和解密不是同一把密钥。</li>
<li>一共有两把密钥，分别是公钥和私钥。</li>
<li>用公钥加密只能用私钥解密，用私钥加密只能用公钥解密。</li>
<li>不能通过一把密钥推出另一把密钥。</li>
<li>用接收方的公钥加密明文可以实现防止窃听的效果。</li>
<li>密钥分发没有缺陷。</li>
<li>加密解密速度很慢。</li>
</ul>
</li>
</ul>
<p>认证技术用于防止篡改、假冒和否认：</p>
<ul>
<li>摘要（防止篡改）：Hash算法加密，放在密文后。</li>
<li>数字签名（防止假冒和否认）：<u>发送方用私钥对摘要进行签名</u>（加密）。接收方用<u>发送方的公钥对数字签名进行验证</u>（解密）。</li>
</ul>
<p>数字证书：CA机构用私钥对用户的公钥签名（加密）。接收方用CA的公钥验证（解密），从而得到用户的公钥。</p>
<p>加密算法：</p>
<ul>
<li>对称密钥（私钥、私有密钥加密）算法（共享密钥加密算法）：
<ul>
<li>DES</li>
<li>3DES</li>
<li>RC-5</li>
<li>IDEA</li>
<li>AES</li>
<li>RC4</li>
</ul>
</li>
<li>非对称密钥（公钥、公开密钥加密）算法：
<ul>
<li>RSA</li>
<li>ECC</li>
<li>DSA</li>
</ul>
</li>
<li>其他加密算法：
<ul>
<li>Hash函数</li>
<li>SHA-1安全散列算法</li>
<li>MD5摘要算法</li>
</ul>
</li>
</ul>
<h2 id="系统可靠度" data-numberify>系统可靠度<a class="anchor ms-1" href="#系统可靠度"></a></h2>
<p><picture><img class="img-fluid " alt="" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/%E4%B8%B2%E8%81%94%E7%B3%BB%E7%BB%9F.png" loading="lazy" width="1157" height="400" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/%E5%B9%B6%E8%81%94%E7%B3%BB%E7%BB%9F.png" loading="lazy" width="1133" height="376" />
</picture>

</p>
<hr>
<h1 id="程序设计语言" data-numberify>程序设计语言<a class="anchor ms-1" href="#程序设计语言"></a></h1>
<p>跳转连接：<a href="/p/%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e8%af%ad%e8%a8%80%e7%af%87/">软件设计师——程序设计语言篇</a></p>
<h2 id="编译过程" data-numberify>编译过程<a class="anchor ms-1" href="#编译过程"></a></h2>
<p><picture><img class="img-fluid " alt="编译过程" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680232196718.png" loading="lazy" width="549" height="466" />
</picture>

</p>
<p>必须的编译过程阶段：</p>
<ol>
<li>词法分析</li>
<li>语法分析</li>
<li>语义分析</li>
<li>目标代码生成</li>
</ol>
<p>可省略的编译过程阶段：</p>
<ul>
<li>中间代码生成</li>
<li>（中间或目标）代码优化</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">阶段</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">词法分析</td>
<td style="text-align:left">对源程序从前到后（从左到右）逐个字符地扫描，从中识别出一个个“单词”符号</td>
</tr>
<tr>
<td style="text-align:center">语法分析</td>
<td style="text-align:left">根据语言的语法规则将单词符号序列分解成各类语法单位</td>
</tr>
<tr>
<td style="text-align:center">语义分析</td>
<td style="text-align:left">检查源程序是否包含静态语义错误</td>
</tr>
<tr>
<td style="text-align:center">中间代码生成</td>
<td style="text-align:left">分水岭，上面是前端，下面是后端</td>
</tr>
<tr>
<td style="text-align:center">代码优化</td>
<td style="text-align:left">所做的优化一般与具体的机器无关</td>
</tr>
<tr>
<td style="text-align:center">目标代码生成</td>
<td style="text-align:left">把中间代码变换成机器指令</td>
</tr>
</tbody>
</table>
<h2 id="正规式" data-numberify>正规式<a class="anchor ms-1" href="#正规式"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">名称</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>*</code></td>
<td style="text-align:center">闭包</td>
<td style="text-align:left">表示其前面链接的符号或集合可以出现$[0, +\infty]$次。</td>
</tr>
<tr>
<td style="text-align:center"><code>·</code></td>
<td style="text-align:center">连接</td>
<td style="text-align:left">可省略，将多个符号或集合连接起来。表示逻辑与</td>
</tr>
<tr>
<td style="text-align:center"><code>|</code></td>
<td style="text-align:center">或</td>
<td style="text-align:left">表示逻辑或。</td>
</tr>
</tbody>
</table>
<p>Example：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/1680248469003.png" loading="lazy" width="990" height="277" />
</picture>

</p>
<p>设$U$、$V$和$W$均为正规式：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680249034196.png" loading="lazy" width="974" height="185" />
</picture>

</p>
<h2 id="有限自动机" data-numberify>有限自动机<a class="anchor ms-1" href="#有限自动机"></a></h2>
<ul>
<li>
<p><strong>确定的有限自动机</strong>（Deterministic Finite Automata，DFA）：对每一个状态来说识别字符后转移的<strong>状态是唯一的</strong>。</p>
<p>一个DFA是一个<strong>五元组</strong>$(S, \Sigma, f, s_0, Z)$：</p>
<ul>
<li>
<p>$S$：包含<u>状态的有限集</u>（每个元素称为一个状态）。</p>
</li>
<li>
<p>$\Sigma$：有穷<u>字母表</u>，其每个元素称为一个<u>输入字符</u>。</p>
</li>
<li>
<p>$f$：$S \times \Sigma \to S$ 上的<u>单值部分映像</u>。</p>
<p>$$
f(A,a)=Q \qquad A \in S, a \in \Sigma
$$</p>
<p>表示当前状态为$A$、输入为$a$时，将转换到下一状态$Q$，称$Q$为$A$的一个后继状态。</p>
</li>
<li>
<p>$s_0$：唯一的<u>开始状态</u>，$s_0 \in S$。</p>
</li>
<li>
<p>$Z$：非空的<u>终止状态集合</u>，$Z \subseteq S$。</p>
</li>
</ul>
<p>DFA可以用两种直观的方式表示：</p>
<ul>
<li>
<p><strong>状态转换图</strong>：简称为转换图，是一个有向图。</p>
<ul>
<li>
<p>DFA中的每个<strong>状态</strong>对应转换图中的一个<strong>结点</strong>。</p>
</li>
<li>
<p>DFA中的每个<strong>转换函数</strong>对应图中的一条<strong>有向弧</strong>。</p>
</li>
<li>
<p><strong>双圈表示的结点是终态结点。</strong></p>
<blockquote>
<p>终态也可以是初态。</p>
</blockquote>
</li>
</ul>
<p>若转换函数为$f(A,a)=Q$，则该有向弧从结点$A$出发，进入结点$Q$,字符$a$是弧上的标记。</p>
</li>
<li>
<p><strong>状态转换矩阵</strong>：用一个二位数组$M$表示。</p>
<p>矩阵元素$M[A,a]$：</p>
<ul>
<li><strong>行下标</strong>：表示状态。当前状态为$A$。</li>
<li><strong>列下标</strong>：表示输入的字符。当前输入为$a$。</li>
<li>$M[A,a]$的值：当前状态为$A$、输入为$a$时，应该转换到的下一状态。</li>
</ul>
</li>
</ul>
<p><picture><img class="img-fluid " alt="" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680251834262.png" loading="lazy" width="983" height="160" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680251962756.png" loading="lazy" width="982" height="585" />
</picture>

</p>
</li>
<li>
<p><strong>不确定的有限自动机</strong>（Nondeterministic Finite Automata，NFA）：对每一个状态来说识别字符后转移的<strong>状态是不唯一的</strong>。</p>
<p>NFA也是一个<strong>五元组</strong>$(S, \Sigma, f, s_0, Z)$。与DFA的区别是：</p>
<ul>
<li>
<p>$f$是$S \times \Sigma \to 2^S$ 上的映像。</p>
<p>对于$S$中的一个给定状态及输入符号，返回一个状态的集合。即当前状态的后继状态不一定是唯一的。</p>
</li>
<li>
<p>有向弧上的标记可以是 $\varepsilon$（$\varepsilon$ 表示空）。</p>
</li>
</ul>
<blockquote>
<p>DFA是NFA的特例。</p>
</blockquote>
<p><picture><img class="img-fluid " alt="" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680252743732.png" loading="lazy" width="918" height="407" />
</picture>

</p>
</li>
</ul>
<p><u>有限自动机识别成功的依据是路跑的通并且跑完后的终点是终态。</u></p>
<h2 id="设计语言成分" data-numberify>设计语言成分<a class="anchor ms-1" href="#设计语言成分"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">成分</th>
<th style="text-align:left">包含</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">数据成分</td>
<td style="text-align:left"><ul><li>标识符</li><li>关键字</li><li>常量</li><li>变量</li><li>全局量</li><li>局部量</li><li>数据类型</li></ul></td>
</tr>
<tr>
<td style="text-align:center">运算成分</td>
<td style="text-align:left"><ul><li>算数</li><li>关系</li><li>逻辑</li><li>位</li></ul></td>
</tr>
<tr>
<td style="text-align:center">控制结构</td>
<td style="text-align:left"><ul><li>顺序结构</li><li>选择结构</li><li>循环结构</li></ul></td>
</tr>
<tr>
<td style="text-align:center">传输成分</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">函数</td>
<td></td>
</tr>
</tbody>
</table>
<hr>
<h1 id="数据结构" data-numberify>数据结构<a class="anchor ms-1" href="#数据结构"></a></h1>
<p>跳转连接：<a href="/p/%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%af%87/">软件设计师——数据结构篇</a></p>
<h2 id="线性表" data-numberify>线性表<a class="anchor ms-1" href="#线性表"></a></h2>
<p><strong>顺序表：</strong></p>
<p>在表长为$n$的线性表中，有$n+1$个插入位置（不考虑插入是否会导致溢出）：</p>
<ul>
<li>
<p>在第$i$个插入位置插入，需要移动$n+1-i$个元素。</p>
<ul>
<li>在第1个位置插入（$a_1$）需要移动$n$个元素；</li>
<li>在第$n+1$个位置插入（$a_n$后面）不需要移动元素。</li>
</ul>
</li>
<li>
<p>设在第$i$个插入位置插入的概率为$p_i$，<u>等概率下插入</u>一个新元素需要移动的元素个数的<u>期望值$E_{insert}$</u>为：</p>
<p>$$
E_{insert} = \cfrac{插入位置数-1}{2} = \cfrac{n+1}{2}
$$</p>
</li>
</ul>
<p>在表长为$n$的线性表中删除元素时，共有$n$个可删除的元素：</p>
<ul>
<li>
<p>删除第$i$个元素$a_i$需要移动$n-i$个元素。</p>
<ul>
<li>删除元素$a_1$需要移动$n-1$个元素；</li>
<li>删除元素$a_n$不需要移动元素。</li>
</ul>
</li>
<li>
<p>设$a_i$被删除的概率为$q_i$，<u>等概率下删除元素</u>时需要移动的元素个数的<u>期望值$E_{delete}$</u>为：</p>
<p>$$
E_{delete} = \cfrac{删除位置数}{2} = \cfrac{n-1}{2}
$$</p>
</li>
</ul>
<p><strong>插入操作时间复杂度：</strong></p>
<ul>
<li>最好情况（在第$n+1$个位置插入）：$O(1)$；</li>
<li>最坏情况（在第1个位置插入）：$O(n)$；</li>
<li>平均复杂度：$O(n)$。</li>
</ul>
<p><strong>链表插入和删除操作时间复杂度</strong>（带不带头节点的复杂度都一样）：</p>
<ul>
<li>最好情况（在$i=1$位置）：$O(1)$；</li>
<li>最坏情况（在$n+1$位置插入/删除$n$位置）：$O(n)$</li>
<li>平均复杂度：$O(n)$</li>
</ul>
<h2 id="串的模式匹配" data-numberify>串的模式匹配<a class="anchor ms-1" href="#串的模式匹配"></a></h2>
<p>朴素的模式匹配（布鲁特一福斯）算法：</p>
<p>设主串和模式串的长度分别为$n$和$m$，算法时间复杂度和比较次数：</p>
<ul>
<li>
<p>最好情况：$O(m)$，次数为$m$；</p>
</li>
<li>
<p>最坏情况：$O(n \times m)$，次数为$\cfrac{1}{2} m(n-m+2)$：</p>
<p>$$
\sum_{i=0}^{n-m}{p_i\big( (i+1) \times m \big)} = \cfrac{m}{n-m+1} \sum_{i=0}^{n-m}{(i+1)} = \cfrac{1}{2} m(n-m+2)
$$</p>
</li>
<li>
<p>平均：$O(n+m)$，次数为$\cfrac{1}{2} (n+m)$：</p>
<p>$$
\sum_{i=0}^{n-m}{p_i(i+m)} = \cfrac{1}{n-m+1} \sum_{i=0}^{n-m}{i+m} = \cfrac{1}{2} (n+m)
$$</p>
</li>
</ul>
<h2 id="数组" data-numberify>数组<a class="anchor ms-1" href="#数组"></a></h2>
<p>设：</p>
<ul>
<li>二维数组为$A[n,m]$，$n$为行数，$m$为列数；</li>
<li>数组元素$a_{i,j},\ 0 \le i \le n-1,\ 0 \le j \le m-1$；</li>
<li>$LOC(a_{i,j})$为元素$a_{i,j}$的地址；</li>
<li>$L$为单个元素的存储空间大小。</li>
</ul>
<p>则有：</p>
<ul>
<li>
<p>以行为主序优先存储：</p>
<p>$$
LOC(a_{i,j}) = LOC(a_{0,0}) + (i \times n + j) \times L
$$</p>
<p>如果下标从1开始（$1 \le i \le n,\ 1 \le j \le m$）：</p>
<p>$$
LOC(a_{i,j}) = LOC(a_{1,1}) + \big( (i-1) \times n + (j-1) \big) \times L
$$</p>
</li>
<li>
<p>以列为主序优先存储：</p>
<p>$$
LOC(a_{i,j}) = LOC(a_{0,0}) + (i + j \times m) \times L
$$</p>
<p>如果下标从1开始（$1 \le i \le n,\ 1 \le j \le m$）：</p>
<p>$$
LOC(a_{i,j}) = LOC(a_{1,1}) + \big( (i-1) + (j-1) \times m \big) \times L
$$</p>
</li>
</ul>
<p><strong>对称矩阵：</strong></p>
<p>假设将$n$阶对称矩阵$A_{n \times n}$压缩存储到一维数组$B\left[ \cfrac{n(n+1)}{2} \right]$，则$B[k]\ (1 \le k \le \cfrac{n(n+1)}{2})$与矩阵元素$a_{ij}(a_{ji})\ (1 \le i,j \le n)$之间存在一一对应关系（以行为主序）：</p>
<p>$$
k =
\begin{cases}
\cfrac{i(i-1)}{2} + j, &amp; 当\ i \ge j \\
\cfrac{j(j-1)}{2} + i, &amp; 当\ i &lt; j
\end{cases}
$$</p>
<p>如果下标从0开始（第一个元素为$a_{00}$，$0 \le k \le \cfrac{n(n+1)}{2} - 1$，并且$0 \le i,j \le n-1$）：</p>
<p>$$
k =
\begin{cases}
\cfrac{i(i+1)}{2} + j + 1, &amp; 当\ i \ge j \\
\cfrac{j(j+1)}{2} + i + 1, &amp; 当\ i &lt; j
\end{cases}
$$</p>
<p><strong>三对角矩阵：</strong></p>
<p>设有$n$阶三对角矩阵$A_{n \times n}$，将其非0元素$a_{ij}(a_{ji})\ (1 \le i,j \le n)$存储在一维数组$B[k](1 \le k \le 3 \times n - 2)$中，则元素位置之间的对应关系为：</p>
<p>$$
k = 3 \times (i-1) - 1 + j - i + 1 + 1 = 2i + j -2
$$</p>
<p>如果下标从0开始（$0 \le k \le 3(n-1)$，并且$0 \le i,j \le n-1$）：</p>
<p>$$
k = 3 \times i - 1 + j - i + 1 + 1 = 2i + j + 1
$$</p>
<h2 id="树" data-numberify>树<a class="anchor ms-1" href="#树"></a></h2>
<ul>
<li>
<p>设$n$个结点的树，$d_i \ (1 \le i \le n)$为该树中结点的度：</p>
<p>$$
n = (\sum_{i=1}^{n}{d_i})+1
$$</p>
<p><strong>度</strong>：结点拥有的子树数。</p>
</li>
<li>
<p>度为$m$的树中第$i$层上至多有$m^{i-1}$个结点（$i \ge 1$）。</p>
</li>
<li>
<p>高度为$h$的$m$度树至多有$\cfrac{m^h-1}{m-1}$个结点。</p>
</li>
</ul>
<p><strong>二叉树：</strong></p>
<ul>
<li>
<p>第$i$层（$i \ge 1$）上<u>最多</u>有$2^{i-1}$个结点。</p>
</li>
<li>
<p>高度为$k$的二叉树最多有$2^k-1$个结点（$k \ge 1$）。</p>
</li>
<li>
<p>若二叉树终端结点数（度为0的结点数）为$n_0$，度2的结点数为$n_2$，则$n_0=n_2+1$。</p>
</li>
<li>
<p>具有$n$个结点的完全二叉树的深度（高度）为：</p>
<p>$$
\lfloor \log_2{n} \rfloor + 1;
$$</p>
<p>或：</p>
<p>$$
\lceil \log_2{(n+1)} \rceil
$$</p>
</li>
<li>
<p>二叉树形态总数（卡特兰数）：</p>
<p>$$
\cfrac{C^{n}_{2n}}{n+1}
$$</p>
</li>
</ul>
<p><strong>链式存储二叉树：</strong></p>
<p>设有$n$个结点的二叉树，则其<strong>空指针域数量</strong>：</p>
<ul>
<li>
<p>对于二叉链表：</p>
<ul>
<li>总指针域个数：$2n$；</li>
<li>分支数（子孙结点数，非空指针域个数）：$n-1$。</li>
</ul>
<p>可得：</p>
<p>$$
空指针域数=2n-(n-1)=n+1
$$</p>
</li>
<li>
<p>对于三叉链表：</p>
<ul>
<li>总指针域个数：$3n$；</li>
<li>分支数（子孙结点数）：$n-1$；</li>
<li>指向父结点且非空的指针域个数：$n-1$。</li>
</ul>
<p>即，非空指针域个数为：$2(n-1)$。</p>
<p>可得：</p>
<p>$$
空指针域数=3n-2(n-1)=n+2
$$</p>
</li>
</ul>
<p><strong>平衡二叉树：</strong></p>
<p>设一个二叉树的左右子树高度之差的绝对值为$d$，那么</p>
<ul>
<li>不平衡的二叉树：$d &gt; 1$；</li>
<li>平衡的二叉树：$d \le 1$。</li>
</ul>
<p><strong>哈夫曼树</strong>（最优二叉树）：带权路径长度最短。</p>
<p>设：</p>
<ul>
<li>带权叶子结点数：$n$；</li>
<li>叶子结点的权值：$w_k$；</li>
<li>叶子结点到根的路径长度：$l_k$。</li>
</ul>
<p>则树的带权路径长度为：</p>
<p>$$
WPL = \sum_{k=1}^{n}{w_kl_k}
$$</p>
<p>给定$n$个权值后，哈夫曼树的结点数$m$就确定了：</p>
<p>$$
m = 2 \times n - 1
$$</p>
<p><strong>哈夫曼压缩比：</strong></p>
<p><picture><img class="img-fluid " alt="压缩比例题" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1680959771881.png" loading="lazy" width="784" height="489" />
</picture>

</p>
<ol>
<li>
<p>按照<u>出现频率</u>计算<u>加权平均长度</u>：</p>
<p>$$
加权平均长度 = \sum_{i=1}^{5}{字符i的位数 \times 字符i出现频率}
$$</p>
<p>即：</p>
<p>$$
1 \times 40% + 3 \times (10% + 20% + 16% + 14%) = 2.2
$$</p>
<p>压缩后平均长度为2.2。</p>
</li>
<li>
<p>计算压缩比：</p>
<p>$$
压缩比 = \cfrac{压缩前编码长度 - 压缩后平均长度}{压缩前编码长度}
$$</p>
<p>即，</p>
<ul>
<li>
<p>编码5个字符至少需要3位：$2^2 &lt; 5 &lt; 2^3$，所以压缩前编码长度为3；</p>
</li>
<li>
<p>压缩比：</p>
<p>$$
\cfrac{3-2.2}{3} \approx 0.27
$$</p>
</li>
</ul>
</li>
</ol>
<h2 id="图" data-numberify>图<a class="anchor ms-1" href="#图"></a></h2>
<p><strong>完全图</strong>：</p>
<ul>
<li>$n$个顶点的无向完全图共有$\cfrac{n(n-1)}{2}$条边。</li>
<li>$n$个顶点的有向完全图共有$n(n-1)$条边。</li>
</ul>
<p>对于所有的图，其所有顶点的度数之和 $= 2e$（$e$为边数）。</p>
<p>$n$个结点的连通图，它的边的取值范围是$[n-1,\cfrac{n(n-1)}{2}]$。</p>
<p>图的邻接矩阵：横$i$竖$j$，横出竖入。</p>
<p><strong>深度优先搜索：</strong></p>
<ol>
<li>设置搜索指针$p$，使$p$指向顶点$v$；</li>
<li>访问$p$所指顶点，并使$p$指向与其<u>相邻接的且尚未被访问过</u>的顶点。</li>
<li>若$p$所指顶点存在，则重复步骤2，否则执行步骤4。</li>
<li>沿着访问的次序和方向回溯到最后一个有未被访问过的邻接顶点的顶点，并使$p$指向这个未被访问的顶点，然后重复步骤2到4，直到所有的项点均被访问为止。</li>
</ol>
<p><strong>广度优先搜索：</strong></p>
<ol>
<li>从图中的某个顶点$v$出发；</li>
<li>访问$v$后，依次访问$v$的各个未被访问过的邻接点；</li>
<li>分别从$v$的邻接点出发，依次访问它们的邻接点；</li>
<li>按照$v$的邻接点访问的先后顺序，重复步骤2到4，直到图中所有已被访问的项点的邻接点都被访问到；</li>
<li>若此时还有未被访问的顶点，则另选图中的一个未被访问的项点作为起点，重复上述过程，直到图中所有的顶点都被访问到为止。</li>
</ol>
<p>广度和深度优先搜索<strong>时间复杂度</strong>（一样）：</p>
<ul>
<li>邻接矩阵：$O(n^2)$；</li>
<li>邻接链表：$O(n+e)$。</li>
</ul>
<p><strong>AOV 网拓扑排序</strong>：如果所有顶点已输出，说明网中不存在回路，否则说明存在。</p>
<ol>
<li>在AOV网中选择一个入度为0的顶点且输出它。</li>
<li>从网中删除该顶点及与该顶点有关的所有弧。</li>
<li>重复上述两步，直到网中不存在入度为0的顶点为止。</li>
</ol>
<hr>
<h1 id="操作系统" data-numberify>操作系统<a class="anchor ms-1" href="#操作系统"></a></h1>
<p>跳转连接：<a href="/p/%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f%e7%af%87/">软件设计师——操作系统篇</a></p>
<h2 id="进程的三态" data-numberify>进程的三态<a class="anchor ms-1" href="#进程的三态"></a></h2>
<ul>
<li><strong>运行</strong>：当一个进程在处理机上运行时。</li>
<li><strong>就绪</strong>：一个进程获得了除处理机外的一切所需资源，一旦得到处理机即可运行（还未得到）。</li>
<li><strong>阻塞</strong>（等待或睡眠）：一个进程正在等待某一事件发生而暂时停止运行，这时即使把处理机分配给进程也无法运行。</li>
</ul>
<h2 id="同步互斥" data-numberify>同步互斥<a class="anchor ms-1" href="#同步互斥"></a></h2>
<ul>
<li>
<p><strong>同步</strong>：指在系统中一些需要相互合作，协同工作的进程。</p>
</li>
<li>
<p><strong>互斥</strong>：指系统中多个进程因争用临界资源而互斥执行。</p>
</li>
<li>
<p>临界资源（CR）：在多道程序系统环境中，那些一次只能供一个进程使用的资源。如打印机、共享变量和表格等。</p>
</li>
<li>
<p>临界区（CS）：是进程中对临界资源实施操作的那段程序。</p>
<p>互斥临界区管理的4条原则：有空即进、无空则等、有限等待和让权等待。</p>
</li>
</ul>
<h2 id="信号量" data-numberify>信号量<a class="anchor ms-1" href="#信号量"></a></h2>
<ul>
<li>公用信号量：实现进程间的互斥，初值为<code>1</code>或资源的数目。</li>
<li>私用信号量：实现进程间的同步，初值为<code>0</code>或某个正整数。</li>
</ul>
<p>信号量$S$的物理意义：</p>
<ul>
<li>$S \ge 0$：表示某资源的可用数，此时<strong>有可用资源</strong>；</li>
<li>$S &lt; 0$：则其绝对值表示阻塞队列中等待该资源的进程数，此时无可用资源，并且有进程被阻塞。</li>
</ul>
<p>PV操作：P申请V释放，P减V加，P进V出。</p>
<ul>
<li>P操作$S &lt; 0$：无可用资源，置该进程为<strong>阻塞</strong>状态。</li>
<li>V操作$S \le 0$：表示释放前有程序被阻塞，从阻塞状态唤醒一个进程，并将其插入就绪队列。</li>
</ul>
<p>假定信号量S表示某条消息，进程可以：</p>
<ul>
<li>调用P操作：测试消息是否到达；</li>
<li>调用V操作：通知消息已经准备好。</li>
</ul>
<h2 id="死锁" data-numberify>死锁<a class="anchor ms-1" href="#死锁"></a></h2>
<p>产生死锁的原因：</p>
<ul>
<li>进程间互相<u>竞争资源</u>。</li>
<li><u>进程推进顺序非法</u>。</li>
</ul>
<p>产生死锁的4个必要条件：</p>
<ul>
<li>互斥条件</li>
<li>请求保持条件</li>
<li>不可剥夺条件</li>
<li>环路条件</li>
</ul>
<p>发生死锁时，在进程资源有向图中必构成环路。</p>
<p>造成死锁的情况：</p>
<ul>
<li>进程推进顺序不当</li>
<li>同类资源分配不当</li>
<li>PV操作使用不当</li>
</ul>
<p>死锁的处理策略：</p>
<ul>
<li>鸵鸟策略（不理睬策略）</li>
<li>预防策略</li>
<li>避免策略</li>
<li>检测与解除死锁</li>
</ul>
<p>死锁预防：</p>
<ul>
<li>
<p>预先静态分配法：破坏了“不可剥夺条件”，<u>预先分配所需资源，保证不等待资源</u>。</p>
<p>该方法的问题是降低了对资源的利用率，降低进程的并发程度；有时可能无法预先知道所需资源。</p>
</li>
<li>
<p>资源有序分配法：破坏了“环路条件”，<u>把资源分类按顺序排列，保证不形成环路</u>。</p>
<p>该方法存在的问题是限制进程对资源的请求：由于资源的排序占用系统开销。</p>
</li>
</ul>
<p><a href="/p/%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f%e7%af%87/#%e9%93%b6%e8%a1%8c%e5%ae%b6%e7%ae%97%e6%b3%95">银行家算法</a></p>
<h2 id="线程轻型进程" data-numberify>线程（轻型进程）<a class="anchor ms-1" href="#线程轻型进程"></a></h2>
<ul>
<li>基本上不拥有资源，只拥有一点运行中必不可少的资源（如程序计数器、一组寄存器和栈）。</li>
<li>与其它同一进程的线程共享进程所拥有的全部资源。</li>
</ul>
<p>线程分为：</p>
<ul>
<li>用户级线程</li>
<li>内核支持线程</li>
</ul>
<h2 id="存储管理" data-numberify>存储管理<a class="anchor ms-1" href="#存储管理"></a></h2>
<p><strong>程序的局限性：</strong></p>
<ul>
<li>
<p><strong>时间局限性</strong>：</p>
<ul>
<li>如果程序中的某条<u>指令一旦执行</u>，则不久的将来该指令<u>可能再次被执行</u>；</li>
<li>如果某个<u>存储单元被访问</u>，则不久以后该存储单元<u>可能再次被访问</u>。</li>
</ul>
<p>产生时间局限性的典型原因是<u>在程序中存在着大量的循环操作</u>。</p>
</li>
<li>
<p><strong>空间局限性</strong>：指一旦<u>程序访问了某个存储单元</u>，则在不久的将来，<u>其附近的存储单元也最有可能被访问</u>。</p>
<p>即程序在一段时间内所访问的地址可能集中在一定的范围内，其典型原因为<u>程序是顺序执行的</u>。</p>
</li>
</ul>
<p><strong>段页式存储管理：</strong></p>
<ol>
<li>将整个主存划分成大小相等的存储块（页框）。</li>
<li>将用户程序按程序的逻辑关系分为若干个段，并为每个段赋予一个段名。</li>
<li>将每个段划分成若干页，以页框为单位离散分配。</li>
</ol>
<h2 id="缓冲" data-numberify>缓冲<a class="anchor ms-1" href="#缓冲"></a></h2>
<p><picture><img class="img-fluid " alt="单缓冲并行工作示意图" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683189558038.png" loading="lazy" width="1251" height="272" />
</picture>

</p>
<p>$n$个作业的单缓冲所花费的时间为：</p>
<p>$$
(Max(C, T) + M) \times n + Min(C, T)
$$</p>
<p><picture><img class="img-fluid " alt="双缓冲并行工作示意图" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683189296831.png" loading="lazy" width="1147" height="257" />
</picture>

</p>
<p>$n$个作业的双缓冲所花费的时间为：</p>
<p>$$
Max(T, M, C) \times n + T + M + C - Max(T, M, C)
$$</p>
<p>即，</p>
<p>$$
Max(T, M, C) \times (n - 1) + T + M + C
$$</p>
<h2 id="磁盘调度" data-numberify>磁盘调度<a class="anchor ms-1" href="#磁盘调度"></a></h2>
<ul>
<li>
<p><strong>先来先服务</strong>（First-Come First-Served，FCFS）：根据进程请求访问磁盘的先后次序进行调度。</p>
<ul>
<li>优点：公平、简单，且每个进程的请求都能依次得到处理，不会出现某进程的请求长期得不到满足的情况。</li>
<li>缺点：此算法由于未对寻道进行优化，致使平均寻道时间可能较长。</li>
</ul>
</li>
<li>
<p><strong>最短寻道时间优先</strong>（Shortest Seek Time First，SSTF，最短移臂算法）：该算法选择这样的进程，其要求访问的磁道与当前磁头所在的磁道距离最近，使得每次的寻道时间最短。</p>
<ul>
<li>优点：可能会出现饥饿现象。</li>
<li>缺点：不能保证平均寻道时间最短。</li>
</ul>
</li>
<li>
<p><strong>扫描算法</strong>（SCAN，电梯调度算法）：总是从磁头当前位置开始，沿磁头的移动方向去选择离当前磁头最近的那个柱面的请求。如果沿磁头的方向无请求访问时，就改变磁头的移动方向。</p>
<p>在这种调度方法下磁头的移动类似于电梯的调度，所以它也称为电梯调度算法。</p>
<ul>
<li>优点：避免了饥饿现象的出现。</li>
<li>缺点：当磁头刚从里向外移动过某一磁道时，恰有一进程请求访问此磁道，这时该进程必须等待，待磁头从里向外，再从外向里扫描完所有要访问的磁道后才处理该进程的请求，致使该进程的请求被严重地推迟。</li>
</ul>
</li>
<li>
<p><strong>单向扫描算法</strong>（CSCAN，循环扫描算法）：为了减少上述SCAN缺点中存在的这种延迟，算法规定磁头只做单向移动。</p>
<p>例如，只是自里向外移动，从当前位置开始沿磁头的移动方向去选择离当前磁头最近的那个柱面访问，如果沿磁头的方向无请求访问时，磁头立即返回到最里面的欲访问的柱面，再亦即将最小柱面号紧接着最大柱面号构成循环，进行循环扫描。</p>
</li>
</ul>
<h2 id="旋转调度算法" data-numberify>旋转调度算法<a class="anchor ms-1" href="#旋转调度算法"></a></h2>
<p><picture><img class="img-fluid " alt="初始逻辑记录分布情况" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683268410250.png" loading="lazy" width="322" height="311" />
</picture>

</p>
<p>设$n$个扇区的磁盘，经过一个扇区的时间为$t$，读取一个记录后处理的时间为$c$，那么：</p>
<ul>
<li>
<p>顺序处理完所有记录的总时间为：</p>
<p>$$
(t + nt) (n-1) + t + c
$$</p>
<p>即：</p>
<p>$$
t \times n^2 + c
$$</p>
</li>
<li>
<p>记录优化后的总时间：</p>
<p>$$
n(t + c)
$$</p>
</li>
</ul>
<h2 id="多级磁盘索引结构" data-numberify>多级磁盘索引结构<a class="anchor ms-1" href="#多级磁盘索引结构"></a></h2>
<ul>
<li>
<p><strong>直接索引</strong>：索引表中的地址项直接指向磁盘数据块。</p>
<p><picture><img class="img-fluid " alt="直接索引" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683271855209.png" loading="lazy" width="670" height="659" />
</picture>

</p>
</li>
<li>
<p><strong>一级间接地址索引</strong>：索引表中的地址项指向一个磁盘索引块。这个索引块中的记录是地址项，这些地址项直接指向磁盘数据块。</p>
<p>称这个磁盘索引块为<strong>一级索引块</strong>。</p>
<p><picture><img class="img-fluid " alt="一级间接地址索引" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683274982800.png" loading="lazy" width="904" height="737" />
</picture>

</p>
</li>
<li>
<p><strong>二级间接地址索引</strong>：索引表中的地址项指向一个磁盘索引块。这个索引块中的一个记录指向一个一级索引块。</p>
<p>称这个记录指向一级索引块的磁盘索引块为<strong>二级索引块</strong>。</p>
<p><picture><img class="img-fluid " alt="二级间接地址索引" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683275164015.png" loading="lazy" width="1121" height="784" />
</picture>

</p>
</li>
</ul>
<hr>
<h1 id="面向对象" data-numberify>面向对象<a class="anchor ms-1" href="#面向对象"></a></h1>
<p>跳转连接：<a href="/p/%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%af%87/">软件设计师——面向对象篇</a></p>
<h2 id="设计原则" data-numberify>设计原则<a class="anchor ms-1" href="#设计原则"></a></h2>
<ul>
<li>
<p><strong>责任原则</strong>（Single Responsibility Principle，SRP）：当需要修改某个类的时候原因有且只有一个，让一个类只做一种类型责任。</p>
</li>
<li>
<p><strong>开放封闭原则</strong>（Open &amp; Close Principle，OCP）：软件实体（类、模块、函数等）应
该可以扩展的，即<strong>开放的</strong>；但是不可修改的，即<strong>封闭的</strong>。</p>
</li>
<li>
<p><strong>里氏替换原则</strong>（Liskov Substitution Principle，LSP）：子类型必须能够替换掉他们的基
类型。</p>
<p>即，在任何父类可以出现的地方，都可以用子类的实例来赋值给父类型的引用。</p>
<p>当一个子类的实例应该能够替换任何其超类的实例时，它们之间才具有是一个（is-a）关系。</p>
</li>
<li>
<p><strong>依赖倒置原则</strong>（Dependence Inversion Principle，DP）：抽象不应该依赖于细节，细
节应该依赖于抽象。即，<u>高层模块不应该依赖于低层模块，二者都应该依赖于抽象</u>。</p>
</li>
<li>
<p><strong>接口分离原则</strong>（Interface Segregation Principle，ISP）：不应该强迫客户依赖于它们不
用的方法。接口属于客户，不属于它所在的类层次结构。</p>
<p>即：<u>依赖于抽象，不要依赖于具体，同时在抽象级别不应该有对于细节的依赖。</u></p>
<p>这样做的好处就在于可以最大限度地应对可能的变化。</p>
</li>
</ul>
<p>Robert C. Martin提出的面向对象设计原则（重点的）：</p>
<ul>
<li><strong>共同封闭原则</strong>（Common Closure Principle，CCP）：包中的所有类对于同一类性质的变化应该是共同到闭的。一个变化若对一个包产生影响，则将对该包中的所有类产生影响，而对于其他的包不造成任何影响。</li>
<li><strong>共同重用原则</strong>（Common Reuse Principle，CRP）：一个包中的所有类应该是共同重用
的。如果重用了包中的一个类那么就要重用包中的所有类。</li>
</ul>
<h2 id="uml" data-numberify>UML<a class="anchor ms-1" href="#uml"></a></h2>
<p><a href="/p/%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%af%87/#uml">面向对象——UML</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">UML图</th>
<th style="text-align:center">静态建模</th>
<th style="text-align:center">动态建模</th>
<th style="text-align:center">物理建模</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">对象图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">用例图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">构件图（组件图)</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
</tr>
<tr>
<td style="text-align:center">部署图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
</tr>
<tr>
<td style="text-align:center">序列图（顺序图，时序图）</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">通信图（协作图）</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">状态图</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">活动图</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
</tbody>
</table>
<p>活动图是一种特殊的状态图，它们的差异如下：</p>
<ul>
<li>相同点：状态中都有初态和终态。</li>
<li>主要差异：
<ul>
<li>活动图的转换称为流；</li>
<li>活动图有分支、并发分岔和并发汇合。</li>
</ul>
</li>
</ul>
<p>顺序图和通信图是同构的，它们之间可以相互转换。它们的差异如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">差异</th>
<th style="text-align:left"><center>序列图</center></th>
<th style="text-align:left"><center>通信图</center></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>强调</strong></td>
<td style="text-align:left"><center>消息时间顺序</center></td>
<td style="text-align:left"><center>收发消息的对象的结构组织</center></td>
</tr>
<tr>
<td style="text-align:center"><strong>不同的特性</strong></td>
<td style="text-align:left"><ul><li>有对象生命线：对象存在的时间段</li><li>有控制焦点：对象执行动作所经历的时间段</li></ul></td>
<td style="text-align:left"><ul><li>有路径：表示对象之间有交互</li><li>有序号：表示消息的时间顺序，可嵌套表示</li></ul></td>
</tr>
</tbody>
</table>
<p>以下是UML图的总结：</p>
<ul>
<li>
<p><strong>类图</strong>：展现一组<u>对象（类）</u>、<u>接口</u>、<u>协作</u>和它们之间的<u>关系</u></p>
<p><picture><img class="img-fluid " alt="类图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682061210921.png" loading="lazy" width="619" height="467" />
</picture>

</p>
</li>
<li>
<p><strong>对象图</strong>：展现某一时刻的一组<u>对象</u>以及它们之间的<u>关系</u>，描述了在类图中所建立事物的实例的静态快照</p>
<p><picture><img class="img-fluid " alt="对象图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682061786263.png" loading="lazy" width="713" height="312" />
</picture>

</p>
</li>
<li>
<p><strong>用例图</strong>：展现了一组<u>用例</u>、<u>参与者</u>以及它们之间的<u>关系（包含、扩展、关联和泛化）</u></p>
<p><picture><img class="img-fluid " alt="用例图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682062071630.png" loading="lazy" width="756" height="382" />
</picture>

</p>
</li>
<li>
<p><strong>序列图（顺序图，时序图）</strong>：描述了以<u>时间顺序</u>组织的<u>对象</u>之间的<u>交互活动</u>，强调<u>消息时间顺序</u></p>
<p><picture><img class="img-fluid " alt="序列图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682064874751.png" loading="lazy" width="691" height="471" />
</picture>

</p>
</li>
<li>
<p><strong>通信图（协作图）</strong>：强调<u>收发消息的对象的结构组织</u></p>
<p><picture><img class="img-fluid " alt="通信图" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682065157645.png" loading="lazy" width="719" height="314" />
</picture>

</p>
</li>
<li>
<p><strong>状态图（状态转换图）</strong>：展现了一个状态机，强调<u>对象行为的事件顺序</u></p>
<p><picture><img class="img-fluid " alt="状态图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682066287326.png" loading="lazy" width="831" height="431" />
</picture>

</p>
</li>
<li>
<p><strong>活动图</strong>：一种特殊的状态图，展现了在<u>系统内从一个活动到另一个活动的流程</u>，强调<u>对象间的控制流程</u></p>
<p><picture><img class="img-fluid " alt="活动图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/1682067363114.png" loading="lazy" width="654" height="744" />
</picture>

</p>
</li>
<li>
<p><strong>构件图（组件图)</strong>：展现了一组<u>构件之间的组织和依赖</u>，将构件映射为类、接口或协作</p>
<p><picture><img class="img-fluid " alt="构件图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682068370459.png" loading="lazy" width="638" height="332" />
</picture>

</p>
</li>
<li>
<p><strong>部署图</strong>：对物理建模，展现了<u>运行时处理结点以及其中构件（制品）的配置</u></p>
<p><picture><img class="img-fluid " alt="部署图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1682073176388.png" loading="lazy" width="491" height="327" />
</picture>

</p>
</li>
</ul>
<h2 id="设计模式" data-numberify>设计模式<a class="anchor ms-1" href="#设计模式"></a></h2>
<p><a href="/p/%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%af%87/#%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f">面向对象——设计模式</a></p>
<p>设计模式代码仓库：<a href="https://gitee.com/linner_cheng/design-patterns" target="_blank" rel="noopener noreferrer">https://gitee.com/linner_cheng/design-patterns<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<p>设计模式分类：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><br></th>
<th style="text-align:left">创建型</th>
<th style="text-align:left">结构型</th>
<th style="text-align:left">行为型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">说明</td>
<td style="text-align:left">与对象的创建有关</td>
<td style="text-align:left">处理类或对象的组合</td>
<td style="text-align:left">描述类或对象的交互和职责分配</td>
</tr>
<tr>
<td style="text-align:center">类模式</td>
<td style="text-align:left">Factory Method（工厂方法模式）</td>
<td style="text-align:left">Adapter（适配器模式）</td>
<td style="text-align:left">Interpreter（解释器模式）<br>Template Method（模板方法模式）</td>
</tr>
<tr>
<td style="text-align:center">对象模式</td>
<td style="text-align:left">Abstract Factory（抽象工厂模式）<br>Builder（生成器模式）<br>Prototype（原型模式）<br>Singleton（单例模式）</td>
<td style="text-align:left">Adapter（适配器模式）<br>Bridge（桥接模式）<br>Composite（组合模式）<br>Decorator（装饰器模式）<br>Facade（外观模式）<br>Flyweight（享元模式）<br>Proxy（代理模式）</td>
<td style="text-align:left">Chain of Responsibility（责任链模式）<br>Command（命令模式）<br>Iterator（迭代器模式）<br>Mediator（中介者模式）<br>Memento（备忘录模式）<br>Observer（观察者模式）<br>State（状态模式）<br>Strategy（策略模式）<br>Visitor（访问者模式）</td>
</tr>
</tbody>
</table>
<p>创建型设计模式（抽象了对象的实例化过程）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">关键字</th>
<th style="text-align:left">意图</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">工厂方法</td>
<td style="text-align:center">动态生产对象</td>
<td style="text-align:left">定义创建对象的接口，由子类实例化对象。让类的实例化延迟到其子类。</td>
</tr>
<tr>
<td style="text-align:center">抽象工厂</td>
<td style="text-align:center">生成系列对象</td>
<td style="text-align:left">提供创建一系列对象的接口，无需指定具体的类。</td>
</tr>
<tr>
<td style="text-align:center">生成器</td>
<td style="text-align:center">构造复杂对象</td>
<td style="text-align:left">将复杂对象的构建与表示分离。使得同样的构建可以创建不同的表示。</td>
</tr>
<tr>
<td style="text-align:center">原型</td>
<td style="text-align:center">克隆对象</td>
<td style="text-align:left">用原型实例指定创建对象的类型，通过复制原型来创建对象。</td>
</tr>
<tr>
<td style="text-align:center">单例</td>
<td style="text-align:center">一个实例</td>
<td style="text-align:left">保证一个类仅有一个实例，并提供一个全局访问点。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:left">适用性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">工厂方法</td>
<td style="text-align:left"><ul><li>一个类不知道它所必须创建对象的类</li><li>由子类来指定创建的对象</li><li>将创建对象的职责委托给多个帮助子类中的某一个</li></ul></td>
</tr>
<tr>
<td style="text-align:center">抽象工厂</td>
<td style="text-align:left"><ul><li>系统独立于它产品的创建、<u>组合</u>和表示</li><li>系统由多个产品系列中的一个来配置</li><li>强调一系列相关产品对象的设计，以便进行联合使用</li><li>提供一个产品类库，只显示它们的接口而不是实现</li></ul></td>
</tr>
<tr>
<td style="text-align:center">生成器</td>
<td style="text-align:left"><ul><li>创建复杂对象的算法，独立于该对象的组成部分以及它们的装配方式</li><li>构造过程必须允许被构造的对象有不同的表示</li></ul></td>
</tr>
<tr>
<td style="text-align:center">原型</td>
<td style="text-align:left"><ul><li>系统独立于它产品创建、<u>构成</u>和表示</li><li>要实例化的类是在运行时刻指定，如动态装载</li><li>避免创建一个与产品类层次平行的工厂类层次</li></ul></td>
</tr>
<tr>
<td style="text-align:center">单例</td>
<td style="text-align:left"><ul><li>类只能有一个实例，用户可从一个全局点访问</li><li>这个唯一实例是通过子类化可扩展的，客户无须更改代码就能使用扩展实例</li></ul></td>
</tr>
</tbody>
</table>
<p>结构型模式（组合类或对象获得新的结构）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">关键字</th>
<th style="text-align:left">意图</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">适配器（类/对象）</td>
<td style="text-align:center">接口转换</td>
<td style="text-align:left">将类的接口转换成兼容其他类的接口。<br>使原本接口不兼容的类可以一起工作。</td>
</tr>
<tr>
<td style="text-align:center">桥接</td>
<td style="text-align:center">抽象与实现分离</td>
<td style="text-align:left">将类的抽象与实现分离，使它们可以独立变化。</td>
</tr>
<tr>
<td style="text-align:center">组合</td>
<td style="text-align:center">组合对象</td>
<td style="text-align:left">将对象组合成树型结构以表示“部分——整体”的层次结构。<br>使得用户对单个对象和组合对象的使用具有一致性。</td>
</tr>
<tr>
<td style="text-align:center">装饰</td>
<td style="text-align:center">动态附加职责</td>
<td style="text-align:left">动态地给一个对象添加一些额外的职责，比用子类来扩展功能更灵活。</td>
</tr>
<tr>
<td style="text-align:center">外观</td>
<td style="text-align:center">对外统一接口</td>
<td style="text-align:left">为子系统定义和提供一个统一的对外高层接口（外观）。<br>简化了该子系统的使用。</td>
</tr>
<tr>
<td style="text-align:center">享元</td>
<td style="text-align:center">共享大量细粒度对象</td>
<td style="text-align:left">提供支持大量细粒度对象共享的有效方法。</td>
</tr>
<tr>
<td style="text-align:center">代理</td>
<td style="text-align:center">中介代理</td>
<td style="text-align:left">为其他对象提供一种代理以控制对这个对象的访问。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:left">适用性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">适配器</td>
<td style="text-align:left"><ul><li>使用接口不符合要求的类</li><li>创建可复用、可与其它不相关类或不可预见类协同工作</li><li>（仅适用于对象适配器）想使用子类，但又不想对它们子类化来匹配接口</li></ul></td>
</tr>
<tr>
<td style="text-align:center">桥接</td>
<td style="text-align:left"><ul><li>在抽象和实现之间没有固定的绑定关系</li><li>抽象以及实现都可以通过生成子类的方法扩充</li><li>对抽象的实现部分的修改不会对用户产生影响</li><li>隐藏抽象的实现</li><li>在多个对象间共享实现，用户并不知道</li></ul></td>
</tr>
<tr>
<td style="text-align:center">组合</td>
<td style="text-align:left"><ul><li>表示对象的部分——整体层次结构</li><li>希望用户忽略组合对象与单个对象的不同，并统一地使用它们</li></ul></td>
</tr>
<tr>
<td style="text-align:center">装饰器</td>
<td style="text-align:left"><ul><li>不影响其他对象，而动态透明地添加职责</li><li>处理那些可以撤销的职责</li><li>不能采用子类进行扩充</li></ul></td>
</tr>
<tr>
<td style="text-align:center">外观</td>
<td style="text-align:left"><ul><li>为一个复杂子系统提供一个简单接口</li><li>客户程序与抽象类的实现部分之间存在着很大的依赖性</li><li>需要构建一个层次结构的子系统时</li></ul></td>
</tr>
<tr>
<td style="text-align:center">享元</td>
<td style="text-align:left"><ul><li>使用了大量的对象，造成很大开销</li><li>对象的大多数状态都可变为外部状态</li><li>删除对象的外部状态后，可以用相对较少的共享对象取代很多组对象</li></ul></td>
</tr>
<tr>
<td style="text-align:center">代理</td>
<td style="text-align:left"><ul><li>在需要比较通用和复杂对象指针代替简单指针时</li></ul></td>
</tr>
</tbody>
</table>
<p>行为型模式：</p>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">关键字</th>
<th style="text-align:left">意图</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">责任链</td>
<td style="text-align:center">职责传递</td>
<td style="text-align:left">将处理请求的多个对象连成一条链，请求在链中传递，直到有对象处理。<br>给多个对象处理请求的机会，减少请求的发送者与接收者之间的耦合。</td>
</tr>
<tr>
<td style="text-align:center">命令</td>
<td style="text-align:center">请求封装为对象</td>
<td style="text-align:left">将一个请求封装为一个对象，可用不同请求对客户进行参数化。<br>将请求排队或记录日志，支持撤销操作。</td>
</tr>
<tr>
<td style="text-align:center">解释器</td>
<td style="text-align:center">语句解释</td>
<td style="text-align:left">给定一种语言，定义其文法和解释器，解释器根据文法解释语言中的句子。</td>
</tr>
<tr>
<td style="text-align:center">迭代器</td>
<td style="text-align:center">顺序访问数据集</td>
<td style="text-align:left">提供一个顺序访问聚合对象中元素的方法，不需要暴露对象的内部表示。</td>
</tr>
<tr>
<td style="text-align:center">中介者</td>
<td style="text-align:center">不直接引用</td>
<td style="text-align:left">用对象封装一系列的对象交互。<br>使各对象不需显式地相互调用，达到低耦合。<br>可以独立改变对象间的交互。</td>
</tr>
<tr>
<td style="text-align:center">备忘录</td>
<td style="text-align:center">保存状态</td>
<td style="text-align:left">不破坏封装的前提下，捕获对象的内部状态，并在该对象之外保存。<br>可以在以后恢复保存的状态。</td>
</tr>
<tr>
<td style="text-align:center">观察者</td>
<td style="text-align:center">联动</td>
<td style="text-align:left">定义对象间的一种一对多依赖关系。<br>一个对象状态改变，所有依赖于它的对象都得到通知并被自动更新。</td>
</tr>
<tr>
<td style="text-align:center">状态</td>
<td style="text-align:center">状态封装成类</td>
<td style="text-align:left">把对象的行为封装在不同的状态对象中。<br>允许一个对象在其内部状态改变时改变它的行为。</td>
</tr>
<tr>
<td style="text-align:center">策略</td>
<td style="text-align:center">多方案切换</td>
<td style="text-align:left">定义并封装一系列算法，使它们可以在不影响客户端的情况下相互替换。</td>
</tr>
<tr>
<td style="text-align:center">模板方法</td>
<td style="text-align:center">框架</td>
<td style="text-align:left">定义一个操作中的算法骨架，让其子类来实现算法中的剩余逻辑。<br>可以不改变算法结构而重新定义其某些特定步骤。</td>
</tr>
<tr>
<td style="text-align:center">访问者</td>
<td style="text-align:center">数据与操作分离</td>
<td style="text-align:left">封装作用与某对象结构中元素的操作。<br>可以在不改变元素类的前提下，定义或修改作用于这些元素的操作。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:left">适用性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">责任链</td>
<td style="text-align:left"><ul><li>有多个对象处理请求，运行时刻自动确定由谁处理</li><li>不明指定接收者的情况下向多个对象中的一个提交请求</li><li>可处理请求的对象集合被动态指定</li></ul></td>
</tr>
<tr>
<td style="text-align:center">命令</td>
<td style="text-align:left"><ul><li>抽象出待执行的动作以参数化某对象</li><li>不同的时刻指定、排列和执行请求</li><li>支持取消操作，支持修改日志</li></ul></td>
</tr>
<tr>
<td style="text-align:center">解释器</td>
<td style="text-align:left"><ul><li>文法简单</li><li>效率不是关键问题</li></ul></td>
</tr>
<tr>
<td style="text-align:center">迭代器</td>
<td style="text-align:left"><ul><li>访问聚合对象的内容而不暴露其内部表示</li><li>支持对聚合对象的多种遍历</li><li>为遍历不同的聚合结构提供一个统一的接口</li></ul></td>
</tr>
<tr>
<td style="text-align:center">中介者</td>
<td style="text-align:left"><ul><li>一组对象以复杂的方式进行通信</li><li>一个对象引用其他很多对象并且直接与这些对象通信</li><li>定制一个分布在多个类中的行为，而又不想生成太多的子类</li></ul></td>
</tr>
<tr>
<td style="text-align:center">备忘录</td>
<td style="text-align:left"><ul><li>必须保存一个对象在某一个时刻的（部分）状态</li><li>如果用接口让其他对象直接得到这些状态，会暴露对象的实现细节并破坏对象的封装性</li></ul></td>
</tr>
<tr>
<td style="text-align:center">观察者</td>
<td style="text-align:left"><ul><li>当抽象模型有两个方面，其中一个方面依赖于另一个方面</li><li>当改变一个对象的同时需要改变其他对象，又不知道有多少对象待改变</li><li>当一个对象必须通知其他对象，又不能假定其他对象是谁（不能紧耦合）</li></ul></td>
</tr>
<tr>
<td style="text-align:center">状态</td>
<td style="text-align:left"><ul><li>对象的行为决定于它的状态，且在运行时刻根据状态改变行为</li><li>操作中含有庞大的多分支的条件语句</li></ul></td>
</tr>
<tr>
<td style="text-align:center">策略</td>
<td style="text-align:left"><ul><li>许多相关的类仅仅是行为有异</li><li>需要使用一个算法的不同变体</li></ul></td>
</tr>
<tr>
<td style="text-align:center">模板方法</td>
<td style="text-align:left"><ul><li>一次性实现算法中不变的部分，将可变的行为留给子类实现</li><li>各子类中公共行为被提取到公共父类中，避免代码重复</li></ul></td>
</tr>
<tr>
<td style="text-align:center">访问者</td>
<td style="text-align:left"><ul><li>对象结构包含很多类对象，用户想对这些对象实施操作</li><li>对对象结构中的对象进行很多不同且不相关的操作</li><li>定义对象结构的类很少改变，但经常需要在此结构上定义新操作</li></ul></td>
</tr>
</tbody>
</table>
<p>个人理解的方式：</p>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:left">简述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">工厂方法</td>
<td style="text-align:left">具体工厂（工厂接口的实现）创建具体对象。</td>
</tr>
<tr>
<td style="text-align:center">抽象工厂</td>
<td style="text-align:left">一个具体工厂（抽象工厂的子类）创建多个产品，不同工厂用不同方式创建这一系列产品。</td>
</tr>
<tr>
<td style="text-align:center">生成器</td>
<td style="text-align:left">复杂对象通过切换构建<code>construct(Builder)</code>来创建不同表示。</td>
</tr>
<tr>
<td style="text-align:center">原型</td>
<td style="text-align:left">多个原型之间通过克隆<code>Prototype.clone()</code>来复制对象。</td>
</tr>
<tr>
<td style="text-align:center">单例</td>
<td style="text-align:left">通过私有化无参构造方法、静态<code>Singleton instance</code>属性和静态<code>getInstance()</code>方法使对象保持单例。</td>
</tr>
<tr>
<td style="text-align:center">适配器</td>
<td style="text-align:left">适配器继承目标类，重写目标类的方法，方法将不兼容的接口包装成与目标类一致的接口。</td>
</tr>
<tr>
<td style="text-align:center">桥接</td>
<td style="text-align:left">将产品（抽象）与其某属性（实现）分开，通过桥接（组合）产品与其属性独立出来的类来制造不同产品。</td>
</tr>
<tr>
<td style="text-align:center">组合</td>
<td style="text-align:left">用树形结构和一致的抽象类让部分和整体的操作一致。如文件树。</td>
</tr>
<tr>
<td style="text-align:center">装饰器</td>
<td style="text-align:left">装饰器继承被装饰类，通过构造器传入被装饰对象，然后在与被装饰类一致的方法中添加新操作。多个装饰器嵌套可组成一条装饰链。</td>
</tr>
<tr>
<td style="text-align:center">外观</td>
<td style="text-align:left">复杂子系统有很多操作，外观将其简化。跟适配器很像。</td>
</tr>
<tr>
<td style="text-align:center">享元</td>
<td style="text-align:left">让一个对象假装成许多个对象。就是很多个对象之间可能有一部分属性的值是一样的，定义一个对象然后共享这部分属性。</td>
</tr>
<tr>
<td style="text-align:center">代理</td>
<td style="text-align:left">代理就是给被代理对象加一些操作，跟适配器和外观不同的是代理的接口是与被代理对象一致的。</td>
</tr>
<tr>
<td style="text-align:center">责任链</td>
<td style="text-align:left">有多个接口一致的对象，将请求在这些对象间层层转发，请求可以被其中一个对象处理（JavaWeb里的过滤器）。和嵌套的装饰器很像。</td>
</tr>
<tr>
<td style="text-align:center">命令</td>
<td style="text-align:left">就是一个命令一个对象，调用这些对象的方式一致（对象接口一致）。</td>
</tr>
<tr>
<td style="text-align:center">解释器</td>
<td style="text-align:left">解释语言的上下文。</td>
</tr>
<tr>
<td style="text-align:center">迭代器</td>
<td style="text-align:left">在集合对象的外部，通过迭代器访问集合中的元素，对应的迭代器可由集合对象给出<code>iterator()</code>。跟Java里的迭代器一个样。</td>
</tr>
<tr>
<td style="text-align:center">中介者</td>
<td style="text-align:left">有多个类似对象，这些对象通过中介互相发送消息（就好像微信聊天一样，微信就是中介）。</td>
</tr>
<tr>
<td style="text-align:center">备忘录</td>
<td style="text-align:left">捕获并保存对象的内部状态，并且可以恢复到原型保存的状态。</td>
</tr>
<tr>
<td style="text-align:center">观察者</td>
<td style="text-align:left">在目标对象状态更新时，观察者们可以收到通知<code>update()</code>，然后更新自身状态，与目标对象的状态保持一致。</td>
</tr>
<tr>
<td style="text-align:center">状态</td>
<td style="text-align:left">一个状态一个类，在状态中通过判断变换到其它状态。</td>
</tr>
<tr>
<td style="text-align:center">策略</td>
<td style="text-align:left">就是动态切换算法。</td>
</tr>
<tr>
<td style="text-align:center">模板方法</td>
<td style="text-align:left">模板实现算法操作中不变的部分，其余的交给子类去实现。</td>
</tr>
<tr>
<td style="text-align:center">访问者</td>
<td style="text-align:left">就是在<code>Visitor.visit(访问对象)</code>中定义对象的操作，然后在结构类中提供<code>accept(Visitor)</code>来访问这些对象。</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="数据库" data-numberify>数据库<a class="anchor ms-1" href="#数据库"></a></h1>
<p>跳转连接：<a href="/p/%e6%95%b0%e6%8d%ae%e5%ba%93%e7%af%87/">软件设计师——数据库篇</a></p>
<h2 id="三级模式两级映像" data-numberify>三级模式两级映像<a class="anchor ms-1" href="#三级模式两级映像"></a></h2>
<p><picture><img class="img-fluid " alt="三级模式两级映像" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1681373319410.png" loading="lazy" width="486" height="377" />
</picture>

</p>
<p>三级结构有3类数据模型：</p>
<ul>
<li><strong>外模型</strong>：用户使用的<strong>数据视图</strong>，是一种局部的逻辑数据视图，表示用户所理解的实体、实体属性和实体关系。</li>
<li><strong>概念模型</strong>：全局的<strong>逻辑数据视图</strong>，是数据库管理员所看到的实体、实体属性和实体之间的联系。</li>
<li><strong>内模型</strong>：数据的物理<strong>存储模型</strong>。</li>
</ul>
<p>三个物理模型分别对应数据库系统的3层结构：</p>
<ul>
<li>
<p><strong>外模式（子模式、用户模式）</strong>：数据库用户的数据视图，是与某一应用程序有关的数据的逻辑表示。</p>
</li>
<li>
<p><strong>概念模式（模式）</strong>：所有用户的公共数据视图，与具体的应用程序和应用程序开发工具无关。</p>
</li>
<li>
<p><strong>内模式（物理模式、存储模式）</strong>：是数据在数据库内部的表示方式。</p>
<p>定义<u>所有的<strong>内部记录类型</strong>、<strong>索引</strong>和<strong>文件</strong>的组织方式</u>。</p>
</li>
</ul>
<p>数据库系统在三级模式之间提供了两级映像：</p>
<ul>
<li>模式——内模式映像存在于<u>概念级和内部级</u>之间，实现<u>概念模式和内模式</u>间的相互转换。</li>
<li>外模式——模式映像：存在于<u>外部级和概念级</u>之间，实现了<u>外模式和概念模式</u>之间的相互转换。</li>
</ul>
<p>二级映像功能保证数据的独立性：</p>
<ul>
<li><strong>物理独立性</strong>：指当数据库的<u>内模式发生改变时，数据的逻辑结构不变</u>。</li>
<li><strong>逻辑独立性</strong>：指用户的<u>应用程序与数据库的逻辑结构是相互独立的</u>。</li>
</ul>
<h2 id="完整性约束" data-numberify>完整性约束<a class="anchor ms-1" href="#完整性约束"></a></h2>
<ul>
<li><strong>实体完整性</strong></li>
<li><strong>参照完整性</strong></li>
<li><strong>用户定义完整性</strong></li>
</ul>
<h2 id="关系代数运算符" data-numberify>关系代数运算符<a class="anchor ms-1" href="#关系代数运算符"></a></h2>
<p><picture><img class="img-fluid " alt="关系代数运算符" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1681431891302.png" loading="lazy" width="735" height="301" />
</picture>

</p>
<ul>
<li>
<p><strong>广义笛卡儿积</strong>（Extended Cartesian Product）：两个元组分别为$n$目和$m$目的关系$R$和$S$的广义笛卡儿积是一个$(n+m)$列的元组的集合。</p>
<p>元组的前$n$列是关系$R$的一个元组，后$m$列是关系$S$的一个元组，记作$R \times S$，其形式定义如下：</p>
<p>$$
R \times S = \{ t| (t \ = \ &lt;t^n, t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \}
$$</p>
<p>如果$R$和$S$中有相同的属性名，可在属性名前加关系名作为限定，以示区别。若$R$有$K_1$,个元组，$S$有$K_2$个元组，则$R$和$S$的广义笛卡儿积有$K_1 \times K2$个元组。</p>
<blockquote>
<p>$&lt;t^n, t^m&gt;$是一个元组$t^n$和$t^m$拼接成的一个元组。</p>
</blockquote>
</li>
<li>
<p><strong>投影</strong>（Projection）：投影运算是从关系的<u>垂直方向</u>进行运算，在关系$R$中选出若干属性列$A$组成新的关系，记作$\pi_A (R)$，其形式定义如下：</p>
<p>$$
\pi_A (R) = \{ t[A]|t \in R \}
$$</p>
</li>
<li>
<p><strong>选择</strong>（Selection）：选择运算是从关系的<u>水平方向</u>进行运算，是从关系$R$中选择满足给定条件的诸元组，记作$\sigma_F (R)$其形式定义如下：</p>
<p>$$
\sigma_A (R) = \{ t| (t \in R) \wedge F(t) = True \}
$$</p>
<p>其中，$F(t)$中的运算对象可以是：</p>
<ul>
<li>属性名（或列的序号）；</li>
<li>常数；</li>
<li>运算符；</li>
<li>算术比较符（$&lt;, \le, &gt;, \ge, \neq$）；</li>
<li>逻辑运算符（$\wedge, \vee, \neg$）。</li>
</ul>
</li>
<li>
<p><strong>连接</strong>（Join）：连接运算是从两个关系$R$和$S$的笛卡儿积中选取满足条件的元组。</p>
<blockquote>
<p>可以认为笛卡儿积是无条件连接，其他的连接操作认为是有条件连接。</p>
</blockquote>
<ul>
<li>
<p><strong>$\theta$连接</strong>：从$R$与$S$的笛卡儿积中选取属性间满足一定条件的元组。记作：</p>
<p>$$
R \mathop{\Join}\limits_{X \theta Y} S = \{ t| (t=&lt;t^n,t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[X] \ \theta \ t^m[Y]) \}
$$</p>
<p>其中：</p>
<ul>
<li>$X \theta Y$：连接的条件；</li>
<li>$\theta$：比较运算符；</li>
<li>$X$和$Y$分别为$R$和$S$上度数相等且可比的属性组；</li>
<li>$t^n\left[ X \right]$表示$R$中$t^n$元组的对应于属性$X$的一个分量；</li>
<li>$t^m[Y]$表示$S$中$t^m$元组的对应于属性$Y$的一个分量。</li>
</ul>
<p>$\theta$连接也可以表示为：</p>
<p>$$
R \mathop{\Join}\limits_{i \theta j} S = \{ t| (t=&lt;t^n,t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[i] \ \theta \ t^m[j]) \}
$$</p>
<p>其中，</p>
<ul>
<li>
<p>$i=1,2,3,\cdots,n$；</p>
</li>
<li>
<p>$j=1,2,3,\cdots,m$；</p>
</li>
<li>
<p>$i \theta j$：</p>
<p>从两个关系$R$和$S$中选取$R$的第$i$列和$S$的第$j$列之间满足$\theta$运算的元组进行连接。</p>
</li>
</ul>
<p>$\theta$连接可以由基本的关系运算笛卡儿积和选取运算导出。因此，$\theta$连接可表示为：</p>
<p>$$
R \mathop{\Join}\limits_{X \theta Y} S = \sigma_{X \theta Y}(R \times S)
$$</p>
<p>或：</p>
<p>$$
R \mathop{\Join}\limits_{i \theta j} S = \sigma_{i \theta j}(R \times S)
$$</p>
</li>
<li>
<p><strong>等值连接</strong>：当$\theta$为“=”时，称之为等值连接，记为$R \mathop{\Join}\limits_{i = j} S$，其形式定义如下：</p>
<p>$$
R \mathop{\Join}\limits_{i = j} S = \{ t| (t=&lt;t^n,t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[i] = t^m[j]) \}
$$</p>
</li>
<li>
<p>$F$连接：从关系$R$和$S$的笛卡尔积中选取属性值满足某一公式$F$的元组，记为$\mathop{\Join}\limits_{F}$。</p>
<p>$F$是形为$F_1 \wedge F_2 \wedge \cdots \wedge F_n$的公式，每个$F_p$是形为$i \theta j$的式子。</p>
</li>
<li>
<p><strong>自然连接</strong>：自然连接是一种特殊的等值连接，它要求两个关系中<u>进行比较的分量必须是相同的属性组</u>，并且在结果集中<u>将重复属性列去掉</u>。</p>
<p>若：</p>
<ul>
<li>
<p>$t^n \in R$，$t^m \in S$；</p>
</li>
<li>
<p>$R$和$S$具有相同的属性组$B$，且$B=(B_1,B_2,,B_k)$；</p>
</li>
<li>
<p>假定$R$关系的属性：</p>
<p>$$
A_1,A_2,\cdots,A_{n-k},B_1,B_2,\cdots,B_k
$$</p>
</li>
<li>
<p>$S$关系的属性：</p>
<p>$$
B_1,B2,\cdots,B_k,B_{k+1},B_{k+2},\cdots,B_m
$$</p>
</li>
</ul>
<p>自然连接可以记为$R \Join S$,其形式定义如下：</p>
<p>$$
R \Join S = \{ t| (t = &lt;t^n, t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (R.B_1 = S.B_1) \wedge (R.B_2 = S.B_2) \wedge \cdots \wedge (R.B_k = S.B_k) \}
$$</p>
</li>
</ul>
</li>
<li>
<p><strong>外连接</strong>（Outer Jion）：外连接运算是连接运算的扩展，可以处理由于连接运算而缺失的信息。</p>
<p>外连接运算有3种：</p>
<ul>
<li>
<p><strong>左外连接</strong>（Left Outer Jion，⟕）：取出左侧关系中所有与右侧关系中任一元组都不匹配的元组，用空值$null$充填所有来自右侧关系的属性，构成新的元组，将其加入自然连接的结果中。</p>
</li>
<li>
<p><strong>右外连接</strong>（Right Outer Jion，⟖）：取出右侧关系中所有与左侧关系中任一元组都不匹配的元组，用空值$null$填充所有来自左侧关系的属性，构成新的元组，将其加入自然连接的结果中。</p>
</li>
<li>
<p><strong>全外连接</strong>（Full Outer Jion，⟗）。完成左外连接和右外连接的操作。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1681454087063.png" loading="lazy" width="762" height="575" />
</picture>

</p>
</li>
</ul>
<h2 id="sql" data-numberify>SQL<a class="anchor ms-1" href="#sql"></a></h2>
<p><a href="/p/%e6%95%b0%e6%8d%ae%e5%ba%93%e7%af%87/#sql">数据库篇——SQL</a></p>
<ol>
<li>
<p><strong>DDL</strong>（<strong>Data Definition Language</strong>，<strong>数据定义语言</strong>）：用来定义数据库对象：数据库，表，列等。</p>
<p>关键字：<code>CREATE</code>、<code>DROP</code>、<code>ALTER</code> 等。</p>
</li>
<li>
<p><strong>DML</strong>（<strong>Data Manipulation Language</strong>，<strong>数据操作语言</strong>）：用来对数据库中表的数据进行增删改。</p>
<p>关键字：<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code> 等。</p>
</li>
<li>
<p><strong>DQL</strong>（<strong>Data Query Language</strong>，<strong>数据查询语言</strong>）：用来查询数据库中表的记录。</p>
<p>关键字：<code>SELECT</code>等。</p>
</li>
<li>
<p><strong>DCL</strong>（<strong>Data Control Language</strong>，<strong>数据控制语言</strong>）：用来定义数据库的访问权限和安全级别，及创建用户。</p>
</li>
</ol>
<p>授权语句格式（<code>GRANT</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">GRANT</span><span class="w"> </span><span class="o">&lt;</span><span class="err">权限</span><span class="o">&gt;</span><span class="p">[,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">权限</span><span class="o">&gt;</span><span class="p">]</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">ON</span><span class="w"> </span><span class="o">&lt;</span><span class="err">对象类型</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">对象名</span><span class="o">&gt;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">TO</span><span class="o">&lt;</span><span class="err">用户</span><span class="o">&gt;</span><span class="p">[,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">用户</span><span class="o">&gt;</span><span class="p">]...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">WITH</span><span class="w"> </span><span class="k">GRANT</span><span class="w"> </span><span class="k">OPTION</span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><p>常见的操作权限如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">对象</th>
<th style="text-align:center">对象类型</th>
<th style="text-align:left">操作权限</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">属性列</td>
<td style="text-align:center"><code>TABLE</code></td>
<td style="text-align:left"><code>SELECT</code>、<br><code>INSERT</code>、<br><code>UPDATE</code>、<br><code>DELETE</code>、<br><code>ALL PRIVILEGES</code></td>
</tr>
<tr>
<td style="text-align:center">视图</td>
<td style="text-align:center"><code>TABLE</code></td>
<td style="text-align:left"><code>SELECT</code>、<br><code>INSERT</code>、<br><code>UPDATE</code>、<br><code>DELETE</code>、<br><code>ALL PRIVILEGES</code></td>
</tr>
<tr>
<td style="text-align:center">基本表</td>
<td style="text-align:center"><code>TABLE</code></td>
<td style="text-align:left"><code>SELECT</code>、<br><code>INSERT</code>、<br><code>UPDATE</code>、<br><code>DELETE</code>、<br><code>ALTER</code>、<br><code>INDEX</code>、<br><code>ALL PRIVILEGES</code></td>
</tr>
<tr>
<td style="text-align:center">数据库</td>
<td style="text-align:center"><code>DATABASE</code></td>
<td style="text-align:left"><code>CREATETAB</code></td>
</tr>
</tbody>
</table>
<ul>
<li>建立表的权限，可由DBA授予普通用户；</li>
<li><code>WITH GRANT OPTION</code>：表示获得了这些权限的用户还可以将权限赋给其他用户。</li>
</ul>
<p>收回权限语句格式（<code>REVOKE</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">REVOKE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">权限</span><span class="o">&gt;</span><span class="p">[,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">权限</span><span class="o">&gt;</span><span class="p">]...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">ON</span><span class="w"> </span><span class="o">&lt;</span><span class="err">对象类型</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">对象名</span><span class="o">&gt;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="o">&lt;</span><span class="err">用户</span><span class="o">&gt;</span><span class="p">[,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">用户</span><span class="o">&gt;</span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><h2 id="函数依赖" data-numberify>函数依赖<a class="anchor ms-1" href="#函数依赖"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:left">条件</th>
<th style="text-align:left">结论</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">函数依赖</td>
<td style="text-align:left">元组在$X$上的属性值相等，那么在$Y$上的属性值也相等</td>
<td style="text-align:left">$X$函数决定$Y$或$Y$函数依赖于$X$，记作$X \rightarrow Y$</td>
</tr>
<tr>
<td style="text-align:center">非平凡的函数依赖</td>
<td style="text-align:left">$X \rightarrow Y$，$Y \not\subseteq X$</td>
<td style="text-align:left">$X \rightarrow Y$是非平凡的函数依赖</td>
</tr>
<tr>
<td style="text-align:center">平凡的函数依赖</td>
<td style="text-align:left">$X \rightarrow Y$，$Y \subseteq X$</td>
<td style="text-align:left">$X \rightarrow Y$是平凡的函数依赖</td>
</tr>
<tr>
<td style="text-align:center">完全函数依赖</td>
<td style="text-align:left">$X \rightarrow Y$，$X&rsquo; \subset X$，$X&rsquo; \not\rightarrow Y$</td>
<td style="text-align:left">$Y$对$X$完全函数依赖，记作$X \stackrel{f}{\longrightarrow} Y$</td>
</tr>
<tr>
<td style="text-align:center">部分函数依赖（局部函数依赖）</td>
<td style="text-align:left">$X \rightarrow Y$，$X \stackrel{f}{\not\longrightarrow} Y$</td>
<td style="text-align:left">$Y$对$X$部分函数依赖，记作$X \stackrel{P}{\longrightarrow} Y$</td>
</tr>
<tr>
<td style="text-align:center">传递依赖</td>
<td style="text-align:left">$X \rightarrow Y$，$Y \not\subseteq X$，$Y \rightarrow Z$</td>
<td style="text-align:left">$Z$对$X$传递依赖</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:left">定义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">码（候选码，候选关键字）</td>
<td style="text-align:left">若$K \stackrel{f}{\rightarrow} U$，则$K$为$R$的候选码</td>
</tr>
<tr>
<td style="text-align:center">主属性</td>
<td style="text-align:left">包含在任何一个候选码中的属性</td>
</tr>
<tr>
<td style="text-align:center">非主属性</td>
<td style="text-align:left">不包含在任何一个候选码中的属性</td>
</tr>
<tr>
<td style="text-align:center">外码</td>
<td style="text-align:left">$X$非$R$的码，但$X$是另一个关系的码，则称$X$为外码</td>
</tr>
</tbody>
</table>
<p>Armstrong公理系统：</p>
<table>
<thead>
<tr>
<th style="text-align:center">定律</th>
<th style="text-align:left">条件</th>
<th style="text-align:left">F蕴含</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">自反律</td>
<td style="text-align:left">$Y \subseteq X \subseteq U$</td>
<td style="text-align:left">$X \rightarrow Y$</td>
</tr>
<tr>
<td style="text-align:center">增广律</td>
<td style="text-align:left">$X \rightarrow Y$，$Z \subseteq U$</td>
<td style="text-align:left">$XZ \rightarrow XZ$</td>
</tr>
<tr>
<td style="text-align:center">传递律</td>
<td style="text-align:left">$X \rightarrow Y,\ Y \rightarrow Z$</td>
<td style="text-align:left">$X \rightarrow Z$</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">规则</th>
<th style="text-align:left">条件</th>
<th style="text-align:left">F蕴含</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">合并规则</td>
<td style="text-align:left">$X \rightarrow Y,\ X \rightarrow Z$</td>
<td style="text-align:left">$X \rightarrow YZ$</td>
</tr>
<tr>
<td style="text-align:center">伪传递律</td>
<td style="text-align:left">$X \rightarrow Y,\ WY \rightarrow Z$</td>
<td style="text-align:left">$XW \rightarrow Z$</td>
</tr>
<tr>
<td style="text-align:center">分解规则</td>
<td style="text-align:left">$X \rightarrow Y,\ Z \subseteq Y$</td>
<td style="text-align:left">$X \rightarrow Z$</td>
</tr>
</tbody>
</table>
<h2 id="关系模式的分解" data-numberify>关系模式的分解<a class="anchor ms-1" href="#关系模式的分解"></a></h2>
<ul>
<li><a href="/p/%e6%95%b0%e6%8d%ae%e5%ba%93%e7%af%87/#%e6%97%a0%e6%8d%9f%e8%bf%9e%e6%8e%a5">无损连接</a></li>
<li><a href="/p/%e6%95%b0%e6%8d%ae%e5%ba%93%e7%af%87/#%e4%bf%9d%e6%8c%81%e5%87%bd%e6%95%b0%e4%be%9d%e8%b5%96">保持函数依赖</a></li>
</ul>
<h2 id="范式" data-numberify>范式<a class="anchor ms-1" href="#范式"></a></h2>
<p><a href="/p/%e6%95%b0%e6%8d%ae%e5%ba%93%e7%af%87/#%e8%8c%83%e5%bc%8f">数据库篇——范式</a></p>
<ol>
<li>
<p>第一范式（1NF）：若关系模式R的<u>每一个分量是不可再分的数据项</u>，则关系模式R属于第一范式。</p>
<p>如，关系模式$R&lt;U,F&gt;$：</p>
<p>$$
U = \{ 学号,姓名,学院,院长,课程号,课程名,成绩 \} \\
F = \{ 学号 \rightarrow 姓名,学号 \rightarrow 学院,学院 \rightarrow 院长,课程号 \rightarrow 课程名,(学号,课程号) \rightarrow 成绩 \}
$$</p>
</li>
<li>
<p>第二范式（2NF）：若关系模式$R \in 1NF$，且<u>每一个非主属性完全依赖于码</u>，则关系模式$R \in 2NF$。</p>
<p>即当<u>1NF消除了对主键的部分函数依赖后就能满足2NF</u>。</p>
<p>例如，$学号 \rightarrow 学院$，即$(学号,课程号) \stackrel{P}{\rightarrow} 学院$（部分依赖于码），所以$R \not\in 2NF$。</p>
<p><u>模式的分解需要保持函数依赖。</u>根据$F$，将$R$分解为：</p>
<ul>
<li>
<p>$R_1&lt;U_1,F_1&gt;$：</p>
<p>$$
U_1 = \{ 学号,姓名,学院,院长 \} \\
F_1 = \{ 学号 \rightarrow 姓名,学号 \rightarrow 学院,学院 \rightarrow 院长 \}
$$</p>
</li>
<li>
<p>$R_2&lt;U_2,F_2&gt;$：</p>
<p>$$
U_2 = \{ 课程号,课程名 \} \\
F_2 = \{ 课程号 \rightarrow 课程名 \}
$$</p>
</li>
<li>
<p>$R_3&lt;U_3,F_3&gt;$：</p>
<p>$$
U_3 = \{ 学号,课程号,成绩 \} \\
F_3 = \{ (学号,课程号) \rightarrow 成绩 \}</p>
</li>
</ul>
<p>则，$R1 \in 2NF$，$R2 \in 2NF$，$R3 \in 2NF$。</p>
</li>
<li>
<p>第三范式（3NF）：若关系模式$R(R \in 2NF)$中<u>任何一个非主属性都不传递函数依赖于码</u>。</p>
<p>若关系模式$R&lt;U,F&gt;$（$U$为关系集，$F$为函数依赖集）中不存在这样的码$X$，使得：</p>
<ul>
<li>$X \rightarrow Y(Y \not\rightarrow X)$，</li>
<li>$Y \rightarrow Z$，</li>
</ul>
<p>则关系模式$R \in 3NF$，其中：</p>
<ul>
<li>$Y$为属性组，</li>
<li>$Z(Z \not\subseteq Y)$为非主属性。</li>
</ul>
<p>即当<u>2NF消除了非主属性对主键的传递函数依赖</u>，则称为3NF。</p>
<p>如，$R_1$中有$学号 \rightarrow 学院$，$学院 \rightarrow 院长$（非主属性&quot;院长&quot;传递依赖于主键&quot;学号&quot;）。可将$R_1$分解为：</p>
<ul>
<li>
<p>$R_{11}&lt;U_{11},F_{11}&gt;$：</p>
<p>$$
U_{11} = \{ 学号,姓名,学院 \} \\
F_{11} = \{ 学号 \rightarrow 姓名, 学号 \rightarrow 学院 \}
$$</p>
</li>
<li>
<p>$R_{12}&lt;U_{12},F_{12}&gt;$：</p>
<p>$$
U_{12} = \{ 学院,院长 \} \\
F_{12} = \{ 学院 \rightarrow 院长 \}
$$</p>
</li>
</ul>
</li>
</ol>
<p>范式之间的关系：</p>
<p>$$
5NF \sub 4NF \sub BCNF \sub 3NF \sub 2NF \sub 1NF
$$</p>
<p><picture><img class="img-fluid " alt="规范化范式的包含关系" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1681894653450.png" loading="lazy" width="564" height="309" />
</picture>

</p>
<p>3NF和BCNE它们是进行规范化的主要目标。</p>
<p>1NF到4NF之间的转换关系：</p>
<table>
<thead>
<tr>
<th style="text-align:center">范式</th>
<th style="text-align:left">转换关系</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1NF</td>
<td style="text-align:left">每一个分量是不可再分的数据项</td>
</tr>
<tr>
<td style="text-align:center">2NF</td>
<td style="text-align:left">1NF消除了部分函数依赖后满足2NF</td>
</tr>
<tr>
<td style="text-align:center">3NF</td>
<td style="text-align:left">2NF消除了非主属性对码的传递函数依赖后满足3NF</td>
</tr>
<tr>
<td style="text-align:center">BCNF</td>
<td style="text-align:left">3NF消除了主属性对码的部分和传递函数依赖后满足BCNF</td>
</tr>
<tr>
<td style="text-align:center">4NF</td>
<td style="text-align:left">BCNF消除非平凡且非函数依赖的多值依赖后满足4NF</td>
</tr>
</tbody>
</table>
<p><picture><img class="img-fluid " alt="规范化步骤" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1681988070233.png" loading="lazy" width="288" height="303" />
</picture>

</p>
<p>几种范式及其分解的性质：</p>
<table>
<thead>
<tr>
<th style="text-align:left">性质</th>
<th style="text-align:center">3NF</th>
<th style="text-align:center">BCNF</th>
<th style="text-align:center">4NF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">消除函数依赖带来冗余</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:left">消除多值函数依赖带来冗余</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:left">保持函数依赖</td>
<td style="text-align:center">是</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:left">保持多值函数依赖</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
<h2 id="数据库设计" data-numberify>数据库设计<a class="anchor ms-1" href="#数据库设计"></a></h2>
<p><a href="/p/%e6%95%b0%e6%8d%ae%e5%ba%93%e7%af%87/#%e6%95%b0%e6%8d%ae%e5%ba%93%e8%ae%be%e8%ae%a1">数据库篇——数据库设计</a></p>
<h2 id="分布式数据库" data-numberify>分布式数据库<a class="anchor ms-1" href="#分布式数据库"></a></h2>
<p>基本概念：</p>
<ul>
<li><strong>分片透明</strong></li>
<li><strong>复制透明</strong></li>
<li><strong>位置透明</strong></li>
<li><strong>逻辑透明</strong></li>
</ul>
<p>性质：</p>
<ul>
<li><strong>共享性</strong>：数据存储在不同的结点数据共享。</li>
<li><strong>自治性</strong>：指每结点对本地数据都能独立管理。</li>
<li><strong>可用性</strong>：指当某一场地故障时，系统可以使用其他场地上的副本而不至于使整个系统瘫痪。</li>
<li><strong>分布性</strong></li>
</ul>
<hr>
<h1 id="结构化设计" data-numberify>结构化设计<a class="anchor ms-1" href="#结构化设计"></a></h1>
<p>跳转连接：<a href="/p/%e7%bb%93%e6%9e%84%e5%8c%96%e8%ae%be%e8%ae%a1%e7%af%87/">软件设计师——结构化设计篇</a></p>
<h2 id="模块化" data-numberify>模块化<a class="anchor ms-1" href="#模块化"></a></h2>
<ul>
<li>
<p><strong>模块</strong>：是在程序中是数据说明、可执行语句等<u>程序对象的集合</u>，或者是单独命名和编址的元素，例如高级语言中的过程、函数和子程序等。</p>
<p>在软件的体系结构中，模块是可组合、分解和更换的单元。</p>
</li>
<li>
<p><strong>模块化</strong>：是指<u>将一个待开发的软件分解成若干个小的简单部分一模块</u>，<u>每个模块可独立地开发、测试，最后组装成完整的程序</u>。</p>
<p>这是一种<u>复杂问题“分而治之”的原则</u>。</p>
<p>模块化的<u>目的是使程序的结构清晰，容易阅读、理解、测试和修改。</u></p>
</li>
<li>
<p><strong>模块独立</strong>：是指<u>每个模块完成一个相对独立的特定子功能</u>，并且<u>与其他模块之间的联系简单</u>。</p>
<p>衡量模块独立程度的标准有（模块独立性的两个定性标准）：</p>
<ul>
<li><strong>耦合性</strong>；</li>
<li><strong>内聚性</strong>。</li>
</ul>
<p>在将软件系统划分模块时，应尽量做到<strong>高内聚</strong>、<strong>低耦合</strong>，提高模块的独立性。</p>
</li>
</ul>
<p>通常，可以按照在软件系统中的功能将模块分为四种类型：</p>
<ul>
<li>传入模块：取得数据或输入数据，经过某些处理，再将其传送给其他模块。</li>
<li>传出模块：输出数据，在输出前可能进行某些处理。数据可能被输出到系统的外部，或者会输出到其他模块进行进一步处理。</li>
<li>变换模块：从上级调用模块得到数据，进行特定的处理，转换成其他形式，再将加工结果返回给调用模块。</li>
<li>协调模块：一般不对数据进行加工，主要是通过调用、协调和管理其他模块来完成特定的功能。</li>
</ul>
<h2 id="耦合和内聚" data-numberify>耦合和内聚<a class="anchor ms-1" href="#耦合和内聚"></a></h2>
<p><picture><img class="img-fluid " alt="耦合的种类" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683443957893.png" loading="lazy" width="874" height="133" />
</picture>

</p>
<table>
<thead>
<tr>
<th style="text-align:center">耦合类型</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">无直接耦合</td>
<td style="text-align:left">没有直接关系，不传递任何信息</td>
</tr>
<tr>
<td style="text-align:center">数据耦合</td>
<td style="text-align:left">调用关系，传递简单数据值</td>
</tr>
<tr>
<td style="text-align:center">标记耦合</td>
<td style="text-align:left">传递数据结构</td>
</tr>
<tr>
<td style="text-align:center">控制耦合</td>
<td style="text-align:left">调用关系，被调模块传递给主调模块控制变量</td>
</tr>
<tr>
<td style="text-align:center">外部耦合</td>
<td style="text-align:left">通过软件之外的环境联结</td>
</tr>
<tr>
<td style="text-align:center">公共耦合</td>
<td style="text-align:left">通过公共数据环境相互作用</td>
</tr>
<tr>
<td style="text-align:center">内容耦合</td>
<td style="text-align:left">直接使用另一个模块的内部数据<br>或通过非正常入口转入另一个模块内部</td>
</tr>
</tbody>
</table>
<p><picture><img class="img-fluid " alt="内聚的种类" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683460613634.png" loading="lazy" width="852" height="150" />
</picture>

</p>
<table>
<thead>
<tr>
<th style="text-align:center">内聚类型</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">偶然内聚<br>（巧合内聚）</td>
<td style="text-align:left">各处理之间没有任何联系</td>
</tr>
<tr>
<td style="text-align:center">逻辑内聚</td>
<td style="text-align:left">执行若干个逻辑上相似的功能，<br>通过参数确定该模块完成哪一个功能</td>
</tr>
<tr>
<td style="text-align:center">时间内聚</td>
<td style="text-align:left">把需要同时执行的动作组合在一起</td>
</tr>
<tr>
<td style="text-align:center">过程内聚</td>
<td style="text-align:left">完成多个任务，这些任务必须按指定的过程执行</td>
</tr>
<tr>
<td style="text-align:center">通信内聚</td>
<td style="text-align:left">所有处理都在同一个数据结构上操作，<br>或者各处理使用相同的输入数据或者产生相同的输出数据</td>
</tr>
<tr>
<td style="text-align:center">顺序内聚</td>
<td style="text-align:left">各处理都与同一功能密切相关且必须顺序执行，<br>前一功能元素的输出就是下一功能元素的输入</td>
</tr>
<tr>
<td style="text-align:center">功能内聚</td>
<td style="text-align:left">所有元素共同作用完成一个功能，缺一不可</td>
</tr>
</tbody>
</table>
<h2 id="系统结构设计原则" data-numberify>系统结构设计原则<a class="anchor ms-1" href="#系统结构设计原则"></a></h2>
<p>为保证总体结构设计顺利完成，应遵循以下几条原则：</p>
<ul>
<li>
<p><strong>分解——协调原则</strong>：</p>
<p>系统整体，具有其整体的目的和功能，但这些目的和功能的实现又是由相互联系的各个组成部分共同工作的结果。解决复杂问题的一个很重要的原则就是把它分解成多个小问题分别处理，在处理过程中根据系统总体要求协调各部门的关系。</p>
</li>
<li>
<p><strong>自顶向下的原则</strong>：从上往下，逐层分解；先确定上层模块的功能，再确定下层模块的功能。</p>
</li>
<li>
<p><strong>信息隐蔽、抽象的原则</strong>：<u>上层模块只规定下层模块做什么和所属模块间的协调关系，但不规定怎么做</u>。</p>
</li>
<li>
<p><strong>一致性原则</strong>：统一的规范、标准、文件模式……</p>
</li>
<li>
<p><strong>明确性原则</strong>：每个模块必须：</p>
<ul>
<li>功能明确、接口明确；</li>
<li>消除多重功能和无用接口。</li>
</ul>
</li>
<li>
<p><strong>高内聚、低耦合</strong></p>
</li>
<li>
<p><strong>模块的扇入系数和扇出系数要合理</strong>：</p>
<ul>
<li><strong>扇出系数</strong>：模块直接调用其他模块的个数。</li>
<li><strong>扇入系数</strong>：模块被其他模块调用时，直接调用它的模块个数。</li>
</ul>
<p><u>一个设计得好的系统的平均扇入、扇出系数通常是 3 或 4，一般不应超过 7</u>。</p>
</li>
<li>
<p><strong>模块的规模适当</strong>：</p>
<ul>
<li><u>过大的模块常常使系统分解得不充分；</u></li>
<li><u>过小的模块有可能降低模块的独立性，造成系统接口的复杂性。</u></li>
</ul>
</li>
<li>
<p><u>模块的作用范围应该在其控制范围之内。</u></p>
</li>
<li>
<p>避免或减少使用病态连接：病态连接是指从中部进入或访问一个模块。</p>
</li>
</ul>
<h2 id="系统文档" data-numberify>系统文档<a class="anchor ms-1" href="#系统文档"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">人员</th>
<th style="text-align:center">阶段</th>
<th style="text-align:left">文档</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">用户<br>系统分析人员</td>
<td style="text-align:center">系统规划<br>系统分析</td>
<td style="text-align:left">沟通文档，主要是<strong>规划报告</strong>、<strong>合同</strong>、<strong>方案</strong>：<br><ul><li>可行性研究报告</li><li>总体规划报告</li><li>系统开发合同</li><li>系统方案说明书</li></ul></td>
</tr>
<tr>
<td style="text-align:center">系统开发人员<br>项目管理人员</td>
<td style="text-align:center">项目期内</td>
<td style="text-align:left">沟通文档（项目管理文件），主要是<strong>计划</strong>、<strong>报告</strong>类文档：<br><ul><li>系统开发计划<ul><li>工作任务分解表</li><li>PERT图</li><li>甘特图</li><li>预算分配表</li></ul></li><li>系统开发月报</li><li>系统开发总结报告</li></ul></td>
</tr>
<tr>
<td style="text-align:center">系统测试人员<br>系统开发人员</td>
<td style="text-align:center">测试</td>
<td style="text-align:left">系统测试人员根据以下文档对系统进行测试：<br><ul><li>系统方案说明书</li><li>系统开发合同</li><li>系统设计说明书</li><li>测试计划</li></ul>系统测试人员再将评估结果撰写成系统测试报告</td>
</tr>
<tr>
<td style="text-align:center">系统开发人员<br>用户</td>
<td style="text-align:center">系统运行期间</td>
<td style="text-align:left">用户通过系统开发人员撰写的文档运行系统：<br><ul><li>用户手册</li><li>操作指南</li></ul></td>
</tr>
<tr>
<td style="text-align:center">系统开发人员<br>系统维护人员</td>
<td style="text-align:center">维护</td>
<td style="text-align:left">沟通文档：<ul><li>系统设计说明书</li><li>系统开发总结报告<ul><li>研制报告</li><li>研制报告</li><li>技术手册</li></ul></li></ul></td>
</tr>
<tr>
<td style="text-align:center">用户<br>维修人员</td>
<td style="text-align:center">运维</td>
<td style="text-align:left">用户将运行过程中的问题进行记载：<ul><li>系统运行报告</li><li>维护修改建议</li></ul>系统维护人员根据以下文档对系统进行维护和升级：<ul><li>维护修改建议</li><li>系统开发人员留下的技术手册等文档</li></ul></td>
</tr>
</tbody>
</table>
<h2 id="数据流图和数据字典" data-numberify>数据流图和数据字典<a class="anchor ms-1" href="#数据流图和数据字典"></a></h2>
<p><a href="/p/%e7%bb%93%e6%9e%84%e5%8c%96%e8%ae%be%e8%ae%a1%e7%af%87/#%e7%bb%93%e6%9e%84%e5%8c%96%e5%88%86%e6%9e%90%e6%96%b9%e6%b3%95">结构化设计篇——结构化分析方法</a></p>
<hr>
<h1 id="软件工程" data-numberify>软件工程<a class="anchor ms-1" href="#软件工程"></a></h1>
<p>跳转连接：<a href="/p/%e8%bd%af%e4%bb%b6%e5%b7%a5%e7%a8%8b%e7%af%87/">软件设计师——软件工程篇</a></p>
<h2 id="软件过程模型" data-numberify>软件过程模型<a class="anchor ms-1" href="#软件过程模型"></a></h2>
<p>能力成熟度模型（从1开始）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">级别</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">初始级</td>
<td style="text-align:left">杂乱无章，几乎没有明确定义的步骤。</td>
</tr>
<tr>
<td style="text-align:center">可重复级</td>
<td style="text-align:left">建立基本的项目管理过程和实践来跟踪项目费用、进度和功能特性。</td>
</tr>
<tr>
<td style="text-align:center">已定义级</td>
<td style="text-align:left">将管理和工程文档化、标准化并综合成标准软件过程；<br>使用标准开发过程（或方法论）构建（或集成）系统。</td>
</tr>
<tr>
<td style="text-align:center">己管理级</td>
<td style="text-align:left">对软件过程和产品质量制定了的详细度量标准，且有定量的理解和控制。</td>
</tr>
<tr>
<td style="text-align:center">优化级</td>
<td style="text-align:left">加强了定量分析，通过过程质量和新观念、新技术使过程不断地改进。</td>
</tr>
</tbody>
</table>
<p>能力成熟度集成连续式模型（从0开始）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">能力等级</th>
<th style="text-align:left">目标</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">未完成的</td>
<td style="text-align:left">未执行或未得到等级1中的所有目标。</td>
</tr>
<tr>
<td style="text-align:center">已执行的</td>
<td style="text-align:left">可标识的输入工作产品到输出工作产品的转换，实现特定目标。<p>关注：特定目标的完成。</p></td>
</tr>
<tr>
<td style="text-align:center">已管理的</td>
<td style="text-align:left">已管理的过程的制度化。<p>关注：针对单个过程实例的能力。</p></td>
</tr>
<tr>
<td style="text-align:center">已定义级的</td>
<td style="text-align:left">已定义的过程的制度化。<p>关注：过程的组织级标准化和部署。</p></td>
</tr>
<tr>
<td style="text-align:center">定量管理的</td>
<td style="text-align:left">可定量管理的过程的制度化。<p>说明：使用测量和质量保证来控制和改进。</p></td>
</tr>
<tr>
<td style="text-align:center">优化的</td>
<td style="text-align:left">优化的过程的制度化。<p>说明：使用量化手段改变和优化。</p></td>
</tr>
</tbody>
</table>
<p>各开发模型的适用范围：</p>
<table>
<thead>
<tr>
<th style="text-align:center">模型</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">适用范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">瀑布模型</td>
<td style="text-align:left">将软件生存周期中的活动定为线性顺序链接的阶段模型</td>
<td style="text-align:left">需求明确、大致固定且变更少</td>
</tr>
<tr>
<td style="text-align:center">V模型</td>
<td style="text-align:left">瀑布模型的变体，强调测试贯穿项目的始终，是一种测试的开发模型</td>
<td style="text-align:left">需求明确、低风险</td>
</tr>
<tr>
<td style="text-align:center">增量模型</td>
<td style="text-align:left">融合瀑布模型和原型迭代，核心功能先完成，每轮迭代都会有新的增量，核心功能得到充分测试，强调每个增量均发布一个可操作的产品</td>
<td style="text-align:left">快速构造可运行的产品，产品升级，领域熟悉或已有原型</td>
</tr>
<tr>
<td style="text-align:center">演化模型</td>
<td style="text-align:left">迭代的过程模型，需求无法被完整定义，功能在使用过程中不断完善</td>
<td style="text-align:left">对软件需求缺乏准确认识的情况</td>
</tr>
<tr>
<td style="text-align:center">原型模型</td>
<td style="text-align:left">原型开发方法模型，目的是快速、低成本地构建原型系统</td>
<td style="text-align:left">需求不清或多变、领域陌生；不适合大规模系统</td>
</tr>
<tr>
<td style="text-align:center">螺旋模型</td>
<td style="text-align:left">结合瀑布和演化模型，强调引入风险分析，属于面向对象开发模型</td>
<td style="text-align:left">庞大、复杂、高风险的系统，开发人员有丰富的风险评估经验和知识</td>
</tr>
<tr>
<td style="text-align:center">喷泉模型</td>
<td style="text-align:left">面向对象模型，特点是迭代、无间隙和支持重用，各阶段无明显界限，可迭代交叉</td>
<td style="text-align:left">面向对象的开发过程</td>
</tr>
<tr>
<td style="text-align:center">统一过程</td>
<td style="text-align:left">用例驱动、以架构为中心、迭代和增量</td>
<td></td>
</tr>
</tbody>
</table>
<p>统一过程模型阶段里程碑和关注点总结：</p>
<table>
<thead>
<tr>
<th style="text-align:center">阶段</th>
<th style="text-align:left">里程碑</th>
<th style="text-align:left">关注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">初始阶段</td>
<td style="text-align:left">生命周期目标</td>
<td style="text-align:left">项目的初创活动</td>
</tr>
<tr>
<td style="text-align:center">精化阶段</td>
<td style="text-align:left">生命周期架构</td>
<td style="text-align:left">需求分析和架构演进</td>
</tr>
<tr>
<td style="text-align:center">构建阶段</td>
<td style="text-align:left">初始运作功能</td>
<td style="text-align:left">系统的构建</td>
</tr>
<tr>
<td style="text-align:center">移交阶段</td>
<td style="text-align:left">产品发布</td>
<td style="text-align:left">软件提交方面的工作</td>
</tr>
</tbody>
</table>
<h2 id="软件需求" data-numberify>软件需求<a class="anchor ms-1" href="#软件需求"></a></h2>
<ul>
<li>
<p><strong>功能需求</strong>：考虑系统要做什么，在何时做，在何时以及如何修改或升级。</p>
</li>
<li>
<p><strong>性能需求</strong>：考虑软件开发的技术性指标。</p>
<p>例如：</p>
<ul>
<li>存储容量限制；</li>
<li>执行速度；</li>
<li>响应时间；</li>
<li>吞吐量。</li>
</ul>
</li>
<li>
<p><strong>用户或人的因素</strong>：考虑用户的类型。</p>
<p>例如：</p>
<ul>
<li>各种用户对使用计算机的熟练程度，需要接受的训练；</li>
<li>用户理解、使用系统的难度；</li>
<li>用户错误操作系统的可能性。</li>
</ul>
</li>
<li>
<p><strong>环境需求</strong>：考虑未来软件应用的环境，包括硬件和软件。</p>
<ul>
<li>对硬件设备的需求包括：机型、外设、接口、地点、分布、湿度、磁场干扰等；</li>
<li>对软件的需求包括：操作系统、网络、数据库等。</li>
</ul>
</li>
<li>
<p><strong>界面需求</strong>：</p>
<p>考虑以下方面：</p>
<ul>
<li>来自其他系统的输入；</li>
<li>到其他系统的输出；</li>
<li>对数据格式的特殊规定；</li>
<li>对数据存储介质的规定。</li>
</ul>
</li>
<li>
<p><strong>文档需求</strong>：考虑需要哪些文档，文档针对哪些读者。</p>
</li>
<li>
<p><strong>数据需求</strong>：</p>
<p>考虑以下方面：</p>
<ul>
<li>输入、输出数据的格式；</li>
<li>接收、发送数据的频率；</li>
<li>数据的准确性和精度；</li>
<li>数据流量；</li>
<li>数据需保持的时间。</li>
</ul>
</li>
<li>
<p><strong>资源使用需求</strong>：</p>
<p>考虑以下方面：</p>
<ul>
<li>软件运行时所需要的数据、其他软件、内存空间等资源；</li>
<li>软件开发、维护时，所需的人力、支撑软件、开发设备。</li>
</ul>
</li>
<li>
<p><strong>安全保密要求</strong>：</p>
<p>考虑以下方面：</p>
<ul>
<li>是否需要对访问系统或系统信息加以控制；</li>
<li>隔离用户数据的方法；</li>
<li>用户程序如何与其他程序和操作系统隔离</li>
<li>系统备份要求。</li>
</ul>
</li>
<li>
<p><strong>可靠性要求</strong>：</p>
<p>考虑以下方面：</p>
<ul>
<li>系统的可靠性要求；</li>
<li>系统是否必须检测和隔离错误；</li>
<li>出错后，重启系统允许的时间。</li>
</ul>
</li>
<li>
<p><strong>软件成本消耗与开发进度需求</strong>：</p>
<p>考虑以下方面：</p>
<ul>
<li>开发是否有规定的时间表；</li>
<li>软/硬件投资有无限制。</li>
</ul>
</li>
<li>
<p><strong>其他非功能性要求</strong>：</p>
<p>如采用某种开发模式，需要确定：</p>
<ul>
<li>质量控制标准；</li>
<li>里程碑和评审；</li>
<li>验收标准；</li>
<li>各种质量要求的优先级；</li>
<li>可维护性方面的要求。</li>
</ul>
</li>
</ul>
<h2 id="单元测试" data-numberify>单元测试<a class="anchor ms-1" href="#单元测试"></a></h2>
<p>在测试中应检查以下要点：</p>
<ul>
<li>
<p>模块接口：模块的接口保证了测试模块的数据流可以正确地流入、流出。</p>
<p>在测试中应检查以下要点：</p>
<ul>
<li>测试模块的<u>输入参数</u>和<u>形式参数</u>在<u>个数、属性、单位</u>上<u>是否一致</u>。</li>
<li>调用其他模块时，所给出的<u>实际参数</u>和<u>被调用模块的形式参数</u>在<u>个数、属性、单位</u>上<u>是否一致</u>。</li>
<li>调用标准函数时，所用的<u>参数在属性、数目和顺序上是否正确</u>。</li>
<li><u>全局变量在各模块中的定义和用法是否一致。</u></li>
<li><u>输入是否仅改变了形式参数。</u></li>
<li><u>开/关的语句</u>是否正确。</li>
<li>规定的<u>I/O格式</u>是否与输入/输出语句一致。</li>
<li>在使用文件之前是否已经打开文件或使用文件之后是否己经关闭文件。</li>
</ul>
</li>
<li>
<p>局部数据结构</p>
</li>
<li>
<p>重要的执行路径</p>
</li>
<li>
<p>出错处理</p>
</li>
<li>
<p>边界条件</p>
</li>
</ul>
<h2 id="集成测试" data-numberify>集成测试<a class="anchor ms-1" href="#集成测试"></a></h2>
<ul>
<li>
<p><strong>非增量集成</strong>：分别测试各个模块，再把这些模块组合起来进行整体测试。</p>
<ul>
<li>优点：可以对模块进行并行测试，能充分利用人力，并加快工程进度。</li>
<li>缺点：容易混乱，出现错误不容易查找和定位。</li>
</ul>
</li>
<li>
<p><strong>增量集成</strong>：以小增量的方式逐步进行构造和测试。</p>
<p>增量式测试的范围一步步扩大，错误容易定位，更易于对接口进行彻底测试，并且可以运用系统化的测试方法。</p>
</li>
</ul>
<p>增量集成策略：</p>
<ul>
<li>自项向下集成测试：从主控模块（主程序）开始，以深度优先或广度优先的方式。不需要驱动模块。</li>
<li>自底向上集成测试：从原子模块开始进行构造和测试。不需要桩模块。</li>
<li>回归测试</li>
<li>冒烟测试</li>
</ul>
<h2 id="测试方法" data-numberify>测试方法<a class="anchor ms-1" href="#测试方法"></a></h2>
<p>黑白盒测试法属于动态测试。设计测试用例时应包括合理的输入条件和不合理的输入条件。</p>
<h2 id="黑盒测试" data-numberify>黑盒测试<a class="anchor ms-1" href="#黑盒测试"></a></h2>
<p>等价类划分：从每个等价类中选取一个代表性数据作为测试用例。用少量代表性的测试用例取得较好的测试效果。</p>
<p>分为有效等价类和无效等价类。</p>
<p>定义等价类的原则如下。</p>
<ol>
<li>在<u>输入条件规定了取值范围或值的个数</u>的情况下，<u>可以定义1个有效等价类和2个无效等价类</u>。</li>
<li>在<u>输入条件规定了输入值的集合或规定了“必须如何”</u>的条件的情况下，<u>可以定义1个有效等价类和一个无效等价类</u>。</li>
<li>在输入条件是一个<u>布尔量</u>的情况下，<u>可以定义一个有效等价类和一个无效等价类</u>。</li>
<li>在<u>规定了输入数据的一组值（假定$n$个）</u>，并且程序要<u>对每一个输入值分别处理</u>的情况下，<u>可以定义$n$个有效等价类和1个无效等价类</u>。</li>
<li>在<u>规定了输入数据必须遵守的规则</u>的情况下，<u>可以定义一个有效等价类（符合规则）和若干个无效等价类（从不同角度违反规则）</u>。</li>
<li>在确知己划分的等价类中，各元素在程序处理中的方式不同的情况下，则应将该等价类进一步划分为更小的等价类。</li>
</ol>
<p>无效等价类的划分：每个无效等价类的测试用例，<u>只违反一个输入的取值范围</u>。如果违反了多个输入的取值范围，那便是不好的测试用例。</p>
<p>例如，输入$x$的取值范围是$0 \sim 10$，输入$y$的取值范围是$-10 \sim -1$，那么可以定义三个等价类：</p>
<ul>
<li>有效等价类1：$x$的取值范围是$0 \sim 10$，输入$x$的取值范围是$-10 \sim -1$；</li>
<li>无效等价类2：$x$的取值范围是$x &lt; 0 \ \ OR \ \ x &gt; 10$，输入$y$的取值范围是$-10 \sim -1$；</li>
<li>无效等价类3：$x$的取值范围是$0 \sim 10$，输入$x$的取值范围是$x &lt; -10 \ \ OR \ \ x &gt; -1$。</li>
</ul>
<p>除了等价类划分还有：</p>
<ul>
<li>边界值分析</li>
<li>错误推测</li>
<li>因果图</li>
</ul>
<h2 id="白盒测试" data-numberify>白盒测试<a class="anchor ms-1" href="#白盒测试"></a></h2>
<p>逻辑覆盖：考察用测试数据运行被测程序时，对程序逻辑的覆盖程度。</p>
<p>主要的逻辑覆盖标准有6种，它们的覆盖程度从低到高为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">逻辑覆盖</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">语句覆盖</td>
<td style="text-align:left">每条语句执行一次</td>
</tr>
<tr>
<td style="text-align:center">分支（判定）覆盖</td>
<td style="text-align:left">每个分支获得一次True/False</td>
</tr>
<tr>
<td style="text-align:center">条件覆盖</td>
<td style="text-align:left">每个分支中的每个逻辑条件的所有可能取值满足一次</td>
</tr>
<tr>
<td style="text-align:center">判定/条件覆盖</td>
<td style="text-align:left">分支覆盖 + 条件覆盖</td>
</tr>
<tr>
<td style="text-align:center">条件组合覆盖</td>
<td style="text-align:left">每个判定中条件的各种可能值的组合都出现一次</td>
</tr>
<tr>
<td style="text-align:center">路径覆盖</td>
<td style="text-align:left">覆盖被测试程序中所有可能的路径</td>
</tr>
</tbody>
</table>
<p>除了逻辑覆盖还有：</p>
<ul>
<li>循环覆盖</li>
<li>基本路径测试</li>
</ul>
<h2 id="软件维护" data-numberify>软件维护<a class="anchor ms-1" href="#软件维护"></a></h2>
<p>正确性和完善性维护是针对来自系统内部的维护，适应性和预防性是针对来自系统外部的维护。</p>
<ul>
<li>
<p>正确性维护针对的是系统内部的错误。</p>
<p>来自系统内部的，与错误有关的都是属于正确性维护。</p>
</li>
<li>
<p>完善性维护针对的是系统内部与功能、性能等方面有关的维护。</p>
<p>来自系统内部的，与系统功能、性能等方面有关的改善都是完善性维护。完善性维护的需求可以来自外部，例如功能的扩展。</p>
</li>
<li>
<p>适应性维护是针对来自系统外部的技术、管理需求等方面的变化。</p>
<p>针对来自系统外部的变化，系统功能等方面没有缺失，仅仅只是适应当前环境变化所做的更改，都是属于适应性维护。</p>
</li>
<li>
<p>预防性维护针对的是未来的环境变化。</p>
</li>
</ul>
<h2 id="沟通路径" data-numberify>沟通路径<a class="anchor ms-1" href="#沟通路径"></a></h2>
<p>软件项目中沟通路径$m$的计算公式（人数$n$）：</p>
<ul>
<li>
<p>沟通图中无主程序员时：</p>
<p>$$
m = \sum_{i=1}^{n} i-1 = \cfrac{(n-1)n}{2}
$$</p>
</li>
<li>
<p>沟通图中有主程序员时：</p>
<p>$$
m = n - 1
$$</p>
</li>
</ul>
<h2 id="估算模型" data-numberify>估算模型<a class="anchor ms-1" href="#估算模型"></a></h2>
<p>COCOMO模型：</p>
<table>
<thead>
<tr>
<th style="text-align:center">模型分类</th>
<th style="text-align:left">类型或说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">基本COCOMO模型</td>
<td style="text-align:left">静态单变量模型，对整个软件系统进行估算</td>
</tr>
<tr>
<td style="text-align:center">中级COCOMO模型</td>
<td style="text-align:left">静态多变量模型，将系统模型分为系统和部件2个层次</td>
</tr>
<tr>
<td style="text-align:center">详细COCOMO模型</td>
<td style="text-align:left">将系统模型分为系统、子系统和模块3个层次</td>
</tr>
<tr>
<td style="text-align:center">COCOMOII</td>
<td style="text-align:left">层次结构，分为应用组装模型、早期设计阶段模型和体系结构阶段模型</td>
</tr>
</tbody>
</table>
<p>COCOMOII的使用时期及规模估算选择：</p>
<table>
<thead>
<tr>
<th style="text-align:center">阶段性模型</th>
<th style="text-align:center">规模估算选择</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">应用组装模型</td>
<td style="text-align:center">对象点</td>
</tr>
<tr>
<td style="text-align:center">早期设计阶段模型</td>
<td style="text-align:center">功能点</td>
</tr>
<tr>
<td style="text-align:center">体系结构阶段模型</td>
<td style="text-align:center">代码行</td>
</tr>
</tbody>
</table>
<h2 id="甘特图和pert图" data-numberify>甘特图和PERT图<a class="anchor ms-1" href="#甘特图和pert图"></a></h2>
<p><a href="/p/%e8%bd%af%e4%bb%b6%e5%b7%a5%e7%a8%8b%e7%af%87/#%e8%bf%9b%e5%ba%a6%e7%ae%a1%e7%90%86">软件工程篇——项目进度管理</a></p>
<h2 id="风险分类" data-numberify>风险分类<a class="anchor ms-1" href="#风险分类"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">分类</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">项目风险</td>
<td style="text-align:left">威胁到项目计划。<p>风险因素：<br>预算、进度、人员、资源和利益相关者，项目复杂度、规模和结构的不确定性</p></td>
</tr>
<tr>
<td style="text-align:center">技术风险</td>
<td style="text-align:left">威胁到软件的质量及交付时间。<p>风险因素：<br>设计、实现、接口、验证和维护，规格说明的歧义性、技术的不确定性、技术陈旧和使用“前沿”技术</p></td>
</tr>
<tr>
<td style="text-align:center">市场风险</td>
<td style="text-align:left">开发了一个没有人真正需要的产品或系统。</td>
</tr>
<tr>
<td style="text-align:center">策略风险</td>
<td style="text-align:left">开发的产品不再符合公司的整体商业策略。</td>
</tr>
<tr>
<td style="text-align:center">销售风险</td>
<td style="text-align:left">开发了一个销售部门不知道如何去销售的产品。</td>
</tr>
<tr>
<td style="text-align:center">管理风险</td>
<td style="text-align:left">由于重点的转移或人员的变动而失去了高级管理层的支持。</td>
</tr>
<tr>
<td style="text-align:center">预算风险</td>
<td style="text-align:left">没有得到预算或人员的保证。</td>
</tr>
</tbody>
</table>
<p>风险管理总结：</p>
<table>
<thead>
<tr>
<th style="text-align:center">风险管理</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">风险识别</td>
<td style="text-align:left">指出对项目计划的威胁。可通过建立风险条目检查表识别。</td>
</tr>
<tr>
<td style="text-align:center">风险预测</td>
<td style="text-align:left">从风险发生的可能性或概率、风险产生的后果评估可能发生的风险。</td>
</tr>
<tr>
<td style="text-align:center">风险评估</td>
<td style="text-align:left">从风险发生的概率和产生的影响评估风险。可用定义风险参照水准技术评估。</td>
</tr>
<tr>
<td style="text-align:center">风险控制</td>
<td style="text-align:left">目的是辅助项目建立处理风险的策略。策略是风险避免、风险监控和RMMM计划。</td>
</tr>
<tr>
<td style="text-align:center">风险避免</td>
<td style="text-align:left">应对风险的最好办法是主动地避免风险。</td>
</tr>
<tr>
<td style="text-align:center">风险监控</td>
<td style="text-align:left">项目管理者应监控某些可以提供风险高低变化指示的因素。</td>
</tr>
</tbody>
</table>
<h2 id="isoiec-9126-软件质量模型" data-numberify>ISO/IEC 9126 软件质量模型<a class="anchor ms-1" href="#isoiec-9126-软件质量模型"></a></h2>
<p>由3个层次组成：</p>
<ol>
<li>第一层：<strong>质量特性</strong></li>
<li>第二层：<strong>质量子特性</strong></li>
<li>第三层：<strong>度量指标</strong></li>
</ol>
<p>该模型的质量特性和质量子特性：</p>
<table>
<tr>
    <th style="text-align: center;">
        质量特性
    </th>
    <th style="text-align: center;">
        质量子特性
    </th>
</tr>
<tr>
    <td style="text-align: center;" rowspan="6">
        <b>功能性</b>（Functionality）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        适合性（Suitability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        准确性（Accurateness）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        互用性（Interoperability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        依从性（Compliance）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        安全性（Security）
    </td>
</tr>
<tr>
    <td style="text-align: center;" rowspan="4">
        <b>可靠性</b>（Reliability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        成熟性（Maturity）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        容错性（Fault tolerance）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易恢复性（Recoverability）
    </td>
</tr>
<tr>
    <td style="text-align: center;" rowspan="4">
        <b>易使用性</b>（Usability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易理解性（Understandability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易学性（Learnability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易操作性（Operability）
    </td>
</tr>
<tr>
    <td style="text-align: center;" rowspan="3">
        <b>效率</b>（Efficiency）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        时间特性（Time behavior）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        资源特性（Resource behavior）
    </td>
</tr>
<tr>
    <td style="text-align: center;" rowspan="5">
        <b>可维护性</b>（Maintainability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易分析性（Analyzability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易改变性（Changeability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        稳定性（Stability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易测试性（Testability）
    </td>
</tr>
<tr>
    <td style="text-align: center;" rowspan="5">
        <b>可移植性</b>（Portability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        适应性（Adaptability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易安装性（Installability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        一致性（Conformance）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易替换性（Replaceability）
    </td>
</tr>
</table>
<p>质量子特性的含义：</p>
<ul>
<li>功能性：
<ul>
<li><strong>适合性</strong>：与对规定任务能否提供一组功能以及这组功能是否适合有关的软件属性。</li>
<li><strong>准确性</strong>：与能够得到正确或相符的结果或效果有关的软件属性。</li>
<li><strong>互用性</strong>：<u>与其他指定系统进行交互操作</u>的能力相关的软件属性。</li>
<li><strong>依从性</strong>：<u>使软件服从有关的标准、约定、法规及类似规定</u>的软件属性。</li>
<li><strong>安全性</strong>：与避免对程序及数据的非授权故意或意外访问的能力有关的软件属性。</li>
</ul>
</li>
<li>可靠性：
<ul>
<li><strong>成熟性</strong>：与由软件故障引起失效的频度有关的软件属性。</li>
<li><strong>容错性</strong>：与<u>在软件错误或违反指定接口的情况下维持指定的性能水平</u>的能力有关的软件属性。</li>
<li><strong>易恢复性</strong>：与<u>在故障发生后，重新建立其性能水平并恢复直接受影响数据</u>的能力，以及为达到此目的所需的时间和努力有关的软件属性。</li>
</ul>
</li>
<li>易使用性：
<ul>
<li><strong>易理解性</strong>：与用户为理解逻辑概念及其应用所付出的劳动有关的软件属性。</li>
<li><strong>易学性</strong>：与用户为学习其应用（例如操作控制、输入、输出）所付出的努力相关的软件属性。</li>
<li><strong>易操作性</strong>：与用户为进行操作和操作控制所付出的努力有关的软件属性。</li>
</ul>
</li>
<li>效率：
<ul>
<li><strong>时间特性</strong>：与响应和处理时间以及软件执行其功能时的吞吐量有关的软件属性。</li>
<li><strong>资源特性</strong>：与软件执行其功能时，所使用的资源量以及使用资源的持续时间有关的软件属性。</li>
</ul>
</li>
<li>可维护性：
<ul>
<li><strong>易分析性</strong>：与为诊断缺陷或失效原因，或为判定待修改的部分所需努力有关的软件属性。</li>
<li><strong>易改变性</strong>：与进行修改、排错或适应环境变换所需努力有关的软件属性。</li>
<li><strong>稳定性</strong>：与修改造成未预料效果的风险有关的软件属性。</li>
<li><strong>易测试性</strong>：为确认经修改软件所需努力有关的软件属性。</li>
</ul>
</li>
<li>可移植性：
<ul>
<li><strong>适应性</strong>：与软件转移到不同环境时的处理或手段有关的软件属性。</li>
<li><strong>易安装性</strong>：与在指定环境下安装软件所需努力有关的软件属性。</li>
<li><strong>一致性</strong>：使软件服从与可移植性有关的标准或约定的软件属性。</li>
<li><strong>易替换性</strong>：与一软件在该软件环境中用来替代指定的其他软件的可能和努力有关的软件属性。</li>
</ul>
</li>
</ul>
<hr>
<h1 id="计算机网络" data-numberify>计算机网络<a class="anchor ms-1" href="#计算机网络"></a></h1>
<p>跳转连接：<a href="/p/%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c%e7%af%87/">软件设计师——计算机网络篇</a></p>
<h2 id="网络分类" data-numberify>网络分类<a class="anchor ms-1" href="#网络分类"></a></h2>
<p>按通信距离分类：</p>
<table>
    <tr>
        <th style="text-align:center">
            网络分类
            </th>
        <th style="text-align:center">
            分布距离
        </th>
        <th style="text-align:center">
            计算机分布范围
        </th>
        <th style="text-align:center">
            传输速率
        </th>
    </tr>
    <tr>
        <td style="text-align:center" rowspan="4">
            <b>
                局域网
                <br>
                MAN
            </b>
        </td>
        <tr>
            <td>10m左右</td>
            <td>房间</td>
            <td rowspan="3">
                4Mbps ~ 1Gbps
            </td>
        </tr>
        <tr>
            <td>100m左右</td>
            <td>楼寓</td>
        </tr>
        <tr>
            <td>1000m左右</td>
            <td>校园</td>
        </tr>
    </tr>
    <tr>
        <td style="text-align:center">
            <b>
                城域网
                <br>
                WAN
            </b>
        </td>
        <td>10km</td>
        <td>城市</td>
        <td>50Kbps ~ 100 Mbps</td>
    </tr>
    <tr>
        <td style="text-align:center">
            <b>
                广域网
                <br>
                LAN
            </b>
        </td>
        <td>100km以上</td>
        <td>国家或全球</td>
        <td>9.6Kbps ~ 45Mbps</td>
    </tr>
</table>
<h2 id="isoosi-网络体系结构" data-numberify>ISO/OSI 网络体系结构<a class="anchor ms-1" href="#isoosi-网络体系结构"></a></h2>
<p><picture><img class="img-fluid " alt="OSI 参考模型" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683875696461.png" loading="lazy" width="390" height="339" />
</picture>

</p>
<ul>
<li>通信子网对应于OSI中的低三层：
<ul>
<li>物理层</li>
<li>数据链路层</li>
<li>网络层</li>
</ul>
</li>
<li>资源子网对应于OSI中的高三层：
<ul>
<li>会话层</li>
<li>表示层</li>
<li>应用层</li>
</ul>
</li>
</ul>
<p><picture><img class="img-fluid " alt="ISO/OSI RM 内信息流动" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683877150679.png" loading="lazy" width="724" height="404" />
</picture>

</p>
<h2 id="网络的拓扑结构" data-numberify>网络的拓扑结构<a class="anchor ms-1" href="#网络的拓扑结构"></a></h2>
<ul>
<li>
<p>总线型结构：</p>
<p><picture><img class="img-fluid " alt="总线型结构" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683875429976.png" loading="lazy" width="223" height="139" />
</picture>

</p>
</li>
<li>
<p>星型结构：</p>
<p><picture><img class="img-fluid " alt="星型结构" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683875460651.png" loading="lazy" width="198" height="164" />
</picture>

</p>
</li>
<li>
<p>环型结构：</p>
<p><picture><img class="img-fluid " alt="环型结构" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683875485913.png" loading="lazy" width="166" height="157" />
</picture>

</p>
</li>
<li>
<p>树型结构：</p>
<p><picture><img class="img-fluid " alt="树型结构" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683875508387.png" loading="lazy" width="184" height="141" />
</picture>

</p>
</li>
<li>
<p>分布式结构：</p>
<p><picture><img class="img-fluid " alt="分布式结构" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683875530047.png" loading="lazy" width="164" height="138" />
</picture>

</p>
</li>
</ul>
<h2 id="网络设备" data-numberify>网络设备<a class="anchor ms-1" href="#网络设备"></a></h2>
<p>按照ISO/OSI的分层将互连设备分类：</p>
<ul>
<li>
<p>物理层设备：</p>
<ul>
<li>中继器（Repeater）</li>
<li>集线器（Hub）：一种多端口的中继器。集线器不能自动寻址，但可以检测发送冲突。</li>
</ul>
</li>
<li>
<p>数据链路层设备：</p>
<ul>
<li>
<p>网桥（Bridge）</p>
</li>
<li>
<p>交换机（Switch）：一种多端口的网桥。</p>
<p>交换技术：</p>
<ul>
<li>端口交换</li>
<li>帧交换</li>
<li>信元交换</li>
</ul>
</li>
</ul>
</li>
<li>
<p>网络层设备：路由器（Router）</p>
<p><picture><img class="img-fluid " alt="路由器类型" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683956321797.png" loading="lazy" width="554" height="235" />
</picture>

</p>
</li>
<li>
<p>应用层设备：网关（Gateway）</p>
</li>
</ul>
<h2 id="网络传输介质" data-numberify>网络传输介质<a class="anchor ms-1" href="#网络传输介质"></a></h2>
<ul>
<li>有线介质：
<ul>
<li>双绞线（Twisted-Pair）</li>
<li>同轴电缆（Coaxial）</li>
<li>光纤（Fiber Optic）</li>
</ul>
</li>
<li>无线介质：
<ul>
<li>微波</li>
<li>红外线和激光</li>
<li>卫星通信</li>
</ul>
</li>
</ul>
<h2 id="lan-模型" data-numberify>LAN 模型<a class="anchor ms-1" href="#lan-模型"></a></h2>
<p><picture><img class="img-fluid " alt="LAN 层次与 ISO/OSI RM 的对应关系" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683879193227.png" loading="lazy" width="397" height="252" />
</picture>

</p>
<h2 id="以太网" data-numberify>以太网<a class="anchor ms-1" href="#以太网"></a></h2>
<ul>
<li>IEEE 802.3中定义的标准局域网，速度为10Mbps，传输介质为细同轴电缆；</li>
<li>IEEE 802.3u中定义的快速以太网，速度为100Mbps，传输介质为双绞线；</li>
<li>IEEE 802.3z中定义的千兆以太网，速度为1000Mbps，传输介质为光纤或双绞线。</li>
</ul>
<h2 id="tcpip-协议族" data-numberify>TCP/IP 协议族<a class="anchor ms-1" href="#tcpip-协议族"></a></h2>
<p>基本特性：</p>
<ul>
<li>逻辑编制：IP地址包括：
<ul>
<li>网络ID号：用来标识网络；</li>
<li>子网ID号：用来标识网络上的一个子网；</li>
<li>主机ID号：用来标识子网上的一台计算机。</li>
</ul>
</li>
<li>路由选择</li>
<li>域名（DNS）解析</li>
<li>错误检测</li>
<li>流量控制</li>
</ul>
<p>TCP/IP分层模型由4个层次构成：</p>
<ol>
<li>应用层</li>
<li>传输层</li>
<li>网际层</li>
<li>网络接口层</li>
</ol>
<p><picture><img class="img-fluid " alt="TCP/IP 模型于 OSI 模型的对比" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683880948768.png" loading="lazy" width="697" height="339" />
</picture>

</p>
<ul>
<li>
<p>TCP（传输控制协议）：在IP提供的不可靠数据服务的基础上为应用程序提供了<u>可靠的、面向连接的、全双工的</u>数据传输服务。</p>
<p>采用三次握手来确认建立和关闭连接是否成功。</p>
</li>
<li>
<p>UDP（用户数据报协议）：一种<u>不可靠的、无连接的</u>协议，可以保证应用程序进程间的通信。</p>
</li>
</ul>
<h2 id="地址解析协议" data-numberify>地址解析协议<a class="anchor ms-1" href="#地址解析协议"></a></h2>
<ul>
<li>ARP（地址解析协议）：将IP地址转换为MAC地址（物理地址）。</li>
<li>RARP（反地址解析协议）：将MAC地址转换为IP地址。</li>
</ul>
<h2 id="动态主机配置协议-dhcp" data-numberify>动态主机配置协议 DHCP<a class="anchor ms-1" href="#动态主机配置协议-dhcp"></a></h2>
<p>DHCP客户端可以从DHCP服务器获得以下内容：</p>
<ul>
<li>本机IP地址</li>
<li>DNS服务器地址</li>
<li>DHCP服务器地址</li>
<li>默认网关的地址</li>
</ul>
<h2 id="无效地址" data-numberify>无效地址<a class="anchor ms-1" href="#无效地址"></a></h2>
<ul>
<li>
<p>Windows无效地址：169.254.X.X</p>
<p>169.254.X.X是Windows系统在DHCP信息租用失败时自动给客户机分配的IP地址。</p>
</li>
<li>
<p>Linux无效地址：0.0.0.0</p>
</li>
</ul>
<h2 id="域名和url" data-numberify>域名和URL<a class="anchor ms-1" href="#域名和url"></a></h2>
<pre tabindex="0"><code>主机名.本地名.组名.最高层域名
</code></pre><p>主机所在的网络级别较高：</p>
<pre tabindex="0"><code>本地名.组名.最高层域名
</code></pre><p>URL即统一资源定位器（统一资源定位符）：</p>
<pre tabindex="0"><code>协议名://主机名.域名.域名后缀.域名分类/目录/网页文件
</code></pre><h2 id="ip" data-numberify>IP<a class="anchor ms-1" href="#ip"></a></h2>
<p><strong>IPv4：</strong></p>
<p><picture><img class="img-fluid " alt="IPv4各类地址分配方案" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683896541328.png" loading="lazy" width="484" height="412" />
</picture>

</p>
<p>全<code>0</code>代表的是网络，全<code>1</code>代表的是广播。</p>
<p>IPv4能表示的地址个数为：</p>
<p>$$
2^{32} \approx 40亿
$$</p>
<p><picture><img class="img-fluid " alt="IP地址类默认的子网掩码" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%E7%AF%87/uTools_1683897195900.png" loading="lazy" width="912" height="144" />
</picture>

</p>
<p>**IPv6：**长达128位的地址空间，彻底解决IPv4地址不足的问题。</p>
<p>IPv6理论上能表示的地址个数：</p>
<p>$$
2^{128} = 3.4 \times 10^{38}
$$</p>
<h2 id="防火墙技术" data-numberify>防火墙技术<a class="anchor ms-1" href="#防火墙技术"></a></h2>
<p>防火墙技术是<u>建立在内外网络边界上的过滤封锁机制</u>，它认为：</p>
<ul>
<li><u>内部网络是安全和可信赖的</u>；</li>
<li><u>外部网络是不安全和不可信赖的</u>。</li>
</ul>
<p>防火墙的作用：<u>防止不希望的、未经授权地进出被保护的内部网络。</u></p>
<p>防火墙技术经历了三个发展阶段：</p>
<ol>
<li>包过滤防火墙</li>
<li>应用代理网关防火墙</li>
<li>状态检测技术防火墙</li>
</ol>
<h2 id="入侵检测" data-numberify>入侵检测<a class="anchor ms-1" href="#入侵检测"></a></h2>
<p>入侵检测系统（DS）作为防火墙之后的第二道安全屏障。</p>
<p>入侵检测系统有效的弥补了防火墙系统对网络上的入侵行为无法识别和检测的不足。</p>
<p>入侵防御系统（IPS）是在入侵检测系统的基础上发展起来的，不仅能检测到网络中的攻击行为，同时主动对攻击行为发出响应，对攻击进行防御。</p>
<h2 id="网络攻击" data-numberify>网络攻击<a class="anchor ms-1" href="#网络攻击"></a></h2>
<p>攻击目标对于攻击者是个黑盒子。</p>
<p>网络攻击手段有：</p>
<ul>
<li>拒绝服务攻击（Dos攻击）：使计算机或网络无法提供正常的服务通过不断向计算机发起请求来实现的。</li>
<li>重放攻击：攻击者发送一个目的主机已经接受过的报文来达到攻击目的。</li>
<li>口令入侵攻击。</li>
<li>特洛伊木马。</li>
<li>端口欺骗攻击。</li>
<li>网络监听。</li>
<li>IP欺骗攻击。</li>
<li>SQL注入攻击。</li>
</ul>
<h2 id="病毒" data-numberify>病毒<a class="anchor ms-1" href="#病毒"></a></h2>
<p>病毒类型：</p>
<ul>
<li>
<p>Worm（蠕虫病毒）：</p>
<ul>
<li>欢乐时光，</li>
<li>熊猫烧香，</li>
<li>红色代码，</li>
<li>爱虫病毒，</li>
<li>震网。</li>
</ul>
</li>
<li>
<p>Trojan（特洛伊木马）：通过内部发起连接与外部主机建立联系，由外部主机控制并盗取用户信息。</p>
<p>计算机感染特洛伊木马后的典型线型是<u>有未知程序试图建立网络连接</u>。</p>
<p>常见的木马如冰河。</p>
</li>
<li>
<p>Backdoor（后门病毒）。</p>
</li>
<li>
<p>Macro（宏病毒）：</p>
<p>宏病毒感染的对象主要是<u>文本文档</u>、<u>电子表格</u>等。</p>
</li>
</ul>
<hr>
<h1 id="算法设计与分析" data-numberify>算法设计与分析<a class="anchor ms-1" href="#算法设计与分析"></a></h1>
<p>跳转连接：<a href="/p/%e7%ae%97%e6%b3%95%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%88%86%e6%9e%90%e7%af%87/">软件设计师——算法设计与分析篇</a></p>
<h2 id="算法设计方法" data-numberify>算法设计方法<a class="anchor ms-1" href="#算法设计方法"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">算法设计方法</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">特点</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">分治法</td>
<td style="text-align:left"><ol><li>将原问题<strong>分解</strong>成多个<u>与原问题相同的子问题</u></li><li><strong>递归地求解</strong>各子问题</li><li>将子问题的解<strong>合并</strong>成原问题的解</li></ol></td>
<td style="text-align:left">原问题规模大且能分解为多个与原问题相同的子问题</td>
<td style="text-align:left"><ul><li>归并排序</li><li>快速排序</li><li>最大字段和问题</li></ul></td>
</tr>
<tr>
<td style="text-align:center">动态规划法</td>
<td style="text-align:left"><ol><li>找出并刻画最优解的结构特征</li><li>递归地定义最优解的值</li><li>自底向上方式计算最优值或构造最优解</li></ol></td>
<td style="text-align:left">求解具有某种最优性质的问题</td>
<td style="text-align:left"><ul><li>0-1 背包问题</li><li>矩阵连乘</li><li>最长公共序列（LCS）</li></ul></td>
</tr>
<tr>
<td style="text-align:center">贪心法</td>
<td style="text-align:left">与动态规划类似，但贪心法考虑的是局部最优解</td>
<td style="text-align:left">并不保证得到全局最优解，但通常能得到近似最优解</td>
<td style="text-align:left"><ul><li>活动选择问题</li><li>背包问题</li></ul></td>
</tr>
<tr>
<td style="text-align:center">回溯法</td>
<td style="text-align:left">在解空间树中，按<u>深度优先策略</u>，从根结点出发搜索解空间树</td>
<td style="text-align:left"><ul><li>可以搜索问题的所有解或任一解</li><li>适用于求解组合数较大的问题</li><li>通过限界函数减少问题的搜索空间</li></ul></td>
<td style="text-align:left"><ul><li>0-1背包问题</li><li>n皇后问题</li></ul></td>
</tr>
<tr>
<td style="text-align:center">分支限界法</td>
<td style="text-align:left">与回溯法类似，在解空间树种按<u>广度优先</u>或<u>最小耗费</u>优先方式，搜索满足约束条件的一个解</td>
<td style="text-align:left"><ul><li>可以给出<u>在某种意义下的最优解</u></li><li>分为队列式和优先队列式，优先队列式通过最大堆或最小堆实现</li></u></ul></td>
<td style="text-align:left"><ul><li>0-1 背包问题</li></ul></td>
</tr>
</tbody>
</table>
<h2 id="算法实例" data-numberify>算法实例<a class="anchor ms-1" href="#算法实例"></a></h2>
<p><a href="/p/%e7%ae%97%e6%b3%95%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%88%86%e6%9e%90%e7%af%87/#%e7%ae%97%e6%b3%95%e5%ae%9e%e4%be%8b">算法设计与分析篇——算法实例</a></p>
<h2 id="查找算法" data-numberify>查找算法<a class="anchor ms-1" href="#查找算法"></a></h2>
<p><a href="/p/%e7%ae%97%e6%b3%95%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%88%86%e6%9e%90%e7%af%87/#%e6%9f%a5%e6%89%be%e7%ae%97%e6%b3%95">算法设计与分析篇——查找算法</a></p>
<p>查找算法在查找成功时的<u>平均查找长度</u>关键字和给定值比较次数的期望值：</p>
<p>$$
ASL = \sum_{i=1}^{n}{P_iC_i}
$$</p>
<ul>
<li>
<p>$P_i$为对表中第$i$个记录进行查找的概率，</p>
<p>一般认为$P_i=\cfrac{1}{n}, 1 \le i \le n$，即$\sum_{i=1}^{n}{P_i}$；</p>
</li>
<li>
<p>$C_i$为查找成功时，已经进行过比较的关键字个数。</p>
</li>
</ul>
<p>静态查找表有以下查找方法：</p>
<ul>
<li>顺序查找；</li>
<li>折半查找；</li>
<li>分块查找。</li>
</ul>
<p>动态查找表有以下查找方法：</p>
<ul>
<li>二叉排序树；</li>
<li>平衡排序树；</li>
<li>B-树；</li>
<li>哈希表。</li>
</ul>
<p><strong>顺序查找</strong>中，$C_i$取决于所查记录在表中的位置。一般情况下，$C_i = n - i + 1$，在等概率下，顺序查找的平均查找长度为：</p>
<p>$$
ASL_{ss} = \cfrac{1}{n} \sum_{i=1}^{n}{(n-i+1)} = \cfrac{n+1}{2}
$$</p>
<p><strong>折半查找</strong>的平均查找长度（假设结点总数为$n=2^h-1$，即折半查找树为深度$h=log_2(n+1)$的满二叉树）：</p>
<p>$$
ASL_{bs} = \cfrac{1}{n} \sum_{i=1}^{n}{i \times 2^{i-1}} = \cfrac{n+1}{n} log_2{(n+1)} - 1
$$</p>
<p>当$n$值较大时，$ASL_{bs} \approx log_2{(n+1)} - 1$。</p>
<h2 id="哈希函数" data-numberify>哈希函数<a class="anchor ms-1" href="#哈希函数"></a></h2>
<p><strong>哈希函数构造方法</strong>：</p>
<ul>
<li>直接定址法；</li>
<li>数字分析法；</li>
<li>平方取中法；</li>
<li>折叠法；</li>
<li>随机数法；</li>
<li>除留余数法</li>
</ul>
<p>哈希函数的构造要考虑到：</p>
<ul>
<li>压缩性：节省存储空间；</li>
<li>散列性：尽量减少冲突。</li>
</ul>
<p><strong>除留取余数法：</strong></p>
<p>$$
f(key)=key \enspace mod \enspace p\quad (p\le m),\ m为散列表长
$$</p>
<p><strong>冲突处理方法：</strong></p>
<ul>
<li>开放地址法；</li>
<li>多重散列法（再哈希法）；</li>
<li>链地址法；</li>
<li>公共溢出区法……</li>
</ul>
<p><strong>开放地址法</strong>（三种寻找空散列地址的方法）：</p>
<ul>
<li>
<p>线性探测法（线性探测再散列）：</p>
<p>$$
H_i=(H(key)+d) mod m
$$</p>
<p>其中：</p>
<ul>
<li>$d$取$0,1,2,&hellip;,m-1$；</li>
<li>$m$为散列表的长度。</li>
</ul>
<p>$d$初始为0，如果有冲突，那么$d$就通过递增来寻找空的散列地址。</p>
</li>
<li>
<p>二次探测法（二次探测再散列）：</p>
<p>$$
H_i=(H(key)+q^2) mod m
$$</p>
<p>其中：</p>
<ul>
<li>$q$取$0,1,-1,2,-2,&hellip;,\pm k$，$k \le \cfrac{m}{2}$</li>
<li>$m$为散列表的长度</li>
</ul>
</li>
</ul>
<h2 id="排序算法" data-numberify>排序算法<a class="anchor ms-1" href="#排序算法"></a></h2>
<p><a href="/p/%e7%ae%97%e6%b3%95%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%88%86%e6%9e%90%e7%af%87/#%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95">算法设计与分析篇——排序算法</a></p>
<p>排序算法有稳定排序和不稳定排序两种。假设待排序序列中，$R_i$和$R_j$值相同，且$R_i$领先于$R_j$，排序后：</p>
<ul>
<li><strong>稳定排序</strong>：排序后$R_i$和$R_j$相对次序不变，$R_i$任领先于$R_j$；</li>
<li><strong>不稳定排序</strong>：排序后可能出现$R_j$领先于$R_i$的情况。</li>
</ul>
<p>根据记录存储的位置可分为：</p>
<ul>
<li><strong>内部排序</strong>：待排序记录存储在内存中进行排序的过程。</li>
<li><strong>外部排序</strong>：排序记录的数量很大，内存无法容纳全部记录，在排序过程需要对外存进行访问的排序过程。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">排序算法</th>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">最坏时间复杂度</th>
<th style="text-align:center">最好时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">稳定性</th>
<th style="text-align:center">是否归位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">直接插入排序</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">稳定</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">希尔排序</td>
<td style="text-align:center">$O(n^{1.3})$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">不稳定</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">简单选择排序</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">不稳定</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">堆排序</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">不稳定</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">冒泡排序</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">稳定</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">快速排序</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(log_2{n})$</td>
<td style="text-align:center">不稳定</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">归并排序</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">稳定</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
<blockquote>
<p>是否归位：在排序过程中，能否确定某些元素的最终排序位置。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>软考图类汇总篇</title>
      <link>/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/</link>
      <pubDate>Sat, 20 May 2023 13:29:14 +0800</pubDate>
      
      <guid>/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/</guid>
      <description><![CDATA[数据流图（DFD） 数据流图是在逻辑上描述系统的功能、输入、输出和数据存储等。 数据流图中的基本图形元素包括： 基本元素 图形表示 数据流 加工 数据存储]]></description>
      <content:encoded><![CDATA[<h1 id="数据流图dfd" data-numberify>数据流图（DFD）<a class="anchor ms-1" href="#数据流图dfd"></a></h1>
<p>数据流图是在逻辑上描述系统的功能、输入、输出和数据存储等。</p>
<p>数据流图中的基本图形元素包括：</p>
<table>
<thead>
<tr>
<th style="text-align:center">基本元素</th>
<th style="text-align:center">图形表示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">数据流</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="数据流" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683518468182.png" loading="lazy" width="193" height="71" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">加工</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="加工" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1683518239889.png" loading="lazy" width="282" height="105" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">数据存储</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="数据存储" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517944926.png" loading="lazy" width="350" height="79" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">外部实体</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="外部实体" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517896893.png" loading="lazy" width="118" height="79" />
</picture>

</td>
</tr>
</tbody>
</table>
<p>软件系统内部的<strong>数据处理模型</strong>，使用<u>数据流</u>、<u>加工</u>和<u>数据存储</u>构建。</p>
<ul>
<li>
<p><strong>数据流</strong>（Data Flow）：由一组固定成分的数据组成，表示数据的流向。</p>
<p><picture><img class="img-fluid " alt="数据流" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683518468182.png" loading="lazy" width="193" height="71" />
</picture>

</p>
<p>在DFD种，数据流的流向由以下几种：</p>
<ul>
<li>从<u>加工</u>流向另一个<u>加工</u>；</li>
<li>从<u>加工</u>流向<u>数据存储</u>（写）；</li>
<li>从<u>数据存储</u>流向<u>加工</u>（读）；</li>
<li>从<u>外部实体</u>流向<u>加工</u>（输入）；</li>
<li>从<u>加工</u>流向<u>外部实体</u>（输出）。</li>
</ul>
<p>即数据流的<u>起点或终点必须至少有一个是加工</u>。</p>
<p>除了与数据存储有关的数据流（流向数据存储或从数据存储流出），DFD中的每个数据流都必须用一个定义明确的名字表示。</p>
</li>
<li>
<p><strong>加工</strong>（Process）：加工描述了输入数据流到输出数据流之间的变换，也就是<u>输入数据流经过什么处理后变成了输出数据流</u>。</p>
<p><picture><img class="img-fluid " alt="加工" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1683518239889.png" loading="lazy" width="282" height="105" />
</picture>

</p>
<p>每个加工都有一个名字和编号。</p>
<p>一个加工可以有多个输入数据流和多个输出数据流，但<u>至少有一个输入数据流和一个输出数据流</u>。</p>
<p>数据流图中常见的3种错误如下所示：</p>
<ul>
<li>
<p><strong>黑洞</strong>：加工只有输入，没有输出。</p>
<p>如下图加工1。</p>
</li>
<li>
<p><strong>白洞</strong>：加工只有输出但没有输入。</p>
<p>如下图加工2。</p>
</li>
<li>
<p><strong>灰洞</strong>：加工中输入数据不足以产生输出数据。</p>
<p>有几种可能的原因：</p>
<ul>
<li>一个错误的命名过程；</li>
<li>错误命名的输入或输出；</li>
<li>不完全的事实。</li>
</ul>
<p>如下图加工3。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="数据流图中常见错误" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1683528176745.png" loading="lazy" width="793" height="542" />
</picture>

</p>
</li>
<li>
<p><strong>数据存储</strong>（Data Store）：存储和提供数据。</p>
<p><picture><img class="img-fluid " alt="数据存储" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517944926.png" loading="lazy" width="350" height="79" />
</picture>

</p>
<p>每个数据存储都有一个定义明确的名字标识。</p>
<p>数据存储可以：</p>
<ul>
<li>存储加工的输出数据：数据流流入数据存储，表示数据的写入操作；</li>
<li>提供加工的输入数据：数据流从数据存储流出，表示数据的读操作。</li>
<li>双向箭头的数据流指向数据存储，表示对数据的修改。</li>
</ul>
<p>DFD中的数据存储在具体实现时可以用以下方式实现：</p>
<ul>
<li>文件系统实现；</li>
<li>数据库系统实现。</li>
</ul>
<p>数据存储的存储介质可以是：</p>
<ul>
<li>磁盘、</li>
<li>磁带、</li>
<li>其他存储介质。</li>
</ul>
</li>
<li>
<p><strong>外部实体</strong>（External Agent，外部主体）：指<u>存在于软件系统之外的人员、组织、物体或外部系统</u>，它指出系统所需数据的<u>发源地（源）</u>和<u>系统所产生的数据的归宿地（宿）</u>。</p>
<p><picture><img class="img-fluid " alt="外部实体" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683517896893.png" loading="lazy" width="118" height="79" />
</picture>

</p>
<p>例如：</p>
<ul>
<li>人员：学生、老师、员工、主观、医生、客户……</li>
<li>组织：供应商、采购部门……</li>
<li>物体：传感器、控制器、单车、车辆……</li>
<li>外部系统：支付系统、车辆交易系统、库存管理系统、道闸控制系统……</li>
</ul>
<p>在许多系统中，某个源和某个宿可以是同一个人员、组织、物体或外部系统，此时，在DFD中可以用同一个符号表示：</p>
<ul>
<li>当数据流从该符号流出时，表示它是源；</li>
<li>当数据流流向该符号时，表示它是宿；</li>
<li>当两者皆有时，表示它既是源又是宿。</li>
</ul>
<p>外部实体表示存在于系统之外的对象，用来帮助用户理解系统数据的来源和去向。</p>
</li>
</ul>
<p>数据流图必须确保：</p>
<ul>
<li>数据流的起点或终点必须至少有一个是加工。</li>
<li>加工至少有一个输入数据流和一个输出数据流。</li>
</ul>
<p>分层数据流图：</p>
<ol>
<li>
<p>顶层图：描述系统的输入和输出。</p>
<p>即描述系统从哪些外部实体接受数据流，以及系统发送数据流到哪些外部实体。</p>
<ul>
<li>顶层图只有一个加工，即待开发的软件系统。</li>
<li>顶层图中的数据流就是系统的输入/输出信息。</li>
<li>顶层图中通常没有数据存储。</li>
</ul>
</li>
<li>
<p>0层图：分解顶层图的加工。</p>
</li>
<li>
<p>再分解：将DFD中某些比较复杂的加工再次分解成一张DFD子图。</p>
</li>
</ol>
<hr>
<h1 id="实体联系图e-r-图erd" data-numberify>实体联系图（E-R 图，ERD）<a class="anchor ms-1" href="#实体联系图e-r-图erd"></a></h1>
<p>E-R图有以下几个成分（包含扩充的E-R模型成分）：</p>
<p><picture><img class="img-fluid " alt="E-R图中的主要构件" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682508598814.png" loading="lazy" width="1035" height="391" />
</picture>

</p>
<ul>
<li>
<p><strong>实体</strong>：用<strong>矩形</strong>表示。</p>
<ul>
<li>
<p><strong>弱实体</strong>：使用<strong>双线矩形框</strong>表示。将需要依赖其他实体存在的实体。</p>
<p>实体间的所有（Ownership，拥有）关系代表一个实体对另一些实体具有很强的依赖关系，即一个实体的存在必须以另一个实体为前提。</p>
<p>例如职工与家属的联系，家属总是属于某职工的（在关系模式中需要依赖职工而存在），所以家属是弱实体。</p>
</li>
<li>
<p><strong>特殊化</strong>：将一个实体集<u>按照某些特性区分为几个<strong>子实体</strong></u>。这种从普遍到特殊的过程即为特殊化。</p>
<p>子实体的图形表示如下：</p>
<p><picture><img class="img-fluid " alt="子实体" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684564987147.png" loading="lazy" width="256" height="145" />
</picture>

</p>
<p>子实体由称为子类，它会有一个超类，并且能继承超类的属性，超类的属性是实体集中所有子实体的相同属性。</p>
</li>
</ul>
</li>
<li>
<p><strong>联系</strong>：用<strong>棱形</strong>表示，并用无向边分别与有关实体连接起来，同时在无向边标注联系的类型。</p>
<p>联系的类型有两种：</p>
<ul>
<li>
<p>两个实体间的联系：</p>
<ul>
<li>$1:1$：一对一联系；</li>
<li>$1:n$：一对多联系；</li>
<li>$m:n$：多对多联系。</li>
</ul>
</li>
<li>
<p>两个以上实体间的联系：</p>
<p>例如3个实体间的联系有：</p>
<ul>
<li>$1:1:1$</li>
<li>$1:1:n$</li>
<li>$1ⓜ️n$</li>
<li>$rⓜ️n$</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>属性</strong>：用<strong>椭圆形</strong>表示，并用无向边将其与相应的实体连接起来</p>
<p>E-R模型中的属性有以下分类：</p>
<ul>
<li>简单属性：是原子的、不可再分的。</li>
<li>复合属性：可以细分为更小的部分。</li>
<li>单值属性：一个属性对应一个值。</li>
<li>多值属性：一个属性对应一组值。</li>
<li>NULL属性：实体在某个属性上没有值或属性值未知时，使用NULL值表示。</li>
<li>派生属性：派生属性可以从其他属性得来（通过运算等方式求出）。</li>
</ul>
</li>
</ul>
<h2 id="概念结构模型合并分-e-r-图" data-numberify>概念结构模型（合并分 E-R 图）<a class="anchor ms-1" href="#概念结构模型合并分-e-r-图"></a></h2>
<p>建立概念结构模型的步骤如下：</p>
<ol>
<li>
<p>选择局部应用：选择适当层次的数据流图，让这一层的每一部分对应一个局部应用，实现某一项功能。</p>
</li>
<li>
<p>逐一设计分E-R图。</p>
</li>
<li>
<p>E-R图合并：</p>
<p>合并时需要考虑各分E-R图之间的冲突：</p>
<ul>
<li><strong>属性冲突</strong>：同一属性在不同的分E-R图上的属性类型、取值范围和数据单位等可能会不一致。</li>
<li><strong>命名冲突</strong>：相同意义的属性在不同的分E-R图上可能会有不同的命名。</li>
<li><strong>结构冲突</strong>：同一实体在不同的分E-R图中可能会有不同的属性；同一对象在某一分E-R图中被抽象为实体，而在另一分E-R图中又可能被抽象为属性，反之亦然。</li>
</ul>
</li>
</ol>
<h2 id="转换关系模式" data-numberify>转换关系模式<a class="anchor ms-1" href="#转换关系模式"></a></h2>
<ol>
<li>
<p>实体向关系模式的转换：</p>
<p>将E-R图中的实体逐一转换成为一个关系模式：</p>
<ul>
<li>实体名：对应关系模式的名称；</li>
<li>实体的属性：转换成关系模式的属性；</li>
<li>实体标识符：关系的码（键）。</li>
</ul>
<p>超类和子类的转换：超类和子类定义为两个关系模式，将超类的主键加到子类中。</p>
</li>
<li>
<p>联系向关系模式的转换：</p>
<ul>
<li>
<p>一对一联系的转换：</p>
<p>有两种方式：</p>
<ul>
<li>
<p>方式1：将联系转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性包括该联系所关联的两个实体的码及联系的属性，关系的码取自任一方实体的码。</p>
<p>那么一个一对一联系需要转换成三个关系模式。</p>
</li>
<li>
<p>方式2（一般使用该方式）：将联系归并到关联的两个实体的任一方，给待归并的一方实体属性集中增加另一方实体的码和该联系的属性即可，归并后的实体码保持不变。</p>
<p>一个一对一联系仅需转换成两个关系模式。</p>
</li>
</ul>
<p>例如：</p>
<p><picture><img class="img-fluid " alt="联系向关系模式的转换示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682562445900.png" loading="lazy" width="304" height="358" />
</picture>

</p>
<ul>
<li>
<p>方式1：</p>
<p>厂长（<strong>姓名</strong>，性别，年龄）</p>
<p>工厂（<strong>厂号</strong>，厂名，地点）</p>
<p>管理（（厂长）<strong>姓名</strong>，厂号，任期）</p>
<blockquote>
<p>粗体代表该关系模式的码。管理的码可以为姓名或厂号。</p>
</blockquote>
</li>
<li>
<p>方式2：</p>
<p>厂长（姓名，性别，年龄）</p>
<p>工厂（厂号，厂名，地点，（厂长）姓名，任期）</p>
</li>
</ul>
</li>
<li>
<p>一对多联系的转换：</p>
<p>两种方式：</p>
<ul>
<li>方式1：将联系转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性取该联系所关联的两个实体的码及联系的属性，<u>关系的码是多方实体的码</u>；</li>
<li>方式2（一般使用该方式）：将联系<u>归并到关联的两个实体的多方</u>，给待归并的多方实体属性集中增加一方实体的码和该联系的属性即可，归并后的多方实体码保持不变。</li>
</ul>
<p>例如：</p>
<p><picture><img class="img-fluid " alt="一对多联系转换的例子" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682563544291.png" loading="lazy" width="315" height="361" />
</picture>

</p>
<ul>
<li>
<p>方式1:</p>
<p>仓库（<strong>仓库号</strong>，地点，面积）</p>
<p>商品（<strong>货号</strong>，商品名，价格）</p>
<p>仓储（<strong>货号</strong>，仓库号，数量）</p>
</li>
<li>
<p>方式2：</p>
<p>仓库（<strong>仓库号</strong>，地点，面积）</p>
<p>商品（<strong>货号</strong>，商品名，价格，仓库号，数量）</p>
</li>
</ul>
</li>
<li>
<p>多对多联系的转换：</p>
<p>多对多联系只能转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性取该联系所关联的两个多方实体的码及联系的属性，关系的码是多方实体的码构成的属性组。</p>
<p>例如：</p>
<p><picture><img class="img-fluid " alt="多对多联系转换的示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682564018777.png" loading="lazy" width="327" height="373" />
</picture>

</p>
<p>转换成：</p>
<p>学生（<strong>学号</strong>，姓名，性别，年龄）</p>
<p>课程（<strong>课程号</strong>，课程名，学时）</p>
<p>选修（<strong>（学号，课程号）</strong>，成绩）</p>
</li>
</ul>
</li>
</ol>
<hr>
<h1 id="uml" data-numberify>UML<a class="anchor ms-1" href="#uml"></a></h1>
<p>UML（Unified Modeling Language，统一建模语言）是面向对象软件的标准化建模语言。</p>
<p>UML中包含3种基本构造块：</p>
<ul>
<li>事物；</li>
<li>关系；</li>
<li>图。</li>
</ul>
<h2 id="事物" data-numberify>事物<a class="anchor ms-1" href="#事物"></a></h2>
<p>UML中有4种事物：</p>
<ul>
<li>
<p><strong>结构事物</strong>（Structural Thing）：模型的<u>静态部分</u>。</p>
<p><picture><img class="img-fluid " alt="结构事物的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682055522161.png" loading="lazy" width="708" height="294" />
</picture>

</p>
</li>
<li>
<p><strong>行为事物</strong>（Behavior Thing）：模型的<u>动态部分</u>。</p>
<p><picture><img class="img-fluid " alt="行为事物的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682055712246.png" loading="lazy" width="621" height="133" />
</picture>

</p>
</li>
<li>
<p>分组事物（Grouping Thing）：模型的<u>组织部分</u>。</p>
</li>
<li>
<p>注释事物（Annotational Thing）：模型的<u>解释部分</u>。</p>
</li>
</ul>
<h2 id="关系" data-numberify>关系<a class="anchor ms-1" href="#关系"></a></h2>
<p>UML中有4种关系，这4种关系是UML模型中可以包含的基本关系事物：</p>
<ul>
<li>
<p><strong>依赖</strong>（Dependency）：是<u>两个事物间的语义关系，其中一个事物（<strong>独立事物</strong>）发生变化会影响另一个事物（<strong>依赖事物</strong>）的语义</u>。</p>
<p>在图形上，把一个依赖画成一条<u>可能有方向的虚线</u>，如图：</p>
<p><picture><img class="img-fluid " alt="依赖的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057108089.png" loading="lazy" width="200" height="48" />
</picture>

</p>
<p>依赖有偶然性和临时性，即需要的时候依赖，不需要的时候不依赖。</p>
</li>
<li>
<p><strong>关联</strong>（Association）：是一种<u>结构关系</u>，它描述了一组链，<u>链是对象之间的连接</u>。</p>
<p>关联使用<u>实线</u>表示，在关联上可以标注重复度（Multiplicity）和角色（Role）。</p>
<p>描述了<u>整体和部分</u>间的结构关系的特殊类型的关联：</p>
<ul>
<li>
<p><strong>聚集</strong>（Aggregation，聚合）：<u>部分和整体的生命周期不一致</u>，整体消失了，部分仍然存在，<u>部分可以脱离整体存在</u>。</p>
<p>使用一端带<u>空心菱形</u>的实线表示。</p>
</li>
<li>
<p><strong>组合</strong>：<u>部分和整体的生命周期一致</u>，整体消失了，部分也消失了，<u>部分不可以脱离整体而存在</u>。</p>
<p>使用一端带<u>实心菱形</u>的实线表示。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="关联和聚集的图形化表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682057458153.png" loading="lazy" width="408" height="101" />
</picture>

</p>
<blockquote>
<p>聚合和组合中，带菱形的一端指向整体，另一端指向部分。</p>
<p>关联的关系强度比依赖的关系强度要强一点。</p>
</blockquote>
<ul>
<li>
<p>单向关联：用<u>带箭头实线</u>表示。</p>
</li>
<li>
<p>多重度：</p>
<p>进行面向对象设计时，类图中可以展现类之间的关联关系，还可以在类图中图示<u>关联中的数量关系</u>，即多重度。表示数量关系时，<u>用多重度说明数量或数量范围</u>，<u>表示有多少个实例（对象）能被连接起来</u>，即<u>一个类的实例能够与另一个类的多少个实例相关联</u>。</p>
</li>
<li>
<p>关联类：</p>
<p>当两个类之间的关联的重复度是多对多时，需要借助额外的属性来帮助表达它们之间的关系，而这个属性就需要定义在一个新的关联类中。关联类记录了这两个类之间的关联信息。关联中这些额外的属性用一条<u>垂直于关联的实线</u>表示，实线的一段连接接到关联的实线上，另一端指向这些属性。</p>
</li>
</ul>
</li>
<li>
<p><strong>泛化</strong>（Generalization）：是一种特殊/一般关系，<u>特殊元素（子元素）的对象可替代一般元素（父元素）的对象</u>。用这种方法，<u>子元素共享了父元素的结构和行为</u>。</p>
<p>在图形上，把一个泛化关系画成一条<u>带有空心箭头的实线</u>，它指向父元素：</p>
<p><picture><img class="img-fluid " alt="泛化的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410.png" loading="lazy" width="162" height="53" />
</picture>

</p>
</li>
<li>
<p><strong>实现</strong>（Realization）：是<u>类元之间的语义关系，其中一个类元指定了由另一个类元保证执行的契约</u>。</p>
<p>在图形上，把一个实现关系画成一条<u>带有空心箭头的虚线</u>，箭头指向模板类，另一端于实现类连接。</p>
<p><picture><img class="img-fluid " alt="实现的图形化表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682058026631.png" loading="lazy" width="167" height="61" />
</picture>

</p>
</li>
</ul>
<h2 id="uml图" data-numberify>UML图<a class="anchor ms-1" href="#uml图"></a></h2>
<h3 id="类图" data-numberify>类图<a class="anchor ms-1" href="#类图"></a></h3>
<p>类图（Class Diagram）<u>展现了一组对象、接口、协作和它们之间的关系</u>。在面向对象系统的建模中<u>最常见的图就是类图</u>。类图给出<u>系统的静态设计视图</u>。</p>
<p>类图中通常包括下述内容：</p>
<ul>
<li>
<p>类：</p>
<p><picture><img class="img-fluid " alt="类的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684650129674.png" loading="lazy" width="142" height="139" />
</picture>

</p>
<p>类中的方法和属性前面有以下三种修饰符：</p>
<table>
<thead>
<tr>
<th style="text-align:center">修饰符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>+</code></td>
<td style="text-align:center"><code>public</code> 公有的</td>
</tr>
<tr>
<td style="text-align:center"><code>-</code></td>
<td style="text-align:center"><code>private</code> 私有的</td>
</tr>
<tr>
<td style="text-align:center"><code>#</code></td>
<td style="text-align:center"><code>protected</code> 受保护的</td>
</tr>
<tr>
<td style="text-align:center"><code>~</code></td>
<td style="text-align:center"><code>package</code> 包的</td>
</tr>
</tbody>
</table>
<p>例如：</p>
  <table style="width: 200px; margin: auto;">
      <tr><th>Student</th></tr>
      <tr>
      <td>
      <p>
          <code>- id&nbsp;&nbsp;&nbsp;:&nbsp;int</code>
          <br>
          <code>+ name&nbsp;:&nbsp;String</code>
          <br>
          <code>+ age&nbsp;&nbsp;:&nbsp;int</code>
      </p>
      </td>
      </tr>
      <tr>
      <td>
      <p>
          <code>+ getId()&nbsp;:&nbsp;int</code>
      </p>
      </td>
      </tr>
  </table>
</li>
<li>
<p>接口：</p>
<p><picture><img class="img-fluid " alt="接口的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570786524.png" loading="lazy" width="135" height="74" />
</picture>

</p>
</li>
<li>
<p>协作：</p>
<p><picture><img class="img-fluid " alt="协作的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570820946.png" loading="lazy" width="107" height="67" />
</picture>

</p>
</li>
<li>
<p>关系：</p>
<p><picture><img class="img-fluid " alt="依赖的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057108089.png" loading="lazy" width="200" height="48" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="关联图形化表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682057458153.png" loading="lazy" width="408" height="101" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="泛化的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410.png" loading="lazy" width="162" height="53" />
</picture>

</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="类图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061210921.png" loading="lazy" width="619" height="467" />
</picture>

</p>
<h3 id="对象图" data-numberify>对象图<a class="anchor ms-1" href="#对象图"></a></h3>
<p>对象图（Object Diagram）展现了<u>某一时刻一组对象以及它们之间的关系</u>，<u>描述了在类图中所建立的事物的实例的静态快照</u>。</p>
<p>对象图一般包括对象和链，如图：</p>
<p><picture><img class="img-fluid " alt="对象图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061786263.png" loading="lazy" width="713" height="312" />
</picture>

</p>
<p>对象：对象图中的对象包含了类名、对象名和属性。</p>
<p>其图形化如下：</p>
<table style="width: 150px; text-align: center;">
    <tr>
    <th style="text-align: center;">
        对象名 : 类名
    </th>
    </tr>
    <tr>
    <td style="text-align: center;">
    <p>
        <code>属性1 = 值1</code>
        <br>
        <code>属性2 = 值2</code>
        <br>
        ......
    </p>
    </td>
    </tr>
</table>
<p>匿名对象（没有对象名）：</p>
<table style="width: 150px;">
    <tr>
    <th style="text-align: center;">
        : 类名
    </th>
    </tr>
    <tr>
    <td style="text-align: center;">
    <p>
        <code>属性1 = 值1</code>
        <br>
        <code>属性2 = 值2</code>
        <br>
        ......
    </p>
    </td>
    </tr>
</table>
<p>和类图一样，对象图给出<u>系统的静态设计视图</u>或<u>静态进程视图</u>，但它们是<u>从真实的或原型实例的角度建立的</u>。</p>
<h3 id="用例图" data-numberify>用例图<a class="anchor ms-1" href="#用例图"></a></h3>
<p>用例图（Use Case Diagram）通常包括以下内容：</p>
<ul>
<li>
<p>用例：是从<strong>用户角度</strong>描述<strong>系统的行为</strong>，它将<strong>系统的一个功能</strong>描述成一系列的事件，这些事件最终对操作者产生有价值的观测结果。</p>
<p>用例是一个类，它代表<strong>一类功能</strong>而不是使用该功能的某一具体实例。</p>
<p><picture><img class="img-fluid " alt="用例的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684574449513.png" loading="lazy" width="114" height="73" />
</picture>

</p>
</li>
<li>
<p>参与者：是与系统交互的<strong>外部实体</strong>。</p>
<p>参与者用一个<u>人形图标</u>表示。</p>
</li>
<li>
<p>关系：</p>
<ul>
<li>
<p>用例之间的关系：</p>
<ul>
<li>
<p>包含关系：用带<code>&lt;&lt;include&gt;&gt;</code>的虚线箭头表示，如：</p>
<p><picture><img class="img-fluid " alt="包含关系" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578078948.png" loading="lazy" width="613" height="182" />
</picture>

</p>
</li>
<li>
<p>扩展关系：用带<code>&lt;&lt;extend&gt;&gt;</code>的虚线箭头表示，如：</p>
<p><picture><img class="img-fluid " alt="扩展关系" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578542547.png" loading="lazy" width="607" height="136" />
</picture>

</p>
<p>扩展用例是指，一个用例中，符合某些特定情况才会触发的另一个用例。</p>
<p>即一个用例执行的时候，可能会发生一些特殊情况或可选情况，这种情况就是这个用例的扩展用例。</p>
</li>
</ul>
</li>
<li>
<p>参与者和用例之间的关联关系。</p>
</li>
<li>
<p>用例与用例以及参与者与参与者之间的泛化关系。</p>
</li>
</ul>
</li>
</ul>
<p><picture><img class="img-fluid " alt="用例图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682062071630.png" loading="lazy" width="756" height="382" />
</picture>

</p>
<h3 id="序列图" data-numberify>序列图<a class="anchor ms-1" href="#序列图"></a></h3>
<p>序列图（Sequence Diagram，<strong>顺序图</strong>）<u>描述了以时间顺序组织的对象之间的交互活动</u>，<u>强调消息时间顺序</u>。</p>
<p>序列图的组成：</p>
<ol>
<li>
<p>把参加交互的对象放在图的上方，沿水平方向排列。</p>
<p>通常把发起交互的对象放在左边，下级对象依次放在右边。</p>
</li>
<li>
<p>把这些对象发送和接收的消息，沿垂直方向，按时间顺序从上到下放置。</p>
</li>
</ol>
<p><picture><img class="img-fluid " alt="序列图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682064874751.png" loading="lazy" width="691" height="471" />
</picture>

</p>
<p>序列图的组成部分：</p>
<ul>
<li>
<p>对象：用方框框起来的<code>对象名:类名</code>，没有属性和方法等成分。</p>
</li>
<li>
<p><strong>对象生命线</strong>：表示<u>一个对象存在的时间段</u>。</p>
<p>如上图中对象下方垂直的虚线。</p>
<ul>
<li>对象可以在交互过程中创建：生命线从接收到构造型<code>create</code>消息开始；</li>
<li>也可以在交互过程中撤销：生命线从接收到构造型<code>destroy</code>消息结束，并且给出一个大$\times$的标记表明生命线的结束。</li>
</ul>
</li>
<li>
<p><strong>控制焦点</strong>：控制焦点表示<u>一个对象执行一个动作所经历的时间段</u>。</p>
<p>如上图中对象下方的空表矩形条框。</p>
</li>
<li>
<p><strong>消息</strong>：</p>
<p>普通的消息用<u>带箭头的实线</u>表示。所有消息的箭头都是指向接收对象。</p>
<ul>
<li>返回消息：用<u>带箭头的虚线</u>表示。</li>
<li>同步消息（调用消息）：指消息发送给接收对象后，需要等待接收对象返回后才可进行下一步操作。</li>
<li>异步消息：指消息发送给接收对象后，无需等待接收对象返回即可进行下一步操作。</li>
</ul>
</li>
</ul>
<p>序列图有两个不同于通信图的特性：</p>
<ul>
<li>序列图有对象生命线；</li>
<li>序列图有控制焦点。</li>
</ul>
<h3 id="通信图" data-numberify>通信图<a class="anchor ms-1" href="#通信图"></a></h3>
<p><u>通信图</u>（Communication Diagram，<strong>协作图</strong>）<u>强调收发消息的对象的结构组织</u>。通信图<u>强调参加交互的对象的组织</u>。</p>
<p>通信图的组成：</p>
<ol>
<li>将参加交互的<u>对象</u>作为图的<u>顶点</u>；</li>
<li>把连接这些对象的<u>链</u>表示为图的<u>弧</u>；</li>
<li>用对象发送和接收的<u>消息</u>来<u>修饰这些链</u>。</li>
</ol>
<p><picture><img class="img-fluid " alt="通信图" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682065157645.png" loading="lazy" width="719" height="314" />
</picture>

</p>
<p>通信图有以下成分：</p>
<ul>
<li>
<p>对象：与序列图一样，是用一个方框框起来的<code>对象名:类名</code>。</p>
</li>
<li>
<p>路径（链接）：用实线表示，可以在链的末端附上一个路径构造型。</p>
<p>通常仅需显式地表示以下几种链的路径：</p>
<table>
<thead>
<tr>
<th style="text-align:center">构造型</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;&lt;local&gt;&gt;</code></td>
<td style="text-align:center">局部</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;&lt;parameter&gt;&gt;</code></td>
<td style="text-align:center">参数</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;&lt;global&gt;&gt;</code></td>
<td style="text-align:center">全局</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;&lt;self&gt;&gt;</code></td>
<td style="text-align:center">自身</td>
</tr>
</tbody>
</table>
<p>不必表示<code>association</code>（关联）。</p>
</li>
<li>
<p>序号：用来表示消息的时间顺序。是消息前的一个数字前缀，可使用带小数点的号码表示嵌套消息，嵌套可为任意深度。</p>
<p>如2表示第2个消息，2.1表示嵌套在消息2中的第1个消息。</p>
</li>
<li>
<p>消息：沿同一个链可以显示许多消息（可能发自不同方向），并且每个消息都有唯一的序号。</p>
</li>
</ul>
<p>通信图有两个不同于序列图的特性：</p>
<ul>
<li>通信图有路径；</li>
<li>通信图有序号。</li>
</ul>
<h3 id="状态图" data-numberify>状态图<a class="anchor ms-1" href="#状态图"></a></h3>
<p>状态图（State Diagram，状态转换图）关注<u>系统的动态视图</u>，<u>强调对象行为的事件顺序</u>。</p>
<p>状态图由以下组成：</p>
<ul>
<li>
<p><strong>状态</strong>：指对象的生命周期中某个条件或者状态，是<u>任何可以被观察到的系统行为模式</u>，<u>一个状态代表系统的一种行为模式</u>。</p>
<p>状态规定了系统内对事件的响应方式。</p>
<p>系统对事件的响应：</p>
<ul>
<li>可以是<u>做一个（或一系列）动作</u>；</li>
<li>可以是仅仅<u>改变系统本身的状态</u>；</li>
<li>可以是<u>即改变状态，又做动作</u>。</li>
</ul>
<p>状态转换图中定义的状态主要有：</p>
<ul>
<li><strong>初态</strong>（初始状态）：用一个<u>实心圆点</u>表示。一张状态图<u>只能有一个初态</u>。</li>
<li><strong>终态</strong>（最终状态）：用一个<u>实心圆点外加一个圆圈</u>表示。一张状态图<u>可以没有终态，也可以有多个</u>。</li>
<li><strong>中间状态</strong>。</li>
</ul>
<p>状态图中的状态用一个<u>圆角矩形</u>表示，可以用两条水平横线将其分为上中下3个部分：</p>
<ol>
<li>上面部分（必须）：状态的名称；</li>
<li>中间部分（可选）：状态变量的名称和值；</li>
<li>下面部分（可选）：活动表。</li>
</ol>
<p>状态还可分为：</p>
<ul>
<li>
<p>简单状态。</p>
</li>
<li>
<p>组合状态：含有子状态的状态，这个状态也称为其子状态的超状态。</p>
<p>子状态：嵌套在另外一个状态中的状态。</p>
</li>
</ul>
</li>
<li>
<p><strong>转换</strong>（迁移）：是两个状态之间的一种关系，表示对象将在源状态中执行一定的动作，并在某个特定事件发生，而且某个特定的警界（监护）条件满足时进入目标状态。</p>
<p>状态转换用一条<u>带箭头的实线</u>表示。</p>
</li>
<li>
<p><strong>事件</strong>：是在某个特定时刻发生的事情，<u>它是对引起系统做动作或（和）从一个状态转换到另个状态的外界事件的抽象</u>。</p>
<ul>
<li>
<p><u>事件触发</u>状态转换：<u>状态变迁通常是由事件触发的。</u>状态之间带箭头实线上的事件发生时，状态转换开始（还可称之为状态“点火”或状态被“触发”）。</p>
<p>这种情况下应在表达状态转换的箭头线上标出触发转换的<u>事件表达式</u>：</p>
<pre tabindex="0"><code>事件说明 [守卫条件] / 动作表达式
</code></pre><p>事件说明的语法为：</p>
<pre tabindex="0"><code>事件名 (参数表)
</code></pre><p>守卫条件（监护条件）：一个布尔表达式。</p>
<ul>
<li>当且仅当事件发生且守卫条件为真时，状态转换才发生；</li>
<li>只有守卫条件没有事件说明时，只要守卫条件为真，状态转换就发生。</li>
</ul>
<p>动作表达式是一个过程表达式，当状态转换（事件）开始时执行。</p>
</li>
<li>
<p><u>自动触发</u>状态转换：如果箭头线上未标明事件，则表示<u>在源状态的内部活动执行完之后自动触发转换</u>。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="状态图中的事件和转换" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684587930655.png" loading="lazy" width="717" height="135" />
</picture>

</p>
</li>
<li>
<p><strong>活动</strong>：指状态中的活动表中的活动。</p>
<p>语法如下：</p>
<pre tabindex="0"><code>事件名 (参数表) /动作表达式
</code></pre><p>事件名：可以是任何事件的名称。</p>
<p>在活动表中经常使用以下3中标准事件：</p>
<table>
<thead>
<tr>
<th style="text-align:center">事件名</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>entry</code></td>
<td style="text-align:left"><u>入口动作</u>，指定<u>进入该状态</u>的动作，立即执行</td>
</tr>
<tr>
<td style="text-align:center"><code>exit</code></td>
<td style="text-align:left"><u>出口动作</u>，指定<u>退出该状态</u>的动作，立即执行</td>
</tr>
<tr>
<td style="text-align:center"><code>do</code></td>
<td style="text-align:left"><u>内部活动</u>，指定<u>在该状态下</u>的动作，占有有限时间，并可中断地工作</td>
</tr>
</tbody>
</table>
<p>活动（动作）可以在状态内执行，也可以在状态转换（迁移）时执行。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="状态图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682066287326.png" loading="lazy" width="831" height="431" />
</picture>

</p>
<p>当状态图对系统、类或用例的动态方面建模时，通常是对反应型对象建模。</p>
<h3 id="活动图" data-numberify>活动图<a class="anchor ms-1" href="#活动图"></a></h3>
<p>活动图（Activity Diagram）是一种特殊的状态图，它<u>展现了在系统内从一个活动到另一个活动的流程</u>。活动图<u>专注于系统的动态视图</u>，<u>强调对象间的控制流程</u>。</p>
<p><picture><img class="img-fluid " alt="活动图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682067363114.png" loading="lazy" width="654" height="744" />
</picture>

</p>
<p>活动图一般包括：</p>
<ul>
<li>
<p>状态：</p>
<p>活动图的状态也包含初态和终态。其余的状态还可分为：</p>
<ul>
<li>动作状态：不能被分解，动作不能被中断。</li>
<li>活动状态：能够被进一步分解，可以被中断，其活动由其它的活动图来表示。</li>
</ul>
</li>
<li>
<p>流（转换）。</p>
</li>
<li>
<p>对象。</p>
</li>
</ul>
<p>活动图可以表示：</p>
<ul>
<li>分支（判断）：分支的流上用<code>[]</code>标记的是监护表达式；</li>
<li>（并发）分岔：将一个流分为多个可并发执行的流；</li>
<li>（并发）汇合：将分岔出去的多个流合并为同一个流。</li>
</ul>
<p>当对一个系统的动态方面建模时，有以下几种使用活动图的方式：</p>
<ul>
<li>对工作流建模；</li>
<li>对操作建模；</li>
<li>对业务的复杂流程建模。</li>
</ul>
<h3 id="构件图" data-numberify>构件图<a class="anchor ms-1" href="#构件图"></a></h3>
<p>构件图（Component Diagram，<strong>组件图</strong>）展现了<u>一组构件之间的组织和依赖</u>。构件图<u>专注于系统的静态实现视图</u>，它<u>与类图相关，通常把构件映射为一个或多个类、接口或协作</u>。</p>
<p><picture><img class="img-fluid " alt="构件图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682068370459.png" loading="lazy" width="638" height="332" />
</picture>

</p>
<p>构件图的成分有：</p>
<ul>
<li>构件：用<u>矩形</u>表示，在矩形<u>右上方有一个小标记</u>。</li>
<li>供接口：用一个<u><strong>圆圈</strong>和连接到构件上的实线</u>表示。构件提供接口给其它构件使用。</li>
<li>需接口：用一个<u><strong>半圆</strong>和连接到构件上的实线</u>表示。构件使用需接口表示需要调用其它构件提供接口。</li>
<li>依赖：将供接口（圆圈）和虚接口（半圆）连接到一起，表示两个构件通过这个接口相依赖。</li>
</ul>
<h3 id="部署图" data-numberify>部署图<a class="anchor ms-1" href="#部署图"></a></h3>
<p>部署图（Deployment Diagram）是用来<u>对面向对象系统的<strong>物理方面</strong>建模</u>的方法，展现了运行时处理结点以及其中构件（制品）的配置。部署图<u>对系统的静态部署视图进行建模</u>，它与构件图相关。</p>
<p>部署图<u>展现了系统的软件和硬件之间的关系，在实施阶段使用</u>。</p>
<p><picture><img class="img-fluid " alt="部署图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682073176388.png" loading="lazy" width="491" height="327" />
</picture>

</p>
<blockquote>
<p><code>&lt;&lt;artifact&gt;&gt;</code>表示制品。</p>
</blockquote>
<h3 id="总结" data-numberify>总结<a class="anchor ms-1" href="#总结"></a></h3>
<p>UML图分类：</p>
<table>
<thead>
<tr>
<th style="text-align:center">UML图</th>
<th style="text-align:center">静态建模</th>
<th style="text-align:center">动态建模</th>
<th style="text-align:center">物理建模</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">对象图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">用例图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">构件图（组件图)</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
</tr>
<tr>
<td style="text-align:center">部署图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
</tr>
<tr>
<td style="text-align:center">序列图（顺序图，时序图）</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">通信图（协作图）</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">状态图</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">活动图</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
</tbody>
</table>
<p>类图成分总结：</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">图示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="类图中的类的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684650129674.png" loading="lazy" width="142" height="139" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">接口</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="类图接口的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570786524.png" loading="lazy" width="135" height="74" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">协作</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="协作的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684570820946.png" loading="lazy" width="107" height="67" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">依赖</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="依赖的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057108089.png" loading="lazy" width="200" height="48" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">泛化</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="泛化的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410.png" loading="lazy" width="162" height="53" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">关联</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="关联图形化表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682057458153.png" loading="lazy" width="408" height="101" />
</picture>

</td>
</tr>
</tbody>
</table>
<p>用例图成分总结：</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">图示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">用例</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="用例的图形表示" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684574449513.png" loading="lazy" width="114" height="73" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">包含关系</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="用例之间的包含关系" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578078948.png" loading="lazy" width="613" height="182" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">扩展关系</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="用例之间的扩展关系" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1684578542547.png" loading="lazy" width="607" height="136" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">泛化关系</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="用例与用例以及参与者与参与者之间的泛化关系" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682057764410.png" loading="lazy" width="162" height="53" />
</picture>

</td>
</tr>
</tbody>
</table>
<p>交互图中，顺序图和通信图是同构的，它们之间可以相互转换。它们的差异如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">差异</th>
<th style="text-align:left"><center>序列图</center></th>
<th style="text-align:left"><center>通信图</center></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>强调</strong></td>
<td style="text-align:left"><center>消息时间顺序</center></td>
<td style="text-align:left"><center>收发消息的对象的结构组织</center></td>
</tr>
<tr>
<td style="text-align:center"><strong>不同的特性</strong></td>
<td style="text-align:left"><ul><li>有对象生命线：对象存在的时间段</li><li>有控制焦点：对象执行动作所经历的时间段</li></ul></td>
<td style="text-align:left"><ul><li>有路径：表示对象之间有交互</li><li>有序号：表示消息的时间顺序，可嵌套表示</li></ul></td>
</tr>
</tbody>
</table>
<p>活动图是一种特殊的状态图，它们的差异如下：</p>
<ul>
<li>相同点：状态中都有初态和终态。</li>
<li>主要差异：
<ul>
<li>活动图的转换称为流；</li>
<li>活动图有分支、并发分岔和并发汇合。</li>
</ul>
</li>
</ul>
<p>以下是UML图的总结：</p>
<ul>
<li>
<p><strong>类图</strong>：展现一组<u>对象（类）</u>、<u>接口</u>、<u>协作</u>和它们之间的<u>关系</u></p>
<p><picture><img class="img-fluid " alt="类图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061210921.png" loading="lazy" width="619" height="467" />
</picture>

</p>
</li>
<li>
<p><strong>对象图</strong>：展现某一时刻的一组<u>对象</u>以及它们之间的<u>关系</u>，描述了在类图中所建立事物的实例的静态快照</p>
<p><picture><img class="img-fluid " alt="对象图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682061786263.png" loading="lazy" width="713" height="312" />
</picture>

</p>
</li>
<li>
<p><strong>用例图</strong>：展现了一组<u>用例</u>、<u>参与者</u>以及它们之间的<u>关系（包含、扩展、关联和泛化）</u></p>
<p><picture><img class="img-fluid " alt="用例图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682062071630.png" loading="lazy" width="756" height="382" />
</picture>

</p>
</li>
<li>
<p><strong>序列图（顺序图，时序图）</strong>：描述了以<u>时间顺序</u>组织的<u>对象</u>之间的<u>交互活动</u>，强调<u>消息时间顺序</u></p>
<p><picture><img class="img-fluid " alt="序列图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682064874751.png" loading="lazy" width="691" height="471" />
</picture>

</p>
</li>
<li>
<p><strong>通信图（协作图）</strong>：强调<u>收发消息的对象的结构组织</u></p>
<p><picture><img class="img-fluid " alt="通信图" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682065157645.png" loading="lazy" width="719" height="314" />
</picture>

</p>
</li>
<li>
<p><strong>状态图（状态转换图）</strong>：展现了一个状态机，强调<u>对象行为的事件顺序</u></p>
<p><picture><img class="img-fluid " alt="状态图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682066287326.png" loading="lazy" width="831" height="431" />
</picture>

</p>
</li>
<li>
<p><strong>活动图</strong>：一种特殊的状态图，展现了在<u>系统内从一个活动到另一个活动的流程</u>，强调<u>对象间的控制流程</u></p>
<p><picture><img class="img-fluid " alt="活动图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/1682067363114.png" loading="lazy" width="654" height="744" />
</picture>

</p>
</li>
<li>
<p><strong>构件图（组件图)</strong>：展现了一组<u>构件之间的组织和依赖</u>，将构件映射为类、接口或协作</p>
<p><picture><img class="img-fluid " alt="构件图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682068370459.png" loading="lazy" width="638" height="332" />
</picture>

</p>
</li>
<li>
<p><strong>部署图</strong>：对物理建模，展现了<u>运行时处理结点以及其中构件（制品）的配置</u></p>
<p><picture><img class="img-fluid " alt="部署图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1682073176388.png" loading="lazy" width="491" height="327" />
</picture>

</p>
</li>
</ul>
<hr>
<h1 id="软件工程" data-numberify>软件工程<a class="anchor ms-1" href="#软件工程"></a></h1>
<h2 id="沟通路径" data-numberify>沟通路径<a class="anchor ms-1" href="#沟通路径"></a></h2>
<p>沟通图是指项目中人员或部门之间的沟通用一条无向边连接起来，所构成图即为沟通图。沟通图中的路径称为沟通路径。</p>
<p>软件项目中沟通路径$m$的计算公式：</p>
<ul>
<li>
<p>沟通图中无主程序员时：</p>
<p>$$
m = \sum_{i=1}^{n} i-1 = \cfrac{(n-1)n}{2}
$$</p>
</li>
<li>
<p>沟通图中有主程序员时：</p>
<p>$$
m = n - 1
$$</p>
</li>
</ul>
<h2 id="gantt图" data-numberify>Gantt图<a class="anchor ms-1" href="#gantt图"></a></h2>
<p>Gantt图：一种<u>简单的水平条形图</u>，它<u>以日历为基准</u>描述项目任务。</p>
<ul>
<li>
<p>垂直轴：表示<u>多个不同的任务</u>，每个任务按照左侧任务名称垂直排列。</p>
</li>
<li>
<p>水平轴：表示<u>日历时间线</u>（如时、天、周、月和年等）。</p>
<p>每个水平条表示一个任务：</p>
<ul>
<li>每一水平条的<u>起点</u>：表示该任务的<u>开始时间</u>；</li>
<li>每一水平条的<u>终点</u>：表示该任务的<u>结束时间</u>；</li>
<li>每一水平条的<u>长度</u>：表示<u>完成该任务的持续时间</u>。</li>
</ul>
<p>当日历中同一时段存在多个水平条时，表示任务之间的并发。</p>
</li>
</ul>
<p>如图：</p>
<p><picture><img class="img-fluid " alt="Gantt图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683683731050.png" loading="lazy" width="795" height="282" />
</picture>

</p>
<ul>
<li>
<p>Gantt图优点：</p>
<p>能清晰地描述：</p>
<ul>
<li>每个任务的开始时间；</li>
<li>每个任务的结束时间；</li>
<li>任务的进展情况；</li>
<li>各个任务之间的并行性。</li>
</ul>
</li>
<li>
<p>Gantt图缺点：</p>
<ul>
<li>不能清晰地反映各任务之间的<u>依赖关系</u>；</li>
<li>难以确定<u>整个项目的关键所在</u>，即不能清晰地确定影响进度的<u>关键任务</u>；</li>
<li>不能反映<u>计划中有潜力的部分</u>。</li>
</ul>
</li>
</ul>
<h2 id="pert图" data-numberify>PERT图<a class="anchor ms-1" href="#pert图"></a></h2>
<p>PERT图是一个<u>有向图</u>：</p>
<ul>
<li>
<p><strong>弧</strong>：表示<strong>任务</strong>。</p>
<p>任务包含以下成分：</p>
<ul>
<li>
<p><u>完成该任务所需的时间</u>（任务持续时间）。</p>
</li>
<li>
<p><u>松弛时间</u>（Slack Time）：表示在<u>不影响整个工期的前提下完成该任务有多少机动余地</u>。</p>
<p>即松弛时间指当前任务的工期可以推迟的时间。</p>
</li>
</ul>
<p>空任务：用虚线箭头表示，表示任务间的关系所添加。完成空任务的所需时间为0。</p>
</li>
<li>
<p><strong>结点</strong>：表示<strong>事件</strong>。</p>
<p>事件是流入结点的任务的结束，或流出结点的任务的开始。事件<u>表示某个时间点</u>，本身不消耗时间和资源。</p>
<p>事件包含以下成分：</p>
<ul>
<li>事件号。</li>
<li>出现该事件的<strong>最早时刻</strong>：表示在此时刻之前从该事件出发的任务不可能开始。</li>
<li>出现该事件的<strong>最迟时刻</strong>：表示从该事件出发的任务最迟在此时刻开始，否则整个工程就不能如期完成。</li>
</ul>
<p><u>只有当流入该结点的所有任务都结束时，结点所表示的事件才出现，流出结点的任务才可以开始。</u></p>
<p>特殊的事件：</p>
<ul>
<li>开始事件：没有任何任务流向该事件；</li>
<li>结束事件：没有任务任务从该事件流出。</li>
</ul>
<p>一个项目是从开始事件开始到结束事件结束。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="PERT图示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683684995281.png" loading="lazy" width="850" height="490" />
</picture>

</p>
<p>设：</p>
<ul>
<li>$T(e)$：完成任务$e$的所需时间；</li>
<li>$T_s(e)$：完成任务$e$的松弛时间；</li>
<li>$T_e(v)$：事件$v$的最早时刻；</li>
<li>$T_l(v)$：事件$v$的最迟时刻。</li>
</ul>
<p>PERT图各成分取值（不一定需要满足下面的关系，但是可以用下面的式子推出）：</p>
<ul>
<li>
<p>事件$V_{in}$的<u>最早时刻</u>$T_e(V_{in})$：</p>
<ul>
<li>
<p>只有一个任务流入时，设该任务的流出事件为$V_{out}$，则该任务为$&lt;V_{out}, V_{in}&gt;$：</p>
<p>$$
T_e(V_{in}) = T_e(V_{out}) + T
$$</p>
<blockquote>
<p>这里将$T(&lt;V_{out}, V_{in}&gt;)$简写为了$T$。</p>
</blockquote>
<p>即：<u>该流入任务的流出事件的最早时刻</u> + <u>完成该流入任务的所需时间</u>。</p>
</li>
<li>
<p>多个任务流入时，设与每个任务相对应的流出事件为$V_{out}[ \ i \ ]$，则这些任务为$&lt;V_{out}[ \ i \ ], V_{in}&gt;$：</p>
<p>$$
T_e(V_{in}) = Max(T_e(V_{out}[ \ i \ ]) + T_i)
$$</p>
<blockquote>
<p>这里将$T(&lt;V_{out}[ \ i \ ], V_{in}&gt;)$简写为了$T_i$。</p>
</blockquote>
<p>即<u>流入该事件的每个任务计算出的最早时刻的最大值</u>。</p>
</li>
<li>
<p>开始事件$V_{start}$：</p>
<p>$$
T_e(V_{start}) = 0
$$</p>
</li>
</ul>
</li>
<li>
<p>事件$V_{out}$的<u>最迟时刻</u>$T_l(V_{out})$：</p>
<ul>
<li>
<p>只有一个任务流出时，设该任务的流入事件为$V_{in}$，则该任务为$&lt;V_{out}, V_{in}&gt;$：</p>
<p>$$
T_l(V_{out}) = T_l(V_{in}) - (T + T_s)
$$</p>
<blockquote>
<p>这里将$T_s(&lt;V_{out}, V_{in}&gt;)$简写为$T_s$。</p>
</blockquote>
<p>即：<u>该流出任务的流入事件的最迟时刻</u> -（<u>该流出任务的所需时间</u> + <u>松弛时间</u>）。</p>
<p>如果松弛时间未知或为0：</p>
<p>$$
T_l(V_{out}) = T_l(V_{in}) - T
$$</p>
</li>
<li>
<p>多个任务流出时，设与每个任务相对应的流入事件为$V_{in}[ \ i \ ]$，则这些任务为$&lt;V_{out}, V_{in}[ \ i \ ]&gt;$：</p>
<p>$$
T_l(V_{out}) = Min(T_l(V_{in}[ \ i \ ]) - (T_i + S_i))
$$</p>
<blockquote>
<p>这里把$T(&lt;V_{out}, V_{in}[ \ i \ ]&gt;)$简写为$T_i$，把$T_s(&lt;V_{out}, V_{in}[ \ i \ ]&gt;)$简写为$S_i$。</p>
</blockquote>
<p>即<u>流出该事件的每个任务计算出的最晚时刻的最大值</u>。</p>
<p>如果松弛时间未知或为0：</p>
<p>$$
T_l(V_{out}) = Min(T_l(V_{in}[ \ i \ ]) - T_i)
$$</p>
</li>
<li>
<p>结束事件$V_{end}$：</p>
<p>$$
T_l(V_{end}) = T_e(V_{end})
$$</p>
<p>即<u>结束事件的最早时刻与最迟时刻相等</u>。</p>
</li>
</ul>
</li>
<li>
<p>设某任务的流入事件为$V_{in}$，流出事件为$V_{out}$，则该任务$&lt;V_{out}, V_{in}&gt;$的<u>松弛时间</u>$T_s(&lt;V_{out}, V_{in}&gt;)$。</p>
<p>$$
T_s = T_l(V_{in}) - T - T_e(V_{out})
$$</p>
<p>即，该任务的流入事件的最迟时刻 - 该任务的所需时间 - 该任务的流出事件的最早时刻</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="PERT图公式参照图" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683719224977.png" loading="lazy" width="931" height="341" />
</picture>

</p>
<p>PERT图的路径：从开始事件到结束事件的一条通路。</p>
<p>PERT图的<strong>关键路径</strong>：指<u>所有的任务的松弛时间都为0的路径</u>。</p>
<p>关键路径的长度：指结束事件的最早（或最晚）时刻。</p>
<p><picture><img class="img-fluid " alt="PERT图的关键路径示例" src="/blog/2023/05/%E8%BD%AF%E8%80%83%E5%9B%BE%E7%B1%BB%E6%B1%87%E6%80%BB%E7%AF%87/uTools_1683706944555.png" loading="lazy" width="785" height="457" />
</picture>

</p>
<p>关键路径的特点：</p>
<ul>
<li>
<p>所有任务的松弛时间都为0。</p>
</li>
<li>
<p>每个事件的最早时刻和最迟时刻都是相等的。</p>
</li>
<li>
<p>所有任务持续时间的和，是PERT图所有路径中最大的，并且与结束事件的最早时刻（或最晚时刻）相等。</p>
<p>设关键路径中所有事件为$V_i$（$i = 1, 2, \cdots, n$），且该路径下的任务为$&lt;V_j, V_{j+1}&gt;$（$1 \le j \le n-1$）（表示$V_1$是开始事件，$V_2$是$V_1$往下的一个事件，以此类推，$V_n$是结束事件），那么该关键路径结束事件的最早时刻（或最晚时刻）为：</p>
<p>$$
T_e(V_n) = \sum_{i = 1}^{n-1} T_i
$$</p>
<blockquote>
<p>这里$T_i$代表$T(&lt;V_i, V_{i+1}&gt;)$。</p>
</blockquote>
</li>
</ul>
<p>最迟时刻的另一种求法（PERT图存在关键路径的情况下）：</p>
<p>已知某PERT图结束事件的最晚时刻（最早时刻），该PERT图中某一条路径（假设该路径没有分支）中所有事件为$V_j$（$j = 1, 2, \cdots, n$），且该路径下的任务为$&lt;V_k, V_{k+1}&gt;$（$1 \le k \le n-1$），该路径下任务的持续时间$T(&lt;V_{k-1}, V_k&gt;)$已知，（即$V_1$是开始事件，按照次序往下，$V_n$是结束事件），计算某一事件的最迟时刻$T_l(V_i)$（$1 \le i &lt; n$）：</p>
<p>$$
T_l(V_i) = T_l(V_n) - \sum_{j = i}^{n - 1} T_j
$$</p>
<blockquote>
<p>这里$T_j$代表$T(&lt;V_j, V_{j + 1}&gt;)$。</p>
</blockquote>
<p>即：<u>结束事件的最晚时刻</u> - <u>该事件到结束事件之间所有的任务的持续时间总和</u>。</p>
<blockquote>
<p>注意：如果事件$V_i$到结束事件之间存在多条路径，应该选择那条任务持续时间总和最大的路径。</p>
</blockquote>
<p>PERT图的优点：</p>
<ul>
<li>给出了每个任务的开始时间、结束时间和完成该任务所需的时间；</li>
<li>给出了任务之间的关系（依赖关系）。即任务之间的执行顺序。</li>
</ul>
<p>PERT图不能清晰地描述任务之间的并行情况。</p>
<h2 id="项目活动图" data-numberify>项目活动图<a class="anchor ms-1" href="#项目活动图"></a></h2>
<p>项目活动图是一种有向图（与PERT图十分类似）：</p>
<ul>
<li>
<p>弧：表示活动。弧的权值表示活动的持续时间。</p>
</li>
<li>
<p>顶点：表示项目里程碑。</p>
<p>特殊的里程碑：</p>
<ul>
<li>开始里程碑：没有任何活动指向该里程碑；</li>
<li>结束里程碑：没有任何活动从该里程碑指出。</li>
</ul>
</li>
</ul>
<p>项目活动图的关键路径：按照PERT图的方法求出松弛时间为0的、从开始里程碑到结束里程碑的路径。</p>
<p>关键路径的长度：为结束里程碑的最早时刻（或最晚时刻）。它可以用来表示项目完成的最少时间。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>算法设计与分析篇</title>
      <link>/docs/ruan-she/algorithm-design-analysis/</link>
      <pubDate>Wed, 17 May 2023 12:52:42 +0800</pubDate>
      
      <guid>/docs/ruan-she/algorithm-design-analysis/</guid>
      <description><![CDATA[算法概述 算法（Algorithm）是对特定问题求解步骤的一种描述，它是指令的有限序列，其中每一条指令表示一个或多个操作。算法具有下列5个重要]]></description>
      <content:encoded><![CDATA[<h1 id="算法概述" data-numberify>算法概述<a class="anchor ms-1" href="#算法概述"></a></h1>
<p>算法（Algorithm）是对特定问题求解步骤的一种描述，它是指令的有限序列，其中每一条指令表示一个或多个操作。算法具有下列5个重要特性：</p>
<ul>
<li><strong>有穷性</strong>：一个算法必须总是（对任何合法的输入值）在<u>执行有穷步之后结束</u>，且<u>每一步都可在有穷时间内完成</u>。</li>
<li><strong>确定性</strong>：算法中的<u>每一条指令必须有确切的含义</u>，理解时<u>不会产生二义性</u>。并且在任何条件下，算法只有唯一的一条执行路径，即对于<u>相同的输入只能得出相同的输出</u>。</li>
<li><strong>可行性</strong>：一个算法是可行的，即算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。</li>
<li><strong>输入</strong>：一个算法有<u>零个或多个输入</u>，这些输入取自于某个特定的对象的集合。</li>
<li><strong>输出</strong>：一个算法有<u>一个或多个输出</u>，这些输出是同输入有着某些特定关系的量。</li>
</ul>
<p>常用的表示算法的方法有：</p>
<ul>
<li>
<p><strong>自然语言</strong>：优点是易理解；缺点是易出现二义性，算法通常很冗长。</p>
</li>
<li>
<p><strong>流程图</strong>：优点是直观易懂；缺点是严密性不如程序设计语言，灵活性不如自然语言。</p>
</li>
<li>
<p><strong>程序设计语言</strong>：优点是能用计算机直接执行；缺点是抽象性差，使算法设计者拘泥于描述算法的具体细节，忽略了“好”算法和正确逻辑的重要性，要求算法设计者掌握程序设计语言及编程技巧。</p>
</li>
<li>
<p><strong>伪代码</strong>：伪代码是介于自然语言和程序设计语言之间的方法，它采用某一程序设计语言的基本语法，同时结合自然语言来表达。</p>
<p>计算机科学家从来没有对伪代码的书写形式达成过共识。</p>
<p>在伪代码中，可以采用最具表达力的、最简明扼要的方法来表达一个给定的算法。</p>
</li>
</ul>
<hr>
<h1 id="算法分析" data-numberify>算法分析<a class="anchor ms-1" href="#算法分析"></a></h1>
<h2 id="复杂度" data-numberify>复杂度<a class="anchor ms-1" href="#复杂度"></a></h2>
<p>由于时间复杂度与空间复杂度分别对算法占用的时间和空间资源进行分析，计算方法相似。</p>
<p>算法的时间复杂度分析主要时分析算法的运行时间，即算法执行所需要的基本操作数。算法时间复杂度以算法中基本操附重复执行的次数（简称为频度）作为算法的时间度量。一般不必要精确计算出算法的时间复杂度，只要大致计算出相应的数量级即可。</p>
<p>算法的复杂度通常是用大O表示法。</p>
<ul>
<li>加法规则：多项相加，保留最高阶项，并将系数化为1；</li>
<li>乘法规则：多项相乘都保留，并将系数化为1。</li>
</ul>
<p><picture><img class="img-fluid " alt="算法复杂度大小比较" src="/docs/ruan-she/algorithm-design-analysis/1681099842666.png" loading="lazy" width="1014" height="100" />
</picture>

</p>
<p>递归式的时间（空间）复杂度：</p>
<p>$$
递归的次数 \times 每次递归的时间（空间）复杂度
$$</p>
<h2 id="渐进符号" data-numberify>渐进符号<a class="anchor ms-1" href="#渐进符号"></a></h2>
<p>可以用渐进符号来表示渐进复杂度。</p>
<p>渐进符号包括：</p>
<ul>
<li>
<p>$O$：算法运行时间的渐进上界。</p>
<p>给定一个函数$g(n)$，$O\big( g(n)  \big) = \{ f(n):\exists 正常数c和n_0, 使得\forall n \ge n_0, 有 0 \le f(n) \le cg(n) \}$。</p>
<p>即，当$n \ge n_0$时，$f(n) \le c \cdot g(n) $。</p>
</li>
<li>
<p>$\Omega$：算法运行时间的渐进下界。</p>
<p>给定一个函数$g(n) $，$O\big( g(n) \big) = \{ f(n):\exists 正常数c和n_0,使得\forall n \ge n_0, 有 0 \le cg(n) \le f(n) \}$。</p>
<p>即，当$n \ge n_0$时，$c \cdot g(n) \le f(n)$。</p>
</li>
<li>
<p>$\Theta$：算法运行时间的渐进上界和渐进下界，即渐进紧致界（又叫紧缺界）。</p>
<p>给定一个函数$g(n)$，$O\big( g(n) \big) = \{ f(n):\exists 正常数c_1、c_2和n_0,使得\forall n \ge n_0, 有 0 \le c_1g(n) \le f(n) \le c_2g(n) \}$。</p>
<p>即，当$n \ge n_0$时，$c_1g(n) \le f(n) \le c_2g(n)$。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="递归式主方法" src="/docs/ruan-she/algorithm-design-analysis/uTools_1681110832416.png" loading="lazy" width="966" height="1204" />
</picture>

</p>
<hr>
<h1 id="算法设计方法" data-numberify>算法设计方法<a class="anchor ms-1" href="#算法设计方法"></a></h1>
<h2 id="分治法" data-numberify>分治法<a class="anchor ms-1" href="#分治法"></a></h2>
<p>任何一个可以用计算机求解的问题所需要的计算时间都与其规模有关。要想直接解决一个较大的问题，有时是相当困难的。问题的规模越小，解题所需要的计算时间往往越少，从而较容易处理。分治法的设计思想是<u>将一个难以直接解决的大问题分解成一些规模较小的相同问题，以便各个击破，分而治之</u>。</p>
<p>如果规模为$n$的问题可分解成$k$个子问题（$1 &lt; k \le n $），这些子问题互相独立且与原问题相同。分治法产生的子问题往往是原问题的较小模式。</p>
<p>一般来说，分治算法在每一层递归上都有3个步骤：</p>
<ol>
<li>
<p><strong>分解</strong>：将原问题分解成一系列子问题。</p>
</li>
<li>
<p><strong>求解</strong>：递归地求解各子问题。</p>
<p>若子问题足够小，则直接求解。</p>
</li>
<li>
<p><strong>合并</strong>：将子问题的解合并成原问题的解。</p>
</li>
</ol>
<p>分治的典型实例有：</p>
<ul>
<li>归并排序；</li>
<li>快速排序；</li>
<li>最大子段和问题。</li>
</ul>
<h3 id="递归" data-numberify>递归<a class="anchor ms-1" href="#递归"></a></h3>
<p>递归是指子程序（或函数）直接调用自己或通过一系列调用语句间接调用自己，是一种描述问题和解决问题的常用方法。还有一些问题，虽然其本身并没有明显的递归结构，但用递归技术来求解使设计出的算法简洁易懂且易于分析。</p>
<p>递归有两个基本要素：</p>
<ul>
<li>边界条件（递归出口）：确定递归到何时终止。</li>
<li>递归模式（递归体）：大问题是如何分解为小问题的。</li>
</ul>
<p>递归可以将大规模的问题分解为若干个小规模的问题，然后先解决小规模问题，再将解决完的小规模问题合并再一起，再次进行处理，最后解决完所有问题。这与分治的思想不谋而合。</p>
<p>递归是分治的一个解决方案，而分治并不一定需要通过递归实现。分治还可以通过循环结构实现。</p>
<h2 id="动态规划法" data-numberify>动态规划法<a class="anchor ms-1" href="#动态规划法"></a></h2>
<p>动态规划算法与分治法类似，其基本思想也是<u>将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解</u>。</p>
<p>与分治法不同的是，适合用动态规划法求解的问题，<u>经分解得到的子问题往往不是独立的</u>。不同子问题的数目常常只有多项式量级，可以<u>用一个表来记录所有己解决的子问题的答案，在需要时再找出己求得的答案</u>，这样就可以避免大量的重复计算，从而得到多项式时间的算法。不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。</p>
<p>动态规划算法通常<u>用于求解具有某种最优性质的问题</u>。在这类问题中，可能会有许多可行解，每个解都对应于一个值。而最优解可能会有多个，动态规划算法能找出其中的一个最优解。设计一个动态规划算法，通常按照以下几个步骤进行：</p>
<ol>
<li>
<p>找出最优解的性质，并刻画其结构特征。</p>
</li>
<li>
<p>递归地定义最优解的值。</p>
</li>
<li>
<p>以自底向上的方式计算出最优值。</p>
<p>到此步骤为止的以上步骤（包括此步骤），是动态规划算法的基本步骤。</p>
<p>如果需要给出最优解，通常需要在此步骤中记录更多的信息，以便在步骤4中根据所记录的信息快速构造出一个最优解。</p>
</li>
<li>
<p>根据计算最优值时得到的信息，构造一个最优解。</p>
<p>在只需要求出最优值的情形下，该步骤可省略；若需要求出问题的一个最优解，该步骤必须执行。</p>
</li>
</ol>
<p>对于一个给定的问题，若其具有以下两个性质，可以考虑用动态规划法来求解：</p>
<ul>
<li>
<p><strong>最优子结构</strong>：如果一个问题的最优解中包含了其子问题的最优解，就说该问题具有最优子结构。</p>
<blockquote>
<p>当一个问题具有最优子结构时，提示我们动态规划法可能会适用，但是此时贪心策略可能也是适用的。</p>
</blockquote>
</li>
<li>
<p><strong>重叠子问题</strong>：指用来解原问题的递归算法可反复地解同样的子问题，而不是总在产生新的子问题。</p>
<p>即当一个递归算法不断地调用同一个问题时，就说该问题包含重叠子问题。</p>
<p>此时若用分治法递归求解，则每次遇到子问题都会视为新问题，会极大地降低算法的效率，而动态规划法总是充分利用重叠子问题，对每个子问题仅计算一次，把解保存在一个在需要时就可以查看的表中，而每次查表的时间为常数。</p>
</li>
</ul>
<p>动态规划的经典问题：</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0-1 背包问题</td>
<td style="text-align:center">$O(nW)$，$W$为背包容量</td>
<td style="text-align:center">$O(nW)$</td>
</tr>
<tr>
<td style="text-align:center">矩阵连乘</td>
<td style="text-align:center">$O(n^3)$</td>
<td style="text-align:center">$O(n^2)$</td>
</tr>
<tr>
<td style="text-align:center">最长公共序列（LCS）</td>
<td style="text-align:center">$O(n^2)$</td>
<td></td>
</tr>
</tbody>
</table>
<p>矩阵连乘：</p>
<p>两个矩阵$A_{(m \cdot n)}$和$B_{(n \cdot p)}$相乘的次数为：$m \cdot n \cdot p$，相乘后得到的新矩阵为：$(A \cdot B)_{(m \cdot p)}$。</p>
<h2 id="贪心法" data-numberify>贪心法<a class="anchor ms-1" href="#贪心法"></a></h2>
<p>和动态规划一样，贪心法也经常<u>用于解决最优化问题</u>。</p>
<p>与动态规划法不同的是，贪心法在解决问题的策略上是仅根据当前己有的信息做出选择，而且一旦做出了选择，不管将来有什么结果，这个选择都不会改变。换而言之，贪心法并<u>不是从整体最优考虑</u>，它所<u>做出的选择只是在某种意义上的局部最优</u>。<u>这种局部最优选择并不能保证总能获得全局最优解，但通常能得到较好的近似最优解。</u></p>
<p>例如，平时购物找钱时，为使找回的零钱的硬币数最少，从最大面值的币种开始，按递减的顺序考虑各币种，先尽量用大面值的币种，当不足大面值币种的金额时才去考虑下一种较小面值的币种，这就是在采用贪心法。这种方法在这里总是最优，是因为银行对其发行的硬币种类和硬币面值的巧妙安排。如果只有面值分别为1、5和11单位的硬币，而希望找回总额为15单位的硬币，按贪心算法，应找1个11单位面值的硬币和4个1单位面值的硬币，共找回5个硬币。但最优的解答应是3个5单位面值的硬币。</p>
<p>贪心法的典型实例：</p>
<ul>
<li>活动选择问题</li>
<li>背包问题</li>
</ul>
<h2 id="回溯法" data-numberify>回溯法<a class="anchor ms-1" href="#回溯法"></a></h2>
<p>回溯法有“通用的解题法”之称，用它<u>可以系统地搜索一个问题的所有解或任一解</u>。</p>
<p>回溯法是一个既带有系统性又带有跳跃性的搜索算法。它在包含问题的所有解的解空间树中，按照深度优先的策略，从根结点出发搜索解空间树。算法搜索至解空间树的任一结点时，总是先判断该结点是否肯定不包含问题的解：</p>
<ul>
<li>如果肯定不包含：跳过对以该结点为根的子树的系统搜索，逐层向其祖先结点回溯；</li>
<li>否则：进入该子树，继续按深度优先的策略进行搜索。</li>
</ul>
<p>使用回溯法求解问题：</p>
<ul>
<li>用来求问题的所有解时，要回溯到根，且根结点的所有子树都已被搜索遍才结束；</li>
<li>用来求问题的任一解时，只要搜索到问题的一个解就可以结束。</li>
</ul>
<p>回溯法适用于解一些组合数较大的问题。</p>
<p>回溯法经典实例：</p>
<ul>
<li>0-1 背包问题</li>
<li>n 皇后问题</li>
</ul>
<h3 id="解空间" data-numberify>解空间<a class="anchor ms-1" href="#解空间"></a></h3>
<p>应用回溯法解问题时，首先应明确定义问题的解空间。问题的解空间应至少包含问题的一个（最优）解。</p>
<p>通常将解空间表示为树或图的形式。</p>
<h3 id="基本思想" data-numberify>基本思想<a class="anchor ms-1" href="#基本思想"></a></h3>
<p>确定解空间的组织结构后，回溯法从开始结点（根结点）出发，以深度优先的方式搜索整个解空间。</p>
<ol>
<li>开始时根结点成为一个活结点（有多个活结点），同时也成为当前的扩展结点（只能有一个扩展结点）。</li>
<li>在当前的扩展结点处，搜索向纵深方向移至一个新结点。这个新结点就成为一个新的活结点，并成为当前扩展结点。</li>
<li>如果在当前扩展结点处不能再向纵深方向移动，则当前的扩展结点就成为死结点。此时，应往回移动（回溯）至最近的一个活结点处，并使这个活结点成为当前的扩展结点。</li>
<li>回溯法即以这种工作方式递归地在解空间中搜索，直到找到所要求的解或解空间中己无活结点时为止。</li>
</ol>
<p>运用回溯法解题通常包含以下3个步骤：</p>
<ol>
<li>针对所给问题，定义问题的解空间。</li>
<li>确定易于搜索的解空间结构。</li>
<li>以深度优先的方式搜索解空间。</li>
</ol>
<h3 id="限界函数" data-numberify>限界函数<a class="anchor ms-1" href="#限界函数"></a></h3>
<p>限界函数的设计是回溯法的核心问题，也是难题。问题的解空间往往很大，为了有效地进行搜索，需要在搜索的过程中对某些结点进行剪枝，而对哪些结点进行剪枝，需要设计限界函数来判断。</p>
<p>设计限界函数的通用的指导原则是尽可能多和尽可能早地“杀掉”不可能产生最优解的活结点。好的限界函数可以大大减少问题的搜索空间，从而大大提高算法的效率。</p>
<h2 id="分支限界法" data-numberify>分支限界法<a class="anchor ms-1" href="#分支限界法"></a></h2>
<p>分支限界法类似于回溯法，也是一种<u>在问题的解空间树$T$上搜索问题解</u>的算法。在一般情况下，分支限界法的求解目标是<u>找出满足约束条件的一个解</u>，或是在满足约束条件的解中找出使某一目标函数值达到极大或极小的解，即<u>在某种意义下的最优解</u>。</p>
<p>分支限界法以<u>广度优先</u>或以<u>最小耗费优先</u>的方式<u>搜索解空间树$T$</u>。</p>
<p>分支限界法的搜索策略是：每一个活结点只有一次机会成为扩展结点。</p>
<p>活结点一旦成为扩展结点，就一次性产生其所有子结点。在这些子结点中，那些导致不可行解或非最优解的子结点被舍弃，其余子结点被加入活结点表中。此后，从活结点表中取下一结点成为当前扩展结点，并重复上述结点扩展过程。这个过程一直持续到找到所需的解或活结点表为空时为止。</p>
<blockquote>
<p>目前己有许多利用分支限界法解决大量离散最优化的实际问题的实例。</p>
</blockquote>
<p>与回溯法相似，限界函数的设计是分支限界法的一个核心问题和难题。如何设计限界函数来有效地减小搜索空间是应用分支限界法要考虑的问题。</p>
<p>根据从活结点表中选择下一扩展结点的不同方式，可将分支限界法分为几种不同的类型。最常用的有以下两种：</p>
<ul>
<li>
<p>队列式（FIFO，先进先出）分支限界法：将活结点表组织成一个队列，并按队列的先进先出原则选择下一个结点作为扩展结点。</p>
</li>
<li>
<p>优先队列式分支限界法：将活结点表组织成一个优先队列，并按优先队列中规定的结点优先级选取优先级最高的下一个结点作为扩展结点。</p>
<p>结点优先级：通常用一个与该结点相关的数值$p$来表示，规定$p$值较大的结点优先级较高。</p>
<p>在算法实现时，有两种实现方式：</p>
<ul>
<li>通常用一个最大堆（根结点比左右子结点大）来实现最大优先队列，用最大堆的Deletemax操作（删除最大堆顶）抽取堆中下一个结点成为当前扩展结点。</li>
<li>最小优先队列规定$p$值较小的结点优先级较高。通常用一个最小堆根结点比左右子结点小）来实现最小优先队列，用最小堆的Deletemin操作（删除最小堆顶）抽取堆中下一个结点成为当前扩展结点。</li>
</ul>
</li>
</ul>
<p>分支限界法经典实例：0-1 背包问题。</p>
<h2 id="总结" data-numberify>总结<a class="anchor ms-1" href="#总结"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">算法设计方法</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">特点</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">分治法</td>
<td style="text-align:left"><ol><li>将原问题<strong>分解</strong>成多个<u>与原问题相同的子问题</u></li><li><strong>递归地求解</strong>各子问题</li><li>将子问题的解<strong>合并</strong>成原问题的解</li></ol></td>
<td style="text-align:left">原问题规模大且能分解为多个与原问题相同的子问题</td>
<td style="text-align:left"><ul><li>归并排序</li><li>快速排序</li><li>最大字段和问题</li></ul></td>
</tr>
<tr>
<td style="text-align:center">动态规划法</td>
<td style="text-align:left"><ol><li>找出并刻画最优解的结构特征</li><li>递归地定义最优解的值</li><li>自底向上方式计算最优值或构造最优解</li></ol></td>
<td style="text-align:left">求解具有某种最优性质的问题</td>
<td style="text-align:left"><ul><li>0-1 背包问题</li><li>矩阵连乘</li><li>最长公共序列（LCS）</li></ul></td>
</tr>
<tr>
<td style="text-align:center">贪心法</td>
<td style="text-align:left">与动态规划类似，但贪心法考虑的是局部最优解</td>
<td style="text-align:left">并不保证得到全局最优解，但通常能得到近似最优解</td>
<td style="text-align:left"><ul><li>活动选择问题</li><li>背包问题</li></ul></td>
</tr>
<tr>
<td style="text-align:center">回溯法</td>
<td style="text-align:left">在解空间树中，按<u>深度优先策略</u>，从根结点出发搜索解空间树</td>
<td style="text-align:left"><ul><li>可以搜索问题的所有解或任一解</li><li>适用于求解组合数较大的问题</li><li>通过限界函数减少问题的搜索空间</li></ul></td>
<td style="text-align:left"><ul><li>0-1背包问题</li><li>n皇后问题</li></ul></td>
</tr>
<tr>
<td style="text-align:center">分支限界法</td>
<td style="text-align:left">与回溯法类似，在解空间树种按<u>广度优先</u>或<u>最小耗费</u>优先方式，搜索满足约束条件的一个解</td>
<td style="text-align:left"><ul><li>可以给出<u>在某种意义下的最优解</u></li><li>分为队列式和优先队列式，优先队列式通过最大堆或最小堆实现</li></u></ul></td>
<td style="text-align:left"><ul><li>0-1 背包问题</li></ul></td>
</tr>
</tbody>
</table>
<hr>
<h1 id="算法实例" data-numberify>算法实例<a class="anchor ms-1" href="#算法实例"></a></h1>
<h2 id="最大子段和问题" data-numberify>最大子段和问题<a class="anchor ms-1" href="#最大子段和问题"></a></h2>
<p>给定$n$个整数$a_1, a_2, \cdots, a_n$（可能有负数），求该序列形如$\sum\limits_{k=i}^{j} a_k$的子段和的最大值。当序列中所有整数均为负数时，其最大子段和为$0$。即所求最大值为：</p>
<p>$$
max \left\{
0,
\mathop{max}\limits_{1 \le i \le j \le n}
\sum_{k=i}^{j} a_k
\right\}
$$</p>
<p>给定序列$A[1 \dots n]$，采用分治策略解决问题：</p>
<ol>
<li>
<p>分解：将$A[1 \dots n]$分解为长度大致相等的两段$A\left[1 \dots {n}/{2}\right]$和$A\left[ {n}/{2}+1 \dots n \right]$，分别求出这两段的最大子段和。</p>
<p>最大字段和有3中情形：</p>
<ol>
<li>$A[1 \dots n]$与$A\left[1 \dots {n}/{2}\right]$（左边那段）的最大子段和相同。</li>
<li>$A[1 \dots n]$与$A\left[ {n}/{2}+1 \dots n \right]$（右边那段）的最大子段和相同。</li>
<li>$A[1 \dots n]$的最大子段和为$\sum\limits_{k=i}^{j} a_k$，且$1 \le i \le n/2$，$n/2+1 \le j \le n$（横跨两个子段）。</li>
</ol>
</li>
<li>
<p>解决：</p>
<ul>
<li>
<p>情形1和2：再将子段进行分解，按照以上3种情形递归地计算子段的最大子段和。</p>
</li>
<li>
<p>情形3：$A\left[1 \dots {n}/{2} \right]$和$A\left[ {n}/{2}+1 \dots n \right]$都包含了最优子段的一部分。</p>
</li>
<li>
<p>在$A\left[1 \dots {n}/{2}\right]$中计算出：</p>
<p>$$
s_1 =
\mathop{max}\limits_{1 \le i \le \frac{n}{2}}
\left(\sum_{k=i}^{\frac{n}{2}} A[ \ k \ ]\right)
$$</p>
</li>
<li>
<p>在$A\left[ {n}/{2}+1 \dots n \right]$中计算出：</p>
<p>$$
s_2 =
\mathop{max}\limits_{ \frac{n}{2}+1 \le j \le n }
\left(\sum\limits_{k=\frac{n}{2}+1}^{j} A[ \ k \ ]\right)
$$</p>
</li>
</ul>
<p>$s_1 + s_2$即为情形3的最优值。</p>
</li>
<li>
<p>合并：取分解阶段3种情况下最大子段和中最大值为原问题的解。</p>
</li>
</ol>
<blockquote>
<p>以上3个步骤需要递归地进行，实际情况是：</p>
<ol>
<li>
<p>将$A[1 \dots n]$分解为由单个元素组成的$n$个子序列$\{ [a_1], [a_2], \cdots, [a_n] \}$，这$n$个子序列的最大子段和即为其唯一一个元素的值。</p>
</li>
<li>
<p>自底向上，先分别将相邻的两个子段组合起来，并根据上述分解中描述的3种情形计算其组合后的最大子段和。</p>
<p>例如$[a_1, a_2]$最大子段和有3种可能：</p>
<ol>
<li>情形1：$[a_1]$；</li>
<li>情形2：$[a_2]$；</li>
<li>情形3：$[a_1, a_2]$（即将$a_1$作为$s_1$，$a_2$作为$s_2$）。</li>
</ol>
<p>将取$\{[a_2], [a_1, a_2]\}$中值最大的序列作为$s_1$返回给上层调用。</p>
<p>$[a_3, a_4]$最大子段和也是类似以上情况，最后取$\{[a_3], [a_3, a_4]\}$中值最大的序列作为$s_2$返回给上层调用。</p>
<p>$A[1 \dots n]$中其他序列也是类似的操作。</p>
</li>
<li>
<p>接着来到上一步骤的上层调用中。</p>
<p>例如$[a_1, a_2, a_3, a_4]$的最大子段和也是有3种可能：</p>
<ol>
<li>情形1：$[a_1, a_2]$；</li>
<li>情形2：$[a_3, a_4]$；</li>
<li>情形3：$[a_1, a_2]$的$s_1$加上$[a_3, a_4]$的$s_2$。</li>
</ol>
<p>最后计算$[a_1, a_2, a_3, a_4]$的$s_1$值，可能为$[a_1, a_2, a_3, a_4]$、$[a_2, a_3, a_4]$、$[a_3, a_4]$或$[a_4]$，取其中值最大者。</p>
</li>
<li>
<p>其他层次的调用也是类似上述步骤，最后得到$[a_1, a_2, \cdots, a_{\frac{n}{2}}]$和$[a_{\frac{n}{2}+1}, \cdots, a_n]$的$s_1$和$s_2$还有它们的两个最大子段和。
根据3种情况，取3种情况中最大值者作为$A[1 \dots n]$的最大子段和。</p>
</li>
</ol>
</blockquote>
<h2 id="0-1-背包问题" data-numberify>0-1 背包问题<a class="anchor ms-1" href="#0-1-背包问题"></a></h2>
<p>有$n$个物品，第$i$个物品价值为$v_i$，重量为$w_i$，背包可容纳最大重量为$W$，$v_i$、$w_i$和$W$均为非负数。考虑如何选择装入背包的物品，使装入背包的物品总价值最大。该问题可以形式化描述如下：</p>
<ul>
<li>
<p>目标函数：$max\sum\limit_{i=1}^{n}v_ix_i$；</p>
</li>
<li>
<p>约束条件：$\sum\limit_{i=1}^{n}w_ix_i \le W$，$x_i \in {0, 1}$。</p>
<p>当物品$i$放入背包时，$x_i$为$1$，否则为$0$。</p>
</li>
</ul>
<p>满足约束条件的任一集合（$x_1, x_2, \cdots, x_n$）是问题的一个可行解，问题的目标是求问题的一个最优解。</p>
<h3 id="使用动态规划求解" data-numberify>使用动态规划求解<a class="anchor ms-1" href="#使用动态规划求解"></a></h3>
<p>根据动态规划的4个步骤求解该问题：</p>
<ol>
<li>
<p>刻画 0-1 背包问题的最优解的结构：</p>
<p>有两种情况：</p>
<ul>
<li><u>$x_n = 1$</u>：即问题的最优解包含了物品$n$，那么其余$x_1, x_2, \cdots, x_{n-1}$一定构成子问题：物品$1, 2, \cdots, n-1$在容量为<u>$W-w_n$</u>时的最优解。</li>
<li><u>$x_n = 0$</u>：即最优解不包含物品$n$，那么其余$x_1, x_2, \cdots, x_{n-1}$一定构成子问题：物品$1, 2, \cdots, n-1$在容量为<u>$W$</u>时的最优解。</li>
</ul>
</li>
<li>
<p>递归定义最优解的值：</p>
<p>设$c[i, w]$，表示背包可容纳重量为$w$时，第$i$个物品导致的最优解的总价值：</p>
<p>$$
c[i, w] =
\begin{aligned}
0,                                      &amp; i = 0 或 w = 0 \\
c[i-1, w],                              &amp; w_i &gt; w \\
max\{ c[i-1, w-w_i] + c[i-1, w] \},   &amp; i &gt; 0 且 w_i \le w
\end{aligned}
$$</p>
</li>
<li>
<p>计算背包问题最优解的值。</p>
</li>
<li>
<p>根据计算的结果构造问题最优解。</p>
</li>
</ol>
<h3 id="使用回溯法求解" data-numberify>使用回溯法求解<a class="anchor ms-1" href="#使用回溯法求解"></a></h3>
<p>以$n=3, W=30$的0-1背包问题为例，物品的价值和重量如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">物品$i$</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">价值$v_i$</td>
<td style="text-align:center">16</td>
<td style="text-align:center">15</td>
<td style="text-align:center">15</td>
</tr>
<tr>
<td style="text-align:center">重量$w_i$</td>
<td style="text-align:center">45</td>
<td style="text-align:center">25</td>
<td style="text-align:center">25</td>
</tr>
</tbody>
</table>
<ol>
<li>
<p>定义问题的解空间：</p>
<p><picture><img class="img-fluid " alt="0-1背包问题解空间树示例" src="/docs/ruan-she/algorithm-design-analysis/uTools_1684485061214.png" loading="lazy" width="1112" height="493" />
</picture>

</p>
<p>其中$X(i)$即为$x_i$。</p>
</li>
<li>
<p>定义限界函数：</p>
<p>考虑贪心策略，先对所有物品按其单位重量价值从大到小排序。对搜索空间树中的某个结点，有确定的$X(i)$（$1 \le i \le k$），而其他的$X(i)$（$k + 1 \le i \le n$）待定。</p>
<p>此时可以将0-1背包问题松弛为背包问题，求从当前结点扩展下去，计算能获得的最大价值。若该价值比当前已经得到的某个可行解的值要小，则该结点不必再扩展。</p>
</li>
<li>
<p>以深度优先的方式搜索解空间：</p>
<ol>
<li>
<p>开始时根结点是唯一的活结点，也是当前的扩展结点。在扩展结点处，按照深度优先策略移至结点$B$或$C$。</p>
<p>假设先移至$B$，此时$A$和$B$均是活结点，结点$B$成为当前扩展结点。</p>
<p>当前$X(1) = 1$表示选择了物品$1$，当前背包剩余容量$w = 14$，获取的价值是$v=45$。</p>
</li>
<li>
<p>从当前扩展结点$B$可以移至$D$或$E$。</p>
<p>由于$w_2=15$，移至$D$不是一个可行解，所以选择移至$E$。</p>
<p>此时$E$成为新扩展结点，$A$、$B$和$E$是当前的活结点，当前的$w$和$v$不变。</p>
</li>
<li>
<p>从$E$可以移至$J$或$K$。</p>
<p>移至$J$导致一个不可行解，所以移至$K$，$K$成为新扩展结点。</p>
<p>$K$是叶结点，故得到一个可行解。解$x$的取值是由根到叶结点$K$的路径唯一确定的，即$x = (1, 0, 0)$，对应$v = 45$。</p>
<p>由于$K$已不能在向纵深扩展，所以$K$成为死结点。返回到上一个活结点$E$，此时$E$也没有可扩展的结点，它也成为一个死结点。$B$此时也是死结点，最后回到$A$。</p>
</li>
<li>
<p>$A$还可扩展，按照类似上述步骤继续搜索。搜索结束后找到的最好解就是0-1背包问题的最优解。</p>
</li>
</ol>
</li>
</ol>
<h2 id="背包问题" data-numberify>背包问题<a class="anchor ms-1" href="#背包问题"></a></h2>
<p>有$n$个物品，第$i$个物品价值为$v_i$，重量为$w_i$，背包容量为$W$，$v_i$、$w_i$和$W$均为非负数。背包问题与0-1背包问题类似，但是每个物品可以部分装入背包，即$0 \le x_i \le 1$。</p>
<p>假设$n = 5, W = 100$，各物品的重量、价值和单位重量的价值如图：</p>
<p><picture><img class="img-fluid " alt="物品基本信息" src="/docs/ruan-she/algorithm-design-analysis/uTools_1684482734674.png" loading="lazy" width="1278" height="225" />
</picture>

</p>
<p>为了得到最优解，必须把背包放满。用贪心法求解，有3种方式：</p>
<ul>
<li>
<p>按最大价值优先放入背包的原则：</p>
<ol>
<li>先放物品$1$和$4$，获得价值$65+60=125$，背包容量剩$100-30-50=20$。</li>
<li>此时物品$5$价值最大，但不能全部放入背包。而将物品$2$和$3$放入背包比把物品$5$的一半放入背包的价值大。</li>
<li>把物品$2$放入背包，目前获得价值共$125+20=145$，剩余容量$20-10=10$。</li>
<li>此时可再放入物品$3$的$\cfrac{1}{3}$，得到总价值$145 + 1.5 \times 10 = 160$。</li>
</ol>
<p>对应的解为$\left\{1,\ 1,\ \cfrac{1}{3},\ 1,\ 0 \right\}$。</p>
</li>
<li>
<p>按最小重量优先放入背包的原则：将物品$2$、$3$、$1$和$5$放入背包，刚好装满，得到价值$20+30+60+40=155$，对应的解为$\{ 1, 1, 1, 0, 1 \}$。</p>
</li>
<li>
<p>按最大单位重量价值优先放入背包的原则：</p>
<ol>
<li>将物品$1$、$2$和$3$放入背包，得到价值$65+20+30=115$，剩余容量$100-30-10-20=40$。</li>
<li>还可将物品$4$的$\cfrac{4}{5}$放入背包，得到总价值$115 + \cfrac{4}{5} \times 60 = 163$。</li>
</ol>
<p>对应的解为$\left\{ 1,\ 1,\ 1,\ \cfrac{4}{5},\ 0 \right\}$</p>
</li>
</ul>
<h2 id="最长公共子序列lcs" data-numberify>最长公共子序列（LCS）<a class="anchor ms-1" href="#最长公共子序列lcs"></a></h2>
<p>非形式化地讲，子序列可以是从给定序列中随意地（不一定是连续的）去掉若干元素（可能一个也不去掉）后所形成的序列。令序列$X = x_1x_2\cdots x_m$，序列$Y=y_1y_2\cdots y_k$是$X$的子序列，存在$X$的一个严格递增下标序列$&lt;i_1, i_2, \cdots, i_k&gt;，使得对于所有的$j=1, 2, \cdots, k$有$x_{i_j}=y_j$。</p>
<p>公共子序列：给定两个序列$X$和$Y$，序列$Z$同时是$X$和$Y$的子序列，这个序列$Z$即为$X$和$Y$的公共子序列。</p>
<p>最长公共子序列问题定义为：给定序列$X=x_1x2 \cdots x_m$和序列$Y=y_1y2 \cdots y_n$，求这两个序列的最长公共子序列。</p>
<p>动态规划法求解最长公共子序列问题：</p>
<ol>
<li>
<p>刻画最长公共子序列问题的最优子结构：</p>
<p>LCS最优子结构定理：</p>
<ul>
<li>$x_m = y_n$：$z_k = x_m = y_n$，且$Z_{k-1}$是$X_{m-1}$和$Y_{n-1}$的一个最长公共子序列。</li>
<li>$x_m \neq y_n$：
<ul>
<li>$z_k \neq x_m$：蕴含$Z$是$X_{m-1}$和$Y$的一个最长公共子序列；</li>
<li>$z_k \neq y_n$：蕴含$Z$是$X$和$Y_{n-1}$的一个最长公共子序列。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>递归定义最优解的值：</p>
<p>设$l[i, j]$表示序列$X_i$和$Y_j$的最长公共子序列的长度：</p>
<p>$$
l[i, j] =
\begin{aligned}
0,                          &amp; i=0 或 j=0 \\
l[i-1, j-1],                &amp; i,j &gt; 0 且 x_i = y_j \\
max(l[i-1, j], l[i, j-1]),  &amp; i,j &gt; 0 且 x_i \neq y_j
\end{aligned}
$$</p>
</li>
<li>
<p>计算最优解的值：</p>
<p>根据上述递归式自底向上地求出最优解的值。将$l[i, j]$的值存储在表$l[1 \dots m, 1 \dots n]$中，以行为主序从左到右计算表$l$中的元素，同时维持表$b[1 \dots m, 1 \dots n]$，用其中的元素$b[i, j]$记录使得$l[i, j]$取最优值的最优子结构。</p>
<p>例如$X=ABCBDAD$和$Y=BDCABA$，对应的表$l$和$b$如图：</p>
<p><picture><img class="img-fluid " alt="动态规划求解LCS示例" src="/docs/ruan-she/algorithm-design-analysis/uTools_1684475662212.png" loading="lazy" width="599" height="480" />
</picture>

</p>
</li>
<li>
<p>构造最优解：</p>
<p>用表$b$中的信息构造$X$和$Y$的一个LCS。从$b[m, n]$开始，在表中沿着箭头方向跟踪，$b[i, j]$的值和含义如下：</p>
<ul>
<li>$“\nwarrow”$：表示$x_i = y_j$为LCS中的元素，接下来要判断（跟踪）$b[i-1, j-1]$。</li>
<li>$“\uparrow”$：表示$x_i \neq y_j$，此时需要判断（跟踪）$b[i-1, j]$。</li>
<li>$“\leftarrow”$：表示$x_i \neq y_j$，此时需要判断（跟踪）$b[i, j-1]$。</li>
</ul>
</li>
</ol>
<h2 id="活动选择问题" data-numberify>活动选择问题<a class="anchor ms-1" href="#活动选择问题"></a></h2>
<p>活动选择问题是指若干个具有竞争性的活动，要求互斥使用某一公共资源时，如何选择最大的相容活动集合。</p>
<p>假设有一个需要使用某一资源的$n$个活动组成的集合$S=\{a_1, a_2, \cdots, a_n\}$，该资源一次只能被一个资源占用。</p>
<ul>
<li>活动$a_i$有一个开始时间$s_i$和结束时间$f_i$，且$0 \le s_i \le f_i &lt; \infin$。</li>
<li>一旦被选择后，活动$a_i$就占据半开时间区间$[s_i, f_i)$。</li>
<li>如果两个活动$a_i$和$a_j$的时间区间互不重叠，则称活动$a_i$和$a_j$是兼容的。</li>
</ul>
<p>活动选择问题就是要选择出一个由互相兼容的活动组成的最大子集合。</p>
<p>该问题可用动态规划法和贪心法求解。</p>
<p><strong>使用贪心法求解</strong>：</p>
<p>定义集合$S_{ij} = \{a_k \in S: f_i \le s_k &lt; f_k \le s_j \}$。为了完整表示，加入两个虚拟活动$a_0$和$a_{n+1}$，其中$f_0=0,s_{n+1} = \infin$，则$S = S_{0, n+1}$。</p>
<p>定理：</p>
<p>对于任意非空子问题$S_{ij}$，设$a_m$是$S_{ij}$中具有最早结束时间的活动，那么有两种情况：</p>
<ul>
<li>$a_m$在$S_{ij}$的某个最大兼容活动子集中。</li>
<li>子问题$S_{im}$为空，选择$a_m$将使$S_{mj}$为唯一可能非空的子问题。</li>
</ul>
<h2 id="n-皇后问题" data-numberify>n 皇后问题<a class="anchor ms-1" href="#n-皇后问题"></a></h2>
<p>$n$皇后问题要求在$n \times n$格的棋盘上放置$n$个皇后，使得它们彼此不受攻击。按照规则，皇后可以攻击与之处在同一行、同一列或同一斜线上的其他任何棋子。$n$皇后问题等价于要求在一个$n \times n$棋盘上放置$n$个皇后，使得任何两个皇后不能被放在同一行、同一列或同一斜线上。</p>
<p>求解过程从空棋盘开始，设在第$1$行至第$m$行都己经正确地放置了$m$个皇后：</p>
<ol>
<li>
<p>在第$m+1$行上，从第1$列开始找适合放置皇后的位置，共有$n$个可选位置。当一个位置不合适时就顺序选择下一列的位置进行判断。</p>
<p>一个位置上共有以下几种情形：</p>
<ul>
<li>当前位置的所在列上，已经有一个皇后存在，该位置不合适。</li>
<li>当前位置所在的斜线上，已经有一个皇后存在，该位置不合适。</li>
<li>当前位置所在的列和斜线上，均无皇后存在，该位置合适。</li>
</ul>
</li>
<li>
<p>接着往下一行，寻找下一行中适合放皇后的位置，然后再继续往下找。</p>
<p>此时有以下几种情形：</p>
<ul>
<li>
<p>一直寻找到第$n$行，每一行上都有适合放皇后的位置。此时为一个可行解。</p>
<p>如果第$n$行还有剩余的位置，那么便继续判断这些位置，以希望再获得一个可行解；否则进行回溯，按步骤1的方式改变上一行的位置。</p>
</li>
<li>
<p>往下搜寻，在中途发现某一行上的所有位置都不能放置皇后，此时也要进行回溯，回到上一行按步骤1的方式改变位置。</p>
</li>
</ul>
</li>
</ol>
<p>用回溯法求解4-皇后问题：</p>
<p><picture><img class="img-fluid " alt="用回溯法求解4-皇后问题的搜索过程" src="/docs/ruan-she/algorithm-design-analysis/uTools_1684495382071.png" loading="lazy" width="1275" height="506" />
</picture>

</p>
<hr>
<h1 id="查找算法" data-numberify>查找算法<a class="anchor ms-1" href="#查找算法"></a></h1>
<p>查找是一种常用的基本运算。查找表是指由同一类型的数据元素（或记录）构成的集合。</p>
<p>查找表经常要进行的操作：</p>
<ul>
<li>查询某个特定的数据元素是否在查找表中。</li>
<li>检索某个特定的数据元素的各种属性。</li>
</ul>
<p>通常将只进行这两种操作的查找表称为<strong>静态查找表</strong>。</p>
<p>查找表经常要进行的另外两种操作：</p>
<ul>
<li>在查找表中插入一个数据元素。</li>
<li>从查找表中删除一个数据元素。</li>
</ul>
<p>需要在查找表中插入或删除元素，称此类查找表为<strong>动态查找表</strong>。</p>
<p><strong>关键字</strong>是数据元素（或记录）的某个数据项的值，用它来识别（标识）这个数据元素。</p>
<ul>
<li><strong>主关键字</strong>：能唯一标识一个数据元素的关键字。</li>
<li><strong>次关键字</strong>：能标识多个数据元素的关键字。</li>
</ul>
<h2 id="平均查找长度" data-numberify>平均查找长度<a class="anchor ms-1" href="#平均查找长度"></a></h2>
<p>查找算法基本操作是<u>“将记录的关键字与给定值进行比较”</u>。因此，通常<u>以“其关键字和给定值进行过比较的记录个数的期望值”作为衡量查找算法好坏的依据</u>。</p>
<p>查找算法在查找成功时的<u>平均查找长度</u>关键字和给定值比较次数的期望值：</p>
<p>$$
ASL = \sum_{i=1}^{n}{P_iC_i}
$$</p>
<ul>
<li>
<p>$P_i$为对表中第$i$个记录进行查找的概率，</p>
<p>一般认为$P_i=\cfrac{1}{n}, 1 \le i \le n$，即$\sum_{i=1}^{n}{P_i}$；</p>
</li>
<li>
<p>$C_i$为查找成功时，已经进行过比较的关键字个数。</p>
</li>
</ul>
<h2 id="查找算法-1" data-numberify>查找算法<a class="anchor ms-1" href="#查找算法-1"></a></h2>
<p>静态查找表有以下查找方法：</p>
<ul>
<li>顺序查找；</li>
<li>折半查找；</li>
<li>分块查找。</li>
</ul>
<p>动态查找表有以下查找方法：</p>
<ul>
<li>二叉排序树；</li>
<li>平衡排序树；</li>
<li>B-树；</li>
<li>哈希表。</li>
</ul>
<h3 id="顺序查找" data-numberify>顺序查找<a class="anchor ms-1" href="#顺序查找"></a></h3>
<p>顺序查找是从表的一端开始，按照顺序（从左往右或从右往左）逐一进行查找。顺序查找的方法<u>对于<strong>顺序存储方式</strong>和<strong>链式存储方式</strong>的查找表都适用</u>。</p>
<p>顺序查找中，$C_i$取决于所查记录在表中的位置。一般情况下，$C_i = n - i + 1$，在等概率下，顺序查找的平均查找长度为：</p>
<p>$$
ASL_{ss} = \cfrac{1}{n} \sum_{i=1}^{n}{(n-i+1)} = \cfrac{n+1}{2}
$$</p>
<h3 id="二分查找" data-numberify>二分查找<a class="anchor ms-1" href="#二分查找"></a></h3>
<p>二分查找又叫折半查找，是在有序列表的基础上进行查找，每次查找可以筛掉一半的元素。步骤如下：</p>
<p>以升序数列$L[0&hellip;n-1]$为例，假设要查找的数为$x$：</p>
<p>让$x$与数列中间位置的元素$L\left[ \left\lfloor \cfrac{n}{2} \right\rfloor \right]$进行比较，如果相等则返回该元素下标，否则：</p>
<ul>
<li>如果$x$比中间元素小，递归地对中间元素左边的数列（比$x$小的元素）进行二分查找；</li>
<li>如果$x$比中间元素大，递归地对中间元素右边的数列（比$x$大的元素）进行二分查找。</li>
</ul>
<p>折半查找的过程可用二叉树描述。$n$个结点的二叉树深度为$\lfloor log_2{n} \rfloor + 1$，折半查找进行比较的关键字个数最多不超过树的深度。所以，折半查找在查找成功时和给定值<u>进行比较的关键字个数最多为$\lfloor log_2{n} \rfloor + 1$</u>。</p>
<p>折半查找的平均查找长度（假设结点总数为$n=2^h-1$，即折半查找树为深度$h=log_2(n+1)$的满二叉树）：</p>
<p>$$
ASL_{bs} = \cfrac{1}{n} \sum_{i=1}^{n}{i \times 2^{i-1}} = \cfrac{n+1}{n} log_2{(n+1)} - 1
$$</p>
<p>当$n$值较大时，$ASL_{bs} \approx log_2{(n+1)} - 1$。</p>
<hr>
<h1 id="哈希表" data-numberify>哈希表<a class="anchor ms-1" href="#哈希表"></a></h1>
<p>哈希表查找（又叫散列表查找）是通过散列技术，将存储位置和关键字构建一个确定的关系$H$，使得每个关键字$key$对应一个存储位置$H(key)$。其中，$H$称为哈希函数或者散列函数。</p>
<p>根据设定的<strong>哈希函数</strong>$H(key)$和<strong>处理冲突的方法</strong>，将一组关键字映射到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这块连续的空间称为哈希表或散列表，这一映射过程称为<strong>哈希造表</strong>或<strong>散列表</strong>，所得的存储位置称为<strong>哈希地址</strong>或<strong>散列地址</strong>。</p>
<p>对于哈希表，主要考虑两个问题：</p>
<ul>
<li>如何构造哈希函数；</li>
<li>如何解决冲突。</li>
</ul>
<h2 id="冲突" data-numberify>冲突<a class="anchor ms-1" href="#冲突"></a></h2>
<p>对于某个哈希函数$H$和两个关键字$key_1$和$key_2$,如果$key_1 \neq key_2$，而$H(key_1)=H(key_2)$，则称为冲突。</p>
<p>具有相同哈希函数值的关键字对该哈希函数来说称为同义词。</p>
<p>一般情况下，冲突只能尽可能减少而不能完全避免。</p>
<h2 id="哈希函数的构造方法" data-numberify>哈希函数的构造方法<a class="anchor ms-1" href="#哈希函数的构造方法"></a></h2>
<p>常用的哈希函数构造方法有：</p>
<ul>
<li>
<p>直接定址法；</p>
</li>
<li>
<p>数字分析法；</p>
</li>
<li>
<p>平方取中法；</p>
</li>
<li>
<p>折叠法；</p>
</li>
<li>
<p>随机数法；</p>
</li>
<li>
<p>除留余数法</p>
<p>……</p>
</li>
</ul>
<p>哈希函数的构造要考虑到：</p>
<ul>
<li>
<p>压缩性：节省存储空间；</p>
</li>
<li>
<p>散列性：尽量减少冲突。</p>
<p>要减少冲突，就要设法使哈希函数尽可能均匀地把关键字映射到存储区的各个存储单元。在构造哈希函数时，一般都要对关键字进行计算，且尽可能使关键字的所有组成部分都能起作用。</p>
</li>
</ul>
<h3 id="除留取余数法" data-numberify>除留取余数法<a class="anchor ms-1" href="#除留取余数法"></a></h3>
<p>除留取余数法是最常用的构造散列函数方法。</p>
<p>除留取余数法：</p>
<p>$$
f(key)=key \enspace mod \enspace p\quad (p\le m),\ m为散列表长
$$</p>
<blockquote>
<p>$mod$ 是取模运算。</p>
<p>根据经验，若散列表表长为$m$，通常$p$为小于或等于表长（最好接近$m$）的最小质数，可以更好的减小冲突。</p>
</blockquote>
<h2 id="冲突处理方法" data-numberify>冲突处理方法<a class="anchor ms-1" href="#冲突处理方法"></a></h2>
<p>解决冲突就是为出现冲突的关键字找到另一个“空”的哈希地址。在处理冲突的过程中可能得到一个地址序列$H_i,(i=1,2,\dots,k)$。常见的处理冲突的方法有以下几种：</p>
<ul>
<li>开放地址法；</li>
<li>多重散列法（再哈希法）；</li>
<li>链地址法；</li>
<li>公共溢出区法……</li>
</ul>
<h3 id="开放地址法" data-numberify>开放地址法<a class="anchor ms-1" href="#开放地址法"></a></h3>
<p>开放地址就是一旦发生冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并且记录它。</p>
<p>有三种寻找空散列地址的方法：</p>
<ul>
<li>
<p>线性探测法（线性探测再散列）：</p>
<p>$$
H_i=(H(key)+d) mod m
$$</p>
<p>其中：</p>
<ul>
<li>$d$取$0,1,2,&hellip;,m-1$；</li>
<li>$m$为散列表的长度。</li>
</ul>
<p>$d$初始为0，如果有冲突，那么$d$就通过递增来寻找空的散列地址。</p>
</li>
<li>
<p>二次探测法（二次探测再散列）：</p>
<p>$$
H_i=(H(key)+q^2) mod m
$$</p>
<p>其中：</p>
<ul>
<li>$q$取$0,1,-1,2,-2,&hellip;,\pm k$，$k \le \cfrac{m}{2}$</li>
<li>$m$为散列表的长度</li>
</ul>
<p>二次探测法其实是对线性探测的一个优化，增加了平方可以不让关键字聚集在某一块区域。</p>
</li>
</ul>
<p>线性探测法市能使第$i$个哈希地址的同义词存入第$i+1$个哈希地址，这样本应存入第$i+1$个哈希地址的元素变成了第$i+2$个哈希地址元素的同义词，……，因此，可能出现很多元素在相邻的哈希地址上“聚集”起来的现象，大大降低了查找效率。</p>
<hr>
<h1 id="排序算法" data-numberify>排序算法<a class="anchor ms-1" href="#排序算法"></a></h1>
<p>排序算法有稳定排序和不稳定排序两种。假设待排序序列中，$R_i$和$R_j$值相同，且$R_i$领先于$R_j$，排序后：</p>
<ul>
<li><strong>稳定排序</strong>：排序后$R_i$和$R_j$相对次序不变，$R_i$任领先于$R_j$；</li>
<li><strong>不稳定排序</strong>：排序后可能出现$R_j$领先于$R_i$的情况。</li>
</ul>
<p>根据记录存储的位置可分为：</p>
<ul>
<li><strong>内部排序</strong>：待排序记录存储在内存中进行排序的过程。</li>
<li><strong>外部排序</strong>：排序记录的数量很大，内存无法容纳全部记录，在排序过程需要对外存进行访问的排序过程。</li>
</ul>
<p>排序过程需要进行的两种基本操作：</p>
<ol>
<li>
<p>比较两个关键字的大小。</p>
<p>这种操作对于大多数排序方法来说是必需的。</p>
</li>
<li>
<p>将记录从一个位置移动到另一个位置。</p>
<p>这种操作可以通过改变记录的存储方式来避免。</p>
</li>
</ol>
<p>排序算法及其时间、空间复杂度：</p>
<table>
<thead>
<tr>
<th style="text-align:center">排序算法</th>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">最坏时间复杂度</th>
<th style="text-align:center">最好时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">稳定性</th>
<th style="text-align:center">是否归位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">直接插入排序</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">稳定</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">希尔排序</td>
<td style="text-align:center">$O(n^{1.3})$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">不稳定</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">简单选择排序</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">不稳定</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">堆排序</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">不稳定</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">冒泡排序</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">$O(1)$</td>
<td style="text-align:center">稳定</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">快速排序</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(log_2{n})$</td>
<td style="text-align:center">不稳定</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">归并排序</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(nlog_2{n})$</td>
<td style="text-align:center">$O(n)$</td>
<td style="text-align:center">稳定</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
<blockquote>
<p>是否归位：在排序过程中，能否确定某些元素的最终排序位置。</p>
</blockquote>
<h2 id="选择排序" data-numberify>选择排序<a class="anchor ms-1" href="#选择排序"></a></h2>
<p>选择排序（Selection Sort）是一种简单直观的排序算法，无论什么数据进去都是 $O(n²)$ 的时间复杂度。</p>
<p>算法步骤：</p>
<ol>
<li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li>
<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>
<li>重复步骤2，直到所有元素均排序完毕。</li>
</ol>
<blockquote>
<p>归位：在排序过程中，能确定某些元素的最终排序位置。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">selectionSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>     <span class="c1">// 走访未排序的元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 找到最小值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">min</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                <span class="n">min</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// i 不是最小数时，将 i 和最小数进行交换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">min</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">min</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="p">[</span><span class="n">min</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">selectionSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="冒泡排序" data-numberify>冒泡排序<a class="anchor ms-1" href="#冒泡排序"></a></h2>
<p>冒泡排序（Bubble Sort）是一种简单直观的排序算法。</p>
<p>这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<p>算法步骤：</p>
<p>假设一个序列长度为n，m（m≤n）是已排序完成的在末尾的数。</p>
<ol>
<li>
<p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p>
</li>
<li>
<p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。对比结束后，最后的元素会是最大的数。</p>
</li>
<li>
<p>对接下来n-m个未排序的数重复步骤1和2，直到没有任何一对数字需要比较。</p>
<p>第一趟对序列中所有n个数进行比对，第二趟对序列中n-1个未排序完成的数进行比对，以此类推。每次比对的数为n-m。</p>
</li>
</ol>
<blockquote>
<p>归位：在排序过程中，能确定某些元素的最终排序位置。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">bubbleSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">bubbleSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="直接插入排序" data-numberify>直接插入排序<a class="anchor ms-1" href="#直接插入排序"></a></h2>
<p>直接插入排序的做法是：在插入第$i$个记录（$R_i$）时，序列中的前$i-1$个记录$R_1,R_2,\cdots,R_{i-1}$已排好序。将$R_i$与前面的有序序列做比较，找到应该插入的位置将$R_i$插入，并将插入位置后的记录依序向后移动。</p>
<blockquote>
<p>如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。</p>
<p>对于基本有序的序列用直接插入排序效率是最高的。</p>
<p>不归位：在排序过程中，不能确定某些元素的最终排序位置。</p>
</blockquote>
<h2 id="希尔排序" data-numberify>希尔排序<a class="anchor ms-1" href="#希尔排序"></a></h2>
<p>希尔排序又称为“缩小增量排序”，它是对直接插入排序方法的改进。</p>
<p>希尔排序的基本思想是：先将整个待排记录序列分割成若干子序列，然后分别进行直接插入排序，待整个序列中的记录基本有序时，再对全体记录进行一次直接插入排序。</p>
<p>步骤如下：</p>
<ol>
<li>
<p>选择一个增量序列$t_1,t_2,&hellip;,t_k$，其中$t_i &lt; t_{i-1}(1 \le i \le k),t_k = 1$；</p>
<p>一般来说，$t_1 \le \cfrac{n}{2}$。</p>
</li>
<li>
<p>按增量序列个数$k$，对序列进行$k$趟排序；</p>
</li>
<li>
<p>每趟排序，根据对应的增量$t_i$，将待排序列分割成若干长度为$t_i$的子序列，分别对各子表进行直接插入排序。仅增量因子为$1$时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p>
</li>
</ol>
<p><picture><img class="img-fluid " alt="希尔排序示例" src="/docs/ruan-she/algorithm-design-analysis/uTools_1681209778321.png" loading="lazy" width="649" height="460" />
</picture>

</p>
<blockquote>
<p>归位：在排序过程中，能确定某些元素的最终排序位置。</p>
</blockquote>
<h2 id="计数排序" data-numberify>计数排序<a class="anchor ms-1" href="#计数排序"></a></h2>
<p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>
<p>当输入的元素是 n 个 0 到 k 之间的整数时，它的运行时间是$Θ(n + k)$。计数排序不是比较排序，排序的速度快于任何比较排序算法。</p>
<p>由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。</p>
<blockquote>
<p>计数排序是用来排序0到100之间的数字的最好的算法。</p>
</blockquote>
<p>算法步骤：</p>
<ol>
<li>找出待排序的数组中最大和最小的元素。</li>
<li>统计数组中每个值为 <code>i</code>的元素出现的次数，存入数组 <code>C</code>的第 <code>i</code>项。</li>
<li>对所有的计数累加（从 <code>C</code>中的第一个元素开始，每一项和前一项相加）。</li>
<li>反向填充目标数组：将每个元素 <code>i</code>放在新数组的第 <code>C(i)</code> 项，每放一个元素就将 <code>C(i)</code> 减去 <code>1</code>。</li>
</ol>
<h2 id="堆排序" data-numberify>堆排序<a class="anchor ms-1" href="#堆排序"></a></h2>
<p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。</p>
<p>堆积是一种近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>
<p>堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p>
<ol>
<li>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</li>
<li>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</li>
</ol>
<p>算法步骤</p>
<ol>
<li>
<p>将待排序的数组构造出一个堆 <code>H[0……n-1]</code>；</p>
</li>
<li>
<p>把堆首（堆顶结点，即最大值）和堆尾（堆的最下层最右边的结点）互换；</p>
<p>此时不再对原堆顶（最大值）进行操作，即原堆顶已经被“移出”，堆的长度缩小1。</p>
</li>
<li>
<p>把新的数组顶端数据调整到相应位置；</p>
</li>
<li>
<p>重复步骤 2 到 3，直到堆的尺寸为 1。</p>
</li>
</ol>
<blockquote>
<p>归位：在排序过程中，能确定某些元素的最终排序位置。</p>
</blockquote>
<h2 id="快速排序" data-numberify>快速排序<a class="anchor ms-1" href="#快速排序"></a></h2>
<p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。</p>
<p>算法步骤</p>
<ol>
<li>从序列中选择一个元素作为“基准”（pivot）。</li>
<li>将所有比基准数小的放在基准左边，所有比基准数大的放在基准右边（相同的数可以在任一边）。这个称为分区（partition）操作。</li>
<li>分区完成后，该基准就会归到序列中的相应位置，该位置是排序完成后的位置。</li>
<li>分别递归地把小于基准数的子序列（左边）和大于基准数的子序列（右边）重复执行1到3操作。</li>
</ol>
<blockquote>
<p>归位：在排序过程中，能确定某些元素的最终排序位置。</p>
</blockquote>
<h2 id="归并排序" data-numberify>归并排序<a class="anchor ms-1" href="#归并排序"></a></h2>
<p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p>
<p>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p>
<ol>
<li>自上而下的递归；</li>
<li>自下而上的迭代。</li>
</ol>
<p>算法步骤：</p>
<ol>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>
<li>重复步骤 3 直到某一指针达到序列尾；将另一序列剩下的所有元素直接复制到合并序列尾。</li>
</ol>
<blockquote>
<p>不归位：在排序过程中，不能确定某些元素的最终排序位置。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>计算机网络篇</title>
      <link>/docs/ruan-she/computer-nework/</link>
      <pubDate>Fri, 12 May 2023 06:01:08 +0000</pubDate>
      
      <guid>/docs/ruan-she/computer-nework/</guid>
      <description><![CDATA[网络概述 计算机网络是计算机技术与通信技术相结合的产物，它实现了远程通信、远程信息处理和资源共享。现代计算机网络已具有统一的网络体系结构。 计算]]></description>
      <content:encoded><![CDATA[<h1 id="网络概述" data-numberify>网络概述<a class="anchor ms-1" href="#网络概述"></a></h1>
<p>计算机网络是计算机技术与通信技术相结合的产物，它实现了远程通信、远程信息处理和资源共享。现代计算机网络已具有统一的网络体系结构。</p>
<p>计算机网络提供的主要功能有：</p>
<ul>
<li>数据通信</li>
<li>资源共享</li>
<li>负载均衡</li>
<li>高可共享性</li>
</ul>
<h2 id="计算机网络分类" data-numberify>计算机网络分类<a class="anchor ms-1" href="#计算机网络分类"></a></h2>
<p>按通信距离分类：</p>
<table>
    <tr>
        <th style="text-align:center">
            网络分类
            </th>
        <th style="text-align:center">
            分布距离
        </th>
        <th style="text-align:center">
            计算机分布范围
        </th>
        <th style="text-align:center">
            传输速率
        </th>
    </tr>
    <tr>
        <td style="text-align:center" rowspan="4">
            <b>
                局域网
                <br>
                MAN
            </b>
        </td>
        <tr>
            <td>10m左右</td>
            <td>房间</td>
            <td rowspan="3">
                4Mbps ~ 1Gbps
            </td>
        </tr>
        <tr>
            <td>100m左右</td>
            <td>楼寓</td>
        </tr>
        <tr>
            <td>1000m左右</td>
            <td>校园</td>
        </tr>
    </tr>
    <tr>
        <td style="text-align:center">
            <b>
                城域网
                <br>
                WAN
            </b>
        </td>
        <td>10km</td>
        <td>城市</td>
        <td>50Kbps ~ 100 Mbps</td>
    </tr>
    <tr>
        <td style="text-align:center">
            <b>
                广域网
                <br>
                LAN
            </b>
        </td>
        <td>100km以上</td>
        <td>国家或全球</td>
        <td>9.6Kbps ~ 45Mbps</td>
    </tr>
</table>
<p>其它分类方式与其分类如：</p>
<table>
    <tr>
        <th style="text-align: center;">
            分类方式
        </th>
        <th>
            分类内容
        </th>
    </tr>
    <tr>
        <td style="text-align: center;" rowspan="4">
            信息交换方式
        </td>
    </tr>
    <tr><td>电路交换网</td></tr>
    <tr><td>分组交换网</td></tr>
    <tr><td>综合交换网</td></tr>
    <tr>
        <td style="text-align: center;" rowspan="5">
            网络拓扑结构
        </td>
    </tr>
    <tr><td>星型网</td></tr>
    <tr><td>树型网</td></tr>
    <tr><td>环型网</td></tr>
    <tr><td>总线网</td></tr>
    <tr>
        <td style="text-align: center;" rowspan="5">
            通信介质
        </td>
    </tr>
    <tr><td>双绞线网</td></tr>
    <tr><td>同轴电缆网</td></tr>
    <tr><td>光纤网</td></tr>
    <tr><td>卫星网</td></tr>
    <tr>
        <td style="text-align: center;" rowspan="3">
            传输带宽
        </td>
    </tr>
    <tr><td>基带网</td></tr>
    <tr><td>宽带网</td></tr>
    <tr>
        <td style="text-align: center;" rowspan="3">
            使用范围
        </td>
    </tr>
    <tr><td>公用网</td></tr>
    <tr><td>专用网</td></tr>
    <tr>
        <td style="text-align: center;" rowspan="4">
            速率
        </td>
    </tr>
    <tr><td>高速网</td></tr>
    <tr><td>中速网</td></tr>
    <tr><td>低速网</td></tr>
    <tr>
        <td style="text-align: center;" rowspan="3">
            通信传播方式
        </td>
    </tr>
    <tr><td>广播式</td></tr>
    <tr><td>点到点式</td></tr>
</table>
<h2 id="isoosi-网络体系结构" data-numberify>ISO/OSI 网络体系结构<a class="anchor ms-1" href="#isoosi-网络体系结构"></a></h2>
<p>ISO/OSI的参考模型共有7层：</p>
<p><picture><img class="img-fluid " alt="OSI 参考模型" src="/docs/ruan-she/computer-nework/uTools_1683875696461.png" loading="lazy" width="390" height="339" />
</picture>

</p>
<p>计算机网络按照数据通信和数据处理的功能可分为两层：</p>
<ol>
<li>
<p>内层通信子网（通信子网）：由计算机和高速通信线路组成独立的数据系统，承担全网的通信工作（解决数据传输和通信控制问题）。</p>
</li>
<li>
<p>外层资源子网（资源子网）：包括计算机、终端、通信子网接口设备、外部设备、软件资源等，它负责全网的数据处理和提供网络资源及网络服务。</p>
</li>
</ol>
<p>这两个网络层符合国际标准化组织所制定的开放式系统互连参考模型（OSI）的思想：</p>
<ul>
<li>通信子网对应于OSI中的低三层：
<ul>
<li>物理层</li>
<li>数据链路层</li>
<li>网络层</li>
</ul>
</li>
<li>资源子网对应于OSI中的高三层：
<ul>
<li>会话层</li>
<li>表示层</li>
<li>应用层</li>
</ul>
</li>
</ul>
<p>服务端要向用户端传送数据（信息流向）：</p>
<ol>
<li>
<p>服务端将数据送入应用层，然后数据逐层向物理层传递。</p>
<p>在传递过程中，每一层对数据做相应处理（附加控制信息、数据变换、报文分段、报文分组、变换为帧等）。</p>
<p>最后，经由物理层将数据发送至用户端。</p>
</li>
<li>
<p>用户端接受信息，按照与服务端相反顺序的动作，从物理层开始层层剥去控制信息。</p>
<p>最后把原数据展示给用户。</p>
</li>
</ol>
<p><picture><img class="img-fluid " alt="ISO/OSI RM 内信息流动" src="/docs/ruan-she/computer-nework/uTools_1683877150679.png" loading="lazy" width="724" height="404" />
</picture>

</p>
<blockquote>
<p>只有物理层是实通信（有物理连接），其余各层均为虚通信（无连线）。</p>
</blockquote>
<h2 id="网络的拓扑结构" data-numberify>网络的拓扑结构<a class="anchor ms-1" href="#网络的拓扑结构"></a></h2>
<p>网络拓扑结构是指网络中通信线路和结点的几何排序，用于表示整个网络的结构外貌，反映各结点之间的结构关系。</p>
<p>常用的网络拓扑结构有：</p>
<ul>
<li>
<p>总线型结构：</p>
<p><picture><img class="img-fluid " alt="总线型结构" src="/docs/ruan-she/computer-nework/uTools_1683875429976.png" loading="lazy" width="223" height="139" />
</picture>

</p>
</li>
<li>
<p>星型结构：</p>
<p><picture><img class="img-fluid " alt="星型结构" src="/docs/ruan-she/computer-nework/uTools_1683875460651.png" loading="lazy" width="198" height="164" />
</picture>

</p>
</li>
<li>
<p>环型结构：</p>
<p><picture><img class="img-fluid " alt="环型结构" src="/docs/ruan-she/computer-nework/uTools_1683875485913.png" loading="lazy" width="166" height="157" />
</picture>

</p>
</li>
<li>
<p>树型结构：</p>
<p><picture><img class="img-fluid " alt="树型结构" src="/docs/ruan-she/computer-nework/uTools_1683875508387.png" loading="lazy" width="184" height="141" />
</picture>

</p>
</li>
<li>
<p>分布式结构：</p>
<p><picture><img class="img-fluid " alt="分布式结构" src="/docs/ruan-she/computer-nework/uTools_1683875530047.png" loading="lazy" width="164" height="138" />
</picture>

</p>
</li>
</ul>
<hr>
<h1 id="网络互连设备" data-numberify>网络互连设备<a class="anchor ms-1" href="#网络互连设备"></a></h1>
<p>构建一个实际的网络需要网络的传输介质、网络互连设备作为支持。</p>
<h2 id="网络设备" data-numberify>网络设备<a class="anchor ms-1" href="#网络设备"></a></h2>
<p>按照ISO/OSI的分层将互连设备分类：</p>
<ul>
<li>
<p>物理层设备：</p>
<ul>
<li>中继器（Repeater）</li>
<li>集线器（Hub）：一种多端口的中继器。集线器不能自动寻址，但可以检测发送冲突。</li>
</ul>
</li>
<li>
<p>数据链路层设备：</p>
<ul>
<li>
<p>网桥（Bridge）</p>
</li>
<li>
<p>交换机（Switch）：一种多端口的网桥。</p>
<p>交换技术：</p>
<ul>
<li>端口交换</li>
<li>帧交换</li>
<li>信元交换</li>
</ul>
</li>
</ul>
</li>
<li>
<p>网络层设备：路由器（Router）</p>
<p><picture><img class="img-fluid " alt="路由器类型" src="/docs/ruan-she/computer-nework/uTools_1683956321797.png" loading="lazy" width="554" height="235" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="各种路由来源的管理距离" src="/docs/ruan-she/computer-nework/uTools_1683956407885.png" loading="lazy" width="554" height="163" />
</picture>

</p>
</li>
<li>
<p>应用层设备：网关（Gateway）</p>
</li>
</ul>
<h2 id="网络传输介质" data-numberify>网络传输介质<a class="anchor ms-1" href="#网络传输介质"></a></h2>
<p>传输介质是信号传输的媒体，常用的介质分为：</p>
<ul>
<li>有线介质：
<ul>
<li>双绞线（Twisted-Pair）</li>
<li>同轴电缆（Coaxial）</li>
<li>光纤（Fiber Optic）</li>
</ul>
</li>
<li>无线介质：
<ul>
<li>微波</li>
<li>红外线和激光</li>
<li>卫星通信</li>
</ul>
</li>
</ul>
<h2 id="网络组件" data-numberify>网络组件<a class="anchor ms-1" href="#网络组件"></a></h2>
<p>在一个局域网中，其基本组成部件为：</p>
<ul>
<li>服务器（Server）</li>
<li>客户端（Client）</li>
<li>网络设备</li>
<li>通信介质</li>
<li>网络软件</li>
</ul>
<hr>
<h1 id="网络协议与标准" data-numberify>网络协议与标准<a class="anchor ms-1" href="#网络协议与标准"></a></h1>
<p>计算机网络中的两个实体，想要成功通信，必须具有相同的语言，在计算机网络中称为协议（规程）。</p>
<p>网络协议指的是网络中的计算机与计算机进行通信时，为了能够实现数据的正常发送与接收必须要遵循的一些事先约定好的规则（标准或约定），在这些规程中明确规定了通信时的数据格式、数据传送时序以及相应的控制信息和应答信号等内容。</p>
<h2 id="网络标准" data-numberify>网络标准<a class="anchor ms-1" href="#网络标准"></a></h2>
<ul>
<li>
<p>电信标准：由国际电信联盟（International Telecommunication Union，ITU）发布的标准，有ITU-T的V系列、X系列等。</p>
</li>
<li>
<p>国际标准：由国际标准化组织（ISO）负责制定。</p>
<p>其他标准化组织：</p>
<ul>
<li>ANSI：美国国家标准研究所，ISO的美国代表。</li>
<li>NIST：美国国家标准和技术研究所，美国商业部的标准化机构。</li>
<li>IEEE：电气和电子工程师协会（Institute of Electrical and Electronics Engineers）。</li>
<li>ElA：电子工业协会（Electronic Industries Association）。</li>
</ul>
</li>
<li>
<p>Internet标准：特点是自发而非政府干预的，管理松散。</p>
<ul>
<li>有民间性质的协会ISOC（Internet Society）进行必要的协调与管理。</li>
<li>有网络信息中心（NIC）来管理IP地址，保证注册地址的唯一性。</li>
<li>ISOC设有nternet总体管理机构结构（IAB）。</li>
</ul>
</li>
</ul>
<h2 id="局域网协议" data-numberify>局域网协议<a class="anchor ms-1" href="#局域网协议"></a></h2>
<p>IEEE 802系列标准己被ISO采纳为国际标准。</p>
<p>局域网的基本组成主要有：</p>
<ul>
<li>网络服务器</li>
<li>网络工作站</li>
<li>网络适配器</li>
<li>传输介质</li>
</ul>
<p>决定局域网特性的主要技术有3个方面：</p>
<ul>
<li>用于传输数据的传输介质；</li>
<li>用于连接各种设备的拓扑结构；</li>
<li>用于共享资源的介质访问控制方法。</li>
</ul>
<h3 id="lan-模型" data-numberify>LAN 模型<a class="anchor ms-1" href="#lan-模型"></a></h3>
<p>在IEEE 802局域网（LAN）标准中只定义了两层：</p>
<ul>
<li>
<p>物理层</p>
</li>
<li>
<p>数据链路层：</p>
<p>根据LAN的特点把数据链路层分成：</p>
<ul>
<li>
<p>逻辑链路控制（Logical Link Control，LLC）子层：</p>
<p>实现网络层中的寻址、排序、流控和差错控制等功能</p>
</li>
<li>
<p>介质访问控制（Medium Access Control，MAC）子层</p>
</li>
</ul>
</li>
</ul>
<p><picture><img class="img-fluid " alt="LAN 层次与 ISO/OSI RM 的对应关系" src="/docs/ruan-she/computer-nework/uTools_1683879193227.png" loading="lazy" width="397" height="252" />
</picture>

</p>
<h3 id="以太网" data-numberify>以太网<a class="anchor ms-1" href="#以太网"></a></h3>
<p>以太网技术采用的“存取方法”是带冲突检测的载波监听多路访问协议（Carrier-Sense Multiple Access with Collision Detection，CSMA/CD）技术。</p>
<p>以太网主要包括3中类型：</p>
<ul>
<li>IEEE 802.3中定义的标准局域网，速度为10Mbps，传输介质为细同轴电缆；</li>
<li>IEEE 802.3u中定义的快速以太网，速度为100Mbps，传输介质为双绞线；</li>
<li>IEEE 802.3z中定义的千兆以太网，速度为1000Mbps，传输介质为光纤或双绞线。</li>
</ul>
<h3 id="令牌环网" data-numberify>令牌环网<a class="anchor ms-1" href="#令牌环网"></a></h3>
<p>IEEE 802.5的介质访问使用的是令牌环控制技术。</p>
<h3 id="fddi" data-numberify>FDDI<a class="anchor ms-1" href="#fddi"></a></h3>
<p>FDDI（Fiber Distributed Data Interface,光纤分布式数据接口）类似令牌环网的协议：</p>
<ul>
<li>用光纤作为传输介质；</li>
<li>采用一种新的编码技术，称为4B/5B编码。</li>
</ul>
<h3 id="无线局域网" data-numberify>无线局域网<a class="anchor ms-1" href="#无线局域网"></a></h3>
<p>无线局域网（WLAN）使用的是带冲突避免的载波侦听多路访问方法（CSMA/CA）。</p>
<h2 id="广域网协议" data-numberify>广域网协议<a class="anchor ms-1" href="#广域网协议"></a></h2>
<p>用于广域网的主要协议有：</p>
<ul>
<li>点对点协议（PPP）</li>
<li>数字用户线（xDSL）</li>
<li>数字专线</li>
<li>帧中继</li>
<li>异步传输模式</li>
<li>X.25 协议</li>
</ul>
<h2 id="tcpip-协议族" data-numberify>TCP/IP 协议族<a class="anchor ms-1" href="#tcpip-协议族"></a></h2>
<p>TCP/IP作为Internet的核心协议，被广泛应用于局域网和广域网中，成为事实上的国际标准。</p>
<p>TCP/IP基本特性的5个表现方面：</p>
<ul>
<li>
<p>逻辑编制：</p>
<p>每台连入Internet的计算机都会被分配一个逻辑地址，即IP地址。</p>
<p>IP地址包括：</p>
<ul>
<li>网络ID号：用来标识网络；</li>
<li>子网ID号：用来标识网络上的一个子网；</li>
<li>主机ID号：用来标识子网上的一台计算机。</li>
</ul>
</li>
<li>
<p>路由选择：定义路由器如何选择网络路径的协议，即IP数据包的路由选择。</p>
</li>
<li>
<p>域名解析：</p>
<p>域名：一种易记的字母式地址结构，也称为DNS（域名服务）名。</p>
<p>将域名映射为IP地址的操作即为域名解析。</p>
<blockquote>
<p>域名较稳定，而IP地址较易发生变化。</p>
</blockquote>
</li>
<li>
<p>错误检测：TPC/IP具有分组交换确保数据信息在网络上可靠传递的特性。</p>
</li>
<li>
<p>流量控制：检测网络系统信息中的信息流量，防止出现网络拥塞，也属于分组交换确保数据信息在网络上可靠传递。</p>
</li>
</ul>
<h3 id="tcpip-分层模型" data-numberify>TCP/IP 分层模型<a class="anchor ms-1" href="#tcpip-分层模型"></a></h3>
<p>TCP/IP分层模型由4个层次构成：</p>
<ol>
<li>应用层</li>
<li>传输层</li>
<li>网际层</li>
<li>网络接口层</li>
</ol>
<p><picture><img class="img-fluid " alt="TCP/IP 模型于 OSI 模型的对比" src="/docs/ruan-she/computer-nework/uTools_1683880948768.png" loading="lazy" width="697" height="339" />
</picture>

</p>
<h3 id="传输层协议-tcp-和-udp" data-numberify>传输层协议 TCP 和 UDP<a class="anchor ms-1" href="#传输层协议-tcp-和-udp"></a></h3>
<p>TCP和UDP都是应用于传输层的网络协议：</p>
<ul>
<li>
<p>TCP（Transmission Control Protocol，传输控制协议）：</p>
<p>在IP提供的不可靠数据服务的基础上为应用程序提供了可靠的、面向连接的、全双工的数据传输服务。</p>
<p>采用三次握手来确认建立和关闭连接是否成功。</p>
<p>TCP的功能或服务有：</p>
<ul>
<li>可靠传输</li>
<li>连接管理</li>
<li>差错校验和重传</li>
<li>流量控制：采用可变大小的滑动窗口协议</li>
<li>拥塞控制</li>
<li>端口寻址</li>
</ul>
</li>
<li>
<p>UDP（User Datagram Protocol，用户数据报协议）：</p>
<p>是一种不可靠的、无连接的协议，可以保证应用程序进程间的通信。</p>
<p>UDP上的应用有VoIP等。</p>
</li>
</ul>
<p>UDP的首部8B，TCP的首部20B，UDP相比TCP来说，开销较小。</p>
<p>TCP和UDP均提供了端口寻址功能。</p>
<h3 id="电子邮件协议-smtp-和-pop3" data-numberify>电子邮件协议 SMTP 和 POP3<a class="anchor ms-1" href="#电子邮件协议-smtp-和-pop3"></a></h3>
<p>SMTP和POP3都使用TCP端口传输和接收邮件。</p>
<p>SMTP：邮件发送协议；常用端口号：25。</p>
<p>SMTP只能传输SACII码文本和文字附件，可以使用MIME邮件扩充协议，添加其他类型的附件。</p>
<p>POP3：邮件接收协议；常用端口号：110。</p>
<p>POP3基于C/S模式（Client/Server模式，客户端/服务器模式）。</p>
<h3 id="arp-和-rarp-协议" data-numberify>ARP 和 RARP 协议<a class="anchor ms-1" href="#arp-和-rarp-协议"></a></h3>
<ul>
<li>
<p>ARP（Address Resolution Protocol，地址解析协议）：将IP地址转换为MAC地址（物理地址）。</p>
<p>IP到MAC地址的转换过程：</p>
<ol>
<li>查询ARP高速缓存中是否有该IP地址</li>
<li>如果该IP地址在ARP高速缓存中，便使用与它对应的MAC地址，将数据报发送给所需的物理网卡</li>
<li>如果ARP高速缓存中没有该IP地址，ARP便在局域网上<u>以广播方式发送一个ARP请求包</u></li>
<li>如果局域网上IP地址与某台计算机中的IP地址相一致，那么该计算机便生成一个ARP应答信息，信息中包含对应的MAC地址</li>
</ol>
</li>
<li>
<p>RARP（反地址解析协议）：将MAC地址转换为IP地址，主要用于无盘工作站。</p>
</li>
</ul>
<h3 id="动态主机配置协议-dhcp" data-numberify>动态主机配置协议 DHCP<a class="anchor ms-1" href="#动态主机配置协议-dhcp"></a></h3>
<p>DHCP协议的功能和作用是：</p>
<ul>
<li>集中的管理、分配IP地址；</li>
<li>使网络环境中的主机动态地获得IP地址、Gateway地址、DNS服务器地址等信息；</li>
<li>提升地址的使用率。</li>
</ul>
<p>DHCP客户端可以从DHCP服务器获得以下内容：</p>
<ul>
<li>本机IP地址</li>
<li>DNS服务器地址</li>
<li>DHCP服务器地址</li>
<li>默认网关的地址</li>
</ul>
<h3 id="无效地址" data-numberify>无效地址<a class="anchor ms-1" href="#无效地址"></a></h3>
<ul>
<li>
<p>Windows无效地址：169.254.X.X</p>
<p>169.254.X.X是Windows系统在DHCP信息租用失败时自动给客户机分配的IP地址。</p>
</li>
<li>
<p>Linux无效地址：0.0.0.0</p>
</li>
</ul>
<h3 id="icmp" data-numberify>ICMP<a class="anchor ms-1" href="#icmp"></a></h3>
<p>ICMP（Internet Control Message Protocol，Internet控制信息协议）是一种用于发送差错报文的协议。IP传送的数据报可能丢失、重复、延迟或乱序，而ICMP就是这样一种避免差错并在发生差错时报告的机制。</p>
<p>ICMP定义了5种差错报文：</p>
<ul>
<li>源抑制</li>
<li>超时</li>
<li>目的不可达</li>
<li>重定向</li>
<li>要求分段</li>
</ul>
<p>还定义了4种信息报文：</p>
<ul>
<li>回应请求</li>
<li>回应应答</li>
<li>地址屏蔽码请求</li>
<li>地址屏蔽码应答</li>
</ul>
<p>IP在需要一个差错报文时要使用ICMP，而ICMP也是利用IP来传送报文。</p>
<p>ICMP可以用于测试因特网，如ping工具就是利用ICMP报文进行目标是否可达测试。</p>
<hr>
<h1 id="internet-地址" data-numberify>Internet 地址<a class="anchor ms-1" href="#internet-地址"></a></h1>
<p>Internet地址格式主要有两种书写形式：</p>
<ul>
<li>域名</li>
<li>IP地址</li>
</ul>
<h2 id="域名" data-numberify>域名<a class="anchor ms-1" href="#域名"></a></h2>
<p>域名（Domain Name）：通常是用户所用主机的名字或地址。</p>
<p>域名格式由若干部分组成，每个部分又称子域名（用<code>.</code>分开，最少由两个字母或数字组成）。</p>
<p>通常，一个完整、通用的层次型主机域名由以下4个部分组成：</p>
<pre tabindex="0"><code>主机名.本地名.组名.最高层域名
</code></pre><p>也可以理解为：</p>
<pre tabindex="0"><code>主机名.域名.域名后缀.域名分类
</code></pre><p><picture><img class="img-fluid " alt="域名分类及其含义" src="/docs/ruan-she/computer-nework/uTools_1683894526429.png" loading="lazy" width="554" height="180" />
</picture>

</p>
<p>如果一个主机所在的网络级别较高，它可能拥有的域名仅包含3部分：</p>
<pre tabindex="0"><code>本地名.组名.最高层域名
</code></pre><h2 id="url" data-numberify>URL<a class="anchor ms-1" href="#url"></a></h2>
<p>URL即统一资源定位器（统一资源定位符），它的形式如下：</p>
<pre tabindex="0"><code>协议名://主机名.域名.域名后缀.域名分类/目录/网页文件
</code></pre><h2 id="ip-地址" data-numberify>IP 地址<a class="anchor ms-1" href="#ip-地址"></a></h2>
<p>IP地址：Internet中的主机地址实际上是用IP地址来唯一标识的。</p>
<p>IP地址有两种：</p>
<ul>
<li>IPv4</li>
<li>IPv6</li>
</ul>
<blockquote>
<p>通常IP地址是指IPv4。</p>
</blockquote>
<h3 id="ipv4" data-numberify>IPv4<a class="anchor ms-1" href="#ipv4"></a></h3>
<p>每个IPv4地址都由4个小于256的数字组成（每个数字8位，共32位），数字之间用<code>.</code>分开，可分为5类：</p>
<p><picture><img class="img-fluid " alt="IPv4各类地址分配方案" src="/docs/ruan-she/computer-nework/uTools_1683896541328.png" loading="lazy" width="484" height="412" />
</picture>

</p>
<p>在IPv4中，全<code>0</code>代表的是网络，全<code>1</code>代表的是广播。</p>
<p>IPv4能表示的地址个数为：</p>
<p>$$
2^{32} \approx 40亿
$$</p>
<h3 id="子网掩码" data-numberify>子网掩码<a class="anchor ms-1" href="#子网掩码"></a></h3>
<p>网络软件和路由器使用<strong>子网掩码</strong>（Subnet Mask）来识别报文是仅存放在网络内部还是被路由转发到其他地方。</p>
<p>子网掩码是用来指明特定的IP地址中的网络号和主机号部分。子网掩码的格式与IP地址相同：</p>
<ul>
<li>所有对应网络号的部分用<code>1</code>填上；</li>
<li>所有对应主机号的部分用<code>0</code>填上。</li>
</ul>
<p><picture><img class="img-fluid " alt="IP地址类默认的子网掩码" src="/docs/ruan-she/computer-nework/uTools_1683897195900.png" loading="lazy" width="912" height="144" />
</picture>

</p>
<h3 id="ipv6" data-numberify>IPv6<a class="anchor ms-1" href="#ipv6"></a></h3>
<p>IPv6具有长达128位的地址空间，可以彻底解决IPv4地址不足的问题。</p>
<p>IPv6理论上能表示的地址个数：</p>
<p>$$
2^{128} = 3.4 \times 10^{38}
$$</p>
<blockquote>
<p>在想象得到的将来，IPv6的地址空间是不可能用完的。</p>
</blockquote>
<h2 id="dns-域名解析" data-numberify>DNS 域名解析<a class="anchor ms-1" href="#dns-域名解析"></a></h2>
<p>Internet中的域名地址和IP地址是等价的，它们之间是通过域名服务（DNS域名解析）来完成映射变换的。</p>
<p>DNS是一种分布式地址信息数据库系统，服务器中包含整个数据库的某部分信息，并供客户查询。DNS允许局部控制整个数据库的某些部分，但数据库的每一部分都可通过全网查询得到。</p>
<p>域名系统采用的是客户端/服务器模式，整个系统由以下两部分组成：</p>
<p>解析器和域名服务器组成。</p>
<ul>
<li>
<p>解析器（客户端）：</p>
<p>负责：</p>
<ul>
<li>查询域名服务器</li>
<li>解释从服务器返回来的应答</li>
<li>将信息返回给请求方</li>
</ul>
</li>
<li>
<p>域名服务器（服务器）：通常保存着一部分域名空间的全部信息，这部分域名空间称为区（Zone）。</p>
<p>一个域名服务器可以管理一个或多个区。</p>
<p>域名服务器可以分为：</p>
<ul>
<li>主服务器</li>
<li>Caching Only服务器</li>
<li>转发服务器（Forwarding Server）</li>
</ul>
<p>主域名服务器在接收到域名请求后，查询顺序如下：</p>
<ol>
<li>本地缓存：缓存在该服务器中的域名信息。如果先前有多个用户对该域名进行访问，域名服务器会根据需要对该域名的信息进行缓存，以便加快后续用户访问的速度。</li>
<li>本地<code>hosts</code>文件：存储在服务器中的一种记录域名与其对应IP的文件。在PC中也有这样的文件存在。</li>
<li>本地数据库：存储域名信息的数据库。</li>
<li>转发域名服务器：如果用户访问的域名在以上内容中都不存在时，域名服务器会根据访问的域名，到对应的其他域名服务器中查询。</li>
</ol>
</li>
</ul>
<p>用户A查找用户B时，域名系统工作过程如：</p>
<ol>
<li>解析器向本地域名服务器发出请求查阅用户B的域名。</li>
<li>本地域名服务器向最高层域名服务器发出查询地址的请求。</li>
<li>最高层域名服务器返回给本地域名服务器一个IP地址。</li>
<li>本地域名服务器向组域名服务器发出查询地址的请求。</li>
<li>组域名服务器返回给本地域名服务器一个IP地址。</li>
<li>本地服务器向刚返回的域名服务器发出查询域名地址请求。</li>
<li>P地址返回给本地域名服务器。</li>
<li>本地域名服务器将该地址返回给解析器。</li>
</ol>
<p>因此，在访问主机的时候只需要知道域名，通过DNS服务器将域名变换为IP地址。</p>
<p>DNS所用的是UDP端口，端口号为53。</p>
<p>在浏览器中访问网站时，通常是使用服务方的域名进行访问。在计算机上使用域名访问内容，本地计算机并不会直接去DNS服务器查询，而是会先在本地查询该域名。计算机使用域名访问时，域名查询的顺序是：</p>
<ol>
<li>本地<code>hosts</code>文件：存储在计算机电脑中的一个文件，例如<code>localhost</code>就是在本地<code>hosts</code>文件中与本地IP<code>127.0.0.1</code>对应。</li>
<li>本地DNS缓存：先前访问的域名与其对应的IP等信息会被计算机缓存在本地中，如果本地中有该域名的缓存，那便无须访问DNS服务器。</li>
<li>本地DNS服务器。</li>
<li>根域名服务器。</li>
</ol>
<p>当在Wb浏览器的地址栏中输入某URL并按下回车，则处理过程如下：</p>
<ol>
<li>对URL进行DNS域名解析，得到对应的IP地址；</li>
<li>根据这个IP，找到对应的服务器，发起TCP连接，进行三次握手：</li>
<li>建立TCP连接后发起HTTP请求；</li>
<li>服务器响应HTTP请求，浏览器得到HTML代码；</li>
<li>通信完成，断开TCP连接；</li>
<li>浏览器解析HTML代码，并请求HTML代码中的资源（如s、css图片等）；</li>
<li>浏览器将页面呈现给用户。</li>
</ol>
<hr>
<h1 id="无线通信技术" data-numberify>无线通信技术<a class="anchor ms-1" href="#无线通信技术"></a></h1>
<p>流行的无线通信技术有WiFi、蓝牙等。</p>
<p>其中，蓝牙覆盖范围最小、通信距离最短。</p>
<hr>
<h1 id="ipconfig-命令" data-numberify>ipconfig 命令<a class="anchor ms-1" href="#ipconfig-命令"></a></h1>
<p>ipconfig是Windows中，调试计算机网络常用的命令（软件），类似于Linux中的ifconfig。</p>
<p>ipconfig命令的用法如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">无参数</td>
<td style="text-align:left">显示所有网络适配器的IP地址、子网掩码和缺省网关值</td>
<td style="text-align:left"><code>ipconfig</code></td>
</tr>
<tr>
<td style="text-align:center"><code>/all</code></td>
<td style="text-align:left">显示所有网络适配器的完整TCP/IP配置信息，包括DHCP服务是否已启动</td>
<td style="text-align:left"><code>ipconfig /all</code></td>
</tr>
<tr>
<td style="text-align:center"><code>/displaydns</code></td>
<td style="text-align:left">显示本地DNS内容</td>
<td style="text-align:left"><code>ipconfig /displaydns</code></td>
</tr>
<tr>
<td style="text-align:center"><code>/flushdns</code></td>
<td style="text-align:left">清除本地DNS缓存内容</td>
<td style="text-align:left"><code>ipconfig /flushdns</code></td>
</tr>
<tr>
<td style="text-align:center"><code>/registerdns</code></td>
<td style="text-align:left">DNS客户端手工向服务器进行注册</td>
<td style="text-align:left"><code>ipconfig /registerdns</code></td>
</tr>
<tr>
<td style="text-align:center"><code>/release</code></td>
<td style="text-align:left">DHCP客户端手工释放IP地址</td>
<td style="text-align:left"><code>ipconfig /release</code></td>
</tr>
<tr>
<td style="text-align:center"><code>/renew</code></td>
<td style="text-align:left">DHCP客户端手工向服务器刷新请求（重新申请IP地址）</td>
<td style="text-align:left"><code>ipconfig /renew</code></td>
</tr>
</tbody>
</table>
<hr>
<h1 id="网络信息安全" data-numberify>网络信息安全<a class="anchor ms-1" href="#网络信息安全"></a></h1>
<p>网络存在的威胁主要表现在以下5方面：</p>
<ul>
<li>非授权访问</li>
<li>信息泄露或丢失</li>
<li>破坏数据完整性</li>
<li>拒绝服务攻击</li>
<li>利用网络传播病毒</li>
</ul>
<p>网络安全控制技术主要有：</p>
<ul>
<li>防火墙技术</li>
<li>加密技术</li>
<li>用户识别技术</li>
<li>访问控制技术</li>
<li>网络反病毒技术</li>
<li>网络安全漏洞扫描技术</li>
<li>入侵检测技术</li>
</ul>
<blockquote>
<p>要保护网络安全除了网络安全措施（使用网络安全控制技术）之外，还有：</p>
<ul>
<li>物理线路安全措施：例如设备防雷。</li>
<li>系统安全措施：例如漏洞发现与补丁管理。</li>
</ul>
</blockquote>
<h2 id="防火墙技术" data-numberify>防火墙技术<a class="anchor ms-1" href="#防火墙技术"></a></h2>
<p>防火墙（Firewall）是<u>建立在内外网络边界上的过滤封锁机制</u>，它认为：</p>
<ul>
<li><u>内部网络是安全和可信赖的</u>；</li>
<li><u>外部网络是不安全和不可信赖的</u>。</li>
</ul>
<p>防火墙是网络安全体系的基础和核心控制设施，同时也承担着繁重的通信任务。</p>
<p>防火墙的作用：<u>防止不希望的、未经授权地进出被保护的内部网络。</u></p>
<p>防火墙对通过受控干线的任何通信行为进行安全处理，如：</p>
<ul>
<li><strong>控制</strong></li>
<li><strong>审计</strong></li>
<li><strong>报警</strong></li>
<li><strong>反应</strong></li>
</ul>
<p>防火墙技术经历了三个发展阶段：</p>
<ol>
<li>包过滤防火墙</li>
<li>应用代理网关防火墙</li>
<li>状态检测技术防火墙</li>
</ol>
<h3 id="包过滤防火墙" data-numberify>包过滤防火墙<a class="anchor ms-1" href="#包过滤防火墙"></a></h3>
<p>包过滤防火墙一般有一个包检查块（通常称为包过滤器），数据包过滤可以根据数据包头中的各项信息来控制以下内容之间的相互访问：</p>
<ul>
<li>站点与站点</li>
<li>站点与网络</li>
<li>网络与网络</li>
</ul>
<p>包过滤防火墙无法控制传输数据的内容，因为内容是应用层数据，而<u>包过滤器处在网络层和数据链路层（即TCP和P层）之间</u>。</p>
<p>通过检查模块，防火墙能够拦截和检查所有出站和进站的数据，其过程如下：</p>
<ol>
<li>打开包</li>
<li>取出包头</li>
<li>根据包头的信息确定该包是否符合包过滤规则</li>
<li>对过滤进行记录</li>
<li>对于不符合规则的包，进行报警并丢弃该包</li>
</ol>
<p>过滤型防火墙的<strong>优点</strong>：</p>
<ul>
<li><u>对用户完全透明，速度较快</u>（通常直接转发报文）；</li>
<li>对每条传入和传出网络的包<u>实行低水平控制</u>；</li>
<li><u>每个IP包的字段都被检查</u>，例如：
<ul>
<li><strong>源地址，</strong></li>
<li><strong>目的IP地址，</strong></li>
<li><strong>协议，</strong></li>
<li><strong>端口；</strong></li>
</ul>
</li>
<li>可以识别和丢弃带欺骗性源IP地址的包；</li>
<li>包过滤防火墙是两个网络之间访问的唯一来源；</li>
<li>包过滤通常被包含在路由器数据包中，所以不需要额外的系统来处理这个特征。</li>
</ul>
<p>过滤型防火墙的<strong>缺点</strong>：</p>
<ul>
<li><u>不能防范黑客攻击</u>，因为网管不可能区分出可信网络与不可信网络的界限；</li>
<li><u>不支持应用层协议</u>，因为它不识别数据包中的应用层协议，访问控制粒度太粗糙；</li>
<li><u>不能处理新的安全威胁。</u></li>
</ul>
<h3 id="应用代理网关防火墙" data-numberify>应用代理网关防火墙<a class="anchor ms-1" href="#应用代理网关防火墙"></a></h3>
<p>应用代理网关防火墙<u>彻底隔断内网与外网的直接通信</u>：<u>内网用户对外网的访问变成防火墙对外网的访问</u>，然后再由防火墙转发给内网用户。<u>所有通信都必须经应用层代理软件转发，访问者任何时候都不能与服务器建立直接的TCP连接</u>，应用层的协议会话过程必须符合代理的安全策略要求。</p>
<p>应用代理网关的优点：</p>
<ul>
<li>可以检查应用层、传输层和网络层的协议特征；</li>
<li>对数据包的检测能力比较强。</li>
</ul>
<p>应用代理网关的缺点：</p>
<ul>
<li>难以配置；</li>
<li>处理速度非常慢。</li>
</ul>
<h3 id="状态检测技术防火墙" data-numberify>状态检测技术防火墙<a class="anchor ms-1" href="#状态检测技术防火墙"></a></h3>
<p>状态检测技术防火墙<u>结合了代理防火墙的安全性和包过滤防火墙的高速度等优点</u>，在不损失安全性的基础上，提高了代理防火墙的性能。</p>
<h2 id="入侵检测与防御" data-numberify>入侵检测与防御<a class="anchor ms-1" href="#入侵检测与防御"></a></h2>
<p>入侵检测系统（Intrusion Detection System，DS）作为防火墙之后的第二道安全屏障，通过从计算机系统或网络中的若干关键点收集网络的安全日志、用户的行为、网络数据包和审计记录等信息并对其进行分析，从中检查是否有违反安全策略的行为和遭到入侵攻击的迹象。入侵检测系统根据检测结果，自动做出响应。</p>
<p>入侵检测系统有效的弥补了防火墙系统对网络上的入侵行为无法识别和检测的不足。</p>
<p>入侵防御系统（IPS）是在入侵检测系统的基础上发展起来的，入侵防御系统不仅能够检测到网络中的攻击行为，同时主动的对攻击行为能够发出响应，对攻击进行防御。两者相较，主要存在以下区别：</p>
<ul>
<li>在网络中的部署位置的不同；</li>
<li>入侵响应能力的不同。</li>
</ul>
<h2 id="网络攻击" data-numberify>网络攻击<a class="anchor ms-1" href="#网络攻击"></a></h2>
<p>网络攻击是攻击者针对特定目标实施的有特定目的的活动，攻击目标对于攻击者是个黑盒子。</p>
<p>常见的网络攻击手段有：</p>
<ul>
<li>
<p>拒绝服务攻击（Dos攻击）：目的是使计算机或网络无法提供正常的服务。</p>
<p>拒绝服务攻击是不断向计算机发起请求来实现的。</p>
</li>
<li>
<p>重放攻击：攻击者发送一个目的主机已经接受过的报文来达到攻击目的。</p>
<p>攻击者利用网络监听或者其他方式盗取认证凭据，之后再重新发送给认证服务器。</p>
<p>重放攻击主要用于身份认证过程，目的是破坏认证的正确性。</p>
</li>
<li>
<p>口令入侵攻击：使用某些合法用户的账号和口令登录到目的主机，然后再实施攻击活动。</p>
</li>
<li>
<p>特洛伊木马：被伪装成程序或游戏，当用户下载了带有木马的软件或附件时，这个程序就会向黑客发起连接请求，建立连接后黑客就实施攻击活动。</p>
</li>
<li>
<p>端口欺骗攻击：采用端口扫描找到系统漏洞从而实施攻击。</p>
</li>
<li>
<p>网络监听：攻击者可以接收某一网段在同一条物理通道上传输的所有信息，使用网络监听可以轻松截取包括账号和口令在内的信息资料。</p>
</li>
<li>
<p>IP欺骗攻击：产生的IP数据包为伪造的源IP地址，以便冒充其他系统或发件人的身份。</p>
</li>
<li>
<p>SQL注入攻击：是黑客对数据库进行攻击的常用手段之一。</p>
<p>SQL注入产生的原因：</p>
<ul>
<li>没有对用户输入数据的合法性进行判断，使应用程序存在安全隐患。</li>
<li>攻击者可以提交一段数据库查询代码，根据程序返回的结果，获得某些他想得知的数据，</li>
<li>获取数据库的权限，就可获取用户账号和口令信息，以及对某些数据修改等。</li>
</ul>
</li>
</ul>
<p>入侵检测技术：</p>
<ul>
<li>专家系统</li>
<li>模型检测</li>
<li>简单匹配</li>
</ul>
<h2 id="病毒" data-numberify>病毒<a class="anchor ms-1" href="#病毒"></a></h2>
<p>计算机病毒（Computer Virus）是指编制者在计算机程序中插入的<u>破坏计算机功能或者数据的代码</u>，能影响计算机使用，<u>能自我复制</u>的一组计算机<u>指令或者程序代码</u>。</p>
<p>计算机病毒的特征包括：</p>
<ul>
<li>传播性</li>
<li>隐蔽性</li>
<li>感染性</li>
<li>潜伏性</li>
<li>触发性</li>
<li>破坏性</li>
</ul>
<p>常见的病毒类型有：</p>
<ul>
<li>
<p>Worm（蠕虫病毒）：</p>
<ul>
<li>欢乐时光，</li>
<li>熊猫烧香，</li>
<li>红色代码，</li>
<li>爱虫病毒，</li>
<li>震网。</li>
</ul>
</li>
<li>
<p>Trojan（特洛伊木马）：通过内部发起连接与外部主机建立联系，由外部主机控制并盗取用户信息。</p>
<p>计算机感染特洛伊木马后的典型线型是<u>有未知程序试图建立网络连接</u>。</p>
<p>常见的木马如冰河。</p>
</li>
<li>
<p>Backdoor（后门病毒）。</p>
</li>
<li>
<p>Macro（宏病毒）：</p>
<p>宏病毒感染的对象主要是<u>文本文档</u>、<u>电子表格</u>等。</p>
</li>
</ul>
<h2 id="网络安全" data-numberify>网络安全<a class="anchor ms-1" href="#网络安全"></a></h2>
<ul>
<li>
<p>SSL（Secure Socket Layer，安全套接层）：传输层安全协议，用于实现Web安全通信。</p>
<p>SSL常用端口号为443。</p>
</li>
<li>
<p>TLS（Transport Layer Security，传输层安全协议：建立在SSL3.0协议规范之上，是SSL3.0的后续版本。</p>
</li>
<li>
<p>SSH（Secure Shell）：终端设备与远程站点之间建立安全连接的协议，是建立在应用层和传输层基础上的安全协议。</p>
<p>SSH是专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。</p>
<p>SSH最初是UNIX上的程序，后来又迅速扩展到其他操作平台（如Linux、Windows）。</p>
</li>
<li>
<p>HTTPS（Hyper Text Transfer Protocol over Secure Socket Layer）：是以安全为目标的HTTP通道，即使用SSL加密算法的HTTP。</p>
</li>
<li>
<p>MME（Multipurpose Internet Mail Extensions，多用途互联网邮件扩展类型）：是一个互联网标准，扩展了电子邮件标准。</p>
</li>
<li>
<p>PGP（Pretty Good Privacy，优良保密协议）：是一个基于RSA公匙加密体系的邮件加密软件。</p>
<p>可以用它对邮件保密以防止非授权者阅读，还能对邮件加上数字签名从而使收信人可以确认邮件的发送方。</p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>软件工程篇</title>
      <link>/docs/ruan-she/software-engineering/</link>
      <pubDate>Mon, 08 May 2023 10:02:34 +0000</pubDate>
      
      <guid>/docs/ruan-she/software-engineering/</guid>
      <description><![CDATA[概述 软件工程是指应用计算机科学、数学及管理科学等原理，以工程化的原则和方法来解决软件问题的工程，其目的是提高软件生产率、提高软件质量、降低软]]></description>
      <content:encoded><![CDATA[<h1 id="概述" data-numberify>概述<a class="anchor ms-1" href="#概述"></a></h1>
<p>软件工程是指应用计算机科学、数学及管理科学等原理，以工程化的原则和方法来解决软件问题的工程，其目的是提高软件生产率、提高软件质量、降低软件成本。</p>
<p>软件工程学：</p>
<ul>
<li>软件开发技术
<ul>
<li>软件开发方法学</li>
<li>软件工具</li>
<li>软件工程环境</li>
</ul>
</li>
<li>软件工程管理
<ul>
<li>软件工程管理学</li>
<li>软件经济学</li>
</ul>
</li>
</ul>
<p>软件工程涉及软件开发、维护、管理等多方面的原理、方法、工具与环境。</p>
<h2 id="计算机软件" data-numberify>计算机软件<a class="anchor ms-1" href="#计算机软件"></a></h2>
<p>计算机软件是指：</p>
<ul>
<li>
<p>计算机系统中的程序：计算任务的处理对象和处理规则的描述。</p>
<ul>
<li>
<p>计算任务：任何以计算机为处理工具的任务。</p>
</li>
<li>
<p>处理对象：</p>
<ul>
<li>数据：如数字、文字、图形、图像、声音等，它们只是表示，而无含义。</li>
<li>信息：数据及有关的含义。</li>
</ul>
</li>
<li>
<p>处理规则：一般指处理的动作和步骤。</p>
</li>
</ul>
</li>
<li>
<p>程序文档：文档是为了便于了解程序所需的阐述性资料。</p>
</li>
</ul>
<p>按照软件的应用领域，可以将计算机软件分为十大类：</p>
<ul>
<li>系统软件</li>
<li>应用软件</li>
<li>工程/科学软件</li>
<li>嵌入式软件</li>
<li>产品线软件</li>
<li>Web应用</li>
<li>人工智能软件</li>
<li>开放计算</li>
<li>网络资源</li>
<li>开源软件</li>
</ul>
<h2 id="软件生存周期" data-numberify>软件生存周期<a class="anchor ms-1" href="#软件生存周期"></a></h2>
<ol>
<li>可行性分析与项目开发计划</li>
<li>需求分析</li>
<li>概要设计</li>
<li>详细设计</li>
<li>编码</li>
<li>测试</li>
<li>维护</li>
</ol>
<hr>
<h1 id="软件过程模型" data-numberify>软件过程模型<a class="anchor ms-1" href="#软件过程模型"></a></h1>
<p>软件开发中所遵循的路线图（一系列可预测的步骤）称为“软件过程”。过程是活动的集合，活动是任务的集合。</p>
<p>软件过程有3层含义：</p>
<ul>
<li>个体含义</li>
<li>整体含义</li>
<li>工程含义</li>
</ul>
<h2 id="能力成熟度模型" data-numberify>能力成熟度模型<a class="anchor ms-1" href="#能力成熟度模型"></a></h2>
<p>软件过程能力成熟度模型（Capability Maturity Model of Software，CMM）是对软件组织进化阶段的描述，随着软件组织定义、实施、测量、控制和改进其软件过程，软件组织的能力经过这些阶段逐步提高。</p>
<p>能力成熟度模型使软件组织能够较容易地确定其当前过程的成熟度并识别其软件过程执行中的薄弱环节，确定对软件质量和过程改进最为关键的几个问题，从而形成对其过程的改进策略。</p>
<p>CMM将软件过程改进分为以下5个成熟度级别：</p>
<ol>
<li>
<p><strong>初始级</strong>（Initial）：</p>
<p>软件过程的特点是杂乱无章，有时甚至很混乱，几乎没有明确定义的步骤。</p>
</li>
<li>
<p><strong>可重复级</strong>（Repeatable）：</p>
<p>建立了基本的项目管理过程和实践来跟踪项目费用、进度和功能特性；建立了有必要的过程准则来重复以前在同类项目中的成功。</p>
</li>
<li>
<p><strong>已定义级</strong>（Defined）：</p>
<p>管理和工程两方面的软件过程已经文档化、标准化，并综合成整个软件开发组织的标准软件过程。所有项目都采用根据实际情况修改后得到的标准软件过程来开发和维护软件。</p>
</li>
<li>
<p><strong>己管理级</strong>（Managed）：</p>
<p>制定了软件过程和产品质量的详细度量标准。软件过程和产品质量都被开发组织的成员所理解和控制。</p>
</li>
<li>
<p><strong>优化级</strong>（Optimized）：</p>
<p>加强了定量分析，通过来自过程质量反馈和来自新观念、新技术的反馈使过程能不断持续地改进。</p>
</li>
</ol>
<h2 id="能力成熟度模型集成" data-numberify>能力成熟度模型集成<a class="anchor ms-1" href="#能力成熟度模型集成"></a></h2>
<p>能力成熟度模型集成（CMMI）是若干过程模型的综合和改进，是支持多个工程学科和领域的、系统的、一致的过程改进框架，能适应现代工程的特点和需要，能提高过程的质量和工作效率</p>
<p>CMMI提供了两种表示方法：</p>
<ul>
<li>
<p><strong>阶段式模型</strong>：</p>
<p>结构类以于CMM，它<u>关注组织的成熟度</u>。</p>
<p>CMMI-SE/SW/IPPD 1.1版中有5个成熟度等级：</p>
<ol>
<li><strong>初始的</strong>：过程不可预测且缺乏控制。</li>
<li><strong>己管理的</strong>：过程为项目服务。</li>
<li><strong>已定义的</strong>：过程为组织服务。</li>
<li><strong>定量管理的</strong>：过程已度量和控制。</li>
<li><strong>优化的</strong>：集中于过程改进。</li>
</ol>
</li>
<li>
<p><strong>连续式模型</strong>：</p>
<p>关注每个<u>过程域的能力</u>，一个组织对不同的过程域可以达到不同的过程域<strong>能力等级</strong>（Capability Level，<strong>CL</strong>）。</p>
<p>能力等级包括：</p>
<ul>
<li>共性目标</li>
<li>共性实践</li>
</ul>
<p>能力等级可以独立地应用于任何单独的过程域，任何一个能力等级都必须满足比它等级低的能力等级的所有准则。</p>
<p>CMMI中包括6个过程域能力等级（0~5）：</p>
  <ol start="0">
  <li>
      $CL_0$（未完成的）：
      <br>
      过程域<u>未执行</u>或<u>未得到$CL_1$中定义的所有目标</u>。
  </li>
  <li>
      $CL_1$（已执行的）：
      <br>
      其共性目标是<u>过程将可标识的输入工作产品转换成可标识的输出工作产品</u>，以<u>实现支持过程域的特定目标</u>。
      <br>
      关注于<u>过程域的特定目标的完成</u>。
  </li>
  <li>
      $CL_2$（已管理的）：
      <br>
      其共性目标集中于<u>已管理的过程的制度化</u>。
      <br>
      关注于<u>针对单个过程实例的能力</u>。
  </li>
  <li>
      $CL_3$（已定义级的）：
      <br>
      其共性目标集中于<u>已定义的过程的制度化</u>。
      <br>
      关注于<u>过程的组织级标准化和部署</u>。
  </li>
  <li>
      $CL_4$（定量管理的）：
      <br>
      其共性目标集中于<u>可定量管理的过程的制度化</u>。
      <br>
      使用测量和质量保证来控制和改进过程域，建立和使用关于质量和过程执行的定量目标作为管理准则。
  </li>
  <li>
      $CL_5$（优化的）：
      <br>
      使用量化（统计学）手段改变和优化过程域，以满足客户要求的改变和持续改进计划中的过程域的功效。
      <br>
      其共性目标集中于<u>优化的过程的制度化</u>，表明<u>过程得到很好地执行</u>且<u>持续得到改进</u>。
  </li>
  </ol>
</li>
</ul>
<h2 id="瀑布模型" data-numberify>瀑布模型<a class="anchor ms-1" href="#瀑布模型"></a></h2>
<p>瀑布模型（Waterfall Model）是<u>将软件生存周期中的各个活动规定为依线性顺序连接的若干阶段的模型</u>（它规定了<u>由前至后、相互衔接的固定次序，如同瀑布流水逐级下落</u>），包括：</p>
<ul>
<li><strong>需求分析</strong>：</li>
<li><strong>设计</strong></li>
<li><strong>编码</strong></li>
<li><strong>测试</strong></li>
<li><strong>运行与维护</strong>（运维）</li>
</ul>
<p><picture><img class="img-fluid " alt="瀑布模型" src="/docs/ruan-she/software-engineering/uTools_1683592633324.png" loading="lazy" width="380" height="289" />
</picture>

</p>
<p>瀑布模型假设：<u>一个待开发的系统需求是完整的、简明的、一致的</u>，而且<u>可以先于设计和实现完成之前产生</u>。</p>
<p>瀑布模型：</p>
<ul>
<li>
<p>优点：</p>
<ul>
<li>容易理解；</li>
<li>管理成本低；</li>
<li>每个阶段都有对应的成果产物；</li>
<li>各个阶段有明显的界限划分和顺序需求；</li>
<li>强调开发的阶段性早期计划及需求调查和产品测试。</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li>
<p>需要客户能够完整、正确和清晰地表达自己的需要；</p>
</li>
<li>
<p>在开始的两个或3个阶段中，很难评估真正的进度状态；</p>
</li>
<li>
<p>当接近项目结束时，出现了大量的集成和测试工作；</p>
</li>
<li>
<p>直到项目结束之前，都不能演示系统的能力；</p>
</li>
<li>
<p>一旦发生错误，整个项目要推到重新开始。</p>
<p>需求或设计中的错误往往只有到了项目后期才能够被发现，对于项目风险的控制能力较弱，从而导致项目常常延期完成，开发费用超出预算。</p>
</li>
</ul>
</li>
</ul>
<p>瀑布模式适合用于：</p>
<ul>
<li><u>开发需求明确</u>的，<u>需求大致固定且不会随意变更</u>的系统；</li>
<li>开发人员对软件的应用领域很熟悉；</li>
<li>开发工作对用户参与的要求很低。</li>
</ul>
<h2 id="v模型" data-numberify>V模型<a class="anchor ms-1" href="#v模型"></a></h2>
<p>V模型式是瀑布模型的一个变体，<u>描述了质量保证活动和沟通、建模相关活动以及早期构建相关的活动之间的关系</u>。</p>
<p><picture><img class="img-fluid " alt="V模型" src="/docs/ruan-she/software-engineering/uTools_1683593148604.png" loading="lazy" width="492" height="423" />
</picture>

</p>
<ul>
<li>
<p>设计、开发：随着软件团队工作沿着<u>V模型左侧步骤向下推进</u>，<u>基本问题需求逐步细化</u>，形成问题及解决方案的技术描述。</p>
</li>
<li>
<p>测试：一旦编码结束，团队沿着<u>V模型右侧的步骤向上推进</u>。</p>
<p>其实际上是<u>执行了一系列测试</u>（质量保证活动），这些测试<u>验证了团队沿着V模型左侧步骤向下推进过程中所生成的每个模型</u>。</p>
</li>
</ul>
<p>V模型是一种测试的开发模型，强调测试贯穿项目的始终，而不是集中在测试阶段。V模型提供了一种将验证确认活动（测试）应用于早期软件工程工作中的方法。</p>
<h2 id="增量模型" data-numberify>增量模型<a class="anchor ms-1" href="#增量模型"></a></h2>
<p>增量模型（Incremental Model）融合了<u>瀑布模型的基本成分</u>和<u>原型实现的迭代特征</u>。</p>
<p>增量模型<u>假设可以将需求分段为一系列增量产品，每一增量可以分别开发</u>。该模型采用<u>随着日程时间的进展而交错的线性序列</u>，每一个线性序列产生软件的一个可发布的“增量”：</p>
<p><picture><img class="img-fluid " alt="增量模型" src="/docs/ruan-she/software-engineering/uTools_1683593818710.png" loading="lazy" width="747" height="325" />
</picture>

</p>
<ul>
<li>从分析到测试为一个增量的过程（线性序列）。</li>
<li><u>核心功能先完成</u>：第1个增量往往是核心的产品。</li>
<li>客户对每个增量的使用和评估都作为下一个增量发布的新特征和功能，这个过程在每一个增量发布后不断重复，直到产生了最终的完善产品。</li>
<li>增量模型强调<u>每一个增量均发布一个可操作的产品</u>。</li>
</ul>
<p>增量模型作为<u>瀑布模型的一个变体</u>，具有瀑布模型的所有优点。此外，它还有以下优点：</p>
<ul>
<li><u>第一个可交付版本所需要的成本和时间很少</u>；</li>
<li><u>开发由增量表示的小系统所承担的风险不大</u>；</li>
<li>由于很快发布了第一个版本，因此<u>可以减少用户需求的变更</u>；</li>
<li>优先级高的功能先交付，使得重要的功能经历更多的测试。</li>
<li>运行增量投资，即在项目开始时，可以仅对一个或两个增量投资。</li>
</ul>
<p>缺点：</p>
<ul>
<li>如果没有对用户的变更要求进行规划，那么<u>产生的初始增量可能会造成后来增量的不稳定</u>；</li>
<li>如果需求不像早期思考的那样稳定和完整，那么<u>一些增量就可能需要重新开发、重新发布</u>；</li>
<li><u>管理发生的成本、进度和配置的复杂性可能会超出组织的能力</u>。</li>
</ul>
<p>量模型适合用于：</p>
<ul>
<li>需要快速构造可运行的产品的项目（对完成期限严格要求的产品）；</li>
<li>进行已有产品升级或新版本开发；</li>
<li>对所开发的领域比较熟悉而且已有原型系统。</li>
</ul>
<h2 id="演化模型" data-numberify>演化模型<a class="anchor ms-1" href="#演化模型"></a></h2>
<p>演化模型（Evolutionary Model）演化模型是<u>迭代的过程模型</u>，使得软件开发人员能够<u>逐步开发出更完整的软件版本</u>。演化模型特别<u>适用于对软件需求缺乏准确认识的情况</u>。</p>
<p>典型的演化模型有原型模型和螺旋模型等。</p>
<h3 id="原型模型" data-numberify>原型模型<a class="anchor ms-1" href="#原型模型"></a></h3>
<p><u>并非所有的需求都能够预先定义</u>。大量的实践表明，在<u>开发初期很难得到一个完整的、准确的需求规格说明</u>。原因有：</p>
<ul>
<li><u>客户往往不能准确地表达对未来系统的全面要求</u>，导致形成的需求规格说明不完整、不准确，甚至是有歧义。</li>
<li>在整个开发过程中，<u>用户可能会产生新的要求，导致需求的变更</u>。</li>
</ul>
<p>瀑布模型难以适应这种需求的不确定性和变化，于是出现了快速原型（Rapid Prototype）这种新的开发方法。</p>
<p>原型模型（Prototype Model）：</p>
<ul>
<li>适合于<u>用户需求不清</u>、<u>需求经常变化</u>的情况；</li>
<li><u>不适合大规模系统的开发</u>。</li>
</ul>
<p>原型的目的是能<u>快速、低成本地构建原型系统</u>。</p>
<p>能够采用原型方法是因为开发工具的快速发展，使得能够迅速地开发出一个让用户看得见、摸得着的系统框架。这样，对于计算机不是很熟悉的用户就可以根据这个框架提出自己的需求。</p>
<p>开发原型系统首先确定用户需求，开发初始原型，然后征求用户对初始原型的改进意见，并根据意见修改原型:</p>
<p><picture><img class="img-fluid " alt="原型模型" src="/docs/ruan-she/software-engineering/uTools_1683596611929.png" loading="lazy" width="398" height="318" />
</picture>

</p>
<ol>
<li>交流：目的是定义软件的总体目标，标识需求，然后</li>
<li>快速计划：快速制订原型开发的计划，确定原型的目标和范围。</li>
<li>采用快速设计方式进行建模。</li>
<li>构建原型。</li>
<li>部署交付和反馈：被开发的原型应交付给客户使用，并收集客户的反馈意见，这些反馈意见可在下一轮中对原型进行改进。</li>
<li>下一轮迭代：在前一个原型需要改进，或者需要扩展其范围的时候，进入下一轮原型的迭代开发。</li>
</ol>
<p>根据使用原型的目的不同，原型可以分为：</p>
<ul>
<li>探索型原型：目的是要弄清目标的要求，确定所希望的特性，并探讨多种方案的可行性。</li>
<li>实验型原型：目的是验证方案或算法的合理性，是在大规模开发和实现前，用于考查方案是否合适、规格说明是否可靠等。</li>
<li>演化型原型：目的是将原型作为目标系统的一部分，通过对原型的多次改进，逐步将原型演化成最终的目标系统。</li>
</ul>
<h3 id="螺旋模型" data-numberify>螺旋模型<a class="anchor ms-1" href="#螺旋模型"></a></h3>
<p>对于复杂的大型软件，开发一个原型往往达不到要求。</p>
<p>螺旋模型<u>将瀑布模型和演化模型结合起来</u>，<u>加入了两种模型均忽略的风险分析</u>（以风险为驱动），弥补了这两种模型的不足。</p>
<p>螺旋模型将开发过程分为几个螺旋周期，每个螺旋周期大致和瀑布模型相符合：</p>
<p><picture><img class="img-fluid " alt="螺旋模型" src="/docs/ruan-she/software-engineering/uTools_1683597373666.png" loading="lazy" width="559" height="482" />
</picture>

</p>
<p>每个螺旋周期分为如下4个工作步骤：</p>
<ol>
<li><strong>制订计划</strong>：
<ol>
<li>确定软件的目标</li>
<li>选定实施方案</li>
<li>明确项目开发的限制条件</li>
</ol>
</li>
<li><strong>风险分析</strong>：
<ol>
<li>分析所选的方案</li>
<li>识别风险</li>
<li>消除风险</li>
</ol>
</li>
<li><strong>实施工程</strong>：
<ol>
<li>实施软件开发</li>
<li>验证阶段性产品</li>
</ol>
</li>
<li><strong>用户评估</strong>：
<ol>
<li>评价开发工作，提出修正建议</li>
<li>建立下一个周期的开发计划</li>
</ol>
</li>
</ol>
<p><u>螺旋模型属于面向对象开发模型。</u></p>
<p>螺旋模型适用于：</p>
<ul>
<li><u>庞大、复杂并且具有高风险的系统</u>；</li>
<li>新近开发，需求不明的情况。</li>
</ul>
<p>优点：</p>
<ul>
<li>螺旋模型<u>强调风险分析</u>，使得开发人员和用户对每个演化层出现的风险有所了解，从而做出应有的反应。</li>
<li>螺旋模型<u>支持用户需求的动态变化</u>，有助于提高软件的适应能力，降低了软件开发的风险。</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要开发人员具有相当丰富的风险评估经验和专门知识。</li>
<li>过多的迭代次数会增加开发成本，延迟提交时间。</li>
</ul>
<h2 id="喷泉模型" data-numberify>喷泉模型<a class="anchor ms-1" href="#喷泉模型"></a></h2>
<p>喷泉模型（Water Fountain Model）：</p>
<ul>
<li>以用户需求为动力；</li>
<li>以对象作为驱动；</li>
<li><u>适合于面向对象。</u></li>
</ul>
<p>喷泉模型<u>克服了瀑布模型不支持软件重用和多项开发活动集成的局限性</u>。其开发过程如下：</p>
<p><picture><img class="img-fluid " alt="喷泉模型" src="/docs/ruan-she/software-engineering/uTools_1683598210327.png" loading="lazy" width="247" height="361" />
</picture>

</p>
<p>喷泉模型使开发过程具有以下性质或特点：</p>
<ul>
<li>
<p><strong>迭代性</strong>：意味着模型中的开发活动常常需要重复多次，在迭代过程中不断地完善软件系统。</p>
</li>
<li>
<p><strong>无间隙性</strong>：指在开发活动（如分析、设计、编码）之间不存在明显的边界。</p>
<p>喷泉不像瀑布模型那样，在需求分析活动结束后才开始设计活动，在设计活动结束后才开始编码活动，而是<u>允许各开发活动交叉、迭代地进行</u>。</p>
<p>喷泉模型的<u>各个阶段没有明显的界线</u>，开发人员<u>可以同步进行</u>。</p>
</li>
<li>
<p>支持软件重用。</p>
</li>
</ul>
<p>优点：可以提高软件项目的开发效率，节省开发时间。</p>
<p>缺点：</p>
<ul>
<li>由于喷泉模型在各个开发阶段是重叠的，在开发过程中<u>需要大量的开发人员，不利于项目的管理</u>。</li>
<li>喷泉模型<u>要求严格管理文档，使得审核的难度加大</u>。</li>
</ul>
<h2 id="统一过程模型" data-numberify>统一过程模型<a class="anchor ms-1" href="#统一过程模型"></a></h2>
<p>统一过程（UP）模型开发过程的特征：</p>
<ul>
<li>
<p>用例和风险驱动。</p>
</li>
<li>
<p>以架构为中心。</p>
</li>
<li>
<p>迭代并且增量：</p>
<p>迭代：将整个软件开发项目划分为许多个小的“袖珍项目”。</p>
<p>每个“袖珍项目”都包含正常软件项目的所有元素：</p>
<ul>
<li>计划</li>
<li>分析和设计</li>
<li>构造</li>
<li>集成和测试</li>
<li>内部和外部发布</li>
</ul>
</li>
</ul>
<p>统一过程模型由UML（统一建模语言，Unified Modeling Language）方法和工具支持。</p>
<p>统一过程定义了4个技术阶段及其制品，这4个技术阶段由主要里程碑所终止：</p>
<ol>
<li>
<p><strong>起始阶段</strong>（Inception Phase）：</p>
<p>确定项目的风险及其优先次序，并对精化阶段进行详细规划和对整个项目进行粗略计算。</p>
<p>专注于：项目的初创活动。</p>
<p>产生的主要工作产品有：</p>
<ul>
<li>构想文档（Vision Document）</li>
<li>初始用例模型</li>
<li>初始项目术语表</li>
<li>初始业务用例</li>
<li>初始风险评估</li>
<li>项目计划（阶段及迭代）业务模型</li>
<li>一个或多个原型（需要时）</li>
</ul>
<p>里程碑：生命周期目标。</p>
</li>
<li>
<p><strong>精化阶段</strong>（Elaboration Phase）：</p>
<p>根据主要的用例描述设计出详细的系统构架。主要是解决用例、构架和计划是否足够稳定可靠，风险释放得到充分控制，以便能够按照合同的规定完成整个开发任务。</p>
<p>精华阶段在理解了最初的领域范围之后进行：</p>
<ul>
<li>需求分析</li>
<li>架构演进</li>
</ul>
<p>关注于：需求分析和架构演进。</p>
<p>产生的主要工作产品有：</p>
<ul>
<li>
<p>用例模型</p>
</li>
<li>
<p>补充需求：包括非功能需求</p>
</li>
<li>
<p>分析模型</p>
</li>
<li>
<p>软件体系结构描述</p>
</li>
<li>
<p>可执行的软件体系结构原型</p>
</li>
<li>
<p>初步的设计模型</p>
</li>
<li>
<p>修订的风险列表</p>
</li>
<li>
<p>项目计划：</p>
<p>包括：</p>
<ul>
<li>迭代计划</li>
<li>调整的工作流</li>
<li>里程碑</li>
<li>技术工作产品</li>
</ul>
</li>
<li>
<p>初始用户手册</p>
</li>
</ul>
<p>里程碑：生命周期目标。</p>
</li>
<li>
<p><strong>构建阶段</strong>（Construction Phase）：</p>
<p>将设计实现，并进行测试。</p>
<p>关注系统的构建，产生实现模型。</p>
<p>产生的主要工作产品有：</p>
<ul>
<li>设计模型</li>
<li>软件构件</li>
<li>集成的软件增量</li>
<li>测试计划及步骤</li>
<li>测试用例</li>
<li>支持文档：
<ul>
<li>用户手册</li>
<li>安装手册</li>
<li>对于并发增量的描述</li>
</ul>
</li>
</ul>
<p>里程碑：初始运作功能。即一个准备交到最终用户手中的产品。</p>
</li>
<li>
<p><strong>移交阶段</strong>（Transition Phase）：</p>
<p>交由用户测试并迭代完善。</p>
<p>关注于软件提交方面的工作，产生软件增量。</p>
<p>产生的主要工作产品有：</p>
<ul>
<li>提交的软件增量</li>
<li>$\beta$测试报告</li>
<li>综合用户反馈</li>
</ul>
<p>里程碑：产品发布。</p>
<blockquote>
<p>其实还有一个产生阶段，这里包含在了移交阶段中。</p>
</blockquote>
</li>
</ol>
<p>在每次迭代中有5个核心工作流：</p>
<ul>
<li>需求工作流：捕获系统应该做什么；</li>
<li>分析工作流：精华和结构化需求；</li>
<li>设计工作流：在系统架构内实现需求；</li>
<li>实现工作流：构造软件；</li>
<li>测试工作流：验证实现是否如期望那样工作。</li>
</ul>
<blockquote>
<p>统一过程的典型代表是RUP（Rational Unified Process）。</p>
<p>RUP是UP的商业扩展，完全兼容UP，但比UP更完整、更详细。</p>
</blockquote>
<h2 id="敏捷开发" data-numberify>敏捷开发<a class="anchor ms-1" href="#敏捷开发"></a></h2>
<p>敏捷开发（Agile Development）的总体目标是通过<u>“尽可能早地、持续地对有价值的软件的交付”</u>使客户满意。通过在软件开发过程中加入灵活性，敏捷方法<u>使用户能够在开发周期的后期增加或改变需求</u>。</p>
<p>敏捷过程的典型方法有很多，每一种方法基于一套原则，这些原则实现了<u>敏捷方法所宣称的理念（敏捷宣言）</u>。</p>
<p>敏捷开发有以下几种方法：</p>
<ul>
<li>极限编程（XP）</li>
<li>水晶法（Crystal）</li>
<li>并列争求法（Scrum）</li>
<li>自适应软件开发（ASD）</li>
<li>敏捷统一过程（AUP）</li>
</ul>
<h3 id="极限编程" data-numberify>极限编程<a class="anchor ms-1" href="#极限编程"></a></h3>
<p>极限编程是为了<u>降低需求变更所带来的成本</u>，旨在<u>提高软件质量和对客户需求变化的适应性</u>，期望能够让软件开发达到低成本、低缺陷、高产出、高回报（最小投入得到最大结果）的效果。</p>
<p>极限编程（XP）软件开发方式有以下性质：</p>
<ul>
<li>轻量级（敏捷）</li>
<li>高效</li>
<li>低风险</li>
<li>柔性</li>
<li>可预测的</li>
<li>科学的</li>
</ul>
<p>XP由价值观、原则、实践和行为4个部分组成，他们之间彼此相互依赖、关联，并通过行为贯穿于整个生存周期：</p>
<ul>
<li>4大价值观：
<ul>
<li>沟通</li>
<li>简单性</li>
<li>反馈</li>
<li>勇气</li>
</ul>
</li>
<li>5个原则：
<ul>
<li>快速反馈</li>
<li>简单性假设</li>
<li>逐步修改</li>
<li>提倡更改</li>
<li>优质工作</li>
</ul>
</li>
<li>12个最佳实践：
<ul>
<li>计划游戏：快速制定计划、随着细节的不断变化而完善</li>
<li>小型发布：系统的设计要能够尽可能早地交付</li>
<li>隐喻：找到合适的比喻传达信息</li>
<li>简单设计：只处理当前的需求，使设计保持简单</li>
<li>测试先行：先写测试代码，然后再编写程序</li>
<li>重构：重新审视需求和设计，重新明确地描述它们以符合新的和现有的需求</li>
<li>结对编程</li>
<li>集体代码所有制</li>
<li>持续集成：可以按日甚至按小时为客户提供可运行的版本</li>
<li>每周工作40个小时</li>
<li>现场客户</li>
<li>编码标准</li>
</ul>
</li>
</ul>
<h3 id="敏捷统一过程" data-numberify>敏捷统一过程<a class="anchor ms-1" href="#敏捷统一过程"></a></h3>
<p>敏捷统一过程（Agile Unified Process，AUP）采用以下原理来构建软件系统：</p>
<ul>
<li>“在大型上连续”</li>
<li>“在小型上迭代”。</li>
</ul>
<p>采用经典的UP阶段性活动（初始、精化、构建和转换），提供了一系列活动，能够使团队为软件项目构想出一个全面的过程流。</p>
<p>在每个活动里，一个团队迭代使用敏捷，并将有意义的软件增量尽可能快地交付给最终用户。每个AUP迭代执行以下活动：</p>
<ul>
<li><strong>建模</strong>：建立对商业和问题域的模型表述，这些模型“足够好”即可，以便团队继续前进。</li>
<li><strong>实现</strong>：将模型翻译成源代码。</li>
<li><strong>测试</strong>：像XP一样，团队设计和执行一系列的测试来发现错误以保证源代码满足需求。</li>
<li><strong>部署</strong>：对软件增量的交付以及获取最终用户的反馈。</li>
<li><strong>配置及项目管理</strong>：着眼于变更管理、风险管理以及对团队的任一制品的控制。项目管理追踪和控制开发团队的工作进展并协调团队活动。</li>
<li><strong>环境管理</strong>：协调标准、工具以及适用于开发团队的支持技术等过程基础设施。</li>
</ul>
<h3 id="其他敏捷开发方法" data-numberify>其他敏捷开发方法<a class="anchor ms-1" href="#其他敏捷开发方法"></a></h3>
<p><strong>水晶法</strong>：</p>
<ul>
<li>
<p>认为每一个不同的项目都需要一套不同的策略、约定和方法论。</p>
</li>
<li>
<p>认为人对软件质量有重要的影响。</p>
<p>随着项目质量和开发人员素质的提高，项目和过程的质量也随之提高。</p>
</li>
<li>
<p>通过更好地交流和经常性的交付，软件生产力得到提高。</p>
</li>
</ul>
<p><strong>并列争求法</strong>：</p>
<p>使用迭代的方法。</p>
<ul>
<li>把每30天一次的迭代称为一个“冲刺”。</li>
<li>按需求的优先级别来实现产品。</li>
<li>多个自组织和自治的小组并行地递增实现产品。</li>
<li>协调是通过简短的日常情况会议来进行，就像橄榄球中的“并列争球”。</li>
</ul>
<p><strong>自适应软件开发</strong>：</p>
<p>有6个基本原则：</p>
<ul>
<li>有一个使命作为指导；</li>
<li>特征被视为客户价值的关键点；</li>
<li>过程中的等待是很重要的，因此“重做”与“做”同样关键；</li>
<li>变化不被视为改正，而是被视为对软件开发实际情况的调整；</li>
<li>确定的交付时间迫使开发人员认真考虑每一个生产的版本的关键需求；</li>
<li>风险也包含其中。</li>
</ul>
<h2 id="总结" data-numberify>总结<a class="anchor ms-1" href="#总结"></a></h2>
<p>能力成熟度模型（从1开始）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">级别</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">初始级</td>
<td style="text-align:left">杂乱无章，几乎没有明确定义的步骤。</td>
</tr>
<tr>
<td style="text-align:center">可重复级</td>
<td style="text-align:left">建立基本的项目管理过程和实践来跟踪项目费用、进度和功能特性。</td>
</tr>
<tr>
<td style="text-align:center">已定义级</td>
<td style="text-align:left">将管理和工程文档化、标准化并综合成标准软件过程；<br>使用标准开发过程（或方法论）构建（或集成）系统。</td>
</tr>
<tr>
<td style="text-align:center">己管理级</td>
<td style="text-align:left">对软件过程和产品质量制定了的详细度量标准，且有定量的理解和控制。</td>
</tr>
<tr>
<td style="text-align:center">优化级</td>
<td style="text-align:left">加强了定量分析，通过过程质量和新观念、新技术使过程不断地改进。</td>
</tr>
</tbody>
</table>
<p>能力成熟度集成连续式模型（从0开始）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">能力等级</th>
<th style="text-align:left">目标</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">未完成的</td>
<td style="text-align:left">未执行或未得到等级1中的所有目标。</td>
</tr>
<tr>
<td style="text-align:center">已执行的</td>
<td style="text-align:left">可标识的输入工作产品到输出工作产品的转换，实现特定目标。<p>关注：特定目标的完成。</p></td>
</tr>
<tr>
<td style="text-align:center">已管理的</td>
<td style="text-align:left">已管理的过程的制度化。<p>关注：针对单个过程实例的能力。</p></td>
</tr>
<tr>
<td style="text-align:center">已定义级的</td>
<td style="text-align:left">已定义的过程的制度化。<p>关注：过程的组织级标准化和部署。</p></td>
</tr>
<tr>
<td style="text-align:center">定量管理的</td>
<td style="text-align:left">可定量管理的过程的制度化。<p>说明：使用测量和质量保证来控制和改进。</p></td>
</tr>
<tr>
<td style="text-align:center">优化的</td>
<td style="text-align:left">优化的过程的制度化。<p>说明：使用量化手段改变和优化。</p></td>
</tr>
</tbody>
</table>
<p>各开发模型的适用范围：</p>
<table>
<thead>
<tr>
<th style="text-align:center">模型</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">适用范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">瀑布模型</td>
<td style="text-align:left">将软件生存周期中的活动定为线性顺序链接的阶段模型</td>
<td style="text-align:left">需求明确、大致固定且变更少</td>
</tr>
<tr>
<td style="text-align:center">V模型</td>
<td style="text-align:left">瀑布模型的变体，强调测试贯穿项目的始终，是一种测试的开发模型</td>
<td style="text-align:left">需求明确、低风险</td>
</tr>
<tr>
<td style="text-align:center">增量模型</td>
<td style="text-align:left">融合瀑布模型和原型迭代，核心功能先完成，每轮迭代都会有新的增量，核心功能得到充分测试，强调每个增量均发布一个可操作的产品</td>
<td style="text-align:left">快速构造可运行的产品，产品升级，领域熟悉或已有原型</td>
</tr>
<tr>
<td style="text-align:center">演化模型</td>
<td style="text-align:left">迭代的过程模型，需求无法被完整定义，功能在使用过程中不断完善</td>
<td style="text-align:left">对软件需求缺乏准确认识的情况</td>
</tr>
<tr>
<td style="text-align:center">原型模型</td>
<td style="text-align:left">原型开发方法模型，目的是快速、低成本地构建原型系统</td>
<td style="text-align:left">需求不清或多变、领域陌生；不适合大规模系统</td>
</tr>
<tr>
<td style="text-align:center">螺旋模型</td>
<td style="text-align:left">结合瀑布和演化模型，强调引入风险分析，属于面向对象开发模型</td>
<td style="text-align:left">庞大、复杂、高风险的系统，开发人员有丰富的风险评估经验和知识</td>
</tr>
<tr>
<td style="text-align:center">喷泉模型</td>
<td style="text-align:left">面向对象模型，特点是迭代、无间隙和支持重用，各阶段无明显界限，可迭代交叉</td>
<td style="text-align:left">面向对象的开发过程</td>
</tr>
<tr>
<td style="text-align:center">统一过程</td>
<td style="text-align:left">用例驱动、以架构为中心、迭代和增量</td>
<td></td>
</tr>
</tbody>
</table>
<p>统一过程模型阶段里程碑和关注点总结：</p>
<table>
<thead>
<tr>
<th style="text-align:center">阶段</th>
<th style="text-align:left">里程碑</th>
<th style="text-align:left">关注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">初始阶段</td>
<td style="text-align:left">生命周期目标</td>
<td style="text-align:left">项目的初创活动</td>
</tr>
<tr>
<td style="text-align:center">精化阶段</td>
<td style="text-align:left">生命周期架构</td>
<td style="text-align:left">需求分析和架构演进</td>
</tr>
<tr>
<td style="text-align:center">构建阶段</td>
<td style="text-align:left">初始运作功能</td>
<td style="text-align:left">系统的构建</td>
</tr>
<tr>
<td style="text-align:center">移交阶段</td>
<td style="text-align:left">产品发布</td>
<td style="text-align:left">软件提交方面的工作</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="需求分析" data-numberify>需求分析<a class="anchor ms-1" href="#需求分析"></a></h1>
<h2 id="软件需求" data-numberify>软件需求<a class="anchor ms-1" href="#软件需求"></a></h2>
<p>需求分析主要的目的是弄清楚系统需要“做什么”，并将其阐述出来。</p>
<p>软件需求是指<u>用户对目标软件系统在功能、行为、性能、设计约束等方面的期望</u>。通常，这些需求包括：</p>
<ul>
<li>
<p><strong>功能需求</strong>：考虑系统要做什么，在何时做，在何时以及如何修改或升级。</p>
</li>
<li>
<p><strong>性能需求</strong>：考虑软件开发的技术性指标。</p>
<p>例如：</p>
<ul>
<li>存储容量限制；</li>
<li>执行速度；</li>
<li>响应时间；</li>
<li>吞吐量。</li>
</ul>
</li>
<li>
<p><strong>用户或人的因素</strong>：考虑用户的类型。</p>
<p>例如：</p>
<ul>
<li>各种用户对使用计算机的熟练程度，需要接受的训练；</li>
<li>用户理解、使用系统的难度；</li>
<li>用户错误操作系统的可能性。</li>
</ul>
</li>
<li>
<p><strong>环境需求</strong>：考虑未来软件应用的环境，包括硬件和软件。</p>
<ul>
<li>对硬件设备的需求包括：机型、外设、接口、地点、分布、湿度、磁场干扰等；</li>
<li>对软件的需求包括：操作系统、网络、数据库等。</li>
</ul>
</li>
<li>
<p><strong>界面需求</strong>：</p>
<p>考虑以下方面：</p>
<ul>
<li>来自其他系统的输入；</li>
<li>到其他系统的输出；</li>
<li>对数据格式的特殊规定；</li>
<li>对数据存储介质的规定。</li>
</ul>
</li>
<li>
<p><strong>文档需求</strong>：考虑需要哪些文档，文档针对哪些读者。</p>
</li>
<li>
<p><strong>数据需求</strong>：</p>
<p>考虑以下方面：</p>
<ul>
<li>输入、输出数据的格式；</li>
<li>接收、发送数据的频率；</li>
<li>数据的准确性和精度；</li>
<li>数据流量；</li>
<li>数据需保持的时间。</li>
</ul>
</li>
<li>
<p><strong>资源使用需求</strong>：</p>
<p>考虑以下方面：</p>
<ul>
<li>软件运行时所需要的数据、其他软件、内存空间等资源；</li>
<li>软件开发、维护时，所需的人力、支撑软件、开发设备。</li>
</ul>
</li>
<li>
<p><strong>安全保密要求</strong>：</p>
<p>考虑以下方面：</p>
<ul>
<li>是否需要对访问系统或系统信息加以控制；</li>
<li>隔离用户数据的方法；</li>
<li>用户程序如何与其他程序和操作系统隔离</li>
<li>系统备份要求。</li>
</ul>
</li>
<li>
<p><strong>可靠性要求</strong>：</p>
<p>考虑以下方面：</p>
<ul>
<li>系统的可靠性要求；</li>
<li>系统是否必须检测和隔离错误；</li>
<li>出错后，重启系统允许的时间。</li>
</ul>
</li>
<li>
<p><strong>软件成本消耗与开发进度需求</strong>：</p>
<p>考虑以下方面：</p>
<ul>
<li>开发是否有规定的时间表；</li>
<li>软/硬件投资有无限制。</li>
</ul>
</li>
<li>
<p><strong>其他非功能性要求</strong>：</p>
<p>如采用某种开发模式，需要确定：</p>
<ul>
<li>质量控制标准；</li>
<li>里程碑和评审；</li>
<li>验收标准；</li>
<li>各种质量要求的优先级；</li>
<li>可维护性方面的要求。</li>
</ul>
</li>
</ul>
<p>软件需求的出处：</p>
<ul>
<li>可以来自于用户（实际的和潜在的）、用户的规约、应用领域的专家、相关的技术标准和法规；</li>
<li>可以来自于原有的系统、原有系统的用户、新系统的潜在用户；</li>
<li>可以来自于竞争对手的产品。</li>
</ul>
<h2 id="需求工程" data-numberify>需求工程<a class="anchor ms-1" href="#需求工程"></a></h2>
<p>需求工程可以细分为6个阶段：</p>
<ol>
<li>需求获取</li>
<li>需求分析与协商</li>
<li>系统建模</li>
<li>需求规约</li>
<li>需求验证</li>
<li>需求管理</li>
</ol>
<hr>
<h1 id="系统设计" data-numberify>系统设计<a class="anchor ms-1" href="#系统设计"></a></h1>
<p>进入设计阶段，需要把软件系统“做什么”的逻辑模型转换成“怎么做”的物理模型。即着手实现软件系统需求。</p>
<p>系统设计的主要目的就是为系统制定蓝图，在各种技术和实施方法中权衡利弊，精心设计，合理地使用各种资源，最终勾画出新系统的详细设计方案。</p>
<p>系统设计的主要内容包括：</p>
<ul>
<li>新系统总体结构设计</li>
<li>代码设计</li>
<li>输出、输入设计</li>
<li>处理过程设计</li>
<li>数据存储设计</li>
<li>用户界面设计</li>
<li>安全控制设计</li>
</ul>
<p>常用的设计方法有以下两种：</p>
<ul>
<li>面向数据流的结构化设计方法（SD）。</li>
<li>面向对象的分析方法（OOD）。</li>
</ul>
<p>系统设计的基本任务大体上可以分为两个步骤：</p>
<ol>
<li>概要设计</li>
<li>详细设计</li>
</ol>
<h2 id="概要设计" data-numberify>概要设计<a class="anchor ms-1" href="#概要设计"></a></h2>
<ol>
<li>
<p><strong>设计软件系统总体结构</strong>（<strong>总体结构设计</strong>）：</p>
<p>其基本任务是：</p>
<ul>
<li>采用某种设计方法，将一个复杂的系统按功能划分成模块；</li>
<li>确定每个模块的功能；</li>
<li>确定模块之间的调用关系；</li>
<li>确定模块之间的接口，即模块之间传递的信息；</li>
<li>评价模块结构的质量。</li>
</ul>
<p>软件系统总体结构的设计是概要设计关键的一步，直接影响到下一个阶段详细设计与编码的工作。</p>
<p>软件系统的质量及一些整体特性都在软件系统总体结构的设计中决定。</p>
</li>
<li>
<p><strong>数据结构及数据库设计</strong>：</p>
<ol>
<li>
<p><strong>数据结构设计</strong>：逐步细化的方法也适用于数据结构的设计。</p>
<p>在需求分析阶段，己经通过数据字典对数据的组成、操作约束和数据之间的关系等方面进行了描述，确定了数据的结构特性。在概要设计阶段要加以细化，详细设计阶段则规定具体的实现细节。在概要设计阶段，宜使用抽象的数据类型。</p>
</li>
<li>
<p><strong>数据库设计</strong>：</p>
<p>数据库的设计是指数据存储文件的设计，主要进行以下几方面设计：</p>
<ol>
<li>
<p>概念设计：在数据分析的基础上，采用自底向上的方法从用户角度进行视图设计，一般用E-R模型来表述数据模型。</p>
<p>E-R模型既是设计数据库的基础，也是设计数据结构的基础。</p>
</li>
<li>
<p>逻辑设计：E-R模型是独立于数据库管理系统（DBMS）的，要结合具体的DBMS特征来建立数据库的逻辑结构。</p>
</li>
<li>
<p>物理设计：对于不同的DBMS，物理环境不同，提供的存储结构与存取方法各不相同。</p>
<p>物理设计就是设计数据模式的一些物理细节，如数据项存储要求、存取方法和索引的建立等。</p>
</li>
</ol>
</li>
</ol>
</li>
<li>
<p><strong>编写概要设计文档</strong>：</p>
<p>文档主要有：</p>
<ul>
<li>概要设计说明书</li>
<li>数据库设计说明书</li>
<li>用户手册</li>
<li>修订测试计划</li>
</ul>
</li>
<li>
<p><strong>评审</strong>：</p>
<p>对设计部分是否完整地实现了需求中规定的功能、性能等要求，设计方法的可行性，关键的处理及内外部接口定义的正确性、有效性、各部分之间的一致性等都一一进行评审。</p>
</li>
</ol>
<h2 id="详细设计" data-numberify>详细设计<a class="anchor ms-1" href="#详细设计"></a></h2>
<ol>
<li>
<p><strong>算法设计</strong>：<u>对每个模块进行详细的算法设计</u>，用某种图形、表格和语言等工具<u>将每个模块处理过程的详细算法描述出来</u>。</p>
</li>
<li>
<p><strong>数据结构设计</strong>：对模块内的数据结构进行设计。</p>
</li>
<li>
<p><strong>数据库设计</strong>：对数据库进行物理设计，即确定数据库的物理结构。</p>
</li>
<li>
<p>其他设计：</p>
<p>根据软件系统的类型，还可能要进行以下设计：</p>
<ul>
<li><strong>代码设计</strong>：为了提高数据的输入、分类、存储和检索等操作，节约内存空间，对数据库中某些数据项的值要进行代码设计。</li>
<li><strong>输入/输出格式设计</strong>。</li>
<li><strong>用户界面设计</strong>。</li>
</ul>
</li>
<li>
<p>编写<u>详细设计说明书</u>。</p>
</li>
<li>
<p><strong>评审</strong>：<u>对处理过程的算法和数据库的物理结构都要评审。</u></p>
</li>
</ol>
<p>系统设计的结果是一系列的系统设计文件，这些文件是物理实现一个信息系统（包括硬件设备和编制软件程序）的重要基础。</p>
<hr>
<h1 id="系统测试" data-numberify>系统测试<a class="anchor ms-1" href="#系统测试"></a></h1>
<p>系统测试是<u>为了发现错误而执行程序的过程</u>。</p>
<ul>
<li>成功的测试：发现了至今尚未发现的错误的测试。</li>
<li>测试的目的：希望能以最少的人力和时间发现潜在的各种错误和缺陷。</li>
</ul>
<p>信息系统测试应包括：</p>
<ul>
<li>软件测试</li>
<li>硬件测试</li>
<li>网络测试</li>
</ul>
<p>系统测试是保证系统质量和可靠性的关键步骤，是对系统开发过程的最后复查。</p>
<p>根据测试的概念和目的，在进行信息系统测试时应遵循以下基本原则：</p>
<ol>
<li>
<p>应尽早并不断地进行测试。测试应贯穿在开发的各个阶段，应尽早纠正错误，消除隐患。</p>
</li>
<li>
<p>测试工作应该避免由原开发软件的人或小组承担。</p>
<ul>
<li>开发人员往往不愿否认自己的工作，总认为自己开发的软件没有错误；</li>
<li>开发人员的错误很难由本人测试出来，很容易根据自己编程的思路来制定测试思路，具有局限性。</li>
</ul>
</li>
<li>
<p>在设计测试方案时，不仅要确定输入数据，而且要根据系统功能确定预期输出结果。将实际输出结果与预期结果相比较就能发现测试对象是否正确。</p>
</li>
<li>
<p>在设计测试用例时，不仅要设计有效、合理的输入条件，也要包含不合理、失效的输入条件。</p>
</li>
<li>
<p>在测试程序时，不仅要检验程序是否做了该做的事，还要检验程序是否做了不该做的事。</p>
</li>
<li>
<p>严格按照测试计划来进行，避免测试的随意性。</p>
<p>测试计划应包括：</p>
<ul>
<li>测试内容</li>
<li>进度安排</li>
<li>人员安排</li>
<li>测试环境</li>
<li>测试工具</li>
<li>测试资料</li>
</ul>
</li>
<li>
<p>妥善保存测试计划、测试用例，作为软件文档的组成部分，为维护提供方便。</p>
</li>
<li>
<p>测试例子都是精心设计出来的，可以为重新测试或追加测试提供方便。</p>
</li>
</ol>
<p>系统测试阶段的<u>测试目标来自于需求分析阶段</u>。</p>
<p>测试过程：</p>
<ol>
<li>制定测试计划</li>
<li>编制测试大纲</li>
<li>根据测试大纲设计和生成测试用例</li>
<li>实施测试</li>
<li>生成测试报告</li>
</ol>
<h2 id="单元测试" data-numberify>单元测试<a class="anchor ms-1" href="#单元测试"></a></h2>
<p><strong>单元测试</strong>也称为<strong>模块测试</strong>，<u>在模块编写完成且无编译错误后就可以进行</u>。单元测试<u>侧重于模块中的内部处理逻辑和数据结构</u>。如果选用<u>机器测试</u>，一般用<u>白盒测试法</u>。这类测试<u>可以对多个模块同时进行</u>。</p>
<p>单元测试主要检查模块的以下5个特征：</p>
<ul>
<li>
<p>模块接口：模块的接口保证了测试模块的数据流可以正确地流入、流出。</p>
<p>在测试中应检查以下要点：</p>
<ul>
<li>测试模块的<u>输入参数</u>和<u>形式参数</u>在<u>个数、属性、单位</u>上<u>是否一致</u>。</li>
<li>调用其他模块时，所给出的<u>实际参数</u>和<u>被调用模块的形式参数</u>在<u>个数、属性、单位</u>上<u>是否一致</u>。</li>
<li>调用标准函数时，所用的<u>参数在属性、数目和顺序上是否正确</u>。</li>
<li><u>全局变量在各模块中的定义和用法是否一致。</u></li>
<li><u>输入是否仅改变了形式参数。</u></li>
<li><u>开/关的语句</u>是否正确。</li>
<li>规定的<u>I/O格式</u>是否与输入/输出语句一致。</li>
<li>在使用文件之前是否已经打开文件或使用文件之后是否己经关闭文件。</li>
</ul>
</li>
<li>
<p>局部数据结构</p>
</li>
<li>
<p>重要的执行路径</p>
</li>
<li>
<p>出错处理</p>
</li>
<li>
<p>边界条件</p>
</li>
</ul>
<p>模块间存在调用与被调关系，对每个模块进行测试时，需要开发两种模块：</p>
<ul>
<li>
<p>驱动模块：接收测试例子的数据，将这些数据送到测试模块，输出结果。</p>
<p>即模拟被测试模块的上一级模块，相当于被测模块的主程序。</p>
</li>
<li>
<p>桩模块（存根模块）：代替测试模块中所调用的子模块，其内部可进行少量的数据处理。目的是为了检验入口、输出调用和返回的信息。</p>
<p>即模拟被测模块的子模块（所调用的模块），但不是软件产品的组成部分。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="单元测试环境" src="/docs/ruan-she/software-engineering/uTools_1683613415307.png" loading="lazy" width="360" height="344" />
</picture>

</p>
<p>提高模块的内聚度可以简化单元测试。</p>
<h2 id="集成测试" data-numberify>集成测试<a class="anchor ms-1" href="#集成测试"></a></h2>
<p>集成测试就是<u>把模块按系统设计说明书的要求组合起来进行测试</u>。即使所有的模块都通过了测试，在集成之后，仍然可能出现问题：</p>
<ul>
<li>穿过模块的数据丢失；</li>
<li>一个模块的功能对其他模块造成有害的影响；</li>
<li>各个模块集成起来没有达到预期的功能；</li>
<li>全局数据结构出现问题；</li>
<li>单个模块的误差可以接受，但模块组合后，可能会出现误差累积，最后累积到不能接受的程度。</li>
</ul>
<p>集成测试是进行一些旨在<u>发现与接口相关的错误</u>的测试，其目标是<u>利用已通过单元测试的构件建立设计中描述的程序结构</u>。</p>
<p>通常，集成测试有两种方法：</p>
<ul>
<li>
<p><strong>非增量集成</strong>：分别测试各个模块，再把这些模块组合起来进行整体测试。</p>
<ul>
<li>优点：可以对模块进行并行测试，能充分利用人力，并加快工程进度。</li>
<li>缺点：容易混乱，出现错误不容易查找和定位。</li>
</ul>
</li>
<li>
<p><strong>增量集成</strong>：以小增量的方式逐步进行构造和测试。</p>
<p>增量式测试的范围一步步扩大，错误容易定位，更易于对接口进行彻底测试，并且可以运用系统化的测试方法。</p>
</li>
</ul>
<p>增量集成策略有：</p>
<ul>
<li>
<p><strong>自项向下集成测试</strong>：一种构造软件体系结构的增量方法。</p>
<p>模块的集成顺序为从主控模块（主程序）开始，沿着控制层次逐步向下，以深度优先或广度优先的方式将从属于（或间接从属于）主控模块的模块集成到结构中。</p>
<p><picture><img class="img-fluid " alt="自顶向下集成" src="/docs/ruan-she/software-engineering/uTools_1683617607121.png" loading="lazy" width="500" height="393" />
</picture>

</p>
<p><strong>深度优先集成</strong>是<u>首先集成位于程序结构中主控路径上的所有构件</u>，也可以根据特定应用系统的特征进行选择。</p>
<p>例如上图中，选择最左边的路径：</p>
<ol>
<li>首先，集成构建$M_1$、$M_2$和$M_5$；</li>
<li>其次，集成$M_8$或$M_6$（若$M_2$的正常运行是必须的）；</li>
<li>然后，集成中间和右边控制路径上的构建。</li>
</ol>
<p>广度优先集成<u>首先沿着水平方向，将属于同一层的构建集成起来</u>。</p>
<p>例如上图中：</p>
<ol>
<li>首先，将构建$M_2$、$M_3$和$M_4$集成起来；</li>
<li>其次是$M_5$、$M_6$、$M_7$，依次类推。</li>
</ol>
<p>集成过程可以通过下列5个步骤完成：</p>
<ol>
<li><u>主控模块用作测试驱动模块</u>，用这些从属于主控模块的所有模块代替桩模块。</li>
<li>依靠所选择的集成方法（即深度优先或广度优先），每次用实际模块替换一个从属桩模块。</li>
<li>在集成每个模块后都进行测试。</li>
<li>在完成每个测试集之后，用实际模块替换另一个桩模块。</li>
<li>可以执行回归测试，以确保没有引入新的错误。</li>
</ol>
<p>回到第2步继续执行此过程，直到完成了整个程序结构的构造。</p>
<blockquote>
<p><u>自顶向下集成不需要驱动模块。</u></p>
</blockquote>
</li>
<li>
<p><strong>自底向上集成测试</strong>：自底向上集成测试就是从原子模块（程序结构的最底层构件）开始进行构造和测试。</p>
<p>由于构件是自底向上集成的，在处理时所需要的从属于给定层次的模块总是存在的，因此，没有必要使用桩模块。自底向上集成策略可以利用以下步骤来实现：</p>
<ol>
<li>连接低层构件以构成完成特定子功能的簇。</li>
<li>编写驱动模块（测试的控制程序）以协调测试用例的输入和输出。</li>
<li>测试簇。</li>
<li>去掉驱动程序，沿着程序结构向上逐步连接簇。</li>
</ol>
<blockquote>
<p>簇：一系列相关低层构建的集合。</p>
<p><u>自底向上集成不需要桩模块。</u></p>
</blockquote>
<p>例如：</p>
<p><picture><img class="img-fluid " alt="自底向上" src="/docs/ruan-she/software-engineering/uTools_1683619189037.png" loading="lazy" width="762" height="534" />
</picture>

</p>
<ol>
<li>连接相应的构建形成簇1、簇2和簇3；</li>
<li>编写驱动模块（图中虚线上方连接的框，即$D_1$、$D_2$和$D_3$）</li>
<li>利用驱动模块对每个簇进行测试。</li>
<li>簇1和簇2中的构建从属于模块$M_a$，去掉驱动模块$D_1$和$D_2$，将这两个簇直接与$M_a$相连；簇3去掉驱动模块$D_3$，然后与$M_b$相连。</li>
<li>最后将$M_a$和$M_b$与构建$M_c$连接在一起。</li>
</ol>
</li>
<li>
<p><strong>回归测试</strong>：重新执行己测试过的某些子集，以确保变更没有传播不期望的副作用。</p>
<p>每当加入一个新模块作为集成测试的一部分时，软件发生变更，建立了新的数据流路径，可能出现新的/O,以及调用新的控制逻辑。这些变更可能会使原来可以正常工作的功能产生问题。</p>
<p>回归测试有助于保证变更不引入无意识行为或额外的错误。回归测试的方法有：</p>
<ul>
<li>手工执行，重新执行所有测试用例的子集</li>
<li>利用捕捉/回放工具自动执行</li>
</ul>
<p>回归测试要执行的测试子集包含以下3种测试用例：</p>
<ul>
<li><u>能够测试软件所有功能</u>的具有代表性的<u>测试样本</u>。</li>
<li>额外测试，侧重于<u>可能会受变更影响的软件功能</u>。</li>
<li>侧重于<u>已发生变更的软件构件测试</u>。</li>
</ul>
<p>随着集成测试的进行，<u>回归测试的数量可能变得相当庞大</u>，因此，应将回归测试用例设计成<u>只包括每个主要程序功能的一个或多个错误类的测试</u>。</p>
</li>
<li>
<p><strong>冒烟测试</strong>：一种常用的集成测试方法，是时间关键项目的决定性机制，它让软件团队频繁地对项目进行评估。</p>
<p>冒烟测试方法包括下列活动：</p>
<ol>
<li>
<p>将已经转换为代码的软件构件集成到构建中。</p>
<p>一个构建包括所有的：</p>
<ul>
<li>数据文件</li>
<li>库</li>
<li>可复用的模块</li>
<li>实现一个或多个产品功能所需的工程化构件</li>
</ul>
</li>
<li>
<p>设计一系列测试以<u>暴露影响构建正确地完成它的功能的错误</u>，其<u>目的是为了发现极有可能造成项目延迟的业务阻塞错误</u>。</p>
</li>
<li>
<p>每天将该构建与其他构建及整个软件产品（以其当前形势）集成起来进行冒烟测试。</p>
<p>这种集成方法可以自顶向下，也可以自底向上。</p>
</li>
</ol>
</li>
</ul>
<h2 id="测试方法" data-numberify>测试方法<a class="anchor ms-1" href="#测试方法"></a></h2>
<p>测试方法分为：</p>
<ul>
<li>
<p><strong>静态测试</strong>：</p>
<p>指被测试程序不在机器上运行，而是采用以下手段对程序进行检测：</p>
<ul>
<li>
<p><strong>人工检测</strong>：不依靠计算机而是依靠人工审查程序或评审软件。</p>
<p>人工检测包括：</p>
<ul>
<li>代码检查</li>
<li>静态结构分析</li>
<li>代码质量度量</li>
</ul>
</li>
<li>
<p><strong>计算机辅助静态分析</strong></p>
</li>
</ul>
</li>
<li>
<p><strong>动态测试</strong>：指通过运行程序发现错误。</p>
<p>在对软件产品进行动态测试时可以采用以下两种测试方法：</p>
<ul>
<li><strong>黑盒测试法</strong></li>
<li><strong>白盒测试法</strong></li>
</ul>
<p>测试用例由以下组成：</p>
<ul>
<li>测试输入数据</li>
<li>预期输出结果：与测试输入数据对应的预期输出结果</li>
</ul>
<p>在设计测试用例时，应当包括：</p>
<ul>
<li>合理的输入条件</li>
<li>不合理的输入条件</li>
</ul>
</li>
</ul>
<h3 id="黑盒测试" data-numberify>黑盒测试<a class="anchor ms-1" href="#黑盒测试"></a></h3>
<p><strong>黑盒测试</strong>也称为<strong>功能测试</strong>，在<u>完全不考虑软件的内部结构和特性</u>的情况下，测试软件的外部特性。</p>
<p>进行黑盒测试主要是为了发现以下几类错误：</p>
<ol>
<li>是否有错误的功能或遗漏的功能？</li>
<li>界面是否有误？输入是否正确接收？输出是否正确？</li>
<li>是否有数据结构或外部数据库访问错误？</li>
<li>性能是否能多接受？</li>
<li>是否有初始化或终止性错误？</li>
</ol>
<p>常用的黑盒测试技术有：</p>
<ul>
<li>
<p><strong>等价类划分</strong>：将程序的输入域划分为若干等价类，然后从每个等价类中选取一个代表性数据作为测试用例。</p>
<p>每一类的代表性数据在测试中的作用等价于这一类中的其他值，这样就可以<u>用少量代表性的测试用例取得较好的测试效果</u>。</p>
<p>等价类划分有两种不同的情况：</p>
<ul>
<li>有效等价类</li>
<li>无效等价类</li>
</ul>
<p>在设计测试用例时，要同时考虑这两种等价类。</p>
<p>定义等价类的原则如下。</p>
<ol>
<li>在<u>输入条件规定了取值范围或值的个数</u>的情况下，<u>可以定义1个有效等价类和2个无效等价类</u>。</li>
<li>在<u>输入条件规定了输入值的集合或规定了“必须如何”</u>的条件的情况下，<u>可以定义1个有效等价类和一个无效等价类</u>。</li>
<li>在输入条件是一个<u>布尔量</u>的情况下，<u>可以定义一个有效等价类和一个无效等价类</u>。</li>
<li>在<u>规定了输入数据的一组值（假定$n$个）</u>，并且程序要<u>对每一个输入值分别处理</u>的情况下，<u>可以定义$n$个有效等价类和1个无效等价类</u>。</li>
<li>在<u>规定了输入数据必须遵守的规则</u>的情况下，<u>可以定义一个有效等价类（符合规则）和若干个无效等价类（从不同角度违反规则）</u>。</li>
<li>在确知己划分的等价类中，各元素在程序处理中的方式不同的情况下，则应将该等价类进一步划分为更小的等价类。</li>
</ol>
<p>例如，输入$x$的取值范围是$0 \sim 10$，输入$y$的取值范围是$-10 \sim -1$，那么可以定义三个等价类：</p>
<ul>
<li>有效等价类1：$x$的取值范围是$0 \sim 10$，输入$x$的取值范围是$-10 \sim -1$；</li>
<li>无效等价类2：$x$的取值范围是$x &lt; 0 \ \ OR \ \ x &gt; 10$，输入$y$的取值范围是$-10 \sim -1$；</li>
<li>无效等价类3：$x$的取值范围是$0 \sim 10$，输入$x$的取值范围是$x &lt; -10 \ \ OR \ \ x &gt; -1$。</li>
</ul>
<p>无效等价类的划分：每个无效等价类的测试用例，只违反一个输入的取值范围。如果违反了多个输入的取值范围，那便是不好的测试用例。</p>
</li>
<li>
<p><strong>边界值分析</strong>：输入的<u>边界比中间更加容易发生错误</u>，因此用边界值分析来<u>补充等价类划分的测试用例设计技术</u>。</p>
<p>边界值划分<u>选择等价类边界的测试用例</u>，既<u>注重于输入条件边界</u>，又<u>适用于输出域测试用例</u>。</p>
<p>对边界值设计测试用例应遵循的原则如下：</p>
<ol>
<li>如果<u>输入条件规定了值的范围</u>，则应取<u>刚达到这个范围的边界的值</u>，以及<u>刚刚超越这个范围边界的值</u>作为测试输入数据。</li>
<li>如果<u>输入条件规定了值的个数</u>，则用<u>最大个数、最小个数、比最小个数少1、比最大个数多1的数据</u>作为测试数据。</li>
<li>根据规格说明的每个输出条件使用上述两条原则。</li>
<li>如果程序的规格说明给出的<u>输入域或输出域是有序集合</u>，则应选取<u>集合的第一个元素和最后一个元素</u>作为测试用例。</li>
<li>如果程序中使用了一个<u>内部数据结构</u>，则应当选择这个<u>内部数据结构边界上的值</u>作为测试用例。</li>
<li>分析规格说明，找出其他可能的边界条件。</li>
</ol>
</li>
<li>
<p><strong>错误推测</strong></p>
</li>
<li>
<p><strong>因果图</strong></p>
</li>
</ul>
<h3 id="白盒测试" data-numberify>白盒测试<a class="anchor ms-1" href="#白盒测试"></a></h3>
<p><strong>白盒测试</strong>也称为<strong>结构测试</strong>，<u>根据程序的内部结构和逻辑来设计测试用例</u>，对程序的路径和过程进行测试，检查是否满足设计的需要。</p>
<p>白盒测试常用的技术有：</p>
<ul>
<li>
<p><strong>逻辑覆盖</strong>：考察用测试数据运行被测程序时，对程序逻辑的覆盖程度。</p>
<p>主要的逻辑覆盖标准有6种，它们的覆盖程度从低到高为：</p>
<ol>
<li>
<p><strong>语句覆盖</strong>：指选择足够的测试数据，使<u>被测试程序中的每条语句至少执行一次</u>。</p>
<p>语句覆盖对程序执行逻辑的覆盖很低，因此一般认为它是很弱的逻辑覆盖。</p>
</li>
<li>
<p><strong>判定覆盖</strong>（分支覆盖）：指设计足够的测试用例，使得<u>被测程序中的每个判定表达式至少获得一次“真”/“假”值</u>。</p>
<p>判定覆盖的判定表达式是指判定表达式整体。</p>
<p>判定覆盖要比语句覆盖更强一些。</p>
</li>
<li>
<p><strong>条件覆盖</strong>：指构造一组测试用例，使得<u>每一判定语句中每个逻辑条件的各种可能的值至少满足一次</u>。</p>
<p>条件覆盖的判定语句是指判定表达式下的判定语句（如果有），即用<code>AND</code>、<code>OR</code>等逻辑运算符连接起来的语句（不包含逻辑运算符的语句）。</p>
</li>
<li>
<p><strong>判定/条件覆盖</strong>：指设计足够的测试用例，<u>使得判定中每个条件的所有可能取值（真/假）至少出现一次，并使每个判定本身的判定结果（真/假）也至少出现一次</u>。</p>
<p>判定/条件覆盖同时满足：</p>
<ul>
<li>判定覆盖</li>
<li>条件覆盖</li>
</ul>
</li>
<li>
<p><strong>条件组合覆盖</strong>：指设计足够的测试用例，使得<u>每个判定中条件的各种可能值的组合都至少出现一次</u>。</p>
<p>满足条件组合覆盖的测试用例一定满足：</p>
<ul>
<li>判定覆盖</li>
<li>条件覆盖</li>
<li>判定/条件覆盖</li>
</ul>
</li>
<li>
<p><strong>路径覆盖</strong>：指<u>覆盖被测试程序中所有可能的路径</u>。</p>
</li>
</ol>
</li>
<li>
<p><strong>循环覆盖</strong></p>
</li>
<li>
<p><strong>基本路径测试</strong></p>
</li>
</ul>
<h3 id="总结-1" data-numberify>总结<a class="anchor ms-1" href="#总结-1"></a></h3>
<p>白盒测试逻辑覆盖技术总结（覆盖程度从低到高）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">逻辑覆盖</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">语句覆盖</td>
<td style="text-align:left">每条语句执行一次</td>
</tr>
<tr>
<td style="text-align:center">分支（判定）覆盖</td>
<td style="text-align:left">每个分支获得一次True/False</td>
</tr>
<tr>
<td style="text-align:center">条件覆盖</td>
<td style="text-align:left">每个分支中的每个逻辑条件的所有可能取值满足一次</td>
</tr>
<tr>
<td style="text-align:center">判定/条件覆盖</td>
<td style="text-align:left">分支覆盖 + 条件覆盖</td>
</tr>
<tr>
<td style="text-align:center">条件组合覆盖</td>
<td style="text-align:left">每个判定中条件的各种可能值的组合都出现一次</td>
</tr>
<tr>
<td style="text-align:center">路径覆盖</td>
<td style="text-align:left">覆盖被测试程序中所有可能的路径</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="运行和维护" data-numberify>运行和维护<a class="anchor ms-1" href="#运行和维护"></a></h1>
<p>软件维护是软件生命周期中的最后一个阶段，处于系统投入生产性运行以后的时期中，因此<u>不属于系统开发过程</u>。<u>软件维护是在软件已经交付使用之后为了改正错误或满足新的需求而修改软件的过程</u>，即软件在交付使用后对软件所做的一切改动。</p>
<h2 id="系统可维护性" data-numberify>系统可维护性<a class="anchor ms-1" href="#系统可维护性"></a></h2>
<p>系统的可维护性可以定义为维护人员理解、改正、改动和改进这个软件的难易程度。提高可维护性是开发软件系统所有步骤的关键目的。<u>系统的可维护性可以衡量系统是否能被很好地维护。</u></p>
<p>系统可维护性的评价指标：</p>
<ol>
<li>
<p><strong>可理解性</strong>：指别人能理解系统的结构、界面、功能和内部过程的难易程度。</p>
<p>模块化、详细设计文档、结构化设计和良好的高级程序设计语言等都有助于提高可理解性。</p>
</li>
<li>
<p><strong>可测试性</strong>：<u>诊断和测试的容易程度取决于易理解的程度。</u></p>
<p>好的文档资料有利于诊断和测试；程序的结构、高性能的测试工具以及周密计划的测试工序也是至关重要的。</p>
<p>在进行系统维护时，应该充分利用在系统测试阶段保存下来的测试用例。</p>
</li>
<li>
<p><strong>可修改性</strong>：诊断和测试的容易程度与系统设计所制定的设计原则有直接关系。</p>
<p>模块的耦合、内聚、作用范围与控制范围的关系等都对可修改性有影响。</p>
</li>
</ol>
<p><strong>软件文档与软件维护</strong>：</p>
<p><u>软件文档是软件可维护性的决定因素。</u>文档是软件产品的一部分，并且编写高质量的文档可以提高软件开发的质量。</p>
<p>软件系统的文档分为：</p>
<ul>
<li><strong>用户文档</strong>：主要描述<u>系统功能</u>和<u>使用方法</u>，并<u>不关心</u>这些<u>功能是怎样实现的</u>；</li>
<li><strong>系统文档</strong>：描述<u>系统设计、实现和测试</u>等各方面的内容。</li>
</ul>
<p>可维护性是所有软件都应具有的基本特点，必须在开发阶段保证软件具有可维护的特点。在软件工程的每一个阶段都应考虑并提高软件的可维护性，在每个阶段结束前的技术审查和管理复查中应该着重对可维护性进行复审（如将来要改进的部分和可能会修改的部分）。</p>
<p>维护应该针对整个软件配置，不应该只修改源程序代码。</p>
<h2 id="软件维护" data-numberify>软件维护<a class="anchor ms-1" href="#软件维护"></a></h2>
<p>软件维护主要是指<u>根据需求变化或硬件环境的变化对应用程序进行部分或全部修改</u>。修改时应充分利用源程序，<u>修改后要填写程序修改登记表</u>，并<u>在程序变更通知书上写明新旧程序的不同之处</u>。</p>
<p>软件维护的内容一般有以下几个方面：</p>
<ol>
<li>
<p><strong>正确性维护</strong>：指<u>改正在系统开发阶段已发生而系统测试阶段尚未发现的错误</u>。</p>
<p>所发现的错误有：</p>
<ul>
<li>不太重要、不影响系统正常运行的错误，其维护工作可随时进行；</li>
<li>非常重要的错误，甚至会影响整个系统的正常运行，其维护工作必须制定计划，进行修改，并且要进行复查和控制。</li>
</ul>
</li>
<li>
<p><strong>适应性维护</strong>：<u>使应用软件适应信息技术变化和管理需求变化而进行的修改。</u></p>
</li>
<li>
<p><strong>完善性维护</strong>：<u>为扩充功能和改善性能而进行的修改</u>。</p>
<ul>
<li>主要是指对已有的软件系统增加一些在系统分析和设计阶段中没有规定的功能与性能特征。</li>
<li>还包括对处理效率和编写程序的改进，关系到系统开发质量的重要方面。</li>
</ul>
<p>这方面的维护还要注意将相关的文档资料加入到前面相应的文档中。</p>
</li>
<li>
<p><strong>预防性维护</strong>：<u>为了改进应用软件的可靠性和可维护性，为了适应未来的软/硬件环境的变化，应主动增加预防性的新的功能，以使应用系统适应各类变化而不被淘汰。</u></p>
<p>例如将专用报表功能改成通用报表生成功能，以适应将来报表格式的变化。</p>
</li>
</ol>
<p>这4个维护内容中，正确性和完善性维护是针对来自系统内部的维护，适应性和预防性是针对来自系统外部的维护。</p>
<ul>
<li>
<p>正确性维护针对的是系统内部的错误。</p>
<p>来自系统内部的，与错误有关的都是属于正确性维护。</p>
</li>
<li>
<p>完善性维护针对的是系统内部与功能、性能等方面有关的维护。</p>
<p>来自系统内部的，与系统功能、性能等方面有关的改善都是完善性维护。完善性维护的需求可以来自外部，例如功能的扩展。</p>
</li>
<li>
<p>适应性维护是针对来自系统外部的技术、管理需求等方面的变化。</p>
<p>针对来自系统外部的变化，系统功能等方面没有缺失，仅仅只是适应当前环境变化所做的更改，都是属于适应性维护。</p>
</li>
<li>
<p>预防性维护针对的是未来的环境变化。</p>
</li>
</ul>
<hr>
<h1 id="项目管理" data-numberify>项目管理<a class="anchor ms-1" href="#项目管理"></a></h1>
<h2 id="沟通路径" data-numberify>沟通路径<a class="anchor ms-1" href="#沟通路径"></a></h2>
<p>沟通图是指项目中人员或部门之间的沟通用一条无向边连接起来，所构成图即为沟通图。沟通图中的路径称为沟通路径。</p>
<p>软件项目中沟通路径$m$的计算公式（人数$n$）：</p>
<ul>
<li>
<p>沟通图中无主程序员时：</p>
<p>$$
m = \sum_{i=1}^{n} i-1 = \cfrac{(n-1)n}{2}
$$</p>
</li>
<li>
<p>沟通图中有主程序员时：</p>
<p>$$
m = n - 1
$$</p>
</li>
</ul>
<h2 id="软件项目估算" data-numberify>软件项目估算<a class="anchor ms-1" href="#软件项目估算"></a></h2>
<p>软件项目估算涉及人、技术、环境等多种因素，很难在项目完成前准确地估算出开发软件所需的成本、持续时间和工作量。所以需要一些方法和技术来支持项目的估算，常用的估算方法有下列3种：</p>
<ol>
<li>
<p>基于已经完成的类似项目进行估算（常用）。</p>
</li>
<li>
<p>基于分解技术进行估算。</p>
</li>
<li>
<p>基于经验估算模型的估算。</p>
<p>典型的经验估算模型有：</p>
<ul>
<li>IBM估算模型</li>
<li>CoCoMo模型</li>
<li>Putnam模型</li>
</ul>
</li>
</ol>
<p>上述方法可以组合使用，以提高估算的精度。</p>
<h3 id="cocomo-估算模型" data-numberify>COCOMO 估算模型<a class="anchor ms-1" href="#cocomo-估算模型"></a></h3>
<p>COCOMO模型是一种精确的、易于使用的成本估算模型。COCOMO模型按其详细程度分为：</p>
<ol>
<li>
<p><strong>基本COCOMO模型</strong>：是一个<u>静态单变量模型</u>，用于对整个软件系统进行估算。</p>
<p>公式如下：</p>
<p>$$
E = a(L)^b \\
D=cE^d
$$</p>
<ul>
<li>$E$：工作量，单位是人月；</li>
<li>$D$：开发时间，单位是月；</li>
<li>$L$：项目的源代码行估计值，不包括程序中的注释及文档，其单位是千行代码；</li>
<li>$a$、$b$、$c$、$d$：常数。</li>
</ul>
<p>基本COCOMO模型可通过估算代码行的值$L$，然后计算开发工作量$E$和开发时间$D$的估算值。</p>
</li>
<li>
<p><strong>中级COCOMO模型</strong>：是一个<u>静态多变量模型</u>，它<u>将软件系统模型分为系统和部件两个层次</u>，系统由部件构成，它把软件开发所需的人力（成本）看作是程序大小和一系列“成本驱动属性”的函数。</p>
<p>中级COCOMO模型以基本COCOMO模型为基础，并考虑了15种影响软件工作量的因素，通过工作量调节因子（EAF）修正对工作量的估算，从而使估算更合理。其公式如下：</p>
<p>$$
E = a(L)^b \cdot EAF
$$</p>
<ul>
<li>$L$：软件产品的目标代码行数，单位是千行代码数；</li>
<li>$EAF$：工作量调节因子；</li>
<li>$a$、$b$：常数。</li>
</ul>
</li>
<li>
<p><strong>详细COCOMO模型</strong>：<u>将软件系统模型分为系统、子系统和模块3个层次</u>，除包括中级模型所考虑的因素外，还考虑了在需求分析、软件设计等每一步的成本驱动属性的影响。</p>
</li>
</ol>
<h3 id="cocomoii模型" data-numberify>COCOMOII模型<a class="anchor ms-1" href="#cocomoii模型"></a></h3>
<p>和其前身COCOMO一样，COCOMOII也是一种层次结构的估算模型，被分为3个阶段性模型，分别对应三种不同的规模估算选择：</p>
<ol>
<li>
<p><strong>应用组装模型</strong>：在软件工程的前期阶段使用，这时用户界面的原型开发、对软件和系统交互的考虑、性能的评估以及技术成熟度的评价是最重要的。</p>
<p>规模估算选择：<strong>对象点</strong>。</p>
</li>
<li>
<p><strong>早期设计阶段模型</strong>：在需求己经稳定并且基本的软件体系结构己经建立时使用。</p>
<p>规模估算选择：<strong>功能点</strong>。功能点可转换为代码行。</p>
</li>
<li>
<p><strong>体系结构阶段模型</strong>：在软件的构造过程中使用。</p>
<p>规模估算选择：<strong>代码行</strong>。</p>
</li>
</ol>
<h3 id="总结-2" data-numberify>总结<a class="anchor ms-1" href="#总结-2"></a></h3>
<p>COCOMO模型：</p>
<table>
<thead>
<tr>
<th style="text-align:center">模型分类</th>
<th style="text-align:left">类型或说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">基本COCOMO模型</td>
<td style="text-align:left">静态单变量模型，对整个软件系统进行估算</td>
</tr>
<tr>
<td style="text-align:center">中级COCOMO模型</td>
<td style="text-align:left">静态多变量模型，将系统模型分为系统和部件2个层次</td>
</tr>
<tr>
<td style="text-align:center">详细COCOMO模型</td>
<td style="text-align:left">将系统模型分为系统、子系统和模块3个层次</td>
</tr>
<tr>
<td style="text-align:center">COCOMOII</td>
<td style="text-align:left">层次结构，分为应用组装模型、早期设计阶段模型和体系结构阶段模型</td>
</tr>
</tbody>
</table>
<p>COCOMOII的使用时期及规模估算选择：</p>
<table>
<thead>
<tr>
<th style="text-align:center">阶段性模型</th>
<th style="text-align:center">规模估算选择</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">应用组装模型</td>
<td style="text-align:center">对象点</td>
</tr>
<tr>
<td style="text-align:center">早期设计阶段模型</td>
<td style="text-align:center">功能点</td>
</tr>
<tr>
<td style="text-align:center">体系结构阶段模型</td>
<td style="text-align:center">代码行</td>
</tr>
</tbody>
</table>
<h2 id="进度管理" data-numberify>进度管理<a class="anchor ms-1" href="#进度管理"></a></h2>
<p>进度安排：</p>
<p>为监控软件项目的进度计划和工作的实际进展情况，表示各项任务之间进度的相互依赖关系，需要采用图示的方法。在图中明确标明如下内容：</p>
<ol>
<li>各个任务的<u>计划开始时间</u>和<u>计划完成时间</u>。</li>
<li>各个任务的<u>完成标志</u>。</li>
<li>各个任务与<u>参与工作的人数</u>，各个任务与<u>工作量之间的衔接情况</u>。</li>
<li>完成各个任务所需的<u>物理资源</u>和<u>数据资源</u>。</li>
</ol>
<p>进度安排的常用图形描述方法有：</p>
<ul>
<li>Gantt图（甘特图）；</li>
<li>项目计划评审技术（Program Evaluation&amp;Review Technique，PERT）图。</li>
</ul>
<h3 id="gantt图" data-numberify>Gantt图<a class="anchor ms-1" href="#gantt图"></a></h3>
<p>Gantt图：一种<u>简单的水平条形图</u>，它<u>以日历为基准</u>描述项目任务。</p>
<ul>
<li>
<p>垂直轴：表示<u>多个不同的任务</u>，每个任务按照左侧任务名称垂直排列。</p>
</li>
<li>
<p>水平轴：表示<u>日历时间线</u>（如时、天、周、月和年等）。</p>
<p>每个水平条表示一个任务：</p>
<ul>
<li>每一水平条的<u>起点</u>：表示该任务的<u>开始时间</u>；</li>
<li>每一水平条的<u>终点</u>：表示该任务的<u>结束时间</u>；</li>
<li>每一水平条的<u>长度</u>：表示<u>完成该任务的持续时间</u>。</li>
</ul>
<p>当日历中同一时段存在多个水平条时，表示任务之间的并发。</p>
</li>
</ul>
<p>如图：</p>
<p><picture><img class="img-fluid " alt="Gantt图示例" src="/docs/ruan-she/software-engineering/uTools_1683683731050.png" loading="lazy" width="795" height="282" />
</picture>

</p>
<ul>
<li>
<p>Gantt图优点：</p>
<p>能清晰地描述：</p>
<ul>
<li>每个任务的开始时间；</li>
<li>每个任务的结束时间；</li>
<li>任务的进展情况；</li>
<li>各个任务之间的并行性。</li>
</ul>
</li>
<li>
<p>Gantt图缺点：</p>
<ul>
<li>不能清晰地反映各任务之间的<u>依赖关系</u>；</li>
<li>难以确定<u>整个项目的关键所在</u>，即不能清晰地确定影响进度的<u>关键任务</u>；</li>
<li>不能反映<u>计划中有潜力的部分</u>。</li>
</ul>
</li>
</ul>
<h3 id="pert图" data-numberify>PERT图<a class="anchor ms-1" href="#pert图"></a></h3>
<p>PERT图是一个<u>有向图</u>：</p>
<ul>
<li>
<p><strong>弧</strong>：表示<strong>任务</strong>。</p>
<p>任务包含以下成分：</p>
<ul>
<li>
<p><u>完成该任务所需的时间</u>（任务持续时间）。</p>
</li>
<li>
<p><u>松弛时间</u>（Slack Time）：表示在<u>不影响整个工期的前提下完成该任务有多少机动余地</u>。</p>
<p>即松弛时间指当前任务的工期可以推迟的时间。</p>
</li>
</ul>
<p>空任务：用虚线箭头表示，表示任务间的关系所添加。完成空任务的所需时间为0。</p>
</li>
<li>
<p><strong>结点</strong>：表示<strong>事件</strong>。</p>
<p>事件是流入结点的任务的结束，或流出结点的任务的开始。事件<u>表示某个时间点</u>，本身不消耗时间和资源。</p>
<p>事件包含以下成分：</p>
<ul>
<li>事件号。</li>
<li>出现该事件的<strong>最早时刻</strong>：表示在此时刻之前从该事件出发的任务不可能开始。</li>
<li>出现该事件的<strong>最迟时刻</strong>：表示从该事件出发的任务最迟在此时刻开始，否则整个工程就不能如期完成。</li>
</ul>
<p><u>只有当流入该结点的所有任务都结束时，结点所表示的事件才出现，流出结点的任务才可以开始。</u></p>
<p>特殊的事件：</p>
<ul>
<li>开始事件：没有任何任务流向该事件；</li>
<li>结束事件：没有任务任务从该事件流出。</li>
</ul>
<p>一个项目是从开始事件开始到结束事件结束。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="PERT图示例" src="/docs/ruan-she/software-engineering/uTools_1683684995281.png" loading="lazy" width="850" height="490" />
</picture>

</p>
<p>设：</p>
<ul>
<li>$T(e)$：完成任务$e$的所需时间；</li>
<li>$T_s(e)$：完成任务$e$的松弛时间；</li>
<li>$T_e(v)$：事件$v$的最早时刻；</li>
<li>$T_l(v)$：事件$v$的最迟时刻。</li>
</ul>
<p>PERT图各成分取值（不一定需要满足下面的关系，但是可以用下面的式子推出）：</p>
<ul>
<li>
<p>事件$V_{in}$的<u>最早时刻</u>$T_e(V_{in})$：</p>
<ul>
<li>
<p>只有一个任务流入时，设该任务的流出事件为$V_{out}$，则该任务为$&lt;V_{out}, V_{in}&gt;$：</p>
<p>$$
T_e(V_{in}) = T_e(V_{out}) + T
$$</p>
<blockquote>
<p>这里将$T(&lt;V_{out}, V_{in}&gt;)$简写为了$T$。</p>
</blockquote>
<p>即：<u>该流入任务的流出事件的最早时刻</u> + <u>完成该流入任务的所需时间</u>。</p>
</li>
<li>
<p>多个任务流入时，设与每个任务相对应的流出事件为$V_{out}[ \ i \ ]$，则这些任务为$&lt;V_{out}[ \ i \ ], V_{in}&gt;$：</p>
<p>$$
T_e(V_{in}) = Max(T_e(V_{out}[ \ i \ ]) + T_i)
$$</p>
<blockquote>
<p>这里将$T(&lt;V_{out}[ \ i \ ], V_{in}&gt;)$简写为了$T_i$。</p>
</blockquote>
<p>即<u>流入该事件的每个任务计算出的最早时刻的最大值</u>。</p>
</li>
<li>
<p>开始事件$V_{start}$：</p>
<p>$$
T_e(V_{start}) = 0
$$</p>
</li>
</ul>
</li>
<li>
<p>事件$V_{out}$的<u>最迟时刻</u>$T_l(V_{out})$：</p>
<ul>
<li>
<p>只有一个任务流出时，设该任务的流入事件为$V_{in}$，则该任务为$&lt;V_{out}, V_{in}&gt;$：</p>
<p>$$
T_l(V_{out}) = T_l(V_{in}) - (T + T_s)
$$</p>
<blockquote>
<p>这里将$T_s(&lt;V_{out}, V_{in}&gt;)$简写为$T_s$。</p>
</blockquote>
<p>即：<u>该流出任务的流入事件的最迟时刻</u> -（<u>该流出任务的所需时间</u> + <u>松弛时间</u>）。</p>
<p>如果松弛时间未知或为0：</p>
<p>$$
T_l(V_{out}) = T_l(V_{in}) - T
$$</p>
</li>
<li>
<p>多个任务流出时，设与每个任务相对应的流入事件为$V_{in}[ \ i \ ]$，则这些任务为$&lt;V_{out}, V_{in}[ \ i \ ]&gt;$：</p>
<p>$$
T_l(V_{out}) = Min(T_l(V_{in}[ \ i \ ]) - (T_i + S_i))
$$</p>
<blockquote>
<p>这里把$T(&lt;V_{out}, V_{in}[ \ i \ ]&gt;)$简写为$T_i$，把$T_s(&lt;V_{out}, V_{in}[ \ i \ ]&gt;)$简写为$S_i$。</p>
</blockquote>
<p>即<u>流出该事件的每个任务计算出的最晚时刻的最大值</u>。</p>
<p>如果松弛时间未知或为0：</p>
<p>$$
T_l(V_{out}) = Min(T_l(V_{in}[ \ i \ ]) - T_i)
$$</p>
</li>
<li>
<p>结束事件$V_{end}$：</p>
<p>$$
T_l(V_{end}) = T_e(V_{end})
$$</p>
<p>即<u>结束事件的最早时刻与最迟时刻相等</u>。</p>
</li>
</ul>
</li>
<li>
<p>设某任务的流入事件为$V_{in}$，流出事件为$V_{out}$，则该任务$&lt;V_{out}, V_{in}&gt;$的<u>松弛时间</u>$T_s(&lt;V_{out}, V_{in}&gt;)$。</p>
<p>$$
T_s = T_l(V_{in}) - T - T_e(V_{out})
$$</p>
<p>即，该任务的流入事件的最迟时刻 - 该任务的所需时间 - 该任务的流出事件的最早时刻</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="PERT图公式参照图" src="/docs/ruan-she/software-engineering/uTools_1683719224977.png" loading="lazy" width="931" height="341" />
</picture>

</p>
<p>PERT图的路径：从开始事件到结束事件的一条通路。</p>
<p>PERT图的<strong>关键路径</strong>：指<u>所有的任务的松弛时间都为0的路径</u>。</p>
<p>关键路径的长度：指结束事件的最早（或最晚）时刻。</p>
<p><picture><img class="img-fluid " alt="PERT图的关键路径示例" src="/docs/ruan-she/software-engineering/uTools_1683706944555.png" loading="lazy" width="785" height="457" />
</picture>

</p>
<p>关键路径的特点：</p>
<ul>
<li>
<p>所有任务的松弛时间都为0。</p>
</li>
<li>
<p>每个事件的最早时刻和最迟时刻都是相等的。</p>
</li>
<li>
<p>所有任务持续时间的和，是PERT图所有路径中最大的，并且与结束事件的最早时刻（或最晚时刻）相等。</p>
<p>设关键路径中所有事件为$V_i$（$i = 1, 2, \cdots, n$），且该路径下的任务为$&lt;V_j, V_{j+1}&gt;$（$1 \le j \le n-1$）（表示$V_1$是开始事件，$V_2$是$V_1$往下的一个事件，以此类推，$V_n$是结束事件），那么该关键路径结束事件的最早时刻（或最晚时刻）为：</p>
<p>$$
T_e(V_n) = \sum_{i = 1}^{n-1} T_i
$$</p>
<blockquote>
<p>这里$T_i$代表$T(&lt;V_i, V_{i+1}&gt;)$。</p>
</blockquote>
</li>
</ul>
<p>最迟时刻的另一种求法（PERT图存在关键路径的情况下）：</p>
<p>已知某PERT图结束事件的最晚时刻（最早时刻），该PERT图中某一条路径（假设该路径没有分支）中所有事件为$V_j$（$j = 1, 2, \cdots, n$），且该路径下的任务为$&lt;V_k, V_{k+1}&gt;$（$1 \le k \le n-1$），该路径下任务的持续时间$T(&lt;V_{k-1}, V_k&gt;)$已知，（即$V_1$是开始事件，按照次序往下，$V_n$是结束事件），计算某一事件的最迟时刻$T_l(V_i)$（$1 \le i &lt; n$）：</p>
<p>$$
T_l(V_i) = T_l(V_n) - \sum_{j = i}^{n - 1} T_j
$$</p>
<blockquote>
<p>这里$T_j$代表$T(&lt;V_j, V_{j + 1}&gt;)$。</p>
</blockquote>
<p>即：<u>结束事件的最晚时刻</u> - <u>该事件到结束事件之间所有的任务的持续时间总和</u>。</p>
<blockquote>
<p>注意：如果事件$V_i$到结束事件之间存在多条路径，应该选择那条任务持续时间总和最大的路径。</p>
</blockquote>
<p>PERT图的优点：</p>
<ul>
<li>给出了每个任务的开始时间、结束时间和完成该任务所需的时间；</li>
<li>给出了任务之间的关系（依赖关系）。即任务之间的执行顺序。</li>
</ul>
<p>PERT图不能清晰地描述任务之间的并行情况。</p>
<h3 id="项目活动图" data-numberify>项目活动图<a class="anchor ms-1" href="#项目活动图"></a></h3>
<p>项目活动图是一种有向图（与PERT图十分类似）：</p>
<ul>
<li>
<p>弧：表示活动。弧的权值表示活动的持续时间。</p>
</li>
<li>
<p>顶点：表示项目里程碑。</p>
<p>特殊的里程碑：</p>
<ul>
<li>开始里程碑：没有任何活动指向该里程碑；</li>
<li>结束里程碑：没有任何活动从该里程碑指出。</li>
</ul>
</li>
</ul>
<p>项目活动图的关键路径：按照PERT图的方法求出松弛时间为0的、从开始里程碑到结束里程碑的路径。</p>
<p>关键路径的长度：为结束里程碑的最早时刻（或最晚时刻）。它可以用来表示项目完成的最少时间。</p>
<h2 id="软件配置管理" data-numberify>软件配置管理<a class="anchor ms-1" href="#软件配置管理"></a></h2>
<p>在软件开发过程中变更是不可避免的，而变更时由于没有进行变更控制，可能加剧了项目中的混乱。为了协调软件开发使得混乱减到最小，使用配置管理技术，使变更所产生的错误达到最小并最有效地提高生产率。</p>
<p>软件配置管理（Software Configure Management，SCM）用于整个软件工程过程，它是一组管理整个软件生存周期中各阶段变更的活动。</p>
<p>软件配置管理的主要目标包括：</p>
<ul>
<li>标识变更</li>
<li>控制变更</li>
<li>版本控制</li>
<li>确保变更正确地实现</li>
<li>报告有关变更</li>
</ul>
<p>主要内容有两种版本：</p>
<ol>
<li>
<ul>
<li>版本管理</li>
<li>配置支持</li>
<li>变更支持</li>
<li>过程支持</li>
<li>团队支持</li>
<li>变化报告</li>
<li>审计支持</li>
</ul>
</li>
<li>
<ul>
<li>软件配置标识</li>
<li>变更管理</li>
<li>版本控制</li>
<li>系统建立</li>
<li>配置审核</li>
<li>配置状态报告</li>
</ul>
</li>
</ol>
<h3 id="变更控制" data-numberify>变更控制<a class="anchor ms-1" href="#变更控制"></a></h3>
<p>变更控制是一项最重要的软件配置任务。为了有效地实现变更控制，需借助于配置数据库和基线的概念。</p>
<p>基线：是软件生存周期中各开发阶段的一个特定点，它的作用是使各开发阶段的工作划分更加明确，使本来连续的工作在这些点上断开，以便于检查与肯定阶段成果。</p>
<p>基线可以作为一个检查点。在开发过程中，当采用的基线发生错误时可以知道所处的位置，返回到最近和最恰当的基线上。</p>
<p>配置数据库可分为以下3类：</p>
<ul>
<li>
<p><strong>开发库</strong>：专供开发人员使用，其中的信息可能做频繁修改，对其控制相当宽松。</p>
</li>
<li>
<p><strong>受控库</strong>：在生存期某一阶段工作结束时发布的阶段产品，这些是与软件开发工作相关的计算机可读信息和人工可读信息。</p>
<p>软件配置管理正是对受控库中的各个软件项进行管理，受控库也称为<strong>软件配置库</strong>。</p>
</li>
<li>
<p><strong>产品库</strong>：在开发的软件产品完成系统测试后，作为最终产品存入产品库，等待交付用户或现场安装。</p>
</li>
</ul>
<h3 id="风险管理" data-numberify>风险管理<a class="anchor ms-1" href="#风险管理"></a></h3>
<p>一般认为软件风险包含两个特性：</p>
<ul>
<li><strong>不确定性</strong>：指风险可能发生也可能不发生；</li>
<li><strong>损失</strong>：指如果风险发生，就会产生恶性后果。</li>
</ul>
<p>在进行风险分析时，重要的是量化每个风险的：</p>
<ul>
<li>不确定程度</li>
<li>损失程度</li>
</ul>
<p>项目风险威胁到项目计划。项目风险是指以下各方面的潜在问题以及它们对软件项目的影响：</p>
<ul>
<li>预算</li>
<li>进度</li>
<li>人员：聘用职员及组织</li>
<li>资源</li>
<li>利益相关者</li>
<li>需求</li>
</ul>
<p>以下方面的不确定性也属于项目风险因素：</p>
<ul>
<li>项目复杂度</li>
<li>项目规模</li>
<li>项目结构</li>
</ul>
<p>技术风险威胁到要开发软件的质量及交付时间。技术风险是指以下方面的潜在问题：</p>
<ul>
<li>设计</li>
<li>实现</li>
<li>接口</li>
<li>验证</li>
<li>维护</li>
</ul>
<p>以下方面也属于技术风险因素：</p>
<ul>
<li>规格说明的歧义性</li>
<li>技术的不确定性</li>
<li>技术陈旧</li>
<li>“前沿”技术</li>
</ul>
<p>商业风险威肋到要开发软件的生存能力，且常常会危害到项目或产品。5个主要的商业风险如下：</p>
<ul>
<li><strong>市场风险</strong>：开发了一个没有人真正需要的优良产品或系统。</li>
<li><strong>策略风险</strong>：开发的产品不再符合公司的整体商业策略。</li>
<li><strong>销售风险</strong>：开发了一个销售部门不知道如何去销售的产品。</li>
<li><strong>管理风险</strong>：由于重点的转移或人员的变动而失去了高级管理层的支持。</li>
<li><strong>预算风险</strong>：没有得到预算或人员的保证。</li>
</ul>
<p>Charette提出的风险分类方式：</p>
<ul>
<li>
<p><strong>己知风险</strong>：</p>
<p>通过仔细<u>评估以下内容可以发现</u>的风险：</p>
<ul>
<li><u>项目计划</u></li>
<li><u>开发项目的商业和技术环境</u></li>
<li>其他可靠的信息来源，如：
<ul>
<li><u>不现实的交付时间</u></li>
<li><u>没有文档化需求或文档化软件范围</u></li>
<li><u>恶劣的开发环境</u></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>可预测风险</strong>：</p>
<p>能够<u>从过去项目的经验中推断出来</u>的风险，如：</p>
<ul>
<li>人员变动</li>
<li>与客户缺乏沟通</li>
<li>由于正在进行维护而使开发人员精力分散</li>
</ul>
</li>
<li>
<p><strong>不可预测风险</strong>：可能会真的出现，但<u>很难事先识别</u>。</p>
</li>
</ul>
<h4 id="风险识别" data-numberify>风险识别<a class="anchor ms-1" href="#风险识别"></a></h4>
<p><strong>风险识别</strong>试图<u>系统化地指出对项目计划（估算、进度、资源分配等）的威胁</u>。<u>识别出已知风险和可预测风险后，项目管理者</u>首先要做的是：</p>
<ul>
<li><u>在可能时回避这些风险</u>；</li>
<li><u>在必要时控制这些风险</u>。</li>
</ul>
<p>识别风险的一种方法是<u>建立风险条目检查表</u>，主要用来识别下列几种类型中的一些已知风险和可预测风险：</p>
<ul>
<li><strong>产品规模</strong>：与要开发或要修改的软件的总体规模相关的风险。</li>
<li><strong>商业影响</strong>：与管理者或市场所施加的约束相关的风险。</li>
<li><strong>客户特性</strong>：与客户的素质以及开发者和客户定期沟通的能力相关的风险。</li>
<li><strong>过程定义</strong>：与软件过程定义的程度以及该过程被开发组织遵守的程度相关的风险。</li>
<li><strong>开发环境</strong>：与用来开发产品的工具的可得性及质量相关的风险。</li>
<li><strong>开发技术</strong>：与待开发软件的复杂性及系统所包含技术的“新奇性”相关的风险。</li>
<li><strong>人员才干及经验</strong>：与软件工程师的总体技术水平及项目经验相关的风险。</li>
</ul>
<p>与上述每个主题相关的问题可以针对每一个软件项目来回答。根据这些问题的答案，项目管理者就可以估计风险产生的影响。</p>
<p>另一种风险条目检查表格式：仅仅列出与每一种类型有关的特性，最终给出<u>一组风险因素和驱动因子以及它们发生的概率</u>。</p>
<p>风险因素包括：</p>
<ul>
<li><strong>性能</strong>：性能风险是指产品能够满足需求且符合其使用目的的不确定程度。</li>
<li><strong>成本</strong>：成本风险是指能够维持项目预算的不确定程度。</li>
<li><strong>支持</strong>：支特风险是指开发出的软件易于纠错、修改及升级的不确定程度。</li>
<li><strong>进度</strong>：进度风险是指能够维持项目进度且按时交付产品的不确定程度。</li>
</ul>
<h4 id="风险预测" data-numberify>风险预测<a class="anchor ms-1" href="#风险预测"></a></h4>
<p><strong>风险预测</strong>又称<strong>风险估计</strong>，它试图从两个方面评估一个风险：</p>
<ul>
<li>风险发生的可能性或概率；</li>
<li>发生风险所产生的后果。</li>
</ul>
<p>通常，项日计划人员与管理人员、技术人员一起进行以下4步<u>风险预测活动</u>：</p>
<ol>
<li>建立一个尺度或标准，以反映风险发生的可能性。</li>
<li>描述风险产生的后果。</li>
<li>估算风险对项目和产品的影响。</li>
<li>标注风险预测的整体精确度，以免产生误解。</li>
</ol>
<p>一种简单的风险预测技术是建立风险表：</p>
<ul>
<li>
<p>第1列：列出所有的风险（由风险识别活动得到)；</p>
</li>
<li>
<p>第2~4列：列出每个风险的：</p>
<ul>
<li>种类</li>
<li>发生的概率</li>
<li>所产生的影响</li>
</ul>
<p>风险所产生的影响可用一个数字来表示：</p>
<ul>
<li>“1”：表示灾难性的；</li>
<li>“2”：表示严重的；</li>
<li>“3”：表示轻微的；</li>
<li>“4”：表示可忽略的。</li>
</ul>
</li>
</ul>
<p>评估风险影响：</p>
<p>发生风险时，有3个因素可能会影响风险所产生的后果：</p>
<ul>
<li>
<p>风险的<strong>本质</strong>：指当风险发生时可能带来的问题。</p>
</li>
<li>
<p>风险的<strong>范围</strong>：</p>
<p>包括：</p>
<ul>
<li>风险的严重性；</li>
<li>风险的整体分布情况：项目中有多少部分受到影响或有多少客户受到损害。</li>
</ul>
</li>
<li>
<p>风险的<strong>时间</strong>：</p>
<ul>
<li>何时能够感受到风险的影响；</li>
<li>风险的影响会持续多长时间。</li>
</ul>
</li>
</ul>
<h4 id="风险优先级" data-numberify>风险优先级<a class="anchor ms-1" href="#风险优先级"></a></h4>
<p>在进行项目风险管理时，根据风险的优先级来确定风险控制策略。</p>
<ul>
<li><strong>风险优先级</strong>：<u>是根据风险暴露来确定的。</u></li>
<li><strong>风险暴露</strong>：是一种量化风险影响的指标。</li>
</ul>
<p>整体的风险显露度（Risk Exposure，RE）可由下面的关系确定：</p>
<p>$$
RE = P \times C
$$</p>
<ul>
<li>$P$：风险发生的概率；</li>
<li>$C$:风险发生时带来的项目成本。</li>
</ul>
<p>即风险暴露等于风险影响乘以风险概率。风险影响是指当风险发生时造成的损失。</p>
<h4 id="风险评估" data-numberify>风险评估<a class="anchor ms-1" href="#风险评估"></a></h4>
<p>在进行风险评估时，建立了如下形式的三元组：</p>
<p>$$
(r_i, l_i, x_i)
$$</p>
<ul>
<li>$r_i$：表示风险；</li>
<li>$l_i$：表示风险发生的概率；</li>
<li>$x_i$：表示风险产生的影响。</li>
</ul>
<p>一种对风险评估很有用的技术就是<u>定义风险参照水准</u>。对于大多数软件项目来说，有3种典型的风险参照水准</p>
<ul>
<li>成本：成本是否超支</li>
<li>进度：进程是否延期</li>
<li>性能：性能是否下降</li>
</ul>
<p>在风险评估过程中，需要执行以下4个步骤：</p>
<ol>
<li>定义项目的风险参考水平值。</li>
<li>建立每一组$(r_i, l_i, x_i)$与每一个参考水平值之间的关系。</li>
<li>预测一组临界点以定义项目终止区域，该区域由一条曲线或不确定区域所界定。</li>
<li>预测什么样的风险组合会影响参考水平值。</li>
</ol>
<h4 id="风险控制" data-numberify>风险控制<a class="anchor ms-1" href="#风险控制"></a></h4>
<p>风险控制的目的是<u>辅助项目组建立处理风险的策略</u>。一个有效的策略必须考虑以下3个问题：</p>
<ul>
<li>
<p><strong>风险避免</strong>：</p>
<p>应对风险的<u>最好办法是主动地避免风险</u>，即<u>在风险发生前分析引起风险的原因，然后采取措施，以避免风险的发生</u>。</p>
</li>
<li>
<p><strong>风险监控</strong>：</p>
<p>项目管理者应监控某些因素，这些因素可以提供风险是否正在变高或变低的指示。</p>
</li>
<li>
<p>RMMM计划：</p>
<p>风险管理策略可以包含在软件项目计划中，或者风险管理步骤也可以组织成一个独立的风险缓解、监控和管理计划（RMMM计划）。</p>
<p>RMMM计划将所有风险分析工作文档化，并由项目管理者作为整个项目计划中的一部分来使用。</p>
<p>建立了RMMM计划，而且项目己经启动之后，风险缓解及监测步骤也就开始了：</p>
<ul>
<li>
<p>风险缓解：一种问题规避活动。</p>
</li>
<li>
<p>风险监测：一种项目跟踪活动。</p>
<p>这种监测活动有3个主要目的：</p>
<ul>
<li>评估所预测的风险是否真的发生了；</li>
<li>保证正确地实施了各风险的缓解步骤；</li>
<li>收集能够用于今后风险缝隙的信息。</li>
</ul>
</li>
</ul>
<p>风险监测的另一个任务就是试图找到“起源”（在整个项目中是哪些风险引起了哪些问题）。</p>
</li>
</ul>
<h4 id="总结-3" data-numberify>总结<a class="anchor ms-1" href="#总结-3"></a></h4>
<p>风险分类总结：</p>
<table>
<thead>
<tr>
<th style="text-align:center">分类</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">项目风险</td>
<td style="text-align:left">威胁到项目计划。<p>风险因素：<br>预算、进度、人员、资源和利益相关者，项目复杂度、规模和结构的不确定性</p></td>
</tr>
<tr>
<td style="text-align:center">技术风险</td>
<td style="text-align:left">威胁到软件的质量及交付时间。<p>风险因素：<br>设计、实现、接口、验证和维护，规格说明的歧义性、技术的不确定性、技术陈旧和使用“前沿”技术</p></td>
</tr>
<tr>
<td style="text-align:center">市场风险</td>
<td style="text-align:left">开发了一个没有人真正需要的产品或系统。</td>
</tr>
<tr>
<td style="text-align:center">策略风险</td>
<td style="text-align:left">开发的产品不再符合公司的整体商业策略。</td>
</tr>
<tr>
<td style="text-align:center">销售风险</td>
<td style="text-align:left">开发了一个销售部门不知道如何去销售的产品。</td>
</tr>
<tr>
<td style="text-align:center">管理风险</td>
<td style="text-align:left">由于重点的转移或人员的变动而失去了高级管理层的支持。</td>
</tr>
<tr>
<td style="text-align:center">预算风险</td>
<td style="text-align:left">没有得到预算或人员的保证。</td>
</tr>
</tbody>
</table>
<p>风险管理总结：</p>
<table>
<thead>
<tr>
<th style="text-align:center">风险管理</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">风险识别</td>
<td style="text-align:left">指出对项目计划的威胁。可通过建立风险条目检查表识别。</td>
</tr>
<tr>
<td style="text-align:center">风险预测</td>
<td style="text-align:left">从风险发生的可能性或概率、风险产生的后果评估可能发生的风险。</td>
</tr>
<tr>
<td style="text-align:center">风险评估</td>
<td style="text-align:left">从风险发生的概率和产生的影响评估风险。可用定义风险参照水准技术评估。</td>
</tr>
<tr>
<td style="text-align:center">风险控制</td>
<td style="text-align:left">目的是辅助项目建立处理风险的策略。策略是风险避免、风险监控和RMMM计划。</td>
</tr>
<tr>
<td style="text-align:center">风险避免</td>
<td style="text-align:left">应对风险的最好办法是主动地避免风险。</td>
</tr>
<tr>
<td style="text-align:center">风险监控</td>
<td style="text-align:left">项目管理者应监控某些可以提供风险高低变化指示的因素。</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="软件质量" data-numberify>软件质量<a class="anchor ms-1" href="#软件质量"></a></h1>
<h2 id="软件质量特性的度量" data-numberify>软件质量特性的度量<a class="anchor ms-1" href="#软件质量特性的度量"></a></h2>
<p>可靠性、可用性和可维护性是软件的质量属性，软件工程中，用$0 \sim 1$之间的数来度量。</p>
<ul>
<li>
<p>可靠性：指一个系统对于<u>给定的时间间隔内、在给定条件下无失效运作的概率</u>。</p>
<p>可以用$\cfrac{MTTF}{1+MTTF}$来度量。</p>
<p>$MTTF$为<u>平均无故障时间</u>。</p>
</li>
<li>
<p>可用性：指<u>在给定的时间点上</u>，一个<u>系统能够按照规格说明正确运作的概率</u>。</p>
<p>可以用$\cfrac{MTBF}{1+MTBF}$来度量。</p>
<p>$MTBF$为<u>平均失效间隔时间</u>。</p>
</li>
<li>
<p>可维护性：<u>在给定的使用条件下，在规定的时间间隔内，使用规定的过程和资源完成维护活动的概率</u>。</p>
<p>可以用$\cfrac{1}{1+MTTR}$来度量。</p>
<p>$MTTR$为<u>平均修复时间</u>。</p>
</li>
</ul>
<p>总结：</p>
<table>
<thead>
<tr>
<th style="text-align:center">质量属性</th>
<th style="text-align:center">度量公式</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">可靠性</td>
<td style="text-align:center"><p>$\cfrac{MTTF}{1+MTTF}$</p><p>$MTTF$：平均无故障时间</p></td>
<td style="text-align:left">给定时间间隔内、给定条件下，无失效运作的概率</td>
</tr>
<tr>
<td style="text-align:center">可用性</td>
<td style="text-align:center"><p>$\cfrac{MTBF}{1+MTBF}$</p><p>$MTBF$：平均失效间隔时间</p></td>
<td style="text-align:left">给定时间点上、能按照规格说明正确运作的概率</td>
</tr>
<tr>
<td style="text-align:center">可维护性</td>
<td style="text-align:center"><p>$\cfrac{1}{1+MTTR}$</p><p>$MTTR$：平均修复时间</p></td>
<td style="text-align:left">给定使用条件下、规定时间间隔内，使用规定过程和资源完成维护的概率</td>
</tr>
</tbody>
</table>
<h2 id="软件质量模型" data-numberify>软件质量模型<a class="anchor ms-1" href="#软件质量模型"></a></h2>
<p>讨论软件质量首先要了解软件的质量特性，目前己经有多种软件质量模型来描述软件质量特性，如：</p>
<ul>
<li>ISO/IEC 9126 软件质量模型</li>
<li>Me Call 软件质量模型。</li>
</ul>
<h3 id="isoiec-9126-软件质量模型" data-numberify>ISO/IEC 9126 软件质量模型<a class="anchor ms-1" href="#isoiec-9126-软件质量模型"></a></h3>
<p>ISO/IEC 9126软件质量模型由3个层次组成：</p>
<ol>
<li>第一层：<strong>质量特性</strong></li>
<li>第二层：<strong>质量子特性</strong></li>
<li>第三层：<strong>度量指标</strong></li>
</ol>
<p>该模型的质量特性和质量子特性：</p>
<table>
<tr>
    <th style="text-align: center;">
        质量特性
    </th>
    <th style="text-align: center;">
        质量子特性
    </th>
</tr>
<tr>
    <td style="text-align: center;" rowspan="6">
        <b>功能性</b>（Functionality）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        适合性（Suitability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        准确性（Accurateness）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        互用性（Interoperability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        依从性（Compliance）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        安全性（Security）
    </td>
</tr>
<tr>
    <td style="text-align: center;" rowspan="4">
        <b>可靠性</b>（Reliability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        成熟性（Maturity）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        容错性（Fault tolerance）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易恢复性（Recoverability）
    </td>
</tr>
<tr>
    <td style="text-align: center;" rowspan="4">
        <b>易使用性</b>（Usability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易理解性（Understandability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易学性（Learnability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易操作性（Operability）
    </td>
</tr>
<tr>
    <td style="text-align: center;" rowspan="3">
        <b>效率</b>（Efficiency）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        时间特性（Time behavior）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        资源特性（Resource behavior）
    </td>
</tr>
<tr>
    <td style="text-align: center;" rowspan="5">
        <b>可维护性</b>（Maintainability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易分析性（Analyzability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易改变性（Changeability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        稳定性（Stability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易测试性（Testability）
    </td>
</tr>
<tr>
    <td style="text-align: center;" rowspan="5">
        <b>可移植性</b>（Portability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        适应性（Adaptability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易安装性（Installability）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        一致性（Conformance）
    </td>
</tr>
<tr>
    <td style="text-align: center;">
        易替换性（Replaceability）
    </td>
</tr>
</table>
<p>质量子特性的含义：</p>
<ul>
<li>功能性：
<ul>
<li><strong>适合性</strong>：与对规定任务能否提供一组功能以及这组功能是否适合有关的软件属性。</li>
<li><strong>准确性</strong>：与能够得到正确或相符的结果或效果有关的软件属性。</li>
<li><strong>互用性</strong>：<u>与其他指定系统进行交互操作</u>的能力相关的软件属性。</li>
<li><strong>依从性</strong>：<u>使软件服从有关的标准、约定、法规及类似规定</u>的软件属性。</li>
<li><strong>安全性</strong>：与避免对程序及数据的非授权故意或意外访问的能力有关的软件属性。</li>
</ul>
</li>
<li>可靠性：
<ul>
<li><strong>成熟性</strong>：与由软件故障引起失效的频度有关的软件属性。</li>
<li><strong>容错性</strong>：与<u>在软件错误或违反指定接口的情况下维持指定的性能水平</u>的能力有关的软件属性。</li>
<li><strong>易恢复性</strong>：与<u>在故障发生后，重新建立其性能水平并恢复直接受影响数据</u>的能力，以及为达到此目的所需的时间和努力有关的软件属性。</li>
</ul>
</li>
<li>易使用性：
<ul>
<li><strong>易理解性</strong>：与用户为理解逻辑概念及其应用所付出的劳动有关的软件属性。</li>
<li><strong>易学性</strong>：与用户为学习其应用（例如操作控制、输入、输出）所付出的努力相关的软件属性。</li>
<li><strong>易操作性</strong>：与用户为进行操作和操作控制所付出的努力有关的软件属性。</li>
</ul>
</li>
<li>效率：
<ul>
<li><strong>时间特性</strong>：与响应和处理时间以及软件执行其功能时的吞吐量有关的软件属性。</li>
<li><strong>资源特性</strong>：与软件执行其功能时，所使用的资源量以及使用资源的持续时间有关的软件属性。</li>
</ul>
</li>
<li>可维护性：
<ul>
<li><strong>易分析性</strong>：与为诊断缺陷或失效原因，或为判定待修改的部分所需努力有关的软件属性。</li>
<li><strong>易改变性</strong>：与进行修改、排错或适应环境变换所需努力有关的软件属性。</li>
<li><strong>稳定性</strong>：与修改造成未预料效果的风险有关的软件属性。</li>
<li><strong>易测试性</strong>：为确认经修改软件所需努力有关的软件属性。</li>
</ul>
</li>
<li>可移植性：
<ul>
<li><strong>适应性</strong>：与软件转移到不同环境时的处理或手段有关的软件属性。</li>
<li><strong>易安装性</strong>：与在指定环境下安装软件所需努力有关的软件属性。</li>
<li><strong>一致性</strong>：使软件服从与可移植性有关的标准或约定的软件属性。</li>
<li><strong>易替换性</strong>：与一软件在该软件环境中用来替代指定的其他软件的可能和努力有关的软件属性。</li>
</ul>
</li>
</ul>
<h3 id="mc-call-软件质量模型" data-numberify>Mc Call 软件质量模型<a class="anchor ms-1" href="#mc-call-软件质量模型"></a></h3>
<p>Mc Call软件质量模型从以下3个方面确定了11个质量特性：</p>
<ul>
<li>软件产品的<strong>运行</strong></li>
<li>软件产品的<strong>修正</strong></li>
<li>软件产品的<strong>转移</strong></li>
</ul>
<p>Mc Call也给出了一个三层模型框架：</p>
<ol>
<li>第一层：<strong>质量特性</strong></li>
<li>第二层：<strong>评价准则</strong></li>
<li>第三层：<strong>度量指标</strong></li>
</ol>
<p><picture><img class="img-fluid " alt="Mc Call 软件质量模型" src="/docs/ruan-she/software-engineering/uTools_1683794894507.png" loading="lazy" width="533" height="379" />
</picture>

</p>
<h2 id="软件质量保证" data-numberify>软件质量保证<a class="anchor ms-1" href="#软件质量保证"></a></h2>
<p>软件质量保证是指为保证软件系统或软件产品充分满足用户要求的质量而进行的有计划、有组织的活动，其目的是生产高质量的软件。</p>
<p>软件质量保证包括了与以下7个主要活动相关的各种任务：</p>
<ul>
<li>应用技术方法</li>
<li>进行正式的技术评审</li>
<li>测试软件</li>
<li>标准的实施</li>
<li>控制变更</li>
<li>度量（Metrics）</li>
<li>记录保存和报告</li>
</ul>
<h3 id="软件评审" data-numberify>软件评审<a class="anchor ms-1" href="#软件评审"></a></h3>
<p>通常，把“质量”理解为“用户满意程度”。为了使得用户满意，有以下两个必要条件：</p>
<ul>
<li>
<p><strong>设计质量</strong>：设计的规格说明书符合用户的要求。</p>
<p>设计质量的评审对象：</p>
<ul>
<li>软件需求规格说明</li>
<li>数据需求规格说明</li>
<li>软件概要设计说明</li>
</ul>
</li>
<li>
<p><strong>程序质量</strong>：程序按照设计规格说明所规定的情况正确执行。</p>
<p>程序质量的评审通常是从开发者的角度进行，与开发技术直接相关。程序质量的评审对象：</p>
<ul>
<li>软件结构：
<ul>
<li>功能结构：
<ul>
<li>数据结构</li>
<li>功能结构</li>
<li>数据结构和功能结构之间的对应关系</li>
</ul>
</li>
<li>功能的通用性</li>
<li>模块的层次</li>
<li>模块结构：
<ul>
<li>控制流结构</li>
<li>数据流结构</li>
<li>模块结构与功能结构之间的对应关系</li>
</ul>
</li>
<li>处理过程的结构</li>
</ul>
</li>
<li>与运行环境的接口：
<ul>
<li>与硬件的接口</li>
<li>与用户的接口</li>
</ul>
</li>
<li>变更带来的影响</li>
</ul>
</li>
</ul>
<p>软件的规格说明分为：</p>
<ul>
<li>
<p><strong>外部规格说明</strong>：从用户角度来看的规格，包括硬件/软件系统设计、功能设计；</p>
<p>设计质量是由外部规格说明决定的</p>
</li>
<li>
<p><strong>内部规格说明</strong>：为了实现外部规格的更详细的规格，即软件模块结构与模块处理过程的设计。</p>
<p>内部规格说明是从开发者角度来看的规格说明。</p>
<p>程序是由内部规格说明决定的。</p>
</li>
</ul>
<h3 id="软件容错技术" data-numberify>软件容错技术<a class="anchor ms-1" href="#软件容错技术"></a></h3>
<p>提高软件质量和可靠性的技术大致可分为两类：</p>
<ul>
<li>避开错误：在开发的过程中不让差错潜入软件的技术；</li>
<li>容错技术：对某些无法避开的差错，使其影响减至最小的技术。</li>
</ul>
<p>实现容错的<u>主要手段是<strong>冗余</strong></u>。冗余是指<u>对于实现系统规定功能是多余的那部分资源</u>，包括：</p>
<ul>
<li>硬件</li>
<li>软件</li>
<li>信息</li>
<li>时间</li>
</ul>
<p>由于加入了这些资源，有可能使系统的可靠性得到较大的提高。通常，冗余技术分为4类：</p>
<ul>
<li>
<p><strong>结构冗余</strong>：结构冗余是通常采用的冗余技术，按其工作方法可以分为：</p>
<ul>
<li>
<p><strong>静态冗余</strong>：</p>
<p>常用的有：</p>
<ul>
<li>三模冗余（Triple Module Redundancy，TR）</li>
<li>多模冗余</li>
</ul>
<p>静态冗余通过表决和比较来屏蔽系统中出现的错误。</p>
</li>
<li>
<p><strong>动态冗余</strong>：动态冗余的主要方式是多重模块待机储备。</p>
<p>当系统测试到某工作模块出现错误时，就用一个备用模块来顶替它并重新运行。这里包括以下过程：</p>
<ul>
<li>检测</li>
<li>切换</li>
<li>恢复</li>
</ul>
<p>动态冗余有以下两种方式：</p>
<ul>
<li>
<p>热备份系统：每当一个出错模块被其他备用模块顶替后，冗余系统相当于进行了一次重构。</p>
<p>在热备份系统中，备用模块在待机过程中的失效率为0。</p>
</li>
<li>
<p>冷备份系统：各备用模块在其待机时可与主模块一同工作，也可不工作。</p>
</li>
</ul>
</li>
<li>
<p><strong>混合冗余</strong>：兼有静态元余和动态冗余的长处。</p>
</li>
</ul>
</li>
<li>
<p><strong>信息冗余</strong>：指为检测或纠正信息在运算或传输中的错误需外附加的一部分信息。</p>
</li>
<li>
<p><strong>时间冗余</strong>：指以重复执行指令或程序来消除瞬时错误带来的影响。</p>
</li>
<li>
<p><strong>冗余附加技术</strong>：指为实现上述冗余技术所需的资源和技术，包括：</p>
<p>程序、指令、数据、存放和调动它们的空间和通道等。</p>
<p>在屏蔽硬件错误的容错技术中，冗余附加技术包括：</p>
<ol>
<li>关键程序和数据的冗余存储及调用。</li>
<li>检测、表决、切换、重构、纠错和复算的实现。</li>
</ol>
<p>在屏蔽软件错误的容错系统中，冗余附加技术的构成包括：</p>
<ol>
<li><u>冗余备份程序的存储及调用。</u></li>
<li><u>实现错误检测和错误恢复的程序。</u></li>
<li><u>实现容错软件所需的固化程序。</u></li>
</ol>
</li>
</ul>
<hr>
<h1 id="mccabe-软件复杂性度量法" data-numberify>McCabe 软件复杂性度量法<a class="anchor ms-1" href="#mccabe-软件复杂性度量法"></a></h1>
<p><strong>McCabe度量法</strong>又称<strong>环路度量法</strong>，是<u>通过定义环路复杂度，建立程序复杂性的度量，它是一种基于程序控制流的复杂性度量方法</u>，它反映了程序（或模块）的控制结构的复杂性。</p>
<p>MaCabe度量法认为<u>程序的复杂性在很大程度上取决于控制的复杂性</u>。单一的顺序程序结构最为简单，循环和选择构成的环路越多，程序就越复杂。</p>
<p>MaCabe度量法以图论为工具，先画出程序图，然后用该图的环路数作为程序复杂性的度量值。</p>
<p>程序图是退化的程序流程图。把程序流程图中的每个处理符号都退化成一个结点，原来连接不同处理符号的流线变成连接不同点的有向弧，这样得到的有向图称为程序图。</p>
<p><picture><img class="img-fluid " alt="程序图示例" src="/docs/ruan-she/software-engineering/uTools_1683629835683.png" loading="lazy" width="447" height="416" />
</picture>

</p>
<p>程序图仅描述程序内部的控制流程，完全不表现对数据的具体操作以及分支和循环的具体条件。</p>
<p>根据图论，在一个强连通的有向图$G$中，计算环的个数$V(G)$的公式为：</p>
<p>$$
V(G) = m - n + 2p
$$</p>
<ul>
<li>$V(G)$：$G$中的<u>环路个数</u>；</li>
<li>$m$：$G$中的<u>弧的个数</u>；</li>
<li>$n$：$G$中的<u>结点数</u>；</li>
<li>$p$：$G$中的<u>强连通分量个数</u>。</li>
</ul>
<p>在一个程序中，从程序图的入口点总能到达图中的任何一个结点，因此，程序总是连通的，但不是强连通的。</p>
<p>为了使程序图成为强连通图，<u>从图的入口点到出口点加一条用虚线表示的有向边</u>（如上图所示），使图成为强连通图（但虚线弧并不算入实际的弧数）。这样就可以使用上式计算环路复杂性了，也因此程序图的$p$通常为1。</p>
<p>即，计算有向图$G$的环路复杂性的公式为：</p>
<p>$$
V(G) = m - n + 2
$$</p>
<p>例如上图中，结点数$n=6$，弧数$m=9$，则：</p>
<p>$$
V(G) = 9 - 6 + 2 = 5
$$</p>
<p>即上图McCabe环路复杂的度量值为5。</p>
<blockquote>
<p>$V(G) = 10$是一个实际模块的上限。当$V(G) &gt; 10$时，很难充分测试这个模块。</p>
<p>在白盒测试中，计算环路复杂度可以简单地使用判定条件的数量 + 1。</p>
</blockquote>
<hr>
<h1 id="软件工具" data-numberify>软件工具<a class="anchor ms-1" href="#软件工具"></a></h1>
<h2 id="软件开发工具" data-numberify>软件开发工具<a class="anchor ms-1" href="#软件开发工具"></a></h2>
<p>对应于软件开发过程的各种活动，软件开发工具通常有：</p>
<ul>
<li>需求分析工具</li>
<li>设计工具</li>
<li>编码与排错工具</li>
<li>测试工具</li>
</ul>
<h2 id="软件维护工具" data-numberify>软件维护工具<a class="anchor ms-1" href="#软件维护工具"></a></h2>
<p>辅助软件维护过程中活动的软件称为软件维护工具，它辅助维护人员对软件代码及其文档进行各种维护活动。软件维护工具主要有：</p>
<ul>
<li><u>版本控制</u>工具</li>
<li><u>文档分析</u>工具</li>
<li><u>开发信息库</u>工具</li>
<li><u>逆向工程</u>工具</li>
<li><u>再工程</u>工具</li>
</ul>
<h2 id="软件管理和软件支持工具" data-numberify>软件管理和软件支持工具<a class="anchor ms-1" href="#软件管理和软件支持工具"></a></h2>
<p>软件管理和软件支持工具用来辅助管理人员和软件支持人员的管理活动和支持活动，以确保软件高质量地完成。</p>
<p>常用的铺助软件管理和软件支持的工具有：</p>
<ul>
<li>项目管理工具</li>
<li>配置管理工具</li>
<li>软件评价工具</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>结构化开发篇</title>
      <link>/docs/ruan-she/structured-dev/</link>
      <pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/ruan-she/structured-dev/</guid>
      <description><![CDATA[概述 结构化方法是一种面向数据流的开 发方法，它由以下构成： 结构化分析：根据分解与抽象的原则，按照系统中数据处理的流程，用数据流图来建立系统的功]]></description>
      <content:encoded><![CDATA[<h1 id="概述" data-numberify>概述<a class="anchor ms-1" href="#概述"></a></h1>
<p>结构化方法是一种面向数据流的开
发方法，它由以下构成：</p>
<ul>
<li>结构化分析：根据分解与抽象的原则，按照系统中数据处理的流程，用数据流图来建立系统的功能模型，从而完成需求分析工作。</li>
<li>结构化设计：根据模块独立性准则、软件结构优
化准则将数据流图转换为软件的体系结构，用软件结构图来建立系统的物理模型，实现系统的
概要设计。</li>
<li>结构化程序设计：使用3种基本控制结构构造程序，任何程序都可以由顺序、选择和重复3种基本控制结构构造。</li>
</ul>
<p>结构化方法总的指导思想是自顶向下、逐层分解，它的基本原则是功能的分解与抽象。它是软件工程中最早出现的开发方法，特别适合于数据处理领域的问题，但是不适合解决大规模的、特别复杂的项目，且难以适应需求的变化。</p>
<hr>
<h1 id="系统设计" data-numberify>系统设计<a class="anchor ms-1" href="#系统设计"></a></h1>
<h2 id="抽象" data-numberify>抽象<a class="anchor ms-1" href="#抽象"></a></h2>
<p>抽象是一种设计技术，重点说明一个实体的本质方面，而忽略或者掩盖不太重要或非本质的方面。</p>
<p>抽象是一种重要的工具，用来将复杂的现象简化到可以分析、实验或者可以理解的程度。</p>
<p>软件工程中从软件定义到软件开发要经历多个阶段，在这个过程中每前进一步都可看作是对软件解法的抽象层次的一次细化。</p>
<p>抽象的最底层就是实现该软件的源程序代码。在进行模块化设计时也可以有多个抽象层次，最高抽象层次的模块用概括的方式叙述问题的解法，较低抽象层次的模块是较高抽象层次模块对问题解法描述的细化。</p>
<h2 id="模块化" data-numberify>模块化<a class="anchor ms-1" href="#模块化"></a></h2>
<ul>
<li>
<p><strong>模块</strong>：是在程序中是数据说明、可执行语句等<u>程序对象的集合</u>，或者是单独命名和编址的元素，例如高级语言中的过程、函数和子程序等。</p>
<p>在软件的体系结构中，模块是可组合、分解和更换的单元。</p>
</li>
<li>
<p><strong>模块化</strong>：是指<u>将一个待开发的软件分解成若干个小的简单部分一模块</u>，<u>每个模块可独立地开发、测试，最后组装成完整的程序</u>。</p>
<p>这是一种<u>复杂问题“分而治之”的原则</u>。</p>
<p>模块化的<u>目的是使程序的结构清晰，容易阅读、理解、测试和修改。</u></p>
</li>
<li>
<p><strong>模块独立</strong>：是指<u>每个模块完成一个相对独立的特定子功能</u>，并且<u>与其他模块之间的联系简单</u>。</p>
<p>衡量模块独立程度的标准有（模块独立性的两个定性标准）：</p>
<ul>
<li><strong>耦合性</strong>；</li>
<li><strong>内聚性</strong>。</li>
</ul>
<p>在将软件系统划分模块时，应尽量做到<strong>高内聚</strong>、<strong>低耦合</strong>，提高模块的独立性。</p>
</li>
</ul>
<p>通常，可以按照在软件系统中的功能将模块分为四种类型：</p>
<ul>
<li>传入模块：取得数据或输入数据，经过某些处理，再将其传送给其他模块。</li>
<li>传出模块：输出数据，在输出前可能进行某些处理。数据可能被输出到系统的外部，或者会输出到其他模块进行进一步处理。</li>
<li>变换模块：从上级调用模块得到数据，进行特定的处理，转换成其他形式，再将加工结果返回给调用模块。</li>
<li>协调模块：一般不对数据进行加工，主要是通过调用、协调和管理其他模块来完成特定的功能。</li>
</ul>
<h3 id="耦合" data-numberify>耦合<a class="anchor ms-1" href="#耦合"></a></h3>
<p>耦合是模块之间的相对独立性（互相连接的紧密程度）的度量。</p>
<p>模块之间的耦合取决于：</p>
<ul>
<li>各个模块之间接口的复杂程度；</li>
<li>调用模块的方式；</li>
<li>通过接口的信息类型。</li>
</ul>
<p>一般模块之间可能的耦合方式有7种类型：</p>
<p><picture><img class="img-fluid " alt="耦合的种类" src="/docs/ruan-she/structured-dev/uTools_1683443957893.png" loading="lazy" width="874" height="133" />
</picture>

</p>
<ul>
<li>
<p><strong>无直接耦合</strong>：指两个模块之间<u>没有直接的关系</u>，它们分别从属于不同模块的控制与调用，<u>它们之间不传递任何信息</u>。</p>
<p>无直接耦合的模块间：</p>
<ul>
<li><u>耦合性最弱</u>；</li>
<li><u>模块独立性最高</u>。</li>
</ul>
</li>
<li>
<p><strong>数据耦合</strong>：指两个模块之间<u>有调用关系</u>，<u>传递的是简单的数据值</u>，相当于高级语言中的值传递。</p>
</li>
<li>
<p><strong>标记耦合</strong>：指两个模块之间<u>传递的是数据结构</u>。</p>
</li>
<li>
<p><strong>控制耦合</strong>：指一个模块调用另一个模块时，<u>传递的是控制变量</u>，<u>被调用模块通过该控制变量的值有选择地执行模块内的某一功能</u>。</p>
</li>
<li>
<p><strong>外部耦合</strong>：模块间<u>通过软件之外的环境联结</u>（如I/O将模块耦合到特定的设备、格式、通信协议上）时称为外部耦合。</p>
</li>
<li>
<p><strong>公共耦合</strong>：指<u>通过一个公共数据环境相互作用</u>的那些模块间的耦合。</p>
</li>
<li>
<p><strong>内容耦合</strong>：当一个模块<u>直接使用另一个模块的内部数据</u>，或<u>通过非正常入口转入另一个模块内部时</u>，这种模块之间的耦合称为内容耦合。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">耦合类型</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">无直接耦合</td>
<td style="text-align:left">没有直接关系，不传递任何信息</td>
</tr>
<tr>
<td style="text-align:center">数据耦合</td>
<td style="text-align:left">调用关系，传递简单数据值</td>
</tr>
<tr>
<td style="text-align:center">标记耦合</td>
<td style="text-align:left">传递数据结构</td>
</tr>
<tr>
<td style="text-align:center">控制耦合</td>
<td style="text-align:left">调用关系，被调模块传递给主调模块控制变量</td>
</tr>
<tr>
<td style="text-align:center">外部耦合</td>
<td style="text-align:left">通过软件之外的环境联结</td>
</tr>
<tr>
<td style="text-align:center">公共耦合</td>
<td style="text-align:left">通过公共数据环境相互作用</td>
</tr>
<tr>
<td style="text-align:center">内容耦合</td>
<td style="text-align:left">直接使用另一个模块的内部数据<br>或通过非正常入口转入另一个模块内部</td>
</tr>
</tbody>
</table>
<blockquote>
<p>解耦：降低模块之间的耦合性的过程。</p>
</blockquote>
<h3 id="内聚" data-numberify>内聚<a class="anchor ms-1" href="#内聚"></a></h3>
<p>内聚是<u>对一个模块内部各个元素彼此结合的紧密程度的度量</u>。<u>一个内聚程度高的模块（在理想情况下）应当只做一件事。</u></p>
<p>一般模块的内聚性分为7种类型：</p>
<p><picture><img class="img-fluid " alt="内聚的种类" src="/docs/ruan-she/structured-dev/uTools_1683460613634.png" loading="lazy" width="852" height="150" />
</picture>

</p>
<ul>
<li>
<p><strong>偶然内聚</strong>（<strong>巧合内聚</strong>）：指一个模块内的各<u>处理元素之间没有任何联系</u>。</p>
<p>偶然内聚具有最低的内聚性。</p>
<p>具有偶然内聚的模块具有以下特点（缺点）：</p>
<ul>
<li>不易修改、理解和维护；</li>
<li>会影响到模块间的耦合关系。</li>
</ul>
</li>
<li>
<p><strong>逻辑内聚</strong>：指模块内<u>执行若干个逻辑上相似的功能，通过参数确定该模块完成哪一个功能</u>。</p>
</li>
<li>
<p><strong>时间内聚</strong>：把<u>需要同时执行的动作组合在一起形成的模块</u>。</p>
</li>
<li>
<p><strong>过程内聚</strong>：指一个模块<u>完成多个任务，这些任务必须按指定的过程执行</u>。</p>
</li>
<li>
<p><strong>通信内聚</strong>：指模块内的<u>所有处理元素都在同一个数据结构上操作</u>，或者<u>各处理使用相同的输入数据或者产生相同的输出数据</u>。</p>
</li>
<li>
<p><strong>顺序内聚</strong>：指一个模块中的<u>各个处理元素都密切相关于同一功能且必须顺序执行，前一功能元素的输出就是下一功能元素的输入</u>。</p>
</li>
<li>
<p><strong>功能内聚</strong>：指模块内的<u>所有元素共同作用完成一个功能，缺一不可</u>。</p>
<p>这是最强的内聚。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">内聚类型</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">偶然内聚<br>（巧合内聚）</td>
<td style="text-align:left">各处理之间没有任何联系</td>
</tr>
<tr>
<td style="text-align:center">逻辑内聚</td>
<td style="text-align:left">执行若干个逻辑上相似的功能，<br>通过参数确定该模块完成哪一个功能</td>
</tr>
<tr>
<td style="text-align:center">时间内聚</td>
<td style="text-align:left">把需要同时执行的动作组合在一起</td>
</tr>
<tr>
<td style="text-align:center">过程内聚</td>
<td style="text-align:left">完成多个任务，这些任务必须按指定的过程执行</td>
</tr>
<tr>
<td style="text-align:center">通信内聚</td>
<td style="text-align:left">所有处理都在同一个数据结构上操作，<br>或者各处理使用相同的输入数据或者产生相同的输出数据</td>
</tr>
<tr>
<td style="text-align:center">顺序内聚</td>
<td style="text-align:left">各处理都与同一功能密切相关且必须顺序执行，<br>前一功能元素的输出就是下一功能元素的输入</td>
</tr>
<tr>
<td style="text-align:center">功能内聚</td>
<td style="text-align:left">所有元素共同作用完成一个功能，缺一不可</td>
</tr>
</tbody>
</table>
<h2 id="系统结构设计原则" data-numberify>系统结构设计原则<a class="anchor ms-1" href="#系统结构设计原则"></a></h2>
<p>为保证总体结构设计顺利完成，应遵循以下几条原则：</p>
<ul>
<li>
<p><strong>分解——协调原则</strong>：</p>
<p>系统整体，具有其整体的目的和功能，但这些目的和功能的实现又是由相互联系的各个组成部分共同工作的结果。解决复杂问题的一个很重要的原则就是把它分解成多个小问题分别处理，在处理过程中根据系统总体要求协调各部门的关系。</p>
</li>
<li>
<p><strong>自顶向下的原则</strong>：</p>
<p>从上往下，逐层分解；先确定上层模块的功能，再确定下层模块的功能。</p>
</li>
<li>
<p><strong>信息隐蔽、抽象的原则</strong>：</p>
<p><u>上层模块只规定下层模块做什么和所属模块间的协调关系，但不规定怎么做</u>，以保证各模块的相对独立性和内部结构的合理性，使得模块与模块之间层次分明，易于理解、实施和维护。</p>
</li>
<li>
<p><strong>一致性原则</strong>：</p>
<p>要保证整个软件设计过程中具有：</p>
<ul>
<li><strong>统一的规范</strong>、</li>
<li><strong>统一的标准</strong>、</li>
<li><strong>统一的文件模式</strong></li>
<li>……</li>
</ul>
</li>
<li>
<p><strong>明确性原则</strong>：</p>
<p>每个模块必须：</p>
<ul>
<li>功能明确、接口明确；</li>
<li>消除多重功能和无用接口。</li>
</ul>
</li>
<li>
<p><strong>高内聚、低耦合</strong>：</p>
<p>模块之间的耦合尽可能小，模块的内聚度尽可能高。</p>
</li>
<li>
<p><strong>模块的扇入系数和扇出系数要合理</strong>：</p>
<ul>
<li><strong>扇出系数</strong>：模块直接调用其他模块的个数。</li>
<li><strong>扇入系数</strong>：模块被其他模块调用时，直接调用它的模块个数。</li>
</ul>
<p>经验表明，<u>一个设计得好的系统的平均扇入、扇出系数通常是 3 或 4，一般不应超过 7</u>，否则会引起出错概率的增大。但菜单调用型模块的扇入与扇出系数可以大一些，公用模块的扇入系数可以大一些。</p>
</li>
<li>
<p><strong>模块的规模适当</strong>：</p>
<ul>
<li><u>过大的模块常常使系统分解得不充分；</u></li>
<li><u>过小的模块有可能降低模块的独立性，造成系统接口的复杂性。</u></li>
</ul>
</li>
<li>
<p><u>模块的作用范围应该在其控制范围之内。</u></p>
</li>
<li>
<p>避免或减少使用病态连接：病态连接是指从中部进入或访问一个模块。</p>
</li>
</ul>
<h2 id="系统文档" data-numberify>系统文档<a class="anchor ms-1" href="#系统文档"></a></h2>
<p>信息系统的文档是系统建设过程的“痕迹”，是系统维护人员的指南，是开发人员与用户交流的工具。</p>
<p>对文档在<u>系统开发人员</u>、<u>项目管理人员</u>、<u>系统维护人员</u>、<u>系统评价人员</u>以及<u>用户</u>之间的多种作用总结如下：</p>
<ul>
<li>
<p><u>用户</u>与<u>系统分析人员</u>在<u>系统规划</u>和<u>系统分析阶段</u>通过文档进行沟通。</p>
<p>这里的文档主要包括：</p>
<ul>
<li><strong>可行性研究报告</strong>、</li>
<li><strong>总体规划报告</strong>、</li>
<li><strong>系统开发合同</strong>、</li>
<li><strong>系统方案说明书</strong>。</li>
</ul>
</li>
<li>
<p><u>系统开发人员</u>与<u>项目管理人员</u>通过文档在<u>项目期内</u>进行沟通。</p>
<p>这里的文档是指项目管理文件，主要有：</p>
<ul>
<li>
<p><strong>系统开发计划</strong>，</p>
<p>包括：</p>
<ul>
<li><strong>工作任务分解表</strong>、</li>
<li><strong>PERT图</strong>、</li>
<li><strong>甘特图</strong>、</li>
<li><strong>预算分配表</strong>；</li>
</ul>
</li>
<li>
<p><strong>系统开发月报</strong>；</p>
</li>
<li>
<p><strong>系统开发总结报告</strong>。</p>
</li>
</ul>
<p>有了这些文档可以：</p>
<ul>
<li>不同阶段开发人员工作的顺利交接；</li>
<li>降低因为人员流动带来的风险。</li>
</ul>
</li>
<li>
<p><u>系统测试人员</u>与<u>系统开发人员</u>通过文档进行沟通。</p>
<p>系统测试人员可以根据以下文档对系统开发人员所开发的系统进行测试：</p>
<ul>
<li><strong>系统方案说明书</strong>、</li>
<li><strong>系统开发合同</strong>、</li>
<li><strong>系统设计说明书</strong>、</li>
<li><strong>测试计划</strong>。</li>
</ul>
<p>系统测试人员再将评估结果撰写成<strong>系统测试报告</strong>。</p>
</li>
<li>
<p><u>系统开发人员</u>与<u>用户</u>在<u>系统运行期间</u>进行沟通。</p>
<p>用户通过系统开发人员撰写的文档运行系统。这里的文档主要是：</p>
<ul>
<li><strong>用户手册</strong>、</li>
<li><strong>操作指南</strong>。</li>
</ul>
</li>
<li>
<p><u>系统开发人员</u>与<u>系统维护人员</u>通过文档进行沟通。</p>
<p>这里的文档主要有：</p>
<ul>
<li>
<p><strong>系统设计说明书</strong>；</p>
</li>
<li>
<p><strong>系统开发总结报告</strong>。</p>
<p>开发总结报告还可分为以下3个文档：</p>
<ul>
<li><strong>研制报告</strong>；</li>
<li><strong>技术报告</strong>；</li>
<li><strong>技术手册</strong>：记录了系统开发过程中的各种主要技术细节。</li>
</ul>
</li>
</ul>
</li>
<li>
<p><u>用户</u>与<u>维修人员</u>在<u>运行维护期间</u>进行沟通。</p>
<p>用户在使用信息系统的过程中，将运行过程中的问题进行记载，形成：</p>
<ul>
<li><strong>系统运行报告</strong>、</li>
<li><strong>维护修改建议</strong>。</li>
</ul>
<p>系统维护人员根据以下文档对系统进行维护和升级：</p>
<ul>
<li>维护修改建议；</li>
<li>系统开发人员留下的技术手册等文档。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">人员</th>
<th style="text-align:center">阶段</th>
<th style="text-align:left">文档</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">用户<br>系统分析人员</td>
<td style="text-align:center">系统规划<br>系统分析</td>
<td style="text-align:left">沟通文档，主要是<strong>规划报告</strong>、<strong>合同</strong>、<strong>方案</strong>：<br><ul><li>可行性研究报告</li><li>总体规划报告</li><li>系统开发合同</li><li>系统方案说明书</li></ul></td>
</tr>
<tr>
<td style="text-align:center">系统开发人员<br>项目管理人员</td>
<td style="text-align:center">项目期内</td>
<td style="text-align:left">沟通文档（项目管理文件），主要是<strong>计划</strong>、<strong>报告</strong>类文档：<br><ul><li>系统开发计划<ul><li>工作任务分解表</li><li>PERT图</li><li>甘特图</li><li>预算分配表</li></ul></li><li>系统开发月报</li><li>系统开发总结报告</li></ul></td>
</tr>
<tr>
<td style="text-align:center">系统测试人员<br>系统开发人员</td>
<td style="text-align:center">测试</td>
<td style="text-align:left">系统测试人员根据以下文档对系统进行测试：<br><ul><li>系统方案说明书</li><li>系统开发合同</li><li>系统设计说明书</li><li>测试计划</li></ul>系统测试人员再将评估结果撰写成系统测试报告</td>
</tr>
<tr>
<td style="text-align:center">系统开发人员<br>用户</td>
<td style="text-align:center">系统运行期间</td>
<td style="text-align:left">用户通过系统开发人员撰写的文档运行系统：<br><ul><li>用户手册</li><li>操作指南</li></ul></td>
</tr>
<tr>
<td style="text-align:center">系统开发人员<br>系统维护人员</td>
<td style="text-align:center">维护</td>
<td style="text-align:left">沟通文档：<ul><li>系统设计说明书</li><li>系统开发总结报告<ul><li>研制报告</li><li>研制报告</li><li>技术手册</li></ul></li></ul></td>
</tr>
<tr>
<td style="text-align:center">用户<br>维修人员</td>
<td style="text-align:center">运维</td>
<td style="text-align:left">用户将运行过程中的问题进行记载：<ul><li>系统运行报告</li><li>维护修改建议</li></ul>系统维护人员根据以下文档对系统进行维护和升级：<ul><li>维护修改建议</li><li>系统开发人员留下的技术手册等文档</li></ul></td>
</tr>
</tbody>
</table>
<hr>
<h1 id="结构化分析方法" data-numberify>结构化分析方法<a class="anchor ms-1" href="#结构化分析方法"></a></h1>
<h2 id="数据流图" data-numberify>数据流图<a class="anchor ms-1" href="#数据流图"></a></h2>
<p><strong>数据流图</strong>也称<strong>数据流程图</strong>（Data Flow Diagram，<strong>DFD</strong>），是一种便于用户理解、分析系统数据流程的图形工具。它<u>摆脱了系统的物理内容</u>，精确地在逻辑上描述系统的功能、输入、输出和数据存储等，是系统逻辑模型的重要组成部分。</p>
<p>数据流图中的基本图形元素包括：</p>
<ul>
<li>
<p><strong>数据流</strong>（Data Flow）：由一组固定成分的数据组成，表示数据的流向。</p>
<p><picture><img class="img-fluid " alt="数据流" src="/docs/ruan-she/structured-dev/uTools_1683518468182.png" loading="lazy" width="193" height="71" />
</picture>

</p>
<p>在DFD种，数据流的流向由以下几种：</p>
<ul>
<li>从<u>加工</u>流向另一个<u>加工</u>；</li>
<li>从<u>加工</u>流向<u>数据存储</u>（写）；</li>
<li>从<u>数据存储</u>流向<u>加工</u>（读）；</li>
<li>从<u>外部实体</u>流向<u>加工</u>（输入）；</li>
<li>从<u>加工</u>流向<u>外部实体</u>（输出）。</li>
</ul>
<p>即数据流的<u>起点或终点必须至少有一个是加工</u>。</p>
<p>除了与数据存储有关的数据流（流向数据存储或从数据存储流出），DFD中的每个数据流都必须用一个定义明确的名字表示。</p>
</li>
<li>
<p><strong>加工</strong>（Process）：加工描述了输入数据流到输出数据流之间的变换，也就是<u>输入数据流经过什么处理后变成了输出数据流</u>。</p>
<p><picture><img class="img-fluid " alt="加工" src="/docs/ruan-she/structured-dev/1683518239889.png" loading="lazy" width="282" height="105" />
</picture>

</p>
<p>每个加工都有一个名字和编号。</p>
<p>一个加工可以有多个输入数据流和多个输出数据流，但<u>至少有一个输入数据流和一个输出数据流</u>。</p>
<p>数据流图中常见的3种错误如下所示：</p>
<ul>
<li>
<p><strong>黑洞</strong>：加工只有输入，没有输出。</p>
<p>如下图加工1。</p>
</li>
<li>
<p><strong>白洞</strong>：加工只有输出但没有输入。</p>
<p>如下图加工2。</p>
</li>
<li>
<p><strong>灰洞</strong>：加工中输入数据不足以产生输出数据。</p>
<p>有几种可能的原因：</p>
<ul>
<li>一个错误的命名过程；</li>
<li>错误命名的输入或输出；</li>
<li>不完全的事实。</li>
</ul>
<p>如下图加工3。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="数据流图中常见错误" src="/docs/ruan-she/structured-dev/1683528176745.png" loading="lazy" width="793" height="542" />
</picture>

</p>
</li>
<li>
<p><strong>数据存储</strong>（Data Store）：存储和提供数据。</p>
<p><picture><img class="img-fluid " alt="数据存储" src="/docs/ruan-she/structured-dev/uTools_1683517944926.png" loading="lazy" width="350" height="79" />
</picture>

</p>
<p>每个数据存储都有一个定义明确的名字标识。</p>
<p>数据存储可以：</p>
<ul>
<li>存储加工的输出数据：数据流流入数据存储，表示数据的写入操作；</li>
<li>提供加工的输入数据：数据流从数据存储流出，表示数据的读操作。</li>
<li>双向箭头的数据流指向数据存储，表示对数据的修改。</li>
</ul>
<p>DFD中的数据存储在具体实现时可以用以下方式实现：</p>
<ul>
<li>文件系统实现；</li>
<li>数据库系统实现。</li>
</ul>
<p>数据存储的存储介质可以是：</p>
<ul>
<li>磁盘、</li>
<li>磁带、</li>
<li>其他存储介质。</li>
</ul>
</li>
<li>
<p><strong>外部实体</strong>（External Agent，外部主体）：指<u>存在于软件系统之外的人员、组织、物体或外部系统</u>，它指出系统所需数据的<u>发源地（源）</u>和<u>系统所产生的数据的归宿地（宿）</u>。</p>
<p><picture><img class="img-fluid " alt="外部实体" src="/docs/ruan-she/structured-dev/uTools_1683517896893.png" loading="lazy" width="118" height="79" />
</picture>

</p>
<p>例如：</p>
<ul>
<li>人员：学生、老师、员工、主观、医生、客户……</li>
<li>组织：供应商、采购部门……</li>
<li>物体：传感器、控制器、单车、车辆……</li>
<li>外部系统：支付系统、车辆交易系统、库存管理系统、道闸控制系统……</li>
</ul>
<p>在许多系统中，某个源和某个宿可以是同一个人员、组织、物体或外部系统，此时，在DFD中可以用同一个符号表示：</p>
<ul>
<li>当数据流从该符号流出时，表示它是源；</li>
<li>当数据流流向该符号时，表示它是宿；</li>
<li>当两者皆有时，表示它既是源又是宿。</li>
</ul>
<p>外部实体表示存在于系统之外的对象，用来帮助用户理解系统数据的来源和去向。</p>
</li>
</ul>
<p>软件系统内部的<strong>数据处理模型</strong>：使用<u>数据流</u>、<u>加工</u>和<u>数据存储</u>构建。</p>
<p>数据流图描述了系统的分解，但没有对图中各成分进行说明。</p>
<table>
<thead>
<tr>
<th style="text-align:center">基本元素</th>
<th style="text-align:center">图形表示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">数据流</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="数据流" src="/docs/ruan-she/structured-dev/uTools_1683518468182.png" loading="lazy" width="193" height="71" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">加工</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="加工" src="/docs/ruan-she/structured-dev/1683518239889.png" loading="lazy" width="282" height="105" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">数据存储</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="数据存储" src="/docs/ruan-she/structured-dev/uTools_1683517944926.png" loading="lazy" width="350" height="79" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">外部实体</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="外部实体" src="/docs/ruan-she/structured-dev/uTools_1683517896893.png" loading="lazy" width="118" height="79" />
</picture>

</td>
</tr>
</tbody>
</table>
<p>数据流图必须确保：</p>
<ul>
<li>数据流的起点或终点必须至少有一个是加工。</li>
<li>加工至少有一个输入数据流和一个输出数据流。</li>
</ul>
<p>分层数据流图：</p>
<ol>
<li>
<p>顶层图：描述系统的输入和输出。</p>
<p>即描述系统从哪些外部实体接受数据流，以及系统发送数据流到哪些外部实体。</p>
<ul>
<li>顶层图只有一个加工，即待开发的软件系统。</li>
<li>顶层图中的数据流就是系统的输入/输出信息。</li>
<li>顶层图中通常没有数据存储。</li>
</ul>
</li>
<li>
<p>0层图：分解顶层图的加工。</p>
</li>
<li>
<p>再分解：将DFD中某些比较复杂的加工再次分解成一张DFD子图。</p>
</li>
</ol>
<h2 id="数据字典" data-numberify>数据字典<a class="anchor ms-1" href="#数据字典"></a></h2>
<p>数据字典（DD）是为数据流图中的以下成分做出说明：</p>
<ul>
<li><strong>数据流</strong>；</li>
<li><strong>文件</strong>；</li>
<li><strong>加工</strong>：对加工的描述称为“小说明”或“加工逻辑说明”；</li>
<li>组成数据流或文件的<strong>数据项</strong>。</li>
</ul>
<p>数据字典有以下4类条目：</p>
<ul>
<li>
<p><strong>数据流</strong>条目：对DFD中数据流的定义，通常列出该数据流的各组成数据项。</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">含义</th>
<th style="text-align:left">举例及说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$=$</td>
<td style="text-align:center">被定义为</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">$+$</td>
<td style="text-align:center">与</td>
<td style="text-align:left">$x = a + b$：$x$由$a$和$b$组成</td>
</tr>
<tr>
<td style="text-align:center">$[a|b]$</td>
<td style="text-align:center">或</td>
<td style="text-align:left">$x = [a</td>
</tr>
<tr>
<td style="text-align:center">$\{a\}$</td>
<td style="text-align:center">重复</td>
<td style="text-align:left">$x = \{a\}$：$x$由任意个$a$组成</td>
</tr>
<tr>
<td style="text-align:center">$m\{a\}n$<br>或<br>$\big\{ a \big\}^{n}_{m}$</td>
<td style="text-align:center">重复</td>
<td style="text-align:left">$x=m\{a\}n$ 或 $x=\big\{a\big\}^{n}_{m}$：$x$中出现$m \sim n$次$a$<br><ul><li>$n$：重复次数的上限</li><li>$m$：重复次数的下限</li></ul></td>
</tr>
<tr>
<td style="text-align:center">$(a)$</td>
<td style="text-align:center">可选</td>
<td style="text-align:left">$x = (a)$：$a$在$x$中出现$0$或$1$次</td>
</tr>
<tr>
<td style="text-align:center">$&ldquo;a&rdquo;$</td>
<td style="text-align:center">基本数据元素</td>
<td style="text-align:left">$x = &ldquo;a&rdquo;$：$x$是取值为字符$a$的数据元素</td>
</tr>
<tr>
<td style="text-align:center">$m..n$</td>
<td style="text-align:center">连接符</td>
<td style="text-align:left">$x = m..n$：$x$可取$m \sim n$中的任意一个值</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><strong>数据项</strong>条目：组成数据流和数据存储的最小元素，是不可再分解的数据单位。</p>
</li>
<li>
<p><strong>数据存储</strong>条目：对DFD中数据存储的定义。</p>
</li>
<li>
<p><strong>基本加工</strong>条目：用来说明DFD中（下层）基本加工的处理逻辑（加工逻辑）。</p>
<ul>
<li>对每一个基本加工，必须有一个加工规格说明（加工逻辑描述）。</li>
<li>加工规格说明（加工逻辑描述）必须描述基本加工如何把输入数据流变换为输出数据流的加工规则。</li>
<li>加工规格说明必须描述实现加工的策略，而不是实现加工的细节。</li>
<li>加工规格说明中包含的信息应是充足的，完备的，有用的，没有重复的多余信息。</li>
</ul>
<p>结构化语言、判定树和判定表可以用来表示加工逻辑。</p>
</li>
</ul>
<p>源点、终点不在系统之内，故一般不在字典中说明。</p>
<hr>
<h1 id="用户界面设计" data-numberify>用户界面设计<a class="anchor ms-1" href="#用户界面设计"></a></h1>
<p>用户界面（UI）设计在人与计算机之间搭建了一个有效的交流媒介。</p>
<h2 id="黄金原则" data-numberify>黄金原则<a class="anchor ms-1" href="#黄金原则"></a></h2>
<p>黄金原则一共有3条：</p>
<ul>
<li>用户操纵控制</li>
<li>减少用户的记忆负担</li>
<li>保持界面一致</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据库篇</title>
      <link>/docs/ruan-she/data-base/</link>
      <pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/ruan-she/data-base/</guid>
      <description><![CDATA[数据库体系结构 数据描述有两种形式： 逻辑描述：指程序员或用户用以操作的数据形式，是抽象的概念化数据。 物理描述：指数据在存储设备上的存储方式，物]]></description>
      <content:encoded><![CDATA[<h1 id="数据库体系结构" data-numberify>数据库体系结构<a class="anchor ms-1" href="#数据库体系结构"></a></h1>
<p>数据描述有两种形式：</p>
<ul>
<li>逻辑描述：指程序员或用户用以操作的数据形式，是抽象的概念化数据。</li>
<li>物理描述：指数据在存储设备上的存储方式，物理数据是实际存放在存储设备上的数据。</li>
</ul>
<h2 id="三级模式结构" data-numberify>三级模式结构<a class="anchor ms-1" href="#三级模式结构"></a></h2>
<p>实际上有许多不同的数据库产品，但它们的体系结构基本上都具有相同的特征，采用“三级模式和两级映像”：</p>
<p><picture><img class="img-fluid " alt="三级模式两级映像" src="/docs/ruan-she/data-base/uTools_1681373319410.png" loading="lazy" width="486" height="377" />
</picture>

</p>
<p>三级结构有3类数据模型：</p>
<ul>
<li><strong>外模型</strong>：用户使用的<strong>数据视图</strong>，是一种局部的逻辑数据视图，表示用户所理解的实体、实体属性和实体关系。</li>
<li><strong>概念模型</strong>：全局的<strong>逻辑数据视图</strong>，是数据库管理员所看到的实体、实体属性和实体之间的联系。</li>
<li><strong>内模型</strong>：数据的物理<strong>存储模型</strong>。</li>
</ul>
<p>三个物理模型分别对应数据库系统的3层结构：</p>
<ul>
<li>
<p><strong>外模式（子模式、用户模式）</strong>：数据库用户的数据视图，是与某一应用程序有关的数据的逻辑表示。</p>
<p>外模式用DBMS的外模式描述语言（外模式DDL)来定义。</p>
</li>
<li>
<p><strong>概念模式（模式）</strong>：所有用户的公共数据视图，与具体的应用程序和应用程序开发工具无关。</p>
<p>概念模式用DBMS的模式描述语言（模式DDL)来定义。</p>
</li>
<li>
<p><strong>内模式（物理模式、存储模式）</strong>：是数据在数据库内部的表示方式。</p>
<p>内模式由DBMS的内模式描述语言（内模式DDL)来描述，由设备介质语言来定义。</p>
<p>定义<u>所有的<strong>内部记录类型</strong>、<strong>索引</strong>和<strong>文件</strong>的组织方式</u>。</p>
</li>
</ul>
<h2 id="两级模式映象" data-numberify>两级模式映象<a class="anchor ms-1" href="#两级模式映象"></a></h2>
<p>数据库系统在三级模式之间提供了两级映像：</p>
<ul>
<li>模式——内模式映像存在于<u>概念级和内部级</u>之间，实现<u>概念模式和内模式</u>间的相互转换。</li>
<li>外模式——模式映像：存在于<u>外部级和概念级</u>之间，实现了<u>外模式和概念模式</u>之间的相互转换。</li>
</ul>
<p>数据的独立性（指数据与程序独立）是由DBMS的二级映像功能来保证的。数据的独立性包括：</p>
<ul>
<li>
<p><strong>物理独立性</strong>：指当数据库的<u>内模式发生改变时，数据的逻辑结构不变</u>。</p>
<p>物理独立性可以保证，当数据的物理结构改变时，应用程序不用改变。</p>
<p>但是，为了保证应用程序能够正确执行，<u>需要修改概念模式和内模式之间的映像</u>。</p>
</li>
<li>
<p><strong>逻辑独立性</strong>：指用户的<u>应用程序与数据库的逻辑结构是相互独立的</u>。</p>
<p>数据的逻辑结构发生变化后，用户程序也可以不修改。</p>
<p>但是，为了保证应用程序能够正确执行，<u>需要修改外模式和概念模式之间的映像</u>。</p>
</li>
</ul>
<hr>
<h1 id="数据模型" data-numberify>数据模型<a class="anchor ms-1" href="#数据模型"></a></h1>
<p>在数据库技术中，表示实体类型及实体类型间联系的模型称为数据模型。</p>
<p>数据模型有以下类型：</p>
<ul>
<li>概念数据模型：从信息世界中抽象的数据模型；</li>
<li>结构数据模型：从计算机世界中抽象出的DBMS支持的数据模型。</li>
</ul>
<h2 id="概念数据模型" data-numberify>概念数据模型<a class="anchor ms-1" href="#概念数据模型"></a></h2>
<p>概念数据模型用于信息世界建模，一般采用实体-联系方法（E-R方法）。概念数据模型的常用术语有：</p>
<ul>
<li>
<p><strong>实体</strong>：客观存在并可以相互区别的事物称为实体。</p>
<p>如一个单位、一个职工、一个部门或一个项目等。</p>
</li>
<li>
<p><strong>属性</strong>：描述实体的特性称为属性，一个实体可以由若干个属性来刻画。</p>
<p>属性的具体取值称为属性值，用以表示一个具体实体。</p>
</li>
<li>
<p><strong>码</strong>：<u>唯一标识</u>实体的属性集称为码。</p>
</li>
<li>
<p><strong>域</strong>：属性的<u>取值范围</u>称为该属性的域。</p>
</li>
<li>
<p><strong>实体型</strong>：具有相同属性的实体必然具有共同的特征和性质，用实体名及其属性名集合来抽象和刻画同类实体，称为实体型。</p>
<p>例如，学生（学号，姓名，性别，班号）就是一个实体型。</p>
</li>
<li>
<p><strong>实体集</strong>：同型实体的集合称为实体集。</p>
<p>例如，全体学生就是一个实体集。</p>
</li>
<li>
<p><strong>联系</strong>：实体（型）之间的对应关系称为联系。联系分为两种：</p>
<ul>
<li>实体内部各属性之间的联系；</li>
<li>实体之间的联系。</li>
</ul>
<p>两个实体型之间的联系有3种类型：</p>
<ul>
<li>一对一联系(1:1)；</li>
<li>一对多联系(1:n)；</li>
<li>多对多联系(m:n)。</li>
</ul>
</li>
</ul>
<p>实体-联系方法表示的概念数据模型称为E-R图。E-R图是抽象和描述现实世界的有力工具：</p>
<ul>
<li><strong>实体型</strong>：用<strong>矩形</strong>表示，矩形框内写明实体名；</li>
<li><strong>属性</strong>：用<strong>椭圆形</strong>表示，并用无向边将其与相应的实体连接起来；</li>
<li><strong>联系</strong>：用<strong>菱形</strong>表示，菱形框内写明联系名，并用无向边将其分别与有关实体连接起来，同时在无向边旁标上联系的类型。</li>
</ul>
<p><picture><img class="img-fluid " alt="E-R图示例" src="/docs/ruan-she/data-base/uTools_1681289395117.png" loading="lazy" width="240" height="242" />
</picture>

</p>
<h2 id="结构数据模型" data-numberify>结构数据模型<a class="anchor ms-1" href="#结构数据模型"></a></h2>
<p>结构数据模型是直接面向数据库的逻辑结构。这类模型涉及到计算机系统和数据库管理系统，所以称为结构数据模型。任何一个DBMS都以某个结构数据模型为基础，或者说支持某个结构数据模型。</p>
<p>常用术语：</p>
<ul>
<li>
<p><strong>数据项</strong>：又称<strong>字段</strong>，是数据库中可以命名的最小逻辑数据单位。可以是一个数或个字符串，用它描述属性的数据。</p>
</li>
<li>
<p><strong>记录</strong>：是数据项的有序集，即一个记录是由若干个数据项或字段组成，用它描述实体。</p>
<p>一般来说，数据只有被组成记录的形式才有实际意义。</p>
</li>
<li>
<p><strong>文件</strong>：文件是一个具有符号名的一组同类记录的集合。文件包含记录的结构和记录的值。</p>
</li>
</ul>
<p>结构数据模型主要包括：层次、网状、关系和面向对象模型。</p>
<p>关系模型是一种用二维表格结构快表示实体以及实体之间联系的数据模型。每个二维表由行、列组成，又可称为关系，关系模式是对关系的描述。因此可以说，关系模型是由关系模式组成的集合。</p>
<blockquote>
<p>目前大多数数据库管理系统都是关系型的。</p>
</blockquote>
<hr>
<h1 id="关系模型" data-numberify>关系模型<a class="anchor ms-1" href="#关系模型"></a></h1>
<h2 id="术语" data-numberify>术语<a class="anchor ms-1" href="#术语"></a></h2>
<p>有关关系模型的术语：</p>
<ul>
<li>
<p><strong>关系</strong>：一个关系就是一张<strong>二维表</strong>，每个关系有一个关系名</p>
</li>
<li>
<p><strong>元组</strong>：表中的一行即为一个<strong>元组</strong>，对应存储文件中的一个<strong>记录值</strong>。</p>
</li>
<li>
<p><strong>属性</strong>：表中的<strong>列</strong>称为属性，每一列有一个属性名。</p>
<p>属性值相当于记录中的数据项或者字段值。</p>
</li>
<li>
<p><strong>域</strong>：属性的<strong>取值范围</strong>。</p>
</li>
<li>
<p><strong>关系模式</strong>：对关系的<strong>描述</strong>称为关系模式，由关系名和其属性集合构成，关系模式的格式为：关系名（属性名1，属性名2，…，属性名n）</p>
</li>
<li>
<p><strong>候选码</strong>（候选健）：属性或属性组合其值能够<strong>唯一地标识</strong>一个元组。</p>
</li>
<li>
<p><strong>主码</strong>（主键）：在一个关系中可能有<u>多个候选码，从中选择一个</u>作为主码。</p>
</li>
<li>
<p><strong>主属性</strong>：所有候选键都称为主属性，其他的属性都称为<strong>非码属性</strong>。</p>
</li>
<li>
<p><strong>外码</strong>（或外键）：如果一个关系中的属性或属性组并非该关系（二维表）的码，但它们是<u>另外一个关系（二维表）的码</u>，则称其为该关系的外码。</p>
</li>
<li>
<p><strong>全码</strong>：关系模式的<u>所有属性组是这个关系模式的候选码</u>，称为全码。</p>
</li>
<li>
<p><strong>超码</strong>（超键）：一个<u>包含码的属性集称为超码</u>。</p>
<p>例如学号是码，则（学号，姓名）就是一个超码。</p>
</li>
</ul>
<h2 id="完整性约束" data-numberify>完整性约束<a class="anchor ms-1" href="#完整性约束"></a></h2>
<p>完整性规则保证用户对数据库做修改时不会破坏数据的一致性。</p>
<ul>
<li>
<p><strong>实体完整性</strong>（Entity Integrity，引用完整性）：规定基本关系R的主属性A不能取空值。</p>
<p>即<u>主属性不能为空</u>。</p>
</li>
<li>
<p><strong>参照完整性</strong>（Referential Integrity）：若F是基本关系R的外码，它与基本关系S的主码K<sub>s</sub>相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值可以取：</p>
<ul>
<li>空值（F的每个属性值均为空值）；</li>
<li>S中某个元组的主码值。</li>
</ul>
<p>即实体之间的关联可以变现为：关系R用外码F与关系S关联，外码F的值可以为空也可以为关系S中某个元组（记录）的主码值。</p>
</li>
<li>
<p><strong>用户定义完整性</strong>（User Defined Integrity）：针对某一具体的关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求，由应用的环境决定。</p>
<p>例如，银行的用户账户规定必须大于等于100000、小于999999。</p>
</li>
</ul>
<h2 id="关系代数运算符" data-numberify>关系代数运算符<a class="anchor ms-1" href="#关系代数运算符"></a></h2>
<p>关系操作的特点是操作对象和操作结果都是集合，而非关系数据模型的数据操作方式则为一次一个记录的方式。</p>
<p>关系数据语言分为三类：</p>
<ul>
<li>关系代数语言；</li>
<li>关系演算语言；</li>
<li>具有关系代数和关系演算双重特点的语言。</li>
</ul>
<p>关系演算语言包含：</p>
<ul>
<li>元组关系演算语言；</li>
<li>域关系演算语言。</li>
</ul>
<p>关系代数运算符有4类：</p>
<p><picture><img class="img-fluid " alt="关系代数运算符" src="/docs/ruan-she/data-base/uTools_1681431891302.png" loading="lazy" width="735" height="301" />
</picture>

</p>
<p>基本关系代数运算是对两个具有<u>相同的关系模式</u>的关系进行运算。关系$R$与$S$具有<u>相同的关系模式</u>，即$R$与$S$的元数相同（结构相同）。</p>
<p>基本关系代数运算包含：</p>
<ul>
<li>
<p><strong>并</strong>（Union）：关系$R$与$S$的并是由属于$R$或属于$S$的元组构成的集合，记作$R \cup S$，其形式定义如下：</p>
<p>$$
R \cup S = \{ t | (t \in R) \vee (t \in S) \}
$$</p>
<blockquote>
<p>式中$t$为元组变量。</p>
</blockquote>
</li>
<li>
<p><strong>差</strong>（Difference）：关系$R$与$S$的差是由<u>属于$R$但不属于$S$</u>的元组构成的集合，记作$R-S$，其形式定义如下：</p>
<p>$$
R-S = \{ t| (t \in R) \wedge (t \not\in S) \}
$$</p>
</li>
<li>
<p><strong>交</strong>（Intersection）：关系$R$与$S$的交是由属于$R$同时又属于$S$的元组构成的集合，记作$R \cap S$,其形式定义如下：</p>
<p>$$
R \cap S = \{ t| (t \in R) \wedge (t \in S) \}
$$</p>
<blockquote>
<p>$R \cap S = R-(R-S)$，或者$R \cap S = S-(S-R)$。</p>
</blockquote>
</li>
</ul>
<p>扩展的关系代数运算可以从基本的关系运算中导出，包括：</p>
<ul>
<li>
<p><strong>广义笛卡儿积</strong>（Extended Cartesian Product）：两个元组分别为$n$目和$m$目的关系$R$和$S$的广义笛卡儿积是一个$(n+m)$列的元组的集合。</p>
<p>元组的前$n$列是关系$R$的一个元组，后$m$列是关系$S$的一个元组，记作$R \times S$，其形式定义如下：</p>
<p>$$
R \times S = \{ t| (t \ = \ &lt;t^n, t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \}
$$</p>
<p>如果$R$和$S$中有相同的属性名，可在属性名前加关系名作为限定，以示区别。若$R$有$K_1$,个元组，$S$有$K_2$个元组，则$R$和$S$的广义笛卡儿积有$K_1 \times K2$个元组。</p>
<blockquote>
<p>$&lt;t^n, t^m&gt;$是一个元组$t^n$和$t^m$拼接成的一个元组。</p>
</blockquote>
</li>
<li>
<p><strong>投影</strong>（Projection）：投影运算是从关系的<u>垂直方向</u>进行运算，在关系$R$中选出若干属性列$A$组成新的关系，记作$\pi_A (R)$，其形式定义如下：</p>
<p>$$
\pi_A (R) = \{ t[A]|t \in R \}
$$</p>
</li>
<li>
<p><strong>选择</strong>（Selection）：选择运算是从关系的<u>水平方向</u>进行运算，是从关系$R$中选择满足给定条件的诸元组，记作$\sigma_F (R)$其形式定义如下：</p>
<p>$$
\sigma_A (R) = \{ t| (t \in R) \wedge F(t) = True \}
$$</p>
<p>其中，$F(t)$中的运算对象可以是：</p>
<ul>
<li>属性名（或列的序号）；</li>
<li>常数；</li>
<li>运算符；</li>
<li>算术比较符（$&lt;, \le, &gt;, \ge, \neq$）；</li>
<li>逻辑运算符（$\wedge, \vee, \neg$）。</li>
</ul>
</li>
<li>
<p><strong>连接</strong>（Join）：连接运算是从两个关系$R$和$S$的笛卡儿积中选取满足条件的元组。</p>
<blockquote>
<p>可以认为笛卡儿积是无条件连接，其他的连接操作认为是有条件连接。</p>
</blockquote>
<ul>
<li>
<p><strong>$\theta$连接</strong>：从$R$与$S$的笛卡儿积中选取属性间满足一定条件的元组。记作：</p>
<p>$$
R \mathop{\Join}\limits_{X \theta Y} S = \{ t| (t=&lt;t^n,t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[X] \ \theta \ t^m[Y]) \}
$$</p>
<p>其中：</p>
<ul>
<li>$X \theta Y$：连接的条件；</li>
<li>$\theta$：比较运算符；</li>
<li>$X$和$Y$分别为$R$和$S$上度数相等且可比的属性组；</li>
<li>$t^n\left[ X \right]$表示$R$中$t^n$元组的对应于属性$X$的一个分量；</li>
<li>$t^m[Y]$表示$S$中$t^m$元组的对应于属性$Y$的一个分量。</li>
</ul>
<p>$\theta$连接也可以表示为：</p>
<p>$$
R \mathop{\Join}\limits_{i \theta j} S = \{ t| (t=&lt;t^n,t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[i] \ \theta \ t^m[j]) \}
$$</p>
<p>其中，</p>
<ul>
<li>
<p>$i=1,2,3,\cdots,n$；</p>
</li>
<li>
<p>$j=1,2,3,\cdots,m$；</p>
</li>
<li>
<p>$i \theta j$：</p>
<p>从两个关系$R$和$S$中选取$R$的第$i$列和$S$的第$j$列之间满足$\theta$运算的元组进行连接。</p>
</li>
</ul>
<p>$\theta$连接可以由基本的关系运算笛卡儿积和选取运算导出。因此，$\theta$连接可表示为：</p>
<p>$$
R \mathop{\Join}\limits_{X \theta Y} S = \sigma_{X \theta Y}(R \times S)
$$</p>
<p>或：</p>
<p>$$
R \mathop{\Join}\limits_{i \theta j} S = \sigma_{i \theta j}(R \times S)
$$</p>
</li>
<li>
<p><strong>等值连接</strong>：当$\theta$为“=”时，称之为等值连接，记为$R \mathop{\Join}\limits_{i = j} S$，其形式定义如下：</p>
<p>$$
R \mathop{\Join}\limits_{i = j} S = \{ t| (t=&lt;t^n,t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[i] = t^m[j]) \}
$$</p>
</li>
<li>
<p>$F$连接：从关系$R$和$S$的笛卡尔积中选取属性值满足某一公式$F$的元组，记为$\mathop{\Join}\limits_{F}$。</p>
<p>$F$是形为$F_1 \wedge F_2 \wedge \cdots \wedge F_n$的公式，每个$F_p$是形为$i \theta j$的式子。</p>
</li>
<li>
<p><strong>自然连接</strong>：自然连接是一种特殊的等值连接，它要求两个关系中<u>进行比较的分量必须是相同的属性组</u>，并且在结果集中<u>将重复属性列去掉</u>。</p>
<p>若：</p>
<ul>
<li>
<p>$t^n \in R$，$t^m \in S$；</p>
</li>
<li>
<p>$R$和$S$具有相同的属性组$B$，且$B=(B_1,B_2,,B_k)$；</p>
</li>
<li>
<p>假定$R$关系的属性：</p>
<p>$$
A_1,A_2,\cdots,A_{n-k},B_1,B_2,\cdots,B_k
$$</p>
</li>
<li>
<p>$S$关系的属性：</p>
<p>$$
B_1,B2,\cdots,B_k,B_{k+1},B_{k+2},\cdots,B_m
$$</p>
</li>
</ul>
<p>自然连接可以记为$R \Join S$,其形式定义如下：</p>
<p>$$
R \Join S = \{ t| (t = &lt;t^n, t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (R.B_1 = S.B_1) \wedge (R.B_2 = S.B_2) \wedge \cdots \wedge (R.B_k = S.B_k) \}
$$</p>
<blockquote>
<p>一般连接是从关系的水平方向运算，而自然连接<u>不仅要从关系的水平方向运算，而且要从关系的垂直方向运算</u>（去掉重复属性）。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><strong>外连接</strong>（Outer Jion）：外连接运算是连接运算的扩展，可以处理由于连接运算而缺失的信息。</p>
<p>外连接运算有3种：</p>
<ul>
<li>
<p><strong>左外连接</strong>（Left Outer Jion，⟕）：取出左侧关系中所有与右侧关系中任一元组都不匹配的元组，用空值$null$充填所有来自右侧关系的属性，构成新的元组，将其加入自然连接的结果中。</p>
</li>
<li>
<p><strong>右外连接</strong>（Right Outer Jion，⟖）：取出右侧关系中所有与左侧关系中任一元组都不匹配的元组，用空值$null$填充所有来自左侧关系的属性，构成新的元组，将其加入自然连接的结果中。</p>
</li>
<li>
<p><strong>全外连接</strong>（Full Outer Jion，⟗）。完成左外连接和右外连接的操作。即填充左侧关系中所有与右侧关系中任一元组都不匹配的元组，并填充右侧关系中所有与左侧关系中任一元组都不匹配的元组，将产生的新元组加入自然连接的结果中。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/data-base/uTools_1681454087063.png" loading="lazy" width="762" height="575" />
</picture>

</p>
</li>
<li>
<p><strong>除</strong>（Division）：给定关系$R(X,Y)$和$S(Y,Z)$，$X、Y、Z$为属性组。$R \div S$应当满足元组在$X$上的分量值$x$的象集$Y_x$包含关系$S$在属性组$Y$上投影的集合。其形式定义如下：</p>
<p>$$
R \div S = \{ t^n[X] | (t^n \in R) \wedge (\pi_y (S) \subseteq Y_x) \}
$$</p>
<p>其中，$Y_x$为$x$在$R$中的象集，$x=t^n[X]$，且$R \div S$的结果集的属性组为$X$。</p>
<blockquote>
<p>除运算是同时从关系的水平方向和垂直方向进行运算。</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="sql-语句" data-numberify>SQL 语句<a class="anchor ms-1" href="#sql-语句"></a></h1>
<p><strong>SQL</strong>（<strong>Structured Query Language</strong>，发音为 sequal）是一种专门用来与数据库沟通的语言。通过 SQL，用户可以对数据库进行各种操作。</p>
<blockquote>
<p>标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSISQL。</p>
<p>查看更多 <a href="../sql-%e8%af%ad%e5%8f%a5">SQL语句</a> 相关内容。</p>
</blockquote>
<h2 id="分类" data-numberify>分类<a class="anchor ms-1" href="#分类"></a></h2>
<ol>
<li>
<p><strong>DDL</strong>（<strong>Data Definition Language</strong>，<strong>数据定义语言</strong>）：用来定义数据库对象：数据库，表，列等。</p>
<p>关键字：<code>CREATE</code>、<code>DROP</code>、<code>ALTER</code> 等。</p>
</li>
<li>
<p><strong>DML</strong>（<strong>Data Manipulation Language</strong>，<strong>数据操作语言</strong>）：用来对数据库中表的数据进行增删改。</p>
<p>关键字：<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code> 等。</p>
</li>
<li>
<p><strong>DQL</strong>（<strong>Data Query Language</strong>，<strong>数据查询语言</strong>）：用来查询数据库中表的记录。</p>
<p>关键字：<code>SELECT</code>等。</p>
</li>
<li>
<p><strong>DCL</strong>（<strong>Data Control Language</strong>，<strong>数据控制语言</strong>）：用来定义数据库的访问权限和安全级别，及创建用户。</p>
</li>
</ol>
<h2 id="数据定义语言ddl" data-numberify>数据定义语言（DDL）<a class="anchor ms-1" href="#数据定义语言ddl"></a></h2>
<p><code>CREATE</code>——创建：</p>
<ul>
<li>
<p>建立数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="err">数据库名</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>建立基本表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="err">列名</span><span class="w">    </span><span class="err">数据类型</span><span class="w"> </span><span class="p">[</span><span class="err">列级完整性约束条件</span><span class="p">],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="err">表级完整性约束条件</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>完整性约束有3种子句：</p>
<ul>
<li><code>PRIMARY KEY</code>：主键约束；</li>
<li><code>CHECK</code>：检查约束；</li>
<li><code>FOREIGN KEY</code>：外键约束；</li>
<li><code>NOT NULL</code>：非空约束；</li>
<li><code>UNIQUE</code>：唯一约束；</li>
<li><code>DEFAULT</code>：默认约束。</li>
</ul>
<p>定义列时使用的基本数据类型如下：</p>
<ul>
<li><code>NTEGER</code>：整数（也可写成<code>INT</code>）。</li>
<li><code>FLOAT(n)</code>：浮点数，精度至少为n位数字。</li>
<li><code>NUMERIC(p,d)</code>：定点数，由p位数字（不包括符号、小数点）组成，小数点后面有d位数字（也可写成<code>DECIMAL(p,d)</code>或<code>DEC(p,d)</code>）。</li>
<li><code>CHAR(n)</code>：长度为n的定长字符串。</li>
<li><code>DATETIME</code>：日期时间型。</li>
</ul>
</li>
</ul>
<p><code>ALTER TABLE</code>——修改表结构：</p>
<ul>
<li>
<p>增加新列：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="err">表名</span><span class="w"> </span><span class="k">ADD</span><span class="w"> </span><span class="err">列名</span><span class="w"> </span><span class="err">类型</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>修改列的定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="err">表名</span><span class="w"> </span><span class="k">ALTER</span><span class="w"> </span><span class="k">COLUMN</span><span class="w"> </span><span class="err">列名</span><span class="w"> </span><span class="err">新类型</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>删除列：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="err">表名</span><span class="w"> </span><span class="k">DROP</span><span class="w"> </span><span class="k">COLUMN</span><span class="w"> </span><span class="err">列名</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
<p><code>DROP TABLE</code>——删除基本表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="err">表名</span><span class="w">
</span></span></span></code></pre></div><h2 id="数据操纵语言dml" data-numberify>数据操纵语言（DML）<a class="anchor ms-1" href="#数据操纵语言dml"></a></h2>
<p><code>INSERT INTO</code>——插入：</p>
<ul>
<li>
<p>直接插入元组值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="err">表名（列名序列）</span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="err">元组值</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><p>或者：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="err">表名</span><span class="w"> </span><span class="p">(</span><span class="err">列名</span><span class="w"> </span><span class="err">序列</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="k">TABLE</span><span class="w"> </span><span class="p">(</span><span class="err">元组值</span><span class="p">),</span><span class="w"> </span><span class="p">(</span><span class="err">元组值</span><span class="p">),</span><span class="w"> </span><span class="p">...)</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>插入一个查询的结果值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="err">表名</span><span class="w"> </span><span class="p">(</span><span class="err">列名序列</span><span class="p">)</span><span class="w"> </span><span class="k">SELECT</span><span class="w"> </span><span class="err">查询语句</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
<p><code>DELETE FROM</code>——删除：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="err">表名</span><span class="w"> </span><span class="p">[</span><span class="k">WHERE</span><span class="w"> </span><span class="err">条件表达式</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><p><code>UPDATE</code>——修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">UPDATE</span><span class="w"> </span><span class="err">表名</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SET</span><span class="w"> </span><span class="err">列名</span><span class="o">=</span><span class="err">值表达式</span><span class="p">[,</span><span class="w"> </span><span class="err">列名</span><span class="o">=</span><span class="err">值表达式</span><span class="p">...]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="n">WHERE</span><span class="err">条件表达式</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><h2 id="数据查询语言dql" data-numberify>数据查询语言（DQL）<a class="anchor ms-1" href="#数据查询语言dql"></a></h2>
<p><code>SELECT</code>——查询：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="err">目标表的列名或列表达式序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="err">关系名表序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">WHERE</span><span class="w"> </span><span class="err">行条件表达式</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="err">列名序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">HAVING</span><span class="w"> </span><span class="err">组条件表达式</span><span class="p">]]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="err">列名</span><span class="p">[</span><span class="k">ASC</span><span class="o">|</span><span class="k">DESC</span><span class="p">]...]</span><span class="w">
</span></span></span></code></pre></div><h3 id="where-条件查询" data-numberify>WHERE 条件查询<a class="anchor ms-1" href="#where-条件查询"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="err">目标表的列名或列表达式序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="err">关系名表序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="err">行条件表达式</span><span class="w">
</span></span></span></code></pre></div><p>运算符：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>说明</strong></th>
<th><strong>运算符</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>=</code></td>
<td>等于</td>
<td><code>&gt;</code></td>
<td>大于</td>
</tr>
<tr>
<td><code>&lt;&gt;</code> 或 <code>!=</code></td>
<td>不等于</td>
<td><code>&gt;=</code></td>
<td>大于等于</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>小于</td>
<td><code>!&gt;</code></td>
<td>不大于</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>小于等于</td>
<td><code>BETWEEN</code></td>
<td>范围在指定的两个值之间</td>
</tr>
<tr>
<td><code>!&lt;</code></td>
<td>不小于</td>
<td><code>IS NULL</code></td>
<td>为 NULL 的值</td>
</tr>
<tr>
<td><code>IS NOT NULL</code></td>
<td>不为 NULL 的值</td>
<td><code>AND</code></td>
<td>逻辑与</td>
</tr>
<tr>
<td><code>OR</code></td>
<td>逻辑或</td>
<td><code>NOT</code>逻辑非</td>
<td></td>
</tr>
<tr>
<td><code>IN</code></td>
<td>匹配包含在集合中的值</td>
<td><code>NOT IN</code></td>
<td>指定不包含在集合中的值</td>
</tr>
<tr>
<td><code>LIKE</code></td>
<td>字符模糊配对</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><code>LIKE</code>字符模糊配对包含以下通配符：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="err">目标表的列名或列表达式序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="err">关系名表序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">WHRER</span><span class="w"> </span><span class="err">列名</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;_ABC%&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><ul>
<li><code>%</code>：表示任何字符出现任意次数。</li>
<li><code>_</code>：表示匹配单个任意字符。</li>
</ul>
<h3 id="order-by-排序数据" data-numberify>ORDER BY 排序数据<a class="anchor ms-1" href="#order-by-排序数据"></a></h3>
<p><code>ORDER BY</code>可以指定多个列来排序，排序规则有：</p>
<table>
<thead>
<tr>
<th style="text-align:center">关键字</th>
<th style="text-align:center">规则说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>ASC</code></td>
<td style="text-align:center">升序排序</td>
</tr>
<tr>
<td style="text-align:center"><code>DESC</code></td>
<td style="text-align:center">降序排序</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="err">目标表的列名或列表达式序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="err">关系名表序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[...]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="err">列名</span><span class="w"> </span><span class="p">[</span><span class="k">ASC</span><span class="o">|</span><span class="k">DESC</span><span class="p">]</span><span class="w"> </span><span class="p">...]</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>ORDER BY子句必须是SELECT命令中的最后一个子句。</p>
</blockquote>
<h3 id="group-by-分组数据" data-numberify>GROUP BY 分组数据<a class="anchor ms-1" href="#group-by-分组数据"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="err">目标表的列名或列表达式序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="err">关系名表序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="err">列名序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">HAVING</span><span class="w"> </span><span class="err">组条件表达式</span><span class="p">]]</span><span class="w">
</span></span></span></code></pre></div><ul>
<li><code>HAVING</code>是<code>GROUP BY</code>的分组条件控制语句。</li>
<li><code>HAVING</code>的操作符和<code>WHERE</code>相同。</li>
<li>被<code>WHERE</code>过滤掉的记录并不会出现在分组中。</li>
</ul>
<h3 id="聚合函数" data-numberify>聚合函数<a class="anchor ms-1" href="#聚合函数"></a></h3>
<p>聚合函数实现数据统计等功能。</p>
<p>函数名|功能
<code>AVG</code>|计算一个数值型表达式的平均值
<code>COUNT</code>|计算指定表达式中选择的项数，<code>COUNT(*)</code>统计查询输出的行数
<code>MIN</code>|计算指定表达式中的最小值
<code>MAX</code>|计算指定表达式中的最大值
<code>SUM</code>|计算指定表达式中的数值总和
<code>STDEV</code>|计算指定表达式中所有数据的标准差
<code>STDEVP</code>|计算总体标准差</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="err">目标表的列名或列表达式序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="err">关系名表序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="err">使用了聚合函数的条件判断</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><p>或：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="err">聚合函数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="err">关系名表序列</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>聚合函数可以使用算数运算符。</p>
<p>聚合函数常与<code>GROUP BY</code>子句一起使用。</p>
</blockquote>
<h3 id="连接" data-numberify>连接<a class="anchor ms-1" href="#连接"></a></h3>
<table>
<thead>
<tr>
<th style="text-align:center">连接符号</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>INNER JOIN</code></td>
<td style="text-align:center">内连接（默认）。<br>内连接又包括等值连接、非等值连接和自连接。</td>
</tr>
<tr>
<td style="text-align:center"><code>OUTER JOIN</code></td>
<td style="text-align:center">外连接。<br>又包括：<br><code>LEFT OUTER JOIN</code>（左外连接）；<br><code>RIGHT OUTER JOIN</code>（右外连接）；<br><code>FULL OUTER JOIN</code>（全外连接）</td>
</tr>
</tbody>
</table>
<h3 id="子查询" data-numberify>子查询<a class="anchor ms-1" href="#子查询"></a></h3>
<p>子查询是指将<code>SELECT</code>作为其它语句的子句使用。例如在<code>WHERE</code>、<code>FROM</code>中使用<code>SELECT</code>。</p>
<h2 id="数据控制语言dcl" data-numberify>数据控制语言（DCL）<a class="anchor ms-1" href="#数据控制语言dcl"></a></h2>
<p>数据控制控制的是<strong>用户对数据的存储访问权力</strong>，是由DBA决定的。但是，某个用户对某类数据具有何种权利，是个<strong>政策问题</strong>而不是技术问题。</p>
<p>授权语句格式（<code>GRANT</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">GRANT</span><span class="w"> </span><span class="o">&lt;</span><span class="err">权限</span><span class="o">&gt;</span><span class="p">[,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">权限</span><span class="o">&gt;</span><span class="p">]</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">ON</span><span class="w"> </span><span class="o">&lt;</span><span class="err">对象类型</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">对象名</span><span class="o">&gt;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">TO</span><span class="o">&lt;</span><span class="err">用户</span><span class="o">&gt;</span><span class="p">[,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">用户</span><span class="o">&gt;</span><span class="p">]...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">WITH</span><span class="w"> </span><span class="k">GRANT</span><span class="w"> </span><span class="k">OPTION</span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><p>不同类型的操作对象有不同的操作权限，常见的操作权限如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">对象</th>
<th style="text-align:center">对象类型</th>
<th style="text-align:left">操作权限</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">属性列</td>
<td style="text-align:center"><code>TABLE</code></td>
<td style="text-align:left"><code>SELECT</code>、<br><code>INSERT</code>、<br><code>UPDATE</code>、<br><code>DELETE</code>、<br><code>ALL PRIVILEGES</code></td>
</tr>
<tr>
<td style="text-align:center">视图</td>
<td style="text-align:center"><code>TABLE</code></td>
<td style="text-align:left"><code>SELECT</code>、<br><code>INSERT</code>、<br><code>UPDATE</code>、<br><code>DELETE</code>、<br><code>ALL PRIVILEGES</code></td>
</tr>
<tr>
<td style="text-align:center">基本表</td>
<td style="text-align:center"><code>TABLE</code></td>
<td style="text-align:left"><code>SELECT</code>、<br><code>INSERT</code>、<br><code>UPDATE</code>、<br><code>DELETE</code>、<br><code>ALTER</code>、<br><code>INDEX</code>、<br><code>ALL PRIVILEGES</code></td>
</tr>
<tr>
<td style="text-align:center">数据库</td>
<td style="text-align:center"><code>DATABASE</code></td>
<td style="text-align:left"><code>CREATETAB</code></td>
</tr>
</tbody>
</table>
<ul>
<li>建立表的权限，可由DBA授予普通用户；</li>
<li><code>WITH GRANT OPTION</code>：表示获得了这些权限的用户还可以将权限赋给其他用户。</li>
</ul>
<p>收回权限语句格式（<code>REVOKE</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">REVOKE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">权限</span><span class="o">&gt;</span><span class="p">[,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">权限</span><span class="o">&gt;</span><span class="p">]...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">ON</span><span class="w"> </span><span class="o">&lt;</span><span class="err">对象类型</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">对象名</span><span class="o">&gt;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="o">&lt;</span><span class="err">用户</span><span class="o">&gt;</span><span class="p">[,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">用户</span><span class="o">&gt;</span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><h2 id="视图" data-numberify>视图<a class="anchor ms-1" href="#视图"></a></h2>
<p>视图是从一个或者多个基本表或视图中导出的虚拟表。</p>
<p>创建视图：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">VIEW</span><span class="w"> </span><span class="err">视图名</span><span class="w"> </span><span class="p">(</span><span class="err">列表名</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="err">查询子句</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">WITH</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="k">OPTION</span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>子查询可以是任意复杂的<code>SELECT</code>语句，但通常不允许含有<code>ORDER BY</code>子句和<code>DISTINCT</code>短语。</li>
<li><code>WITH CHECK OPTION</code>：表示对<code>UPDATE</code>、<code>INSERT</code>、<code>DELETE</code>操作时保证更新、插入或删除的行满足视图定义中的谓词条件（即子查询中的条件表达式）。</li>
<li>组成视图的属性列名或者全部省略或者全部指定。如果省略属性列名，则隐含该视图由<code>SELECT</code>子查询目标列的主属性组成。</li>
<li>对视图进行的增改操作实际上是对基本表进行操作。</li>
</ul>
<p>删除视图：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">VIEW</span><span class="w"> </span><span class="err">视图名</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h2 id="索引" data-numberify>索引<a class="anchor ms-1" href="#索引"></a></h2>
<p>数据库中的索引是<u>某个表中一列或者若干列值的集合</u>和<u>相应的指向表中物理标识这些值的数据页的逻辑指针清单</u>。</p>
<p>索引分为：</p>
<ul>
<li>聚集索引：指索引表中索引项的顺序与表中记录的物理顺序一致的索引；</li>
<li>非聚集索引。</li>
</ul>
<blockquote>
<p>对数据库表创建和删除索引，修改的是数据库的内模式。</p>
</blockquote>
<hr>
<h1 id="关系数据库的规范化" data-numberify>关系数据库的规范化<a class="anchor ms-1" href="#关系数据库的规范化"></a></h1>
<h2 id="关系模式" data-numberify>关系模式<a class="anchor ms-1" href="#关系模式"></a></h2>
<p>一个关系模式应当是一个五元组（含关系名）：$R&lt;U,D,dom,F&gt;$。</p>
<p>其中：</p>
<ul>
<li>$R$：<u>关系名，是符号化的元祖语义；</u></li>
<li>$U$：<u>一组属性名；</u></li>
<li>$D$：属性组$U$中的属性来自域$D$；</li>
<li>$dom$：属性到域的映射；</li>
<li>$F$：<u>属性组$U$上的一组数据依赖（函数依赖）。</u></li>
</ul>
<p>$D$和$dom$对模式设计关系不大，通常将关系模式看作是一个三元组：$R&lt;U,F&gt;$。</p>
<p>当且仅当$U$上的一个关系$r$满足$F$时，称$r$为关系模式$R&lt;U,F&gt;$的一个关系。</p>
<h2 id="函数依赖" data-numberify>函数依赖<a class="anchor ms-1" href="#函数依赖"></a></h2>
<p>数据依赖是<u>通过一个关系中属性间值的相等与否</u>体现出来的<u>数据间的相互关系</u>。</p>
<ul>
<li>
<p><strong>函数依赖</strong>：设$R(U)$是属性集U上的关系模式，<u>$X$、$Y$是$U$的子集</u>。若对$R(U)$的任何一个可能的关系$r$，$r$中不可能存在两个元组在$X$上的属性值相等，而在$Y$上的属性值不等（即，<u>在关系$r$中，元组在$X$上的属性值相等，那么在$Y$上的属性值也相等</u>），则称<strong>X函数决定Y</strong>或<strong>Y函数依赖于X</strong>，记作$X \rightarrow Y$。</p>
<p>如，学生表中，$学号 \rightarrow 姓名$。</p>
<p>属性之间有3种关系，但并不是每一种都存在函数依赖。如果$X$和$Y$之间的对应关系是：</p>
<ul>
<li>$1-1$：存在函数依赖$X \rightarrow Y$和$Y \rightarrow Y$；</li>
<li>$n:1$：存在函数依赖$X \rightarrow Y$；</li>
<li>$n:m$：不存在函数依赖。</li>
</ul>
</li>
<li>
<p><strong>非平凡的函数依赖</strong>：$X \rightarrow Y$，但$Y \not\subseteq X$，则称$X \rightarrow Y$是非平凡的函数依赖。</p>
<p>例如，$姓名 \not\subseteq 学号$，则$学号 \rightarrow 姓名$是一个非平凡的函数依赖。</p>
</li>
<li>
<p><strong>平凡的函数依赖</strong>：如果$X \rightarrow Y$，但$Y \subseteq X$，则称$X \rightarrow Y$是平凡的函数依赖。</p>
<p>例如，$学号 \subset (学号,课程号)$，则$(学号,课程号) \rightarrow 学号$是一个平凡的函数依赖。</p>
</li>
<li>
<p><strong>完全函数依赖</strong>：在R(U)中，如果$X \rightarrow Y$，并且对于X的任何一个真子集$X&rsquo;$都有**$X&rsquo;$不能决定$Y$**，则称$Y$对$X$完全函数依赖，记作$X \stackrel{f}{\longrightarrow} Y$。</p>
<p>即需要由$X$的所有属性才能决定$Y$的，才能称为完全函数依赖。</p>
<p>如，$(学号,课程号) \rightarrow 成绩$。</p>
<p>如果$X$仅包含一个属性，那么此时必为完全函数依赖。</p>
</li>
<li>
<p><strong>部分函数依赖</strong>：如果$X \rightarrow Y$，但<strong>Y不完全函数依赖于X</strong>，则称Y对X部分函数依赖，记作$X \stackrel{P}{\longrightarrow} Y$。部分函数依赖也称为局部函数依赖。</p>
<p>如，（学号，班级代号） $\rightarrow$ 姓名，因为学号 $\rightarrow$ 姓名，所以（学号，班级代号） $\stackrel{P}{\longrightarrow}$ 姓名。</p>
</li>
<li>
<p><strong>传递依赖</strong>：在$R(U,F)$中（F是U上的一组函数依赖），如果$X \rightarrow Y,\ Y \not\subseteq X,\ Y \rightarrow Z$，则称<strong>Z对X传递依赖</strong>（$X \rightarrow Z$）。</p>
<p>即$X \stackrel{f}{\longrightarrow} Y$，且$Y \rightarrow Z$，则$X \rightarrow Z$。</p>
</li>
<li>
<p><strong>码</strong>：设$K$为$R(U,F)$中属性的组合，若$K \rightarrow U$，且对于$K$的任何一个真子集$K&rsquo;$都有$K&rsquo;$不能决定$U$，则$K$为$R$的候选码。</p>
<p>即$K \stackrel{f}{\rightarrow} U$，那么K是R的候选码。</p>
<p>若有多个候选码，则选一个作为主码（主键，主关键字）。候选码通常也称为<strong>候选关键字</strong>（候选键，键）。</p>
</li>
<li>
<p><strong>主属性</strong>和<strong>非主属性</strong>：<strong>包含在任何一个候选码中</strong>的属性称为主属性，否则称为非主属性。</p>
</li>
<li>
<p><strong>外码</strong>：若$R(U)$中的属性或属性组<u>$X$非$R$的码，但$X$是另一个关系的码</u>，则称$X$为外码。</p>
</li>
</ul>
<p><strong>函数依赖的公理系统</strong>（Armstrong公理系统）：</p>
<p>设关系模式$R(U,F)$，其中$U$为属性集，$F是$U$上的一组函数依赖，那么有以下推理规则：</p>
<ul>
<li>
<p><strong>自反律</strong>（A1）：若$Y \subseteq X \subseteq U$，则$X \rightarrow Y$为$F$所蕴涵（蕴含）。</p>
<p>如，（学号，姓名） $\rightarrow$ 姓名是函数依赖所蕴涵的。</p>
</li>
<li>
<p><strong>增广律</strong>（A2）：若$X \rightarrow Y$为F所蕴涵，且$Z \subseteq U$,则$XZ \rightarrow YZ$为$F$所蕴涵。</p>
<p>如，学号 $\rightarrow$ 姓名，班级 $\subseteq$ 学生表，那么（学号，班级） $\rightarrow$ （姓名，班级）是函数依赖所蕴涵的。</p>
</li>
<li>
<p><strong>传递律</strong>（A3）：若$X \rightarrow Y,\ Y \rightarrow Z$为$F$所蕴涵，则$X \rightarrow Z$为$F$所蕴涵。</p>
</li>
</ul>
<p>根据上述3条推理规则又可推出下述3条推理规则：</p>
<ul>
<li><strong>合并规则</strong>：若$X \rightarrow Y,\ X \rightarrow Z$，则$X \rightarrow YZ$为F所蕴涵。</li>
<li><strong>伪传递律</strong>：若$X \rightarrow Y,\ WY \rightarrow Z$，则$XW \rightarrow Z$为F所蕴涵。</li>
<li><strong>分解规则</strong>：若$X \rightarrow Y,\ Z \subseteq Y$，则$X \rightarrow Z$为F所蕴涵。</li>
</ul>
<blockquote>
<p>合并规则和分解规则是两个互逆的规则。即$X \rightarrow Y,\ X \rightarrow Z$，可得$X \rightarrow YZ$；那么$X \rightarrow YZ$，也可得$X \rightarrow Y,\ X \rightarrow Z$（因为$Y,Z \sub YZ$）。</p>
</blockquote>
<p>总结：</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:left">条件</th>
<th style="text-align:left">结论</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">函数依赖</td>
<td style="text-align:left">元组在$X$上的属性值相等，那么在$Y$上的属性值也相等</td>
<td style="text-align:left">$X$函数决定$Y$或$Y$函数依赖于$X$，记作$X \rightarrow Y$</td>
</tr>
<tr>
<td style="text-align:center">非平凡的函数依赖</td>
<td style="text-align:left">$X \rightarrow Y$，$Y \not\subseteq X$</td>
<td style="text-align:left">$X \rightarrow Y$是非平凡的函数依赖</td>
</tr>
<tr>
<td style="text-align:center">平凡的函数依赖</td>
<td style="text-align:left">$X \rightarrow Y$，$Y \subseteq X$</td>
<td style="text-align:left">$X \rightarrow Y$是平凡的函数依赖</td>
</tr>
<tr>
<td style="text-align:center">完全函数依赖</td>
<td style="text-align:left">$X \rightarrow Y$，$X&rsquo; \subset X$，$X&rsquo; \not\rightarrow Y$</td>
<td style="text-align:left">$Y$对$X$完全函数依赖，记作$X \stackrel{f}{\longrightarrow} Y$</td>
</tr>
<tr>
<td style="text-align:center">部分函数依赖（局部函数依赖）</td>
<td style="text-align:left">$X \rightarrow Y$，$X \stackrel{f}{\not\longrightarrow} Y$</td>
<td style="text-align:left">$Y$对$X$部分函数依赖，记作$X \stackrel{P}{\longrightarrow} Y$</td>
</tr>
<tr>
<td style="text-align:center">传递依赖</td>
<td style="text-align:left">$X \rightarrow Y$，$Y \not\subseteq X$，$Y \rightarrow Z$</td>
<td style="text-align:left">$Z$对$X$传递依赖</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:left">定义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">码（候选码，候选关键字）</td>
<td style="text-align:left">若$K \stackrel{f}{\rightarrow} U$，则$K$为$R$的候选码</td>
</tr>
<tr>
<td style="text-align:center">主属性</td>
<td style="text-align:left">包含在任何一个候选码中的属性</td>
</tr>
<tr>
<td style="text-align:center">非主属性</td>
<td style="text-align:left">不包含在任何一个候选码中的属性</td>
</tr>
<tr>
<td style="text-align:center">外码</td>
<td style="text-align:left">$X$非$R$的码，但$X$是另一个关系的码，则称$X$为外码</td>
</tr>
</tbody>
</table>
<p>Armstrong公理系统：</p>
<table>
<thead>
<tr>
<th style="text-align:center">定律</th>
<th style="text-align:left">条件</th>
<th style="text-align:left">F蕴含</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">自反律</td>
<td style="text-align:left">$Y \subseteq X \subseteq U$</td>
<td style="text-align:left">$X \rightarrow Y$</td>
</tr>
<tr>
<td style="text-align:center">增广律</td>
<td style="text-align:left">$X \rightarrow Y$，$Z \subseteq U$</td>
<td style="text-align:left">$XZ \rightarrow XZ$</td>
</tr>
<tr>
<td style="text-align:center">传递律</td>
<td style="text-align:left">$X \rightarrow Y,\ Y \rightarrow Z$</td>
<td style="text-align:left">$X \rightarrow Z$</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">规则</th>
<th style="text-align:left">条件</th>
<th style="text-align:left">F蕴含</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">合并规则</td>
<td style="text-align:left">$X \rightarrow Y,\ X \rightarrow Z$</td>
<td style="text-align:left">$X \rightarrow YZ$</td>
</tr>
<tr>
<td style="text-align:center">伪传递律</td>
<td style="text-align:left">$X \rightarrow Y,\ WY \rightarrow Z$</td>
<td style="text-align:left">$XW \rightarrow Z$</td>
</tr>
<tr>
<td style="text-align:center">分解规则</td>
<td style="text-align:left">$X \rightarrow Y,\ Z \subseteq Y$</td>
<td style="text-align:left">$X \rightarrow Z$</td>
</tr>
</tbody>
</table>
<h2 id="闭包计算" data-numberify>闭包计算<a class="anchor ms-1" href="#闭包计算"></a></h2>
<p>设关系模式$R&lt;U,F&gt;$，其中$U$为属性集，$F$是$U$上的一组函数依赖。称所有用Armstrong公理从F推出的函数依赖$X \rightarrow A_i$中，$A_i(X,A_i \subseteq U)$的属性集合为$X$的属性闭包，记为$X^{+}_{F}$或$X^{+}$。</p>
<p>定理：</p>
<p>设关系模式$R&lt;U,F&gt;$，其中$F$为函数依赖集，$X,Y \subseteq U$，则从$F$推出$X \rightarrow Y$的充要条件是$Y \subseteq X^{+}$。</p>
<blockquote>
<p>属性的闭包计算用于求主键。</p>
</blockquote>
<p>例如，给定关系$R(U,F)$，其中$U={A,B,C,D,E,H}$，$F={A \rightarrow B, B \rightarrow DH, A \rightarrow H, C \rightarrow E }$。</p>
<p>先根据$F$选取仅在$\rightarrow$左边出现的属性集（例如，$A$、$C$和$AC$）。根据选取的属性集进行闭包运算（先对$A$进行运算）：</p>
<p>$$
(A)^{+} \rightarrow (A \ BH)^{+} \rightarrow (AB \ D \ H)^{+} \rightarrow (ABDH)
$$</p>
<p>此时，$(ABDH)^{+}$无论再怎么推，结果都是$(ABDH)$，说明对$A$的闭包计算已经结束了，结果就是$(ABDH)$。</p>
<p>而$(ABDH) \neq U$，说明$A$并不是关系$R$的主键。</p>
<p>而对于$C$的函数依赖仅有$C \rightarrow E$，所以此时应该对$(AC)$进行闭包运算：</p>
<p>$$
(AC)^{+} \rightarrow (ABDH \ CE)^{+} \rightarrow (ABCDEH)
$$</p>
<p>此时对$(AC)$的闭包计算结果$(ABCDEH) = U$，说明$(AC)$是关系$R$的主键。</p>
<h2 id="关系模式的分解" data-numberify>关系模式的分解<a class="anchor ms-1" href="#关系模式的分解"></a></h2>
<p>对存在<strong>数据冗余</strong>、<strong>插入异常</strong>、<strong>删除异常</strong>问题的关系模式，应采取<u>将一个关系模式分解为多个关系模式的方法进行处理</u>（原来存储在一个二维表内的数据就要分散到多个二维表中）。要求是分解后的二维表不能丢失分解前二维表的信息。</p>
<p>为使分解后的模式保持原模式所满足的特性，其基本要求是模式分解具有：</p>
<ul>
<li>无损连接性；</li>
<li>保持函数依赖性。</li>
</ul>
<h3 id="无损连接" data-numberify>无损连接<a class="anchor ms-1" href="#无损连接"></a></h3>
<p>无损连接性指的是对关系模式分解时，原关系模式下，任一合法的关系实例，在<u>分解之后应能通过<strong>自然连接</strong>运算恢复</u>起来。</p>
<p>设$\rho = \{ R_1&lt;U_1,F_1&gt;,\ R_2&lt;U_2,F_2&gt;,\ \cdots,\ R_k&lt;U_k,F_k&gt; \}$是关系模式$R&lt;U,F&gt;$的一个分解，如果对于$R$的任一满足$F$的关系$r$都有：</p>
<p>$$
r = \pi_{R1}(r) \Join \pi_{R2}(r) \Join \cdots \Join \pi_{Rk}(r)
$$</p>
<p>则称这个分解$\rho$是满足依赖集$F$的无损连接。</p>
<blockquote>
<ul>
<li>
<p>$\pi()$运算是投影运算。</p>
</li>
<li>
<p>$\Join$运算是自然连接运算。</p>
</li>
</ul>
<p>个人理解：</p>
<p>无损连接性就是指，关系模式拆分后（分成若干个小的关系模式，即$\rho$），$\rho$中的关系模式从总体上看，保持着与$R$一致的连接。$\rho$中的关系模式通过自然连接保持着原本的关系模式。<u>重要的是$rho$中的关系模式可以通过<strong>自然连接</strong>恢复到原关系模式。</u></p>
</blockquote>
<p>验证无损连接的充要条件：</p>
<p>如果$R$的分解为$\rho = \{R_1,R_2\}$，$F$为$R$所满足的函数依赖集合，则分解$\rho$具有无损连接性的充分必要条件为：</p>
<p>$$
R_1 \cap R_2 \rightarrow (R_1 - R_2) \\
或 \\
R_1 \cap R_2 \rightarrow (R_2 - R_1)
$$</p>
<p>无损连接的判定算法：</p>
<ol>
<li>
<p>构造一个$k$行$n$列的表：</p>
<ul>
<li>每一列对应一个属性$A_j$；</li>
<li>每一行对应分解$rho$中的一个关系模式$R_i&lt;U_i, F_i&gt;$。</li>
</ul>
<p>若属性$A_j$属于$U_i$，则在第$i$行第$j$列上放符号$a_j$，否则放符号$b_{ij}$。</p>
</li>
<li>
<p>逐个检查$F$中的每一个函数依赖$FD_i$，并修改表中的元素：</p>
<p>取$F$中一个函数依赖$X_i \rightarrow A_j$（$X_i$要属于$rho$中的任一关系），考虑这些行中第$j$列元素：</p>
<ul>
<li>若其中有$a_j$，则全部改为$a_j$；</li>
<li>否则全部改为$b_{mj}$，$m$为这些行的行号最小值。</li>
</ul>
<p>若某一行变成了$(a_1, a_2, \cdots, a_n)$，则分解$rho$具有无损连接性，算法终止。</p>
</li>
<li>
<p>比较扫描前后，表有无变化。</p>
<ul>
<li>如有变化，则返回第2步；</li>
<li>否则算法终止，分解$rho$是有损连接。</li>
</ul>
</li>
</ol>
<p>例如，关系模式$R&lt;U,F&gt;$，其中，$U = \{ A, B, C \}$，$F = \{ A \rightarrow B, C \rightarrow B \}$。</p>
<p>判断$\rho = \{ AC, BC \}$是否具有无损连接性：</p>
<ol>
<li>
<p>构造初始表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$R_i$</th>
<th style="text-align:center">$A$</th>
<th style="text-align:center">$B$</th>
<th style="text-align:center">$C$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AC</td>
<td style="text-align:center">$a_1$</td>
<td style="text-align:center">$b_{12}$</td>
<td style="text-align:center">$a_3</td>
</tr>
<tr>
<td style="text-align:center">BC</td>
<td style="text-align:center">$b_{21}$</td>
<td style="text-align:center">$a_2$</td>
<td style="text-align:center">$a_3$</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>考察$A \rightarrow B$，将$AC$行的$B$列改为$a_2$：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$R_i$</th>
<th style="text-align:center">$A$</th>
<th style="text-align:center">$B$</th>
<th style="text-align:center">$C$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AC</td>
<td style="text-align:center">$a_1$</td>
<td style="text-align:center">$a_2$</td>
<td style="text-align:center">$a_3</td>
</tr>
<tr>
<td style="text-align:center">BC</td>
<td style="text-align:center">$b_{21}$</td>
<td style="text-align:center">$a_2$</td>
<td style="text-align:center">$a_3$</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>从上表中看出$AC$行为${a_1, a_2, a_3}$，所以判断该关系模式具有无损连接性。</p>
</li>
</ol>
<h3 id="保持函数依赖" data-numberify>保持函数依赖<a class="anchor ms-1" href="#保持函数依赖"></a></h3>
<p>设有关系模式$R$，$F$是$R$的函数依赖集，$Z$是$R$的一个属性集合，则称$Z$所涉及到的$F^+$中所有函数依赖为$F$在$Z$上的投影，即为$\pi_Z(F)$，有：</p>
<p>$$
\pi_Z(F) = \{ x \rightarrow y | (x \rightarrow y) \in F^+ 且 xy \subseteq z \}
$$</p>
<p>设关系模式$R$的一个分解$\rho = \{ R_1&lt;U_1,F_1&gt;,\ R_2&lt;U_2,F_2&gt;,\ \cdots,\ R_k&lt;U_k,F_k&gt; \}$，$F$是$R$的依赖集，如果$F$等价于$\pi_{R1}(F) \cup \pi_{R2}(F) \cup \cdots \cup \pi_{Rk}(F)$，则称分解$\rho$具有依赖保持性。</p>
<blockquote>
<p>该定义中的&quot;等价&quot;并不代表相等，而是$F$中所包含的函数依赖在分解的函数依赖中也被包含，或者在分解的函数依赖中能被推出。</p>
</blockquote>
<ul>
<li>一个无损连接分解不一定具有依赖保持性；</li>
<li>一个依赖保持性分解不一定具有无损连接性。</li>
</ul>
<h2 id="范式" data-numberify>范式<a class="anchor ms-1" href="#范式"></a></h2>
<p>关系数据库中的<u>关系必须满足一定的规范化要求</u>，对于不同的规范化程度可用范式来衡量。</p>
<p><u>范式是符合某一种级别的关系模式的集合</u>，是衡量关系模式规范化程度的标准，达到范式的关系才是规范化的。</p>
<p>一个低一级范式的关系模式，通过模式分解可以转换为若干个高一级范式的关系模式的集合，这个过程称为规范化。</p>
<p>主要有6种范式，高一级范式是在低一级范式的基础上进一步满足一些要求，按要求从低到高分为：</p>
<ol>
<li>
<p>第一范式（1NF）：若关系模式R的<u>每一个分量是不可再分的数据项</u>，则关系模式R属于第一范式。</p>
<p>如，关系模式$R&lt;U,F&gt;$：</p>
<p>$$
U = \{ 学号,姓名,学院,院长,课程号,课程名,成绩 \} \\
F = \{ 学号 \rightarrow 姓名,学号 \rightarrow 学院,学院 \rightarrow 院长,课程号 \rightarrow 课程名,(学号,课程号) \rightarrow 成绩 \}
$$</p>
<p>1NF可能存在的问题：</p>
<ul>
<li>
<p><strong>数据冗余</strong>：数据的冗余度大，R中可能出现多个元组在多个属性集中值相同；</p>
</li>
<li>
<p><strong>修改异常</strong>：引起修改操作的不一致性，修改一条记录可能需要修改其他多条记录才能保持数据一致性（由数据冗余引起）；</p>
</li>
<li>
<p><strong>插入异常</strong>：主码不能取空值或部分空值，会出现插入异常；</p>
</li>
<li>
<p><strong>删除异常</strong>：本该删除但又客观存在的元组，会出现删除异常。</p>
<p>即，删除掉的数据可能包含着其他本不该被删除的属性。</p>
</li>
</ul>
<p>问题的原因是1NF中可能存在<u>部分函数依赖</u>。</p>
</li>
<li>
<p>第二范式（2NF）：若关系模式$R \in 1NF$，且<u>每一个非主属性完全依赖于码</u>，则关系模式$R \in 2NF$。</p>
<p>即当<u>1NF消除了对主键的部分函数依赖后就能满足2NF</u>。</p>
<p>例如，$学号 \rightarrow 学院$，即$(学号,课程号) \stackrel{P}{\rightarrow} 学院$（部分依赖于码），所以$R \not\in 2NF$。</p>
<p><u>模式的分解需要保持函数依赖。</u>根据$F$，将$R$分解为：</p>
<ul>
<li>
<p>$R_1&lt;U_1,F_1&gt;$：</p>
<p>$$
U_1 = \{ 学号,姓名,学院,院长 \} \\
F_1 = \{ 学号 \rightarrow 姓名,学号 \rightarrow 学院,学院 \rightarrow 院长 \}
$$</p>
</li>
<li>
<p>$R_2&lt;U_2,F_2&gt;$：</p>
<p>$$
U_2 = \{ 课程号,课程名 \} \\
F_2 = \{ 课程号 \rightarrow 课程名 \}
$$</p>
</li>
<li>
<p>$R_3&lt;U_3,F_3&gt;$：</p>
<p>$$
U_3 = \{ 学号,课程号,成绩 \} \\
F_3 = \{ (学号,课程号) \rightarrow 成绩 \}</p>
</li>
</ul>
<p>则，$R1 \in 2NF$，$R2 \in 2NF$，$R3 \in 2NF$。</p>
<blockquote>
<p>2NF可能依然会存在数据冗余、修改异常、插入异常删除异常等问题。</p>
</blockquote>
</li>
<li>
<p>第三范式（3NF）：若关系模式$R(R \in 2NF)$中<u>任何一个非主属性都不传递函数依赖于码</u>。</p>
<p>若关系模式$R&lt;U,F&gt;$（$U$为关系集，$F$为函数依赖集）中不存在这样的码$X$，使得：</p>
<ul>
<li>$X \rightarrow Y(Y \not\rightarrow X)$，</li>
<li>$Y \rightarrow Z$，</li>
</ul>
<p>则关系模式$R \in 3NF$，其中：</p>
<ul>
<li>$Y$为属性组，</li>
<li>$Z(Z \not\subseteq Y)$为非主属性。</li>
</ul>
<p>即当<u>2NF消除了非主属性对主键的传递函数依赖</u>，则称为3NF。</p>
<p>如，$R_1$中有$学号 \rightarrow 学院$，$学院 \rightarrow 院长$（非主属性&quot;院长&quot;传递依赖于主键&quot;学号&quot;）。可将$R_1$分解为：</p>
<ul>
<li>
<p>$R_{11}&lt;U_{11},F_{11}&gt;$：</p>
<p>$$
U_{11} = \{ 学号,姓名,学院 \} \\
F_{11} = \{ 学号 \rightarrow 姓名, 学号 \rightarrow 学院 \}
$$</p>
</li>
<li>
<p>$R_{12}&lt;U_{12},F_{12}&gt;$：</p>
<p>$$
U_{12} = \{ 学院,院长 \} \\
F_{12} = \{ 学院 \rightarrow 院长 \}
$$</p>
</li>
</ul>
</li>
<li>
<p>BC范式（BCNF）：关系模式$R&lt;U,F&gt;$属于BCNF（$R$首先得满足3NF），当且仅当其$F$中<u>每个依赖的决定因素必定包含R的某个候选码</u>。</p>
<p>由BCNF的定义可以得到结论，一个满足BCNF的关系模式有：</p>
<ul>
<li>
<p>满足3NF。</p>
</li>
<li>
<p>所有<u>非主属性</u>对每一个<u>码</u>都是<u>完全函数依赖</u>。</p>
<p>$$
码 \stackrel{f}{\longrightarrow} 非主属性
$$</p>
</li>
<li>
<p>所有的<u>主属性对每一个</u>不包含它的码</u>，也是<u>完全函数依赖</u>。</p>
</li>
<li>
<p>没有任何属性完全函数依赖于非码的任何一组属性。</p>
</li>
</ul>
<p>一个满足BCNF的关系模式R己<u>消除了<strong>插入</strong>和<strong>删除异常</strong></u>。</p>
</li>
<li>
<p>第四范式（4NF）：</p>
<p>多值依赖：</p>
<p>给定的关系模式$R(U,F)$：</p>
<ul>
<li>$X,Y,Z \subseteq U$，</li>
<li>$Z=U-X-Y$（$Z$是$X \cup Y$的差集）。</li>
</ul>
<p>当且仅当对$R$的任一关系$r$，给定的一对$(x,z)$值，有一组$Y$的值，这组值仅仅决定于$x$值而与$z$值无关。则关系模式$R$中的多值依赖$X \rightarrow\rightarrow Y$成立。</p>
<p>平凡的多值依赖：</p>
<ul>
<li>$X \rightarrow\rightarrow Y$成立，</li>
<li>$Z = \Phi$，</li>
</ul>
<p>则$X \rightarrow\rightarrow Y$为平凡的多值依赖。</p>
<p>例如，课程$\rightarrow\rightarrow$任课老师，课程$\rightarrow\rightarrow$参考书。</p>
<p><picture><img class="img-fluid " alt="多值依赖表示例" src="/docs/ruan-she/data-base/uTools_1681986736869.png" loading="lazy" width="401" height="168" />
</picture>

</p>
<p>4NF定义：</p>
<p>设有一关系模式$R(U,F)$是1NF，如果对于$R$的每个<u>非平凡多值依赖</u>$X \rightarrow\rightarrow Y(Y \not\subseteq X)$，<u>$X$都包含了$R$的一个候选码</u>，则称$R$是第四范式，记为4NF。</p>
<p>例如，课程$\rightarrow\rightarrow$任课老师，课程$\rightarrow\rightarrow$参考书都是非平凡多值依赖，而课程不是码，所以不属于4NF。</p>
</li>
<li>
<p>第五范式（5NF）。</p>
</li>
</ol>
<p>范式之间的关系：</p>
<p>$$
5NF \sub 4NF \sub BCNF \sub 3NF \sub 2NF \sub 1NF
$$</p>
<p><picture><img class="img-fluid " alt="规范化范式的包含关系" src="/docs/ruan-she/data-base/uTools_1681894653450.png" loading="lazy" width="564" height="309" />
</picture>

</p>
<p>3NF和BCNE它们是进行规范化的主要目标。</p>
<p>1NF到4NF之间的转换关系：</p>
<table>
<thead>
<tr>
<th style="text-align:center">范式</th>
<th style="text-align:left">转换关系</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1NF</td>
<td style="text-align:left">每一个分量是不可再分的数据项</td>
</tr>
<tr>
<td style="text-align:center">2NF</td>
<td style="text-align:left">1NF消除了部分函数依赖后满足2NF</td>
</tr>
<tr>
<td style="text-align:center">3NF</td>
<td style="text-align:left">2NF消除了非主属性对码的传递函数依赖后满足3NF</td>
</tr>
<tr>
<td style="text-align:center">BCNF</td>
<td style="text-align:left">3NF消除了主属性对码的部分和传递函数依赖后满足BCNF</td>
</tr>
<tr>
<td style="text-align:center">4NF</td>
<td style="text-align:left">BCNF消除非平凡且非函数依赖的多值依赖后满足4NF</td>
</tr>
</tbody>
</table>
<p><picture><img class="img-fluid " alt="规范化步骤" src="/docs/ruan-she/data-base/uTools_1681988070233.png" loading="lazy" width="288" height="303" />
</picture>

</p>
<p>几种范式及其分解的性质：</p>
<table>
<thead>
<tr>
<th style="text-align:left">性质</th>
<th style="text-align:center">3NF</th>
<th style="text-align:center">BCNF</th>
<th style="text-align:center">4NF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">消除函数依赖带来冗余</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:left">消除多值函数依赖带来冗余</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:left">保持函数依赖</td>
<td style="text-align:center">是</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:left">保持多值函数依赖</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="数据库设计" data-numberify>数据库设计<a class="anchor ms-1" href="#数据库设计"></a></h1>
<p>新奥尔良（New Orleans）法式目前公认的数据库设计方法，它将数据库设计分为以下几个阶段：</p>
<ol>
<li>用户需求分析</li>
<li>概念结构设计</li>
<li>逻辑结构设计</li>
<li>物理结构设计</li>
</ol>
<p>这几个阶段之后是与数据库建立和运行有关的阶段：</p>
<ol>
<li>数据库实施</li>
<li>数据库运行和维护</li>
</ol>
<p><picture><img class="img-fluid " alt="数据库设计步骤" src="/docs/ruan-she/data-base/uTools_1682505975157.png" loading="lazy" width="382" height="711" />
</picture>

</p>
<h2 id="需求分析" data-numberify>需求分析<a class="anchor ms-1" href="#需求分析"></a></h2>
<p>需求分析是项目确定后，对数据库应用系统所要设计的<u>内容（数据）</u>和<u>功能（行为）</u>的整理和描述，是以用户的角度来认识系统。</p>
<p>需求分析是后面几个阶段，<u>逻辑结构设计</u>、<u>物理结构设计</u>以及<u>应用程序设计</u>的依据。</p>
<p>需求分析将收集到的零碎的、局部的数据分析整理后，建立<u>需求说明文档</u>、<u>数据字典</u>和<u>数据流程图</u>。</p>
<p>需求分析还包含：</p>
<ul>
<li>
<p>数据流分析：是对事务处理所需的原始数据的收集，及经过处理后所得数据及其流向。</p>
<p>使用数据流图（DFD）表示。DFD能指出数据的流向和需要进行的事物处理（不涉及如何处理）。</p>
</li>
<li>
<p>数据字典：是关于数据库中数据的描述，即元数据（不是数据本身）。</p>
<p>数据字典包括5个部分：</p>
<ul>
<li>数据项；</li>
<li>数据结构；</li>
<li>数据流；</li>
<li>数据存储；</li>
<li>加工。</li>
</ul>
</li>
</ul>
<p><u>系统需求说明书是需求分析阶段的成果</u>，主要包括<u>数据流图</u>、<u>数据字典</u>、<u>各种说明性表格</u>、<u>统计输出表和系统功能结构图</u>等。</p>
<p>需求分析阶段的工作：</p>
<p><picture><img class="img-fluid " alt="需求分析阶段的工作步骤" src="/docs/ruan-she/data-base/uTools_1682560887456.png" loading="lazy" width="646" height="291" />
</picture>

</p>
<h2 id="概念结构设计" data-numberify>概念结构设计<a class="anchor ms-1" href="#概念结构设计"></a></h2>
<p>概念设计阶段的目标是产生整体数据库概念结构，即概念模型，它是与DBMS无关的。</p>
<p>概念结构设计的方法：</p>
<ul>
<li>自顶向下</li>
<li>自底向上</li>
<li>逐步扩张</li>
<li>混合策略（自顶向下和自底向上相结合）</li>
</ul>
<p>概念结构是对现实世界的一种抽象，从数据库设计角度看，主要是数据抽象，一般有如下3种数据抽象：</p>
<ul>
<li>分类</li>
<li>聚集</li>
<li>概括</li>
</ul>
<p>局部视图设计就是对某个局部应用设计其分一R图，也称局部E-R图。其基本步骤如下：</p>
<p><picture><img class="img-fluid " alt="概念结构设计的工作步骤" src="/docs/ruan-she/data-base/uTools_1682560993863.png" loading="lazy" width="717" height="341" />
</picture>

</p>
<ol>
<li>确定局部结构范围；</li>
<li>定义实体；</li>
<li>联系定义；</li>
<li>属性分配。</li>
</ol>
<p>概念模型的建立采用E-R模型。</p>
<h3 id="e-r-模型" data-numberify>E-R 模型<a class="anchor ms-1" href="#e-r-模型"></a></h3>
<p>E-R模型用E-R图（ERD）表示，E-R图有以下几个成分：</p>
<ul>
<li>
<p><strong>实体</strong>：用<strong>矩形</strong>表示。</p>
</li>
<li>
<p><strong>联系</strong>：用<strong>棱形</strong>表示，并用无向边分别与有关实体连接起来，同时在无向边标注联系的类型（$1:1$，$1:n$ 或 $m:n$）。</p>
</li>
<li>
<p><strong>属性</strong>：用<strong>椭圆形</strong>表示，并用无向边将其与相应的实体连接起来</p>
<p>E-R模型中的属性有以下分类：</p>
<ul>
<li>
<p>简单属性和复合属性：</p>
<ul>
<li>简单属性是原子的、不可再分的；</li>
<li>复合属性可以细分为更小的部分。</li>
</ul>
</li>
<li>
<p>单值属性和多值属性：</p>
<ul>
<li>单值属性是一个属性对应一个值；</li>
<li>多值属性是一个属性对应一组值。</li>
</ul>
</li>
<li>
<p>NULL属性：实体在某个属性上没有值或属性值未知时，使用NULL值表示。</p>
</li>
<li>
<p>派生属性：派生属性可以从其他属性得来（通过运算等方式求出）。</p>
</li>
</ul>
</li>
</ul>
<p>扩充的E-R模型（用来表达更多具有特殊语义的成分）有以下成分：</p>
<ul>
<li>
<p><strong>弱实体</strong>：使用<strong>双线矩形框</strong>表示。将需要依赖其他实体存在的实体。</p>
<p>实体间的所有（Ownership，拥有）关系代表一个实体对另一些实体具有很强的依赖关系，即一个实体的存在必须以另一个实体为前提。</p>
<p>例如职工与家属的联系，家属总是属于某职工的（在关系模式中需要依赖职工而存在），所以家属是弱实体。</p>
</li>
<li>
<p><strong>特殊化</strong>：将一个实体集<u>按照某些特性区分为几个<strong>子实体</strong></u>。这种从普遍到特殊的过程即为特殊化。</p>
<p>子实体的图形表示如下：</p>
<p><picture><img class="img-fluid " alt="子实体" src="/docs/ruan-she/data-base/uTools_1684564987147.png" loading="lazy" width="256" height="145" />
</picture>

</p>
<p>子实体由称为子类，它会有一个超类，并且能继承超类的属性，超类的属性是实体集中所有子实体的相同属性。</p>
</li>
</ul>
<p>E-R图中的主要构件（包含扩充的E-R模型成分）：</p>
<p><picture><img class="img-fluid " alt="E-R图中的主要构件" src="/docs/ruan-she/data-base/uTools_1682508598814.png" loading="lazy" width="1035" height="391" />
</picture>

</p>
<h3 id="建立概念结构模型" data-numberify>建立概念结构模型<a class="anchor ms-1" href="#建立概念结构模型"></a></h3>
<p>建立概念结构模型的步骤如下：</p>
<ol>
<li>
<p>选择局部应用：</p>
<p>需求分析阶段得到的大量数据分散杂乱，许多数据会应用于不同的处理，数据与数据之间关联关系也较为复杂。要最终<u>确定实体、属性和联系，必须根据数据流图这一线索理清数据</u>。</p>
<p>数据流图是对业务处理过程从高层到底层的一级抽象：</p>
<ul>
<li>高层抽象流图一般反映系统的概貌，对数据的引用较为笼统；</li>
<li>底层又可能过于细致，不能体现数据的关联关系。</li>
</ul>
<p>因此要<u>选择适当层次的数据流图，让这一层的每一部分对应一个局部应用，实现某一项功能。从这一层入手，就能很好地设计<strong>分E-R图</strong></u>。</p>
</li>
<li>
<p>逐一设计分E-R图。</p>
</li>
<li>
<p>E-R图合并：</p>
<p>根据局部应用设计好各局部E-R图之后，就可以对各分E-R图进行合并。</p>
<p>合并的目的在于，在合并过程中解决分E-R图中相互存在的冲突。</p>
</li>
</ol>
<p>分E-R图之间的冲突主要有：</p>
<ul>
<li><strong>属性冲突</strong>：同一属性在不同的分E-R图上的属性类型、取值范围和数据单位等可能会不一致。</li>
<li><strong>命名冲突</strong>：相同意义的属性在不同的分E-R图上可能会有不同的命名。</li>
<li><strong>结构冲突</strong>：同一实体在不同的分E-R图中可能会有不同的属性；同一对象在某一分E-R图中被抽象为实体，而在另一分E-R图中又可能被抽象为属性，反之亦然。</li>
</ul>
<h2 id="逻辑结构设计" data-numberify>逻辑结构设计<a class="anchor ms-1" href="#逻辑结构设计"></a></h2>
<p>逻辑结构设计就是在概念结构设计的基础上进行数据模型设计，可以是层次模型、网状模型和关系模型。</p>
<p>通常是把概念模型转换成为<u>某个具体的数据库管理系统所支持的结构数据模型</u>（与DBMS有关）。即，将概念结构设计所得的E-R模型转换成关系模式。</p>
<p>逻辑结构设计的工作步骤：</p>
<p><picture><img class="img-fluid " alt="逻辑结构设计的工作步骤" src="/docs/ruan-she/data-base/uTools_1682577339219.png" loading="lazy" width="581" height="296" />
</picture>

</p>
<h3 id="e-r-模型转换关系模式" data-numberify>E-R 模型转换关系模式<a class="anchor ms-1" href="#e-r-模型转换关系模式"></a></h3>
<ol>
<li>
<p>实体向关系模式的转换：</p>
<p>将E-R图中的实体逐一转换成为一个关系模式：</p>
<ul>
<li>实体名：对应关系模式的名称；</li>
<li>实体的属性：转换成关系模式的属性；</li>
<li>实体标识符：关系的码（键）。</li>
</ul>
<p>超类和子类的转换：超类和子类定义为两个关系模式，将超类的主键加到子类中。</p>
</li>
<li>
<p>联系向关系模式的转换：</p>
<ul>
<li>
<p>一对一联系的转换：</p>
<p>有两种方式：</p>
<ul>
<li>
<p>方式1：将联系转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性包括该联系所关联的两个实体的码及联系的属性，关系的码取自任一方实体的码。</p>
<p>那么一个一对一联系需要转换成三个关系模式。</p>
</li>
<li>
<p>方式2（一般使用该方式）：将联系归并到关联的两个实体的任一方，给待归并的一方实体属性集中增加另一方实体的码和该联系的属性即可，归并后的实体码保持不变。</p>
<p>一个一对一联系仅需转换成两个关系模式。</p>
</li>
</ul>
<p>例如：</p>
<p><picture><img class="img-fluid " alt="联系向关系模式的转换示例" src="/docs/ruan-she/data-base/uTools_1682562445900.png" loading="lazy" width="304" height="358" />
</picture>

</p>
<ul>
<li>
<p>方式1：</p>
<p>厂长（<strong>姓名</strong>，性别，年龄）</p>
<p>工厂（<strong>厂号</strong>，厂名，地点）</p>
<p>管理（（厂长）<strong>姓名</strong>，厂号，任期）</p>
<blockquote>
<p>粗体代表该关系模式的码。管理的码可以为姓名或厂号。</p>
</blockquote>
</li>
<li>
<p>方式2：</p>
<p>厂长（姓名，性别，年龄）</p>
<p>工厂（厂号，厂名，地点，（厂长）姓名，任期）</p>
</li>
</ul>
</li>
<li>
<p>一对多联系的转换：</p>
<p>两种方式：</p>
<ul>
<li>方式1：将联系转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性取该联系所关联的两个实体的码及联系的属性，<u>关系的码是多方实体的码</u>；</li>
<li>方式2（一般使用该方式）：将联系<u>归并到关联的两个实体的多方</u>，给待归并的多方实体属性集中增加一方实体的码和该联系的属性即可，归并后的多方实体码保持不变。</li>
</ul>
<p>例如：</p>
<p><picture><img class="img-fluid " alt="一对多联系转换的例子" src="/docs/ruan-she/data-base/uTools_1682563544291.png" loading="lazy" width="315" height="361" />
</picture>

</p>
<ul>
<li>
<p>方式1:</p>
<p>仓库（<strong>仓库号</strong>，地点，面积）</p>
<p>商品（<strong>货号</strong>，商品名，价格）</p>
<p>仓储（<strong>货号</strong>，仓库号，数量）</p>
</li>
<li>
<p>方式2：</p>
<p>仓库（<strong>仓库号</strong>，地点，面积）</p>
<p>商品（<strong>货号</strong>，商品名，价格，仓库号，数量）</p>
</li>
</ul>
</li>
<li>
<p>多对多联系的转换：</p>
<p>多对多联系只能转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性取该联系所关联的两个多方实体的码及联系的属性，关系的码是多方实体的码构成的属性组。</p>
<p>例如：</p>
<p><picture><img class="img-fluid " alt="多对多联系转换的示例" src="/docs/ruan-she/data-base/uTools_1682564018777.png" loading="lazy" width="327" height="373" />
</picture>

</p>
<p>转换成：</p>
<p>学生（<strong>学号</strong>，姓名，性别，年龄）</p>
<p>课程（<strong>课程号</strong>，课程名，学时）</p>
<p>选修（<strong>（学号，课程号）</strong>，成绩）</p>
</li>
</ul>
</li>
</ol>
<h3 id="关系模式的规范化" data-numberify>关系模式的规范化<a class="anchor ms-1" href="#关系模式的规范化"></a></h3>
<p>转换后的关系模式可能存在数据冗余、更新异常等问题，所以需要进一步的规范化处理。</p>
<ol>
<li>
<p>根据语义确定各关系模式的数据依赖（函数依赖）。</p>
</li>
<li>
<p>根据数据依赖确定关系模式的范式。判定关系模式是否达到了3NF或4NF。</p>
</li>
<li>
<p>如果关系模式不符合要求，要根据关系模式的分解算法对其进行分解，达到3NF、BCNF或4NF。</p>
</li>
<li>
<p>关系模式的评价及修正。</p>
<p>根据规范化理论对关系模式分解之后，就可以在理论上消除冗余和更新异常。但根据处理要求，可能还需要增加部分冗余以满足处理要求，这就需要做部分关系模式的处理，分解、合并或增加冗余属性，提高存储效率和处理效率。</p>
</li>
</ol>
<hr>
<h1 id="事务管理" data-numberify>事务管理<a class="anchor ms-1" href="#事务管理"></a></h1>
<p>事务是一个操作序列，这些操作“要么都做，要么都不做”。</p>
<p>事务和程序是两个不同的概念，一般一个程序可包含多个事务。</p>
<p>在SQL语言中，事务定义的语句有以下三条。</p>
<ul>
<li>
<p><code>BEGIN TRANSACTION</code>：事务开始。</p>
</li>
<li>
<p><code>COMMIT</code>：事务提交。</p>
<p>该操作表示事务成功地结束，它将通知事务管理器该事务的<u>所有更新操作现在可以被提交或永久地保留</u>。</p>
</li>
<li>
<p><code>ROLLBACK</code>：事务回滚。</p>
<p>该操作表示事务非成功地结束，它将通知事务管理器<u>出故障</u>了，数据库可能处于不一致状态，该事务的<u>所有更新操作必须回滚或撤销</u>。</p>
</li>
</ul>
<p>事务的ACID性质：</p>
<ul>
<li>
<p><strong>原子性</strong>（Atomicity）：事务是原子的，要么都做，要么都不做。</p>
</li>
<li>
<p><strong>一致性</strong>（Consistency）：事务执行的结果必须保证数据库从一个一致性状态变到另一个一致性状态。</p>
<p>因此，当数据库只包含成功事务提交的结果时，称数据库处于一致性状态。</p>
</li>
<li>
<p><strong>隔离性</strong>（Isolation）：事务相互隔离。</p>
<p>当多个事务并发执行时，任一事务的更新操作直到其成功提交的整个过程，对其他事务都是不可见的</p>
</li>
<li>
<p><strong>持久性</strong>（Durability）：一旦事务成功提交，即使数据库崩溃，其对数据库的更新操作也将永久有效。</p>
</li>
</ul>
<hr>
<h1 id="数据库故障" data-numberify>数据库故障<a class="anchor ms-1" href="#数据库故障"></a></h1>
<p>在数据库的运行过程中，难免会出现计算机系统的软、硬件故障，这些故障会影响数据库中数据的正确性，甚至破坏数据库，使数据库中的全部或部分数据丢失。因此，数据库的关键技术在于建立冗余数据，即备份数据。如何在系统出现故障后能够及时地使数据库恢复到故障前的正确状态，就是数据库恢复技术。</p>
<p>故障类型：</p>
<ul>
<li><strong>事务内部故障</strong>：有的可以通过事务程序本身发现；有的是非预期的，不能由事务程序处理。</li>
<li><strong>系统故障</strong>（软故障）：是指造成系统停止运行的任何事件，使得系统要重新启动，例如CPU故障、操作系统故障和突然停电等。</li>
<li><strong>介质故障</strong>（硬故障）：如磁盘损坏、磁头碰撞和瞬时强磁干扰。此类故障发生的几率小，但破坏性最大。</li>
<li><strong>计算机病毒</strong>：计算机病毒是一种人为的故障和破坏，是在计算机程序中插入的破坏，计算机功能或者数据可以繁殖和传播的一组计算机指令或程序代码。</li>
</ul>
<h2 id="备份方法" data-numberify>备份方法<a class="anchor ms-1" href="#备份方法"></a></h2>
<p>恢复的基本原理是“建立数据冗余”（重复存储）。建立冗余数据的方法是进行<u>数据转储</u>和<u>登记日志文件</u>，分为：</p>
<ul>
<li>
<p>静态转储和动态转储：</p>
<ul>
<li>
<p><strong>静态转储</strong>：在转储期间不允许对数据库进行任何存取、修改操作；</p>
</li>
<li>
<p><strong>动态转储</strong>：在转储期间允许对数据库进行存取、修改操作。</p>
<p>动态转储和用户事务可并发执行。</p>
</li>
</ul>
</li>
<li>
<p>海量转储和增量转储：</p>
<ul>
<li><strong>海量转储</strong>：指每次转储全部数据；</li>
<li><strong>增量转储</strong>：指每次只转储上次转储后更新过的数据。</li>
</ul>
</li>
<li>
<p><strong>日志文件</strong>：</p>
<p>在事务处理的过程中，DBMS把以下操作写入日志文件：</p>
<ul>
<li>事务开始、事务结束；</li>
<li>对数据库的插入、删除和修改。</li>
</ul>
<p>一旦发生故障，DBMS的恢复子系统利用日志文件撤销事务对数据库的改变，回退到事务的初始状态。因此，DBMS利用日志文件来进行事务故障恢复和系统故障恢复，并可协助后备副本进行介质故障恢复。</p>
</li>
</ul>
<h2 id="恢复" data-numberify>恢复<a class="anchor ms-1" href="#恢复"></a></h2>
<p>事务恢复有以下3个步骤：</p>
<ol>
<li>反向扫描文件日志（即从最后向前扫描日志文件），查找该事务的更新操作。</li>
<li>对事务的更新操作执行逆操作。</li>
<li>继续反向扫描日志文件，查找该事务的其他更新操作，并做同样的处理，直到事务的开始标志。</li>
</ol>
<hr>
<h1 id="并发控制" data-numberify>并发控制<a class="anchor ms-1" href="#并发控制"></a></h1>
<p>所谓并发操作，是指在多用户共享的系统中许多用户可能同时对同一数据进行操作。并发操作带来的问题是数据的不一致性，主要有三类：</p>
<ul>
<li><strong>丢失更新</strong></li>
<li><strong>不可重复读</strong></li>
<li><strong>读脏数据</strong></li>
</ul>
<p>其主要原因是事务的并发操作破坏了事务的隔离性。DBMS的并发控制子系统负责协调并发事务的执行，保证数据库的完整性不受破坏，避免用户得到不正确的数据。</p>
<h2 id="封锁" data-numberify>封锁<a class="anchor ms-1" href="#封锁"></a></h2>
<p>并发控制的主要技术是封锁。基本封锁的类型有：</p>
<ul>
<li>
<p>排它锁（X锁或写锁）：若事务T对数据对象A加上X锁，则<u>只允许T读取和修改A，其他事务都不能再对A加任何类型的锁</u>，直到T释放A上的锁。</p>
</li>
<li>
<p>共享锁（S锁或读锁）：若事务T对数据对象A加上S锁，则<u>只允许T读取A，但不能修改A，其他事务只能再对A加S锁</u>，直到T释放A上的S锁。</p>
<p>这就保证了其他事务可以读A，但在T释放A上的S锁之前不能对A进行任何修改。</p>
</li>
</ul>
<hr>
<h1 id="分布式数据库" data-numberify>分布式数据库<a class="anchor ms-1" href="#分布式数据库"></a></h1>
<p>分布式数据库系统是指数据存放在计算机网络的不同场地的计算机中，每一场地都有自治处理能力并能完成局部应用；而每一场地也参与（至少一种）全局应用程序的执行，全局应用程序可通过网络通信访问系统中多个场地的数据。其定义强调分布性和逻辑整体性两点。</p>
<p>分布式数据库中有以下基本概念：</p>
<ul>
<li><strong>分片透明</strong>：指用户或应用程序不需要知道逻辑上访问的表具体是怎么分块存储的。</li>
<li><strong>复制透明</strong>：指采用复制技术的分布方法，用户不需要知道数据是复制到哪些节点，如何复制的。</li>
<li><strong>位置透明</strong>：指用户无须知道数据存放的物理位置。</li>
<li><strong>逻辑透明</strong>：指用户或应用程序无需知道局部场地使用的是哪种数据模型。</li>
</ul>
<p>具有以下性质：</p>
<ul>
<li><strong>共享性</strong>：数据存储在不同的结点数据共享。</li>
<li><strong>自治性</strong>：指每结点对本地数据都能独立管理。</li>
<li><strong>可用性</strong>：指当某一场地故障时，系统可以使用其他场地上的副本而不至于使整个系统瘫痪。</li>
<li><strong>分布性</strong>：指数据在不同场地上的存储。</li>
</ul>
<hr>
<h1 id="存储过程" data-numberify>存储过程<a class="anchor ms-1" href="#存储过程"></a></h1>
<p>存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL语句集，它存储在数据库中，一次编译后永久有效，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。</p>
<p>存储过程是数据库所提供的一种数据库对象，通过存储过程定义一段代码，提供给应用程序调用来执行。从安全性的角度考虑，更新数据时，通过提供存储过程正第三方调用，将需要更新的数据传入存储过程，而在存储过程内部用代码分别对需要的多个表进行更新，从而避免了向第三方提供系统的表结构，保证了系统的数据安全。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>面向对象篇</title>
      <link>/docs/ruan-she/object-oriented/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/ruan-she/object-oriented/</guid>
      <description><![CDATA[面向对象基本概念 面向对象（Object-Oriented，00） = 对象（Object）+ 分类（Classification）+ 继承（Inhe]]></description>
      <content:encoded><![CDATA[<h1 id="面向对象基本概念" data-numberify>面向对象基本概念<a class="anchor ms-1" href="#面向对象基本概念"></a></h1>
<p><strong>面向对象</strong>（Object-Oriented，00） = <strong>对象</strong>（Object）+ <strong>分类</strong>（Classification）+ <strong>继承</strong>（Inheritance）+ <strong>通过消息的通信</strong>（Communication with Messages）</p>
<h2 id="对象" data-numberify>对象<a class="anchor ms-1" href="#对象"></a></h2>
<p>在面向对象的系统中，对象是基本的运行时的实体，它包括：</p>
<ul>
<li><strong>属性</strong>：数据；</li>
<li><strong>行为</strong>：作用于数据的操作。</li>
</ul>
<p>一个对象把属性和行为封装为一个整体。</p>
<blockquote>
<p>封装是一种信息隐蔽技术，它的目的是使对象的使用者和生产者分离，使对象的定义和实现分开。</p>
<p>对象可以看作是一个程序模块。</p>
</blockquote>
<p>一个对象通常由以下成分组成：</p>
<ul>
<li>对象名；</li>
<li>属性；</li>
<li>方法。</li>
</ul>
<h2 id="消息" data-numberify>消息<a class="anchor ms-1" href="#消息"></a></h2>
<p>对象之间进行通信的一种构造叫件消息。</p>
<h2 id="类" data-numberify>类<a class="anchor ms-1" href="#类"></a></h2>
<p>类可以分为三种：</p>
<ul>
<li>
<p><strong>实体类</strong>：实体类的对象表示现实世界中真实的实体；</p>
</li>
<li>
<p><strong>接口类</strong>：接口类的对象为用户提供一种与系统合作交互的方式，分
为人和系统两大类（边界类）；</p>
<ul>
<li>人的接口可以是显示屏、窗口、Wb窗体、对话框、菜单、列表框、其他显示控制、条形码、二维码或者用户与系统交互的其他方法。</li>
<li>系统接口涉及到把数据发送到其他系统，或者从其他系统接收数据。</li>
</ul>
</li>
<li>
<p><strong>控制类</strong>：控制类的对象用来控制活动流，充当协调者。</p>
</li>
</ul>
<h2 id="继承" data-numberify>继承<a class="anchor ms-1" href="#继承"></a></h2>
<p>继承是<u>父类</u>和<u>子类</u>之间<u>共享数据</u>和<u>方法</u>的机制。这是<u>类之间的一种关系</u>，在定义和实现一个类的时候，可以在一个已经存在的类的基础上进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</p>
<p>一个父类可以有多个子类。所以继承又分为：</p>
<ul>
<li>
<p>单重继承：只从一个父类得到继承；</p>
</li>
<li>
<p>多重继承：一个子类有两个或更多个父类。</p>
<p>多重继承中可能导致子类存在二义性的成员。</p>
</li>
</ul>
<h2 id="多态" data-numberify>多态<a class="anchor ms-1" href="#多态"></a></h2>
<p>多态（Polymorphism）：不同的对象收到同一消息可以产生完全不同的结果。</p>
<p>同一消息就可以调用不同的方法。多态的实现受到继承的支持，利用类的继承的层次关系，把具有通用功能的消息存放在高层次，而不同的实现这一功能的行为放在较低层次，在这些低层次上生成的对象能够给通用消息以不同的响应。</p>
<p>多态有不同的形式：</p>
<ul>
<li><strong>通用</strong>的多态：
<ul>
<li><strong>参数</strong>多态：应用比较广泛，被称为最纯的多态；</li>
<li><strong>包含</strong>多态：在许多语言中都存在，最常见的例子就是子类型化。即一个类型是另一个类型的子类型。</li>
</ul>
</li>
<li><strong>特定</strong>的多态：
<ul>
<li><strong>过载</strong>（Overloading）多态：同一个名字在不同的上下文中所代表的含义不同；</li>
<li><strong>强制</strong>多态。</li>
</ul>
</li>
</ul>
<h2 id="绑定" data-numberify>绑定<a class="anchor ms-1" href="#绑定"></a></h2>
<p>绑定是一个把过程调用和响应调用所需要执行的代码加以结合的过程。</p>
<p>绑定分为：</p>
<ul>
<li>
<p><strong>静态绑定</strong>：在编译时进行的；</p>
</li>
<li>
<p><strong>动态绑定</strong>：在运行时进行的。</p>
<p>一个给定的过程调用和代码的结合直到调用发生时才进行。</p>
<p>动态绑定是和类的继承以及多态相联系的。在继承关系中，子类是父类的一个特例，所以父类对象可以出现的地方，子类对象也可以出现。</p>
<p>在运行过程中，当一个对象发送消息请求服务时，要根据匿收对象的其体情况将请求的操作与实现的方法进行连接，即动态绑定。</p>
</li>
</ul>
<hr>
<h1 id="面向对象分析" data-numberify>面向对象分析<a class="anchor ms-1" href="#面向对象分析"></a></h1>
<p>同其他分析方法一样，面向对象分析（Object-Oriented Analysis，OOA）的目的是为了获得对应用问题的理解。</p>
<p>面向对象分析包含5个活动：</p>
<ul>
<li>认定对象；</li>
<li>组织对象；</li>
<li>描述对象间的相互作用；</li>
<li>确定对象的操作</li>
<li>定义对象的内部信息。</li>
</ul>
<h2 id="认定对象" data-numberify>认定对象<a class="anchor ms-1" href="#认定对象"></a></h2>
<p>在应用领域中，按自然存在的实体确立对象。</p>
<p>在定义域中，首先将自然存在的“名词”作为一个对象，这通常是研究问题、定义域实体的良好开始。</p>
<h2 id="组织对象" data-numberify>组织对象<a class="anchor ms-1" href="#组织对象"></a></h2>
<p>分析对象间的关系，将相关对象抽象成类，其目的是为了简化关联对象，利用类的继承性建立具有继承性层次的类结构。</p>
<p>抽象类时可从以下方面考虑：</p>
<ul>
<li>对象间的操作；</li>
<li>一个对象是另一个对象的一部分，如房子是由门和窗构成的。</li>
</ul>
<hr>
<h1 id="面向对象设计" data-numberify>面向对象设计<a class="anchor ms-1" href="#面向对象设计"></a></h1>
<p><strong>程序设计范型</strong>（Programming Paradigm）是人们在<u>程序设计时所采用的基本方式模型</u>，决定了程序设计时采用的<u>思维方式</u>、<u>使用的工具</u>，同时又<u>有一定的应用范畴</u>。</p>
<p>程序设计范型的发展经历了：</p>
<ul>
<li>过程程序设计；</li>
<li>模块化程序设计；</li>
<li>函数程序设计；</li>
<li>逻辑程序设计；</li>
<li>面向对象程序设计范型。</li>
</ul>
<p><strong>面向对象程序设计</strong>（Object-Oriented Programming，<strong>OOP</strong>）的<u>实质是选用一种<strong>面向对象程序设计语言</strong>（Object-Oriented Programming Language，<strong>OOPL</strong>）</u>：</p>
<ul>
<li>采用对象、类及其相关概念所进行的程序设计；</li>
<li>关键在于加入了类和继承性，从而进一步提高了抽象程度。</li>
</ul>
<p>特定的OOP概念一般是通过OOPL中特定的语言机制来体现的。</p>
<p>OOP现在已经扩展到系统分析和软件设计的范畴，出现了面向对象分析和面向对象设计的概念。</p>
<h2 id="设计原则" data-numberify>设计原则<a class="anchor ms-1" href="#设计原则"></a></h2>
<p>面向对象方法中的五大原则：</p>
<ul>
<li>
<p><strong>责任原则</strong>（Single Responsibility Principle，SRP）：当需要修改某个类的时候原因有且只有一个，让一个类只做一种类型责任。</p>
</li>
<li>
<p><strong>开放封闭原则</strong>（Open &amp; Close Principle，OCP）：软件实体（类、模块、函数等）应
该可以扩展的，即<strong>开放的</strong>；但是不可修改的，即<strong>封闭的</strong>。</p>
</li>
<li>
<p><strong>里氏替换原则</strong>（Liskov Substitution Principle，LSP）：子类型必须能够替换掉他们的基
类型。</p>
<p>即，在任何父类可以出现的地方，都可以用子类的实例来赋值给父类型的引用。</p>
<p>当一个子类的实例应该能够替换任何其超类的实例时，它们之间才具有是一个（is-a）关系。</p>
</li>
<li>
<p><strong>依赖倒置原则</strong>（Dependence Inversion Principle，DP）：抽象不应该依赖于细节，细
节应该依赖于抽象。即，<u>高层模块不应该依赖于低层模块，二者都应该依赖于抽象</u>。</p>
</li>
<li>
<p><strong>接口分离原则</strong>（Interface Segregation Principle，ISP）：不应该强迫客户依赖于它们不
用的方法。接口属于客户，不属于它所在的类层次结构。</p>
<p>即：<u>依赖于抽象，不要依赖于具体，同时在抽象级别不应该有对于细节的依赖。</u></p>
<p>这样做的好处就在于可以最大限度地应对可能的变化。</p>
</li>
</ul>
<p>Robert C. Martin提出的面向对象设计原则还包括以下几个：</p>
<ul>
<li>重用发布等价原则（Release Reuse Equivalency Principle，REP）：重用的粒度就是发布的粒度。</li>
<li><strong>共同封闭原则</strong>（Common Closure Principle，CCP）：包中的所有类对于同一类性质的变化应该是共同到闭的。一个变化若对一个包产生影响，则将对该包中的所有类产生影响，而对于其他的包不造成任何影响。</li>
<li><strong>共同重用原则</strong>（Common Reuse Principle，CRP）：一个包中的所有类应该是共同重用
的。如果重用了包中的一个类那么就要重用包中的所有类。</li>
<li>无环依赖原则（Acyclic Dependencies Principle，ADP）：在包的依赖关系图中不允许存
在环，即包之间的结构必须是一个直接的五环图形。</li>
<li>稳定依赖原则（Stable Dependencies Principle,SDP）：朝着稳定的方向进行依赖。</li>
<li>稳定抽象原则（Stable Abstractions Principle，SAP）：包的抽象程度应该和其稳定程
度一致。</li>
</ul>
<hr>
<h1 id="uml" data-numberify>UML<a class="anchor ms-1" href="#uml"></a></h1>
<p>面向对象分析强调的是对一个系统中对象的特征和行为的定义。目前，国际上已经出现了多种面向对象的方法，例如：</p>
<ul>
<li>Peter Coad和Edward Yourdon的OOA和OOD方法（又称Coad/Yourdon方法或Coad方法）；</li>
<li>Booch的OOD方法（又称Booch方法）；</li>
<li>OMT（Object Modeling Technique，面向对象建模技术）方法；</li>
<li>UML（Unified Modeling Language，统一建模语言）。</li>
</ul>
<p>UML是面向对象软件的标准化建模语言。由于其简单、统一，又能够表达软件设计中的动态和静态信息，目前己经成为可视化建模语言事实上的工业标准。</p>
<p>UML中包含3种基本构造块：</p>
<ul>
<li>事物；</li>
<li>关系；</li>
<li>图。</li>
</ul>
<h2 id="事物" data-numberify>事物<a class="anchor ms-1" href="#事物"></a></h2>
<p>UML中有4种事物：</p>
<ul>
<li>
<p><strong>结构事物</strong>（Structural Thing）：是UML模型中的名词。它们<u>通常是模型的<strong>静态部分</strong>，描述概念或物理元素</u>。</p>
<p>结构事物包括：</p>
<ul>
<li>
<p>类（Class）；</p>
</li>
<li>
<p>接口（Interface）；</p>
</li>
<li>
<p>协作（Collaboration）；</p>
</li>
<li>
<p>用例（Use Case）；</p>
</li>
<li>
<p>主动类（Active Class）；</p>
</li>
<li>
<p>构件（Component）；</p>
</li>
<li>
<p>制品（Artifact）；</p>
</li>
<li>
<p>结点（Node）；</p>
<p>&hellip;&hellip;</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="结构事物的图形表示" src="/docs/ruan-she/object-oriented/uTools_1682055522161.png" loading="lazy" width="708" height="294" />
</picture>

</p>
</li>
<li>
<p><strong>行为事物</strong>（Behavior Thing）：<u>是UML模型的<strong>动态部分</strong></u>。它们是模型中的动词，描述了跨越时间和空间的行为。</p>
<p>行为事物包括：</p>
<ul>
<li>
<p>交互（Interaction）；</p>
</li>
<li>
<p>状态机（State Machine）；</p>
</li>
<li>
<p>活动（Activity）；</p>
<p>&hellip;&hellip;</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="行为事物的图形表示" src="/docs/ruan-she/object-oriented/uTools_1682055712246.png" loading="lazy" width="621" height="133" />
</picture>

</p>
</li>
<li>
<p><strong>分组事物</strong>（Grouping Thing）：UML模型的<strong>组织部分</strong>，是一些由模型分解成的“盒子”。</p>
<p><u>在所有的分组事物中，最主要的分组事物是包（Package）</u>。包是把元素组织成组的机制，这种机制具有多种用途。结构事物、行为事物甚至其他分组事物都可以放进包内。</p>
<p>包与构件（仅在运行时存在）不同，它纯粹是概念上的（即它仅在开发时存在）。</p>
<p><picture><img class="img-fluid " alt="包的图形化表示" src="/docs/ruan-she/object-oriented/uTools_1682055987585.png" loading="lazy" width="224" height="157" />
</picture>

</p>
</li>
<li>
<p><strong>注释事物</strong>（Annotational Thing）：注释事物是UML模型的<strong>解释部分</strong>。这些注释事物用来描述、说明和标注模型的任何元素。</p>
<p>注解（Note）是一种主要的注释事物。注解是一个依附于一个元素或者一组元素之上，对它进行约束或解释的简单符号。</p>
</li>
</ul>
<h2 id="关系" data-numberify>关系<a class="anchor ms-1" href="#关系"></a></h2>
<p>UML中有4种关系，这4种关系是UML模型中可以包含的基本关系事物：</p>
<ul>
<li>
<p><strong>依赖</strong>（Dependency）：是<u>两个事物间的语义关系，其中一个事物（<strong>独立事物</strong>）发生变化会影响另一个事物（<strong>依赖事物</strong>）的语义</u>。</p>
<p>在图形上，把一个依赖画成一条<u>可能有方向的虚线</u>，如图：</p>
<p><picture><img class="img-fluid " alt="依赖的图形表示" src="/docs/ruan-she/object-oriented/uTools_1682057108089.png" loading="lazy" width="200" height="48" />
</picture>

</p>
<p>依赖的变体有：</p>
<ul>
<li>精化；</li>
<li>跟踪；</li>
<li>包含；</li>
<li>延伸。</li>
</ul>
<p>依赖有偶然性和临时性，即需要的时候依赖，不需要的时候不依赖。</p>
</li>
<li>
<p><strong>关联</strong>（Association）：是一种<u>结构关系</u>，它描述了一组链，<u>链是对象之间的连接</u>。</p>
<p>关联使用<u>实线</u>表示，在关联上可以标注重复度（Multiplicity）和角色（Role）。</p>
<p>描述了<u>整体和部分</u>间的结构关系的特殊类型的关联：</p>
<ul>
<li>
<p><strong>聚集</strong>（Aggregation，聚合）：<u>部分和整体的生命周期不一致</u>，整体消失了，部分仍然存在，<u>部分可以脱离整体存在</u>。</p>
<p>使用一端带<u>空心菱形</u>的实线表示。</p>
</li>
<li>
<p><strong>组合</strong>：<u>部分和整体的生命周期一致</u>，整体消失了，部分也消失了，<u>部分不可以脱离整体而存在</u>。</p>
<p>使用一端带<u>实心菱形</u>的实线表示。</p>
</li>
</ul>
<p>关联和聚集的图形化表示如图：</p>
<p><picture><img class="img-fluid " alt="关联和聚集的图形化表示" src="/docs/ruan-she/object-oriented/1682057458153.png" loading="lazy" width="408" height="101" />
</picture>

</p>
<p>聚合和组合中，带菱形的一端指向整体，另一端指向部分。</p>
<p>单向关联：用<u>带箭头实线</u>表示。</p>
<blockquote>
<p>关联的关系强度比依赖的关系强度要强一点。</p>
</blockquote>
<p>多重度：</p>
<p>进行面向对象设计时，类图中可以展现类之间的关联关系，还可以在类图中图示<u>关联中的数量关系</u>，即多重度。表示数量关系时，<u>用多重度说明数量或数量范围</u>，<u>表示有多少个实例（对象）能被连接起来</u>，即<u>一个类的实例能够与另一个类的多少个实例相关联</u>。</p>
<p>关联类：</p>
<p>当两个类之间的关联的重复度是多对多时，需要借助额外的属性来帮助表达它们之间的关系，而这个属性就需要定义在一个新的关联类中。关联类记录了这两个类之间的关联信息。关联中这些额外的属性用一条<u>垂直于关联的实线</u>表示，实线的一段连接接到关联的实线上，另一端指向这些属性。</p>
</li>
<li>
<p><strong>泛化</strong>（Generalization）：是一种特殊/一般关系，<u>特殊元素（子元素）的对象可替代一般元素（父元素）的对象</u>。用这种方法，<u>子元素共享了父元素的结构和行为</u>。</p>
<p>在图形上，把一个泛化关系画成一条<u>带有空心箭头的实线</u>，它指向父元素：</p>
<p><picture><img class="img-fluid " alt="泛化的图形表示" src="/docs/ruan-she/object-oriented/uTools_1682057764410.png" loading="lazy" width="162" height="53" />
</picture>

</p>
</li>
<li>
<p><strong>实现</strong>（Realization）：是<u>类元之间的语义关系，其中一个类元指定了由另一个类元保证执行的契约</u>。</p>
<p>在两种情况下会使用实现关系：</p>
<ul>
<li>在接口和实现它们的类或构件之间：</li>
<li>在用例和实现它们的协作之间。</li>
</ul>
<p>在图形上，把一个实现关系画成一条<u>带有空心箭头的虚线</u>，箭头指向模板类，另一端于实现类连接。</p>
<p><picture><img class="img-fluid " alt="实现的图形化表示" src="/docs/ruan-she/object-oriented/uTools_1682058026631.png" loading="lazy" width="167" height="61" />
</picture>

</p>
</li>
</ul>
<h2 id="uml中的图" data-numberify>UML中的图<a class="anchor ms-1" href="#uml中的图"></a></h2>
<p>UML2.0提供了13种图，分别是（<strong>加粗</strong>是重点，其它的作为了解）：</p>
<ul>
<li><strong>类图</strong></li>
<li><strong>对象图</strong></li>
<li><strong>用例图</strong></li>
<li><strong>状态图</strong></li>
<li><strong>活动图</strong></li>
<li><strong>构件图</strong></li>
<li>组合结构图</li>
<li><strong>部署图</strong></li>
<li>包图</li>
<li><strong>交互图</strong>：
<ul>
<li><strong>序列图</strong></li>
<li><strong>通信图</strong></li>
<li>交互概览图</li>
<li>计时图</li>
</ul>
</li>
</ul>
<h3 id="类图" data-numberify>类图<a class="anchor ms-1" href="#类图"></a></h3>
<p><u>类图</u>（Class Diagram）<u>展现了一组对象、接口、协作和它们之间的关系</u>。在面向对象系统的建模中所建立的<u>最常见的图就是类图</u>。类图给出系统的静态设计视图，包含主动类的类图（少见）给出了系统的静态进程视图。</p>
<p>类图中通常包括下述内容：</p>
<ul>
<li>
<p>类：</p>
<p><picture><img class="img-fluid " alt="类的图形表示" src="/docs/ruan-she/object-oriented/uTools_1684570702111.png" loading="lazy" width="106" height="243" />
</picture>

</p>
<p>类中的方法和属性前面有以下三种修饰符：</p>
<table>
<thead>
<tr>
<th style="text-align:center">修饰符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>+</code></td>
<td style="text-align:center"><code>public</code> 公有的</td>
</tr>
<tr>
<td style="text-align:center"><code>-</code></td>
<td style="text-align:center"><code>private</code> 私有的</td>
</tr>
<tr>
<td style="text-align:center"><code>#</code></td>
<td style="text-align:center"><code>protected</code> 受保护的</td>
</tr>
<tr>
<td style="text-align:center"><code>~</code></td>
<td style="text-align:center"><code>package</code> 包的</td>
</tr>
</tbody>
</table>
<p>例如：</p>
  <table style="width: 200px; margin: auto;">
      <tr><th>Student</th></tr>
      <tr>
      <td>
      <p>
          <code>- id&nbsp;&nbsp;&nbsp;:&nbsp;int</code>
          <br>
          <code>+ name&nbsp;:&nbsp;String</code>
          <br>
          <code>+ age&nbsp;&nbsp;:&nbsp;int</code>
      </p>
      </td>
      </tr>
      <tr>
      <td>
      <p>
          <code>+ getId()&nbsp;:&nbsp;int</code>
      </p>
      </td>
      </tr>
  </table>
</li>
<li>
<p>接口：</p>
<p><picture><img class="img-fluid " alt="接口的图形表示" src="/docs/ruan-she/object-oriented/uTools_1684570786524.png" loading="lazy" width="135" height="74" />
</picture>

</p>
</li>
<li>
<p>协作：</p>
<p><picture><img class="img-fluid " alt="协作的图形表示" src="/docs/ruan-she/object-oriented/uTools_1684570820946.png" loading="lazy" width="107" height="67" />
</picture>

</p>
</li>
<li>
<p>依赖、泛化和关联关系：</p>
<p><picture><img class="img-fluid " alt="依赖的图形表示" src="/docs/ruan-she/object-oriented/uTools_1682057108089.png" loading="lazy" width="200" height="48" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="关联图形化表示" src="/docs/ruan-she/object-oriented/1682057458153.png" loading="lazy" width="408" height="101" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="泛化的图形表示" src="/docs/ruan-she/object-oriented/uTools_1682057764410.png" loading="lazy" width="162" height="53" />
</picture>

</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="类图示例" src="/docs/ruan-she/object-oriented/uTools_1682061210921.png" loading="lazy" width="619" height="467" />
</picture>

</p>
<p>类图中也可以包含：</p>
<ul>
<li>注解和约束；</li>
<li>包或子系统。</li>
</ul>
<p>类图成分总结：</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:left">图示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类</td>
<td style="text-align:left"><picture><img class="img-fluid " alt="类图中的类的图形表示" src="/docs/ruan-she/object-oriented/uTools_1684650129674.png" loading="lazy" width="142" height="139" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">接口</td>
<td style="text-align:left"><picture><img class="img-fluid " alt="类图接口的图形表示" src="/docs/ruan-she/object-oriented/uTools_1684570786524.png" loading="lazy" width="135" height="74" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">协作</td>
<td style="text-align:left"><picture><img class="img-fluid " alt="协作的图形表示" src="/docs/ruan-she/object-oriented/uTools_1684570820946.png" loading="lazy" width="107" height="67" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">依赖</td>
<td style="text-align:left"><picture><img class="img-fluid " alt="依赖的图形表示" src="/docs/ruan-she/object-oriented/uTools_1682057108089.png" loading="lazy" width="200" height="48" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">泛化</td>
<td style="text-align:left"><picture><img class="img-fluid " alt="泛化的图形表示" src="/docs/ruan-she/object-oriented/uTools_1682057764410.png" loading="lazy" width="162" height="53" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">关联</td>
<td style="text-align:left"><picture><img class="img-fluid " alt="关联图形化表示" src="/docs/ruan-she/object-oriented/1682057458153.png" loading="lazy" width="408" height="101" />
</picture>

</td>
</tr>
</tbody>
</table>
<p>类图用于对系统的静态设计视图建模，<u>这种视图主要支持系统的功能需求</u>，通常以下述3种方式之一使用类图：</p>
<ul>
<li>
<p>对系统的词汇建模：</p>
<p>涉及做出这样的决定：</p>
<ul>
<li>哪些抽象是考虑中的系统的一部分；</li>
<li>哪些抽象处于系统边界之外。</li>
</ul>
<p>用类图详细描述这些抽象和它们的职责。</p>
</li>
<li>
<p>对简单的协作建模：协作是一些共同工作的类、接口和其他元素的群体，该群体提供的一些合作行为强于所有这些元素的行为之和。</p>
</li>
<li>
<p>对逻辑数据库模式建模：将模式看作为数据库的概念设计的蓝图。在很多领域中，要在关系数据库或面向对象数据库中存储永久信息，可以用类图对这些数据库的模式建模。</p>
</li>
</ul>
<h3 id="对象图" data-numberify>对象图<a class="anchor ms-1" href="#对象图"></a></h3>
<p>对象图（Object Diagram）展现了<u>某一时刻一组对象以及它们之间的关系</u>，<u>描述了在类图中所建立的事物的实例的静态快照</u>。</p>
<p>对象图一般包括对象和链，如图：</p>
<p><picture><img class="img-fluid " alt="对象图示例" src="/docs/ruan-she/object-oriented/uTools_1682061786263.png" loading="lazy" width="713" height="312" />
</picture>

</p>
<p>对象：对象图中的对象包含了类名、对象名和属性。</p>
<p>其图形化如下：</p>
<table style="width: 150px; text-align: center;">
    <tr>
    <th style="text-align: center;">
        对象名 : 类名
    </th>
    </tr>
    <tr>
    <td style="text-align: center;">
    <p>
        <code>属性1 = 值1</code>
        <br>
        <code>属性2 = 值2</code>
        <br>
        ......
    </p>
    </td>
    </tr>
</table>
<p>匿名对象（没有对象名）：</p>
<table style="width: 150px;">
    <tr>
    <th style="text-align: center;">
        : 类名
    </th>
    </tr>
    <tr>
    <td style="text-align: center;">
    <p>
        <code>属性1 = 值1</code>
        <br>
        <code>属性2 = 值2</code>
        <br>
        ......
    </p>
    </td>
    </tr>
</table>
<p>和类图一样，对象图给出系统的静态设计视图或静态进程视图，但它们是从真实的或原型实例的角度建立的。</p>
<h3 id="用例图" data-numberify>用例图<a class="anchor ms-1" href="#用例图"></a></h3>
<p>用例图（Use Case Diagram）展现了一组用例、参与者（Actor）以及它们之间的关系。</p>
<p>用例图通常包括以下内容：</p>
<ul>
<li>
<p>用例：是从<strong>用户角度</strong>描述<strong>系统的行为</strong>，它将<strong>系统的一个功能</strong>描述成一系列的事件，这些事件最终对操作者产生有价值的观测结果。</p>
<p>用例是一个类，它代表<strong>一类功能</strong>而不是使用该功能的某一具体实例。</p>
<p><picture><img class="img-fluid " alt="用例的图形表示" src="/docs/ruan-she/object-oriented/uTools_1684574449513.png" loading="lazy" width="114" height="73" />
</picture>

</p>
</li>
<li>
<p>参与者：是与系统交互的<strong>外部实体</strong>，可能是<strong>使用者</strong>，也可能是与系统交互的<strong>外部系统</strong>、<strong>基础设备</strong>等。</p>
<p>参与者用一个<u>人形图标</u>表示。</p>
</li>
<li>
<p>关系：</p>
<ul>
<li>
<p>用例之间的关系：</p>
<ul>
<li>
<p>包含关系：用带<code>&lt;&lt;include&gt;&gt;</code>的虚线箭头表示，如：</p>
<p><picture><img class="img-fluid " alt="包含关系" src="/docs/ruan-she/object-oriented/uTools_1684578078948.png" loading="lazy" width="613" height="182" />
</picture>

</p>
</li>
<li>
<p>扩展关系：用带<code>&lt;&lt;extend&gt;&gt;</code>的虚线箭头表示，如：</p>
<p><picture><img class="img-fluid " alt="扩展关系" src="/docs/ruan-she/object-oriented/uTools_1684578542547.png" loading="lazy" width="607" height="136" />
</picture>

</p>
<p>扩展用例是指，一个用例中，符合某些特定情况才会触发的另一个用例。</p>
<p>即一个用例执行的时候，可能会发生一些特殊情况或可选情况，这种情况就是这个用例的扩展用例。</p>
</li>
</ul>
</li>
<li>
<p>参与者和用例之间的关联关系。</p>
</li>
<li>
<p>用例与用例以及参与者与参与者之间的泛化关系。</p>
</li>
</ul>
</li>
</ul>
<p><picture><img class="img-fluid " alt="用例图示例" src="/docs/ruan-she/object-oriented/uTools_1682062071630.png" loading="lazy" width="756" height="382" />
</picture>

</p>
<p>用例图成分总结：</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">图示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">用例</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="用例的图形表示" src="/docs/ruan-she/object-oriented/uTools_1684574449513.png" loading="lazy" width="114" height="73" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">包含关系</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="用例之间的包含关系" src="/docs/ruan-she/object-oriented/uTools_1684578078948.png" loading="lazy" width="613" height="182" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">扩展关系</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="用例之间的扩展关系" src="/docs/ruan-she/object-oriented/uTools_1684578542547.png" loading="lazy" width="607" height="136" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">泛化关系</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="用例与用例以及参与者与参与者之间的泛化关系" src="/docs/ruan-she/object-oriented/uTools_1682057764410.png" loading="lazy" width="162" height="53" />
</picture>

</td>
</tr>
</tbody>
</table>
<h3 id="交互图" data-numberify>交互图<a class="anchor ms-1" href="#交互图"></a></h3>
<p>交互图用于<u>对系统的动态方面进行建模</u>。一张交互图表现的是一个交互，由一组对象和它们之间的关系组成，包含它们之间可能传递的消息。</p>
<p>每种交互图针对不同的目的，能适用于不同的情况。交互图表现为：</p>
<ul>
<li><strong>序列图</strong>：强调<strong>消息时间顺序</strong>的交互图；</li>
<li><strong>通信图</strong>：强调<strong>接收和发送消息的对象的结构组织</strong>的交互图；</li>
<li><strong>交互概览图</strong>：强调<strong>控制流</strong>的交互图；</li>
<li><strong>计时图</strong>。</li>
</ul>
<p>其中顺序图和通信图是同构的，它们之间可以相互转换。</p>
<p>在多数情况下，交互图包括对以下内容的具体的或原型化的实例以及它们之间传递的消息进行建模：</p>
<ul>
<li>类；</li>
<li>接口；</li>
<li>构件；</li>
<li>结点。</li>
</ul>
<p>所有这些都位于一个表达行为的脚本的语境中。</p>
<p>交互图一般包含：</p>
<ul>
<li>
<p>对象；</p>
</li>
<li>
<p>链；</p>
</li>
<li>
<p>消息</p>
<p>&hellip;&hellip;</p>
</li>
</ul>
<h4 id="序列图" data-numberify>序列图<a class="anchor ms-1" href="#序列图"></a></h4>
<p>序列图（Sequence Diagram，<strong>顺序图</strong>）是场景（Scenario）的图形化表示，<u>描述了以时间顺序组织的对象之间的交互活动</u>，<u>强调消息时间顺序</u>。</p>
<p>序列图的组成：</p>
<ol>
<li>
<p>把参加交互的对象放在图的上方，沿水平方向排列。</p>
<p>通常把发起交互的对象放在左边，下级对象依次放在右边。</p>
</li>
<li>
<p>把这些对象发送和接收的消息，沿垂直方向，按时间顺序从上到下放置。</p>
</li>
</ol>
<p><picture><img class="img-fluid " alt="序列图示例" src="/docs/ruan-she/object-oriented/uTools_1682064874751.png" loading="lazy" width="691" height="471" />
</picture>

</p>
<p>序列图的组成部分：</p>
<ul>
<li>
<p>对象：用方框框起来的<code>对象名:类名</code>，没有属性和方法等成分。</p>
</li>
<li>
<p><strong>对象生命线</strong>：表示<u>一个对象存在的时间段</u>。</p>
<p>如上图中对象下方垂直的虚线。</p>
<ul>
<li>对象可以在交互过程中创建：生命线从接收到构造型<code>create</code>消息开始；</li>
<li>也可以在交互过程中撤销：生命线从接收到构造型<code>destroy</code>消息结束，并且给出一个大$\times$的标记表明生命线的结束。</li>
</ul>
</li>
<li>
<p><strong>控制焦点</strong>：控制焦点表示<u>一个对象执行一个动作所经历的时间段</u>。</p>
<p>如上图中对象下方的空表矩形条框。</p>
</li>
<li>
<p><strong>消息</strong>：</p>
<p>普通的消息用<u>带箭头的实线</u>表示。所有消息的箭头都是指向接收对象。</p>
<ul>
<li>返回消息：用<u>带箭头的虚线</u>表示。</li>
<li>同步消息（调用消息）：指消息发送给接收对象后，需要等待接收对象返回后才可进行下一步操作。</li>
<li>异步消息：指消息发送给接收对象后，无需等待接收对象返回即可进行下一步操作。</li>
</ul>
</li>
</ul>
<p>序列图有两个不同于通信图的特性：</p>
<ul>
<li>序列图有对象生命线；</li>
<li>序列图有控制焦点。</li>
</ul>
<h4 id="通信图" data-numberify>通信图<a class="anchor ms-1" href="#通信图"></a></h4>
<p><u>通信图</u>（Communication Diagram，<strong>协作图</strong>）<u>强调收发消息的对象的结构组织</u>。</p>
<p>通信图的组成：</p>
<ol>
<li>将参加交互的<u>对象</u>作为图的<u>顶点</u>；</li>
<li>把连接这些对象的<u>链</u>表示为图的<u>弧</u>；</li>
<li>用对象发送和接收的<u>消息</u>来<u>修饰这些链</u>。</li>
</ol>
<p>这就提供了在协作对象的结构组织的语境中观察控制流的一个清晰的可视化轨迹。</p>
<p><picture><img class="img-fluid " alt="通信图示例" src="/docs/ruan-she/object-oriented/uTools_1682065157645.png" loading="lazy" width="719" height="314" />
</picture>

</p>
<p>通信图有以下成分：</p>
<ul>
<li>
<p>对象：与序列图一样，是用一个方框框起来的<code>对象名:类名</code>。</p>
</li>
<li>
<p><strong>路径</strong>（链接）：用实线表示，可以在链的末端附上一个路径构造型。</p>
<p>通常仅需显式地表示以下几种链的路径：</p>
<table>
<thead>
<tr>
<th style="text-align:center">构造型</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;&lt;local&gt;&gt;</code></td>
<td style="text-align:center">局部</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;&lt;parameter&gt;&gt;</code></td>
<td style="text-align:center">参数</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;&lt;global&gt;&gt;</code></td>
<td style="text-align:center">全局</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;&lt;self&gt;&gt;</code></td>
<td style="text-align:center">自身</td>
</tr>
</tbody>
</table>
<p>不必表示<code>association</code>（关联）。</p>
</li>
<li>
<p><strong>序号</strong>：用来表示消息的时间顺序。是消息前的一个数字前缀，可使用带小数点的号码表示嵌套消息，嵌套可为任意深度。</p>
<p>如2表示第2个消息，2.1表示嵌套在消息2中的第1个消息。</p>
</li>
<li>
<p>消息：沿同一个链可以显示许多消息（可能发自不同方向），并且每个消息都有唯一的序号。</p>
</li>
</ul>
<p>通信图有两个不同于序列图的特性：</p>
<ul>
<li>通信图有路径；</li>
<li>通信图有序号。</li>
</ul>
<h4 id="总结" data-numberify>总结<a class="anchor ms-1" href="#总结"></a></h4>
<p>顺序图和通信图是同构的，它们之间可以相互转换。它们的差异如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">差异</th>
<th style="text-align:left"><center>序列图</center></th>
<th style="text-align:left"><center>通信图</center></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>强调</strong></td>
<td style="text-align:left"><center>消息时间顺序</center></td>
<td style="text-align:left"><center>收发消息的对象的结构组织</center></td>
</tr>
<tr>
<td style="text-align:center"><strong>不同的特性</strong></td>
<td style="text-align:left"><ul><li>有对象生命线：对象存在的时间段</li><li>有控制焦点：对象执行动作所经历的时间段</li></ul></td>
<td style="text-align:left"><ul><li>有路径：表示对象之间有交互</li><li>有序号：表示消息的时间顺序，可嵌套表示</li></ul></td>
</tr>
</tbody>
</table>
<h3 id="状态图" data-numberify>状态图<a class="anchor ms-1" href="#状态图"></a></h3>
<p>状态图（State Diagram，状态转换图）展现了一个状态机。状态图关注系统的动态视图，对于接口、类和协作的行为建模尤为重要，<u>强调对象行为的事件顺序</u>。</p>
<p>状态图由以下组成：</p>
<ul>
<li>
<p><strong>状态</strong>：指对象的生命周期中某个条件或者状态，是<u>任何可以被观察到的系统行为模式</u>，<u>一个状态代表系统的一种行为模式</u>。</p>
<p>状态规定了系统内对事件的响应方式。</p>
<p>系统对事件的响应：</p>
<ul>
<li>可以是<u>做一个（或一系列）动作</u>；</li>
<li>可以是仅仅<u>改变系统本身的状态</u>；</li>
<li>可以是<u>即改变状态，又做动作</u>。</li>
</ul>
<p>状态转换图中定义的状态主要有：</p>
<ul>
<li><strong>初态</strong>（初始状态）：用一个<u>实心圆点</u>表示。一张状态图<u>只能有一个初态</u>。</li>
<li><strong>终态</strong>（最终状态）：用一个<u>实心圆点外加一个圆圈</u>表示。一张状态图<u>可以没有终态，也可以有多个</u>。</li>
<li><strong>中间状态</strong>。</li>
</ul>
<p>状态图中的状态用一个<u>圆角矩形</u>表示，可以用两条水平横线将其分为上中下3个部分：</p>
<ol>
<li>上面部分（必须）：状态的名称；</li>
<li>中间部分（可选）：状态变量的名称和值；</li>
<li>下面部分（可选）：活动表。</li>
</ol>
<p>状态还可分为：</p>
<ul>
<li>
<p>简单状态。</p>
</li>
<li>
<p>组合状态：含有子状态的状态，这个状态也称为其子状态的超状态。</p>
<p>子状态：嵌套在另外一个状态中的状态。</p>
</li>
</ul>
</li>
<li>
<p><strong>转换</strong>（迁移）：是两个状态之间的一种关系，表示对象将在源状态中执行一定的动作，并在某个特定事件发生，而且某个特定的警界（监护）条件满足时进入目标状态。</p>
<p>状态转换用一条<u>带箭头的实线</u>表示。</p>
</li>
<li>
<p><strong>事件</strong>：是在某个特定时刻发生的事情，<u>它是对引起系统做动作或（和）从一个状态转换到另个状态的外界事件的抽象</u>。</p>
<ul>
<li>
<p><u>事件触发</u>状态转换：<u>状态变迁通常是由事件触发的。</u>状态之间带箭头实线上的事件发生时，状态转换开始（还可称之为状态“点火”或状态被“触发”）。</p>
<p>这种情况下应在表达状态转换的箭头线上标出触发转换的<u>事件表达式</u>：</p>
<pre tabindex="0"><code>事件说明 [守卫条件] / 动作表达式
</code></pre><p>事件说明的语法为：</p>
<pre tabindex="0"><code>事件名 (参数表)
</code></pre><p>守卫条件（监护条件）：一个布尔表达式。</p>
<ul>
<li>当且仅当事件发生且守卫条件为真时，状态转换才发生；</li>
<li>只有守卫条件没有事件说明时，只要守卫条件为真，状态转换就发生。</li>
</ul>
<p>动作表达式是一个过程表达式，当状态转换（事件）开始时执行。</p>
</li>
<li>
<p><u>自动触发</u>状态转换：如果箭头线上未标明事件，则表示<u>在源状态的内部活动执行完之后自动触发转换</u>。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="状态图中的事件和转换" src="/docs/ruan-she/object-oriented/uTools_1684587930655.png" loading="lazy" width="717" height="135" />
</picture>

</p>
</li>
<li>
<p><strong>活动</strong>：指状态中的活动表中的活动。</p>
<p>语法如下：</p>
<pre tabindex="0"><code>事件名 (参数表) /动作表达式
</code></pre><p>事件名：可以是任何事件的名称。</p>
<p>在活动表中经常使用以下3中标准事件：</p>
<table>
<thead>
<tr>
<th style="text-align:center">事件名</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>entry</code></td>
<td style="text-align:left"><u>入口动作</u>，指定<u>进入该状态</u>的动作，立即执行</td>
</tr>
<tr>
<td style="text-align:center"><code>exit</code></td>
<td style="text-align:left"><u>出口动作</u>，指定<u>退出该状态</u>的动作，立即执行</td>
</tr>
<tr>
<td style="text-align:center"><code>do</code></td>
<td style="text-align:left"><u>内部活动</u>，指定<u>在该状态下</u>的动作，占有有限时间，并可中断地工作</td>
</tr>
</tbody>
</table>
<p>活动（动作）可以在状态内执行，也可以在状态转换（迁移）时执行。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="状态图示例" src="/docs/ruan-she/object-oriented/uTools_1682066287326.png" loading="lazy" width="831" height="431" />
</picture>

</p>
<p>可以用状态图对系统的动态方面建模。这些动态方面可以包括出现在系统体系结构的任何视图中的任何一种对象的按事件排序的行为，这些对象包括：</p>
<ul>
<li>类（各主动类）；</li>
<li>接口；</li>
<li>构件；</li>
<li>结点。</li>
</ul>
<p>当状态图对系统、类或用例的动态方面建模时，通常是对反应型对象建模。</p>
<h3 id="活动图" data-numberify>活动图<a class="anchor ms-1" href="#活动图"></a></h3>
<p>活动图（Activity Diagram）是一种特殊的状态图，它<u>展现了在系统内从一个活动到另一个活动的流程</u>。活动图<u>专注于系统的动态视图</u>，它对于系统的功能建模特别重要，并<u>强调对象间的控制流程</u>。</p>
<p><picture><img class="img-fluid " alt="活动图示例" src="/docs/ruan-she/object-oriented/1682067363114.png" loading="lazy" width="654" height="744" />
</picture>

</p>
<p>活动图一般包括：</p>
<ul>
<li>
<p>状态：</p>
<p>活动图的状态也包含初态和终态。其余的状态还可分为：</p>
<ul>
<li>动作状态：不能被分解，动作不能被中断。</li>
<li>活动状态：能够被进一步分解，可以被中断，其活动由其它的活动图来表示。</li>
</ul>
</li>
<li>
<p>流（转换）。</p>
</li>
<li>
<p>对象。</p>
</li>
</ul>
<p>活动图可以表示：</p>
<ul>
<li>分支（判断）：分支的流上用<code>[]</code>标记的是监护表达式；</li>
<li>（并发）分岔：将一个流分为多个可并发执行的流；</li>
<li>（并发）汇合：将分岔出去的多个流合并为同一个流。</li>
</ul>
<p>当对一个系统的动态方面建模时，有以下几种使用活动图的方式：</p>
<ul>
<li>对工作流建模；</li>
<li>对操作建模；</li>
<li>对业务的复杂流程建模。</li>
</ul>
<h3 id="构件图" data-numberify>构件图<a class="anchor ms-1" href="#构件图"></a></h3>
<p>构件图（Component Diagram，<strong>组件图</strong>）展现了<u>一组构件之间的组织和依赖</u>。构件图<u>专注于系统的静态实现视图</u>，它<u>与类图相关，通常把构件映射为一个或多个类、接口或协作</u>。</p>
<p><picture><img class="img-fluid " alt="构件图示例" src="/docs/ruan-she/object-oriented/uTools_1682068370459.png" loading="lazy" width="638" height="332" />
</picture>

</p>
<p>构件图的成分有：</p>
<ul>
<li>构件：用<u>矩形</u>表示，在矩形<u>右上方有一个小标记</u>。</li>
<li>供接口：用一个<u><strong>圆圈</strong>和连接到构件上的实线</u>表示。构件提供接口给其它构件使用。</li>
<li>需接口：用一个<u><strong>半圆</strong>和连接到构件上的实线</u>表示。构件使用需接口表示需要调用其它构件提供接口。</li>
<li>依赖：将供接口（圆圈）和虚接口（半圆）连接到一起，表示两个构件通过这个接口相依赖。</li>
</ul>
<h3 id="部署图" data-numberify>部署图<a class="anchor ms-1" href="#部署图"></a></h3>
<p>部署图（Deployment Diagram）是用来<u>对面向对象系统的<strong>物理方面</strong>建模</u>的方法，展现了运行时处理结点以及其中构件（制品）的配置。部署图<u>对系统的静态部署视图进行建模</u>，它与构件图相关。</p>
<p>部署图<u>展现了系统的软件和硬件之间的关系，在实施阶段使用</u>。</p>
<p><picture><img class="img-fluid " alt="部署图示例" src="/docs/ruan-she/object-oriented/uTools_1682073176388.png" loading="lazy" width="491" height="327" />
</picture>

</p>
<blockquote>
<p><code>&lt;&lt;artifact&gt;&gt;</code>表示制品。</p>
</blockquote>
<h3 id="总结-1" data-numberify>总结<a class="anchor ms-1" href="#总结-1"></a></h3>
<table>
<thead>
<tr>
<th style="text-align:center">UML图</th>
<th style="text-align:center">静态建模</th>
<th style="text-align:center">动态建模</th>
<th style="text-align:center">物理建模</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">对象图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">用例图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">构件图（组件图)</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
</tr>
<tr>
<td style="text-align:center">部署图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
</tr>
<tr>
<td style="text-align:center">序列图（顺序图，时序图）</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">通信图（协作图）</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">状态图</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">活动图</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
</tbody>
</table>
<p>活动图是一种特殊的状态图，它们的差异如下：</p>
<ul>
<li>相同点：状态中都有初态和终态。</li>
<li>主要差异：
<ul>
<li>活动图的转换称为流；</li>
<li>活动图有分支、并发分岔和并发汇合。</li>
</ul>
</li>
</ul>
<p>以下是UML图的总结：</p>
<ul>
<li>
<p><strong>类图</strong>：展现一组<u>对象（类）</u>、<u>接口</u>、<u>协作</u>和它们之间的<u>关系</u></p>
<p><picture><img class="img-fluid " alt="类图示例" src="/docs/ruan-she/object-oriented/uTools_1682061210921.png" loading="lazy" width="619" height="467" />
</picture>

</p>
</li>
<li>
<p><strong>对象图</strong>：展现某一时刻的一组<u>对象</u>以及它们之间的<u>关系</u>，描述了在类图中所建立事物的实例的静态快照</p>
<p><picture><img class="img-fluid " alt="对象图示例" src="/docs/ruan-she/object-oriented/uTools_1682061786263.png" loading="lazy" width="713" height="312" />
</picture>

</p>
</li>
<li>
<p><strong>用例图</strong>：展现了一组<u>用例</u>、<u>参与者</u>以及它们之间的<u>关系（包含、扩展、关联和泛化）</u></p>
<p><picture><img class="img-fluid " alt="用例图示例" src="/docs/ruan-she/object-oriented/uTools_1682062071630.png" loading="lazy" width="756" height="382" />
</picture>

</p>
</li>
<li>
<p><strong>序列图（顺序图，时序图）</strong>：描述了以<u>时间顺序</u>组织的<u>对象</u>之间的<u>交互活动</u>，强调<u>消息时间顺序</u></p>
<p><picture><img class="img-fluid " alt="序列图示例" src="/docs/ruan-she/object-oriented/uTools_1682064874751.png" loading="lazy" width="691" height="471" />
</picture>

</p>
</li>
<li>
<p><strong>通信图（协作图）</strong>：强调<u>收发消息的对象的结构组织</u></p>
<p><picture><img class="img-fluid " alt="通信图" src="/docs/ruan-she/object-oriented/uTools_1682065157645.png" loading="lazy" width="719" height="314" />
</picture>

</p>
</li>
<li>
<p><strong>状态图（状态转换图）</strong>：展现了一个状态机，强调<u>对象行为的事件顺序</u></p>
<p><picture><img class="img-fluid " alt="状态图示例" src="/docs/ruan-she/object-oriented/uTools_1682066287326.png" loading="lazy" width="831" height="431" />
</picture>

</p>
</li>
<li>
<p><strong>活动图</strong>：一种特殊的状态图，展现了在<u>系统内从一个活动到另一个活动的流程</u>，强调<u>对象间的控制流程</u></p>
<p><picture><img class="img-fluid " alt="活动图示例" src="/docs/ruan-she/object-oriented/1682067363114.png" loading="lazy" width="654" height="744" />
</picture>

</p>
</li>
<li>
<p><strong>构件图（组件图)</strong>：展现了一组<u>构件之间的组织和依赖</u>，将构件映射为类、接口或协作</p>
<p><picture><img class="img-fluid " alt="构件图示例" src="/docs/ruan-she/object-oriented/uTools_1682068370459.png" loading="lazy" width="638" height="332" />
</picture>

</p>
</li>
<li>
<p><strong>部署图</strong>：对物理建模，展现了<u>运行时处理结点以及其中构件（制品）的配置</u></p>
<p><picture><img class="img-fluid " alt="部署图示例" src="/docs/ruan-she/object-oriented/uTools_1682073176388.png" loading="lazy" width="491" height="327" />
</picture>

</p>
</li>
</ul>
<hr>
<h1 id="设计模式" data-numberify>设计模式<a class="anchor ms-1" href="#设计模式"></a></h1>
<blockquote>
<p>设计模式代码仓库：<a href="https://gitee.com/linner_cheng/design-patterns" target="_blank" rel="noopener noreferrer">https://gitee.com/linner_cheng/design-patterns<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<p>每一个设计模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。使用设计模式能减少一些重复劳动。设计模式的核心在于提供了相关问题的解决方案，使得人们可以更加简单方便地<u>复用成功的设计和体系结构</u>。</p>
<p>设计模式一般有以下4个要素：</p>
<ul>
<li>模式名称（Pattern Name）</li>
<li>问题（Problem）</li>
<li>解决方案（Solution）</li>
<li>效果（Consequences）</li>
</ul>
<p>设计模式：</p>
<ul>
<li>确定了所包含的<u>类</u>和<u>实例</u>的：
<ul>
<li><u>角色</u></li>
<li><u>协作方式</u></li>
<li><u>职责分配</u></li>
</ul>
</li>
<li>每一个设计模式都：
<ul>
<li>集中于一个特定的<u>面向对象设计问题</u>或设计要点</li>
<li>描述了什么时候使用它</li>
<li>在另一些设计约束条件下是否还能使用</li>
<li>使用的效果和如何取舍</li>
</ul>
</li>
</ul>
<p>设计模式分类：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><br></th>
<th style="text-align:left">创建型</th>
<th style="text-align:left">结构型</th>
<th style="text-align:left">行为型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">说明</td>
<td style="text-align:left">与对象的创建有关</td>
<td style="text-align:left">处理类或对象的组合</td>
<td style="text-align:left">描述类或对象的交互和职责分配</td>
</tr>
<tr>
<td style="text-align:center">类模式</td>
<td style="text-align:left">Factory Method（工厂方法模式）</td>
<td style="text-align:left">Adapter（适配器模式）</td>
<td style="text-align:left">Interpreter（解释器模式）<br>Template Method（模板方法模式）</td>
</tr>
<tr>
<td style="text-align:center">对象模式</td>
<td style="text-align:left">Abstract Factory（抽象工厂模式）<br>Builder（生成器模式）<br>Prototype（原型模式）<br>Singleton（单例模式）</td>
<td style="text-align:left">Adapter（适配器模式）<br>Bridge（桥接模式）<br>Composite（组合模式）<br>Decorator（装饰器模式）<br>Facade（外观模式）<br>Flyweight（享元模式）<br>Proxy（代理模式）</td>
<td style="text-align:left">Chain of Responsibility（责任链模式）<br>Command（命令模式）<br>Iterator（迭代器模式）<br>Mediator（中介者模式）<br>Memento（备忘录模式）<br>Observer（观察者模式）<br>State（状态模式）<br>Strategy（策略模式）<br>Visitor（访问者模式）</td>
</tr>
</tbody>
</table>
<h2 id="创建型设计模式" data-numberify>创建型设计模式<a class="anchor ms-1" href="#创建型设计模式"></a></h2>
<p>创建型模式<u>抽象了实例化过程</u>。</p>
<ul>
<li>类创建型模式（工厂方法）：使用继承改变被实例化的类；</li>
<li>对象创建型模式（剩余的其它）：将实例化委托给另一个对象。</li>
</ul>
<h3 id="简单工厂模式" data-numberify>简单工厂模式<a class="anchor ms-1" href="#简单工厂模式"></a></h3>
<p>简单工厂模式属于创建型模式，但不属于23种设计模式之一。</p>
<p>简单工厂模式定义了一个工厂类，它可以根据参数的不同，返回不同类的实例，被创建的实例通常都具有共同的父类。</p>
<p>在简单工厂模式中用于创建实例的方法通常长为静态（<code>static</code>）方法，因此简单工厂模式又称为静态工厂方法（Static Factroy Method）。</p>
<p>简单工厂模式包含以下三种角色：</p>
<ul>
<li>工厂（核心）：负责实现创建所有产品的内部逻辑。工厂类可以被外界直接调用，创建所需对象。</li>
<li>抽象产品：工厂类所创建的所有对象的父类，封装了产品对象的公共方法，所有的具体产品为其子类对象。</li>
<li>具体产品：简单工厂模式的创建目标，所有被创建的对象都是某个具体类的实例，它要实现抽象产品中声明的抽象方法。</li>
</ul>
<p><picture><img class="img-fluid " alt="简单工厂模式示例" src="/docs/ruan-she/object-oriented/uTools_1684673603980.png" loading="lazy" width="388" height="389" />
</picture>

</p>
<p>代码示例如下：</p>
<p><code>Product</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 抽象产品
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 抽象方法，返回产品信息
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>ProductA</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 具体产品A
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductA</span> <span class="kd">extends</span> <span class="n">Product</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;产品的信息：A&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>ProductB</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 具体产品B
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductB</span> <span class="kd">extends</span> <span class="n">Product</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;产品的信息：B&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Factory</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 静态工厂类
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Factory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据参数获取Product
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param type 指定创建的对象的类型
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Product</span> <span class="nf">createProduct</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">product</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 判读参数，声明对应的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">type</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;A&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">product</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProductA</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">type</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;B&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">product</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProductB</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;没有&#34;</span> <span class="o">+</span> <span class="n">type</span> <span class="o">+</span> <span class="s">&#34;类型的产品&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">product</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">productA</span> <span class="o">=</span> <span class="n">Factory</span><span class="o">.</span><span class="na">createProduct</span><span class="o">(</span><span class="s">&#34;A&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">productA</span><span class="o">.</span><span class="na">info</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">productB</span> <span class="o">=</span> <span class="n">Factory</span><span class="o">.</span><span class="na">createProduct</span><span class="o">(</span><span class="s">&#34;B&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">productB</span><span class="o">.</span><span class="na">info</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">productC</span> <span class="o">=</span> <span class="n">Factory</span><span class="o">.</span><span class="na">createProduct</span><span class="o">(</span><span class="s">&#34;C&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">productC</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="工厂方法" data-numberify>工厂方法<a class="anchor ms-1" href="#工厂方法"></a></h3>
<p>工厂方法（Factory Method）模式定义一个用于<u>创建对象的接口</u>，让<u>子类决定实例化哪一个类</u>。工厂模式<u>使一个类的实例化延迟到其子类</u>。</p>
<blockquote>
<p>简单工厂违反了开放封闭原则，对扩展是开发的，对修改是封闭的。所以工厂方法的接口不创建具体的对象，而是交由子类来实现。</p>
</blockquote>
<p>工厂方法结构：</p>
<p><picture><img class="img-fluid " alt="工厂方法结构" src="/docs/ruan-she/object-oriented/uTools_1682232330534.png" loading="lazy" width="725" height="268" />
</picture>

</p>
<ul>
<li>
<p><code>Product</code>：定义工厂方法所创建的对象的接口。</p>
</li>
<li>
<p><code>ConcreteProduct</code>：实现<code>Product</code>接口。</p>
</li>
<li>
<p><code>Creator</code>：声明工厂方法，该方法返回一个<code>Product</code>类型的对象。</p>
<p><code>Creator</code>也可以定义一个工厂方法的默认实现，它返回一个默认的<code>ConcreteProduct</code>对象。</p>
</li>
<li>
<p><code>ConcreteCreator</code>：重定义工厂方法以返回一个<code>ConcreteProduct</code>实例。</p>
</li>
</ul>
<p>代码示例：</p>
<p><picture><img class="img-fluid " alt="工厂方法示例" src="/docs/ruan-she/object-oriented/uTools_1684730369571.png" loading="lazy" width="485" height="463" />
</picture>

</p>
<p><code>Product</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 产品接口
</span></span></span><span class="line"><span class="cl"><span class="cm"> * &lt;p&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     这里抽象产品是接口还是抽象类不重要，重要的是Factory一定得是接口
</span></span></span><span class="line"><span class="cl"><span class="cm"> * &lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Product</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 接口方法，返回产品信息
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>ProductA</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductA</span> <span class="kd">implements</span> <span class="n">Product</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;产品的信息：A&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>ProductB</code>与<code>ProductA</code>类似，代码略。</p>
<p><code>Factory</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 工厂方法接口
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Factory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">    * 接口方法，获取Product
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Product</span> <span class="nf">createProduct</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>FactoryA</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 工厂A
</span></span></span><span class="line"><span class="cl"><span class="cm"> * &lt;p&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     只负责生产ProductA
</span></span></span><span class="line"><span class="cl"><span class="cm"> * &lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FactoryA</span> <span class="kd">implements</span> <span class="n">Factory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 实现方法创建ProductA
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Product</span> <span class="nf">createProduct</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 直接返回ProductA
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="k">new</span> <span class="n">ProductA</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>FactoryB</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 工厂B
</span></span></span><span class="line"><span class="cl"><span class="cm"> * &lt;p&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     只负责生产ProductB
</span></span></span><span class="line"><span class="cl"><span class="cm"> * &lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FactoryB</span> <span class="kd">implements</span> <span class="n">Factory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 实现方法创建ProductB
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Product</span> <span class="nf">createProduct</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 直接返回ProductB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="k">new</span> <span class="n">ProductB</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FactoryMethod</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Factory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FactoryA</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">productA</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createProduct</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">productA</span><span class="o">.</span><span class="na">info</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FactoryB</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">productB</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createProduct</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">productB</span><span class="o">.</span><span class="na">info</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Factory Method模式适用于：</p>
<ul>
<li>当一个类<u>不知道它所必须创建的对象的类</u>（不知道要创建的具体类）的时候。</li>
<li>当一个类希望<u>由它的子类来指定它所创建的对象</u>的时候。</li>
<li>当类<u>将创建对象的职责委托给多个帮助子类中的某一个</u>，并且你希望将哪一个<u>帮助子类是代理者</u>这一信息局部化的时候。</li>
</ul>
<p>工厂方法：</p>
<ul>
<li>特点：用户类和工厂类分开。</li>
<li>优点：用户需要什么对象，只需向工厂请求即可。用户无需修改就可使用对象。</li>
<li>缺点：对象修改时，工厂类也需要做相应的修改。</li>
</ul>
<h3 id="抽象工厂模式" data-numberify>抽象工厂模式<a class="anchor ms-1" href="#抽象工厂模式"></a></h3>
<p>抽象工厂（Abstract Factory）提供一个<u>创建一系列相关或相互依赖对象的接口</u>，而<u>无须指定它们具体的类</u>。</p>
<blockquote>
<p>抽象工厂的工厂类是<code>abstract class</code>（抽象类），工厂方法是<code>interface</code>。抽象工厂可以创建更多的类。</p>
</blockquote>
<p>抽象工厂模式的结构：</p>
<p><picture><img class="img-fluid " alt="抽象工厂模式的结构" src="/docs/ruan-she/object-oriented/uTools_1682230457950.png" loading="lazy" width="704" height="330" />
</picture>

</p>
<ul>
<li><code>AbstractFactory</code>：声明一个创建抽象产品对象的操作接口。</li>
<li><code>ConcreteFactory</code>：实现创建具体产品对象的操作。</li>
<li><code>AbstractProduct</code>：为一类产品对象声明一个接口。</li>
<li><code>ConcreteProduct</code>：定义一个将被相应的具体工厂创建的产品对象，实现<code>AbstractProduct</code>接口。</li>
<li><code>Client</code>：仅使用由<code>AbstractFactory</code>和<code>AbstractProduct</code>类声明的接口。</li>
</ul>
<p>代码示例：</p>
<p>创建两个产品接口<code>ProductA</code>和<code>ProductB</code>，并分别创建这两个产品接口的实现类<code>ProductA1</code>和<code>ProductA2</code>以及<code>ProductB1</code>和<code>ProductB2</code>。代码略。需要注意的是这里<code>ProductA</code>和<code>ProductB</code>代表两种不同的产品，它们的类型可以完全不相同。</p>
<p><code>Factory</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Factory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 接口方法获取ProductA
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ProductA</span> <span class="nf">createProductA</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 接口方法获取ProductB
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ProductB</span> <span class="nf">createProductB</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Factory1</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 工厂1创建产品ProductA1和ProductB1
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Factory1</span> <span class="kd">implements</span> <span class="n">Factory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 创建产品ProductA1
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ProductA</span> <span class="nf">createProductA</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">ProductA1</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 创建产品ProductB1
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ProductB</span> <span class="nf">createProductB</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">ProductB1</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Factory2</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 工厂2创建产品ProductA2和ProductB2
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Factory2</span> <span class="kd">implements</span> <span class="n">Factory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* 代码与Factory1类似，略 */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AbstractFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Factory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Factory1</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ProductA</span> <span class="n">productA1</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createProductA</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ProductB</span> <span class="n">productB1</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createProductB</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">productA1</span><span class="o">.</span><span class="na">info</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">productB1</span><span class="o">.</span><span class="na">info</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Factory2</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ProductA</span> <span class="n">productA2</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createProductA</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ProductB</span> <span class="n">productB2</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createProductB</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">productA2</span><span class="o">.</span><span class="na">info</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">productB2</span><span class="o">.</span><span class="na">info</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Abstract Factory模式适用于：</p>
<ul>
<li>一个系统要<u>独立于它的产品的创建、<strong>组合</strong>和表示</u>时。</li>
<li>一个系统要由<u>多个产品系列中的一个来配置</u>时。</li>
<li>当要强调<u>一系列相关的产品</u>对象的设计以便进行<u>联合使用</u>时。</li>
<li>当提供一个<u>产品类库</u>，只想<u>显示它们的接口而不是实现</u>时。</li>
</ul>
<p>抽象工厂模式：核心工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类（具体工厂）去做。它仅负责给存储具体工厂类必须实现的接口。</p>
<h3 id="生成器模式" data-numberify>生成器模式<a class="anchor ms-1" href="#生成器模式"></a></h3>
<p>生成器（Builder，<strong>建造者</strong>）模式将一个<u>复杂对象的<strong>构建</strong>与它的<strong>表示</strong>分离</u>，使得<u>同样的构建过程可以创建不同的表示</u>。</p>
<p>生成器模式结构：</p>
<p><picture><img class="img-fluid " alt="生成器模式结构" src="/docs/ruan-she/object-oriented/uTools_1682231345251.png" loading="lazy" width="729" height="261" />
</picture>

</p>
<ul>
<li>
<p><code>Product</code>：表示被构造的复杂对象。</p>
</li>
<li>
<p><code>Builder</code>：为创建一个<code>Product</code>对象的各个部件指定抽象接口。</p>
<p><code>BuildPart()</code>：生成零件。</p>
</li>
<li>
<p><code>ConcreteBuilder</code>：实现<code>Builder</code>的接口以构造和装配该产品的各个部件，定义并明确它所创建的表示，提供一个检索产品的接口。</p>
<p><code>ConcreteBuilder</code>创建<code>Product</code>对象产品的内部表示并定义它的装配过程。包含定义组成组件的类，包括将这些组件装配成最终产品的接口。</p>
<p><code>GetResult()</code>：获取生成（组装完成）的产品。</p>
</li>
<li>
<p><code>Director</code>：构造一个使用<code>Builder</code>接口的对象。最终是使用<code>Director</code>来构造<code>Product</code>。</p>
</li>
</ul>
<p>代码示例：</p>
<p><code>Product</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">parts</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">// 零件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 添加零件
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param part 要添加的零件
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">String</span> <span class="n">part</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">parts</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">part</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Product{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;parts=&#34;</span> <span class="o">+</span> <span class="n">parts</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Builder</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 生成产品零件
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">buildPart</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 获取结果
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">Product</span> <span class="nf">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Builder1</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Builder1</span> <span class="kd">extends</span> <span class="n">Builder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Product</span> <span class="n">product</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Product</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildPart</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">product</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;A&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">product</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;B&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">product</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;C&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">product</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;D&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">product</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;E&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">product</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;F&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Product</span> <span class="nf">getResult</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">product</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Builder2</code>与<code>Builder1</code>类似，略。</p>
<p><code>Director</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Director</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据指定的Builder来生产零件
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param builder 指定用来生产零件的Builder
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">construct</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">buildPart</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BuilderTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Director</span> <span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Director</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Builder</span> <span class="n">builder1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Builder1</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">director</span><span class="o">.</span><span class="na">construct</span><span class="o">(</span><span class="n">builder1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">product1</span> <span class="o">=</span> <span class="n">builder1</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">product1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Builder2</span> <span class="n">builder2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Builder2</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">director</span><span class="o">.</span><span class="na">construct</span><span class="o">(</span><span class="n">builder2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">product2</span> <span class="o">=</span> <span class="n">builder2</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">product2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Builder模式适用于：</p>
<ul>
<li>当<u>创建复杂对象的算法</u>应该<u>独立于该对象的组成部分以及它们的装配方式</u>时。</li>
<li>当<u>构造过程必须允许被构造的对象有不同的表示</u>时。</li>
</ul>
<h3 id="原型模式" data-numberify>原型模式<a class="anchor ms-1" href="#原型模式"></a></h3>
<p>原型（Prototype）模式用<u>原型实例指定创建对象的种类</u>，并且<u>通过复制这些原型创建新的对象</u>。</p>
<p>原型模式结构：</p>
<p><picture><img class="img-fluid " alt="原型模式结构" src="/docs/ruan-she/object-oriented/uTools_1682233376386.png" loading="lazy" width="638" height="298" />
</picture>

</p>
<ul>
<li><code>Prototype</code>：声明一个复制自身的接口。</li>
<li><code>ConcretePrototype</code>：实现一个复制自身的操作。</li>
<li><code>Client</code>：让一个原型复制自身从而创建一个新的对象。</li>
</ul>
<p>代码示例：</p>
<p><code>Prototype</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Prototype</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 克隆方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">clone</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Product</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="kd">implements</span> <span class="n">Prototype</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Double</span> <span class="n">price</span><span class="o">;</span>   <span class="c1">// 价格
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Product</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Product</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">,</span> <span class="n">Double</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">price</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Product</span><span class="o">();</span>    <span class="c1">// 这里也可以直接使用带参的构造方法，而不必使用setter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">object</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">object</span><span class="o">.</span><span class="na">setPrice</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">price</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 省略 getter, setter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Product{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, price=&#34;</span> <span class="o">+</span> <span class="n">price</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrototypeTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">product1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="mi">2023</span><span class="o">,</span> <span class="mf">5.22</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;product1: &#34;</span> <span class="o">+</span> <span class="n">product1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">product2</span> <span class="o">=</span> <span class="o">(</span><span class="n">Product</span><span class="o">)</span> <span class="n">product1</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;product2: &#34;</span> <span class="o">+</span> <span class="n">product2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Prototype模式适用于：</p>
<ul>
<li>当一个系统应该<u>独立于它的产品创建、<strong>构成</strong>和表示</u>时。</li>
<li>当要实例化的类是在<u>运行时刻指定</u>时，例如，通过动态装载。</li>
<li>为了<u>避免创建</u>一个<u>与产品类层次平行的工厂类层次</u>时。</li>
<li>当一个类的<u>实例只能有几个不同状态组合中的一种</u>时。建立相应数目的原型并克隆它们，可能比每次用合适的状态手工实例化该类更方便一些。</li>
</ul>
<p>原型模式：</p>
<ul>
<li>特点：通过给出一个原型对象来指明所要创建的对象的类型，然后复制这个原型对象的方法创建出更多同类型的对象。</li>
<li>优点：允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。</li>
<li>缺点：每一个类都必须配备一个克隆方法。</li>
</ul>
<h3 id="单例模式" data-numberify>单例模式<a class="anchor ms-1" href="#单例模式"></a></h3>
<p>单例（Singleton，单态）模式保证<u>一个类仅有一个实例</u>，并<u>提供一个访问它的全局访问点</u>。</p>
<blockquote>
<p>就好像Spring中的Bean，每个Bean默认有且仅有一个实例，通过<code>@Autowired</code>自动装配（来访问）。</p>
</blockquote>
<p>单例模式结构：</p>
<p><picture><img class="img-fluid " alt="单例模式结构" src="/docs/ruan-she/object-oriented/uTools_1682233866165.png" loading="lazy" width="464" height="169" />
</picture>

</p>
<ul>
<li><code>Singleton</code>：指定一个<code>Instance</code>操作，允许客户访问它的唯一实例。</li>
<li><code>Instance</code>：是一个类操作；可能负责创建它自己的唯一实例。</li>
</ul>
<p>代码示例：</p>
<p><code>Singleton</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 在内部示例化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 定义私有的构造方法，让其它外部类无法通过构造方法示例化对象
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 全局访问方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     * &lt;p&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm">     *     因为该类为单例，所以使用静态方法获取即可
</span></span></span><span class="line"><span class="cl"><span class="cm">     * &lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SingletonTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 验证Singleton是否为单例，打印它的地址即可
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Singleton</span> <span class="n">singleton1</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">singleton1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Singleton</span> <span class="n">singleton2</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">singleton2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Singleton模式适用于：</p>
<ul>
<li>当类<u>只能有一个实例</u>而且客户可以从一个众所周知的访问点访问它时。</li>
<li>当这个<u>唯一实例</u>应该是通过子类化可扩展的，并且<u>客户无须更改代码就能使用一个扩展的实例</u>时。</li>
</ul>
<p>单例模式：确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式。单例模式只应在有真正的“单一实例”的需求时才可使用。</p>
<h2 id="结构型设计模式" data-numberify>结构型设计模式<a class="anchor ms-1" href="#结构型设计模式"></a></h2>
<p>结构型设计模式涉及<u>如何组合类或对象以获得更大的结构</u>。</p>
<ul>
<li>
<p>结构型类模式：<u>采用继承机制来组合接口或实现</u>。</p>
<p>一个简单的例子是<u>采用多重继承方法将两个以上的类组合成一个类</u>，结果这个类包含了所有父类的性质。</p>
<p>这一模式尤其有助于多个独立开发的类库协同工作。</p>
</li>
<li>
<p>结构型对象模式：描述了<u>如何对一些对象进行组合，从而实现新功能的一些方法</u>（不是对接口和实现进行组合）。</p>
<p>因为可以在运行时刻改变对象组合关系，所以对象组合方式具有更大的灵活性，而这种机制用静态类组合是不可能实现的。</p>
</li>
</ul>
<h3 id="适配器模式" data-numberify>适配器模式<a class="anchor ms-1" href="#适配器模式"></a></h3>
<p>适配器（Adapter，<strong>变压器</strong>）模式<u>将一个类的接口转换成客户希望的另外一个接口</u>。使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
<ul>
<li>
<p>类适配器使用多重继承对一个接口与另一个接口进行匹配：</p>
<p><picture><img class="img-fluid " alt="类适配器模式结构" src="/docs/ruan-she/object-oriented/uTools_1684742134174.png" loading="lazy" width="834" height="283" />
</picture>

</p>
</li>
<li>
<p>对象适配器依赖于对象组合：</p>
<p><picture><img class="img-fluid " alt="对象适配器模式结构" src="/docs/ruan-she/object-oriented/uTools_1682299306295.png" loading="lazy" width="885" height="340" />
</picture>

</p>
</li>
</ul>
<p>其中：</p>
<ul>
<li><code>Target</code>：定义<code>Client</code>使用的与特定领域相关的接口。</li>
<li><code>Client</code>：与符合<code>Target</code>接口的对象协同。</li>
<li><code>Adaptee</code>：定义一个已经存在的接口，这个接口需要适配。</li>
<li><code>Adapter</code>（适配器）：对<code>Adaptee</code>的接口与<code>Target</code>接口进行适配。</li>
</ul>
<p>对象适配器对象模式代码示例：</p>
<p><code>Target</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 目标接口
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Target</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">request</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Target request...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Adaptee</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 需适配接口
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Adaptee</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">specificRequest</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Adaptee specificRequest...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Adapter</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Adapter</span> <span class="kd">extends</span> <span class="n">Target</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对象适配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">Adaptee</span> <span class="n">adaptee</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Adaptee</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">request</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 重写并在其中调用Adaptee的对应方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">adaptee</span><span class="o">.</span><span class="na">specificRequest</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AdapterTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Target</span> <span class="n">target</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Adapter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">target</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Adapter模式适用于：</p>
<ul>
<li>想使用一个已经存在的类，而它的<u>接口不符合要求</u>。</li>
<li>想创建一个可以复用的类，该类可以<u>与其他不相关的类或不可预见的类（即那些接口可能不一定兼容的类）协同工作</u>。</li>
<li>（仅适用于对象Adapter）想使用一个已经存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口。<u>对象适配器可以适配它的父类接口。</u></li>
</ul>
<p>适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。适配类可以根据参数返还一个合适的实例给客户端。</p>
<h3 id="桥接模式" data-numberify>桥接模式<a class="anchor ms-1" href="#桥接模式"></a></h3>
<p>桥接（Bridge）模式<u>将抽象部分与其实现部分分离，使它们都可以独立地变化</u>。</p>
<p>桥接模式结构：</p>
<p><picture><img class="img-fluid " alt="桥接模式结构" src="/docs/ruan-she/object-oriented/uTools_1682299992836.png" loading="lazy" width="932" height="387" />
</picture>

</p>
<ul>
<li>
<p><code>Abstraction</code>：定义<u>抽象类的接口</u>，维护一个指向<code>Implementor</code>类型对象的指针。</p>
</li>
<li>
<p><code>RefinedAbstraction</code>：扩充由<code>Abstraction</code>定义的接口。</p>
</li>
<li>
<p><code>Implementor</code>：定义<u>实现类的接口</u>，该接口不一定要与<code>Abstraction</code>的接口完全一致；事实上这两个接口可以完全不同。</p>
<p>一般来说，<code>Implementor</code>接口仅提供基本操作，而<code>Abstraction</code>定义了基于这些基本操作的较高层次的操作。</p>
</li>
<li>
<p><code>ConcreteImplementor</code>：实现<code>Implementor</code>接口并定义它的具体实现。</p>
</li>
</ul>
<p>代码实现：</p>
<p><code>Color</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 产品颜色接口
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Color</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">operationImp</span><span class="o">(</span><span class="n">Product</span> <span class="n">product</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Product</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 产品接口
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 默认名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="na">class</span> <span class="o">+</span> <span class="s">&#34;@&#34;</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">Color</span> <span class="n">color</span><span class="o">;</span>  <span class="c1">// 指向Implementor的指针，其实用private也可以，只需要为其定义getter、setter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">operation</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Color</span> <span class="nf">getColor</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">color</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setColor</span><span class="o">(</span><span class="n">Color</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="n">color</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Product{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;name=&#39;&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, color=&#34;</span> <span class="o">+</span> <span class="n">color</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Red</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Red</span> <span class="kd">implements</span> <span class="n">Color</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">operationImp</span><span class="o">(</span><span class="n">Product</span> <span class="n">product</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">product</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Bule</code>与<code>Red</code>类似，略。</p>
<p><code>ProductA</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductA</span> <span class="kd">extends</span> <span class="n">Product</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">operation</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">.</span><span class="na">operationImp</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Bridge</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">productA1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProductA</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Color</span> <span class="n">red</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Red</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">productA1</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">red</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">productA1</span><span class="o">.</span><span class="na">operation</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">productA2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProductA</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Color</span> <span class="n">blue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Blue</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">productA2</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">blue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">productA2</span><span class="o">.</span><span class="na">operation</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Bridge模式适用于：</p>
<ul>
<li>
<p><u>不希望在抽象和它的实现部分之间有一个固定的绑定关系。</u></p>
<p>例如，这种情况可能是因为，在程序运行时刻实现部分应可以被选择或者切换。</p>
</li>
<li>
<p>类的<u>抽象</u>以及它的<u>实现都</u>应该<u>可以通过生成子类的方法加以扩充</u>。</p>
<p>这是Bridge模式使得开发者<u>可以对不同的抽象接口和实现部分进行组合，并分别对它们进行扩充</u>。</p>
</li>
<li>
<p>对一个<u>抽象的实现部分的修改</u>应对客户不产生影响，即<u>客户代码不必重新编译</u>。</p>
</li>
<li>
<p>（C++）想对客户完全<u>隐藏抽象的实现部分</u>。</p>
</li>
<li>
<p>有许多类要生成的类层次结构。</p>
</li>
<li>
<p>想在<u>多个对象间共享实现</u>（可能使用引用计数），但同时要求<u>客户并不知道这一点</u>。</p>
</li>
</ul>
<p>桥梁模式：将抽象化与实现化脱耦，使得二者可以独立的变化，也就是说将他们之间的强关联变成弱关联。也就是指在一个软件系统的抽象化和实现化之间使用组合/聚合关系而不是继承关系，从而使两者可以独立的变化。</p>
<h3 id="组合模式" data-numberify>组合模式<a class="anchor ms-1" href="#组合模式"></a></h3>
<p>组合（Composite，<strong>合成</strong>）模式<u>将对象组合成树型结构以表示“部分——整体”的层次结构</u>。Composite使得用户<u>对单个对象和组合对象的使用具有一致性</u>。</p>
<p>组合模式的结构：</p>
<p><picture><img class="img-fluid " alt="组合模式的结构" src="/docs/ruan-she/object-oriented/uTools_1682300973563.png" loading="lazy" width="940" height="440" />
</picture>

</p>
<ul>
<li>
<p><code>Component</code>：为组合中的对象<u>声明接口</u>。</p>
<ul>
<li>在适当情况下<u>实现所有类共有接口的默认行为</u>；</li>
<li>声明一个接口用于访问和管理<code>Component</code>的子组件；</li>
<li>（可选）<u>在递归结构中定义一个接口，用于访问一个父组件</u>，并在合适的情况下<u>实现</u>它。</li>
</ul>
</li>
<li>
<p><code>Leaf</code>：在组合中表示<u>叶结点对象</u>，叶结点没有子结点；在组合中<u>定义图元对象的行为</u>。</p>
</li>
<li>
<p><code>Composite</code>：</p>
<ul>
<li>定义有子组件的那些组件的行为；</li>
<li>存储子组件；</li>
<li>在<code>Component</code>接口中实现与子组件有关的操作。</li>
</ul>
</li>
<li>
<p><code>Client</code>：通过<code>Component</code>接口操纵组合组件的对象。</p>
</li>
</ul>
<p>代码示例：</p>
<p><code>AbstractFile</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractFile</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 模范Linux tree命令的输出
</span></span></span><span class="line"><span class="cl"><span class="cm">     * &lt;p&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm">     *     只是为了展示，并不重要
</span></span></span><span class="line"><span class="cl"><span class="cm">     * &lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toTreeString</span><span class="o">(</span><span class="n">AbstractFile</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">treeString</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">AbstractFile</span><span class="o">&gt;</span> <span class="n">childrenList</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="na">getChildrenList</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">childrenList</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">treeString</span> <span class="o">+=</span> <span class="sc">&#39;\n&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">childrenList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">AbstractFile</span> <span class="n">children</span> <span class="o">=</span> <span class="n">childrenList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">String</span> <span class="n">childTreeString</span> <span class="o">=</span> <span class="n">toTreeString</span><span class="o">(</span><span class="n">children</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">String</span><span class="o">[]</span> <span class="n">split</span> <span class="o">=</span> <span class="n">childTreeString</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&#34;\n&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">childTreeString</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">split</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="o">(</span><span class="n">split</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;├&#39;</span>
</span></span><span class="line"><span class="cl">                     <span class="o">||</span> <span class="n">split</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;└&#39;</span>
</span></span><span class="line"><span class="cl">                     <span class="o">||</span> <span class="n">split</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;│&#39;</span>
</span></span><span class="line"><span class="cl">                     <span class="o">||</span> <span class="n">split</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">childrenList</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                            <span class="n">split</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="s">&#34;    &#34;</span> <span class="o">+</span> <span class="n">split</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                            <span class="n">split</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="s">&#34;│   &#34;</span> <span class="o">+</span> <span class="n">split</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">                        <span class="o">}</span>
</span></span><span class="line"><span class="cl">                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">childrenList</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                            <span class="n">split</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="s">&#34;└── &#34;</span> <span class="o">+</span> <span class="n">split</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                            <span class="n">split</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="s">&#34;├── &#34;</span> <span class="o">+</span> <span class="n">split</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">                        <span class="o">}</span>
</span></span><span class="line"><span class="cl">                    <span class="o">}</span>
</span></span><span class="line"><span class="cl">                    <span class="n">split</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">+=</span> <span class="sc">&#39;\n&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">childTreeString</span> <span class="o">+=</span> <span class="n">split</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="n">treeString</span> <span class="o">+=</span> <span class="n">childTreeString</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">treeString</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">AbstractFile</span> <span class="n">file</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">boolean</span> <span class="nf">remove</span><span class="o">(</span><span class="n">AbstractFile</span> <span class="n">file</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">AbstractFile</span><span class="o">&gt;</span> <span class="nf">getChildrenList</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>File</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">File</span> <span class="kd">extends</span> <span class="n">AbstractFile</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">File</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">AbstractFile</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">remove</span><span class="o">(</span><span class="n">AbstractFile</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">AbstractFile</span><span class="o">&gt;</span> <span class="nf">getChildrenList</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Folder</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Folder</span> <span class="kd">extends</span> <span class="n">AbstractFile</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">AbstractFile</span><span class="o">&gt;</span> <span class="n">childrenList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">AbstractFile</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Folder</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">AbstractFile</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">childrenList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">remove</span><span class="o">(</span><span class="n">AbstractFile</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">childrenList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">AbstractFile</span><span class="o">&gt;</span> <span class="nf">getChildrenList</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">childrenList</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">toTreeString</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Composite</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 模仿Linux的文件结构
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">AbstractFile</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Folder</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span><span class="o">[]</span> <span class="n">childrenNameList</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;sbin&#34;</span><span class="o">,</span> <span class="s">&#34;boot&#34;</span><span class="o">,</span> <span class="s">&#34;sys&#34;</span><span class="o">,</span> <span class="s">&#34;etc&#34;</span><span class="o">,</span> <span class="s">&#34;usr&#34;</span><span class="o">,</span> <span class="s">&#34;home&#34;</span><span class="o">,</span> <span class="s">&#34;root&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">childrenName</span> <span class="o">:</span> <span class="n">childrenNameList</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">AbstractFile</span> <span class="n">children</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Folder</span><span class="o">(</span><span class="n">childrenName</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">root</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">children</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">AbstractFile</span><span class="o">&gt;</span> <span class="n">childrenList</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">getChildrenList</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">AbstractFile</span> <span class="n">myFolder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Folder</span><span class="o">(</span><span class="s">&#34;linner&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">AbstractFile</span> <span class="n">homeFolder</span> <span class="o">=</span> <span class="n">childrenList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">homeFolder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">myFolder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">AbstractFile</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&#34;file&#34;</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">            <span class="n">myFolder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">AbstractFile</span> <span class="n">folder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Folder</span><span class="o">(</span><span class="s">&#34;folder&#34;</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">                <span class="n">myFolder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">folder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">AbstractFile</span> <span class="n">folderFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&#34;file&#34;</span>
</span></span><span class="line"><span class="cl">                            <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                            <span class="o">+</span> <span class="sc">&#39;_&#39;</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">                    <span class="n">folder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">folderFile</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>输出如下：</p>
<pre tabindex="0"><code>/
├── sbin
├── boot
├── sys
├── etc
├── usr
├── home
│   └── linner
│       ├── file1
│       ├── folder1
│       │   ├── file1_1
│       │   ├── file1_2
│       │   └── file1_3
│       ├── file2
│       ├── file3
│       ├── folder3
│       │   ├── file3_1
│       │   ├── file3_2
│       │   └── file3_3
│       ├── file4
│       ├── file5
│       └── folder5
│           ├── file5_1
│           ├── file5_2
│           └── file5_3
└── root
</code></pre><p>Composite模式适用于：</p>
<ul>
<li>想表示对象的<u>部分——整体层次结构</u>。</li>
<li>希望用户<u>忽略组合对象与单个对象的不同</u>，用户将<u>统一地使用组合结构中的所有对象</u>。</li>
</ul>
<p>合成模式：合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。合成模式使得客户端把一个个单独的成分对象和由他们复合而成的合成对象同等看待。</p>
<h3 id="装饰器模式" data-numberify>装饰器模式<a class="anchor ms-1" href="#装饰器模式"></a></h3>
<p>装饰器（Decorator）模式<u>动态地给一个对象添加一些额外的职责</u>。装饰器提供了用子类扩展功能的灵活替代。就增加功能而言，<u>Decorator模式比派生子类更加灵活</u>。</p>
<p>装饰器模式结构：</p>
<p><picture><img class="img-fluid " alt="装饰器模式结构" src="/docs/ruan-she/object-oriented/uTools_1682302304911.png" loading="lazy" width="862" height="392" />
</picture>

</p>
<ul>
<li><code>Component</code>：定义一个<u>对象接口</u>，可以给这些对象<u>动态地添加职责</u>。</li>
<li><code>ConcreteComponent</code>：定义一个对象，可以<u>给这个对象添加一些职责</u>。</li>
<li><code>Decorator</code>：<u>维持一个指向<code>Component</code>对象的指针</u>，并<u>定义一个与<code>Component</code>接口一致的接口</u>。</li>
<li><code>ConcreteDecorator</code>：<u>向组件添加职责。</u></li>
</ul>
<p>代码示例：</p>
<p><code>Person</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 职责
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">operation</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Student</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="kd">extends</span> <span class="n">Person</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">operation</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&#34;的职责：学习&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Decorator</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Decorator</span> <span class="kd">extends</span> <span class="n">Person</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">Person</span> <span class="n">person</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>DecoratorA</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DecoratorA</span> <span class="kd">extends</span> <span class="n">Decorator</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">DecoratorA</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">person</span> <span class="o">=</span> <span class="n">person</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">operation</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">person</span><span class="o">.</span><span class="na">operation</span><span class="o">();</span> <span class="c1">// 原本的职责
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&#34;新职责：摸鱼&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>DecoratorB</code>与<code>DecoratorA</code>类似，略；</p>
<p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DecoratorPattern</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Person</span> <span class="n">zhangsan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Student</span><span class="o">(</span><span class="s">&#34;张三&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">zhangsan</span><span class="o">.</span><span class="na">operation</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;============================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/*Decorator decoratorA = new DecoratorA(zhangsan);
</span></span></span><span class="line"><span class="cl"><span class="cm">        decoratorA.operation();*/</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 装饰器对象也相当于Person
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 装饰链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">zhangsan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DecoratorA</span><span class="o">(</span><span class="n">zhangsan</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">zhangsan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DecoratorB</span><span class="o">(</span><span class="n">zhangsan</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">zhangsan</span><span class="o">.</span><span class="na">operation</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Decorator模式适用于：</p>
<ul>
<li>在<u>不影响其他对象的情况下</u>，以动态、透明的方式给单个对象<u>添加职责</u>。</li>
<li><u>处理那些可以撤销的职责</u>。</li>
<li>当不能采用生成子类的方式进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是，由于类定义被隐藏，或类定义不能用于生成子类。</li>
</ul>
<h3 id="外观模式" data-numberify>外观模式<a class="anchor ms-1" href="#外观模式"></a></h3>
<p>外观（Facade，<strong>门面</strong>）模式<u>为子系统中的一组接口提供一个一致的门面（界面）</u>，Facade模式<u>定义了</u>一个<u>高层接口</u>，这个接口<u>使得这一子系统更加容易使用</u>。</p>
<p>外观模式的结构：</p>
<p><picture><img class="img-fluid " alt="外观模式的结构" src="/docs/ruan-she/object-oriented/uTools_1682302810965.png" loading="lazy" width="950" height="376" />
</picture>

</p>
<ul>
<li>
<p><code>Facade</code>：知道哪些子系统类负责处理请求；<u>将客户的请求代理给适当的子系统对象</u>。</p>
</li>
<li>
<p><code>Subsystem classes</code>：</p>
<ul>
<li>实现子系统的功能；</li>
<li>处理有<code>Facade</code>对象指派的任务；</li>
<li>没有<code>Facade</code>的任何相关信息，即没有指向<code>Facade</code>的指针。</li>
</ul>
</li>
</ul>
<p>代码示例：</p>
<p><code>SubSystem1</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SubSystem1</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method1</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;执行子系统1的功能&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>SubSystem2</code>和<code>SubSystem3</code>与<code>SubSystem1</code>类似，代码略。</p>
<p><code>Facade</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Facade</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">SubSystem1</span> <span class="n">subSystem1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">SubSystem2</span> <span class="n">subSystem2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">SubSystem3</span> <span class="n">subSystem3</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Facade</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">subSystem1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SubSystem1</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">subSystem2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SubSystem2</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">subSystem3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SubSystem3</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodA</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">subSystem1</span><span class="o">.</span><span class="na">method1</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodB</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">subSystem2</span><span class="o">.</span><span class="na">method2</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodC</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">subSystem3</span><span class="o">.</span><span class="na">method3</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FacadePattern</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Facade</span> <span class="n">facade</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Facade</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">facade</span><span class="o">.</span><span class="na">methodA</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">facade</span><span class="o">.</span><span class="na">methodB</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">facade</span><span class="o">.</span><span class="na">methodC</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Facade模式适用于：</p>
<ul>
<li>
<p>Facade可以提供一个简单的默认视图，供大多数用户使用。</p>
<p>要<u>为一个复杂子系统提供一个简单接口</u>时，子系统往往因为不断演化而变得越来越复杂。大多数模式使用时都会产生更多更小的类，这使得子系统更具有可重用性，也更容易对子系统进行定制，但也给那些不需要定制子系统的用户带来一些使用上的困难。</p>
<p>Facade提供的简单默认视图对大多数用户来说已经足够，而那些需要更多的可定制性的用户可以越过Facade层。</p>
</li>
<li>
<p><u>客户程序与抽象类的实现部分之间存在着很大的依赖性</u>。引入Facade将这个子系统与客户以及其他的子系统分离，可以<u>提高子系统的独立性和可移植性</u>。</p>
</li>
<li>
<p>当需要<u>构建一个层次结构的子系统</u>时，<u>使用Facade模式定义子系统中每层的入口点</u>。如果子系统之间是相互依赖的，则可以让它们仅通过Facade进行通信，从而<u>简化了它们之间的依赖关系</u>。</p>
</li>
</ul>
<p>外观模式：外部与一个子系统的通信必须通过一个统一的门面对象进行。</p>
<p>外观模式提供一个高层次的接口，使得子系统更易于使用：</p>
<ul>
<li>每一个子系统只有一个门面类，而且此门面类只有一个实例，也就是说它是一个<u>单例模式</u>。</li>
<li>整个系统可以有多个门面类。</li>
</ul>
<h3 id="享元模式" data-numberify>享元模式<a class="anchor ms-1" href="#享元模式"></a></h3>
<p>享元（Flyweight）模式<u>运用共享技术有效地支持大量细粒度的对象</u>。</p>
<blockquote>
<p>细粒度对象：在业务模型上，按照业务需求将对象加以细分，从而得到更多的业务模型对象。</p>
</blockquote>
<p>享元模式的结构：</p>
<p><picture><img class="img-fluid " alt="享元模式的结构" src="/docs/ruan-she/object-oriented/uTools_1682305434953.png" loading="lazy" width="870" height="561" />
</picture>

</p>
<ul>
<li>
<p><code>Flyweight</code>：描述一个接口，通过这个接口<code>Flyweight</code>可以<u>接受并作用于外部状态</u>。</p>
</li>
<li>
<p><code>ConcreteFlyweight</code>：<u>实现<code>Flyweight</code>接口，并为内部状态（如果有）增加存储空间。</u></p>
<p><code>ConcreteFlyweight</code>对象必须是可共享的。它所存储的状态必须是内部的，即它必须独立于<code>ConcreteFlyweight</code>对象的场景。</p>
</li>
<li>
<p>并非所有的<code>Flyweight</code>子类都需要被共享。</p>
<p><code>Flyweight</code>接口使共享成为可能，但它并不强制共享。在<code>Flyweight</code>对象结构的某些层次，<code>UnsharedConcreteFlyweight</code>对象通常将<code>ConcreteFlyweight</code>对象作为子结点。</p>
</li>
<li>
<p><code>FlyweightFactory</code>：<u>创建并管理<code>Flyweight</code>对象</u>；确保合理地共享<code>Flyweight</code>，当用户请求一个<code>Flyweight</code>时，<code>FlyweightFactory</code>对象提供一个已创建的实例或者在不存在时创建一个实例。</p>
</li>
<li>
<p><code>Client</code>：维持一个对<code>Flyweight</code>的引用；计算或存储一个或多个<code>Flyweight</code>的外部状态。</p>
</li>
</ul>
<p>代码示例：</p>
<p><code>Piece</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Piece</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">String</span> <span class="n">color</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getColor</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">color</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>WhitePiece</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WhitePiece</span> <span class="kd">extends</span> <span class="n">Piece</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">WhitePiece</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="n">PieceFactory</span><span class="o">.</span><span class="na">WHITE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 打印地址和坐标信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">piece</span> <span class="o">=</span> <span class="s">&#34;WhitePiece@&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">+</span> <span class="sc">&#39;{&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                       <span class="s">&#34;x=&#34;</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="s">&#34;, &#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                       <span class="s">&#34;y=&#34;</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                       <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">piece</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>BlackPiece</code>与<code>WhitePiece</code>类似，代码略。</p>
<p><code>PieceFactory</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PieceFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">WHITE</span> <span class="o">=</span> <span class="s">&#34;white&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">BLACK</span> <span class="o">=</span> <span class="s">&#34;black&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Piece</span><span class="o">&gt;</span> <span class="n">piecesMap</span> <span class="o">=</span> <span class="n">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">WHITE</span><span class="o">,</span> <span class="k">new</span> <span class="n">WhitePiece</span><span class="o">(),</span>
</span></span><span class="line"><span class="cl">            <span class="n">BLACK</span><span class="o">,</span> <span class="k">new</span> <span class="n">BlackPiece</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Piece</span> <span class="nf">getPiece</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">piecesMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Flyweight</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">PieceFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PieceFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Piece</span> <span class="n">whitePiece1</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">getPiece</span><span class="o">(</span><span class="n">PieceFactory</span><span class="o">.</span><span class="na">WHITE</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">whitePiece1</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="mi">20</span><span class="o">,</span> <span class="mi">23</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Piece</span> <span class="n">whitePiece2</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">getPiece</span><span class="o">(</span><span class="n">PieceFactory</span><span class="o">.</span><span class="na">WHITE</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">whitePiece2</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">27</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Piece</span> <span class="n">blackPiece1</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">getPiece</span><span class="o">(</span><span class="n">PieceFactory</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">blackPiece1</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="mi">20</span><span class="o">,</span> <span class="mi">22</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Piece</span> <span class="n">blackPiece2</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">getPiece</span><span class="o">(</span><span class="n">PieceFactory</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">blackPiece2</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">28</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Flyweight模式适用于：</p>
<ul>
<li>一个应用程序<u>使用了大量的对象</u>。</li>
<li>完全由于<u>使用大量的对象，造成很大的存储开销</u>。</li>
<li>对象的<u>大多数状态都可变为外部状态</u>。
<ul>
<li>外部状态：容易发生改变的状态；</li>
<li>内部状态：不容易发生改变的状态。</li>
</ul>
</li>
<li>如果<u>删除对象的外部状态</u>，那么<u>可以用相对较少的共享对象取代很多组对象</u>。</li>
</ul>
<p>享元模式能做到共享的关键是区分状态：</p>
<ul>
<li>内蕴状态：存储在享元内部，不会随环境的改变而有所不同。</li>
<li>外蕴状态：随环境的改变而改变的。</li>
</ul>
<p>外蕴状态不能影响内蕴状态，它们是相互独立的。</p>
<p>享元模式：将可以共享的状态和不可以共享的状态从常规类中区分开来，将不可以共享的状态从类里剔除出去。客户端不可以直接创建被共享的对象，而应当使用一个工厂对象负责创建被共享的对象。享元模式大幅度的降低内存中对象的数量。</p>
<h3 id="代理模式" data-numberify>代理模式<a class="anchor ms-1" href="#代理模式"></a></h3>
<p>代理（Proxy）模式为其他对象<u>提供一种代理以控制对这个对象的访问</u>。</p>
<p>代理模式的结构：</p>
<p><picture><img class="img-fluid " alt="代理模式的结构" src="/docs/ruan-she/object-oriented/uTools_1682306107287.png" loading="lazy" width="807" height="348" />
</picture>

</p>
<ul>
<li>
<p><code>Proxy</code>：保存一个引用使得<u>代理可以访问实体</u>；提供一个与<code>Subject</code>的接口相同的接口，使<u>代理可以用来代替实体</u>；<u>控制对实体的存取</u>，并可能负责创建和删除它。</p>
<p>其他功能依赖于代理的类型：</p>
<ul>
<li><code>Remote Proxy</code>：负责对请求及其参数进行编码，并向不同地址空间中的实体发送己编码的请求；</li>
<li><code>Virtual Proxy</code>：可以缓存实体的附加信息，以便延迟对它的访问；</li>
<li><code>Protection Proxy</code>：检查调用者是否具有实现一个请求所必需的访问权限。</li>
</ul>
</li>
<li>
<p><code>Subject</code>：定义<code>RealSubject</code>和<code>Proxy</code>的共用接口，这样就在任何使用<code>RealSubject</code>的地方都可以使用<code>Proxy</code>。</p>
</li>
<li>
<p><code>RealSubject</code>：定义<code>Proxy</code>所代表的实体。</p>
</li>
</ul>
<p>代码示例：</p>
<p><code>Subject</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">request</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>RealSubject</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 代理实体
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RealSubject</span> <span class="kd">implements</span> <span class="n">Subject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">request</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;RealSubject request...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Proxy</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 代理
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Proxy</span> <span class="kd">implements</span> <span class="n">Subject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">RealSubject</span> <span class="n">realSubject</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Proxy</span><span class="o">(</span><span class="n">RealSubject</span> <span class="n">realSubject</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">realSubject</span> <span class="o">=</span> <span class="n">realSubject</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">request</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Proxy pre-request...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">realSubject</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Proxy post-request...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProxyPattern</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">RealSubject</span> <span class="n">realSubject</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RealSubject</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Proxy</span> <span class="n">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Proxy</span><span class="o">(</span><span class="n">realSubject</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">proxy</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Proxy模式适用于在<u>需要比较通用和复杂的对象指针代替简单的指针的时候</u>，常见情况有:</p>
<ul>
<li>
<p>远程代理（Remote Proxy）：为一个对象在不同地址空间提供局部代表。</p>
</li>
<li>
<p>虚代理(Virtual Proxy）：根据需要创建开销很大的对象。</p>
</li>
<li>
<p>保护代理（Protection Proxy）：控制对原始对象的访问，用于对象应该有不同的访问权限的时候。</p>
</li>
<li>
<p>智能引用（Smart Reference）：取代了简单的指针，它在访问对象时执行一些附加操作。</p>
<p>典型用途包括：</p>
<ul>
<li>对指向实际对象的引用计数，这样当该对象没有引用时，可以被自动释放；</li>
<li>当第一次引用一个持久对象时，将它装入内存；</li>
<li>在访问一个实际对象前，检查是否已经锁定了它，以确保其他对象不能改变它。</li>
</ul>
</li>
</ul>
<p>某些情况下，用户不想或者不能够直接引用一个对象，代理对象可以在用户和目标对象直接起到中介的作用。</p>
<p>客户端分辨不出代理主题对象与真实主题对象。代理模式可以不知道真正的被代理对象，而仅仅持有一个被代理对象的接口，这时候代理对象不能够创建被代理对象，被代理对象必须有系统的其他角色代为创建并传入。</p>
<h2 id="行为型设计模式" data-numberify>行为型设计模式<a class="anchor ms-1" href="#行为型设计模式"></a></h2>
<p>行为模式涉及<u>算法和对象间职责的分配</u>。行为模式不仅<u>描述对象或类的模式</u>，还<u>描述它们之间的通信模式</u>。</p>
<ul>
<li>
<p>行为类模式：使用<u>继承机制</u>在类间分派行为。</p>
</li>
<li>
<p>行为对象模式：使用<u>对象复合</u>。</p>
<p>一些行为对象模式<u>描述了一组<strong>对等</strong>的对象怎样相互协作以完成其中任一个对象都无法单独完成的任务</u>。</p>
</li>
</ul>
<h3 id="责任链模式" data-numberify>责任链模式<a class="anchor ms-1" href="#责任链模式"></a></h3>
<p>责任链（Chain of Responsibility）模式<u>使多个对象都有机会处理请求</u>，从而避免请求的发送者和接收者之间的耦合关系。<u>将这些对象连成一条链</u>，并<u>沿着这条链传递该请求，直到有一个对象处理它为止</u>。</p>
<blockquote>
<p>JavaWeb中<code>Filter</code>（过滤器）就是责任链模式。</p>
</blockquote>
<p>责任链模式的结构：</p>
<p><picture><img class="img-fluid " alt="责任链模式的结构" src="/docs/ruan-she/object-oriented/uTools_1682307471896.png" loading="lazy" width="680" height="348" />
</picture>

</p>
<ul>
<li>
<p><code>Handler</code>：</p>
<ul>
<li>定义一个处理请求的接口；</li>
<li>（可选）实现后继链。</li>
</ul>
</li>
<li>
<p><code>ConcreteHandler</code>：</p>
<ul>
<li>处理它所负责的请求；</li>
<li>可访问它的后继者；</li>
<li>如果可处理该请求，就处理它，否则将该请求转发给后继者。</li>
</ul>
</li>
<li>
<p><code>Client</code>：向链上的具体处理者（<code>ConcreteHandler</code>）对象提交请求。</p>
</li>
</ul>
<p>代码示例：</p>
<p><code>Handler</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Handler</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">Handler</span> <span class="n">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setNext</span><span class="o">(</span><span class="n">Handler</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">handlerRequest</span><span class="o">(</span><span class="kt">int</span> <span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>FuDaoYuan</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 辅导员
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FuDaoYuan</span> <span class="kd">extends</span> <span class="n">Handler</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 审批7天内的假期
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param request
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handlerRequest</span><span class="o">(</span><span class="kt">int</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">request</span> <span class="o">&lt;=</span> <span class="mi">7</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;FuDaoYuan allow...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">next</span><span class="o">.</span><span class="na">handlerRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;无法审批&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>YuanZhang</code>和<code>XiaoZhang</code>与<code>FuDaoYuan</code>类似，代码略。</p>
<p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChainOfResponsibility</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Handler</span> <span class="n">fuDaoYuan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FuDaoYuan</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Handler</span> <span class="n">yuanZhang</span> <span class="o">=</span> <span class="k">new</span> <span class="n">YuanZhang</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Handler</span> <span class="n">xiaoZhang</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XiaoZhang</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">fuDaoYuan</span><span class="o">.</span><span class="na">setNext</span><span class="o">(</span><span class="n">yuanZhang</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">yuanZhang</span><span class="o">.</span><span class="na">setNext</span><span class="o">(</span><span class="n">xiaoZhang</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">fuDaoYuan</span><span class="o">.</span><span class="na">handlerRequest</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;=================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">fuDaoYuan</span><span class="o">.</span><span class="na">handlerRequest</span><span class="o">(</span><span class="mi">8</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;=================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">fuDaoYuan</span><span class="o">.</span><span class="na">handlerRequest</span><span class="o">(</span><span class="mi">29</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;=================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">fuDaoYuan</span><span class="o">.</span><span class="na">handlerRequest</span><span class="o">(</span><span class="mi">31</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Chain of Responsibility模式适用于以下条件：</p>
<ul>
<li>有<u>多个的对象可以处理一个请求</u>，哪个对象处理该请求<u>运行时刻自动确定</u>。</li>
<li>想在<u>不明确指定接收者的情况下向多个对象中的一个提交一个请求</u>。</li>
<li>可处理一个请求的对象集合应被<u>动态指定</u>。</li>
</ul>
<p>责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。客户并不知道链上的哪一个对象最终处理这个请求，系统可以在不影响客户端的情况下动态的重新组织链和分配责任。</p>
<p>处理者有两个选择：承担责任或者把责任推给下家。</p>
<p>一个请求可以最终不被任何接收端对象所接受。</p>
<h3 id="命令模式" data-numberify>命令模式<a class="anchor ms-1" href="#命令模式"></a></h3>
<p>命令（Command）模式将<u>一个请求封装为一个对象</u>，从而使得可以<u>用不同的请求对客户进行参数化</u>；对<u>请求排队</u>或<u>记录请求日志</u>，以及<u>支持可撤销的操作</u>。</p>
<p>命令模式的结构：</p>
<p><picture><img class="img-fluid " alt="命令模式的结构" src="/docs/ruan-she/object-oriented/uTools_1682311014909.png" loading="lazy" width="924" height="305" />
</picture>

</p>
<ul>
<li>
<p><code>Command</code>：声明执行操作的接口。</p>
</li>
<li>
<p><code>ConcreteCommand</code>：将<u>一个接收者对象绑定于一个动作；调用接收者相应的操作</u>，以实现<code>Execute</code>。</p>
</li>
<li>
<p><code>Client</code>：创建一个具体命令对象并设定它的接收者<code>Receiver</code>。</p>
</li>
<li>
<p><code>Invoker</code>：要求该命令执行这个请求。</p>
</li>
<li>
<p><code>Receiver</code>：知道如何实施与执行一个请求相关的操作。</p>
<p>任何类都可能作为一个接收者。</p>
</li>
</ul>
<p>代码示例：</p>
<p><code>Command</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 命令接口
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Command</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 执行命令
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Tv</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tv</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 开机行为
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">powerOnAction</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Tv power-on...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 关机行为
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">powerOffAction</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Tv power-off...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>PowerOn</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 开机命令
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PowerOn</span> <span class="kd">implements</span> <span class="n">Command</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Tv</span> <span class="n">tv</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">PowerOn</span><span class="o">(</span><span class="n">Tv</span> <span class="n">tv</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">tv</span> <span class="o">=</span> <span class="n">tv</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">tv</span><span class="o">.</span><span class="na">powerOnAction</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>PowerOff</code>与<code>PowerOn</code>类似，代码略。</p>
<p><code>Invoker</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 请求者
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Invoker</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Command</span> <span class="n">command</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 设置请求命令
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCommand</span><span class="o">(</span><span class="n">Command</span> <span class="n">command</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">command</span> <span class="o">=</span> <span class="n">command</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 执行命令
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">command</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CommandPattern</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Tv</span> <span class="n">tv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Tv</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Command</span> <span class="n">powerOn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PowerOn</span><span class="o">(</span><span class="n">tv</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Command</span> <span class="n">powerOff</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PowerOff</span><span class="o">(</span><span class="n">tv</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Invoker</span> <span class="n">invoker</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Invoker</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">invoker</span><span class="o">.</span><span class="na">setCommand</span><span class="o">(</span><span class="n">powerOn</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">invoker</span><span class="o">.</span><span class="na">call</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">invoker</span><span class="o">.</span><span class="na">setCommand</span><span class="o">(</span><span class="n">powerOff</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">invoker</span><span class="o">.</span><span class="na">call</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Command模式适用于：</p>
<ul>
<li>
<p><u>抽象出待执行的动作以参数化某对象。</u></p>
<p>Command模式是过程语言中的<u>回调</u>（Callback）<u>机制</u>的一个面向对象的<u>替代品</u>。</p>
</li>
<li>
<p>在<u>不同的时刻指定、排列和执行请求</u>。</p>
<p>一个Command对象可以有一个与初始请求无关的生存期。</p>
<p>如果一个请求的接收者可用一种与地址空间无关的方式表达，那么就可以将负责该请求的命令对象传递给另一个不同的进程，并在那实现该请求。</p>
</li>
<li>
<p><u>支持取消操作</u>。</p>
<p>Command的Execute操作可在实施操作前将状态存储起来，在取消操作时这个状态用来消除该操作的影响。</p>
<p>Command接口必须添加一个Unexecute操作，该操作取消上一次Execute 调用的效果。</p>
<p>执行的命令被存储在一个历史列表中。可通过向后和向前遍历这一列表并分别调用Unexecute和Execute来实现重数不限的“取消和“重做”。</p>
</li>
<li>
<p><u>支持修改日志</u>。</p>
<p>这样当系统崩溃时，这些修改可以被重做一遍。</p>
<p>在 Command 接口中添加装载操作和存储操作，可以用来保持变动的一个一致的修改日志。</p>
<p>从崩溃中恢复的过程包括从磁盘中重新读入记录下来的命令并用Execute操作重新执行它们。</p>
</li>
<li>
<p>用构建在原语操作上的高层操作构造一个系统。</p>
<p>这样一种结构在支持事务（Transaction）的信息系统中很常见。</p>
<p>Command模式提供了对事务进行建模的方法。Command有一个公共接口，使得可以用同一种方式调用所有的事务，同时使用该模式也易于添加新事务以扩展系统。</p>
</li>
</ul>
<p>命令模式：把一个请求或者操作封装到一个对象中。命令模式把<u>发出命令的责任</u>和<u>执行命令的责任</u>分割开，委派给不同的对象。命令模式允许请求的一方和发送的一方独立开来，使得请求的一方：</p>
<ul>
<li>不必知道接收请求的一方的接口；</li>
<li>不必知道请求是怎么被接收</li>
<li>不必知道请求的操作是否执行，何时被执行以及是怎么被执行的。</li>
</ul>
<h3 id="解释器模式" data-numberify>解释器模式<a class="anchor ms-1" href="#解释器模式"></a></h3>
<p>解释器（Interpreter）模式<u>给定一个语言，定义它的文法的一种表示，并定义一个解释器</u>，这个解释器使用该表示来解释语言中的句子。</p>
<blockquote>
<p>可用于实现程序语言设计中的上下文无关文法。</p>
</blockquote>
<p>解释器模式结构：</p>
<p><picture><img class="img-fluid " alt="解释器模式结构" src="/docs/ruan-she/object-oriented/uTools_1682311888750.png" loading="lazy" width="705" height="369" />
</picture>

</p>
<ul>
<li>
<p><code>AbstractExpression</code>：声明一个<u>程序的解释操作</u>，这个接口为抽象语法树中所有的结点所共享。</p>
</li>
<li>
<p><code>TerminalExpression</code>：<u>实现与文法中的终结符相关联的解释操作</u>；一个句子中的每个终结符需要该类的一个实例。</p>
</li>
<li>
<p><code>NonterminalExpression</code>：对文法中的每一条规则都需要一个<code>NonterminalExpression</code>类。</p>
<ul>
<li>为每个符号都维护一个<code>AbstractExpression</code>类型的实例变量；</li>
<li>为文法中的非终结符实现解释（<code>Interpret</code>）操作。</li>
</ul>
</li>
<li>
<p><code>Context</code>：包含解释器之外的一些<u>全局信息</u>。</p>
</li>
<li>
<p><code>Client</code>：构建（或被给定）表示该文法定义的语言中一个特定的句子的抽象语法树，该抽象语法树由<code>NonterminalExpression</code>和<code>TerminalExpression</code>的实例装配而成；调用解释操作。</p>
</li>
</ul>
<p>Interpreter模式适用于当<u>有一个语言需要解释执行</u>，且<u>可将该语言中的句子表示为一个抽象语法树</u>时，以下情况效果最好:</p>
<ul>
<li>
<p>该<u>文法简单</u>。</p>
<p>对于复杂的发文，文法的类层次变得庞大而无法管理。此时语法分析程序生成器这样的工具是更好的选择。它们无须构建抽象语法树即可解释表达式，这样可以节省空间还可能节省时间。</p>
<p>即Interpreter模式需要构建抽象语法树，如果文法太复杂，需要构建复杂的语法树，不便于管理。</p>
</li>
<li>
<p><u>效率不是一个关键问题。</u></p>
<p>最高效的解释器通常不是通过直接解释语法分析树实现的，而是首先将它们转换成另一种形式。不过，即使在这种情况下，转换器仍然可用该模式实现。</p>
</li>
</ul>
<blockquote>
<p>题目选项描述：</p>
<p>有一个语言需要<u>解释执行</u>，并且可将句子表示为一个<u>抽象语法树</u>。</p>
</blockquote>
<p>解释器模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在SQL解析、符号处理引擎等。</p>
<h3 id="迭代器模式" data-numberify>迭代器模式<a class="anchor ms-1" href="#迭代器模式"></a></h3>
<p>迭代器（Iterator）模式<u>提供一种方法顺序访问</u>一个<u>聚合对象中的各个元素</u>，且<u>不需要暴露该对象的内部表示</u>。</p>
<blockquote>
<p>多个对象聚在一起形成的总体称之为聚合（聚集），聚合对象是能够包容一组对象的容器对象。</p>
</blockquote>
<p>迭代子模式将迭代逻辑封装到一个独立的子对象中，从而与聚集本身隔开。</p>
<p>迭代器模式的结构：</p>
<p><picture><img class="img-fluid " alt="迭代器模式的结构" src="/docs/ruan-she/object-oriented/uTools_1682312615849.png" loading="lazy" width="845" height="401" />
</picture>

</p>
<ul>
<li><code>Iterator</code>（迭代器）：定义访问和遍历元素的接口。</li>
<li><code>ConcreteIterator</code>（具体迭代器）：实现迭代器接口；对该聚合遍历时跟踪当前位置。</li>
<li><code>Aggregate</code>（聚合）：定义创建相应迭代器对象的接口。</li>
<li><code>ConcreteAggregate</code>（具体聚合）：实现创建相应迭代器的接口，该操作返回<code>ConcreteIterator</code>的一个适当的实例。</li>
</ul>
<p>代码示例：</p>
<p><code>Book</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Double</span> <span class="n">price</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// getter、setter和toString，略
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p><code>Aggregate</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Aggregate</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Iterator</span> <span class="nf">iterator</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Iterator</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Iterator</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">next</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>BookAggregate</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookAggregate</span> <span class="kd">implements</span> <span class="n">Aggregate</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">books</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">Book</span> <span class="n">book</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">books</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">book</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Book</span> <span class="nf">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">books</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">books</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Iterator</span> <span class="nf">iterator</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">BookIterator</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>BookIterator</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 迭代对象
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookIterator</span> <span class="kd">implements</span> <span class="n">Iterator</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">BookAggregate</span> <span class="n">bookAggregate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">index</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">BookIterator</span><span class="o">(</span><span class="n">BookAggregate</span> <span class="n">bookAggregate</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">bookAggregate</span> <span class="o">=</span> <span class="n">bookAggregate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">bookAggregate</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">bookAggregate</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">++);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">IteratorPattern</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">BookAggregate</span> <span class="n">bookAggregate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BookAggregate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Double</span><span class="o">&gt;</span> <span class="n">booksMap</span> <span class="o">=</span> <span class="n">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;数据结构&#34;</span><span class="o">,</span> <span class="mf">10.24</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;操作系统&#34;</span><span class="o">,</span> <span class="mf">20.48</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;计算机网络&#34;</span><span class="o">,</span> <span class="mf">40.96</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;计算机组成原理&#34;</span><span class="o">,</span> <span class="mf">81.92</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">booksMap</span><span class="o">.</span><span class="na">forEach</span><span class="o">((</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">bookAggregate</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Book</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Iterator</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">bookAggregate</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="o">(</span><span class="n">Book</span><span class="o">)</span> <span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">book</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Iterator模式适用于：</p>
<ul>
<li><u>访问</u>一个<u>聚合对象的内容</u>而<u>无须暴露它的内部表示</u>。</li>
<li>支持<u>对聚合对象的多种遍历</u>。</li>
<li>为<u>遍历不同的聚合结构提供一个统一的接口</u>。</li>
</ul>
<h3 id="中介者模式" data-numberify>中介者模式<a class="anchor ms-1" href="#中介者模式"></a></h3>
<p>中介者模式（Mediator，调停者）用一个<u>中介对象来封装一系列的对象交互</u>。中介者<u>使各对象不需要显式地相互引用</u>，从而使其<u>耦合松散</u>，而且<u>可以独立地改变它们之间的交互</u>。</p>
<p>中介者模式的结构：</p>
<p><picture><img class="img-fluid " alt="中介者模式的结构" src="/docs/ruan-she/object-oriented/uTools_1682313139750.png" loading="lazy" width="855" height="236" />
</picture>

</p>
<ul>
<li><code>Mediator</code>（中介者）：定义一个接口用于各同事（<code>Colleague</code>）对象通信。</li>
<li><code>ConcreteMediator</code>（具体中介者）：通过协调各同事对象实现协作行为；了解并维护它的各个同事。</li>
<li><code>Colleague</code>（同事类）：知道它的中介者对象；每一个同事类对象在需要与其他同事通信的时候与它的中介者通信。</li>
</ul>
<p>Mediator模式适用于：</p>
<ul>
<li><u>一组对象以定义良好但是复杂的方式进行通信</u>，产生的<u>相互依赖关系结构混乱且难以理解</u>。</li>
<li><u>一个对象引用其他很多对象</u>并且<u>直接与这些对象通信</u>，<u>导致难以复用该对象</u>。</li>
<li>想<u>定制一个分布在多个类中的行为</u>，而又<u>不想生成太多的子类</u>。</li>
</ul>
<p>中介者模式：包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用。从而使他们可以松散偶合。</p>
<p>当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。保证这些作用可以彼此独立的变化。中介者模式将多对多的相互作用转化为一对多的相互作用。</p>
<p>中介者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与其他对象的相互作用分开处理。</p>
<h3 id="备忘录模式" data-numberify>备忘录模式<a class="anchor ms-1" href="#备忘录模式"></a></h3>
<p>备忘录（Memento）模式在<u>不破坏封装性的前提下，捕获一个对象的内部状态</u>，并在对象之外保存这个状态。这样以后就可以<u>将对象恢复到原先保存的状态</u>。</p>
<p>Memento模式的结构：</p>
<p><picture><img class="img-fluid " alt="Memento模式的结构" src="/docs/ruan-she/object-oriented/uTools_1682314218216.png" loading="lazy" width="847" height="266" />
</picture>

</p>
<ul>
<li><code>Memento</code>（备忘录）：存储原发器对象的内部状态，原发器根据需要决定备忘录存储原发器的哪些内部状态；防止原发器以外的其他对象访问备忘录。</li>
<li><code>Originator</code>（原发器）：创建一个备忘录，用于记录当前时刻它的内部状态；使用备忘录恢复内部状态。</li>
<li><code>Caretaker</code>（管理者）负责保存好备忘录；不能对备忘录的内容进行操作或检查。</li>
</ul>
<p>Memento模式适用于：</p>
<ul>
<li>必须<u>保存</u>一个<u>对象在某一个时刻的（部分）状态</u>，这样以后需要时它才能<u>恢复到先前的状态</u>。</li>
<li>如果用接口来让其他对象直接得到这些状态，将会<u>暴露对象的实现细节并破坏对象的封装性</u>。</li>
</ul>
<blockquote>
<p>题目选项描述：</p>
<ul>
<li>将对象的状态恢复到先前的状态。</li>
<li>在不破坏封装性的前提下，捕获对象的内部状态并在对象之外保存。</li>
<li>必须保存一个对象在某一个时刻的（部分）状态。</li>
</ul>
<p>关键词：<u>状态</u>。</p>
</blockquote>
<p>备忘录模式：备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。备忘录模式的用意是在不破坏封装的条件下，将一个对象的状态捉住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态。</p>
<h3 id="观察者模式" data-numberify>观察者模式<a class="anchor ms-1" href="#观察者模式"></a></h3>
<p>观察者（Observer）模式<u>定义对象间的一种一对多的依赖关系</u>，当<u>一个对象的状态发生改变</u>时，<u>所有依赖于它的对象都得到通知并被自动更新</u>。</p>
<p>即，观察者模式让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。</p>
<blockquote>
<p>JavaWeb中<code>Listener</code>就是观察者模式。</p>
</blockquote>
<p>观察者模式的结构：</p>
<p><picture><img class="img-fluid " alt="观察者模式的结构" src="/docs/ruan-she/object-oriented/uTools_1682314647475.png" loading="lazy" width="814" height="315" />
</picture>

</p>
<ul>
<li><code>Subject</code>（目标）：提供注册和删除观察者对象的接口；知道它的观察者，可以有任意多个观察者观察同一个目标。</li>
<li><code>Observer</code>（观察者）：为那些在目标发生改变时需获得通知的对象<u>定义</u>一个<u>更新接口</u>。</li>
<li><code>ConcreteSubject</code>（具体目标）：将<u>有关状态存入各<code>ConcreteObserver</code>对象</u>；当它的<u>状态发生改变</u>时，向它的各个观察者<u>发出通知</u>。</li>
<li><code>ConcreteObserver</code>（具体观察者）：维护一个指向<code>ConcreteSubject</code>对象的引用；<u>存储有关状态</u>，这些状态应与目标的状态保持一致；实现<code>Observer</code>的更新接口，以<u>使自身状态与目标的状态保持一致</u>。</li>
</ul>
<p>代码实现：</p>
<p><code>Observer</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 观察者
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Observer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 更新观察者状态
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 观察目标
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 注册观察者
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">attach</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 删除观察者
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">detach</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 状态改变，通知所有观察者
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyAllObservers</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getState</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setState</span><span class="o">(</span><span class="n">String</span> <span class="n">state</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>ConcreteObserver</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConcreteObserver</span> <span class="kd">implements</span> <span class="n">Observer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Subject</span> <span class="n">subject</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ConcreteObserver</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Subject</span> <span class="n">subject</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">subject</span> <span class="o">=</span> <span class="n">subject</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">subject</span><span class="o">.</span><span class="na">attach</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">state</span> <span class="o">=</span> <span class="n">subject</span><span class="o">.</span><span class="na">getState</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">state</span> <span class="o">=</span> <span class="n">subject</span><span class="o">.</span><span class="na">getState</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;[收到通知] &#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;ConcreteObserver{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;name=&#39;&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; , state=&#39;&#34;</span> <span class="o">+</span> <span class="n">state</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; , subject=&#34;</span> <span class="o">+</span> <span class="n">subject</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>ConcreteSubject</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConcreteSubject</span> <span class="kd">implements</span> <span class="n">Subject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Observer</span><span class="o">&gt;</span> <span class="n">observerList</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ConcreteSubject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">observerList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">attach</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">observerList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">detach</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">observerList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyAllObservers</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;[发出通知] &#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span> <span class="o">:</span> <span class="n">observerList</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">observer</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getState</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">state</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setState</span><span class="o">(</span><span class="n">String</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;[状态改变] &#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">notifyAllObservers</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;ConcreteSubject{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;name=&#39;&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; , state=&#39;&#34;</span> <span class="o">+</span> <span class="n">state</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObserverPattern</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcreteSubject</span><span class="o">(</span><span class="s">&#34;主题&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Observer</span> <span class="n">zhangsan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcreteObserver</span><span class="o">(</span><span class="s">&#34;张三&#34;</span><span class="o">,</span> <span class="n">subject</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Observer</span> <span class="n">lisi</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcreteObserver</span><span class="o">(</span><span class="s">&#34;李四&#34;</span><span class="o">,</span> <span class="n">subject</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Observer</span> <span class="n">wangwu</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcreteObserver</span><span class="o">(</span><span class="s">&#34;王五&#34;</span><span class="o">,</span> <span class="n">subject</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">subject</span><span class="o">.</span><span class="na">notifyAllObservers</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">subject</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="s">&#34;new&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Observer模式适用于：</p>
<ul>
<li>当一个抽象模型有两个方面，其中<u>一个方面依赖于另一个方面</u>，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用。</li>
<li>当对<u>一个对象的改变需要同时改变其他对象</u>，而<u>不知道具体有多少对象有待改变</u>时。</li>
<li>当<u>一个对象必须通知其他对象</u>，而它又不能假定其他对象是谁，即<u>不希望这些对象是紧耦合的</u>。</li>
</ul>
<h3 id="状态模式" data-numberify>状态模式<a class="anchor ms-1" href="#状态模式"></a></h3>
<p>状态（State）模式允许一个对象在其<u>内部状态改变时改变它的行为</u>。对象看起来似乎修改了它的类。</p>
<p>状态模式把所研究的对象的行为包装在不同的状态对象里，每一个状态对象都属于一个抽象状态类的一个子类。</p>
<p>状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。</p>
<p>状态模式的结构：</p>
<p><picture><img class="img-fluid " alt="状态模式的结构" src="/docs/ruan-she/object-oriented/uTools_1682315217521.png" loading="lazy" width="644" height="245" />
</picture>

</p>
<ul>
<li><code>Context</code>（上下文）：定义客户感兴趣的接口；维护一个<code>ConcreteState</code>子类的实例，这个实例定义当前状态。</li>
<li><code>State</code>（状态）：定义一个接口以封装与<code>Context</code>的一个特定状态相关的行为。</li>
<li><code>ConcreteState</code>（具体状态子类）：每个子类实现与<code>Context</code>的一个状态相关的行为。</li>
</ul>
<p>代码示例：</p>
<p><code>State</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">State</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Context</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 贩卖机
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Context</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">State</span> <span class="n">state</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Context</span><span class="o">(</span><span class="kt">int</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">count</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StateA</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StateB</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 购买饮料
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">request</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">state</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCount</span><span class="o">(</span><span class="kt">int</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">count</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">State</span> <span class="nf">getState</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">state</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setState</span><span class="o">(</span><span class="n">State</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>StateA</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 有货
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StateA</span> <span class="kd">implements</span> <span class="n">State</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getCount</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;购买成功&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">context</span><span class="o">.</span><span class="na">setCount</span><span class="o">(--</span><span class="n">count</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getCount</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">context</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="k">new</span> <span class="n">StateB</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;购买失败&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;State@&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">+</span> <span class="sc">&#39;{&#39;</span> <span class="o">+</span> <span class="s">&#34;有货&#34;</span> <span class="o">+</span> <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>StateB</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 有货
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StateB</span> <span class="kd">implements</span> <span class="n">State</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getCount</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;购买失败，等待补货&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">context</span><span class="o">.</span><span class="na">setCount</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;补货成功，请重新购买&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">context</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="k">new</span> <span class="n">StateA</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;State@&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">+</span> <span class="sc">&#39;{&#39;</span> <span class="o">+</span> <span class="s">&#34;无货&#34;</span> <span class="o">+</span> <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StatePattern</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Context</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Context</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">context</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">context</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">context</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">context</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>State模式适用于：</p>
<ul>
<li>
<p>一个<u>对象的行为决定于它的状态</u>，并且它<u>必须在运行时刻根据状态改变它的行为</u>。</p>
</li>
<li>
<p>一个<u>操作中含有庞大的多分支的条件语句</u>，且<u>这些分支依赖于该对象的状态</u>。</p>
<p>这个状态常用一个或多个<u>枚举常量</u>表示。</p>
<p>State模式<u>将每一个条件分支放入一个独立的类中</u>。</p>
</li>
</ul>
<h3 id="策略模式" data-numberify>策略模式<a class="anchor ms-1" href="#策略模式"></a></h3>
<p>策略（Strategy）模式<u>定义一系列的算法</u>，把它们一个个封装起来，并且<u>使它们可以相互替换</u>。此模式使得算法可以独立于使用它们的客户而变化。</p>
<p>即，策略模式针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。</p>
<p><picture><img class="img-fluid " alt="策略模式的结构" src="/docs/ruan-she/object-oriented/uTools_1684936229743.png" loading="lazy" width="712" height="246" />
</picture>

</p>
<ul>
<li>
<p><code>Strategy</code>（策略）：定义所有支持的算法的公共接口。</p>
<p><code>Context</code>使用这个接口来调用某<code>ConcreteStrategy</code>定义的算法。</p>
</li>
<li>
<p><code>ConcreteStrategy</code>（具体策略）：以<code>Strategy</code>接口实现某具体算法。</p>
</li>
<li>
<p><code>Context</code>（上下文）：用一个<code>ConcreteStrategy</code>对象来配置；维护一个对<code>Strategy</code>对象的引用；可定义一个接口来让<code>Strategy</code>访问它的数据。</p>
</li>
</ul>
<p>代码实现：</p>
<p><code>Strategy</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Strategy</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">twoNumberOperation</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>OperationContext</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OperationContext</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Strategy</span> <span class="n">strategy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">operation</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">strategy</span><span class="o">.</span><span class="na">twoNumberOperation</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStrategy</span><span class="o">(</span><span class="n">Strategy</span> <span class="n">strategy</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">strategy</span> <span class="o">=</span> <span class="n">strategy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>AddStrategy</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddStrategy</span> <span class="kd">implements</span> <span class="n">Strategy</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">twoNumberOperation</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>与<code>AddStrategy</code>类似，代码略。</p>
<p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StrategyPattern</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">OperationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OperationContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Strategy</span> <span class="n">add</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AddStrategy</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Strategy</span> <span class="n">sub</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SubStrategy</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Strategy</span> <span class="n">multiply</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MultiplyStrategy</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 我觉得下面这部分代码应该是放在OperationContext.operation()中实现的&lt;br&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 因为策略模式就是要让用户不知道使用的是哪种算法&lt;br&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 但是对于这个案例来说不适合这样实现
</span></span></span><span class="line"><span class="cl"><span class="cm">         */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">context</span><span class="o">.</span><span class="na">setStrategy</span><span class="o">(</span><span class="n">add</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">operation</span><span class="o">(</span><span class="mi">2023</span><span class="o">,</span> <span class="mi">527</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">context</span><span class="o">.</span><span class="na">setStrategy</span><span class="o">(</span><span class="n">sub</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">operation</span><span class="o">(</span><span class="mi">2023</span><span class="o">,</span> <span class="mi">527</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">context</span><span class="o">.</span><span class="na">setStrategy</span><span class="o">(</span><span class="n">multiply</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">operation</span><span class="o">(</span><span class="mi">2023</span><span class="o">,</span> <span class="mi">527</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Strategy模式适用于：</p>
<ul>
<li><u>许多相关的类仅仅是行为有异</u>。“策略”提供了一种用多个行为中的一个行为来配置一个类的方法。</li>
<li><u>需要使用一个算法的不同变体</u>。例如，定义一些反映不同空间的空间/时间权衡的算法。当这些变体实现为一个算法的类层次时，可以使厨策略模式。</li>
<li>算法使用客户不应该知道的数据。可使用策略模式以避免暴露复杂的、与算法相关的数据结构。</li>
<li>一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，将相关的条件分支移入它们各自的<code>Strategy</code>类中，以代替这些条件语句。</li>
</ul>
<p>策略模式使得算法可以在不影响到客户端的情况下发生变化。</p>
<p>策略模把行为和环境分开：环境类负责维持和查询行为类，各种算法在具体的策略类中提供。</p>
<p>由于算法和环境独立开来，算法的增减，修改都不会影响到环境和客户端。</p>
<h3 id="模板方法模式" data-numberify>模板方法模式<a class="anchor ms-1" href="#模板方法模式"></a></h3>
<p>模板方法模式（Template Method）定义一个操作中的算法骨架，而将一些步骤延迟到子类中。Template Method使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
<p>模板方法模式的结构：</p>
<p><picture><img class="img-fluid " alt="模板方法模式的结构" src="/docs/ruan-she/object-oriented/uTools_1682316789017.png" loading="lazy" width="610" height="352" />
</picture>

</p>
<ul>
<li>
<p><code>AbstractClass</code>（抽象类）：</p>
<ul>
<li>定义抽象的原语操作，具体的子类将重定义它们以实现一个算法的各步骤；</li>
<li>实现模板方法，定一个算法的骨架，该模板方法不仅调用原语操作，也调用定义在<code>AbstractClass</code>或其他对象中的操作。</li>
</ul>
</li>
<li>
<p><code>ConcreteClass</code>（具体类）：实现原语操作以完成算法中与特定子类相关的步骤。</p>
</li>
</ul>
<p>Template Method模式适用于：</p>
<ul>
<li>
<p><u>一次性实现</u>一个<u>算法的不变的部分</u>，并将<u>可变的行为留给子类来实现</u>。</p>
</li>
<li>
<p>各<u>子类中公共的行为应被提取出来并集中到一个公共父类</u>中，以<u>避免代码重复</u>。</p>
</li>
<li>
<p>控制子类扩展。</p>
<p>模板方法旨在特定点调用“hook”操作（默认的行为，子类可以在必要时进行重定义扩展），这就只允许在这些点进行扩展。</p>
</li>
</ul>
<p>模板方法模式准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。</p>
<h3 id="访问者模式" data-numberify>访问者模式<a class="anchor ms-1" href="#访问者模式"></a></h3>
<p>访问者（Visitor）模式<u>表示一个作用于某<strong>对象结构</strong>中的<strong>各元素</strong>的操作</u>。它<u>允许在不改变各元素的类的前提下，定义作用于这些元素的新操作</u>。</p>
<p>即，访问者模式的目的是<u>封装一些施加于某种数据结构元素之上的操作</u>。一旦<u>这些操作需要修改</u>的话，<u>接受这个操作的数据结构可以保持不变</u>。</p>
<blockquote>
<p>就是结构和行为分离，结构被定义在具体对象中（具体对象实现操作的一小部分），行为被定义在访问者中（操作的大部分由访问者实现）。</p>
</blockquote>
<p>访问者模式的结构：</p>
<p><picture><img class="img-fluid " alt="访问者模式的结构" src="/docs/ruan-she/object-oriented/uTools_1682316261510.png" loading="lazy" width="823" height="653" />
</picture>

</p>
<ul>
<li>
<p><code>ConcreteVisitor</code>（具体访问者）：实现每个有<code>Visitor</code>声明的操作，每个操作实现本算法的一部分，而该算法片段乃是对应于结构中对象的类。</p>
<p><code>ConcreteVisitor</code>为该算法提供了上下文并存储它的局部状态。这一状态常常在遍历该结构的过程中累积结果。</p>
</li>
<li>
<p><code>Element</code>（元素）：定义以一个访问者为参数的<code>Accept</code>操作。</p>
</li>
<li>
<p><code>ConcreteElement</code>（具体元素）：实现以一个访问者为参数的<code>Accept</code>操作。</p>
</li>
<li>
<p><code>ObjectStructure</code>（对象结构）：能枚举它的元素；可以提供一个高层的接口以允许该访问者访问它的元素；可以是一个组合或者一个集合。</p>
</li>
</ul>
<p>代码实现：</p>
<p><code>Person</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 接受访问对象
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">visitor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span><span class="o">[]</span> <span class="n">split</span> <span class="o">=</span> <span class="n">getClass</span><span class="o">().</span><span class="na">toString</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">&#34;\\.&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">last</span> <span class="o">=</span> <span class="n">split</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">split</span><span class="o">[</span><span class="n">last</span><span class="o">]</span> <span class="o">+</span> <span class="sc">&#39;{&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;name=&#39;&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Visitor</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Visitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 访问学生
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Student</span> <span class="n">student</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 访问老师
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Teacher</span> <span class="n">teacher</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Student</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="kd">extends</span> <span class="n">Person</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">visitor</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Teacher</code>与<code>Student</code>类似，代码略。</p>
<p><code>Visitor1</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Visitor1</span> <span class="kd">implements</span> <span class="n">Visitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Student</span> <span class="n">student</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Visitor1 &#34;</span> <span class="o">+</span> <span class="n">student</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Teacher</span> <span class="n">teacher</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Visitor1 &#34;</span> <span class="o">+</span> <span class="n">teacher</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Visitor2</code>与<code>Visitor1</code>类似，代码略。</p>
<p><code>PersonStructure</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonStructure</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">people</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">PersonStructure</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Student</span><span class="o">(</span><span class="s">&#34;张三&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Student</span><span class="o">(</span><span class="s">&#34;李四&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Student</span><span class="o">(</span><span class="s">&#34;王五&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Teacher</span><span class="o">(</span><span class="s">&#34;李老师&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Teacher</span><span class="o">(</span><span class="s">&#34;陈老师&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Teacher</span><span class="o">(</span><span class="s">&#34;刘老师&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 使用访问者访问集合中所有对象
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Person</span> <span class="n">person</span> <span class="o">:</span> <span class="n">people</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">person</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">visitor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VisitorPattern</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">PersonStructure</span> <span class="n">structure</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PersonStructure</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Visitor</span> <span class="n">visitor1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Visitor1</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">structure</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">visitor1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;==============================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Visitor</span> <span class="n">visitor2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Visitor2</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">structure</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">visitor2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Visitor模式适用于：</p>
<ul>
<li>
<p>一个<u>对象结构包含很多类对象</u>，它们有不同的接口，而用户想对这些对象<u>实施一些依赖于其具体类的操作</u>。</p>
</li>
<li>
<p>需要对一个<u>对象结构中的对象进行很多不同的并且不相关的操作</u>，而又想要避免这些操作“污染”这些对象的类。</p>
<p>Visitor使得用户可以将相关的操作集中起来定义在一个类中。当该对象结构被很多应用共享时，用Visitor模式让每个应用仅包含需要用到的操作。</p>
</li>
<li>
<p><u>定义对象结构的类很少改变，但经常需要在此结构上定义新的操作</u>。</p>
<p>改变对象结构类需要重定义对所有访问者的接口，这可能需要很大的代价。如果对象结构类经常改变，那么可能还是在这些类中定义这些操作较好。</p>
</li>
</ul>
<p>访问者模式将有关的行为集中到一个访问者对象中，而不是分散到一个个的节点类中。当使用访问者模式时，要将尽可能多的对象浏览逻辑放在访问者类中，而不是放到它的子类中。访问者模式可以跨过几个类的等级结构访问属于不同的等级结构的成员类。</p>
<h2 id="设计模式总结" data-numberify>设计模式总结<a class="anchor ms-1" href="#设计模式总结"></a></h2>
<p>创建型设计模式（抽象了对象的实例化过程）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">关键字</th>
<th style="text-align:left">意图</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">工厂方法</td>
<td style="text-align:center">动态生产对象</td>
<td style="text-align:left">定义创建对象的接口，由子类实例化对象。让类的实例化延迟到其子类。</td>
</tr>
<tr>
<td style="text-align:center">抽象工厂</td>
<td style="text-align:center">生成系列对象</td>
<td style="text-align:left">提供创建一系列对象的接口，无需指定具体的类。</td>
</tr>
<tr>
<td style="text-align:center">生成器</td>
<td style="text-align:center">构造复杂对象</td>
<td style="text-align:left">将复杂对象的构建与表示分离。使得同样的构建可以创建不同的表示。</td>
</tr>
<tr>
<td style="text-align:center">原型</td>
<td style="text-align:center">克隆对象</td>
<td style="text-align:left">用原型实例指定创建对象的类型，通过复制原型来创建对象。</td>
</tr>
<tr>
<td style="text-align:center">单例</td>
<td style="text-align:center">一个实例</td>
<td style="text-align:left">保证一个类仅有一个实例，并提供一个全局访问点。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:left">适用性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">工厂方法</td>
<td style="text-align:left"><ul><li>一个类不知道它所必须创建对象的类</li><li>由子类来指定创建的对象</li><li>将创建对象的职责委托给多个帮助子类中的某一个</li></ul></td>
</tr>
<tr>
<td style="text-align:center">抽象工厂</td>
<td style="text-align:left"><ul><li>系统独立于它产品的创建、<u>组合</u>和表示</li><li>系统由多个产品系列中的一个来配置</li><li>强调一系列相关产品对象的设计，以便进行联合使用</li><li>提供一个产品类库，只显示它们的接口而不是实现</li></ul></td>
</tr>
<tr>
<td style="text-align:center">生成器</td>
<td style="text-align:left"><ul><li>创建复杂对象的算法，独立于该对象的组成部分以及它们的装配方式</li><li>构造过程必须允许被构造的对象有不同的表示</li></ul></td>
</tr>
<tr>
<td style="text-align:center">原型</td>
<td style="text-align:left"><ul><li>系统独立于它产品创建、<u>构成</u>和表示</li><li>要实例化的类是在运行时刻指定，如动态装载</li><li>避免创建一个与产品类层次平行的工厂类层次</li></ul></td>
</tr>
<tr>
<td style="text-align:center">单例</td>
<td style="text-align:left"><ul><li>类只能有一个实例，用户可从一个全局点访问</li><li>这个唯一实例是通过子类化可扩展的，客户无须更改代码就能使用扩展实例</li></ul></td>
</tr>
</tbody>
</table>
<p>结构型模式（组合类或对象获得新的结构）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">关键字</th>
<th style="text-align:left">意图</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">适配器（类/对象）</td>
<td style="text-align:center">接口转换</td>
<td style="text-align:left">将类的接口转换成兼容其他类的接口。<br>使原本接口不兼容的类可以一起工作。</td>
</tr>
<tr>
<td style="text-align:center">桥接</td>
<td style="text-align:center">抽象与实现分离</td>
<td style="text-align:left">将类的抽象与实现分离，使它们可以独立变化。</td>
</tr>
<tr>
<td style="text-align:center">组合</td>
<td style="text-align:center">组合对象</td>
<td style="text-align:left">将对象组合成树型结构以表示“部分——整体”的层次结构。<br>使得用户对单个对象和组合对象的使用具有一致性。</td>
</tr>
<tr>
<td style="text-align:center">装饰</td>
<td style="text-align:center">动态附加职责</td>
<td style="text-align:left">动态地给一个对象添加一些额外的职责，比用子类来扩展功能更灵活。</td>
</tr>
<tr>
<td style="text-align:center">外观</td>
<td style="text-align:center">对外统一接口</td>
<td style="text-align:left">为子系统定义和提供一个统一的对外高层接口（外观）。<br>简化了该子系统的使用。</td>
</tr>
<tr>
<td style="text-align:center">享元</td>
<td style="text-align:center">共享大量细粒度对象</td>
<td style="text-align:left">提供支持大量细粒度对象共享的有效方法。</td>
</tr>
<tr>
<td style="text-align:center">代理</td>
<td style="text-align:center">中介代理</td>
<td style="text-align:left">为其他对象提供一种代理以控制对这个对象的访问。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:left">适用性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">适配器</td>
<td style="text-align:left"><ul><li>使用接口不符合要求的类</li><li>创建可复用、可与其它不相关类或不可预见类协同工作</li><li>（仅适用于对象适配器）想使用子类，但又不想对它们子类化来匹配接口</li></ul></td>
</tr>
<tr>
<td style="text-align:center">桥接</td>
<td style="text-align:left"><ul><li>在抽象和实现之间没有固定的绑定关系</li><li>抽象以及实现都可以通过生成子类的方法扩充</li><li>对抽象的实现部分的修改不会对用户产生影响</li><li>隐藏抽象的实现</li><li>在多个对象间共享实现，用户并不知道</li></ul></td>
</tr>
<tr>
<td style="text-align:center">组合</td>
<td style="text-align:left"><ul><li>表示对象的部分——整体层次结构</li><li>希望用户忽略组合对象与单个对象的不同，并统一地使用它们</li></ul></td>
</tr>
<tr>
<td style="text-align:center">装饰器</td>
<td style="text-align:left"><ul><li>不影响其他对象，而动态透明地添加职责</li><li>处理那些可以撤销的职责</li><li>不能采用子类进行扩充</li></ul></td>
</tr>
<tr>
<td style="text-align:center">外观</td>
<td style="text-align:left"><ul><li>为一个复杂子系统提供一个简单接口</li><li>客户程序与抽象类的实现部分之间存在着很大的依赖性</li><li>需要构建一个层次结构的子系统时</li></ul></td>
</tr>
<tr>
<td style="text-align:center">享元</td>
<td style="text-align:left"><ul><li>使用了大量的对象，造成很大开销</li><li>对象的大多数状态都可变为外部状态</li><li>删除对象的外部状态后，可以用相对较少的共享对象取代很多组对象</li></ul></td>
</tr>
<tr>
<td style="text-align:center">代理</td>
<td style="text-align:left"><ul><li>在需要比较通用和复杂对象指针代替简单指针时</li></ul></td>
</tr>
</tbody>
</table>
<p>行为型模式：</p>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">关键字</th>
<th style="text-align:left">意图</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">责任链</td>
<td style="text-align:center">职责传递</td>
<td style="text-align:left">将处理请求的多个对象连成一条链，请求在链中传递，直到有对象处理。<br>给多个对象处理请求的机会，减少请求的发送者与接收者之间的耦合。</td>
</tr>
<tr>
<td style="text-align:center">命令</td>
<td style="text-align:center">请求封装为对象</td>
<td style="text-align:left">将一个请求封装为一个对象，可用不同请求对客户进行参数化。<br>将请求排队或记录日志，支持撤销操作。</td>
</tr>
<tr>
<td style="text-align:center">解释器</td>
<td style="text-align:center">语句解释</td>
<td style="text-align:left">给定一种语言，定义其文法和解释器，解释器根据文法解释语言中的句子。</td>
</tr>
<tr>
<td style="text-align:center">迭代器</td>
<td style="text-align:center">顺序访问数据集</td>
<td style="text-align:left">提供一个顺序访问聚合对象中元素的方法，不需要暴露对象的内部表示。</td>
</tr>
<tr>
<td style="text-align:center">中介者</td>
<td style="text-align:center">不直接引用</td>
<td style="text-align:left">用对象封装一系列的对象交互。<br>使各对象不需显式地相互调用，达到低耦合。<br>可以独立改变对象间的交互。</td>
</tr>
<tr>
<td style="text-align:center">备忘录</td>
<td style="text-align:center">保存状态</td>
<td style="text-align:left">不破坏封装的前提下，捕获对象的内部状态，并在该对象之外保存。<br>可以在以后恢复保存的状态。</td>
</tr>
<tr>
<td style="text-align:center">观察者</td>
<td style="text-align:center">联动</td>
<td style="text-align:left">定义对象间的一种一对多依赖关系。<br>一个对象状态改变，所有依赖于它的对象都得到通知并被自动更新。</td>
</tr>
<tr>
<td style="text-align:center">状态</td>
<td style="text-align:center">状态封装成类</td>
<td style="text-align:left">把对象的行为封装在不同的状态对象中。<br>允许一个对象在其内部状态改变时改变它的行为。</td>
</tr>
<tr>
<td style="text-align:center">策略</td>
<td style="text-align:center">多方案切换</td>
<td style="text-align:left">定义并封装一系列算法，使它们可以在不影响客户端的情况下相互替换。</td>
</tr>
<tr>
<td style="text-align:center">模板方法</td>
<td style="text-align:center">框架</td>
<td style="text-align:left">定义一个操作中的算法骨架，让其子类来实现算法中的剩余逻辑。<br>可以不改变算法结构而重新定义其某些特定步骤。</td>
</tr>
<tr>
<td style="text-align:center">访问者</td>
<td style="text-align:center">数据与操作分离</td>
<td style="text-align:left">封装作用与某对象结构中元素的操作。<br>可以在不改变元素类的前提下，定义或修改作用于这些元素的操作。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:left">适用性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">责任链</td>
<td style="text-align:left"><ul><li>有多个对象处理请求，运行时刻自动确定由谁处理</li><li>不明指定接收者的情况下向多个对象中的一个提交请求</li><li>可处理请求的对象集合被动态指定</li></ul></td>
</tr>
<tr>
<td style="text-align:center">命令</td>
<td style="text-align:left"><ul><li>抽象出待执行的动作以参数化某对象</li><li>不同的时刻指定、排列和执行请求</li><li>支持取消操作，支持修改日志</li></ul></td>
</tr>
<tr>
<td style="text-align:center">解释器</td>
<td style="text-align:left"><ul><li>文法简单</li><li>效率不是关键问题</li></ul></td>
</tr>
<tr>
<td style="text-align:center">迭代器</td>
<td style="text-align:left"><ul><li>访问聚合对象的内容而不暴露其内部表示</li><li>支持对聚合对象的多种遍历</li><li>为遍历不同的聚合结构提供一个统一的接口</li></ul></td>
</tr>
<tr>
<td style="text-align:center">中介者</td>
<td style="text-align:left"><ul><li>一组对象以复杂的方式进行通信</li><li>一个对象引用其他很多对象并且直接与这些对象通信</li><li>定制一个分布在多个类中的行为，而又不想生成太多的子类</li></ul></td>
</tr>
<tr>
<td style="text-align:center">备忘录</td>
<td style="text-align:left"><ul><li>必须保存一个对象在某一个时刻的（部分）状态</li><li>如果用接口让其他对象直接得到这些状态，会暴露对象的实现细节并破坏对象的封装性</li></ul></td>
</tr>
<tr>
<td style="text-align:center">观察者</td>
<td style="text-align:left"><ul><li>当抽象模型有两个方面，其中一个方面依赖于另一个方面</li><li>当改变一个对象的同时需要改变其他对象，又不知道有多少对象待改变</li><li>当一个对象必须通知其他对象，又不能假定其他对象是谁（不能紧耦合）</li></ul></td>
</tr>
<tr>
<td style="text-align:center">状态</td>
<td style="text-align:left"><ul><li>对象的行为决定于它的状态，且在运行时刻根据状态改变行为</li><li>操作中含有庞大的多分支的条件语句</li></ul></td>
</tr>
<tr>
<td style="text-align:center">策略</td>
<td style="text-align:left"><ul><li>许多相关的类仅仅是行为有异</li><li>需要使用一个算法的不同变体</li></ul></td>
</tr>
<tr>
<td style="text-align:center">模板方法</td>
<td style="text-align:left"><ul><li>一次性实现算法中不变的部分，将可变的行为留给子类实现</li><li>各子类中公共行为被提取到公共父类中，避免代码重复</li></ul></td>
</tr>
<tr>
<td style="text-align:center">访问者</td>
<td style="text-align:left"><ul><li>对象结构包含很多类对象，用户想对这些对象实施操作</li><li>对对象结构中的对象进行很多不同且不相关的操作</li><li>定义对象结构的类很少改变，但经常需要在此结构上定义新操作</li></ul></td>
</tr>
</tbody>
</table>
<p>个人理解的方式：</p>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:left">简述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">工厂方法</td>
<td style="text-align:left">具体工厂（工厂接口的实现）创建具体对象。</td>
</tr>
<tr>
<td style="text-align:center">抽象工厂</td>
<td style="text-align:left">一个具体工厂（抽象工厂的子类）创建多个产品，不同工厂用不同方式创建这一系列产品。</td>
</tr>
<tr>
<td style="text-align:center">生成器</td>
<td style="text-align:left">复杂对象通过切换构建<code>construct(Builder)</code>来创建不同表示。</td>
</tr>
<tr>
<td style="text-align:center">原型</td>
<td style="text-align:left">多个原型之间通过克隆<code>Prototype.clone()</code>来复制对象。</td>
</tr>
<tr>
<td style="text-align:center">单例</td>
<td style="text-align:left">通过私有化无参构造方法、静态<code>Singleton instance</code>属性和静态<code>getInstance()</code>方法使对象保持单例。</td>
</tr>
<tr>
<td style="text-align:center">适配器</td>
<td style="text-align:left">适配器继承目标类，重写目标类的方法，方法将不兼容的接口包装成与目标类一致的接口。</td>
</tr>
<tr>
<td style="text-align:center">桥接</td>
<td style="text-align:left">将产品（抽象）与其某属性（实现）分开，通过桥接（组合）产品与其属性独立出来的类来制造不同产品。</td>
</tr>
<tr>
<td style="text-align:center">组合</td>
<td style="text-align:left">用树形结构和一致的抽象类让部分和整体的操作一致。如文件树。</td>
</tr>
<tr>
<td style="text-align:center">装饰器</td>
<td style="text-align:left">装饰器继承被装饰类，通过构造器传入被装饰对象，然后在与被装饰类一致的方法中添加新操作。多个装饰器嵌套可组成一条装饰链。</td>
</tr>
<tr>
<td style="text-align:center">外观</td>
<td style="text-align:left">复杂子系统有很多操作，外观将其简化。跟适配器很像。</td>
</tr>
<tr>
<td style="text-align:center">享元</td>
<td style="text-align:left">让一个对象假装成许多个对象。就是很多个对象之间可能有一部分属性的值是一样的，定义一个对象然后共享这部分属性。</td>
</tr>
<tr>
<td style="text-align:center">代理</td>
<td style="text-align:left">代理就是给被代理对象加一些操作，跟适配器和外观不同的是代理的接口是与被代理对象一致的。</td>
</tr>
<tr>
<td style="text-align:center">责任链</td>
<td style="text-align:left">有多个接口一致的对象，将请求在这些对象间层层转发，请求可以被其中一个对象处理（JavaWeb里的过滤器）。和嵌套的装饰器很像。</td>
</tr>
<tr>
<td style="text-align:center">命令</td>
<td style="text-align:left">就是一个命令一个对象，调用这些对象的方式一致（对象接口一致）。</td>
</tr>
<tr>
<td style="text-align:center">解释器</td>
<td style="text-align:left">解释语言的上下文。</td>
</tr>
<tr>
<td style="text-align:center">迭代器</td>
<td style="text-align:left">在集合对象的外部，通过迭代器访问集合中的元素，对应的迭代器可由集合对象给出<code>iterator()</code>。跟Java里的迭代器一个样。</td>
</tr>
<tr>
<td style="text-align:center">中介者</td>
<td style="text-align:left">有多个类似对象，这些对象通过中介互相发送消息（就好像微信聊天一样，微信就是中介）。</td>
</tr>
<tr>
<td style="text-align:center">备忘录</td>
<td style="text-align:left">捕获并保存对象的内部状态，并且可以恢复到原型保存的状态。</td>
</tr>
<tr>
<td style="text-align:center">观察者</td>
<td style="text-align:left">在目标对象状态更新时，观察者们可以收到通知<code>update()</code>，然后更新自身状态，与目标对象的状态保持一致。</td>
</tr>
<tr>
<td style="text-align:center">状态</td>
<td style="text-align:left">一个状态一个类，在状态中通过判断变换到其它状态。</td>
</tr>
<tr>
<td style="text-align:center">策略</td>
<td style="text-align:left">就是动态切换算法。</td>
</tr>
<tr>
<td style="text-align:center">模板方法</td>
<td style="text-align:left">模板实现算法操作中不变的部分，其余的交给子类去实现。</td>
</tr>
<tr>
<td style="text-align:center">访问者</td>
<td style="text-align:left">就是在<code>Visitor.visit(访问对象)</code>中定义对象的操作，然后在结构类中提供<code>accept(Visitor)</code>来访问这些对象。</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    
    <item>
      <title>知识产权篇</title>
      <link>/docs/ruan-she/%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83/</link>
      <pubDate>Sat, 15 Apr 2023 12:29:35 +0800</pubDate>
      
      <guid>/docs/ruan-she/%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83/</guid>
      <description><![CDATA[著作权 著作权（也称为版权）：是指作者对其创作的作品享有的人身权和财产权。 人身权包括： 发表权 署名权 修改权 保护作品完整权 财产权包括： 作品的使用权]]></description>
      <content:encoded><![CDATA[<h1 id="著作权" data-numberify>著作权<a class="anchor ms-1" href="#著作权"></a></h1>
<p>著作权（也称为版权）：是指作者对其创作的作品享有的人身权和财产权。</p>
<p>人身权包括：</p>
<ul>
<li>发表权</li>
<li>署名权</li>
<li>修改权</li>
<li>保护作品完整权</li>
</ul>
<p>财产权包括：</p>
<ul>
<li>作品的使用权</li>
<li>获得报酬</li>
</ul>
<blockquote>
<p>著作权中，发表权有时限，时限是作者终身及其死亡后50年。署名权、修改权、保护作品完整权等不受时间限制，受到永久保护。</p>
</blockquote>
<hr>
<h1 id="知识产权的特点" data-numberify>知识产权的特点<a class="anchor ms-1" href="#知识产权的特点"></a></h1>
<p>知识产权的特点包括：</p>
<ul>
<li>无形性</li>
<li>双重性</li>
<li>确认性</li>
<li>独占性</li>
<li>地域性</li>
<li>时间性</li>
</ul>
<h2 id="地域性" data-numberify>地域性<a class="anchor ms-1" href="#地域性"></a></h2>
<p>各国主管机关依照本国法律授予的知识产权，<u>只能在不国领域内受法律保护</u>。著作权虽然自动产生，但它受地域限制。</p>
<h2 id="时间性" data-numberify>时间性<a class="anchor ms-1" href="#时间性"></a></h2>
<p>知识产权具有法定的保护期限。</p>
<p>例如，我国发明专利的保护期为20年，自专利申请日起计算。</p>
<ul>
<li>
<p>我国公民的作品发表权的保护期为作者终生及其死亡后50年。</p>
</li>
<li>
<p>我国商标权的保护期限自核准注册之日起10年内有效。</p>
<p>但可以根据其所有人的需要无限地延长权利期限：</p>
<ul>
<li>在期限届满前6个月内申请续展注册，</li>
<li>每次续展注册的有效期为10年，</li>
<li>续展注册的次数不限。</li>
</ul>
<p>商业秘密受法律保护的期限是不确定的。</p>
</li>
</ul>
<hr>
<h1 id="计算机软件著作权" data-numberify>计算机软件著作权<a class="anchor ms-1" href="#计算机软件著作权"></a></h1>
<p>计算机软件著作权有两个对象：</p>
<ul>
<li>
<p><strong>主体</strong>：指享有著作权的人，包括：</p>
<ul>
<li>公民</li>
<li>法人</li>
<li>其他组织</li>
</ul>
</li>
<li>
<p><strong>客体</strong>：指著作权法保护的计算机软件著作权的范围（受保护的对象）。</p>
<p>著作权法保护的计算机软件是指：</p>
<ul>
<li>
<p><strong>计算机程序</strong>，包括：</p>
<ul>
<li>源程序，</li>
<li>目标程序；</li>
</ul>
</li>
<li>
<p>计算机程序<strong>有关文档</strong>，文档一般以以下形式出现：</p>
<ul>
<li>程序设计说明书，</li>
<li>流程图，</li>
<li>用户手册。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>计算机软件著作权受到以下两个法律的保护：</p>
<ul>
<li>《中华人民共和国著作权法》，简称著作权法；</li>
<li>《计算机软件保护条例》。</li>
</ul>
<p>时限：计算机软件著作权的权利自软件开发完成之日起产生。</p>
<h2 id="保护条件" data-numberify>保护条件<a class="anchor ms-1" href="#保护条件"></a></h2>
<p>《计算机软件保护条例》规定，依法受到保护的计算机软件作品必须符合下列条件：</p>
<ul>
<li>
<p>独立创作。</p>
<p>不可抄袭。使用他人软件作品的逻辑步骤的组合方式，对他人构成侵权。</p>
</li>
<li>
<p>可被感知。</p>
<p>受保护的软件必须固定在某种有形物体上，例如固定在存储器、磁盘和磁带等设备上，也可以是其他的有形物，如纸张等。</p>
</li>
<li>
<p>逻辑合理。</p>
<p>软件作品必须具备合理的逻辑思想，并以正确的逻辑步骤表现出来。</p>
</li>
</ul>
<h2 id="权利" data-numberify>权利<a class="anchor ms-1" href="#权利"></a></h2>
<ul>
<li>
<p>计算机软件的著作人身权</p>
<ul>
<li>发表权</li>
<li>开发者身份权（也称为署名权）</li>
</ul>
</li>
<li>
<p>计算机软件的著作财产权</p>
<ul>
<li>使用权</li>
<li>复制权</li>
<li>修改权</li>
<li>发行权</li>
<li>翻译权</li>
<li>注释权</li>
<li>信息网络传播权</li>
<li>出租权</li>
<li>使用许可权</li>
<li>获得报酬权</li>
<li>转让权</li>
</ul>
</li>
<li>
<p>软件合法持有人的权利</p>
<p>软件的合法复制品所有人享有下述权利：</p>
<ul>
<li>根据使用的需要把软件装入计算机等能存储信息的装置内。</li>
<li>根据需要进行必要的复制。</li>
<li>为了防止复制品损坏而制作备份复制品（不能给他人使用）。</li>
<li>为了把该软件用于实际的计算机应用环境或者改进其功能性能而进行必要的修改。</li>
</ul>
</li>
</ul>
<h2 id="保护期" data-numberify>保护期<a class="anchor ms-1" href="#保护期"></a></h2>
<p>计算机软件著作权的权利自软件开发完成之日起产生，保护期为50年。保护期满，除开发者身份权以外，其他权利终止。</p>
<p>一旦计算机软件著作权超出保护期，软件就进入公有领域。计算机软件著作权人的单位终止和计算机软件著作权人的公民死亡均无合法继承人时，除开发者身份权以外，该软件的其他权利进入公有领域。软件进入公有领域后成为社会公共财富，公众可无偿使用。</p>
<h2 id="职务作品" data-numberify>职务作品<a class="anchor ms-1" href="#职务作品"></a></h2>
<p>职务软件作品是指公民在单位任职期间为热行本单位工作任务所开发的计算机软件作品。</p>
<p>根据《计算机软件保护条例》可以判断软件作品的归属。</p>
<p>构成职务软件作品的条件：</p>
<ul>
<li>公民在单位任职期间所开发的软件如果是执行本职工作的结果，即针对本职工作中明确指定的开发目标所开发的，则该软件的著作权属于该单位。</li>
<li>当公民作为某单位的雇员时，如其开发的软件属于执行本职工作的结果，该软件著作权应当归单位享有。</li>
<li>如果该雇员主要使用了单位的设备，著作权不能属于该雇员个人享有。</li>
</ul>
<blockquote>
<p>如果软件作品属于职务软件作品，那开发者只有署名权。</p>
</blockquote>
<p>构成非职务软件（个人）作品的条件：</p>
<ul>
<li>
<p>所开发的软件作品不是执行其本职工作的结果。</p>
<p>若雇员开发创作的软件不是执行本职工作的结果，则构成非职务计算机软件著作权的条件之一。</p>
</li>
<li>
<p>开发的软件作品与开发者在单位中从事的工作内容无直接联系。</p>
<p>雇员所开发的软件作品与其本职工作没有直接的关系，则构成非职务计算机软件著作权的第二个条件。</p>
</li>
<li>
<p>开发的软件作品未使用单位的物质技术条件。</p>
<p>开发软件作品所必须的设备、数据、资金和其他软件开发环境，不属于雇员所在的单位所有。没有使用受雇单位的任何物质技术条件构成非职务软件著作权的第三个条件。</p>
</li>
</ul>
<h2 id="委托开发" data-numberify>委托开发<a class="anchor ms-1" href="#委托开发"></a></h2>
<p>委托开发的软件作品属于著作权法规定的委托软件作品。委托开发软件作品著作权关系的建立，<u>一般由委托方与受委托方订立合同而成立</u>。</p>
<p>委托开发软件作品关系中：</p>
<ul>
<li>委托方：主要责任是提供资金、设备等物质条件，并不直接参与开发软件作品的创作开发活动。</li>
<li>受托方：主要责任是根据委托合同规定的目标开发出符合条件的软件。</li>
</ul>
<p>接受他人委托开发的软件，其著作权的归属由委托者与受委托者签订书面合同约定：无书面合同或者合同未作明确约定的，其著作权由受托人享
有。</p>
<p>委托开发的软件著作权的归属按以下标准确定：</p>
<ul>
<li>软件著作权的归属应当根据委托开发软件的合同来确定。</li>
<li>若<u>没有签订书面协议</u>，或者<u>在协议中未对软件著作权归属作出明确的约定</u>，则<u>软件著作权属于受委托者</u>，即<u>属于实际完成软件的开发者</u>。</li>
</ul>
<h2 id="侵权行为" data-numberify>侵权行为<a class="anchor ms-1" href="#侵权行为"></a></h2>
<p>计算机软件著作权侵权行为：</p>
<ul>
<li>
<p>未经软件著作权人的同意而发表或者登记其软件作品。</p>
<p>侵犯著作权人的发表权。</p>
</li>
<li>
<p>将他人开发的软件当作自己的作品发表或者登记。</p>
<p>侵犯开发者身份权和署名权。</p>
</li>
<li>
<p>未经合作者的同意将与他人合作开发的软件当作自己独立完成的作品发表或者登记。</p>
<p>合作开发的软件，软件作品的发表权也应由全体开发者共同行使。</p>
</li>
<li>
<p>在他人开发的软件上署名或者更改他人开发的软件上的署名。</p>
<p>侵犯了软件著作人的开发者身份权及署名权。</p>
</li>
<li>
<p>未经软件著作权人或者其合法受让者的许可，修改、翻译其软件作品。</p>
<p>侵犯了著作权人或其合法受让者的使用权中的修改权、翻译权。</p>
<p>如果征得软件作品著作人的同意，修改和改善新增加的部分，创作者应享有著作权。</p>
</li>
<li>
<p>未经软件著作权人或其合法受让者的许可，复制或部分复制其软件作品。</p>
<p>侵犯了著作权人或其合法受让者的使用权中的复制权。</p>
</li>
<li>
<p>未经软件著作权人及其合法受让者同意，向公众发行、出租其软件的复制品。</p>
<p>此种行为侵犯了著作权人或其合法受让者的发行权与出租权。</p>
</li>
<li>
<p>未经软件著作权人或其合法受让者同意，向任何第三方办理软件权利许可或转让事宜。</p>
<p>侵犯了软件著作权人或其合法受让者的使用许可权和转让权。</p>
</li>
<li>
<p>未经软件著作权人及其合法受让者同意，通过信息网络传播著作权人的软件。</p>
<p>侵犯了软件著作权人或其合法受让者的信息网络传播权。</p>
</li>
</ul>
<hr>
<h1 id="商业秘密权" data-numberify>商业秘密权<a class="anchor ms-1" href="#商业秘密权"></a></h1>
<p>商业秘密的定义：“指不为公众所知悉的、能为权利人带来经济利益、具有实用性并经权利人采取保密措施的技术信息和经营信息”。</p>
<p>商业秘密的基本内容：</p>
<ul>
<li>经营秘密：未公开的经营信息，是指与生产经营销售活动有关的经营方法、
管理方法、产销策略、货源情报、客户名单、标底和标书内容等专有知识。</li>
<li>技术秘密：未公开的技术信息，是指与产品生产和制造有关的技术诀窍、生产方案、工艺流程、设计图纸、化学配方和技术情报等专有知识。</li>
</ul>
<p>商业秘密的构成条件：</p>
<ul>
<li>必须具有未公开性，即不为公众所知悉；</li>
<li>必须具有实用性，即能为权利人带来经济效益；</li>
<li>必须具有保密性，即采取了保密措施。</li>
</ul>
<p>商业秘密的丧失：一项商业秘密受到法律保护的依据是必须具备上述构成商业秘密的3个条件，当缺少上述3个条件之一时就会造成商业秘密丧失保护。</p>
<hr>
<h1 id="专利权" data-numberify>专利权<a class="anchor ms-1" href="#专利权"></a></h1>
<p>专利申请的原则：</p>
<ul>
<li><u>专利申请人及其代理人</u>在办理各种手续时都应当采用<strong>书面</strong>形式。</li>
<li>遵循<u>“一份申请一项发明”</u>原则。</li>
<li>多人就<u>同样</u>的发明创造申请专利的，专利权<u>授给最先申请人</u>。</li>
<li>相同的发明，多人<u>同时</u>申请，由所有申请人<u>协商确定</u>专利权归属。</li>
</ul>
<p>专利的时限（均自申情日起计算）：</p>
<table>
    <tr>
        <td>发明专利权</td>
        <td>20年</td>
    </tr>
    <tr>
        <td>实用新型专利权</td>
        <td>10年</td>
    </tr>
    <tr>
        <td>外观设计专利权</td>
        <td>15年</td>
    </tr>
</table>
<h2 id="商标权" data-numberify>商标权<a class="anchor ms-1" href="#商标权"></a></h2>
<ul>
<li>
<p>商标权保护期限自核准注册之日起<u>10年内有效</u>。</p>
</li>
<li>
<p>商标权保护期限可以<u>根据其所有人的需要无限地延长权利期限</u>。</p>
<p>在期限届满<u>前6个月内</u>申请续展注册，每次续展注册的<u>有效期为10年</u>，<u>续展注册的次数不限</u>。</p>
<p>如果商标权人逾期不办理续展注册，其商标权也将终止。</p>
</li>
</ul>
<p>商标权注册先申请注册先得，同一天申请先使用商标先得，都没使用过则协商。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>操作系统篇</title>
      <link>/docs/ruan-she/operating-system/</link>
      <pubDate>Wed, 12 Apr 2023 16:28:00 +0800</pubDate>
      
      <guid>/docs/ruan-she/operating-system/</guid>
      <description><![CDATA[概述 计算机系统由两部分组成： 硬件 软件 通常把未配置软件的计算机称为裸机。 操作系统（Operating System）目的是为了填补人与机器之间的]]></description>
      <content:encoded><![CDATA[<h1 id="概述" data-numberify>概述<a class="anchor ms-1" href="#概述"></a></h1>
<p>计算机系统由两部分组成：</p>
<ul>
<li><strong>硬件</strong></li>
<li><strong>软件</strong></li>
</ul>
<p>通常把未配置软件的计算机称为裸机。</p>
<p>操作系统（Operating System）目的是为了填补人与机器之间的鸿沟，即建立用户与计算机之间的接口，而为裸机配置的一种系统软件。</p>
<p>操作系统也包括了系统软件。</p>
<p>操作系统在计算机系统中的地位：</p>
<p><picture><img class="img-fluid " alt="操作系统在计算机系统中的地位" src="/docs/ruan-she/operating-system/uTools_1682583172164.png" loading="lazy" width="309" height="145" />
</picture>

</p>
<p>操作系统是用户与计算机之间的接口，它在计算机系统中占据重要而特殊的地位，所有其他软件，如编辑程序、汇编程序、编译程序、数据库管理系统等系统软件，以及大量的应用软件都是建立在操作系统基础上的，并得到它的支持和取得它的服务。</p>
<hr>
<h1 id="进程管理" data-numberify>进程管理<a class="anchor ms-1" href="#进程管理"></a></h1>
<p>进程管理也称<strong>处理机管理</strong>。在多道程序批处理系统和分时系统中有多个并发执行的程序，为了描述系统中程序执行时动态变化的过程引入了进程。进程是<u>资源分配和独立运行的基本单位</u>。</p>
<p>进程有两个基本属性：</p>
<ul>
<li>可拥有资源的独立单位；</li>
<li>可独立调度和分配的基本单位。</li>
</ul>
<h2 id="程序执行顺序" data-numberify>程序执行顺序<a class="anchor ms-1" href="#程序执行顺序"></a></h2>
<h3 id="程序顺序执行" data-numberify>程序顺序执行<a class="anchor ms-1" href="#程序顺序执行"></a></h3>
<p>前驱图是一种有向无循环图，由结点和有向边组成：</p>
<ul>
<li>结点：代表各程序段的操作；</li>
<li>有向边：表示两个程序段（结点）操作之间存在的前驱关系（$\rightarrow$）。</li>
</ul>
<p>前驱关系：</p>
<p>程序段$P_i$和$P_j$的前趋关系表示成$P_i \rightarrow P_j$，其中，$P_i$是$P_j$的前驱，$P_j$是$P_i$的后继，其含义是：</p>
<p>$P_i$执行结束后$P_j$才能执行。例如，输入、计算和输出：</p>
<p><picture><img class="img-fluid " alt="3个结点的前驱图" src="/docs/ruan-she/operating-system/uTools_1682753834678.png" loading="lazy" width="358" height="107" />
</picture>

</p>
<p>程序顺序执行时的主要特征包括：</p>
<ul>
<li>顺序性</li>
<li>封闭性</li>
<li>可再现性</li>
</ul>
<h3 id="程序并发执行" data-numberify>程序并发执行<a class="anchor ms-1" href="#程序并发执行"></a></h3>
<p>若在计算机系统中采用多道程序设计技术，则主存中的多道程序可处于并发执行状态。</p>
<p>虽然每个作业有前趋关系的各程序段不能在CPU和输入/输出各部件（同一个部件）中并行执行，但是同一个作业内没有前趋关系的程序段或不同作业的程序段可以分别在CPU和各输入/输出部件上（不同部件中）并行执行。</p>
<p>例如，某系统中有一个CPU、一台输入设备和一台输出设备，每个作业具有3个程序段输入I<sub>i</sub>、计算C<sub>i</sub>和输出P<sub>i</sub>（i = 1，2，3）。其前驱图如（其中，在同一垂直方向上的作业并行执行）：</p>
<p><picture><img class="img-fluid " alt="程序并发执行的前驱图" src="/docs/ruan-she/operating-system/uTools_1682754585700.png" loading="lazy" width="480" height="203" />
</picture>

</p>
<p>程序并发执行时的特征：</p>
<ul>
<li>失去了程序的封闭性；</li>
<li>程序和机器的执行程序的活动不再一一对应；</li>
<li>并发程序间的相互制约性。</li>
</ul>
<p>程序并发执行带来的问题：并发程序间共享了变量，破坏了程序的封闭性和可再现性。</p>
<p>并发程序的问题可以通过研究进程间的同步和互斥解决。</p>
<h2 id="进程的三态模型" data-numberify>进程的三态模型<a class="anchor ms-1" href="#进程的三态模型"></a></h2>
<p>在多道程序系统中，进程在处理器上交替运行，状态也不断地发生变化，因此进程一般有3种基本状态：</p>
<ul>
<li><strong>运行</strong>：当一个进程在处理机上运行时。</li>
<li><strong>就绪</strong>：一个进程获得了除处理机外的一切所需资源，一旦得到处理机即可运行（还未得到）。</li>
<li><strong>阻塞</strong>（等待或睡眠）：一个进程正在等待某一事件发生而暂时停止运行，这时即使把处理机分配给进程也无法运行。</li>
</ul>
<p><picture><img class="img-fluid " alt="进程的三态模型" src="/docs/ruan-she/operating-system/uTools_1682757000186.png" loading="lazy" width="314" height="275" />
</picture>

</p>
<h2 id="进程间的通信" data-numberify>进程间的通信<a class="anchor ms-1" href="#进程间的通信"></a></h2>
<p>在多道程序环境的系统中存在多个可以并发执行的进程，故进程间必然存在资源共享和相互合作的问题。进程通信是指各个进程交换信息的过程。</p>
<h3 id="同步和互斥" data-numberify>同步和互斥<a class="anchor ms-1" href="#同步和互斥"></a></h3>
<ul>
<li>
<p><strong>同步</strong>：合作进程间的直接制约问题。</p>
<p>进程间的同步：是指在系统中一些需要相互合作，协同工作的进程，这样的相互联系称为进程的同步。</p>
<p>例如，进程A向缓冲区送数据，进程B从缓冲区取数据加工，当进程B要取数据加工时，必须是进程A完成了向缓冲区送数据的操作，否则进程B必须停下来等待进程A的操作结束。</p>
</li>
<li>
<p><strong>互斥</strong>：申请临界资源进程间的间接制约问题。</p>
<p>进程间的互斥：是指系统中多个进程因争用临界资源而互斥执行。</p>
<blockquote>
<p>临界资源（Critical Resource，CR）：在多道程序系统环境中，那些一次只能供一个进程使用的资源。如打印机、共享变量和表格等。</p>
</blockquote>
</li>
</ul>
<p>临界区管理的原则：</p>
<blockquote>
<p>临界区（Critical Section，CS）：是进程中对临界资源实施操作的那段程序。</p>
</blockquote>
<p>对互斥临界区管理的4条原则如下：</p>
<ul>
<li><strong>有空即进</strong>：当<u>无进程处于临界区</u>时，<u>允许</u>进程<u>进入</u>临界区，并且<u>只能在临界区运行有限
的时间</u>。</li>
<li><strong>无空则等</strong>：当<u>有一个进程在临界区</u>时，<u>其他欲进入临界区的进程必须等待</u>，以保证进程互斥地访问临界资源。</li>
<li><strong>有限等待</strong>：<u>对于要求访问临界资源的进程，应保证进程能在有限的时间进入临界区，以免陷入“<strong>饥饿</strong>”状态</u>。</li>
<li><strong>让权等待</strong>：<u>当进程不能进入自己的临界区时，应立即释放处理机，以免进程陷入<strong>忙等</strong>状态。</u></li>
</ul>
<h3 id="信号量机制" data-numberify>信号量机制<a class="anchor ms-1" href="#信号量机制"></a></h3>
<p>信号量机制是一种有效的进程同步与互斥工具。</p>
<p>信号量机制主要有：</p>
<ul>
<li>整型信号量</li>
<li>记录型信号量</li>
<li>信号量集机制</li>
</ul>
<p>整型信号量：</p>
<p>信号量是一个整型变量，根据控制对象的不同被赋予不同的值。信号量分为如下两类：</p>
<ul>
<li>公用信号量：实现进程间的互斥，初值为<code>1</code>或资源的数目。</li>
<li>私用信号量：实现进程间的同步，初值为<code>0</code>或某个正整数。</li>
</ul>
<p>信号量$S$的物理意义：</p>
<ul>
<li>$S \ge 0$：表示某资源的可用数，此时<strong>有可用资源</strong>；</li>
<li>$S &lt; 0$：则其绝对值表示阻塞队列中等待该资源的进程数，此时无可用资源，并且有进程被阻塞。</li>
</ul>
<h3 id="pv操作" data-numberify>PV操作<a class="anchor ms-1" href="#pv操作"></a></h3>
<p>PV操作：实现进程同步与互斥的常用方法。</p>
<p>P操作和V操作是低级通信原语，在执行期间不可分割。其中：</p>
<ul>
<li>
<p><strong>P操作</strong>（减）：表示<strong>申请</strong>一个资源；</p>
<p>定义：$S := S-1$（$S$表示信号量）。</p>
<ul>
<li>$S \ge 0$：执行P操作的进程继续执行；</li>
<li>$S &lt; 0$：无可用资源，置该进程为<strong>阻塞</strong>状态，并将其插入阻塞队列。</li>
</ul>
</li>
<li>
<p><strong>V操作</strong>（加）：表示<strong>释放</strong>一个资源。</p>
<p>定义：$S := S+1$。</p>
<ul>
<li>$S &gt; 0$：执行V操作的进程继续执行；</li>
<li>$S \le 0$：表示释放前有程序被阻塞，从阻塞状态唤醒一个进程，并将其插入就绪队列，然后执行V操作的进程继续。</li>
</ul>
</li>
</ul>
<blockquote>
<p>P减V加，P进V出。</p>
</blockquote>
<p>利用PV操作实现进程的互斥：</p>
<ol>
<li>令信号量<code>mutex</code>的初始值为1；</li>
<li>进入临界区：执行P操作；</li>
<li>推出临界区：执行V操作。</li>
</ol>
<p>利用PV操作实现进程的同步：</p>
<p>实现进程的同步可用一个信号量与消息联系起来。</p>
<p>信号量的值：</p>
<ul>
<li>为<code>0</code>：表示希望的消息未产生；</li>
<li>非<code>0</code>：表示希望的消息已经存在。</li>
</ul>
<p>假定信号量S表示某条消息，进程可以：</p>
<ul>
<li>调用P操作：测试消息是否到达；</li>
<li>调用V操作：通知消息已经准备好。</li>
</ul>
<p>例如：</p>
<ul>
<li>生产者进程$P_1$：不间断地生产产品送入缓冲区；</li>
<li>消费者进程$P_2$：不断地从缓冲区中取产品消费。</li>
</ul>
<p>为实现$P_1$与$P_2$间同步问题，分别设置信号量：</p>
<ul>
<li>$S_1$：初值为1，表示缓冲区空，可以将产品送入缓冲区；</li>
<li>$S_2$：初值为0，表示缓冲区有产品。</li>
</ul>
<p>同步过程如图：</p>
<p><picture><img class="img-fluid " alt="PV实现进程同步例子" src="/docs/ruan-she/operating-system/1682764456232.png" loading="lazy" width="979" height="310" />
</picture>

</p>
<p>若缓冲区可存放$n$件产品，生产者不断生产，消费者不断消费。可以设置3个信号量：</p>
<ul>
<li>$S$：互斥信号量，初值为1；</li>
<li>$S_1$：表示是否可以将产品放入缓冲区，初值为$n$；</li>
<li>$S_2$：表示缓冲区是否存有产品，初值为0。</li>
</ul>
<p>其同步过程如图：</p>
<p><picture><img class="img-fluid " alt="n缓冲区的同步" src="/docs/ruan-she/operating-system/uTools_1682764884289.png" loading="lazy" width="550" height="368" />
</picture>

</p>
<h3 id="死锁现象" data-numberify>死锁现象<a class="anchor ms-1" href="#死锁现象"></a></h3>
<p>死锁是指两个以上的进程互相都要请求对方己经占有的资源，导致这些进程都无法继续运行下去的现象。</p>
<p>产生死锁的原因有：</p>
<ul>
<li>
<p>进程间互相<u>竞争资源</u>：</p>
<p>多个进程所共享的资源不足以满足它们的需求时，将引起它们对资源的竞争，从而导致死锁。</p>
</li>
<li>
<p><u>进程推进顺序非法</u>：</p>
<p>进程在运行的过程中请求和释放资源的顺序不当，从而导致死锁。</p>
</li>
</ul>
<p>产生死锁的4个必要条件：</p>
<ul>
<li>互斥条件</li>
<li>请求保持条件</li>
<li>不可剥夺条件</li>
<li>环路条件</li>
</ul>
<p>发生死锁时，在进程资源有向图中必构成环路（每个进程占有了下一个进程申请的一个或多个资源），如：</p>
<p><picture><img class="img-fluid " alt="2个进程死锁的资源有向图" src="/docs/ruan-she/operating-system/uTools_1682766203339.png" loading="lazy" width="323" height="242" />
</picture>

</p>
<ul>
<li>
<p>资源：用<strong>方框</strong>表示资源的集合，<strong>方框中的圆圈</strong>表示资源；</p>
</li>
<li>
<p>进程：用<strong>圆圈</strong>表示；</p>
</li>
<li>
<p>有向边：</p>
<ul>
<li>
<p>请求资源：箭头由进程指向资源</p>
<p>$$
\bigcirc \rightarrow \Box
$$</p>
</li>
<li>
<p>分配资源：箭头由资源指向进程</p>
<p>$$
\bigcirc \leftarrow \Box
$$</p>
</li>
</ul>
</li>
</ul>
<p>造成死锁的情况有：</p>
<ul>
<li>
<p>进程推进顺序不当：</p>
<p>设有两个互斥资源$A$和$B$被两个并发执行的进程$P_1$和$P_2$共享。假如它们按照如下次序请求，则系统会发生死锁：</p>
<ol>
<li>$P_1.Request(A)$：请求成功，资源$A$被$P_1$占用；</li>
<li>$P_2.Request(B)$：请求成功，资源$B$被$P_2$占用；</li>
<li>$P_1.Request(B)$：请求失败，资源$B$已被$P_2$占用；</li>
<li>$P_2.Request(A)$：请求失败，资源$A$已被$P_1$占用。</li>
</ol>
<blockquote>
<p>上述请求顺序中，1和2的顺序可以交换，3和4的顺序可以交换。</p>
</blockquote>
</li>
<li>
<p>同类资源分配不当：</p>
<ul>
<li>$m$：资源数，</li>
<li>$n$：进程数，</li>
<li>$k$：每个进程都要求的资源数。</li>
</ul>
<p>若满足$m \ge n \times (k-1) + 1$，则不会发生死锁。</p>
<p>若每个进程要求的资源数不同，为$k_i$（$i = 1,2,\cdots,n$），那么此时可能会引起死锁的原因是：</p>
<p>$$
m &lt; \sum_{i=1}^{n}{k_i}
$$</p>
</li>
<li>
<p>PV操作使用不当：</p>
<p>如图：</p>
<p><picture><img class="img-fluid " alt="PV死锁示例" src="/docs/ruan-she/operating-system/uTools_1682767634275.png" loading="lazy" width="577" height="290" />
</picture>

</p>
<p>当信号量$S_1=S_2=0$时将发生死锁。</p>
<ul>
<li>$P_2.P(S_2)$：执行前$S_2 = 0$，执行后$S_2 = -1$，$P_2$等待；</li>
<li>$P_1.P(S_1)$：执行前$S_1 = 0$，执行后$S_1 = -1$，$P_1$等待。</li>
</ul>
<p>此时$P_1$和$P_2$都无法继续运行，造成死锁。</p>
</li>
</ul>
<h3 id="死锁的处理" data-numberify>死锁的处理<a class="anchor ms-1" href="#死锁的处理"></a></h3>
<p>死锁的处理策略主要有4种：</p>
<ul>
<li>鸵鸟策略（不理睬策略）</li>
<li>预防策略</li>
<li>避免策略</li>
<li>检测与解除死锁</li>
</ul>
<p>死锁预防：</p>
<p>死锁预防是<u>采用某种策略限制并发进程对资源的请求，破坏死锁产生的4个必要条件之一，严格防止死锁的产生</u>，使系统在任何时刻都不满足死锁的必要条件。预防死锁的两种策略如下：</p>
<ul>
<li>
<p>预先静态分配法：破坏了“不可剥夺条件”，<u>预先分配所需资源，保证不等待资源</u>。</p>
<p>该方法的问题是降低了对资源的利用率，降低进程的并发程度；有时可能无法预先知道所需资源。</p>
</li>
<li>
<p>资源有序分配法：破坏了“环路条件”，<u>把资源分类按顺序排列，保证不形成环路</u>。</p>
<p>该方法存在的问题是限制进程对资源的请求：由于资源的排序占用系统开销。</p>
</li>
</ul>
<p>死锁避免：</p>
<p>比起死锁预防，<u>死锁避免则不那么严格地限制产生死锁的必要条件</u>。最著名的死锁避免算法是银行家算法，死锁避免算法需要很大的系统开销。</p>
<h3 id="银行家算法" data-numberify>银行家算法<a class="anchor ms-1" href="#银行家算法"></a></h3>
<p>银行家算法对于进程发出的、每一个系统可以满足的<u>资源请求命令加以检测</u>，若分配资源后系统：</p>
<ul>
<li>进入不安全状态，则不予分配；</li>
<li>仍处于安全状态，则实施分配。</li>
</ul>
<p>与死锁预防策略相比，银行家算法提高了资源的利用率，但对于分配资源后系统是否安全的检测，增加了系统开销。</p>
<ul>
<li>
<p>安全状态：指系统能按某种顺序如$&lt;P_1, P_2, \cdots, P_n&gt;$来为每个进程分配其所需资源，直到最大需求，使每个进程都可顺序完成。</p>
<p>通常称$&lt;P_1, P_2, \cdots, P_n&gt;$序列为安全序列。</p>
</li>
<li>
<p>不安全状态：若系统不存在这样一个安全序列，则称系统处于不安全状态。</p>
</li>
</ul>
<p>假设系统有$n$个进程（$P_i, i = 1, 2, \cdots, n$），使用银行家算法求系统安全序列的一般步骤为：</p>
<ol>
<li>
<p>根据目前可用资源数和仍需资源数求得序列当前的第$k$（$1 \le k \le n$）个进程应为$P_i$。</p>
<blockquote>
<p>$P_i$的仍需资源数$\le$系统可用资源数。</p>
</blockquote>
</li>
<li>
<p>根据$P_i$的已分配资源数 + 分配前系统可用资源数，求出系统执行完$P_i$后的可用资源数。</p>
<blockquote>
<p>系统执行完$P_4$后，会释放$P_4$占用的资源。</p>
</blockquote>
</li>
<li>
<p>重复执行步骤1到步骤2，直到能判断系统处于安全状态还是不安全状态。若为安全状态，则可求出安全序列。</p>
</li>
</ol>
<p>假设系统种有三类互斥资源$R_1$、$R_2$和$R_3$，可用资源数分别为8、7和4。在$T_0$时刻系统种有$P_1$、$P_2$、$P_3$、$P_4$和$P_5$这5个进程，这些进程对资源的最大需求量和已分配资源数如图：</p>
<p><picture><img class="img-fluid " alt="进程对资源的最大需求量和已分配资源数" src="/docs/ruan-she/operating-system/uTools_1682941260775.png" loading="lazy" width="490" height="231" />
</picture>

</p>
<p>由上图可得系统的仍需资源数（最大需求量 - 已分配资源数）为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$R_1$</th>
<th style="text-align:center">$R_2$</th>
<th style="text-align:center">$R_3$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<p>可得系统目前可用资源数（可用资源数 - 所有进程的最大需求量）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$R_1$</th>
<th style="text-align:center">$R_2$</th>
<th style="text-align:center">$R_3$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<p>求出安全序列的过程：</p>
<ol>
<li>
<p>根据目前可用资源数和仍需资源数可得序列中第1个进程应为$P_4$。</p>
<blockquote>
<p>因为$P_4$仅仅只需要再分配一个$R_1$，而系统目前恰好剩余1个$R_1$和$R_2$。</p>
</blockquote>
<p>系统执行完$P_4$后，会释放$P_4$占用的资源，那么此时系统可用资源数为（已分配资源数 + 分配前可用资源数）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$R_1$</th>
<th style="text-align:center">$R_2$</th>
<th style="text-align:center">$R_3$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>与上一步类似，可求得序列中第2个进程为$P_2$或$P_5$。</p>
<ul>
<li>
<p>若为$P_2$，执行完$P_2$后，系统可用资源数为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$R_1$</th>
<th style="text-align:center">$R_2$</th>
<th style="text-align:center">$R_3$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>若为$P_5$，执行完$P_5$后，系统可用资源数为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$R_1$</th>
<th style="text-align:center">$R_2$</th>
<th style="text-align:center">$R_3$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
</li>
</ul>
</li>
<li>
<p>根据上一步，有两个可能的安全序列：</p>
<ul>
<li>若序列的上一个进程为$P_2$，序列的第3个进程为$P_5$。</li>
<li>若序列的上一个进程为$P_5$，序列的第3个进程为$P_2$。</li>
</ul>
<p>此时，无论当前序列为$&lt;P_4, P_2, P_5&gt;$还是$&lt;P_4, P_5, P_2&gt;$，它们执行完序列的第3个进程后，系统可用资源数都为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$R_1$</th>
<th style="text-align:center">$R_2$</th>
<th style="text-align:center">$R_3$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">5</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>根据上一步的系统可用资源数，上一步所得的两个序列的第4个进程都为$P_1$。</p>
<p>此时，它们执行完$P_1$后，系统可用资源数为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$R_1$</th>
<th style="text-align:center">$R_2$</th>
<th style="text-align:center">$R_3$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">4</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>两个序列的第4个进程都为$P_3$。</p>
<p>它们执行完$P_3$后，系统可用资源数为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$R_1$</th>
<th style="text-align:center">$R_2$</th>
<th style="text-align:center">$R_3$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">7</td>
<td style="text-align:center">4</td>
</tr>
</tbody>
</table>
<p>此时系统可用资源数与检测前的可用资源数相等，即所有资源都被释放，没有被任何进程占用。</p>
<p>那么该系统处于安全状态，且一共有两个安全序列，分别为：</p>
<ul>
<li>$&lt;P_4, P_2, P_5, P_4, P_3&gt;$；</li>
<li>$&lt;P_4, P_5, P_2, P_4, P_3&gt;$。</li>
</ul>
</li>
</ol>
<h2 id="线程" data-numberify>线程<a class="anchor ms-1" href="#线程"></a></h2>
<blockquote>
<p>传统进程有两个基本属性：</p>
<ul>
<li>可拥有资源的独立单位；</li>
<li>可独立调度和分配的基本单位。</li>
</ul>
</blockquote>
<p>引入线程的原因是，进程的系统必须付出较大的时空开销。引入线程后，将传统进程的两个基本属性分开：</p>
<ul>
<li>线程：作为调度和分配的基本单位；</li>
<li>进程：作为独立分配资源的单位。</li>
</ul>
<p>线程是进程中的一个实体，是被系统独立分配和调度的基本单位。</p>
<p>线程的特点：</p>
<ul>
<li>线程<u>基本上不拥有资源</u>，只拥有一点运行中必不可少的资源（如程序计数器、一组寄存器和栈），它可与同属一个进程的其他线程共享进程所拥有的全部资源。</li>
<li>线程<u>也具有就绪、运行和阻塞3种基本状态</u>。</li>
<li><u>线程可创建另一个线程。</u></li>
<li><u>同一个进程中的多个线程可并发执行。</u></li>
</ul>
<p>线程因其具有许多传统进程所具有的特性，故称为&quot;轻型进程（Light-Weight Process）&quot;；而传统进程称为&quot;重型进程（Heavy-Weight Process）&quot;。</p>
<p>线程分为：</p>
<ul>
<li>用户级线程（User-Level Threads）：不依赖于内核，该类线程的创建、撤销和切换都不利用系统调用来实现；</li>
<li>内核支持线程（Kernel-Supported Threads）：依赖于内核，即无论是在用户进程中的线程，还是在系统中的线程，它们的创建、撤销和切换都利用系统调用来实现。</li>
</ul>
<p>某些系统同时实现了两种类型的线程。</p>
<blockquote>
<p>与线程不同的是，不论是系统进程还是用户进程，在进行切换时，都要依赖于内核中的进程调度。因此，不论是什么进程都是与内核有关的，是在内核支持下进行切换的。</p>
</blockquote>
<hr>
<h1 id="存储管理" data-numberify>存储管理<a class="anchor ms-1" href="#存储管理"></a></h1>
<h2 id="程序局部性原理" data-numberify>程序局部性原理<a class="anchor ms-1" href="#程序局部性原理"></a></h2>
<p>程序在执行时将呈现出局部性规律，即在一段时间内，程序的执行仅局限于某个部分。相应地，它所访问的存储空间也局限于某个区域内。</p>
<p>程序的局限性表现在以下两个方面：</p>
<ul>
<li>
<p><strong>时间局限性</strong>：</p>
<ul>
<li>如果程序中的某条<u>指令一旦执行</u>，则不久的将来该指令<u>可能再次被执行</u>；</li>
<li>如果某个<u>存储单元被访问</u>，则不久以后该存储单元<u>可能再次被访问</u>。</li>
</ul>
<p>产生时间局限性的典型原因是<u>在程序中存在着大量的循环操作</u>。</p>
</li>
<li>
<p><strong>空间局限性</strong>：指一旦<u>程序访问了某个存储单元</u>，则在不久的将来，<u>其附近的存储单元也最有可能被访问</u>。</p>
<p>即程序在一段时间内所访问的地址可能集中在一定的范围内，其典型原因为<u>程序是顺序执行的</u>。</p>
</li>
</ul>
<h2 id="分页存储管理" data-numberify>分页存储管理<a class="anchor ms-1" href="#分页存储管理"></a></h2>
<p>分页原理：</p>
<ul>
<li><strong>页</strong>：将一个进程的地址空间划分成若干个大小相等的区域，称为页。</li>
<li><strong>块</strong>（<strong>页框</strong>）：将主存空间划分成与页相同大小的若干个物理块，称为块或页框。</li>
</ul>
<p>在为进程分配主存时，将进程中若干页分别装入多个不相邻接的块中。</p>
<p>地址结构：</p>
<p><picture><img class="img-fluid " alt="分页地址结构" src="/docs/ruan-she/operating-system/uTools_1683184749140.png" loading="lazy" width="496" height="55" />
</picture>

</p>
<p>其中，页内地址是同一页（页号）中的偏移量。</p>
<p>分页的过程是由操作系统完成的，对用户是透明的，所以用户不必关心分页的过程，其优点是能有效地提高主存利用率，其缺点是不易实现共享。</p>
<h2 id="分段存储管理" data-numberify>分段存储管理<a class="anchor ms-1" href="#分段存储管理"></a></h2>
<p>在分段存储管理方式中，作业的地址空间被划分为若干个段。每个段是一组完整的逻辑信息，例如有主程序段、子程序段、数据段及堆栈段等。每个段都有自己的名字，都是从0开始编址的一段连续的地址空间，各段的长度是不等的。</p>
<p>分段系统的地址结构如：</p>
<p><picture><img class="img-fluid " alt="分段的地址结构" src="/docs/ruan-she/operating-system/uTools_1683184796335.png" loading="lazy" width="504" height="61" />
</picture>

</p>
<p>段是信息的逻辑单位，其优点是易于实现段的共享，即允许若干个进程共享一个或多个段，而且对段的保护也十分简单。</p>
<h2 id="段页式存储管理" data-numberify>段页式存储管理<a class="anchor ms-1" href="#段页式存储管理"></a></h2>
<p>结合分页和分段存储管理方式，形成一种新的存储管理方式，即段页式存储管理。段页式系统有两种系统的优点。</p>
<p>段页式系统的基本原理是：</p>
<ol>
<li>将整个主存划分成大小相等的存储块（页框）。</li>
<li>将用户程序按程序的逻辑关系分为若干个段，并为每个段赋予一个段名。</li>
<li>将每个段划分成若干页，以页框为单位离散分配。</li>
</ol>
<p>段页式地址空间的结构：</p>
<p><picture><img class="img-fluid " alt="段页式的地址结构" src="/docs/ruan-she/operating-system/uTools_1683185435872.png" loading="lazy" width="507" height="59" />
</picture>

</p>
<hr>
<h1 id="设备管理" data-numberify>设备管理<a class="anchor ms-1" href="#设备管理"></a></h1>
<h2 id="缓冲技术" data-numberify>缓冲技术<a class="anchor ms-1" href="#缓冲技术"></a></h2>
<p>缓冲技术可提高外设利用率，尽可能使外设处于忙状态。缓冲技术可以采用两种方式：</p>
<ul>
<li>硬件缓冲：利用专门的硬件寄存器作为缓冲；</li>
<li>软件缓冲：通过操作系统来管理的。</li>
</ul>
<h3 id="单缓冲" data-numberify>单缓冲<a class="anchor ms-1" href="#单缓冲"></a></h3>
<p>单缓冲工作过程图：</p>
<p><picture><img class="img-fluid " alt="单缓冲工作过程图" src="/docs/ruan-she/operating-system/uTools_1683187166221.png" loading="lazy" width="601" height="138" />
</picture>

</p>
<p>当第1块数据送入用户工作区后（进行数据处理），缓冲区是空闲的，可以传送第2块数据（输入）。即第1块数据的处理$C_1$与第2块数据的输入$T_2$是可以并行的，以此类推：</p>
<p><picture><img class="img-fluid " alt="单缓冲并行工作示意图" src="/docs/ruan-she/operating-system/uTools_1683189558038.png" loading="lazy" width="1251" height="272" />
</picture>

</p>
<p>若$T$为输入的时间，$M$为传输的时间，$C$为处理的时间系统对每一块数据的处理时间为：$Max(C, T) + M$：</p>
<ul>
<li>$T &gt; C$：处理时间为$M + T$；</li>
<li>$T &lt; C$：处理时间为$M + C$。</li>
</ul>
<p>$n$个作业的单缓冲所花费的时间为：</p>
<p>$$
(Max(C, T) + M) \times n + Min(C, T)
$$</p>
<h3 id="双缓冲" data-numberify>双缓冲<a class="anchor ms-1" href="#双缓冲"></a></h3>
<p>双缓冲进一步加快了I/O的速度，提高了设备的利用率。其工作基本过程是在设备输入时，先将数据输入到缓冲区1，装满后便转向缓冲区2。</p>
<p>双缓冲工作过程图：</p>
<p><picture><img class="img-fluid " alt="双缓冲工作过程图" src="/docs/ruan-she/operating-system/uTools_1683187304566.png" loading="lazy" width="586" height="141" />
</picture>

</p>
<p>双缓冲的工作特点是，可以实现对缓冲中数据的输入$T$和提取$M$，与CPU的计算$C$，三者并行工作：</p>
<p><picture><img class="img-fluid " alt="双缓冲并行工作示意图" src="/docs/ruan-she/operating-system/uTools_1683189296831.png" loading="lazy" width="1147" height="257" />
</picture>

</p>
<p>在双缓冲时，系统处理一块数据的时间可以粗略地认为是$Max(C, T)$：</p>
<ul>
<li>$C &lt; T$：可使块设备连续输入；</li>
<li>$C &gt; T$：可使系统不必等待设备输入。</li>
</ul>
<p>$n$个作业的双缓冲所花费的时间为：</p>
<p>$$
Max(T, M, C) \times n + T + M + C - Max(T, M, C)
$$</p>
<p>即，</p>
<p>$$
Max(T, M, C) \times (n - 1) + T + M + C
$$</p>
<h2 id="磁盘调度算法" data-numberify>磁盘调度算法<a class="anchor ms-1" href="#磁盘调度算法"></a></h2>
<ul>
<li>
<p><strong>先来先服务</strong>（First-Come First-Served，FCFS）：根据进程请求访问磁盘的先后次序进行调度。</p>
<ul>
<li>优点：公平、简单，且每个进程的请求都能依次得到处理，不会出现某进程的请求长期得不到满足的情况。</li>
<li>缺点：此算法由于未对寻道进行优化，致使平均寻道时间可能较长。</li>
</ul>
</li>
<li>
<p><strong>最短寻道时间优先</strong>（Shortest Seek Time First，SSTF，最短移臂算法）：该算法选择这样的进程，其要求访问的磁道与当前磁头所在的磁道距离最近，使得每次的寻道时间最短。</p>
<ul>
<li>优点：可能会出现饥饿现象。</li>
<li>缺点：不能保证平均寻道时间最短。</li>
</ul>
</li>
<li>
<p><strong>扫描算法</strong>（SCAN，电梯调度算法）：总是从磁头当前位置开始，沿磁头的移动方向去选择离当前磁头最近的那个柱面的请求。如果沿磁头的方向无请求访问时，就改变磁头的移动方向。</p>
<p>在这种调度方法下磁头的移动类似于电梯的调度，所以它也称为电梯调度算法。</p>
<ul>
<li>优点：避免了饥饿现象的出现。</li>
<li>缺点：当磁头刚从里向外移动过某一磁道时，恰有一进程请求访问此磁道，这时该进程必须等待，待磁头从里向外，再从外向里扫描完所有要访问的磁道后才处理该进程的请求，致使该进程的请求被严重地推迟。</li>
</ul>
</li>
<li>
<p><strong>单向扫描算法</strong>（CSCAN，循环扫描算法）：为了减少上述SCAN缺点中存在的这种延迟，算法规定磁头只做单向移动。</p>
<p>例如，只是自里向外移动，从当前位置开始沿磁头的移动方向去选择离当前磁头最近的那个柱面访问，如果沿磁头的方向无请求访问时，磁头立即返回到最里面的欲访问的柱面，再亦即将最小柱面号紧接着最大柱面号构成循环，进行循环扫描。</p>
</li>
</ul>
<h2 id="旋转调度算法" data-numberify>旋转调度算法<a class="anchor ms-1" href="#旋转调度算法"></a></h2>
<p>旋转调度要考虑的问题是，当移动臂定位后，有多个进程等待访问该柱面时，应当如何决定这些进程的访问顺序。显然，系统应该选择延迟时间最短的进程对磁盘的扇区进行访问。</p>
<p>当有若干等待进程请求访问磁盘上的信息时，旋转调度应考虑如下情况：</p>
<ol>
<li>进程请求访问的是同一磁道上不同编号的扇区。</li>
<li>进程请求访问的是不同磁道上不同编号的扇区。</li>
<li>进程请求访问的是不同磁道上具有相同编号的扇区。</li>
</ol>
<p>对于情况1和2，旋转调度总是让首先到达读/写磁头位置下的扇区先进行传送操作：对于情况3，旋转调度可以任选一个读/写磁头位置下的扇区进行传送操作。</p>
<p>例如：</p>
<p>假设磁盘旋转速度为20ms/圈，每读一个记录后处理需要4ms。若格式化时每个磁道被分为10个扇区，有10个逻辑记录存放在同一磁道上，其排序顺序如下图所示：</p>
<p><picture><img class="img-fluid " alt="旋转调度算法例题排序表" src="/docs/ruan-she/operating-system/uTools_1683254658689.png" loading="lazy" width="799" height="84" />
</picture>

</p>
<p>初始时读写头停在记录A处，程序顺序处理这些记录（A～J）。</p>
<p>顺序处理完这些记录的总时间：</p>
<p><picture><img class="img-fluid " alt="初始逻辑记录分布情况" src="/docs/ruan-she/operating-system/uTools_1683268410250.png" loading="lazy" width="322" height="311" />
</picture>

</p>
<ol>
<li>
<p>经过一个扇区的时间 $= 20ms /10 = 2ms$。</p>
</li>
<li>
<p>处理完A，磁盘转到读写头指向B开始处时，这个过程的时间为$2ms + 20ms = 22ms$。</p>
<p>因为磁盘是一直在旋转的，而读取A扇区（2ms）后，处理A扇区花费4ms。此时磁盘可以再经过两个扇区，来到记录D的开始处。</p>
<p>为了顺序处理记录，磁盘需要再旋转8个扇区回到B开始处。相当于处理完A后磁盘需要再旋转一圈以开始读取B。这样一个过程所耗费的时间即为$2ms + 20ms = 22ms$。</p>
</li>
<li>
<p>顺序处理完所有记录的总时间 $= 9 \times (2ms + 20ms) + 2ms + 4ms = 204ms$。</p>
<p>前9个记录（A～J）的一个过程所耗费的时间是一样的（$ 9 \times (2ms + 20ms)$）。</p>
<p>当处理完记录I并旋转到J开始处时，只需要读取J（2ms）并且处理完（4ms）即可。这个过程的时间应为（$2ms + 4ms$）。</p>
</li>
</ol>
<p>记录优化分布方案：</p>
<p>让下一个要读取的记录，刚好在上一个记录处理完成后读写头所停的扇区。</p>
<p><picture><img class="img-fluid " alt="优化后记录的分布情况" src="/docs/ruan-she/operating-system/uTools_1683268275593.png" loading="lazy" width="370" height="358" />
</picture>

</p>
<p>优化后的总时间 $= 10 \times (2ms + 4ms) = 60ms$。</p>
<p>设$n$个扇区的磁盘，经过一个扇区的时间为$t$，读取一个记录后处理的时间为$c$，那么：</p>
<ul>
<li>
<p>顺序处理完所有记录的总时间为：</p>
<p>$$
(t + nt) (n-1) + t + c
$$</p>
<p>即：</p>
<p>$$
t \times n^2 + c
$$</p>
</li>
<li>
<p>记录优化后的总时间：</p>
<p>$$
n(t + c)
$$</p>
</li>
</ul>
<hr>
<h1 id="文件管理" data-numberify>文件管理<a class="anchor ms-1" href="#文件管理"></a></h1>
<h2 id="多级索引结构" data-numberify>多级索引结构<a class="anchor ms-1" href="#多级索引结构"></a></h2>
<p>磁盘索引是指在索引表中记录磁盘的地址项，地址项直接或间接地记录了磁盘数据块的地址。</p>
<p>磁盘索引有以下几种结构：</p>
<ul>
<li>
<p><strong>直接索引</strong>：索引表中的地址项直接指向磁盘数据块。</p>
<p><picture><img class="img-fluid " alt="直接索引" src="/docs/ruan-she/operating-system/uTools_1683271855209.png" loading="lazy" width="670" height="659" />
</picture>

</p>
</li>
<li>
<p><strong>一级间接地址索引</strong>：索引表中的地址项指向一个磁盘索引块。这个索引块中的记录是地址项，这些地址项直接指向磁盘数据块。</p>
<p>称这个磁盘索引块为<strong>一级索引块</strong>。</p>
<p><picture><img class="img-fluid " alt="一级间接地址索引" src="/docs/ruan-she/operating-system/uTools_1683274982800.png" loading="lazy" width="904" height="737" />
</picture>

</p>
</li>
<li>
<p><strong>二级间接地址索引</strong>：索引表中的地址项指向一个磁盘索引块。这个索引块中的一个记录指向一个一级索引块。</p>
<p>称这个记录指向一级索引块的磁盘索引块为<strong>二级索引块</strong>。</p>
<p><picture><img class="img-fluid " alt="二级间接地址索引" src="/docs/ruan-she/operating-system/uTools_1683275164015.png" loading="lazy" width="1121" height="784" />
</picture>

</p>
</li>
</ul>
<h2 id="文件目录" data-numberify>文件目录<a class="anchor ms-1" href="#文件目录"></a></h2>
<ul>
<li>
<p><strong>文件控制块</strong>（FCB）：用于文件的描述和控制的数据结构，实现了文件的“按名存取”。</p>
<p>文件控制块至少要包括文件名和存放文件的物理地址。</p>
<p>文件控制块也称为<strong>文件的说明</strong>或<strong>文件目录项</strong>（简称<strong>目录项</strong>）。</p>
</li>
<li>
<p><strong>文件目录</strong>：文件控制块的有序集合。</p>
<p>即文件目录是由文件控制块组成的，专门用于文件的检索。</p>
</li>
</ul>
<h3 id="文件控制块" data-numberify>文件控制块<a class="anchor ms-1" href="#文件控制块"></a></h3>
<p>文件控制块中包含以下信息：</p>
<ul>
<li>
<p>基本信息类：例如文件名、文件的物理地址、文件长度和文件块数等。</p>
</li>
<li>
<p>存取控制信息类：文件的存取权限。</p>
<p>UNIX中，用户分成三类：</p>
<ul>
<li>文件主用户</li>
<li>同组用户</li>
<li>一般用户</li>
</ul>
<p>以上三类用户对文件的权限为：</p>
<ul>
<li>读</li>
<li>写</li>
<li>执行</li>
</ul>
</li>
<li>
<p>使用信息类：文件建立日期、最后一次修改日期、最后一次访问的日期、当前使用的
信息（如打开文件的进程数、在文件上的等待队列）等。</p>
</li>
</ul>
<h3 id="目录结构" data-numberify>目录结构<a class="anchor ms-1" href="#目录结构"></a></h3>
<p>组织好文件的目录是设计文件系统的重要环节，文件目录结构的组织方式直接影响到文件的存取速度，关系到文件的共享性和安全性。</p>
<p>常见的目录结构有：</p>
<ul>
<li>
<p><strong>一级目录结构</strong>：一级目录的整个目录组织是一个<u>线性结构</u>，在整个系统中<u>只需建立一张目录表</u>，系统为每个文件分配一个目录项。</p>
<p>优点：结构简单；</p>
<p>缺点：查找速度慢，不允许重名和不便于实现文件共享等。</p>
<p>主要用在单用户环境中。</p>
</li>
<li>
<p><strong>二级目录结构</strong>：为了克服一级目录结构存在的缺点引入了二级目录结构。</p>
<p>二级目录结构的组成为：</p>
<ul>
<li><strong>主文件目录</strong>（Master File Directory，MFD）：每个用户文件目录都占有一个目录项，其目录项中包括用户名和指向该用户目录文件的指针；</li>
<li><strong>用户目录</strong>（User File Directory，UFD）：由用户所有文件的目录项组成的。</li>
</ul>
<p>优点：提高了检索目录的速度，较好地解决了重名问题。</p>
<p>缺点：该结构虽然能有效地将多个用户隔离开（这种隔离在各个用户之间完全无关时是一个优点），但当多个用户之间要相互合作去共同完成一个大任务，且一个用户又需要去访问其他用户的文件时，这种隔离便成为一个缺点，因为这种隔离使诸用户之间不便于共享文件。</p>
</li>
<li>
<p><strong>多级目录结构</strong>：在多道程序设计系统中常采用多级目录结构。</p>
<p>多级目录结构是树型目录结构。从根结点向下，每一个结点是一个目录，叶结点是文件。</p>
<p>在采用多级目录结构的文件系统中，用户要访问一个文件，必须指出文件所在的路径名：</p>
<ul>
<li>
<p><strong>路径名</strong>：从某个目录开始到该文件的通路上所有各级目录名拼起来得到的。</p>
<p>在各目录名之间、目录名与文件名之间需要用分隔符隔开。</p>
</li>
<li>
<p><strong>绝对路径名</strong>（Absolute Path Name）：指从根目录开始的完整路径。</p>
<p><strong>全文件名</strong>：指绝对路径名加上该文件的文件名。</p>
</li>
<li>
<p><strong>相对路径名</strong>：从当前所在目录开始到其他目录或文件的路径。</p>
</li>
</ul>
</li>
</ul>
<h2 id="位示图" data-numberify>位示图<a class="anchor ms-1" href="#位示图"></a></h2>
<p>位示图（Bitmap）是一种空闲空间管理方法。通过在外存上建立一张位示图，记录文件存储器的使用情况。</p>
<p>位示图用二进制的一位来表示一个物理块的使用情况：</p>
<ul>
<li><code>0</code>：表示空闲；</li>
<li><code>1</code>：表示占用。</li>
</ul>
<p>例如：</p>
<p><picture><img class="img-fluid " alt="位示图示例" src="/docs/ruan-she/operating-system/uTools_1683253664111.png" loading="lazy" width="569" height="256" />
</picture>

</p>
<p>位示图的大小由磁盘空间的大小（物理块总数）决定。</p>
<p>位示图的描述能力强，适合各种物理结构。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据结构篇</title>
      <link>/docs/ruan-she/data-structure/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/ruan-she/data-structure/</guid>
      <description><![CDATA[复杂度 算法时间复杂度以算法中基本操附重复执行的次数（简称为频度）作为算法的时间度量。一般不必要精确计算出算法的时间复杂度，只要大致计算出相应]]></description>
      <content:encoded><![CDATA[<h1 id="复杂度" data-numberify>复杂度<a class="anchor ms-1" href="#复杂度"></a></h1>
<p>算法时间复杂度以算法中基本操附重复执行的次数（简称为频度）作为算法的时间度量。一般不必要精确计算出算法的时间复杂度，只要大致计算出相应的数量级即可，使用大$O$表示法表示（空间复杂度也是）。</p>
<ul>
<li>加法规则：多项相加，保留最高阶项，并将系数化为1；</li>
<li>乘法规则：多项相乘都保留，并将系数化为1。</li>
</ul>
<p><picture><img class="img-fluid " alt="算法复杂度大小比较" src="/docs/ruan-she/data-structure/1681099842666.png" loading="lazy" width="1014" height="100" />
</picture>

</p>
<p>递归式的时间（空间）复杂度：</p>
<p>$$
递归的次数 \times 每次递归的时间（空间）复杂度
$$</p>
<h1 id="逻辑结构分类" data-numberify>逻辑结构分类<a class="anchor ms-1" href="#逻辑结构分类"></a></h1>
<ul>
<li>线性结构
<ul>
<li>线性表（一般线性表）</li>
<li>特殊线性表
<ul>
<li>栈</li>
<li>队列</li>
<li>字符串</li>
</ul>
</li>
<li>线性表的推广
<ul>
<li>数组</li>
<li>广义表</li>
</ul>
</li>
</ul>
</li>
<li>非线性结构
<ul>
<li>树结构
<ul>
<li>二叉树</li>
<li>多叉树</li>
</ul>
</li>
<li>图结构
<ul>
<li>有向图</li>
<li>无向图</li>
</ul>
</li>
<li>集合结构</li>
</ul>
</li>
</ul>
<hr>
<h1 id="线性表" data-numberify>线性表<a class="anchor ms-1" href="#线性表"></a></h1>
<p><u>由 $n(n \geq 0)$ 个<strong>数据特性相同</strong>的元素构成的<strong>有限序列</strong>称为<strong>线性表</strong></u>。$n=0$ 时，称为空表。非空表的特点如下：</p>
<ul>
<li>存在唯一一个“第一个”元素。</li>
<li>存在唯一一个“最后一个”元素。</li>
<li>相邻元素之间存在序偶关系：
<ul>
<li>除第一个之外，结构中的每个数据元素均只有一个<strong>前驱</strong>；</li>
<li>除最后一个之外，结构中的每个数据元素均只有一个<strong>后继</strong>。</li>
</ul>
</li>
</ul>
<p>线性表的存储结构分为：</p>
<ul>
<li>顺序存储；</li>
<li>链式存储</li>
</ul>
<h2 id="顺序存储结构" data-numberify>顺序存储结构<a class="anchor ms-1" href="#顺序存储结构"></a></h2>
<p>线性表的<strong>顺序存储</strong>是指用一组<strong>地址连续的存储单元</strong>依次存储线性表中的数据元素，从而使得逻辑上相邻的两个元素在物理位置上也相邻。在这种存储方式下，元素间的逻辑关系无须占用额外的空间来存储。</p>
<p>其存储结构如图所示：</p>
<p><picture><img class="img-fluid " alt="顺序表存储结构" src="/docs/ruan-she/data-structure/uTools_1680610120418.png" loading="lazy" width="130" height="266" />
</picture>

</p>
<p>假设线性表的每个元素占用的存储空间为$L$，$LOC(a_i)$为第$i$个元素的存储位置（$0 \le i \le n-1$，$n$为线性表的长度）：</p>
<ul>
<li>
<p>第$i+1$个元素和第$i$个元素的存储位置满足：</p>
<p>$$
LOC(a_{i+1})=LOC(a_i)+L
$$</p>
</li>
<li>
<p>第$i$个元素的存储位置：</p>
<p>$$
LOC(a_i)=LOC(a_0) + i \times L
$$</p>
<p>如果下标从1开始：</p>
<p>$$
LOC(a_i)=LOC(a_1) + (i-1) \times L
$$</p>
</li>
</ul>
<p>顺序存储结构的线性表的特点：</p>
<ul>
<li>优点：<strong>可以随机存取表中的元素</strong>，不需要额外的存储空间来表达元素之间的逻辑关系；</li>
<li>缺点：<strong>插入和删除操作不方便、效率低、比较耗时</strong>（<strong>插入和删除操作需要移动元素</strong>），顺序表的长度是固定的。</li>
</ul>
<p>在表为$n$的线性表中，有$n+1$个插入位置（不考虑插入是否会导致溢出）：</p>
<ul>
<li>
<p>在第$i$个插入位置插入，需要移动$n+1-i$个元素。</p>
<ul>
<li>在第1个位置插入（$a_1$）需要移动$n$个元素；</li>
<li>在第$n+1$个位置插入（$a_n$后面）不需要移动元素。</li>
</ul>
</li>
<li>
<p>设在第$i$个插入位置插入的概率为$p_i$，<u>等概率下</u>（假如这$n+1$个插入位置插入的概率相同）<u>插入</u>一个新元素需要移动的元素个数的<u>期望值$E_{insert}$</u>为：</p>
<p>$$
E_{insert} = \sum_{i=1}^{n+1}{ \Big( p_i \times (n-i+1) \Big) } = \cfrac{1}{n+1} \sum_{i=1}^{n+1}{(n-i+1)} = \cfrac{n+1}{2}
$$</p>
<p>$$
p_i = \cfrac{1}{n+1}
$$</p>
<p>即，$E_{insert} = \cfrac{插入位置数-1}{2} = \cfrac{n+1}{2}$</p>
</li>
</ul>
<p>在表长为$n$的线性表中删除元素时，共有$n$个可删除的元素：</p>
<ul>
<li>
<p>删除第$i$个元素$a_i$需要移动$n-i$个元素。</p>
<ul>
<li>删除元素$a_1$需要移动$n-1$个元素；</li>
<li>删除元素$a_n$不需要移动元素。</li>
</ul>
</li>
<li>
<p>设$a_i$被删除的概率为$q_i$，<u>等概率下删除元素</u>时需要移动的元素个数的<u>期望值$E_{delete}$</u>为：</p>
<p>$$
E_{delete} = \sum_{i=1}^{n}{\Big( q_i \times (n-i) \Big)} = \cfrac{1}{n} \sum_{i=1}^{n}{(n-i)} = \cfrac{n-1}{2}
$$</p>
<p>$$
q_i = \cfrac{1}{n}
$$</p>
<p>即，$E_{delete} = \cfrac{删除位置数}{2} = \cfrac{n-1}{2}$</p>
</li>
</ul>
<p><strong>插入操作时间复杂度</strong>：</p>
<ul>
<li>最好情况（在第$n+1$个位置插入）：$O(1)$；</li>
<li>最坏情况（在第1个位置插入）：$O(n)$；</li>
<li>平均复杂度：$O(n)$。</li>
</ul>
<p><strong>查找元素时间复杂度</strong>（根据下标查找）：$O(1)$。</p>
<blockquote>
<p>累加求和公式：</p>
<p>$$
\sum_{i=0}^{n} i = \cfrac{n(1+n)}{2}
$$</p>
<p>即等差数列求和中的：</p>
<p>$$
S_n = \cfrac{n(a_1 + a_n)}{2}
$$</p>
</blockquote>
<h2 id="链式存储结构" data-numberify>链式存储结构<a class="anchor ms-1" href="#链式存储结构"></a></h2>
<p>线性表的<strong>链式存储</strong>是指<strong>通过指针链接起来</strong>的结点来存储数据元素。</p>
<p>其存储结构如下所示：</p>
<p><picture><img class="img-fluid " alt="链式表存储结构" src="/docs/ruan-she/data-structure/uTools_1680610469403.png" loading="lazy" width="403" height="49" />
</picture>

</p>
<ul>
<li>
<p><strong>数据域</strong>：用于存储数据元素的<strong>值</strong>；</p>
</li>
<li>
<p><strong>指针域</strong>：用于存储当前元素的直接前驱或直接后继的<strong>位置信息</strong>（直接前或后驱的<strong>指针</strong>，称其为指针或链）。</p>
<p>存储各数据元素的结点的<u>地址并不要求是连续的</u>，因此存储数据元素的同时必须存储元素之间的逻辑关系。</p>
</li>
</ul>
<p>链式表的特点：</p>
<ul>
<li><u>结点空间只有在需要的时候才申请</u>，无须事先分配；</li>
<li>长度不固定。</li>
</ul>
<p>链式表结点之间通过指针域构成一个链表，<u>若结点中只有一个指针域，则称为线性链表</u>。</p>
<p><picture><img class="img-fluid " alt="链式表存储结构" src="/docs/ruan-she/data-structure/uTools_1680610514354.png" loading="lazy" width="685" height="64" />
</picture>

</p>
<p>上图中的Head：一个指向链表第一个结点的针，称为头指针。使用它就可以顺序地访问到表中的任意一个元素。</p>
<p>插入和删除操作时间复杂度（带不带头节点的复杂度都一样）：</p>
<ul>
<li>最好情况（在$i=1$位置）：$O(1)$；</li>
<li>最坏情况（在$n+1$位置插入/删除$n$位置）：$O(n)$</li>
<li>平均复杂度：$O(n)$</li>
</ul>
<p>链表操作的时间复杂度取决于指针遍历。</p>
<hr>
<h1 id="栈" data-numberify>栈<a class="anchor ms-1" href="#栈"></a></h1>
<p>栈是一种<strong>后入先出</strong>（Last In First Out，LIFO）的线性表。<u>栈只能通过访问它的一端来实现数据存储和检索。</u></p>
<p>栈的基本操作有：</p>
<ul>
<li><strong>入栈</strong>：将元素置入栈顶；</li>
<li><strong>出栈</strong>：将元素从栈顶中取出。</li>
<li>读取栈顶元素</li>
</ul>
<p>栈的出栈顺序一定和入栈顺序<strong>相反</strong>。</p>
<h2 id="顺序存储结构-1" data-numberify>顺序存储结构<a class="anchor ms-1" href="#顺序存储结构-1"></a></h2>
<p>栈的顺序存储结构也称为<strong>顺序栈</strong>。</p>
<p>顺序栈使用一个栈顶指针标记栈顶元素的索引位置。每次出栈时都需要重置栈顶指针，将栈顶指针向下移动，标记到新的栈顶元素。</p>
<p>顺序栈的空间容量有限，所以每次入栈时都需要判断栈是否为满。</p>
<h2 id="链式存储结构-1" data-numberify>链式存储结构<a class="anchor ms-1" href="#链式存储结构-1"></a></h2>
<p>栈的链式存储结构称为<strong>链栈</strong>。链栈的头指针就是栈顶指针。</p>
<p><picture><img class="img-fluid " alt="链栈的存储结构" src="/docs/ruan-she/data-structure/uTools_1680676944766.png" loading="lazy" width="238" height="265" />
</picture>

</p>
<h2 id="栈的应用" data-numberify>栈的应用<a class="anchor ms-1" href="#栈的应用"></a></h2>
<p>栈的典型应用包括<strong>表达式求值、括号匹配</strong>等，在计算机语言的实现以及将递归过程转变为非递归过程的处理中，栈有重要的作用。</p>
<hr>
<h1 id="队列" data-numberify>队列<a class="anchor ms-1" href="#队列"></a></h1>
<p>队列是一种<strong>先入先出</strong>（First In First Out，FIFO）的线性表。</p>
<p><u>队列只允许在表的一端插入元素，在表的另一端删除元素。</u></p>
<ul>
<li><strong>队头</strong>（Front）：允许<strong>删除</strong>元素的一端；</li>
<li><strong>队尾</strong>（Rear）：允许<strong>插入</strong>元素的一端。</li>
</ul>
<p>队列的基本操作有：</p>
<ul>
<li><strong>入队</strong>：将元素加入到队尾；</li>
<li><strong>出队</strong>：将元素加入到对头。</li>
</ul>
<p>队列的入队顺序一定<strong>等于</strong>出队顺序。</p>
<blockquote>
<p>使用两个栈可以来模拟一个队列（从一个栈出栈后的元素入另一个栈后再出栈）。</p>
</blockquote>
<h2 id="顺序存储结构-2" data-numberify>顺序存储结构<a class="anchor ms-1" href="#顺序存储结构-2"></a></h2>
<p>队列的顺序存储结构称为<strong>顺序队列</strong>。</p>
<p>顺序队列设置两个指针：</p>
<ul>
<li>队头指针：指向对头元素的下标；</li>
<li>队尾指针：指向队尾元素的下标。</li>
</ul>
<p>如果顺序队列只按照数组下标大小顺序来设置指针（对头指针的值永不大于队尾指针），那么在经过一段时间的操作后，对头指针有可能指向的并不是数组的第一个元素，此时队列的长度永远都到达不了数组的长度（空间无法被充分利用，实际使用的长度和逻辑长度不符）。</p>
<p><picture><img class="img-fluid " alt="队列操作" src="/docs/ruan-she/data-structure/uTools_1680677900098.png" loading="lazy" width="959" height="323" />
</picture>

</p>
<p>为了解决这个问题，我们可以把数组想象为一个环型的结构（将最后一个元素和第一个元素连接起来，队头指针可以比队尾指针大）。如果此时队列的状态是上图中步骤$(e)$的状态，此时再插入元素，可以将元素放在数组索引0的位置，再让队尾指针始终保持在队列最后一个元素的索引之后即可。将这种队列称为<strong>循环队列</strong>，如：</p>
<p><picture><img class="img-fluid " alt="循环队列" src="/docs/ruan-she/data-structure/uTools_1680678225885.png" loading="lazy" width="907" height="202" />
</picture>

</p>
<h2 id="链式存储结构-2" data-numberify>链式存储结构<a class="anchor ms-1" href="#链式存储结构-2"></a></h2>
<p>队列的链式存储也称为<strong>链队列</strong>（<strong>链队</strong>）。这里为了便于操作，可以给链队列添加一个头结点，并令头指针指向头结点。因此，队列为空的判定条件是头指针和尾指针的值相同，且
均指向头结点。</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/data-structure/uTools_1680678441791.png" loading="lazy" width="278" height="340" />
</picture>

</p>
<h2 id="队列的应用" data-numberify>队列的应用<a class="anchor ms-1" href="#队列的应用"></a></h2>
<p>队列结构常用于处理需要排队的场合，例如操作系统中处理打印任务的打印队列、离散事件的计算机模拟等。</p>
<hr>
<h1 id="串" data-numberify>串<a class="anchor ms-1" href="#串"></a></h1>
<p><strong>串</strong>（<strong>字符串</strong>）是一种<strong>特殊的线性表</strong>，其<strong>数据元素为字符</strong>。</p>
<p>串具有自身的特性，运算时常常把一个串作为一个整体来处理。</p>
<p>串的基本概念和操作：</p>
<ul>
<li>
<p><strong>空串</strong>：长度为0的串；</p>
</li>
<li>
<p><strong>子串</strong>：由串中任意长度的连续字符构成的序列称为子串。含有子串的串称为主串。子串在主串中的位置是指子串首次出现时，该子串的第一个字符在主串中的位置。空串是任意串的子串。</p>
</li>
<li>
<p><strong>串相等</strong>：指两个串长度相等且对应序号的字符也相同。</p>
</li>
<li>
<p><strong>串比较</strong>：两个串比较大小时以字符的ASCⅡ码值（或其他字符编码集合）作为依据。</p>
<p>实质上，比较操作从两个串的第一个字符开始进行，字符的码值大者所在的串为大；若其中一个串先结束，则以串长较大者为大。</p>
</li>
<li>
<p>赋值：</p>
<ul>
<li>拷贝赋值：将一个串的值赋给另一个串；</li>
<li>引用（地址）赋值：将一个串的引用（地址）赋给另一个串。那么这个串可以使用另一个串中的值，但是对这个串所做的操作，也会作用到另一个串。</li>
</ul>
</li>
<li>
<p><strong>连接串</strong>：将一个串插入到另一个串尾。</p>
</li>
<li>
<p><strong>插入串</strong>：将一个串插入到另一个串的任意位置中。</p>
</li>
</ul>
<h2 id="顺序存储结构-3" data-numberify>顺序存储结构<a class="anchor ms-1" href="#顺序存储结构-3"></a></h2>
<p>串的顺序存储结构是一种定长的串（类似顺序表）。</p>
<h2 id="链式存储结构-3" data-numberify>链式存储结构<a class="anchor ms-1" href="#链式存储结构-3"></a></h2>
<p>串的链式存储结构可以方便地对串进行插入删除操作（类似链表）。</p>
<h2 id="串的模式匹配" data-numberify>串的模式匹配<a class="anchor ms-1" href="#串的模式匹配"></a></h2>
<p>子串的定位操作通常称为串的模式匹配。子串也称为模式串。</p>
<p>有关串模式匹配算法的详细讲解可以查看：<a href="../%e7%bb%8f%e5%85%b8%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%8c%b9%e9%85%8d">经典字符串匹配</a></p>
<h3 id="朴素的模式匹配算法" data-numberify>朴素的模式匹配算法<a class="anchor ms-1" href="#朴素的模式匹配算法"></a></h3>
<p>朴素的模式匹配算法也称为布鲁特一福斯算法（即暴力匹配算法），其基本思想是从主串的第一个字符起与模式串的第一个字符比较，若相等，则继续逐一对字符进行后续的比较，否则从主串第二个字符起与模式串的第一个字符重新比较，直到模式串中每个字符依次和主串中一个连续的字符序列相等时为止，此时称为匹配成功。如果不能在主串中找到与模式串相同的子串，则匹配失败。</p>
<p>设主串和模式串的长度分别为$n$和$m$，算法时间复杂度和比较次数：</p>
<ul>
<li>
<p>最好情况：$O(m)$，次数为$m$；</p>
</li>
<li>
<p>最坏情况：$O(n \times m)$，次数为$\cfrac{1}{2} m(n-m+2)$：</p>
<p>$$
\sum_{i=0}^{n-m}{p_i\big( (i+1) \times m \big)} = \cfrac{m}{n-m+1} \sum_{i=0}^{n-m}{(i+1)} = \cfrac{1}{2} m(n-m+2)
$$</p>
</li>
<li>
<p>平均：$O(n+m)$，次数为$\cfrac{1}{2} (n+m)$：</p>
<p>$$
\sum_{i=0}^{n-m}{p_i(i+m)} = \cfrac{1}{n-m+1} \sum_{i=0}^{n-m}{i+m} = \cfrac{1}{2} (n+m)
$$</p>
</li>
</ul>
<h3 id="kmp-算法" data-numberify>KMP 算法<a class="anchor ms-1" href="#kmp-算法"></a></h3>
<p>KMP算法又称为改进的模式匹配算法。</p>
<ul>
<li>串的<strong>前缀</strong>：包含第一个字符，且不包含最后一个字符的子串；</li>
<li>串的<strong>后缀</strong>：包含最后一个字符，且不包含第一个字符的子串。</li>
<li>前缀集合：包含串的所有前缀的集合；</li>
<li>后缀集合：包含串的所有后缀的集合。</li>
</ul>
<p>KMP的重点是求模式串字符的next值（失配指针$Next[\ i\ ]$），假设$a_{i-1}$为当前要求next值的模式串字符：</p>
<ul>
<li>
<p>前缀集合：</p>
<p>$$
Prefix=\{p_0,p_0p_1,\cdots,p_0&hellip;p_{i-1}\}
$$</p>
</li>
<li>
<p>后缀集合：</p>
<p>$$
Postfix=\{p_{i-1},p_{i-2}p_{i-1},\cdots,p_1&hellip;p_{i-1}\}
$$</p>
</li>
<li>
<p>失配指针：</p>
<p>$$
Next[i] =
\begin{cases}
-1 &amp; 当\ i=0 时 \\
max &amp; \{ k|0&lt;k&lt;i 且 &ldquo;p_0\cdots p_{k-1}&rdquo; = &ldquo;p_{i-k}\cdots p_{i-1}&rdquo; \} \\
0 &amp; 其他情况
\end{cases}
$$</p>
<p>即：</p>
<ul>
<li>$Next[0] = -1$；</li>
<li>$Next[i] = maxLen(Prefix \cap Postfix)$</li>
</ul>
<p>可以解释为：</p>
<p>$$
Next[\ i\ ] = 前i个子串的最长相同前后缀的长度
$$</p>
<p>特殊情况：$Next[\ 1\ ] = 0$，因为其前缀集合和后缀集合都为空。</p>
</li>
</ul>
<blockquote>
<p>失配表是用来指示匹配失败后指针该如何移动的。</p>
<p>失配表的建立跟要匹配的串没有任何关系，仅跟模式串有关。</p>
</blockquote>
<hr>
<h1 id="多维数组" data-numberify>多维数组<a class="anchor ms-1" href="#多维数组"></a></h1>
<p>多维数组是定长线性表在维数上的扩展，即线性表中的元素又是一个线性表。多维数组是一种“同构”的数据结构，其每个数据元素类型相同、结构一致。</p>
<ul>
<li>
<p>一维数组：即线性表。</p>
</li>
<li>
<p>二维数组（仅讨论顺序存储结构）：</p>
<p>二维数组的存储结构（如下图），可以分为以行为主序（下图左边）和以列为主序（下图右边）两种。</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/data-structure/uTools_1680693946560.png" loading="lazy" width="451" height="448" />
</picture>

</p>
<p>设：</p>
<ul>
<li>二维数组为$A[n,m]$，$n$为行数，$m$为列数；</li>
<li>数组元素$a_{i,j},\ 0 \le i \le n-1,\ 0 \le j \le m-1$；</li>
<li>$LOC(a_{i,j})$为元素$a_{i,j}$的地址；</li>
<li>$L$为单个元素的存储空间大小。</li>
</ul>
<p>则有：</p>
<ul>
<li>
<p>以行为主序优先存储：</p>
<p>$$
LOC(a_{i,j}) = LOC(a_{0,0}) + (i \times n + j) \times L
$$</p>
<p>如果下标从1开始（$1 \le i \le n,\ 1 \le j \le m$）：</p>
<p>$$
LOC(a_{i,j}) = LOC(a_{1,1}) + \big( (i-1) \times n + (j-1) \big) \times L
$$</p>
</li>
<li>
<p>以列为主序优先存储：</p>
<p>$$
LOC(a_{i,j}) = LOC(a_{0,0}) + (i + j \times m) \times L
$$</p>
<p>如果下标从1开始（$1 \le i \le n,\ 1 \le j \le m$）：</p>
<p>$$
LOC(a_{i,j}) = LOC(a_{1,1}) + \big( (i-1) + (j-1) \times m \big) \times L
$$</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>优先存储说法问题：</p>
<p>以行为主序优先存储的意思应该是在内存中按行存储。以列为主序优先存储的意思应该是在内存中按列存储。</p>
<p>假设一个二维数组为：</p>
<p>$$
\begin{vmatrix}
a_{11} &amp; a_{12} &amp; a_{13} &amp; a_{14} \\
a_{21} &amp; a_{22} &amp; a_{23} &amp; a_{24} \\
a_{31} &amp; a_{32} &amp; a_{33} &amp; a_{34} \\
a_{41} &amp; a_{42} &amp; a_{43} &amp; a_{44} \\
a_{51} &amp; a_{52} &amp; a_{53} &amp; a_{54}
\end{vmatrix}
$$</p>
<p>按照以行为主序优先存储的公式，它在内存中应该是分为了5个地址连续的数组来存储。即内存中，$[a_{11},a_{12},a_{13},a_{14}]$为一个数组，其后再接一个数组$[a_{12},a_{22},a_{23},a_{24}]$，以此类推，在内存中按照列的元素作为一个连续的一维数组单位，再按照第1行后接第2行作为整个连续的二维数组。它们在内存中的地址顺序是：</p>
<p>$$
a_{11},a_{12},&hellip;,a_{14},\\
a_{21},&hellip;,a_{24},\\
a_{31},&hellip;,a_{34},\\
a_{41},&hellip;,a_{44},\\
a_{51},&hellip;,a_{54}
$$</p>
<p>那么以列为主序优先存储的地址顺序就为：</p>
<p>$$
a_{11},a_{21},&hellip;,a_{51},\\
a_{12},&hellip;,a_{52},\\
a_{13},&hellip;,a_{53},\\
a_{14},&hellip;,a_{54}
$$</p>
</blockquote>
<p>一般矩阵都用二维数组来表示，但是对于一些特殊矩阵，如对称矩阵、三角矩阵和对角矩阵。它们的非0元素的分布存在一定规律，所以可以将其压缩存储在一维数组中，并且它们的多个值相同的元素（按照对应特殊矩阵定义上的值相同，并非简单的值相同）只分配一个存储单位。</p>
<h2 id="对称矩阵" data-numberify>对称矩阵<a class="anchor ms-1" href="#对称矩阵"></a></h2>
<p>若矩阵$A_{n \times n}$中的元素特点为$a_{ij}=a_{ji}\ (1 \le i,j \le n)$，则称之为$n$阶对称矩阵。</p>
<p>对称矩阵$A_{n \times n}$：</p>
<p>$$
\begin{vmatrix}
a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\
a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn}
\end{vmatrix}
$$</p>
<p>其中以对角线划分为三个区域：</p>
<ul>
<li>
<p><strong>主对角线</strong>：$a{11},a_{22},\cdots,a_{nn}$，共有$n$个元素；</p>
</li>
<li>
<p><strong>上三角区</strong>：对角线以上的所有元素，即：</p>
<p>$$
\begin{vmatrix}
0 &amp; a_{12} &amp; a_{13} &amp; \cdots &amp; a_{1n} \\
0 &amp; 0 &amp; a_{23} &amp; \cdots &amp; a_{2n} \\
\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
0 &amp; 0 &amp; 0 &amp; \cdots &amp; a_{(n-1)n} \\
0 &amp; 0 &amp; 0 &amp; \cdots &amp; 0
\end{vmatrix}
$$</p>
</li>
<li>
<p><strong>下三角区</strong>：对角线以下的所有元素，和上三角区的个数相等并且重复。</p>
</li>
</ul>
<p>可以将对称矩阵中，$n^2$个元素压缩存储到$\cfrac{n(n+1)}{2}$个元素的存储空间中。一般是存储下三角区和对角线。</p>
<p>假设将$n$阶对称矩阵$A_{n \times n}$压缩存储到一维数组$B\left[ \cfrac{n(n+1)}{2} \right]$，则$B[k]\ (1 \le k \le \cfrac{n(n+1)}{2})$与矩阵元素$a_{ij}(a_{ji})\ (1 \le i,j \le n)$之间存在一一对应关系（以行为主序）：</p>
<p>$$
k =
\begin{cases}
\cfrac{i(i-1)}{2} + j, &amp; 当\ i \ge j \\
\cfrac{j(j-1)}{2} + i, &amp; 当\ i &lt; j
\end{cases}
$$</p>
<p>如果下标从0开始（第一个元素为$a_{00}$，$0 \le k \le \cfrac{n(n+1)}{2} - 1$，并且$0 \le i,j \le n-1$）：</p>
<p>$$
k =
\begin{cases}
\cfrac{i(i+1)}{2} + j + 1, &amp; 当\ i \ge j \\
\cfrac{j(j+1)}{2} + i + 1, &amp; 当\ i &lt; j
\end{cases}
$$</p>
<blockquote>
<p>为什么$length(B) = \cfrac{n(n+1)}{2}$（压缩存储的一维数组大小）：</p>
<p>主对角线的元素的大小为$n$，下三角区的对角线大小分别为$n-1,n-2,&hellip;,1$。即：
$$
length(B) = \sum_{i=1}^{n}{i} = \cfrac{n(n+1)}{2}
$$</p>
</blockquote>
<blockquote>
<p>PS：《软件设计师教程（第五版）》中一维数组的下标$k$的取值范围错了：</p>
<p><picture><img class="img-fluid " alt="对称矩阵" src="/docs/ruan-she/data-structure/1680698007514.png" loading="lazy" width="999" height="344" />
</picture>


很明显不是$\left[ 1, \cfrac{n(n+1)}{2} \right)$，而应该是$\left[ 1, \cfrac{n(n+1)}{2} \right]$。</p>
</blockquote>
<h2 id="三对角矩阵" data-numberify>三对角矩阵<a class="anchor ms-1" href="#三对角矩阵"></a></h2>
<p>对角矩阵是指矩阵中的<u>非0元素都集中在以主对角线为中心的带状区域中</u>，即除了主对角线上和直接在对角线上、下方若干条对角线上的元素外，其余的矩阵元素都为0。三对角矩阵是对角矩阵中的一种，包括主对角线和在主对角线上、下方的各一条对角为非0元素：</p>
<p>$$
\begin{vmatrix}
a_{11} &amp; a_{12} &amp; 0      &amp; \cdots &amp; 0              &amp; 0          \\
a_{21} &amp; a_{22} &amp; a_{23} &amp; \cdots &amp; 0              &amp; 0          \\
0      &amp; a_{32} &amp; a_{33} &amp; \cdots &amp; 0              &amp; 0          \\
0      &amp; 0      &amp; a_{43} &amp; \cdots &amp; 0              &amp; 0          \\
\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots         &amp; \vdots     \\
0      &amp; 0      &amp; 0      &amp; \cdots &amp; a_{(n-1)(n-1)} &amp; a_{(n-1)n} \\
0      &amp; 0      &amp; 0      &amp; \cdots &amp; a_{n(n-1)}     &amp; a_{nn}
\end{vmatrix}
$$</p>
<p>设有$n$阶三对角矩阵$A_{n \times n}$，将其非0元素$a_{ij}(a_{ji})\ (1 \le i,j \le n)$存储在一维数组$B[k](1 \le k \le 3 \times n - 2)$中，则元素位置之间的对应关系为：</p>
<p>$$
k = 3 \times (i-1) - 1 + j - i + 1 + 1 = 2i + j -2
$$</p>
<p>如果下标从0开始（$0 \le k \le 3(n-1)$，并且$0 \le i,j \le n-1$）：</p>
<p>$$
k = 3 \times i - 1 + j - i + 1 + 1 = 2i + j + 1
$$</p>
<h2 id="稀疏矩阵" data-numberify>稀疏矩阵<a class="anchor ms-1" href="#稀疏矩阵"></a></h2>
<p>在一个矩阵中，若<u>非0元素的个数远远少于0元素的个数，且非0元素的分布<strong>没有规律</strong></u>，则称之为稀疏矩阵。</p>
<p>对于稀疏矩阵，存储非0元素时<strong>必须同时存储其位置</strong>（即行号和列号），用<u>三元组$(i,j,a_{ij})$可唯一确定矩阵$A$中的一个元素</u>。</p>
<p>可以用三元组表来存储这些三元组。稀疏矩阵的三元组表的顺序存储结构称为<strong>三元组顺序表</strong>，常用的三元组表的链式存储结构是<strong>十字链表</strong>。</p>
<hr>
<h1 id="树" data-numberify>树<a class="anchor ms-1" href="#树"></a></h1>
<p><strong>树</strong>结构是一种<strong>非线性结构</strong>，该结构中的一个数据元素可以有<strong>两个或两个以上的直接后继</strong>元素。</p>
<p><strong>树</strong>（Tree）是 $n(n\ge0)$ 个结点的有限集。</p>
<ul>
<li><strong>空树</strong>：$n=0$；</li>
<li><strong>非空树</strong>：$n&gt;0$，
<ul>
<li>有且仅有一个<strong>根结点</strong>，</li>
<li>除根节点外的其余结点可分为 $m(m&gt;0)$ 个互不相交的集合，即<strong>子树</strong>（SubTree）$T_1,T_2,\cdots,T_m$。</li>
</ul>
</li>
</ul>
<p>树的定义是<strong>递归</strong>的：</p>
<ul>
<li>一棵树由若干棵子树构成；</li>
<li>子树又由更小的子树构成。</li>
</ul>
<h2 id="基本概念" data-numberify>基本概念<a class="anchor ms-1" href="#基本概念"></a></h2>
<h3 id="术语" data-numberify>术语<a class="anchor ms-1" href="#术语"></a></h3>
<ul>
<li><strong>度</strong>：结点拥有的子树数。整个树的度是树内各结点度的最大值。</li>
<li><strong>叶结点</strong>：度为 0 的结点，也称<strong>终端结点</strong>。</li>
<li><strong>非终端结点</strong>：度不为 0 的结点，也称<strong>分支结点</strong>。</li>
<li><strong>内部结点</strong>：除根节点外的非终端结点。</li>
<li><strong>子节点</strong>：结点<u>子树的根结点</u>。</li>
<li><strong>父结点</strong>：与子结点相连的上一层的唯一一个结点。</li>
<li><strong>兄弟结点</strong>：同一个父节点的子节点之间互为兄弟。</li>
<li><strong>祖先结点</strong>：从根结点到该结点所经分支上的所有结点（包括其父节点，但不包括其本身）。</li>
<li><strong>子孙结点</strong>：以某结点为根的子树中的所有结点。</li>
<li><strong>堂兄弟结点</strong>：父节点在同一层（但不是同一个）的结点互为堂兄弟。</li>
<li><strong>层次</strong>：以根结点为第一层，根的子节点为第二层 …… 树中任意结点的层次等于其父节点的层次加 1。</li>
<li><strong>树的高度</strong>：树中结点的最大层次，也称<strong>树的深度</strong>。</li>
<li><strong>森林</strong>：是 $m(m\ge0)$ 棵互不相交的树的集合。树中每个结点的子树的集合即为森林。</li>
</ul>
<h3 id="树的类型" data-numberify>树的类型<a class="anchor ms-1" href="#树的类型"></a></h3>
<ul>
<li><strong>有序树</strong>：树中结点的各子树从左到右是有次序的，即不能互换。</li>
<li><strong>无序树</strong>：树中结点的各子树相互之间可以互换，没有次序。</li>
</ul>
<h3 id="树的性质" data-numberify>树的性质<a class="anchor ms-1" href="#树的性质"></a></h3>
<ul>
<li>
<p>设$n$个结点的树，$d_i \ (1 \le i \le n)$为该树中结点的度：</p>
<p>$$
n = (\sum_{i=1}^{n}{d_i})+1
$$</p>
</li>
<li>
<p>度为$m$的树中第$i$层上至多有$m^{i-1}$个结点（$i \ge 1$）。</p>
</li>
<li>
<p>高度为$h$的$m$度树至多有$\cfrac{m^h-1}{m-1}$个结点。</p>
</li>
</ul>
<h2 id="树的逻辑结构" data-numberify>树的逻辑结构<a class="anchor ms-1" href="#树的逻辑结构"></a></h2>
<p>树可以用二元组 $Tree=(root,F)$ 表示。其中 $root$ 是根结点，$F$ 是 $m(m\ge0)$ 棵子树的森林，即 $F=(T_1,T_2,\cdots,T_m)$，其中 $T_i=(r_i,F_i)$ 为根 $root$ 的第 $i$ 棵子树。</p>
<p>树根与其子树森林之间的关系：
$$
RF = \{ &lt;root,r_i&gt;|i=1,2,4,m,\quad m&gt;0 \}
$$</p>
<hr>
<h1 id="二叉树" data-numberify>二叉树<a class="anchor ms-1" href="#二叉树"></a></h1>
<p>二叉树是（$n \ge 0$）个结点的有限集合：</p>
<ul>
<li>空树：$n=0$；</li>
<li>由一个根结点及两棵不相交的且分别称为左、右子树的二叉树所组成（两个子数顺序不可交换）。</li>
</ul>
<p>二叉树同样具有递归性质。</p>
<p>二叉树的性质：</p>
<ul>
<li>
<p>第$i$层（$i \ge 1$）上<u>最多</u>有$2^{i-1}$个结点。</p>
<p>因为二叉树每个结点至多有两个分支（结点）。</p>
</li>
<li>
<p>高度为$k$的二叉树最多有$2^k-1$个结点（$k \ge 1$）。</p>
<p>每层结点都取最大值后累加：</p>
<p>$$
\sum_{i=1}^{k}{2^{i-1}} = 2^k - 1
$$</p>
<p>将深度为$k$且有$2^k-1$个结点的二叉树称为<strong>满二叉树</strong>。</p>
<p>对满二叉树自上而下、从左至右进行编号（即层序遍历的顺序）。一个深度为$k$、有$n$个结点的二叉树，当且仅当其每一个结点都于深度为$k$的满二叉树中编号从1至$n$的结点一一对应时，称之为<strong>完全二叉树</strong>。</p>
<blockquote>
<p>完全二叉树有一个隐藏关系：$n &gt; 2^{k-1}-1$。即深度为$k$的完全二叉树，其结点数$n$必须要比深度为$k-1$的满二叉树至少多1个结点。</p>
</blockquote>
<blockquote>
<p>深度为$k$的满二叉树结点数$n$和其第$k$层结点数$m$的关系：</p>
<p>$$
n = 2m-1
$$</p>
</blockquote>
</li>
<li>
<p>任何一棵二叉树，若其终端结点数（度为0的结点数）为$n_0$，度2的结点数为$n_2$，则$n_0=n_2+1$。</p>
<p>即：</p>
<p>$$
终端结点数（度0结点数）=度2结点数+1
$$</p>
</li>
<li>
<p>具有$n$个结点的完全二叉树的深度（高度）为：</p>
<p>$$
\lfloor \log_2{n} \rfloor + 1;
$$</p>
<p>或：</p>
<p>$$
\lceil \log_2{(n+1)} \rceil
$$</p>
</li>
</ul>
<p>二叉树形态总数（卡特兰数）：</p>
<p>$$
\cfrac{C^{n}_{2n}}{n+1}
$$</p>
<blockquote>
<p>排列组合公式：</p>
<p>$$
A^n_m = m \times (m-1) \times \cdots \times (m-n+1)
$$</p>
<p>$m$是起点，$n$是次数。</p>
<p>$$
C^n_m = \cfrac{A^n_m}{A^n_n}
$$</p>
</blockquote>
<h2 id="顺序存储结构-4" data-numberify>顺序存储结构<a class="anchor ms-1" href="#顺序存储结构-4"></a></h2>
<p>用一组地址连续的存储单元存储二叉树中的结点。</p>
<p>可以按照为完全二叉树编号的顺序（即层序遍历的顺序），将二叉树映射到顺序表中：</p>
<p>若编号为$i$的结点（$i \ge 1$），则：</p>
<ul>
<li>$i=1$：根结点，没有双亲（父结点）；</li>
<li>$i&gt;1$：双亲为$\left\lfloor \cfrac{i}{2} \right\rfloor$；</li>
<li>$i \le \cfrac{n}{2}$：左孩子编号为$2i$；</li>
<li>$i \le \cfrac{n-1}{2}$：右孩子编号为$2i+1$。</li>
</ul>
<p>完全二叉树适合采用顺序存储结构，而一般二叉树则不适合。</p>
<h2 id="链式存储结构-4" data-numberify>链式存储结构<a class="anchor ms-1" href="#链式存储结构-4"></a></h2>
<p>可以用<strong>三叉链表或二叉链表</strong>来存储二叉树（一个结点含有3个或2个指针，其中必须有两个指针来分别存储左子树和右子树的根结点）。链表的头指针指向二叉树根结点：</p>
<p><picture><img class="img-fluid " alt="二叉树的链表存储结构" src="/docs/ruan-she/data-structure/uTools_1680770614240.png" loading="lazy" width="980" height="337" />
</picture>

</p>
<blockquote>
<p>三叉链表仅仅是多了一个指向父结点的链表。</p>
</blockquote>
<p>设有$n$个结点的二叉树，则其<strong>空指针域数量</strong>：</p>
<ul>
<li>
<p>对于二叉链表：</p>
<ul>
<li>总指针域个数：$2n$；</li>
<li>分支数（子孙结点数，非空指针域个数）：$n-1$。</li>
</ul>
<p>可得：</p>
<p>$$
空指针域数=2n-(n-1)=n+1
$$</p>
</li>
<li>
<p>对于三叉链表：</p>
<ul>
<li>总指针域个数：$3n$；</li>
<li>分支数（子孙结点数）：$n-1$；</li>
<li>指向父结点且非空的指针域个数：$n-1$。</li>
</ul>
<p>即，非空指针域个数为：$2(n-1)$。</p>
<p>可得：</p>
<p>$$
空指针域数=3n-2(n-1)=n+2
$$</p>
</li>
</ul>
<h2 id="遍历" data-numberify>遍历<a class="anchor ms-1" href="#遍历"></a></h2>
<p>二叉树有以下遍历方法：</p>
<ul>
<li>
<p>先序遍历：根左右</p>
<ol>
<li>访问根结点；</li>
<li>先序遍历左子树；</li>
<li>先序遍历右子树。</li>
</ol>
</li>
<li>
<p>中序遍历：左根右</p>
<ol>
<li>中序遍历左子树；</li>
<li>访问根结点；</li>
<li>中序遍历右子树。</li>
</ol>
</li>
<li>
<p>后序遍历：左右根</p>
<ol>
<li>后序遍历左子树；</li>
<li>后序遍历右子树；</li>
<li>访问根结点。</li>
</ol>
<p>后序遍历可以使用栈：</p>
<ol>
<li>根结点入栈；</li>
<li>右子树（如果有的话）按照步骤1至3顺序入栈（先入根结点，然后入右子树，再入左子树）；</li>
<li>左子树（如果有的话）按照步骤1至3顺序入栈（先入根结点，然后入右子树，再入左子树）；</li>
<li>将栈中所有元素出栈，出栈顺序即为后序遍历的顺序。</li>
</ol>
</li>
<li>
<p>层序遍历：根据层序从上至下，从左到右遍历</p>
<ol>
<li>
<p>访问根结点（第1层）；</p>
</li>
<li>
<p>从左到右访问第2层所有结点；</p>
</li>
<li>
<p>从左到右访问第3层所有结点；</p>
<p>&hellip;</p>
</li>
</ol>
<p>直至访问到最后一层的所有结点（从左到右）。</p>
<p>层序遍历可以使用队列：</p>
<ol>
<li>将根结点入队；</li>
<li>将对头元素出队，然后将其左右子结点（如果有的话）依序入队；</li>
<li>重复步骤2直至所有元素出队，出队顺序即为层序遍历顺序。</li>
</ol>
</li>
</ul>
<blockquote>
<p>二叉树的遍历实质上是对一个非线性结构进行线性化的过程，它使得每个结点（除第一个和最后一个）在这些线性序列中有且仅有一个直接前驱和直接后继。</p>
</blockquote>
<h2 id="平衡二叉树" data-numberify>平衡二叉树<a class="anchor ms-1" href="#平衡二叉树"></a></h2>
<p>二叉树可以用于快速查找。例如比根结点小的在左子树，比根结点大的在右子树（二叉排序树）。那么每次查找，根据根结点就可以剔除一半的范围。</p>
<p>但是如果二叉树左右子树的结点数量差别很大，那么每次查找并不一定能剔除一半的范围，查询效率大打折扣。</p>
<p>设一个二叉树的左右子树高度之差的绝对值为$d$，那么</p>
<ul>
<li>不平衡的二叉树：$d &gt; 1$；</li>
<li>平衡的二叉树：$d \le 1$。</li>
</ul>
<blockquote>
<p>完全二叉树一定是平衡二叉树，平衡二叉树不一定是完全二叉树。</p>
</blockquote>
<h2 id="二叉排序树" data-numberify>二叉排序树<a class="anchor ms-1" href="#二叉排序树"></a></h2>
<p>二叉排序树的定义：</p>
<ul>
<li><strong>左子树</strong>所有结点的关键字都<strong>小于</strong>根结点；</li>
<li><strong>右子树</strong>所有根结点的关键字都<strong>大于</strong>根结点；</li>
<li>左右子树也都是二叉排序树。</li>
</ul>
<p>二叉排序树的<strong>中序遍历</strong>（左根右）得到的是该二叉树的<strong>有序序列</strong>。</p>
<h2 id="线索二叉树" data-numberify>线索二叉树<a class="anchor ms-1" href="#线索二叉树"></a></h2>
<p>线索二叉树是在二叉树结点中保存了结点的前驱和后继的信息。</p>
<p>如果使用指针来指向其前驱和后继，增加指针信息会降低存储空间的利用率。</p>
<p>可以采用增加两个标志（<code>leftTag</code>和<code>rightTag</code>）来区分指针域指向的是左或右子结点还是前驱或后继：</p>
<table>
    <tr>
        <td>leftTag</td>
        <td>leftChild</td>
        <td>data</td>
        <td>rightChild</td>
        <td>rightTag</td>
    </tr>
</table>
<p>其中：</p>
<p>$$
leftTag =
\begin{cases}
True  &amp; leftChild指向结点左孩子 \\
False &amp; leftChild指向结点的直接前驱
\end{cases}
$$</p>
<p>$$
rightTag =
\begin{cases}
True  &amp; rightChild指向结点右孩子 \\
False &amp; rightChild指向结点的直接后继
\end{cases}
$$</p>
<p>若二叉树的二叉链表采用以上所示的结点结构，则相应的链表称为线索链表，其中指向结点前驱、后继的指针称为线索。</p>
<p>对二叉树以某种次序遍历使其成为线索二叉树的过程称为线索化。</p>
<h2 id="哈夫曼树" data-numberify>哈夫曼树<a class="anchor ms-1" href="#哈夫曼树"></a></h2>
<p>哈夫曼树即最优二叉树，是一类<strong>带权路径长度最短</strong>的树。</p>
<ul>
<li>
<p><strong>路径</strong>：指从树中<strong>一个结点到另一个结点之间的通路</strong>；</p>
</li>
<li>
<p><strong>路径长度</strong>：路径上的<strong>分支数目</strong>；</p>
</li>
<li>
<p><strong>树的路径长度</strong>：指从树根到每一个叶子之间的路径长度之和；</p>
</li>
<li>
<p><strong>结点的带权路径长度</strong>：从该结点到树根之间的<strong>路径长度</strong>与该结点<strong>权值</strong>的乘积；</p>
</li>
<li>
<p><strong>树的带权路径长度</strong>：树中所有叶子结点的带权路径长度之和。</p>
<p>设：</p>
<ul>
<li>带权叶子结点数：$n$；</li>
<li>叶子结点的权值：$w_k$；</li>
<li>叶子结点到根的路径长度：$l_k$。</li>
</ul>
<p>则树的带权路径长度为：</p>
<p>$$
WPL = \sum_{k=1}^{n}{w_kl_k}
$$</p>
</li>
</ul>
<p>哈夫曼树是指权值为$w_1,w_2,\cdots,w_n$的$n$个叶子结点的二叉树中，带权路径长度最小的二叉树。</p>
<p>构造最优二叉树的哈夫曼算法：</p>
<ol>
<li>根据给定的$n$个权值$\{ w_1,w_2,\cdots,w_n \}$，构成$n$棵二叉树集合$F=\{T_1,T_2,\cdots,T_n\}$，每棵树$T_i$有且仅有一个带权为$w_i$的根结点。</li>
<li>在$F$中选取2棵权值最小的树作为左、右子树，构造一棵新二叉树。新二叉树的根结点权值为其左右子树根结点权值之和。</li>
<li>从$F$中删除这2棵树，并将新树加入到$F$中。</li>
<li>重复步骤2、3直到$F$中仅含一棵树为止，这棵树便是哈夫曼树。</li>
</ol>
<p>哈夫曼算法并未规定哪棵树作为左或右子树，所以哈夫曼树并不唯一，但$WPL$值是唯一的。</p>
<p>给定$n$个权值后，哈夫曼树的结点数$m$就确定了：</p>
<p>$$
m = 2 \times n - 1
$$</p>
<p>所以可用一维数组存储哈夫曼树。</p>
<h3 id="哈夫曼编码" data-numberify>哈夫曼编码<a class="anchor ms-1" href="#哈夫曼编码"></a></h3>
<p>哈夫曼编码是一种不等长的编码，它用哈夫曼算法来构造出最优前缀码：</p>
<p>给定<strong>字符集</strong>$D=\{ d_1,d_2,\cdots,d_n \}$及<strong>字符的使用频率</strong>$W=\{w_1,w_2,\cdots,w_n\}$。</p>
<p>构造<strong>最优前缀码</strong>的方法为：</p>
<ol>
<li>以$d_1,d_2,\cdots,d_n$作为叶子结点，$w_1,w_2,\cdots,w_n$作为叶子结点的权值，构造出一棵最优二叉树。</li>
<li>将树中每个结点的左分支标上0，右分支标上1（左0右1）。</li>
<li>每个叶子结点代表字符的编码就是从根到叶子的路径上组成的0、1串。</li>
</ol>
<p><picture><img class="img-fluid " alt="哈夫曼编码" src="/docs/ruan-she/data-structure/uTools_1680836524813.png" loading="lazy" width="347" height="334" />
</picture>

</p>
<p>其中，字符$a$字符$b$、$c$、$d$、$e$的编码分别为00、01、100、11、101。</p>
<h3 id="压缩比" data-numberify>压缩比<a class="anchor ms-1" href="#压缩比"></a></h3>
<p><picture><img class="img-fluid " alt="压缩比例题" src="/docs/ruan-she/data-structure/uTools_1680959771881.png" loading="lazy" width="784" height="489" />
</picture>

</p>
<ol>
<li>
<p>按照<u>出现频率</u>计算<u>加权平均长度</u>：</p>
<p>$$
加权平均长度 = \sum_{i=1}^{5}{字符i的位数 \times 字符i出现频率}
$$</p>
<p>即：</p>
<p>$$
1 \times 40% + 3 \times (10% + 20% + 16% + 14%) = 2.2
$$</p>
<p>压缩后平均长度为2.2。</p>
</li>
<li>
<p>计算压缩比：</p>
<p>$$
压缩比 = \cfrac{压缩前编码长度 - 压缩后平均长度}{压缩前编码长度}
$$</p>
<p>即，</p>
<ul>
<li>
<p>编码5个字符至少需要3位：$2^2 &lt; 5 &lt; 2^3$，所以压缩前编码长度为3；</p>
</li>
<li>
<p>压缩比：</p>
<p>$$
\cfrac{3-2.2}{3} \approx 0.27
$$</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>哈夫曼编码方案是基于贪心策略的。</p>
</blockquote>
<hr>
<h1 id="图" data-numberify>图<a class="anchor ms-1" href="#图"></a></h1>
<p>在图中，任意两个结点之间都可能有直接的关系，所以图中<u>一个结点的前驱结点和后继结点的数目是没有限制的</u>。</p>
<p>图$G$是由集合$V$和$E$构成的二元组，记作$G=(V,E)$：</p>
<ul>
<li><strong>顶点</strong>：表示数据元素。$V$是图中顶点的非空有限集合。</li>
<li><strong>边</strong>：表示数据元素之间的关系。$E$是图中边的有限集合。</li>
</ul>
<p>图可分为两种类型：</p>
<ul>
<li><strong>有向图</strong>：有向图顶点之间的关系称为弧（或有向边），用$&lt;v_i,v_j&gt;$表示，$v_i$是<strong>弧尾</strong>（始点或起点），$v_j$是<strong>弧头</strong>（终点，箭头指向的顶点），即有向边是指<u>从弧尾指向弧头</u>的一条边。$&lt;v_i,v_j&gt;$和$&lt;v_j,v_i&gt;$分别表示的是两条边。</li>
<li><strong>无向图</strong>：无向图顶点之间的关系用$(v_i,v_j)$表示。$(v_i,v_j)$和$(v_j,v_i)$表示的是同一条边。</li>
</ul>
<h2 id="术语-1" data-numberify>术语<a class="anchor ms-1" href="#术语-1"></a></h2>
<h3 id="完全图" data-numberify>完全图<a class="anchor ms-1" href="#完全图"></a></h3>
<p><strong>完全图</strong>：</p>
<ul>
<li>
<p><strong>无向完全图</strong>：指一个有$n$个顶点的无向图，其每一个顶点与其他$n-1$个顶点之间都有边。</p>
<p>$n$个顶点的无向完全图共有$\cfrac{n(n-1)}{2}$条边：</p>
<p>$$
\sum_{i=1}^{n}{i} = \cfrac{n(n-1)}{2}
$$</p>
<p>假设$n$个顶点的无向完全图，为他们编上1到$n$的编号，按照编号顺序计算边，第1个顶点跟其他$n-1$个顶点有$n$条边；第2个顶点跟其他$n-1$个顶点也有$n$条边，除去1条跟第1个顶点相连的边，有$n-1$条不一样的边；第3个顶点出去2条跟第1和第2个顶点相连的边，有$n-2$条不一样的边……以此类推，得出上方公式。</p>
</li>
<li>
<p><strong>有向完全图</strong>：指一个有$n$个顶点的有向图，以其每一个顶点为始点与其他$n-1$个顶点之间都有弧。</p>
<p>$n$个顶点的有向完全图共有$n(n-1)$条边：</p>
<p>$$
\prod_{i=1}^{n}{n-1} = n(n-1)
$$</p>
<p>有向完全图的$n$个顶点都有$n-1$条以其他顶点作为终点的弧（出度为$n-1$），并且这$n$个顶点的$n-1$条弧都是不同的弧，所以可推出上方公式。</p>
</li>
</ul>
<h3 id="度" data-numberify>度<a class="anchor ms-1" href="#度"></a></h3>
<p><strong>度</strong>：顶点$v$的度是指关联于该顶点的边的数目，记作$D(v)$。</p>
<p>若为有向图：</p>
<ul>
<li><strong>入度</strong>：以该顶点为终点的有向边的数目，记为$ID(v)$；</li>
<li><strong>出度</strong>：以该顶点为起点的有向边的数目，记为$OD(v)$。</li>
</ul>
<p>有向图度与入度、出度的关系：</p>
<p>$$
D(v) = ID(v) + OD(v)
$$</p>
<p>对于所有的图，顶点数$n$、边数$e$与各顶点的度之间有：</p>
<p>$$
e = \cfrac{1}{2} \sum_{i=1}^{n}{D(v_i)}
$$</p>
<p>即，所有顶点的度数之和 $= 2e$。</p>
<h3 id="路径" data-numberify>路径<a class="anchor ms-1" href="#路径"></a></h3>
<p><strong>路径</strong>：</p>
<ul>
<li>
<p>无向图$G$中的路径：从顶点$v_p$到顶点$v_q$的路径是指存在一个顶点序列$v_p,v_{i1},v_{i2},\cdot,v_{in},v_q$，使得$(v_p,v_{i1}),(v_{i1},v_{i2}),\cdots,(v_{in},v_q) \in E(G)$；</p>
</li>
<li>
<p>无向图$G$中的路径：从顶点$v_p$到顶点$v_q$的路径是指存在一个顶点序列$v_p,v_{i1},v_{i2},\cdot,v_{in},v_q$，使得$&lt;v_p,v_{i1}&gt;,&lt;v_{i1},v_{i2}&gt;,\cdots,&lt;v_{in},v_q&gt; \in E(G)$。</p>
<p>无向图中的路径也是有方向的。</p>
</li>
</ul>
<h3 id="子图" data-numberify>子图<a class="anchor ms-1" href="#子图"></a></h3>
<p><strong>子图</strong>：若有两个图$G=(V,E)$和$G&rsquo;=(V&rsquo;,E&rsquo;)$，如果$V&rsquo; \sube V$且$E&rsquo; \sube E$，则称$G&rsquo;$为$G$的子图。</p>
<h3 id="连通图" data-numberify>连通图<a class="anchor ms-1" href="#连通图"></a></h3>
<p>对于无向图：</p>
<ul>
<li><strong>连通</strong>：无向图中，若从顶点$v_i$到顶点$v_j$<u>有路径</u>，则称顶点$v_i$和顶点$v_j$是联通的。</li>
<li><strong>连通图</strong>：若无向图中<u>任意两个顶点都是联通的</u>，称其为连通图。</li>
<li><strong>连通分量</strong>：无向图$G$的<strong>极大连通子图</strong>称为$G$的连通分量。</li>
</ul>
<p>$n$个结点的连通图，它的边的取值范围是$[n-1,\cfrac{n(n-1)}{2}]$。</p>
<p>对于有向图：</p>
<ul>
<li><strong>强连通图</strong>：在有向图$G$中，如果对于每一对顶点，$v_i,v_j\in V$ 且 $v_i \neq v_j$，从顶点$v_i$到顶点$v_j$和从顶点$v_j$到顶点$v_i$都存在路径，则称图$G$为强连通图。</li>
<li><strong>强连通分量</strong>：有向图中的<strong>极大连通子图</strong>称为有向图的强连通分量。</li>
</ul>
<blockquote>
<p>连通图是无向图中的一种，所以一般也称为无向连通图。</p>
<p>强连通图是有向图的一种，一般也称为有向强连通图。</p>
</blockquote>
<h3 id="网" data-numberify>网<a class="anchor ms-1" href="#网"></a></h3>
<p>边（或弧）带权值的图称为网。</p>
<h3 id="有向树" data-numberify>有向树<a class="anchor ms-1" href="#有向树"></a></h3>
<p>如果一个有向图恰<u>有一个顶点的入度为0（作为root），其余顶点的入度均为1</u>，则是一棵有向树。</p>
<h2 id="基本存储结构" data-numberify>基本存储结构<a class="anchor ms-1" href="#基本存储结构"></a></h2>
<p>图的基本存储结构有：</p>
<ul>
<li>邻接矩阵表示法：使用矩阵存储顶点关系，适合存储边比较多的图；</li>
<li>邻接链表表示法：使用多个单链表存储顶点关系，适合存储边比较少的图。</li>
</ul>
<h3 id="邻接矩阵表示法" data-numberify>邻接矩阵表示法<a class="anchor ms-1" href="#邻接矩阵表示法"></a></h3>
<p>图的邻接矩阵表示法是指<u>用矩阵来表示图中顶点之间的关系</u>。</p>
<p>对于具有$n$个顶点的图$G=(V,E)$，其邻接矩阵是一个$n$阶方阵，且满足：</p>
<p>$$
A[i][j] =
\begin{cases}
1 &amp; 若(v_i,v_j)或&lt;v_i,v_j&gt;是E中的边 \\
0 &amp; 若(v_i,v_j)或&lt;v_i,v_j&gt;不是E中的边
\end{cases}
$$</p>
<blockquote>
<p>即，横$i$竖$j$，横出竖入。</p>
</blockquote>
<p>无向图的邻接矩阵是对称矩阵，有向图的邻接矩阵则不一定对称。</p>
<ul>
<li>无向图：顶点$v_i$的度是邻接矩阵第$i$行（或列）中值不为0的元素个数；</li>
<li>有向图：第$i$行的非0元素个数是顶点$v_i$的出度$OD(v_i)$；第$i$列的非0元素个数是顶点$v_i$的入度$ID(v_j)$。</li>
</ul>
<p>网（赋权图）的邻接矩阵定义（$W_{ij}$是边或弧上的权值）：</p>
<p>$$
A[i][j] =
\begin{cases}
W_{ij} &amp; 若(v_i,v_j)或&lt;v_i,v_j&gt; \in E \\
\infin &amp; 若(v_i,v_j)或&lt;v_i,v_j&gt; \notin E
\end{cases}
$$</p>
<p>邻接矩阵适合用于存储边比较多的图。</p>
<h3 id="邻接链表表示法" data-numberify>邻接链表表示法<a class="anchor ms-1" href="#邻接链表表示法"></a></h3>
<p>邻接链表表示法指的是<u>为图的每个顶点建立一个单链表</u>：</p>
<ul>
<li>
<p>边结点（表结点）：</p>
  <table>
      <tr>
          <td>adjvex</td>
          <td>nextarc</td>
          <td>info</td>
      </tr>
  </table>
<ul>
<li><code>adjvex</code>：指示与顶点$v_i$邻接的顶点的序号；</li>
<li><code>nextarc</code>：指示下一条边或弧的结点；</li>
<li><code>info</code>：存储与边或弧有关的信息，如权值等。</li>
</ul>
</li>
<li>
<p>表头结点（顶点结点）：</p>
  <table>
      <tr>
          <td>data</td>
          <td>firstarc</td>
      </tr>
  </table>
<ul>
<li><code>data</code>：存储顶点$v_i$的名或其他有关信息；</li>
<li><code>firstarc</code>：指示链表中的第一个结点（邻接顶点）。</li>
</ul>
<p>表头结点通常以顺序存储结构存储，以便随机访问。</p>
</li>
</ul>
<p>对于有向图，<strong>邻接链表</strong>存储的是以当前结点作为<strong>起点</strong>的弧；<strong>逆邻接链表</strong>存储的是以当前结点作为<strong>终点</strong>的弧。</p>
<p>邻接链表适合用于存储边比较少的图。</p>
<h2 id="遍历-1" data-numberify>遍历<a class="anchor ms-1" href="#遍历-1"></a></h2>
<p>图的遍历是指<u>从某个项点出发，沿着某条搜索路径对图中的所有项点进行访问且只访问一次的过程</u>。</p>
<h3 id="深度优先搜索" data-numberify>深度优先搜索<a class="anchor ms-1" href="#深度优先搜索"></a></h3>
<p>深度优先搜索（Depth First Search，DFS）类似于树的先序遍历。从图$G$中任一结点$v$出发按深度优先搜索法进行遍历的步骤：</p>
<ol>
<li>设置搜索指针$p$，使$p$指向顶点$v$；</li>
<li>访问$p$所指顶点，并使$p$指向与其<u>相邻接的且尚未被访问过</u>的顶点。</li>
<li>若$p$所指顶点存在，则重复步骤2，否则执行步骤4。</li>
<li>沿着访问的次序和方向回溯到最后一个有未被访问过的邻接顶点的顶点，并使$p$指向这个未被访问的顶点，然后重复步骤2到4，直到所有的项点均被访问为止。</li>
</ol>
<p>时间复杂度（$n$为顶点数，$e$为边数）：</p>
<ul>
<li>邻接矩阵：$O(n^2)$；</li>
<li>邻接链表：$O(n+e)$。</li>
</ul>
<h3 id="广度优先搜索" data-numberify>广度优先搜索<a class="anchor ms-1" href="#广度优先搜索"></a></h3>
<p>图的广度优先搜索（Breadth First Search，BFS）步骤为：</p>
<ol>
<li>从图中的某个顶点$v$出发；</li>
<li>访问$v$后，依次访问$v$的各个未被访问过的邻接点；</li>
<li>分别从$v$的邻接点出发，依次访问它们的邻接点；</li>
<li>按照$v$的邻接点访问的先后顺序，重复步骤2到4，直到图中所有已被访问的项点的邻接点都被访问到；</li>
<li>若此时还有未被访问的顶点，则另选图中的一个未被访问的项点作为起点，重复上述过程，直到图中所有的顶点都被访问到为止。</li>
</ol>
<p>广度优先搜索可以引入队列来保存已访问过的顶点序列。即，每当一个顶点被访问后，就将其放入队列中；当队头顶点出队时，就访问其未被访问的邻接点并令这些邻接顶点入队。每个顶点最多入队一次。</p>
<p>广度和深度优先搜索遍历图的<u>时间复杂度相同</u>（$n$为顶点数，$e$为边数）：</p>
<ul>
<li>邻接矩阵：$O(n^2)$；</li>
<li>邻接链表：$O(n+e)$。</li>
</ul>
<blockquote>
<p>广度和深度优先搜索遍历图的不同之处在于：<u>顶点访问的次序不同</u>。</p>
</blockquote>
<h2 id="生成树" data-numberify>生成树<a class="anchor ms-1" href="#生成树"></a></h2>
<p>连通图的生成树是该图的极小连通子图（都是$n-1$条边）。</p>
<p>对于<strong>非连通图</strong>而言，每个连通分量中的顶点集和遍历时走过的边集一起构成若干棵生成树，把它们称为<strong>非连通图的生成树森林</strong>。</p>
<ul>
<li>
<p>在图的生成树中任一加一条边，则必然形成回路。</p>
<p>边数为$e$，$e \ge n$则必然形成回路。</p>
</li>
<li>
<p>图的生成树不是唯一的。</p>
<p>按深度和广度优先搜索进行遍历将得到不同的生成树，分别称为深度优先生成树和广度优先生成树。</p>
</li>
</ul>
<h3 id="最小生成树" data-numberify>最小生成树<a class="anchor ms-1" href="#最小生成树"></a></h3>
<p>连通网的生成树的边也带权，把生成树各边的权值总和称为生成树的权。<u>权值最小的生成树称为最小生成树</u>。</p>
<h2 id="aov-网" data-numberify>AOV 网<a class="anchor ms-1" href="#aov-网"></a></h2>
<p>一个大工程项目可以分为许多较小子工程（称为活动）。有向图中，用顶点表示活动，弧表示活动之间的优先级关系（活动进行时的制约关系），称这样的有向图为<u>以顶点表示活动的网</u>（Activity On Vertex network，AOV网）。</p>
<p>在AOV网中：</p>
<ul>
<li>
<p>从顶点$v_i$到$v_j$有一条有向路径：</p>
<ul>
<li>$v_i$是$v_j$的前驱，</li>
<li>$v_j$是$v_i$的后继；</li>
</ul>
</li>
<li>
<p>$&lt;v_i,v_j&gt;$：</p>
<ul>
<li>$v_i$是$v_j$的直接前驱，</li>
<li>$v_j$是$v_i$的直接后继。</li>
</ul>
</li>
</ul>
<p>AOV网中不应出现有向环。检测工程是否可行，首先应检查对应AOV网是否存在回路。不存在回路的有向图称为有向无环图（DAG，Directed Acycline Graph）。</p>
<h2 id="拓扑排序" data-numberify>拓扑排序<a class="anchor ms-1" href="#拓扑排序"></a></h2>
<p>检测AOV网是否是DAG的方法是对AOV网构造其<u>顶点的拓扑有序序列</u>。</p>
<p>拓扑排序是将AOV网中的所有顶点排成一个线性序列的过程，并且该序列满足：若在AOV网中从顶点$v_i$到$v_j$有一条路径，则在该线性序列中，$v_i$必在$v_j$之前。对AOV网进行拓扑排序的方法如下：</p>
<ol>
<li>在AOV网中选择一个入度为0（没有前驱）的顶点且输出它。</li>
<li>从网中删除该顶点及与该顶点有关的所有弧。</li>
<li>重复上述两步，直到网中不存在入度为0的顶点为止。</li>
</ol>
<p>两种结果：</p>
<ul>
<li>所有顶点已输出，说明网中不存在回路。</li>
<li>尚有未输出的顶点，剩余顶点均有前驱顶点，表面网中存在回路。</li>
</ul>
<p>有向无环图的拓扑序列中，顶点$v_i$在$v_j$之前，则：</p>
<ul>
<li>可能存在弧$&lt;v_i,v_j&gt;$，一定不存在弧$&lt;v_j,v_i&gt;$；</li>
<li>可能存在$v_i$到$v_j$的路径，一定不存在$v_j$到$v_i$的路径。</li>
</ul>
<p><picture><img class="img-fluid " alt="AOV网拓扑排序例子" src="/docs/ruan-she/data-structure/uTools_1681115534531.png" loading="lazy" width="133" height="173" />
</picture>

</p>
<p>上图拓扑排序的结果为：6,1,4,3,2,5（结果并不唯一）。</p>
<blockquote>
<p>当有向图中无环时，也可以利用深度优先遍历进行逆拓扑排序。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>程序设计语言篇</title>
      <link>/docs/ruan-she/programming-language/</link>
      <pubDate>Thu, 30 Mar 2023 19:58:41 +0800</pubDate>
      
      <guid>/docs/ruan-she/programming-language/</guid>
      <description><![CDATA[低级和高级语言 程序设计语言根据硬件是否能识别区分为两类： 低级语言：二进制机器指令、汇编语言。 高级语言：面向各类应用的程序设计语言，更加接近自]]></description>
      <content:encoded><![CDATA[<h1 id="低级和高级语言" data-numberify>低级和高级语言<a class="anchor ms-1" href="#低级和高级语言"></a></h1>
<p>程序设计语言根据硬件是否能识别区分为两类：</p>
<ul>
<li><strong>低级语言</strong>：二进制机器指令、汇编语言。</li>
<li><strong>高级语言</strong>：面向各类应用的程序设计语言，更加接近自然语言。需要通过编译器或解释器（翻译）来让机器执行。</li>
</ul>
<hr>
<h1 id="编译和解释" data-numberify>编译和解释<a class="anchor ms-1" href="#编译和解释"></a></h1>
<p>程序设计语言按照翻译的方式可分为：</p>
<ul>
<li>
<p><strong>编译</strong>：需要通过<strong>编译器</strong>（<strong>编译程序</strong>）将<u>源程序（源代码）</u>编译为包含二进制指令的<u>可执行文件（目标程序）</u>。</p>
<p>真正在机器上运行的是与源程序（逻辑）等价的目标程序。</p>
<p>源程序和编译器都不再参与目标程序的运行过程。</p>
<p>汇编程序也是属于编译执行。</p>
</li>
<li>
<p><strong>解释</strong>：需要通过<strong>解释器</strong>（<strong>解释程序</strong>）将<u>源程序（源代码）</u>中的指令解释为二进制指令后给机器执行。</p>
<p>该过程不会产生独立的目标程序。</p>
<p>并且解释器和源程序都会参与到程序的运行过程（运行控制）中。</p>
<blockquote>
<p>与编译方式相比，解释方式程序执行的速度慢，因为解释方式执行的程序，需要解释器在其中充当一个原程序与机器之前实时的翻译。</p>
<p>脚本语言属于动态语言，其程序结构可以在运行中改变。</p>
</blockquote>
</li>
</ul>
<h2 id="编译过程" data-numberify>编译过程<a class="anchor ms-1" href="#编译过程"></a></h2>
<p>编译程序的功能是把某高级语言书写的<u>源程序翻译成与之等价的目标程序</u>（汇编语言或机
器语言)。</p>
<p>编译程序的工作过程如下图所示：</p>
<p><picture><img class="img-fluid " alt="编译过程" src="/docs/ruan-she/programming-language/uTools_1680232196718.png" loading="lazy" width="549" height="466" />
</picture>

</p>
<p>其中，以下几个阶段对于编译过程来说是必须的：</p>
<ol>
<li>词法分析</li>
<li>语法分析</li>
<li>语义分析</li>
<li>目标代码生成</li>
</ol>
<p>以下两个阶段对于编译过程来说不是必须的（可省略）：</p>
<ul>
<li>中间代码生成</li>
<li>（中间或目标）代码优化</li>
</ul>
<h3 id="词法分析" data-numberify>词法分析<a class="anchor ms-1" href="#词法分析"></a></h3>
<p>源程序可以简单地被看成是一个<u>多行的字符串</u>。<strong>词法分析</strong>阶段的任务是<u>对源程序从前到后（从左到右）逐个字符地扫描，从中识别出一个个“单词”符号</u>。<strong>“单词”符号</strong>是程序设计语言的<strong>基本语法单位</strong>，如关键字（或称保留字）、标识符、常数、运算符和分隔符（如标点符号、左右括号）等。</p>
<p>词法分析程序输出的“单词”<u>常以<strong>二元组</strong>的方式输出</u>，即单词种别和单词自身的值。</p>
<p>词法分析过程依据的是语言的<u>词法规则</u>，即描述“单词”结构的规则。</p>
<h4 id="词法规则" data-numberify>词法规则<a class="anchor ms-1" href="#词法规则"></a></h4>
<p>词法分析根据词法规则将构成源程序的字符串转换成单词符号序列。词法规则可用3型文法（正规文法）或正规表达式描述。</p>
<h5 id="正规表达式" data-numberify>正规表达式<a class="anchor ms-1" href="#正规表达式"></a></h5>
<p>正规表达式（正规式）有以下符号：</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">名称</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>*</code></td>
<td style="text-align:center">闭包</td>
<td style="text-align:left">表示其前面链接的符号或集合可以出现$[0, +\infty]$次。</td>
</tr>
<tr>
<td style="text-align:center"><code>·</code></td>
<td style="text-align:center">连接</td>
<td style="text-align:left">可省略，将多个符号或集合连接起来。表示逻辑与</td>
</tr>
<tr>
<td style="text-align:center"><code>|</code></td>
<td style="text-align:center">或</td>
<td style="text-align:left">表示逻辑或。</td>
</tr>
</tbody>
</table>
<p>Example：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/programming-language/1680248469003.png" loading="lazy" width="990" height="277" />
</picture>

</p>
<p>设$U$、$V$和$W$均为正规式：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/programming-language/uTools_1680249034196.png" loading="lazy" width="974" height="185" />
</picture>

</p>
<h4 id="有限自动机" data-numberify>有限自动机<a class="anchor ms-1" href="#有限自动机"></a></h4>
<p><strong>有限自动机</strong>是词法分析的一个工具（一种识别装置的抽象概念），它能正确地<strong>识别正规集</strong>。</p>
<ul>
<li>
<p><strong>确定的有限自动机</strong>（Deterministic Finite Automata，DFA）：对每一个状态来说识别字符后转移的<strong>状态是唯一的</strong>。</p>
<p>一个DFA是一个<strong>五元组</strong>$(S, \Sigma, f, s_0, Z)$：</p>
<ul>
<li>
<p>$S$：包含<u>状态的有限集</u>（每个元素称为一个状态）。</p>
</li>
<li>
<p>$\Sigma$：有穷<u>字母表</u>，其每个元素称为一个<u>输入字符</u>。</p>
</li>
<li>
<p>$f$：$S \times \Sigma \to S$ 上的<u>单值部分映像</u>。</p>
<p>$$
f(A,a)=Q \qquad A \in S, a \in \Sigma
$$</p>
<p>表示当前状态为$A$、输入为$a$时，将转换到下一状态$Q$，称$Q$为$A$的一个后继状态。</p>
</li>
<li>
<p>$s_0$：唯一的<u>开始状态</u>，$s_0 \in S$。</p>
</li>
<li>
<p>$Z$：非空的<u>终止状态集合</u>，$Z \subseteq S$。</p>
</li>
</ul>
<p>DFA可以用两种直观的方式表示：</p>
<ul>
<li>
<p><strong>状态转换图</strong>：简称为转换图，是一个有向图。</p>
<ul>
<li>
<p>DFA中的每个<strong>状态</strong>对应转换图中的一个<strong>结点</strong>。</p>
</li>
<li>
<p>DFA中的每个<strong>转换函数</strong>对应图中的一条<strong>有向弧</strong>。</p>
</li>
<li>
<p><strong>双圈表示的结点是终态结点。</strong></p>
<blockquote>
<p>终态也可以是初态。</p>
</blockquote>
</li>
</ul>
<p>若转换函数为$f(A,a)=Q$，则该有向弧从结点$A$出发，进入结点$Q$,字符$a$是弧上的标记。</p>
</li>
<li>
<p><strong>状态转换矩阵</strong>：用一个二位数组$M$表示。</p>
<p>矩阵元素$M[A,a]$：</p>
<ul>
<li><strong>行下标</strong>：表示状态。当前状态为$A$。</li>
<li><strong>列下标</strong>：表示输入的字符。当前输入为$a$。</li>
<li>$M[A,a]$的值：当前状态为$A$、输入为$a$时，应该转换到的下一状态。</li>
</ul>
</li>
</ul>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/programming-language/uTools_1680251834262.png" loading="lazy" width="983" height="160" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/programming-language/uTools_1680251962756.png" loading="lazy" width="982" height="585" />
</picture>

</p>
</li>
<li>
<p><strong>不确定的有限自动机</strong>（Nondeterministic Finite Automata，NFA）：对每一个状态来说识别字符后转移的<strong>状态是不唯一的</strong>。</p>
<p>NFA也是一个<strong>五元组</strong>$(S, \Sigma, f, s_0, Z)$。与DFA的区别是：</p>
<ul>
<li>
<p>$f$是$S \times \Sigma \to 2^S$ 上的映像。</p>
<p>对于$S$中的一个给定状态及输入符号，返回一个状态的集合。即当前状态的后继状态不一定是唯一的。</p>
</li>
<li>
<p>有向弧上的标记可以是 $\varepsilon$（$\varepsilon$ 表示空）。</p>
</li>
</ul>
<blockquote>
<p>DFA是NFA的特例。</p>
</blockquote>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/programming-language/uTools_1680252743732.png" loading="lazy" width="918" height="407" />
</picture>

</p>
</li>
</ul>
<p><u>有限自动机识别成功的依据是路跑的通并且跑完后的终点是终态。</u></p>
<blockquote>
<p>有向弧中出现如 $a,b$，代表该有向弧输入的值可以为$a$<strong>或</strong>$b$。即<code>,</code>代表或。</p>
</blockquote>
<h3 id="语法分析" data-numberify>语法分析<a class="anchor ms-1" href="#语法分析"></a></h3>
<p><strong>语法分析</strong>的任务是在词法分析的基础上，<u>根据语言的语法规则将单词符号序列分解成各类语法单位</u>，如“表达式”“语句”和“程序”等。</p>
<p>如果源程序中没有语法错误，语法分析后就能正确地<u>构造出其语法树</u>；否则<u>指出语法错误</u>，并<u>给出相应的诊断信息</u>。</p>
<p>例如对<code>id1 := id2 + id3 * 60</code>进行语法分析后形成的语法树：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/programming-language/uTools_1680233200526.png" loading="lazy" width="888" height="266" />
</picture>

</p>
<p>一般来说，根据表达式生成的语法树，运算符在表达式种优先级越高，它在语法树中的层次就越低，反之亦然。</p>
<blockquote>
<p>词法分析和语法分析在本质上都是对源程序的结构进行分析。</p>
<p>到达语法分析阶段可以发现程序中所有的语法错误。例如：</p>
<ul>
<li>变量的值是否正确；</li>
<li>语句的形式是否正确；</li>
<li>语句的结构是否合法；</li>
<li>检查括号是否匹配；</li>
<li>&hellip;&hellip;</li>
</ul>
</blockquote>
<p>语法分析方法有多种，根据产生语法树的方向，可分为<strong>自底向上</strong>和<strong>自顶向下</strong>两类。</p>
<h4 id="上下文无关文法" data-numberify>上下文无关文法<a class="anchor ms-1" href="#上下文无关文法"></a></h4>
<p>程序设计语言的<u>绝大多数<strong>语法规则</strong>可以采用<strong>上下文无关文法</strong>进行描述</u>。</p>
<p>上下文无关文法属于乔姆斯基定义的2型文法。</p>
<p>对于上下文无关文法，$G[S] = (V_N, V_T, P, S)$，其产生式的形式都是 $A \to \beta$，其中 $A \in V_n$，$\beta \in (V_N \cup V_T)^*$。即：</p>
<ul>
<li>$V_N$：非终结符号集合，</li>
<li>$V_T$：终结符号集合，</li>
<li>$P$：产生式集合，</li>
<li>$S$：开始符号。</li>
</ul>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/programming-language/uTools_1680255073014.png" loading="lazy" width="990" height="393" />
</picture>

</p>
<p>上下文无关文法的推导过程可用树型结构描述：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/programming-language/uTools_1680255429332.png" loading="lazy" width="210" height="346" />
</picture>

</p>
<p>由上下文无关文法的推导过程也可以看出它是自顶向下推导。</p>
<p>对于上下文无关文法中的集合，有以下对应关系：</p>
<ul>
<li>$S \to P$</li>
<li>$P \to V_N$</li>
<li>$V_N \to V_T$</li>
</ul>
<h3 id="语义分析" data-numberify>语义分析<a class="anchor ms-1" href="#语义分析"></a></h3>
<p><strong>语义分析</strong>阶段分析各语法结构的含义，<u>检查源程序是否包含静态语义错误</u>，并<u>收集类型信息</u>供后面的代码生成阶段使用。<u>只有语法和语义都正确的源程序才能翻译成正确的目标代码。</u></p>
<p>语义分析的一个主要工作是<u>进行类型分析和检查</u>。程序设计语言中的一个数据类型一般包含两个方面的内容：类型的载体及其上的运算。</p>
<p>语义分析阶段的输入是上一个阶段（语法分析）所构造的语法树。</p>
<blockquote>
<p>语义分析后语法树中可能会出现一些语义处理结点。例如<code>inttoreal</code>，表示将一个整型数转换为浮点数。</p>
</blockquote>
<blockquote>
<p>语义分析不能发现程序中所有的语义错误。语义分析只能发现静态语义错误，动态语义错误需要在生成目标程序后运行时才能发现。</p>
<p>有语义错误是可以编译成功的。例如<code>a/0</code>，符合语法，也符合静态语义，编译器检验不出来这个是错的，只有运行才会报错，也就是动态语义，动态语义错误常见的还有死循环。</p>
<p>PS：现在有些IDE会对一些常见的动态语义错误进行检查，在程序编译前提示给用户。</p>
</blockquote>
<h3 id="中间代码生成" data-numberify>中间代码生成<a class="anchor ms-1" href="#中间代码生成"></a></h3>
<p><strong>中间代码生成</strong>阶段的工作是<u>根据语义分析的输出生成中间代码</u>。</p>
<p>“中间代码”是一种简单且含义明确的记号系统，可以有若干种形式，它们的共同特征是与具体的机器无关。最常用的一种中间代码是与汇编语言的指令非常相似的三地址码，其实现方式常采用四元式。四元式的形式为：</p>
<pre tabindex="0"><code>(运算符, 运算对象1, 运算对象2, 运算结果)
</code></pre><blockquote>
<p>语义分析和中间代码生成所依据的是语言的语义规则。</p>
<p><u>中间代码生成阶段</u>对于编译过程来说是<u>可省略的</u>。但是<u>前面的三个阶段词法分析、语法分析和语义分析还有最后的目标代码生成是不可省略的</u>。</p>
</blockquote>
<h4 id="编译器前后端" data-numberify>编译器前后端<a class="anchor ms-1" href="#编译器前后端"></a></h4>
<p>对于编译过程的各个阶段，在逻辑上可以把它们划分为：</p>
<ul>
<li><strong>前端</strong>：
<ul>
<li>词法分析</li>
<li>语法分析</li>
<li>语义分析</li>
<li>中间代码生成</li>
</ul>
</li>
<li><strong>后端</strong>：
<ul>
<li>中间代码优化</li>
<li>目标代码生成</li>
</ul>
</li>
</ul>
<p>以中间代码为分水岭（中间代码作为前端的输出，然后再作为后端的输入来连接前后端），把编译器分成了与机器有关的部分（后端）和与机器无关的部分（前端）。如此一来，对于同一种程序设计语言的编译器，开发出一个前端之后，就可以针对不同的机器开发相应的后端，前、后端有机结合后就形成了该语言的一个编译器。当语言有改动时，只会涉及前端部分的维护。</p>
<p>对于不同的程序设计语言，分别设计出相应的前端，然后将各个语言的前端与同一个后端相结合，就可以得到各个语言在某种机器上的编译器。</p>
<p>使用中间代码，将编译器分为前后端的好处是，有利于编译程序的可移植性。</p>
<blockquote>
<p>编译程序的可移植性提高了，那么相应的源程序（源代码）的可移植也会提高。</p>
</blockquote>
<h4 id="中缀和后缀表达式" data-numberify>中缀和后缀表达式<a class="anchor ms-1" href="#中缀和后缀表达式"></a></h4>
<p>中间代码有多种形式，其中树与后缀表示形式适用于解释器，而编译器多采用与机器指令格式较接近的四元式形式。</p>
<p>根据生成的语法树，按照不同的方式遍历即可生成形式不同的表达式：</p>
<ul>
<li>
<p>中缀表达式：中序遍历（左-根-右）；</p>
</li>
<li>
<p>后缀表达式：后序便利（左-右-根）。</p>
<p>后缀转中缀用到了栈。</p>
</li>
</ul>
<blockquote>
<p>逆波兰式其实就是后缀式。</p>
</blockquote>
<h3 id="代码优化" data-numberify>代码优化<a class="anchor ms-1" href="#代码优化"></a></h3>
<p>由于编译器将源程序翻译成中间代码的工作是机械的、按固定模式进行的，因此，生成的中间代码往往在时间上和空间上有较大的浪费。<u>当需要生成高效的目标代码时，必须进行优化。</u>优化过程<u>可以在中间代码生成阶段进行，也可以在目标代码生成阶段进行</u>。</p>
<p>由于中间代码不依赖于具体机器，此时<u>所做的优化一般建立在对程序的控制流和数据流分析的基础之上，与具体的机器无关</u>。优化所依据的原则是<strong>程序的等价变换规则</strong>。</p>
<h3 id="目标代码生成" data-numberify>目标代码生成<a class="anchor ms-1" href="#目标代码生成"></a></h3>
<p><strong>目标代码</strong>生成阶段的任务是<u>把中间代码变换成特定机器上的绝对指令代码、可重定位的指令代码或汇编指令代码</u>，这个阶段的工作<strong>与具体的机器密切相关</strong>。</p>
<p>寄存器的分配：寄存器访问速度快，但数量有限，所以如何分配及使用寄存器是目标代码生成时需要着重考虑的。</p>
<blockquote>
<p>编译过程中为变量分配的存储单元所用的地址是<strong>逻辑地址</strong>，程序运行时再将逻辑地址映射为物理地址。</p>
</blockquote>
<h3 id="符号表管理" data-numberify>符号表管理<a class="anchor ms-1" href="#符号表管理"></a></h3>
<p><strong>符号表</strong>的作用是：</p>
<ul>
<li>记录源程序中各个符号的必要信息；</li>
<li>辅助语义的正确性检查和代码生成。</li>
</ul>
<p>在编译过程中需要对符号表进行快速有效地查找、插入、修改和删除等操作。</p>
<ul>
<li><u>符号表在前三个阶段构建</u>：可以始于词法分析阶段，也可以放到语法分析和语义分析阶段</li>
<li>符号表的使用有时会<u>延续到目标代码的运行阶段</u>。</li>
</ul>
<blockquote>
<p>编译过程中翻译主要考虑声明语句和可执行语句。对声明语句，主要是将所需的信息正确地填入符号表；对可执行语句，则是将其翻译成中间代码或目标代码。</p>
</blockquote>
<h3 id="出错处理" data-numberify>出错处理<a class="anchor ms-1" href="#出错处理"></a></h3>
<p>编写的源程序中出现的错误分为：</p>
<ul>
<li>
<p><strong>静态错误</strong>：</p>
<p>编译阶段发现的程序错误，又可分为：</p>
<ul>
<li>语法错误：有关语言结构上的错误。</li>
</ul>
<p>如单词拼写错误、标点符号错误、表达式中缺少操作数、括号不匹配等。</p>
<ul>
<li>静态语义错误：运算符与运算对象类型不合法等错误。</li>
</ul>
</li>
<li>
<p><strong>动态错误</strong>（动态语义错误）：发生在程序运行时。</p>
<p>常见的动态错误例如除数为0。</p>
</li>
</ul>
<p>在编译时发现程序中的错误后，编译程序应采用适当的策略修复它们，使得分析过程能够继续下去，以便在一次编译过程中尽可能多地找出程序中的错误。</p>
<hr>
<h1 id="程序设计语言的基本成分" data-numberify>程序设计语言的基本成分<a class="anchor ms-1" href="#程序设计语言的基本成分"></a></h1>
<p>程序设计语言的基本成分包括：</p>
<ul>
<li>数据</li>
<li>运算</li>
<li>控制</li>
<li>传输</li>
<li>（函数）</li>
</ul>
<h2 id="数据成分" data-numberify>数据成分<a class="anchor ms-1" href="#数据成分"></a></h2>
<p>数据成分包含以下内容：</p>
<ul>
<li>
<p><strong>标识符</strong>：标识符通常是由字母、数字和下划线<code>_</code>组成，并且不能由数字开头。</p>
<p>一般有如下种类标识符：</p>
<ul>
<li>关键字。</li>
<li>变量名。</li>
<li>函数名。</li>
</ul>
<blockquote>
<p>现在，某些高级语言已经支持中文等字符来当作变量名。</p>
</blockquote>
</li>
<li>
<p><strong>常量</strong>：一般有<u>字面量</u>（例如<code>123</code>、<code>&quot;abc&quot;</code>）和<u>不可变变量（在某些语言中也称其为常量）</u>。</p>
<blockquote>
<ul>
<li>常量也具有类型；</li>
<li>常量也有对应的存储单元。</li>
</ul>
</blockquote>
</li>
<li>
<p><strong>变量</strong>：用来存储数据或对象。有存储类别、类型、名称（变量名）、作用域和生存周期等属性（这些也是数据的属性）。</p>
</li>
<li>
<p><strong>全局量</strong>：在程序代码中的<u>作用域（作用范围）为整个文件或程序</u>的数据。</p>
</li>
<li>
<p><strong>局部量</strong>：在程序代码中的<u>作用域（作用范围）为定义它的函数或语句块中</u>的数据。</p>
</li>
<li>
<p><strong>数据类型</strong>：按照数据组织形式的不同可将数据分为基本类型、用户定义类型、构造类型（C和C++）及其他类型等。</p>
<p>许多程序设计语言都规定，程序中的数据都必须具有类型，其作用是：</p>
<ul>
<li><strong>分配存储单元</strong>：便于为数据合理分配存储单元；</li>
<li><strong>检查数据对象</strong>：便于对参与表达式计算的数据对象进行（合法性）检查；</li>
<li><strong>取值范围</strong>：便于规定数据对象的取值范围及能够进行的运算</li>
</ul>
</li>
</ul>
<blockquote>
<p>动态数据结构，其数据的结构会在程序运行过程中改变，例如链表、二叉树等。</p>
<p>动态数据结构的数据空间必须采用<strong>堆存储</strong>分配策略，数据存放在<strong>堆区</strong>。</p>
<p>在C/C++中，全局变量的存储空间在静态数据区分配。</p>
</blockquote>
<h2 id="运算成分" data-numberify>运算成分<a class="anchor ms-1" href="#运算成分"></a></h2>
<p>大多数高级程序设计语言的基本运算可以分为：</p>
<ul>
<li>算术运算。</li>
<li>关系运算。</li>
<li>逻辑运算。</li>
<li>位运算。</li>
<li>&hellip;</li>
</ul>
<h2 id="控制结构" data-numberify>控制结构<a class="anchor ms-1" href="#控制结构"></a></h2>
<p>有以下三种结构来构造程序中的控制逻辑：</p>
<ul>
<li>顺序结构。</li>
<li>选择结构。</li>
<li>循环结构。</li>
</ul>
<blockquote>
<p>大多数高级语言都针对循环结构提供了<code>break</code>、<code>continue</code>等控制流跳转语句。</p>
</blockquote>
<h2 id="传输成分" data-numberify>传输成分<a class="anchor ms-1" href="#传输成分"></a></h2>
<p>程序设计语言的传输成分指明语言允许的数据传输方式，如赋值处理、数据的输入和输出等。</p>
<h2 id="函数" data-numberify>函数<a class="anchor ms-1" href="#函数"></a></h2>
<p><strong>函数定义</strong>：</p>
<ul>
<li>函数首部：
<ul>
<li>返回值类型</li>
<li>函数名</li>
<li>形参表</li>
</ul>
</li>
<li>函数体：定义函数所实现的功能。</li>
</ul>
<p><strong>函数声明</strong>：在C（C++）中，函数需要先声明后引用。</p>
<p><strong>函数调用</strong>：在调用函数中使用被调函数实现的功能。函数调用的一般形式为：</p>
<pre tabindex="0"><code>函数名(实参表)
</code></pre><p>调用函数与被调函数之间参数的传递有两种形式：</p>
<ul>
<li>
<p><strong>值调用</strong>（Call by Value）：形参是实参的一份拷贝。即实参将值传递给形参，对形参值的更改并不会作用到实参上。</p>
</li>
<li>
<p><strong>引用调用</strong>（Call by Reference）：形参是实参的一个别名。即函数中对形参的访问和修改实际上是对其相应实参所做的访问和修改。</p>
<p>引用调用下，可以实现形参和实参之间数据的双向传递。</p>
</li>
</ul>
<blockquote>
<p>在进行函数调用和返回时，由系统使用栈区来进行控制和管理。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>计算机系统篇</title>
      <link>/docs/ruan-she/computer-system/</link>
      <pubDate>Fri, 24 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/ruan-she/computer-system/</guid>
      <description><![CDATA[计算机的基本单位 位（比特） 最小数据单位 bit、b 字节 最小存储单位 byte、B 1B = 8b 千字节 KB 1KB = 1024B 兆字节 MB 1MB = 1024KB 吉字节 GB 1GB = 1024MB 太字节 TB 1TB = 1024GB 计]]></description>
      <content:encoded><![CDATA[<h1 id="计算机的基本单位" data-numberify>计算机的基本单位<a class="anchor ms-1" href="#计算机的基本单位"></a></h1>
<table>
<tr>
    <td>位（比特）<br>最小数据单位</td>
    <td><b>bit、b</b></td>
    <td></td>
</tr>
<tr>
    <td>字节<br>最小存储单位</td>
    <td>byte、B</td>
    <td>1B = 8b</td>
</tr>
<tr>
    <td>千字节</td>
    <td>KB</td>
    <td>1KB = 1024B</td>
</tr>
<tr>
    <td>兆字节</td>
    <td>MB</td>
    <td>1MB = 1024KB</td>
</tr>
<tr>
    <td>吉字节</td>
    <td>GB</td>
    <td>1GB = 1024MB</td>
</tr>
<tr>
    <td>太字节</td>
    <td>TB</td>
    <td>1TB = 1024GB</td>
</tr>
</table>
<hr>
<h1 id="计算机系统" data-numberify>计算机系统<a class="anchor ms-1" href="#计算机系统"></a></h1>
<p>计算机系统由<u>硬件</u>和<u>软件</u>组成。</p>
<p>计算机基本硬件系统：</p>
<ul>
<li>运算器</li>
<li>控制器</li>
<li>存储器</li>
<li>输入设备</li>
<li>输出设备</li>
</ul>
<hr>
<h1 id="中央处理单元" data-numberify>中央处理单元<a class="anchor ms-1" href="#中央处理单元"></a></h1>
<p>运算器、控制器等部件被集成在一起统称中央处理单元（CPU）。CPU是硬件系统的核心，用于数据的加工处理，能完成各种算术、逻辑运算及控制功能。</p>
<p>中央处理单元（CPU）负责获取程序指令、对指令进行译码并加以执行。</p>
<p>CPU的功能：</p>
<ul>
<li>
<p>程序控制：通过执行指令来控制程序的执行顺序。</p>
</li>
<li>
<p>操作控制：CPU产生每条指令的（若干）操作信号并将操作信号送往对应的部件，控制相应的部件按指令的功能要求进行操作。</p>
</li>
<li>
<p>时间控制：对各种操作进行时间上的控制，即指令执行过程中操作信号的出现时间、持续时间及出现的时间顺序都需要进行严格控制。</p>
</li>
<li>
<p>数据处理：通过对数据进行算术运算及逻辑运算等方式进行加工处理，数据加工处理的结果被人们所利用。</p>
<p>对数据的加工处理也是CPU最根本的任务。</p>
</li>
<li>
<p>对系统内部和外部的中断（异常）做出响应，进行相应的处理。</p>
</li>
</ul>
<p>CPU的组成：</p>
<ul>
<li>运算器</li>
<li>控制器</li>
<li>寄存器组</li>
<li>内部总线</li>
</ul>
<h2 id="运算器" data-numberify>运算器<a class="anchor ms-1" href="#运算器"></a></h2>
<p>运算器组成部件：</p>
<ul>
<li>
<p>算术逻辑单元（ALU）：重要组成部件。负责处理数据，实现对数据的算术运算和逻辑运算。</p>
</li>
<li>
<p>累加寄存器（AC，累加器）：是一个通用寄存器。存放操作数或者结果。</p>
<p>其功能是当运算器的算术逻辑单元执行算术或逻辑运算时，为ALU提供一个工作区。例如，在执行一个减法运算前，先将被减数取出暂存在AC中，再从内存储器中取出减数，然后同AC的内容相减，将所得的结果送回AC中。
运算的结果是放在累加器中的，运算器中至少要有一个累加寄存器。</p>
</li>
<li>
<p>数据缓冲寄存器（DR）：暂存由内存读/写的一条指令或一个数据字，将不同时间段内读/写的数据隔离开来。</p>
<p>DR的主要作用为：</p>
<ul>
<li>作为CPU和内存、外部设备之间数据传送的中转站；</li>
<li>作为CPU和内存、外围设备之间在操作速度上的缓冲；</li>
<li>在单累加器结构的运算器中，数据缓冲寄存器还可兼作为操作数寄存器。</li>
</ul>
</li>
<li>
<p>状态条件寄存器（PSW）：保存了当前指令执行完成之后的状态（标志通常分别由1位触发器保存）。通常，一个算术操作产生一个运算结果，而一个逻辑操作产生一个判决。</p>
</li>
</ul>
<h2 id="控制器" data-numberify>控制器<a class="anchor ms-1" href="#控制器"></a></h2>
<p>控制器用于控制整个CPU的工作，它决定了计算机运行过程的
自动化。它不仅要保证程序的正确执行，而且要能够处理异常事件。</p>
<p>指令控制逻辑要完<u>取指令</u>、<u>分析指令</u>和<u>执行指令</u>的操作，其过程分为<u>取指令</u>、<u>指令译码</u>、<u>按指令操作码执行</u>、<u>形成下一条指令地址</u>等步骤。</p>
<ul>
<li>
<p>指令寄存器（IR）：暂存要执行的指令，该指令从内存中获取（通过缓冲寄存器）。</p>
<p>当CPU执行一条指令时：</p>
<ol>
<li>把指令从内存储器取到缓冲寄存器中。</li>
<li>送入IR暂存。</li>
<li>指令译码器根据IR的内容产生各种微操作指令，控制其他的组成部件工作，完成所需的功能。</li>
</ol>
</li>
<li>
<p>程序计数器（PC，指令计数器）：具有寄存信息和计数两种</p>
<ol>
<li>在程序开始执行前，将程序的起始地址送入PC。
该地址在程序加载到内存时确定，因此PC的内容即是程序第一条指令的地址。</li>
<li>执行指令时，CPU自动修改PC的内容，以便使其保持的总是将要执行的下一条指令的地址。</li>
</ol>
<p>由于大多数指令都是按顺序来执行的，所以修改的过程通常只是简单地对PC加1。</p>
<p>执行转移指令时，后继指令的地址根据当前指令的地址加上一个向前或向后转移的位移量得到，或者根据转移指令给出的直接转移的地址得到。</p>
</li>
<li>
<p>地址寄存器（AR）：保存当前CPU所访问的内存单元的地址。</p>
</li>
<li>
<p>指令译码器（ID）：指令包含操作码和地址码两部分，而指令译码器就是对指令中的操作码字段进行分析解释，识别该指令规定的操作，向操作控制器发出具体的控制信号，控制各部件工作，完成所需的功能。</p>
</li>
</ul>
<hr>
<h1 id="数据表示" data-numberify>数据表示<a class="anchor ms-1" href="#数据表示"></a></h1>
<h2 id="原码" data-numberify>原码<a class="anchor ms-1" href="#原码"></a></h2>
<p>原码表示法又叫符号加绝对值表示法。最高位为符号位，0表示正号，1表示负号，其余的n-1位表示数值的绝对值。</p>
<p>原码特点：</p>
<ul>
<li>0的表示不唯一（有正负0）；</li>
<li>加、减运算方式不统一；</li>
<li>需额外对符号位进行处理，不利于硬件设计；</li>
<li>当 $a &lt; b$ 时，实现 $a-b$ 比较困难。</li>
</ul>
<h2 id="反码" data-numberify>反码<a class="anchor ms-1" href="#反码"></a></h2>
<p>最高位为符号位，0表示正号，1表示负号，其余的n-1位表示数值的绝对值。正数的反码与原码相同，负数的反码则是除符号位以外其余各位按位取反。</p>
<p>原码特点：0的表示不唯一。</p>
<h2 id="补码" data-numberify>补码<a class="anchor ms-1" href="#补码"></a></h2>
<p>计算机中的补码是模2补码</p>
<p>概念：在一个模运算（Moduler Arithmetic）系统中，同余（Congruence Modulo）的数等价。</p>
<p>补码的定义：有 $n$ 位时，$[X]_补=(2^n+X)\mod{2^n}\quad (-2^{n-1}\leq X&lt;2^{n-1})$。</p>
<ul>
<li>
<p>当 $X&lt;0$ 时，补码有两种求法：</p>
<ul>
<li>各位取反，末位加 1。</li>
<li>从第 2 个 1 开始往右各位取反。</li>
</ul>
</li>
<li>
<p>当 $X&gt;0$ 时，补码与原码相同。</p>
</li>
</ul>
<p>补码的减法：$Y-X=Y+[-X]_补$。</p>
<p>特殊的补码：</p>
<ol>
<li>
<p>$[-2^{n-1}]_补=(2^n-2^{n-1})\mod{2^n}=(10\ldots0)_2\ (n-1 个0)$。</p>
<p>这个数的最高位（符号位）即表示符号，又表示数值。如，-128。</p>
</li>
<li>
<p>$[-1]_补=2^n-1=(11\ldots1)_2\ (n个1)$。</p>
</li>
<li>
<p>$[+0]_补=[-0]_补=(00\ldots0)\ (n个0)$。
补码的0表示唯一。</p>
</li>
</ol>
<h2 id="移码" data-numberify>移码<a class="anchor ms-1" href="#移码"></a></h2>
<ul>
<li>移码就是将每个数值加上一个偏置常数（Excess/Bias）。</li>
<li>通常，当编码位数为 $n$ 时，bias 取 $2^{n-1}$ 或 $2^{n-1}-1$。</li>
<li>移码可以方便地进行大小的比较。</li>
</ul>
<p>移码可以看成是在其补码的基础上对符号位取反。移码的0表示唯一。</p>
<blockquote>
<p>其实（个人认为）根据补码和移码的定义，可以将补码当作特殊的移码。其bias为$2^n$。</p>
</blockquote>
<h2 id="各种码制带符号数的范围" data-numberify>各种码制带符号数的范围<a class="anchor ms-1" href="#各种码制带符号数的范围"></a></h2>
<p><picture><img class="img-fluid " alt="带符号数的范围" src="/docs/ruan-she/computer-system/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E8%8C%83%E5%9B%B4.png" loading="lazy" width="1174" height="273" />
</picture>

</p>
<h2 id="浮点数" data-numberify>浮点数<a class="anchor ms-1" href="#浮点数"></a></h2>
<p>浮点数使用两个定点数来分别表示实数的尾数（F）和阶码（E）。其一般形式为：$N=2^E \times F$。</p>
<ul>
<li>一个数的浮点表示不是唯一的。小数点位置改变，阶码也随着相应改变。</li>
<li>浮点数所能表示的数值范围主要由阶码决定，所表示数值的精度则由尾数决定。</li>
</ul>
<p>规格化浮点数：</p>
<ul>
<li>尾数$M \ge 0$，其规格化尾数形式为$M=0.\times\times\times$，$\times$可为0也可为1。即$M$限定在了$[0.5,1]$。</li>
<li>尾数$M \le 0$，其规格化尾数形式为$M=1.\times\times\times$，$\times$可为0也可为1。即$M$限定在了$[-1,-0.5]$。</li>
</ul>
<p>一般浮点数阶码用R位的移码表示，尾数用M位的补码表示。这种表示的数值范围为：</p>
<p>$$
-1 \times 2^{(2^{R-1}-1)} \sim +(1-2^{-M+1}) \times 2^{(2^{R-1}-1)}
$$</p>
<p>现在所有通用计算机都采用 IEEE 754 来表示浮点数。IEEE 754 的尾数用原码表示，阶码还是用移码表示。</p>
<hr>
<h1 id="寻址方式" data-numberify>寻址方式<a class="anchor ms-1" href="#寻址方式"></a></h1>
<ul>
<li>立即寻址：操作数就包含在指令中。</li>
<li>直接寻址：操作数在内存，指令给出操作数的地址。</li>
<li>寄存器寻址：操作数在寄存器，指令给出操作数的寄存器名（地址）。</li>
<li>寄存器间接寻址：操作数在内存，寄存器存放操作数的地址，指令给出存放操作数地址的寄存器地址。</li>
<li>间接寻址：指令中给出操作数地址（操作数地址在内存中）的地址。</li>
<li>相对寻址：指令地址码给出的是一个偏移量（可正可负），操作数地址等于本条指令的地址加上该偏移量。</li>
<li>变址寻址：操作数地址等于变址寄存器的内容加偏移量。</li>
</ul>
<hr>
<h1 id="校验码" data-numberify>校验码<a class="anchor ms-1" href="#校验码"></a></h1>
<p>码距，是指一个编码系统中任意两个合法编码之间至少有多少个二进制位不同。码距为n的编码方案，在该编码方案中任意两个合法编码之间至少有n个二进制位不同。例如值1和2的编码分别为<code>0000 0001</code>和<code>0000 0010</code>他们最后两位不同，所以，码距为2。</p>
<ul>
<li>一个编码系统的码距$\ge 2$时，该编码系统具有<u>检错能力</u>；</li>
<li>一个编码系统的码距$\ge 3$时，该编码系统才<u>可能有纠错能力</u>。</li>
</ul>
<p>即，一个校验码要想能够检错和纠错那么它的码距至少是3。</p>
<h2 id="奇偶校验码" data-numberify>奇偶校验码<a class="anchor ms-1" href="#奇偶校验码"></a></h2>
<p>奇偶校验（Parity Codes）是通过在编码中增加一位校验位来<u>使编码中1的个数为奇数（奇校验）或者为偶数（偶校验）</u>。但该编码只能检错，但不能纠错。</p>
<p>奇偶校验：</p>
<ul>
<li>
<p>码距为2。</p>
</li>
<li>
<p>仅检测出代码中奇数位数（奇数个0或1发生错误），不能发现偶数位数出错。</p>
<pre tabindex="0"><code>奇数 + 偶数 = 奇数
奇数 + 奇数 = 偶数
偶数 + 偶数 = 偶数
偶数 + 奇数 = 奇数
</code></pre><p>即奇数可以改变奇偶性，偶数不能，所以当代码中偶数位出错时，奇偶性不变，无法发现错误。</p>
</li>
<li>
<p>常用的奇偶校验码有3种：水平奇偶校验码、垂直奇偶校验码和水平垂直校验码。</p>
</li>
</ul>
<h2 id="海明码" data-numberify>海明码<a class="anchor ms-1" href="#海明码"></a></h2>
<p>海明码（Hamming Code）是一种利用奇偶性来<u>检错和纠错</u>的校验方法。海明码是在数据位之间的特定位置上插入k个校验位，通过扩大码距来实现检错和纠错。设数据位是$n$位，校验位是$k$位，则$n$和$k$必须满足以下关系：</p>
<p>$$
2^k-1 \ge n+k
$$</p>
<blockquote>
<p>该公式的字面意思为，$k$个校验位的最大值（$k$个校验位都为1），要比海明码的位数（$n+k$）要大。
海明码的码距为3。</p>
</blockquote>
<p>海明码的编码规则如下：</p>
<ul>
<li>
<p>$k$个校验位：$P_k, P_{k-1}, \cdots, P_1$。</p>
</li>
<li>
<p>$n$个数据位：$D_{n-1}, D_{n-2}, \cdots, D_1, D_0$。</p>
</li>
<li>
<p>对应的海明码：$H_{n+k}, H_{n+k-1}, \cdots, H_1$。</p>
<ul>
<li>$H_j = P_i, j=2^{i-1}$。</li>
<li>数据位依序插入到海明码中剩下的位置。</li>
</ul>
</li>
</ul>
<p>海明码中任一位都是由若干个校验位来检验：</p>
<ul>
<li>校验数据位时：被校验的海明位的下标等于所有参与校验该位的校验位的下标之和。</li>
<li>校验位由自身校验。</li>
</ul>
<p>Example：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/computer-system/uTools_1679983905932.png" loading="lazy" width="1023" height="1049" />
</picture>

</p>
<ul>
<li>
<p>偶校验：$G_4G_3G_2G_1={(0000)}_{2}$则表示数据无错误，否则表示接收到的数据有错误。</p>
<p>若出错，$G_4G_3G_2G_1$的十进制值指出来出错位置。如$G_4G_3G_2G_1=1010$，说明$H_{10}(D_5)$出错，将其取反即可纠错。</p>
</li>
<li>
<p>奇校验：$G_4G_3G_2G_1=(1111)_2$则表示数据无错误，否则表示接收到的数据有错误。</p>
</li>
</ul>
<h2 id="循环冗余码" data-numberify>循环冗余码<a class="anchor ms-1" href="#循环冗余码"></a></h2>
<p>循环冗余校验码（Cyclic Redundancy Check，CRC）广泛应用于数据通信领域和磁介质存储系统中。它利用生成多项式为k个数据位产生个校验位来进行编码，其编码长度为k+r。CRC的代码格式为：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/computer-system/uTools_1679825785079.png" loading="lazy" width="613" height="92" />
</picture>

</p>
<p>若CRC码的字长为n，又可称其为（n,k）码，则：</p>
<ul>
<li>
<p>左边为信息码（数据），占k位；</p>
</li>
<li>
<p>右边为校验码，占n-k位。</p>
<p>校验码是由信息码产生的，校验码位数越多，该代码的校验能力就越强。</p>
</li>
</ul>
<p>在求CRC编码时，采用的是模2运算。模2加减运算的规则是按位运算，不发生借位和进位。</p>
<p>CRC码距为2，可以检错不能纠错。</p>
<hr>
<h1 id="计算机指令集" data-numberify>计算机指令集<a class="anchor ms-1" href="#计算机指令集"></a></h1>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">RISC<br>精简指令集（计算机）</th>
<th style="text-align:center">CISC<br>复杂指令集（计算机）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">指令种类</td>
<td style="text-align:center">少、精简</td>
<td style="text-align:center">多、复杂</td>
</tr>
<tr>
<td style="text-align:center">指令复杂度</td>
<td style="text-align:center">低（简单）</td>
<td style="text-align:center">高（复杂）</td>
</tr>
<tr>
<td style="text-align:center">指令长度</td>
<td style="text-align:center">固定</td>
<td style="text-align:center">变化</td>
</tr>
<tr>
<td style="text-align:center">寻址方式</td>
<td style="text-align:center">少</td>
<td style="text-align:center">复杂多样</td>
</tr>
<tr>
<td style="text-align:center">实现（译码方式）</td>
<td style="text-align:center">硬布线控制逻辑（组合逻辑控制器）</td>
<td style="text-align:center">微程序控制技术</td>
</tr>
<tr>
<td style="text-align:center">通用寄存器数量</td>
<td style="text-align:center">多、大量</td>
<td style="text-align:center">一般</td>
</tr>
<tr>
<td style="text-align:center">流水线技术</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">不支持</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="流水线技术" data-numberify>流水线技术<a class="anchor ms-1" href="#流水线技术"></a></h1>
<p>计算机中的流水线技术（Pipelining）是把一个重复的过程分解为若干个子过程，每个子过程与其他子过程并行进行。</p>
<p>若要执行$n$条指令：</p>
<ul>
<li>
<p>顺序执行总时间：</p>
<p>$$
顺序执行总时间=单条指令执行的时间\times n
$$</p>
</li>
<li>
<p>流水线执行总时间：</p>
<p>$$
流水线执行总时间=一条指令执行的时间+流水线周期 \times (n-1)
$$</p>
<p>流水线（操作）周期为执行时间最长的一段操作的时间。</p>
</li>
<li>
<p>连续输入$n$条指令的吞吐率：</p>
<p>$$
吞吐率=\cfrac {n}{总执行时间}
$$</p>
<p>如果是流水线的吞吐率，则总执行时间为流水线执行总时间。
流水线的吞吐率是最长流水段操作时间的倒数。即：</p>
<p>$$
最长流水段操作时间=\cfrac {流水线执行总时间}{n}
$$</p>
</li>
<li>
<p>加速比：</p>
<p>$$
加速比 = \cfrac{顺序执行总时间}{流水线执行总时间}
$$</p>
</li>
</ul>
<hr>
<h1 id="存储器" data-numberify>存储器<a class="anchor ms-1" href="#存储器"></a></h1>
<p>按存储器所处位置可分为：</p>
<ul>
<li>内存（主存）：在主机内或主板上，存放机器当前运行所需的程序和数据，以便向CPU提供信息。（相对外存）容量小、速度快。</li>
<li>外存（辅存）：存放当前不参加运行的大量信息，在需要时调入内存。</li>
</ul>
<p>按存储器的构成材料分类：</p>
<ul>
<li>磁存储器</li>
<li>半导体存储器</li>
<li>光存储器</li>
</ul>
<p>按存储器工作方式：</p>
<ul>
<li>读/写存储器（RAM）。</li>
<li>只读存储器：ROM、PROM、EPROM、EEPROM等。
<ul>
<li>固定只读存储器（ROM）：厂家生产时就写好数据在其中。只能读（用户）不能写。一般用于存放BIOS和微程序控制。</li>
<li>可编程读只读存储器（PROM）：其内容可以由用户一次性地写入，写入后不能再修改。</li>
</ul>
</li>
</ul>
<p>按访问方式：</p>
<ul>
<li>
<p>按地址访问：</p>
<p>可分为：</p>
<ul>
<li>随机存储器</li>
<li>顺序存储器</li>
<li>直接存储器</li>
</ul>
</li>
<li>
<p>按内容访问：例如相联存储器。</p>
</li>
</ul>
<p>虚拟存储器由主存与辅存组成。</p>
<p>DRAM（动态随机存储器）构成主存 DRAM需要周期性地刷新保持信息。</p>
<p>SRAM（静态随机存储器）构成Cache（缓存）。</p>
<p>闪存类似U盘，掉电后信息不会丢失。以块为单位进行删除。闪存是EPROM的一种类型，可以代替ROM存储器。闪存不可以代替主存。</p>
<h2 id="缓存" data-numberify>缓存<a class="anchor ms-1" href="#缓存"></a></h2>
<p>高速缓存用来存放当前最活跃的程序和数据，其特点是：</p>
<ul>
<li>位于CPU与主存之间；容量一般在几千字节到几兆字节之间；</li>
<li>速度一般比主存快5~10倍，由快速半导体存储器构成；</li>
<li>其内容是主存局部域的副本，对程序员来说是透明的（看不到或可以忽略）。</li>
</ul>
<p>Cache存储器部分用来存放主存的部分拷贝（副本）信息。控制部分的功能是判断CPU要访问的信息是否在Cache存储器中，若在即为命中，若不在则没有命中。命中时直接对Cache存储器寻址；未命中时，要按照替换原则决定主存的一块信息放到Cache存储器的哪一块里。</p>
<h2 id="缓存地址映射" data-numberify>缓存地址映射<a class="anchor ms-1" href="#缓存地址映射"></a></h2>
<p>CPU工作时，送出的是主存单元的地址。为从Cache存储器中读/写信息，就需要将主存地址转成Cache存储器的地址，这种地址转换即为地址映像。</p>
<p>高速缓存中的地址映像方法：</p>
<ul>
<li>
<p>直接映像：主存的块与Cache块的对应关系是固定的。冲突多、关系固定。</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/computer-system/uTools_1679884025087.png" loading="lazy" width="825" height="526" />
</picture>

</p>
</li>
<li>
<p>全相联映像：允许主存的任一块调入Cache存储器的任一块。冲突少、关系不固定。</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/computer-system/uTools_1679884252415.png" loading="lazy" width="730" height="538" />
</picture>

</p>
</li>
<li>
<p>组相联映像：将缓存和主存先分为组，组下再分为块。组与组采用直接映像，组内的块采用全相联映像。冲突较少，是直接映像与全相联映像的折中。</p>
</li>
</ul>
<blockquote>
<p>发生块冲突从多到少的顺序：直接映像 &gt; 组相联映像 &gt; 全相联映像。</p>
<p>地址映像都是由硬件自动完成。</p>
</blockquote>
<hr>
<h1 id="中断" data-numberify>中断<a class="anchor ms-1" href="#中断"></a></h1>
<p>计算机在执行程序过程中，当遇到急需处理的事件时，暂停当前正在运行的程序，转去执行有关服务程序，处理完后自动返回源程序，这个过程称为中断。</p>
<p>中断是一种非常重要的技术，<u>输入输出</u>设备和<u>主机交换数据</u>、<u>分时操作</u>、<u>实时系统</u>、<u>计算机网络</u>和<u>分布式计算机系统</u>中都要用到这种技术。为了提高响应中断的速度，通常把所有中断服务程序的入口地址（或称为中断向量）汇集为中断向量表。</p>
<h2 id="输入输出控制方式" data-numberify>输入输出控制方式<a class="anchor ms-1" href="#输入输出控制方式"></a></h2>
<p>程序查询方式（程序直接控制方式）：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/computer-system/uTools_1679888001780.png" loading="lazy" width="754" height="1174" />
</picture>

</p>
<ul>
<li>CPU和I/O只能串行工作。CPU需要一直轮询检查，长期处于忙等状态，CPU利用率低。</li>
<li>一次只能读/写一个字。</li>
<li>由CPU将数放入内存。</li>
</ul>
<p>中断驱动方式：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/computer-system/uTools_1679888578058.png" loading="lazy" width="787" height="1134" />
</picture>

</p>
<ul>
<li>I/O设备通过中断信号主动向CPU报告I/O操作已完成。</li>
<li>CPU和I/O可并行工作。</li>
<li>CPU利用率得到提升。</li>
<li>一次只能读/写一个字。</li>
<li>由CPU将数据放入内存。</li>
</ul>
<p>DMA方式（直接存储器存储方式）：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/computer-system/uTools_1679888972074.png" loading="lazy" width="816" height="723" />
</picture>

</p>
<ul>
<li>CPU和I/O可并行工作。</li>
<li>仅在传送数据块多开始和结束时才需要CPU的干预。</li>
<li>由外设直接将数据放入内存。</li>
<li>一次读写的单位为&quot;块&quot;而不是字。</li>
</ul>
<p>DMA传输数据比中断驱动方式传输数据要快一点。</p>
<hr>
<h1 id="总线" data-numberify>总线<a class="anchor ms-1" href="#总线"></a></h1>
<p>总线是连接计算机有关部件的一组信号线，是计算机中用来传送信息代码的公共通道。</p>
<p>采用总线结构主要有以下优点：</p>
<ul>
<li>简化系统结构，便于系统设计制造；</li>
<li>大大减少了连线数目，便于布线，减小体积，提高系统的可靠性；</li>
<li>便于接口设计，所有与总线连接的设备均采用类似的接口；</li>
<li>便于系统的扩充、更新与灵活配置，易于实现系统的模块化；</li>
<li>便于设备的软件设计；</li>
<li>便于故障诊断和维修，同时也降低了成本。</li>
</ul>
<p>在计算机系统中采用总线结构，便于实现系统的积木化构造，同时可以减少信息传输线的数量。</p>
<p>微机中的总线分为：</p>
<ul>
<li>数据总线</li>
<li>地址总线</li>
<li>控制总线</li>
</ul>
<p>常见总线：</p>
<ul>
<li>ISA总线。</li>
<li>EISA总线。</li>
<li>PCI总线：PCI总线是目前微型机上广泛采用的内总线，采用并行传输方式。</li>
<li>PCI Express 总线。</li>
<li>前端总线。</li>
<li>RS-232C。</li>
<li>SCSI总线：小型计算机系统接口（SCSI）是一条并行外总线。</li>
<li>SATA。</li>
<li>USB。</li>
<li>IEEE-1394。</li>
<li>IEEE-488总线。</li>
</ul>
<p>地址总线宽度：例如，内存容量4GB，$4GB=2^{2+10+10+10}B=2^32B$。所以内存单元的地址宽度为32位，即地址总线宽度为32位。</p>
<p>数据总线宽度：例如字长为32的机器，那么其数据总线的宽度要为32。</p>
<hr>
<h1 id="加密技术与认证技术" data-numberify>加密技术与认证技术<a class="anchor ms-1" href="#加密技术与认证技术"></a></h1>
<h2 id="加密技术" data-numberify>加密技术<a class="anchor ms-1" href="#加密技术"></a></h2>
<p>加密技术用于防止第三方窃听。</p>
<ul>
<li>
<p>对称加密：只有一把密钥。加密和解密用同一把密钥。</p>
<ul>
<li>密钥分发有缺陷。</li>
<li>加密解密速度很快。</li>
<li>适合加量大量明文数据。</li>
</ul>
</li>
<li>
<p>非对称加密：</p>
<ul>
<li>加密和解密不是同一把密钥。</li>
<li>一共有两把密钥，分别是公钥和私钥。</li>
<li>用公钥加密只能用私钥解密，用私钥加密只能用公钥解密。</li>
<li>不能通过一把密钥推出另一把密钥。</li>
<li>用接收方的公钥加密明文可以实现防止窃听的效果。</li>
<li>密钥分发没有缺陷。</li>
<li>加密解密速度很慢。</li>
</ul>
</li>
</ul>
<h2 id="认证技术" data-numberify>认证技术<a class="anchor ms-1" href="#认证技术"></a></h2>
<p>认证技术用于防止篡改、假冒和否认。</p>
<p>摘要（防止篡改）：将发送的明文进行Hash算法后得到摘要放在密文后一起发送过去，与接收方解密后的明文进行相同的Hash算法得到的摘要进行对比如果一致，侧没有篡改，否则有篡改。</p>
<p>数字签名（防止假冒和否认）：</p>
<p>发送方用自己的<u>私钥对摘要进行签名</u>（加密）。得到数字签名放在密文后一起发送过去。</p>
<p>接收方用发送方的<u>公钥对数字签名进行验证</u>（解密）。如果验证成功则该消息没有被假冒且不能否认，否则该消息的真实性为假冒发送。</p>
<h2 id="数字证书" data-numberify>数字证书<a class="anchor ms-1" href="#数字证书"></a></h2>
<p>数字证书是第三方CA机构使用自己的私钥对用户的公钥签名（加密），来保证这个公钥不被篡改。然后接收方用CA的公钥验证（解密），从而得到用户的公钥。</p>
<h2 id="加密算法" data-numberify>加密算法<a class="anchor ms-1" href="#加密算法"></a></h2>
<p>对称密钥（私钥、私有密钥加密）算法（共享密钥加密算法）：</p>
<ul>
<li>DES</li>
<li>3DES</li>
<li>RC-5</li>
<li>IDEA</li>
<li>AES</li>
<li>RC4</li>
</ul>
<p>非对称密钥（公钥、公开密钥加密）算法：</p>
<ul>
<li>RSA</li>
<li>ECC</li>
<li>DSA</li>
</ul>
<p>其他加密算法：</p>
<ul>
<li>
<p>Hash函数</p>
</li>
<li>
<p>SHA-1安全散列算法</p>
</li>
<li>
<p>MD5摘要算法：</p>
<ul>
<li>输出结果为128位</li>
<li>摘要算法防止发送的报文被篡改</li>
</ul>
</li>
</ul>
<p>加密可以阻止被动攻击，认证可以阻止主动攻击（不可以处理被动攻击）。</p>
<hr>
<h1 id="系统可靠度" data-numberify>系统可靠度<a class="anchor ms-1" href="#系统可靠度"></a></h1>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/computer-system/%E4%B8%B2%E8%81%94%E7%B3%BB%E7%BB%9F.png" loading="lazy" width="1157" height="400" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/computer-system/%E5%B9%B6%E8%81%94%E7%B3%BB%E7%BB%9F.png" loading="lazy" width="1133" height="376" />
</picture>

</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Swagger（Knife4j） API 文档</title>
      <link>/docs/spring/springboot/swagger_knife4j/</link>
      <pubDate>Tue, 21 Mar 2023 14:10:06 +0000</pubDate>
      
      <guid>/docs/spring/springboot/swagger_knife4j/</guid>
      <description><![CDATA[导入依赖 Knife4j的依赖坐标如下： &lt;dependency&gt; &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt; &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/dependency&gt; 配置类 编写（或修改）配置类： @Configuration @EnableSwagger2 // 开启Swagger2 @EnableKnife4j // 开启Knife4j public class WebMvcConfig extends WebMvcConfigurationSupport { @Bean public]]></description>
      <content:encoded><![CDATA[<h1 id="导入依赖" data-numberify>导入依赖<a class="anchor ms-1" href="#导入依赖"></a></h1>
<p>Knife4j的依赖坐标如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.github.xiaoymin<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>knife4j-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.0.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="配置类" data-numberify>配置类<a class="anchor ms-1" href="#配置类"></a></h1>
<p>编写（或修改）配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableSwagger2</span> <span class="c1">// 开启Swagger2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@EnableKnife4j</span>  <span class="c1">// 开启Knife4j
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebMvcConfig</span> <span class="kd">extends</span> <span class="n">WebMvcConfigurationSupport</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Docket</span> <span class="nf">createRestApi</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置文档类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="k">new</span> <span class="n">Docket</span><span class="o">(</span><span class="n">DocumentationType</span><span class="o">.</span><span class="na">SWAGGER_2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">apiInfo</span><span class="o">(</span><span class="n">apiInfo</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">select</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 设置Controller的包名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">.</span><span class="na">apis</span><span class="o">(</span><span class="n">RequestHandlerSelectors</span><span class="o">.</span><span class="na">basePackage</span><span class="o">(</span><span class="s">&#34;com.linner.reggie.controller&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">paths</span><span class="o">(</span><span class="n">PathSelectors</span><span class="o">.</span><span class="na">any</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * API文档描述
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">ApiInfo</span> <span class="nf">apiInfo</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">ApiInfoBuilder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 文档标题
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="s">&#34;瑞吉外卖&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 文档版本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">.</span><span class="na">version</span><span class="o">(</span><span class="s">&#34;1.0&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 文档描述
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">.</span><span class="na">description</span><span class="o">(</span><span class="s">&#34;瑞吉外卖接口文档&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 设置静态资源映射
</span></span></span><span class="line"><span class="cl"><span class="cm">     * &lt;p&gt;放行静态页面资源&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param registry
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="n">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// API文档的静态资源映射
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">&#34;doc.html&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">&#34;classpath:/META-INF/resources/&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">&#34;/webjars/**&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">&#34;classpath:/META-INF/resources/webjars/&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="资源放行" data-numberify>资源放行<a class="anchor ms-1" href="#资源放行"></a></h1>
<p>放行文档静态页面请求。必须确保以下静态资源路径可以被访问，不被拦截：</p>
<pre tabindex="0"><code>/doc.html
/webjars/**
/swagger-resources
/v2/api-docs
</code></pre><hr>
<h1 id="api-文档注解" data-numberify>API 文档注解<a class="anchor ms-1" href="#api-文档注解"></a></h1>
<table>
<thead>
<tr>
<th style="text-align:center">注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>@Api</code></td>
<td>用在请求的类上（例如Controller，使用<code>tags</code>元素指定文档的标签。</td>
</tr>
<tr>
<td style="text-align:center"><code>@ApiModel</code></td>
<td>用在类上（例如实体类），表示一个返回响应数据的信息。</td>
</tr>
<tr>
<td style="text-align:center"><code>@ApiModelProperty</code></td>
<td>用在属性上，描述响应类（实体类）的属性。</td>
</tr>
<tr>
<td style="text-align:center"><code>@ApiOperation</code></td>
<td>用在请求的方法上，说明方法的用途、作用。</td>
</tr>
<tr>
<td style="text-align:center"><code>@ApiImplicitParams</code></td>
<td>用在请求的方法上，表示一组参数说明。</td>
</tr>
<tr>
<td style="text-align:center"><code>@ApiImplicitParam</code></td>
<td>用在<code>@ApiImplicitParams</code>注解中，指定一个请求参数的各个方面。<br>如果只用说明一个参数的话，<code>@ApiImplicitParam</code>可以单独用在方法上。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：@ApiImplicitParam不能对实体类进行定义，否则访问API文档时/v2/api-docs会出现接口异常（500状态码）。</p>
</blockquote>
<hr>
<h1 id="示例" data-numberify>示例<a class="anchor ms-1" href="#示例"></a></h1>
<p>标识响应数据信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> 菜品
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Data</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ApiModel</span><span class="o">(</span><span class="s">&#34;菜品&#34;</span><span class="o">)</span>   <span class="c1">// 标识实体类的名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dish</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">&#34;菜品ID&#34;</span><span class="o">)</span>     <span class="c1">// 标识实体类属性的名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//菜品名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">&#34;菜品名称&#34;</span><span class="o">)</span>   <span class="c1">// 标识实体类属性的名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//菜品分类id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">&#34;菜品分类ID&#34;</span><span class="o">)</span> <span class="c1">// 标识实体类属性的名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">Long</span> <span class="n">categoryId</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//菜品价格
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">&#34;菜品价格&#34;</span><span class="o">)</span>   <span class="c1">// 标识实体类属性的名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">BigDecimal</span> <span class="n">price</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//商品码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">&#34;商品码&#34;</span><span class="o">)</span>     <span class="c1">// 标识实体类属性的名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">code</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//图片
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">&#34;菜品图片&#34;</span><span class="o">)</span>   <span class="c1">// 标识实体类属性的名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">image</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//描述信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">&#34;描述信息&#34;</span><span class="o">)</span>   <span class="c1">// 标识实体类属性的名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">description</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//0 停售 1 起售
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">&#34;商品状态&#34;</span><span class="o">)</span>   <span class="c1">// 标识实体类属性的名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">status</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//顺序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">&#34;展示顺序&#34;</span><span class="o">)</span>   <span class="c1">// 标识实体类属性的名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">sort</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>标识请求类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 菜品管理
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/dish&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Api</span><span class="o">(</span><span class="n">tags</span> <span class="o">=</span> <span class="s">&#34;菜品管理&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DishController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">DishService</span> <span class="n">dishService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">DishFlavorService</span> <span class="n">dishFlavorService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">CategoryService</span> <span class="n">categoryService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RedisTemplate</span> <span class="n">redisTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 新增菜品
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param dishDto
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PostMapping</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ApiOperation</span><span class="o">(</span><span class="s">&#34;新增菜品&#34;</span><span class="o">)</span>   <span class="c1">// 标识API方法，对API请求进行说明
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="n">R</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">save</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">DishDto</span> <span class="n">dishDto</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 清理某个分类下面的菜品缓存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getRedisKey</span><span class="o">(</span><span class="n">dishDto</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">dishService</span><span class="o">.</span><span class="na">saveWithFlavor</span><span class="o">(</span><span class="n">dishDto</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">R</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="s">&#34;新增菜品成功&#34;</span><span class="o">);</span>   <span class="c1">// 返回一个请求成功的响应体信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 菜品信息分页查询
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param page
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param pageSize
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/page&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ApiOperation</span><span class="o">(</span><span class="s">&#34;菜品信息分页查询&#34;</span><span class="o">)</span>   <span class="c1">// 标识API方法，对API请求进行说明
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@ApiImplicitParams</span><span class="o">({</span>    <span class="c1">// 标识API方法，对API请求参数进行说明
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">             * @ApiImplicitParam 对请求参数进行具体的说明，它的属性有：
</span></span></span><span class="line"><span class="cl"><span class="cm">             * - name：标识请求参数的名称，与API方法的参数名对应
</span></span></span><span class="line"><span class="cl"><span class="cm">             * - value：对name对应的参数进行说明
</span></span></span><span class="line"><span class="cl"><span class="cm">             * - required：对name对应的参数是否为必须的请求参数进行说明
</span></span></span><span class="line"><span class="cl"><span class="cm">             *   - true：值为true表示该参数是请求时必须携带的
</span></span></span><span class="line"><span class="cl"><span class="cm">             *   - false：值为false表示在进行请求时，可以不必携带该参数
</span></span></span><span class="line"><span class="cl"><span class="cm">             */</span>
</span></span><span class="line"><span class="cl">            <span class="nd">@ApiImplicitParam</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;page&#34;</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;页码&#34;</span><span class="o">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="nd">@ApiImplicitParam</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;pageSize&#34;</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;每页展示数据条数&#34;</span><span class="o">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="nd">@ApiImplicitParam</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;要搜索的菜品名称&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">R</span><span class="o">&lt;</span><span class="n">Page</span><span class="o">&gt;</span> <span class="nf">page</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pageSize</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 构造分页构造器对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Page</span><span class="o">&lt;</span><span class="n">Dish</span><span class="o">&gt;</span> <span class="n">pageInfo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Page</span><span class="o">&lt;&gt;(</span><span class="n">page</span><span class="o">,</span> <span class="n">pageSize</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Page</span><span class="o">&lt;</span><span class="n">DishDto</span><span class="o">&gt;</span> <span class="n">dishDtoPage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Page</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 条件构造器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">LambdaQueryWrapper</span><span class="o">&lt;</span><span class="n">Dish</span><span class="o">&gt;</span> <span class="n">queryWrapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LambdaQueryWrapper</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 添加过滤条件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">queryWrapper</span><span class="o">.</span><span class="na">like</span><span class="o">(</span><span class="n">name</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">,</span> <span class="n">Dish</span><span class="o">::</span><span class="n">getName</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 添加排序条件（降序排序）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">queryWrapper</span><span class="o">.</span><span class="na">orderByDesc</span><span class="o">(</span><span class="n">Dish</span><span class="o">::</span><span class="n">getUpdateTime</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// isDeleted不为1（为1表示被删除）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">queryWrapper</span><span class="o">.</span><span class="na">ne</span><span class="o">(</span><span class="n">Dish</span><span class="o">::</span><span class="n">getIsDeleted</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行分页查询
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">dishService</span><span class="o">.</span><span class="na">page</span><span class="o">(</span><span class="n">pageInfo</span><span class="o">,</span> <span class="n">queryWrapper</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 对象拷贝
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">BeanUtils</span><span class="o">.</span><span class="na">copyProperties</span><span class="o">(</span><span class="n">pageInfo</span><span class="o">,</span> <span class="n">dishDtoPage</span><span class="o">,</span> <span class="s">&#34;records&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">Dish</span><span class="o">&gt;</span> <span class="n">records</span> <span class="o">=</span> <span class="n">pageInfo</span><span class="o">.</span><span class="na">getRecords</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">DishDto</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">records</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">((</span><span class="n">item</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">DishDto</span> <span class="n">dishDto</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DishDto</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">BeanUtils</span><span class="o">.</span><span class="na">copyProperties</span><span class="o">(</span><span class="n">item</span><span class="o">,</span> <span class="n">dishDto</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">Long</span> <span class="n">categoryId</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="na">getCategoryId</span><span class="o">();</span> <span class="c1">// 分类id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Category</span> <span class="n">category</span> <span class="o">=</span> <span class="n">categoryService</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">categoryId</span><span class="o">);</span>    <span class="c1">// 根据id查询分类对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">category</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">String</span> <span class="n">categoryName</span> <span class="o">=</span> <span class="n">category</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                <span class="n">dishDto</span><span class="o">.</span><span class="na">setCategoryName</span><span class="o">(</span><span class="n">categoryName</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">dishDto</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">dishDtoPage</span><span class="o">.</span><span class="na">setRecords</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">R</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="n">dishDtoPage</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据id查询菜品全部信息（包括口味）
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param id
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ApiOperation</span><span class="o">(</span><span class="s">&#34;根据id查询菜品全部信息（包括口味）&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果方法仅有一个参数，可以使用一个@ApiImplicitParam标识，无需使用@ApiImplicitParams
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@ApiImplicitParam</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;id&#34;</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;要查询的菜品ID&#34;</span><span class="o">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">R</span><span class="o">&lt;</span><span class="n">DishDto</span><span class="o">&gt;</span> <span class="nf">get</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">DishDto</span> <span class="n">dishDto</span> <span class="o">=</span> <span class="n">dishService</span><span class="o">.</span><span class="na">getByIdWithFlavor</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">R</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="n">dishDto</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>更多详细用法，请参考：<a href="https://gitee.com/linner_cheng/reggie_note/tree/v1.3/" target="_blank" rel="noopener noreferrer">瑞吉外卖项目 Knife4j 笔记<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>瑞吉外卖项目实战</title>
      <link>/blog/2023/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</guid>
      <description><![CDATA[项目笔记 项目笔记仓库：https://gitee.com/linner_cheng/reggie_note B站视频：黑马程序员Java项目实]]></description>
      <content:encoded><![CDATA[<h1 id="项目笔记" data-numberify>项目笔记<a class="anchor ms-1" href="#项目笔记"></a></h1>
<p>项目笔记仓库：<a href="https://gitee.com/linner_cheng/reggie_note" target="_blank" rel="noopener noreferrer">https://gitee.com/linner_cheng/reggie_note<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<p>B站视频：<a href="https://www.bilibili.com/video/BV13a411q753/?p=190&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click" target="_blank" rel="noopener noreferrer">黑马程序员Java项目实战《瑞吉外卖》<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<hr>
<h1 id="项目基础功能开发" data-numberify>项目基础功能开发<a class="anchor ms-1" href="#项目基础功能开发"></a></h1>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/v1.0/" target="_blank" rel="noopener noreferrer">项目基础功能开发<i class="fas fa-external-link-square-alt ms-1"></i></a>。包含项目前台和后台功能开发还有项目部署。</p>
<hr>
<h1 id="redis" data-numberify>Redis<a class="anchor ms-1" href="#redis"></a></h1>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/redis/" target="_blank" rel="noopener noreferrer">Redis<i class="fas fa-external-link-square-alt ms-1"></i></a>。包含Jedis和Spirng data redis。</p>
<hr>
<h1 id="项目优化" data-numberify>项目优化<a class="anchor ms-1" href="#项目优化"></a></h1>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/v1.1/" target="_blank" rel="noopener noreferrer">Redis缓存<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/v1.2/" target="_blank" rel="noopener noreferrer">Sharding-JDBC读写分离<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/v1.3/" target="_blank" rel="noopener noreferrer">Swagger API文档<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Sharding Jdbc</title>
      <link>/docs/spring/springboot/sharding-jdbc/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springboot/sharding-jdbc/</guid>
      <description><![CDATA[介绍 Sharding Jdbc是一个用于实现数据库读写分离的框架。 依赖 Sharding Jdbc依赖坐标： &lt;dependency&gt; &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt; &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;4.0.0-RC1&lt;/version&gt; &lt;/dependency&gt; 配置 配置application.yaml： spring: sharding-sphere: # 旧版为 shardingsphere]]></description>
      <content:encoded><![CDATA[<h1 id="介绍" data-numberify>介绍<a class="anchor ms-1" href="#介绍"></a></h1>
<p>Sharding Jdbc是一个用于实现数据库读写分离的框架。</p>
<hr>
<h1 id="依赖" data-numberify>依赖<a class="anchor ms-1" href="#依赖"></a></h1>
<p>Sharding Jdbc依赖坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.apache.shardingsphere<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>sharding-jdbc-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>4.0.0-RC1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="配置" data-numberify>配置<a class="anchor ms-1" href="#配置"></a></h1>
<p>配置<code>application.yaml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sharding-sphere</span><span class="p">:</span><span class="w">  </span><span class="c"># 旧版为 shardingsphere</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">datasource</span><span class="p">:</span><span class="w">     </span><span class="c"># 数据源有多个，用名称来进行区分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">names</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">master,slave </span><span class="w"> </span><span class="c"># 名称可以自定义，多个名称用&#39;,&#39;分隔</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 主数据源</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">master</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">com.alibaba.druid.pool.DruidDataSource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">driver-class-name</span><span class="p">:</span><span class="w"> </span><span class="l">com.mysql.cj.jdbc.Driver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">jdbc:mysql://localhost:3316/reggie?characterEncoding=utf-8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 从数据源</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">slave</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">com.alibaba.druid.pool.DruidDataSource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">driver-class-name</span><span class="p">:</span><span class="w"> </span><span class="l">com.mysql.cj.jdbc.Driver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">jdbc:mysql://localhost:3326/reggie?characterEncoding=utf-8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">masters-lave</span><span class="p">:</span><span class="w"> </span><span class="c"># 课程中为 masterslave</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 读写分离配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">load-balance-algorithm-type</span><span class="p">:</span><span class="w"> </span><span class="l">round_robin </span><span class="w"> </span><span class="c"># 定义从库负载均衡策略策略，round_robin为轮询</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 最终的数据源名称（即Bean的名称）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">dataSource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 主库数据源名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">master-data-source-name</span><span class="p">:</span><span class="w"> </span><span class="l">master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 从库数据源名称列表，多个用&#39;,&#39;分隔</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">slave-data-source-names</span><span class="p">:</span><span class="w"> </span><span class="l">slave</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">props</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">sql</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">show</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># 开启SQL显示，默认false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">main</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 允许Bean定义覆盖，否则会与其他数据源的Bean发生冲突（如Druid）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">allow-bean-definition-overriding</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Redis基础</title>
      <link>/docs/spring/springboot/redis-base/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springboot/redis-base/</guid>
      <description><![CDATA[数据类型 Redis存储的是key-value结构的数据，其中key是字符串类型，value有5种常用的数据类型： 字符串 —— string 哈希 —— hash 适合存]]></description>
      <content:encoded><![CDATA[<h1 id="数据类型" data-numberify>数据类型<a class="anchor ms-1" href="#数据类型"></a></h1>
<p>Redis存储的是key-value结构的数据，其中key是字符串类型，value有5种常用的数据类型：</p>
<ul>
<li>
<p>字符串 —— <code>string</code></p>
</li>
<li>
<p>哈希 —— <code>hash</code></p>
<p>适合存储对象。</p>
</li>
<li>
<p>列表 —— <code>list</code></p>
<p>按照插入顺序排序，可以有重复元素。可以用来做任务队列。</p>
</li>
<li>
<p>集合 —— <code>set</code></p>
<p>无序集合，没有重复元素（后插入的元素会覆盖已有的相同元素）。</p>
</li>
<li>
<p>有序集合 —— <code>sorted set</code></p>
<p>有序集合（使用分值进行排序），没有重复元素。</p>
</li>
</ul>
<hr>
<h1 id="常用命令" data-numberify>常用命令<a class="anchor ms-1" href="#常用命令"></a></h1>
<blockquote>
<p>Redis命令符不区分大小写，但是<code>key</code>是区分大小写的。
更多命令请参考<a href="https://www.redis.net.cn" target="_blank" rel="noopener noreferrer">Redis中文网<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
</blockquote>
<h2 id="字符串操作命令" data-numberify>字符串操作命令<a class="anchor ms-1" href="#字符串操作命令"></a></h2>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SET key value
</code></pre><ul>
<li>设置指定<code>key</code>的值。</li>
<li><code>key</code>相同的情况下，后设的值会覆盖前面的值。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">GET key
</code></pre><ul>
<li>获取指<code>key</code>的值。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SETEX key seconds value
</code></pre><ul>
<li>设置指定<code>key</code>的值，并将<code>key</code>的过期时间设为<code>seconds</code>秒。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SETNX key value
</code></pre><ul>
<li>
<p>只有在<code>key</code>不存在时设置<code>key</code>的值。</p>
</li>
<li>
<p>如：</p>
<pre tabindex="0"><code class="language-redis" data-lang="redis">&gt; SETNX key1 value1
1
&gt; SETNX key1 value2
0
&gt; GET key1
value1
</code></pre></li>
</ul>
<h2 id="哈希操作命令" data-numberify>哈希操作命令<a class="anchor ms-1" href="#哈希操作命令"></a></h2>
<p>Redis hash 是一个<code>string</code>类型的<code>field</code>和<code>value</code>的映射表，hash特别适合用于存储对象。</p>
<pre tabindex="0"><code class="language-redis" data-lang="redis">HSET key field value
</code></pre><ul>
<li>将哈希表key种的字段field的值设为value。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">HGET key field
</code></pre><ul>
<li>获取存储在哈希表中指定字段的值。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">HDEL key field
</code></pre><ul>
<li>删除存储在哈希表中的指定字段。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">HKEYS key
</code></pre><ul>
<li>获取哈希表中所有字段。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">HVALS key
</code></pre><ul>
<li>获取哈希表中所有值。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">HGETALL key
</code></pre><ul>
<li>获取在哈希表中指定key的所有字段和值。</li>
</ul>
<h2 id="列表操作命令" data-numberify>列表操作命令<a class="anchor ms-1" href="#列表操作命令"></a></h2>
<pre tabindex="0"><code class="language-redis" data-lang="redis">LPUSH key value1 [value2 ...]
</code></pre><ul>
<li>将一个或多个值插入到列表头部。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">LRANGE key start stop
</code></pre><ul>
<li>获取列表指定范围内的元素（<code>start</code>到<code>stop</code>，索引从<code>0</code>开始）。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">RPOP key
</code></pre><ul>
<li>移除并获取列表最后一个元素。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">LLEN key
</code></pre><ul>
<li>获取列表长度。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">BRPOP key1 [key2 ...] timeout
</code></pre><ul>
<li>移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时（<code>timeout</code>秒）或（在指定的key中）发现可弹出元素为止。</li>
</ul>
<h2 id="集合操作命令" data-numberify>集合操作命令<a class="anchor ms-1" href="#集合操作命令"></a></h2>
<p>Redis set是string类型的无序集合，集合成员是唯一的。</p>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SADD key member1 [member2 ...]
</code></pre><ul>
<li>向集合添加一个或多个成员。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SMEMBERS key
</code></pre><ul>
<li>返回集合中的所有成员。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SCARD key
</code></pre><ul>
<li>获取集合的成员数。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SINTER key1 [key2 ...]
</code></pre><ul>
<li>返回给定所有集合的交集。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SUNION key1 [key2 ...]
</code></pre><ul>
<li>返回所有给定集合的并集。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SDIFF key1 [key2 ...]
</code></pre><ul>
<li>返回给定所有集合的差集（左差集，即key1集合中在其他集合没有的元素集合）。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SREM key member1 [member2 ...]
</code></pre><ul>
<li>移除集合中一个或多个成员。</li>
</ul>
<h2 id="有序集合操作命令" data-numberify>有序集合操作命令<a class="anchor ms-1" href="#有序集合操作命令"></a></h2>
<p>Redis sorted set 是string类型元素的集合，且不允许重复的成员。每个元素都会关联一个<code>double</code>类型的分数（score）。Redis通过分数来为集合中的成员进行从小到大排序，有序集合的成员是唯一的，但分数却可以重复。</p>
<pre tabindex="0"><code class="language-redis" data-lang="redis">ZADD key score1 member1 [score2 member2 ...]
</code></pre><ul>
<li>向有序集合添加一个或多个成员，或者更新已存在成员的分数。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">ZRANGE key start stop [WITHSCOES]
</code></pre><ul>
<li>通过索引区间返回有序集合中指定区间内的成员。使用<code>WITHSCOES</code>可以返回成员的分数。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">ZINCRBY key increment member
</code></pre><ul>
<li>有序集合中对指定成员的分数加上增量<code>increment</code>。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">ZREM key member [member ...]
</code></pre><ul>
<li>移除有序集合中的一个或多个成员。</li>
</ul>
<h2 id="通用命令" data-numberify>通用命令<a class="anchor ms-1" href="#通用命令"></a></h2>
<pre tabindex="0"><code class="language-redis" data-lang="redis">KEYS pattren
</code></pre><ul>
<li>查找所有符合给定模式（pattern）的key。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">EXISTS key
</code></pre><ul>
<li>检查给定key是否存在。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">TYPE key
</code></pre><ul>
<li>返回key所存储的值的类型。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">TTL key
</code></pre><ul>
<li>返回给定key的剩余生存时间（TTL，time to live），以秒为单位。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">DEL key1 [key2 ...]
</code></pre><ul>
<li>
<p>该命令用于在key存在时删除key。</p>
</li>
<li>
<p>如：</p>
<pre tabindex="0"><code class="language-redis" data-lang="redis">&gt; TTL key
-1
</code></pre><p>返回<code>-1</code>表示永久存活。</p>
</li>
</ul>
<h2 id="切换数据库" data-numberify>切换数据库<a class="anchor ms-1" href="#切换数据库"></a></h2>
<p>Redis 默认是在<code>0</code>号数据库中执行操作。如果想要切换数据库，可以使用：</p>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SELECT number
</code></pre><p>如：</p>
<pre tabindex="0"><code class="language-redis" data-lang="redis">127.0.0.1:6379&gt; SELECT 1
OK
127.0.0.1:6379[1]&gt;
</code></pre><p>Redis 默认提供了16个数据库。</p>
<p>要修改该配置可以在<code>redis.conf</code>中修改<code>databases</code>的数量。</p>
<pre tabindex="0"><code>databash 16
</code></pre><hr>
<h1 id="spring-data-redis" data-numberify>Spring Data Redis<a class="anchor ms-1" href="#spring-data-redis"></a></h1>
<h2 id="依赖" data-numberify>依赖<a class="anchor ms-1" href="#依赖"></a></h2>
<p>Spring Data Redis的依赖坐标为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Spring Date Redis --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-redis<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- version在spring-boot-starter-parent中定义 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="配置" data-numberify>配置<a class="anchor ms-1" href="#配置"></a></h2>
<p><code>application.yml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">springdataredis-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Redis相关配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">redis</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">localhost</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">6379</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">database</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">       </span><span class="c"># 操作0号数据库</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">jedis</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Redis连接池配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pool</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">max-active</span><span class="p">:</span><span class="w"> </span><span class="m">8</span><span class="w"> </span><span class="c"># 最大连接数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">max-wait</span><span class="p">:</span><span class="w"> </span><span class="l">1ms</span><span class="w"> </span><span class="c"># 连接池最大阻塞等待时间</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">max-idle</span><span class="p">:</span><span class="w"> </span><span class="m">4</span><span class="w">   </span><span class="c"># 连接池中的最大空闲连接</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">min-idle</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">   </span><span class="c"># 连接池中的最小空闲连接</span><span class="w">
</span></span></span></code></pre></div><p>配置类（修改默认序列化器，防止因序列化在Redis上产生乱码，但并不妨碍读值。因为读取时会自动反序列化）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfig</span> <span class="kd">extends</span> <span class="n">CachingConfigurerSupport</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">RedisTemplate</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">redisTemplate</span><span class="o">(</span><span class="n">RedisConnectionFactory</span> <span class="n">connectionFactory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">RedisTemplate</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RedisTemplate</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 默认的Key序列化器为：JdkSerializationRedisSerializer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="n">StringRedisSerializer</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setHashKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="n">StringRedisSerializer</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="测试" data-numberify>测试<a class="anchor ms-1" href="#测试"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringDataRedisTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RedisTemplate</span> <span class="n">redisTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 操作字符串类型数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获得String类型数据操作对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ValueOperations</span> <span class="n">valueOperations</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForValue</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">valueOperations</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&#34;city&#34;</span><span class="o">,</span> <span class="s">&#34;guangzhou&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">city</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">valueOperations</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;city&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置超时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">valueOperations</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&#34;key1&#34;</span><span class="o">,</span> <span class="s">&#34;value1&#34;</span><span class="o">,</span> <span class="mi">10L</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 不存在才设置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Boolean</span> <span class="n">setIfAbsent1</span> <span class="o">=</span> <span class="n">valueOperations</span><span class="o">.</span><span class="na">setIfAbsent</span><span class="o">(</span><span class="s">&#34;city&#34;</span><span class="o">,</span> <span class="s">&#34;foshang&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Boolean</span><span class="o">.</span><span class="na">TRUE</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">setIfAbsent1</span><span class="o">)</span> <span class="o">?</span> <span class="s">&#34;city设置成功&#34;</span> <span class="o">:</span> <span class="s">&#34;city已存在&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Boolean</span> <span class="n">setIfAbsent2</span> <span class="o">=</span> <span class="n">valueOperations</span><span class="o">.</span><span class="na">setIfAbsent</span><span class="o">(</span><span class="s">&#34;city_name&#34;</span><span class="o">,</span> <span class="s">&#34;foshang&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                                                   <span class="mi">10L</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Object</span> <span class="n">cityName</span> <span class="o">=</span> <span class="n">valueOperations</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;city_name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">setIfAbsent2</span> <span class="o">?</span> <span class="s">&#34;city_name设置成功:&#34;</span> <span class="o">+</span> <span class="n">cityName</span>
</span></span><span class="line"><span class="cl">                                        <span class="o">:</span> <span class="s">&#34;city_name已存在&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 操作哈希类型数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHash</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HashOperations</span> <span class="n">hashOperations</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForHash</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="s">&#34;002&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 存值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">hashOperations</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="s">&#34;xiaoming&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">hashOperations</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;age&#34;</span><span class="o">,</span> <span class="s">&#34;20&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">hashOperations</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;address&#34;</span><span class="o">,</span> <span class="s">&#34;guangzhou&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">hashOperations</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">age</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">hashOperations</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;age&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">address</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">hashOperations</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;address&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;name:&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&#34;,age:&#34;</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span> <span class="s">&#34;,address:&#34;</span> <span class="o">+</span> <span class="n">address</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取hash结构中的所有字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Set</span> <span class="n">keys</span> <span class="o">=</span> <span class="n">hashOperations</span><span class="o">.</span><span class="na">keys</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">key</span> <span class="o">:</span> <span class="n">keys</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//hashOperations.delete(keys, &#34;address&#34;, &#34;age&#34;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获得hash结构中的所有值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="n">hashOperations</span><span class="o">.</span><span class="na">values</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">value</span> <span class="o">:</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 操作列表类型数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testList</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ListOperations</span> <span class="n">listOperations</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForList</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&#34;mylist&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 存储
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">listOperations</span><span class="o">.</span><span class="na">leftPush</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;a&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">listOperations</span><span class="o">.</span><span class="na">leftPushAll</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">,</span> <span class="s">&#34;d&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;入队：&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">myList</span> <span class="o">=</span> <span class="n">listOperations</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">myList</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&#34; &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获得列表长度 llen
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">listOperations</span><span class="o">.</span><span class="na">size</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">intValue</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;出队：&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 出队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">String</span> <span class="n">element</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">listOperations</span><span class="o">.</span><span class="na">rightPop</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="n">element</span> <span class="o">+</span> <span class="s">&#34; &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 操作集合类型数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSet</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SetOperations</span> <span class="n">setOperations</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForSet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&#34;myset&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 存值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">setOperations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">,</span> <span class="s">&#34;d&#34;</span><span class="o">,</span> <span class="s">&#34;a&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">myset</span> <span class="o">=</span> <span class="n">setOperations</span><span class="o">.</span><span class="na">members</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">myset</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&#34; &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 删除成员
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">setOperations</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">myset</span> <span class="o">=</span> <span class="n">setOperations</span><span class="o">.</span><span class="na">members</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">myset</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&#34; &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 操作有序集合类型数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testZset</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ZSetOperations</span> <span class="n">zSetOperations</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForZSet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&#34;myZset&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 存储
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">zSetOperations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="mf">10.</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">zSetOperations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="mf">11.</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">zSetOperations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">,</span> <span class="mf">12.</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">zSetOperations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;d&#34;</span><span class="o">,</span> <span class="mf">13.</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">zSetOperations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="mf">14.</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">range</span> <span class="o">=</span> <span class="n">zSetOperations</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">range</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&#34; &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 修改分数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">zSetOperations</span><span class="o">.</span><span class="na">incrementScore</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="mf">20.</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 删除成员
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">zSetOperations</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">range</span> <span class="o">=</span> <span class="n">zSetOperations</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">range</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&#34; &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 通用操作
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCommon</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Redis中所有key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">keys</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">keys</span><span class="o">(</span><span class="s">&#34;*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">keys</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 判断m某个key是否存在
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Boolean</span> <span class="n">hasKey</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">hasKey</span><span class="o">(</span><span class="s">&#34;linner&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hasKey</span> <span class="o">?</span> <span class="s">&#34;linner存在&#34;</span> <span class="o">:</span> <span class="s">&#34;linner不存在&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 删除指定key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">&#34;myZset&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取指定key对应的value的数据类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">DataType</span> <span class="n">dataType</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">type</span><span class="o">(</span><span class="s">&#34;myset&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dataType</span><span class="o">.</span><span class="na">name</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>MyBatisPlus</title>
      <link>/docs/spring/springboot/mybatisplus/</link>
      <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springboot/mybatisplus/</guid>
      <description><![CDATA[简介 MybatisPlus（简称MP）是基于MyBatis框架基础上开发的增强型工具（依然可以使用MyBatis里的工具），旨在简化开发、提]]></description>
      <content:encoded><![CDATA[<h1 id="简介" data-numberify>简介<a class="anchor ms-1" href="#简介"></a></h1>
<p>MybatisPlus（简称MP）是基于MyBatis框架基础上开发的增强型工具（依然可以使用MyBatis里的工具），旨在简化开发、提供效率。更多详情请访问<a href="https://mp.baomidou.com/" target="_blank" rel="noopener noreferrer">MyBatisPlus官网<i class="fas fa-external-link-square-alt ms-1"></i></a>（官网有两个地址，<a href="https://mp.baomidou.com/" target="_blank" rel="noopener noreferrer">https://mp.baomidou.com/<i class="fas fa-external-link-square-alt ms-1"></i></a>或<a href="https://mybatis.plus" target="_blank" rel="noopener noreferrer">https://mybatis.plus<i class="fas fa-external-link-square-alt ms-1"></i></a>）。</p>
<p>基于Spring使用MybatisPlus，在构建Spring工程时需要勾选MySQL和MyBatis相关技术。由于Spring并未收录MP，所以需要手动导入坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.baomidou<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis-plus-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.4.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 可选： --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.1.16<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在<code>application.yml</code>（配置文件）中配置数据库信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">datasource</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">com.alibaba.druid.pool.DruidDataSource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">driver-class-name</span><span class="p">:</span><span class="w"> </span><span class="l">com.mysql.cj.jdbc.Driver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">jdbc:mysql://localhost:3306/mybatisplus_db?serverTimezone=Asia/Shanghai </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="dao接口" data-numberify>DAO接口<a class="anchor ms-1" href="#dao接口"></a></h1>
<p>使用MP编写DAO接口，可以直接继承<code>BaseMapper&lt;&gt;</code>（该接口内置了许多DAO方法）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Mapper</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDao</span> <span class="kd">extends</span> <span class="n">BaseMapper</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>编写引导类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MybatisplusApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">MybatisplusApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>DAO接口要想被容器扫描到，有两种方案：</p>
<ol>
<li>在DAO接口上添加<code>@Mapper</code>注解，并且确保DAO处在引导类所在包或其子包中。</li>
<li>在引导类上添加<code>@MapperScan</code>注解，其属性为所要扫描的DAO所在包：<code>@MapperScan(&quot;com.linner.dao&quot;)</code>（可以不写<code>@Mapper</code>）。</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Maven 高级</title>
      <link>/docs/spring/springboot/maven-senior/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springboot/maven-senior/</guid>
      <description><![CDATA[多模块开发 多模块开发有以下两种： 按照功能拆分。 按照模块拆分。 例如，将项目中的DAO类拆分出来作为一个独立的模块。然后使用Maven将该模块作]]></description>
      <content:encoded><![CDATA[<h1 id="多模块开发" data-numberify>多模块开发<a class="anchor ms-1" href="#多模块开发"></a></h1>
<p>多模块开发有以下两种：</p>
<ul>
<li>按照功能拆分。</li>
<li>按照模块拆分。</li>
</ul>
<p>例如，将项目中的DAO类拆分出来作为一个独立的模块。然后使用Maven将该模块作为依赖导入项目中。</p>
<p>假设现在已经将项目中的实体类拆分出来作为<code>maven-dao</code>模块。该模块也使用Maven构建，然后导入该项目所需依赖。经过测试后，将该项目的<code>&lt;groupId&gt;</code>、<code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>导入原本项目。</p>
<p><code>maven-dao</code>模块的<code>pom.xml</code>中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span> <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 将下面内容作为依赖导入到原项目中 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>springmvc-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- END --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>将上方<code>&lt;groupId&gt;</code>、<code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>导入原项目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>springmvc-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div><p>接着使用Maven的<code>install</code>命令将<code>maven-dao</code>模块安装到Maven本地仓库中，项目即可正常启动。</p>
<hr>
<h1 id="依赖管理" data-numberify>依赖管理<a class="anchor ms-1" href="#依赖管理"></a></h1>
<h2 id="依赖传递" data-numberify>依赖传递<a class="anchor ms-1" href="#依赖传递"></a></h2>
<p>Maven项目中的依赖是具有传递性的。即，依赖的依赖可以作为依赖使用。将依赖关系作为树状结构看待，那么依赖的子孙依赖，也可以作为项目的依赖。</p>
<p>依赖传递有直接依赖和间接依赖。</p>
<ul>
<li>
<p>直接依赖：</p>
<p>在<code>pom.xml</code>中编写的依赖就是该项目的直接依赖。即，依赖树中，子依赖（子节点）即为当前项目（根节点）的直接依赖。</p>
</li>
<li>
<p>间接依赖：
依赖树中，直接依赖下的所有依赖（孙子节点）即为当前项目的间接依赖。</p>
</li>
</ul>
<p>因为依赖传递的存在，会导致使用依赖的过程中出现冲突问题。例如有两个相同的依赖，它们的版本不同，就会导致依赖冲突。</p>
<p>Maven指定了一系列规则来解决依赖冲突问题。</p>
<ul>
<li>特殊优先：同级下（依赖树中同个父节点的依赖为同级，即同个<code>pom.xml</code>下），配置了相同资源的不同版本，后配置的覆盖先配置。</li>
<li>路径优先：依赖树中，层级越浅，优先级越高；层级越深，优先级越低。</li>
<li>声明优先：资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的。即，谁先声明用谁。</li>
</ul>
<blockquote>
<p>注意：依赖的优先级只对当前项目起作用。即，当前项目选择的依赖版本并不会影响到依赖中相同资源不同版本的依赖。
最终选择的依赖结果根据Idea中Mavem面板的依赖树视图。</p>
</blockquote>
<h2 id="可选依赖" data-numberify>可选依赖<a class="anchor ms-1" href="#可选依赖"></a></h2>
<p>可选依赖指对外隐藏当前所依赖的资源（不透明），隐藏后对应资源将不具有依赖传递。</p>
<p>可选依赖的开关使用<code>&lt;optional&gt;</code>。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>xxx.xxxxxx<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>xxxxx-xxxxxx<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 默认为false，设置为true为开启可选依赖 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="排除依赖" data-numberify>排除依赖<a class="anchor ms-1" href="#排除依赖"></a></h2>
<p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本（不需要）。即，在当前项目中，排除依赖中不需要的间接依赖。</p>
<p>排除依赖使用<code>&lt;exclusions&gt;</code>来指定一个排除的依赖列表。列表中使用<code>&lt;exclusion&gt;</code>来指定要排除的依赖。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>xxx.xxxxxx<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>xxxxx-xxxxxx<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;exclusions&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;exclusion&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>yyy.yyyyyy<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>yyyyy-yyyyyyy<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 排除依赖不需要指定版本 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/exclusion&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/exclusions&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="聚合工程" data-numberify>聚合工程<a class="anchor ms-1" href="#聚合工程"></a></h2>
<p>聚合即为将多个模块组织成一个整体，同时进行项目构建的过程。聚合工程通常是一个不具有业务功能的&quot;空&quot;工程（有且仅有一个pom文件）。使用聚合工程可以将多个工程编组，通过对聚合工程进行构建，实现对所包含的模块进行同步构建。当工程中某个模块发生更新（变更）时，必须保障工程中与已更新模块关联的模块同步更新，此时可以使用聚合工程来解决批量模块同步构建的问题。</p>
<p>Example：</p>
<p>创建一个空的Maven项目，并将其打包方式设置为<code>pom</code>，然后添加所要管理的项目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>maven-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 设置管理的模块名称 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modules&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- module里面的值为管理模块的相对路径 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../xxxx<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../yyyy<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../zzzz<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/modules&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>当该<code>maven-parent</code>被<code>compile</code>后，所有被其管理的项目都会被执行编译操作。</p>
<blockquote>
<p>聚合工程管理的项目在进行运行的时候，会按照项目与项目之间的依赖关系来自动决定执行的顺序和配置的顺序无关。</p>
</blockquote>
<h2 id="继承" data-numberify>继承<a class="anchor ms-1" href="#继承"></a></h2>
<p>继承是用来解决重复配置问题。继承描述的是两个工程间的关系子工程可以继承父工程中的配置信息，常见于依赖关系的继承。继承的作用：简化配置、减少版本冲突。</p>
<blockquote>
<p>一般继承和聚合都是使用同一个空项目来构建，但是这两个的功能是不一样的。</p>
</blockquote>
<p>在子工程中配置当前工程继承自parent工程：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 在project下配置 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>maven-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--设置父项目pom.xml位置路径--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;relativePath&gt;</span>../maven-parent/pom.xml<span class="nt">&lt;/relativePath&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/parent&gt;</span>
</span></span></code></pre></div><p>将子项目共同使用的依赖都抽取出来，维护在父项目的<code>pom.xml</code>中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>maven-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modules&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../xxxx<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../yyyy<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../zzzz<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/modules&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-core<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-webmvc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>3.5.6<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>1.3.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.1.47<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>1.1.16<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>3.1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>jackson-databind<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.9.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><h3 id="子项目依赖版本问题" data-numberify>子项目依赖版本问题<a class="anchor ms-1" href="#子项目依赖版本问题"></a></h3>
<p>如果把所有用到的依赖都管理在父项目的<code>pom.xml</code>，这样就会导致有很多项目引入了过多自己不需要的依赖，这样对于子项目来说也是种负担。</p>
<p>可以在父工程中使用<code>&lt;dependencyManagement&gt;</code>来定义依赖管理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 在project下配置 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependencyManagement&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>4.12<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencyManagement&gt;</span>
</span></span></code></pre></div><p><code>&lt;dependencyManagement&gt;</code>标签不真正引入jar包，而是配置可供子项目选择的jar包依赖。</p>
<p>如果子项目要想使用它所提供的这些jar包，需要自己添加依赖，并且不需要指定<code>&lt;version&gt;</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>子项目使用的jar包<code>version</code>由父项目决定。</p>
<hr>
<h1 id="属性" data-numberify>属性<a class="anchor ms-1" href="#属性"></a></h1>
<p>Maven属性的概念和变量的概念很相似。在一个地方声明，其他地方使用，当属性的声明修改后，所有使用属性的地方都会跟着修改。</p>
<p>在Maven中的属性分为:</p>
<ul>
<li>
<p>自定义属性。</p>
</li>
<li>
<p>内置属性。</p>
<p>使用<code>mvn help:system</code>命令查看。</p>
</li>
<li>
<p>Setting属性。</p>
</li>
<li>
<p>Java系统属性。</p>
</li>
<li>
<p>环境变量属性。</p>
</li>
</ul>
<h2 id="自定义属性" data-numberify>自定义属性<a class="anchor ms-1" href="#自定义属性"></a></h2>
<p>在父工程中使用<code>&lt;properties&gt;</code>定义属性：</p>
<properties>
    <spring.version>5.2.10.RELEASE</spring.version>
    <junit.version>4.12</junit.version>
    <mybatis-spring.version>1.3.0</mybatis-spring.version>
</properties>
<p>定义属性标签的名称可以自定义，如<code>&lt;spring.version&gt;</code>也可以修改为<code>&lt;spring-version&gt;</code>。</p>
<p>接着修改依赖的<code>version</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-core<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-webmvc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>使用<code>${属性名}</code>来使用属性。</p>
<h2 id="配置文件加载属性" data-numberify>配置文件加载属性<a class="anchor ms-1" href="#配置文件加载属性"></a></h2>
<p>属性也可以作用于其他配置文件中（如<code>jdbc.properties</code>）。</p>
<p>先在父工程中定义属性，并且设置Maven过滤文件范围：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;jdbc.url&gt;</span>jdbc:mysql://127.1.1.1:3306/spring_db<span class="nt">&lt;/jdbc.url&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;resources&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;resource&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 设置资源目录（相对路径） --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;directory&gt;</span>../xxxx/src/main/resources<span class="nt">&lt;/directory&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 设置是否能够解析${}，默认是false --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;filtering&gt;</span>true<span class="nt">&lt;/filtering&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/resource&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/resources&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><p>修改<code>jdbc.properties</code>（属性值的使用方式与<code>pom.xml</code>中相同）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">jdbc.driver</span><span class="o">=</span><span class="s">com.mysql.jdbc.Driver</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.url</span><span class="o">=</span><span class="s">${jdbc.url}</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.username</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.password</span><span class="o">=</span><span class="s">root</span>
</span></span></code></pre></div><p>如果需要在多个项目中解析属性值，可以使用<code>${project.basedir}</code>（Maven的内置系统属性）来简化书写：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;resources&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">			${project.basedir}: 表示当前项目所在目录
</span></span></span><span class="line"><span class="cl"><span class="c">			子项目继承了父项目，相当于所有的子项目都添加了资源目录的过滤
</span></span></span><span class="line"><span class="cl"><span class="c">		--&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;resource&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;directory&gt;</span>${project.basedir}/src/main/resources<span class="nt">&lt;/directory&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;filtering&gt;</span>true<span class="nt">&lt;/filtering&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/resource&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/resources&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">        忽略 web.xml 检查
</span></span></span><span class="line"><span class="cl"><span class="c">        或者在 src\main\webapp\WEB-INF\ 添加一个 web.xml 文件 
</span></span></span><span class="line"><span class="cl"><span class="c">    --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>maven-war-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>3.2.3<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="c">&lt;!-- 忽略 web.xml 检查 --&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;failOnMissingWebXml&gt;</span>false<span class="nt">&lt;/failOnMissingWebXml&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><blockquote>
<p>使用<code>mvn help:system</code>命令可以查看更多的内置属性。</p>
</blockquote>
<hr>
<h1 id="版本管理" data-numberify>版本管理<a class="anchor ms-1" href="#版本管理"></a></h1>
<ul>
<li><code>SNAPSHOT</code>（快照版本）：
<ul>
<li>项目开发过程中临时输出的版本，称为快照版本。</li>
<li>快照版本会随着开发的进展不断更新。</li>
</ul>
</li>
<li><code>RELEASE</code>（发布版本）：
<ul>
<li>项目开发到一定阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构件文件是稳定的。</li>
<li>即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本称为发布版本。</li>
</ul>
</li>
<li><code>alpha</code>（内测版）：Bug多、不稳定、内部版本不断添加新功能。</li>
<li><code>beta</code>（公测版）：不稳定（相对比<code>alpha</code>稳定些），Bug相对较多不断添加新功能。</li>
<li>纯数字版本。</li>
</ul>
<hr>
<h1 id="多环境开发" data-numberify>多环境开发<a class="anchor ms-1" href="#多环境开发"></a></h1>
<p>Maven提供配置多种环境的设定，帮助开发者在使用过程中快速切换环境。</p>
<p>在父工程中配置多个环境，并指定默认激活环境：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;profiles&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--开发环境--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;profile&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;id&gt;</span>dev<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;jdbc.url&gt;</span>jdbc:mysql://127.1.1.1:3306/spring_db<span class="nt">&lt;/jdbc.url&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;activation&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 设定是否为默认启动环境 --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;activeByDefault&gt;</span>true<span class="nt">&lt;/activeByDefault&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/activation&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/profile&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--生产环境--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;profile&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;id&gt;</span>pro<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;jdbc.url&gt;</span>jdbc:mysql://127.2.2.2:3306/spring_db<span class="nt">&lt;/jdbc.url&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/profile&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--测试环境--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;profile&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;id&gt;</span>test<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;jdbc.url&gt;</span>jdbc:mysql://127.3.3.3:3306/spring_db<span class="nt">&lt;/jdbc.url&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/profile&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/profiles&gt;</span>
</span></span></code></pre></div><p>动态切换配置环境可以使用Maven的<code>-P</code>参数来指定，参数值为环境<code>id</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mvn install -P <span class="nb">test</span>
</span></span></code></pre></div><hr>
<h1 id="跳过测试" data-numberify>跳过测试<a class="anchor ms-1" href="#跳过测试"></a></h1>
<p>在执行<code>install</code>指令的时候，Maven都会按照顺序从上往下依次执行，每次都会执行<code>test</code>。<code>test</code>可以确保每次打包或者安装的时候，程序的正确性。</p>
<p>但是，假如测试已经通过，在没有修改程序的前提下再次执行打包或安装命令，由于顺序执行，测试会被再次执行，就有点耗费时间了。或者，功能开发过程中有部分模块还没有开发完毕，测试无法通过，但是想要把其中某一部分进行快速打包，此时由于测试环境失败就会导致打包失败。此时就需要跳过测试：</p>
<ol>
<li>
<p>Idea工具可以实现跳过测试（Maven面板中带闪电图标的按钮）。</p>
</li>
<li>
<p>在父工程中的<code>pom.xml</code>中添加测试插件配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>maven-surefire-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.12.4<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;skipTests&gt;</span>false<span class="nt">&lt;/skipTests&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="c">&lt;!--排除掉不参与测试的内容--&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;excludes&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;exclude&gt;</span>**/BookServiceTest.java<span class="nt">&lt;/exclude&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/excludes&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><p><code>&lt;configuration&gt;</code>中有如下标签：</p>
<ul>
<li><code>skipTests</code>：如果为<code>true</code>，跳过所有测试；为<code>false</code>，不跳过测试。</li>
<li><code>excludes</code>：不参与测试的测试类，针对<code>skipTests</code>为<code>false</code>来设置的。</li>
<li><code>includes</code>：参与测试的测试类，针对<code>skipTests</code>为<code>true</code>来设置的。</li>
</ul>
</li>
<li>
<p>命令跳过测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mvn 指令 -D skipTests
</span></span></code></pre></div><blockquote>
<ul>
<li>执行的项目构建指令必须包含测试生命周期，否则无效果。</li>
<li>命令需要在<code>pom.xml</code>所在目录下进行执行。</li>
</ul>
</blockquote>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>SpringBoot 基础</title>
      <link>/docs/spring/springboot/springboot-base/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springboot/springboot-base/</guid>
      <description><![CDATA[简介 SpringBoot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化 Spring 应用的初始搭建以及开发过程。 SpringBoot开发分为如下几步： 创建新模块，选择Sp]]></description>
      <content:encoded><![CDATA[<h1 id="简介" data-numberify>简介<a class="anchor ms-1" href="#简介"></a></h1>
<p><code>SpringBoot</code> 是由 <code>Pivotal</code> 团队提供的全新框架，其设计目的是用来简化 <code>Spring</code> 应用的初始搭建以及开发过程。</p>
<p>SpringBoot开发分为如下几步：</p>
<ul>
<li>创建新模块，选择Spring初始化，并配置模块相关基础信息。</li>
<li>选择当前模块需要使用的技术集。</li>
<li>开发控制器类。</li>
<li>运行自动生成的Application类。</li>
</ul>
<p>SpringBoot有两个机制：</p>
<ul>
<li>依赖管理机制。</li>
<li>自动配置机制。</li>
</ul>
<h1 id="项目创建及配置" data-numberify>项目创建及配置<a class="anchor ms-1" href="#项目创建及配置"></a></h1>
<h2 id="创建项目" data-numberify>创建项目<a class="anchor ms-1" href="#创建项目"></a></h2>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springboot/springboot-base/1677287557076.png" loading="lazy" width="1572" height="1265" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springboot/springboot-base/1677239012598.png" loading="lazy" width="1573" height="1269" />
</picture>

</p>
<blockquote>
<p>注意：</p>
<ol>
<li>
<p>在创建好的工程中不需要创建配置类。</p>
</li>
<li>
<p>创建好的项目会自动生成其他的一些文件（这些文件目前来说没有任何作用），可以将这些文件删除。</p>
<p>可以删除的目录和文件如下：</p>
<ul>
<li><code>.mvn</code></li>
<li><code>.gitignore</code></li>
<li><code>HELP.md</code></li>
<li><code>mvnw</code></li>
<li><code>mvnw.cmd</code></li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="项目依赖" data-numberify>项目依赖<a class="anchor ms-1" href="#项目依赖"></a></h2>
<p>在项目中的<code>pom.xml</code>中有如下代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>2.4.5<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 这里的版本被修改过，按照上方创建的工程版本应该是 3.0.3 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;relativePath/&gt;</span> <span class="c">&lt;!-- lookup parent from repository --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/parent&gt;</span>
</span></span></code></pre></div><p>该代码指定了一个父工程，父工程中的东西在该工程中可以继承过来使用。</p>
<p>并且使用Spring Initializr创建的项目会自动在<code>pom.xml</code>中导入所需的起步依赖（包含<code>starter</code>的依赖）。</p>
<p>在<code>pom.xml</code>中还有如下起步依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Springboot Web 开发所需的起步依赖 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Springboot 整合Junit的起步依赖 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div><h2 id="引导类" data-numberify>引导类<a class="anchor ms-1" href="#引导类"></a></h2>
<p>创建的每个SpringBoot项目都包含一个引导类，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringbootDemoApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">SpringbootDemoApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>引导类是项目的入口，运行<code>main()</code>就可以启动项目。</p>
<blockquote>
<p>引导类默认只会扫描当前包下同级的类和包（包下的的类）。</p>
<p>如果Controller包与引导类的包同级（例如<code>com.linner.controller</code>与<code>com.linner.springbootdemo</code>），此时引导类可以正常启动，但是由于扫描不到Cotroller包，接口无法访问。有三种解决方法：</p>
<ol>
<li>
<p>将Controller包移动到引导类的包下（此处为<code>springbootdemo</code>）。</p>
</li>
<li>
<p>将引导类移动到项目组包下（此处为<code>com.linner</code>）。</p>
</li>
<li>
<p>在创建工程时，修改软件包名。</p>
<p>Spring Initializr默认软件包名为项目组名.项目名（此处为<code>com.linner.springbootdemo</code>）。此处创建的项目将其修改为项目组名（<code>com.linner</code>）。</p>
</li>
</ol>
<p><code>SpringApplication.run(...)</code> 的返回值是当前项目的<code>ApplicationContext</code>。</p>
</blockquote>
<h2 id="切换-web-服务器" data-numberify>切换 Web 服务器<a class="anchor ms-1" href="#切换-web-服务器"></a></h2>
<p>如果要使用Jetty服务器，我们需要先在<code>pom.xml</code>中使用<code>&lt;exclusion&gt;</code>标签排除默认的Tomcat服务器，然后再导入使用Jetty服务器所需的坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;exclusions&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;exclusion&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-tomcat<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/exclusion&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/exclusions&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-jetty<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="配置文件" data-numberify>配置文件<a class="anchor ms-1" href="#配置文件"></a></h2>
<p>SpringBoot有两种配置文件格式，它们都在<code>resources</code>目录下：</p>
<ul>
<li>
<p><code>properties</code>格式：</p>
<p>文件名为<code>application.properties</code>，格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1"># 端口</span>
</span></span><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">81</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 访问路径</span>
</span></span><span class="line"><span class="cl"><span class="na">server.servlet.context-path</span><span class="o">=</span><span class="s">/</span>
</span></span></code></pre></div></li>
<li>
<p><code>yaml</code>格式：</p>
<p>文件名为<code>application.yml</code>或<code>application.yaml</code>，格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 端口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">servlet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 访问路径</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">context-path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>yaml格式的键值对中，键后面的冒号后（值的前面）一定要加空格。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>SpringBoot程序的配置文件必须是<code>application</code>，只是后缀名不同。</p>
</blockquote>
<p>以上三个配置文件可以同时存在，它们的优先级从高到低为：</p>
<ol>
<li><code>application.properties</code></li>
<li><code>application.yml</code></li>
<li><code>application.yaml</code></li>
</ol>
<p>Idea可以快速地编辑配置文件：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springboot/springboot-base/1677291010274.png" loading="lazy" width="481" height="581" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springboot/springboot-base/1677291147353.png" loading="lazy" width="1651" height="389" />
</picture>

</p>
<h3 id="yaml-语法" data-numberify>yaml 语法<a class="anchor ms-1" href="#yaml-语法"></a></h3>
<ul>
<li>
<p>大小写敏感。</p>
</li>
<li>
<p>属性层级关系使用多行描述，每行结尾使用冒号结束。</p>
</li>
<li>
<p>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）。</p>
<p>空格的个数并不重要，只要保证同层级的左侧对齐即可。</p>
</li>
<li>
<p>属性值前面添加空格（属性名与属性值之间使用<code>:</code>+空格作为分隔）。</p>
</li>
<li>
<p><code>#</code> 表示注释。</p>
</li>
<li>
<p>数据前面要加空格与冒号隔开。</p>
</li>
</ul>
<p>数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">list</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">Java</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">Spring</span><span class="w">
</span></span></span></code></pre></div><h3 id="读取配置数据" data-numberify>读取配置数据<a class="anchor ms-1" href="#读取配置数据"></a></h3>
<p>使用<code>@Value(&quot;表达式&quot;)</code>可以从配置文件中读取数据，注解中用于读取属性名引用方式是：<code>${一级属性名.二级属性名……}</code>。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${server.port}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">port</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${list[0]}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">java</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/config&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">gerConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;port=&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">port</span> <span class="o">+</span> <span class="s">&#34;\n&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">java</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>SpringBoot还可以使用 <code>@Autowired</code> 注解注入 <code>Environment</code> 对象的方式读取数据。这种方式 <code>SpringBoot</code> 会将配置文件中所有的数据封装到 <code>Environment</code> 对象中，如果需要使用哪个数据只需要通过调用 <code>Environment</code> 对象的 <code>getProperty(String name)</code> 方法获取。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Environment</span> <span class="n">env</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/config&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">gerConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;port=&#34;</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;server.port&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="自定义对象" data-numberify>自定义对象<a class="anchor ms-1" href="#自定义对象"></a></h3>
<p>SpringBoot提供了将配置文件中的数据封装到我们自定义的实体类对象中的方式。具体操作如下：</p>
<ol>
<li>
<p>在实体类上添加<code>@Component</code>注解。</p>
<p>表示将实体类 <code>bean</code> 的创建交给 <code>Spring</code> 管理。</p>
</li>
<li>
<p>使用 <code>@ConfigurationProperties</code> 注解表示加载配置文件。</p>
<p>在该注解中也可以使用 <code>prefix</code> 属性指定只加载指定键的数据。</p>
</li>
<li>
<p>在Controller中进行注入。</p>
</li>
</ol>
<p>Example：</p>
<p>添加依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-configuration-processor<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在配置文件中添加：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">myconfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">SpringBoot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="m">666</span><span class="w">
</span></span></span></code></pre></div><p>实体类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">&#34;myconfig&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">port</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// getter and setter...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>Controller：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">MyConfig</span> <span class="n">myConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/myconfig&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MyConfig</span> <span class="nf">getMyConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">myConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="多环境配置" data-numberify>多环境配置<a class="anchor ms-1" href="#多环境配置"></a></h3>
<p>由于开发环境、测试环境、生产环境的配置都不相同。所以SpringBoot给开发者提供了多环境的快捷配置，需要切换环境时只需要改一个配置即可。</p>
<ul>
<li>
<p><code>yaml</code>格式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># 开发</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">activate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 配置环境名</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">on-profile</span><span class="p">:</span><span class="w"> </span><span class="l">dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># spring.profiles 配置已弃用</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 生产</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">activate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">on-profile</span><span class="p">:</span><span class="w"> </span><span class="l">pro</span><span class="w"> </span><span class="c">#给生产环境起的名字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">81</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 测试</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">activate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">on-profile</span><span class="p">:</span><span class="w"> </span><span class="l">test</span><span class="w"> </span><span class="c">#给测试环境起的名字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">82</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 设置启用的环境</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">profiles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">active</span><span class="p">:</span><span class="w"> </span><span class="l">test </span><span class="w"> </span><span class="c">#表示使用的是开发环境的配置</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><code>properties</code>格式：</p>
<p>使用多文件方式，文件名以<code>application-</code>开头。如：</p>
<ul>
<li>
<p><code>application-dev.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">80</span>
</span></span></code></pre></div></li>
<li>
<p><code>application-pro.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">81</span>
</span></span></code></pre></div></li>
<li>
<p><code>application-test.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">82</span>
</span></span></code></pre></div></li>
</ul>
<p>SpringBoot只会默认加载名为 <code>application.properties</code> 的配置文件，所以需要在 <code>application.properties</code> 配置文件中设置启用哪个配置文件。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">spring.profiles.active</span><span class="o">=</span><span class="s">pro</span>
</span></span></code></pre></div></li>
</ul>
<p>SpringBoot提供了在运行<code>jar</code>时设置开启指定的环境的方式。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">java –jar springbootdemo.jar –-spring.profiles.active<span class="o">=</span><span class="nb">test</span>
</span></span></code></pre></div><p>临时修改端口号：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">java –jar springbootdemo.jar –-server.port<span class="o">=</span><span class="m">88</span>
</span></span></code></pre></div><blockquote>
<p>命令行设置的端口号优先级高于配置文件。
<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config" target="_blank" rel="noopener noreferrer">SpringBoot官网<i class="fas fa-external-link-square-alt ms-1"></i></a>已经对配置的优先级进行了说明：
<picture><img class="img-fluid " alt="" src="/docs/spring/springboot/springboot-base/image-20210917193910191.png" loading="lazy" width="1680" height="792" />
</picture>

</p>
</blockquote>
<h3 id="配置文件分类" data-numberify>配置文件分类<a class="anchor ms-1" href="#配置文件分类"></a></h3>
<p>SpringBoot定义了配置文件不同的放置的位置。而放在不同位置的优先级是不同的。SpringBoot中4级配置文件放置位置：</p>
<ol>
<li>classpath：application.yml</li>
<li>classpath：config/application.yml</li>
<li>file：application.yml</li>
<li>file：config/application.yml</li>
</ol>
<blockquote>
<p>级别越高优先级越高。</p>
</blockquote>
<h1 id="第三方资源整合" data-numberify>第三方资源整合<a class="anchor ms-1" href="#第三方资源整合"></a></h1>
<h2 id="整合-junit" data-numberify>整合 Junit<a class="anchor ms-1" href="#整合-junit"></a></h2>
<p>SpringBoot整合了Junit并可将其作为起步依赖整合到项目中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>SpringBoot整合Junit分为三步：</p>
<ol>
<li>在测试类上添加 <code>@SpringBootTest</code> 注解。</li>
<li>使用 <code>@Autowired</code> 注入要测试的资源。</li>
<li>定义测试方法进行测试。</li>
</ol>
<p>Example：</p>
<p>编写Service：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Book save ...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试<code>BookService</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">SpringbootDemoApplicationTests</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">BookService</span> <span class="n">bookService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">bookService</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>由于引导类默认扫描当前包下的类和包，所以测试类（或者测试类的包）和引导类要在同个包下。</p>
<p>否则，可以使用<code>@SpringBootTest</code>注解的<code>classes</code>属性指定引导类的字节码对象。如：<code>@SpringBootTest(classes = {SpringbootDemoApplication.class})</code></p>
</blockquote>
<h2 id="整合-mybatis" data-numberify>整合 MyBatis<a class="anchor ms-1" href="#整合-mybatis"></a></h2>
<p>在整合MyBatis前先建一个用于测试的数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SET</span><span class="w"> </span><span class="k">NAMES</span><span class="w"> </span><span class="n">utf8mb4</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SET</span><span class="w"> </span><span class="n">FOREIGN_KEY_CHECKS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- Table structure for book_tb
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w">  </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span><span class="w"> </span><span class="nb">CHARACTER</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="n">utf8mb3</span><span class="w"> </span><span class="k">COLLATE</span><span class="w"> </span><span class="n">utf8mb3_bin</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">USING</span><span class="w"> </span><span class="n">BTREE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="n">ENGINE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">InnoDB</span><span class="w"> </span><span class="nb">CHARACTER</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">utf8mb3</span><span class="w"> </span><span class="k">COLLATE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">utf8mb3_bin</span><span class="w"> </span><span class="n">ROW_FORMAT</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">Dynamic</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- Records of book_tb
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;郑嘉伦&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;钱璐&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;黄安琪&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;龙宇宁&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;姜宇宁&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;赵嘉伦&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SET</span><span class="w"> </span><span class="n">FOREIGN_KEY_CHECKS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>
<p>导入依赖：</p>
<ol>
<li>在创建项目时，通过Spring Initializr导入依赖：
<picture><img class="img-fluid " alt="" src="/docs/spring/springboot/springboot-base/1677302021447.png" loading="lazy" width="1575" height="1466" />
</picture>

</li>
<li>在<code>pom.xml</code>中导入坐标：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.0.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mysql-connector-j<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>编写数据库配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">datasource</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">driver-class-name</span><span class="p">:</span><span class="w"> </span><span class="l">com.mysql.jdbc.Driver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">jdbc:mysql://localhost:3306/spring_db</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>SpringBoot版本低于2.4.3（不含），Mysql驱动版本大于8.0时，需要在url连接串中配置时区 <code>jdbc:mysql://localhost:3306/spring_db?serverTimezone=UTC</code>，或在MySQL数据库端配置时区解决此问题。</p>
</blockquote>
</li>
<li>
<p>定义实体类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// getter、setter and toString
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>定义DAO接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Mapper</span> <span class="c1">// SpringBoot定义DAO接口类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">BookDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Select</span><span class="o">(</span><span class="s">&#34;SELECT * FROM book_tb WHERE id = #{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Book</span> <span class="nf">getById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>定义Test类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">SpringbootMybatisApplicationTests</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">BookDao</span> <span class="n">bookDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testGetById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="n">bookDao</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">book</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="使用-druid-数据源" data-numberify>使用 Druid 数据源<a class="anchor ms-1" href="#使用-druid-数据源"></a></h3>
<p>SpringBoot有默认的数据源，但是也可以指定使用Druid数据源。</p>
<ul>
<li>
<p>导入Druid依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.1.16<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>application.yml</code>配置文件配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">datasource</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">driver-class-name</span><span class="p">:</span><span class="w"> </span><span class="l">com.mysql.cj.jdbc.Driver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">jdbc:mysql://localhost:3306/spring_db?serverTimezone=UTC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">com.alibaba.druid.pool.DruidDataSource</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>SpringMVC 基础</title>
      <link>/docs/spring/springmvc/springmvc-base/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springmvc/springmvc-base/</guid>
      <description><![CDATA[简介 SpringMVC是Spring下的一个用于Web表现层开发的技术。相比Servlet，SpringMVC更加高效快捷。 SpringMV]]></description>
      <content:encoded><![CDATA[<h1 id="简介" data-numberify>简介<a class="anchor ms-1" href="#简介"></a></h1>
<p>SpringMVC是Spring下的一个用于Web表现层开发的技术。相比Servlet，SpringMVC更加高效快捷。</p>
<p>SpringMVC流程如下：</p>
<ul>
<li>浏览器发送请求到Tomcat服务器；</li>
<li>Tomcat接收请求后，将请求交给SpringMVC中的<code>DispatcherServlet</code>（前端控制器）来处理。</li>
<li><code>DispatcherServlet</code>按照对应规则将请求分发到对应的<code>Bean</code>。</li>
<li><code>Bean</code>由我们自己编写来处理不同的请求。
每个<code>Bean</code>中可以处理一个或多个不同的请求
URL。</li>
</ul>
<blockquote>
<p><code>DispatcherServlet</code>和<code>Bean</code>对象都需要交给Spring容器来进行管理。</p>
</blockquote>
<p>综上，我们需要编写的内容为：</p>
<ul>
<li>
<p><code>Bean</code>对象；</p>
</li>
<li>
<p>请求URL和<code>Bean</code>对象对应关系的配置；</p>
</li>
<li>
<p>构建Spring容器。</p>
<p>将<code>DispatcherServlet</code>和<code>Bean</code>对象交给容器管理。</p>
</li>
<li>
<p>配置Tomcat服务器。</p>
<p>使Tomcat能够识别Spring容器，并将请求交给容器中的<code>DispatcherServlet</code>来分发请求。</p>
</li>
</ul>
<p>项目的基本实现步骤如下：</p>
<ol>
<li>创建Web工程（Maven结构），并在工程的<code>pom.xml</code>中添加SpringMVC和Servlet坐标。</li>
<li>创建SpringMVC控制器类（等同于Servlet功能）。</li>
<li>初始化SpringMVC环境（同Spring环境），设定SpringMVC加载对应的<code>Bean</code>。</li>
<li>初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求。</li>
</ol>
<h2 id="spring-mvc-工作流程" data-numberify>Spring MVC 工作流程<a class="anchor ms-1" href="#spring-mvc-工作流程"></a></h2>
<p>SpringMVC的使用过程共分两个阶段：</p>
<ol>
<li>
<p>启动服务器初始化过程；</p>
<ol>
<li>
<p>服务器启动，执行<code>ServletConfig</code>类，初始化Web容器。</p>
</li>
<li>
<p>根据<code>getServletConfigClasses</code>获取所需的SpringMVC配置类（这里是<code>SpringMvcConfig</code>）来初始化SpringMVC的容器。</p>
</li>
<li>
<p>加载<code>SpringMvcConfig</code>配置类。</p>
</li>
<li>
<p>执行<code>@ComponentScan</code>加载对应的<code>Bean</code>。</p>
<p>扫描指定包下所有类上的注解，将所有的Controller类（如有<code>@Controller</code>、<code>@RestController</code>等注解的类）加载到容器中。</p>
</li>
<li>
<p>加载每一个<code>Controler</code>。</p>
<p>使用<code>@RequestMapping</code>建立请求路径与<code>Controler</code>中的方法的对应关系。</p>
</li>
<li>
<p>执行<code>getServletMappings</code>方法，定义所有的请求都通过SpringMVC。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">Spring</span><span class="o">[]</span>  <span class="nf">getServletMappings</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">Spring</span><span class="o">[]{</span><span class="s">&#34;/&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>    
</span></span></code></pre></div><p><code>/</code>代表所拦截请求的路径规则，只有被拦截后才能交给SpringMVC来处理请求。</p>
</li>
</ol>
</li>
<li>
<p>单次请求过程。</p>
<ol>
<li>根据请求路径发送请求。</li>
<li>Web容器将符合设置的请求路径的请求交给SpringMVC处理。</li>
<li>解析请求路径。</li>
<li>执行匹配对应请求路径的方法。</li>
<li>将有<code>@ResponseBody</code>方法的返回值作为响应体返回给请求方。</li>
</ol>
</li>
</ol>
<hr>
<h1 id="项目环境及结构" data-numberify>项目环境及结构<a class="anchor ms-1" href="#项目环境及结构"></a></h1>
<h2 id="项目结构" data-numberify>项目结构<a class="anchor ms-1" href="#项目结构"></a></h2>
<p>使用SpringMVC开发的项目结构如下：</p>
<ul>
<li>📁<code>project-file-name</code>
<ul>
<li>📁<code>src</code>
<ul>
<li>📁<code>main</code>
<ul>
<li>📁<code>java</code>
<ul>
<li>📁<code>com.linner</code>
<ul>
<li>📁<code>config</code> —— 配置类</li>
<li>📁<code>controller</code> —— 表现层</li>
<li>📁<code>dao</code> —— 持久层</li>
<li>📁<code>domain</code> —— 实体类</li>
<li>📁<code>service</code> —— 业务层</li>
</ul>
</li>
</ul>
</li>
<li>📁<code>resourcs</code></li>
<li>📁<code>webapp</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>这种项目结构采用了SSM架构，即：</p>
<ul>
<li>表现层；</li>
<li>持久层；</li>
<li>业务层。</li>
</ul>
<p>通过IDEA创建SpringMVC项目步骤如下：</p>
<ol>
<li>
<p>创建基础的Maven-Archetype-Webapp项目。</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springmvc/springmvc-base/1676947539616.png" loading="lazy" width="1599" height="589" />
</picture>

</p>
</li>
<li>
<p>补全项目结构：</p>
<ul>
<li>📁<code>src</code>
<ul>
<li>📁<code>main</code>
<ul>
<li>📁<code>java</code></li>
<li>📁<code>resourcs</code></li>
<li>📁<code>webapp</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>修改<code>pom.xml</code>文件：</p>
<p>将多余的内容删除，然后添加SpringMVC所需的依赖。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span> <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl"><span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>springmvc-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;maven.compiler.source&gt;</span>1.8<span class="nt">&lt;/maven.compiler.source&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;maven.compiler.target&gt;</span>1.8<span class="nt">&lt;/maven.compiler.target&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/build&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="基础环境" data-numberify>基础环境<a class="anchor ms-1" href="#基础环境"></a></h2>
<p>Tomcat7 Maven插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.maven<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>tomcat7-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>2.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;port&gt;</span>80<span class="nt">&lt;/port&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;path&gt;</span>/<span class="nt">&lt;/path&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;uriEncoding&gt;</span>UTF-8<span class="nt">&lt;/uriEncoding&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/plugin&gt;</span>
</span></span></code></pre></div><p>基础依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Servlet --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Servlet需要修改作用范围，否则会与Tomcat中的servlet-api包发生冲突 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- provided代表的是该包只在编译和测试的时候用 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- SpringMVC --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-webmvc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="dao-相关依赖环境" data-numberify>DAO 相关依赖环境<a class="anchor ms-1" href="#dao-相关依赖环境"></a></h2>
<p>使用SpringMVC构建Web项目，除了以上基础配置外，还需要导入其他配置。</p>
<p>DAO相关的坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Spring JDBC --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- MySQL --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>5.1.47<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- MyBatis --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>3.5.6<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- MyBatis Spring依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.3.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- Druid 数据库连接池 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.1.16<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="其它依赖环境" data-numberify>其它依赖环境<a class="anchor ms-1" href="#其它依赖环境"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Jackson --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>jackson-databind<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>2.9.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 日志 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>ch.qos.logback<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>logback-classic<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.2.3<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- Thymeleaf（不常用） --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.thymeleaf<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>thymeleaf-spring5<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>3.0.12.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 文件上传依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>commons-fileupload<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>commons-fileupload<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.3.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- Test --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- Junit 单元测试 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>3.8.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="配置" data-numberify>配置<a class="anchor ms-1" href="#配置"></a></h1>
<p>配置SpringMVC有两种方式：</p>
<ul>
<li><code>web.xml</code>配置文件</li>
<li>配置类</li>
</ul>
<h2 id="配置文件方式" data-numberify>配置文件方式<a class="anchor ms-1" href="#配置文件方式"></a></h2>
<p>在<code>web.xml</code>中注册SpringMVC的前端控制器<code>DispatcherServlet</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE web-app PUBLIC
</span></span></span><span class="line"><span class="cl"><span class="cp"> &#34;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp"> &#34;http://java.sun.com/dtd/web-app_2_3.dtd&#34; &gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;web-app&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-name&gt;</span>springMVC<span class="nt">&lt;/servlet-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 指定SpringMVC前端控制器： --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet-mapping&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-name&gt;</span>springMVC<span class="nt">&lt;/servlet-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">            配对路径
</span></span></span><span class="line"><span class="cl"><span class="c">            / 表示处理所有不包括.jsp的请求
</span></span></span><span class="line"><span class="cl"><span class="c">            因为.jsp有自己的servlet，如果在DispatcherServlet中处理.jsp，会导致找不到相应页面，从而导致渲染失败
</span></span></span><span class="line"><span class="cl"><span class="c">        --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;url-pattern&gt;</span>/<span class="nt">&lt;/url-pattern&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/webapp&gt;</span>
</span></span></code></pre></div><blockquote>
<p><code>&lt;url-pattern&gt;</code>：</p>
<ul>
<li><code>/</code>：表示匹配所有不包括<code>.jsp</code>的请求；</li>
<li><code>/*</code>：能够匹配所有请求，包括<code>.jsp</code>。</li>
</ul>
</blockquote>
<p>扩展配置：</p>
<p><code>web.xml</code>中的配置还可以定义在其它文件中，例如在<code>resourece</code>下创建新的配置文件<code>springMVC.xml</code>。然后在<code>web.xml</code>添加新配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">    配置SpringMVC的前端控制器
</span></span></span><span class="line"><span class="cl"><span class="c">    对浏览器发送的请求统一进行处理
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;webapp&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-name&gt;</span>springMVC<span class="nt">&lt;/servlet-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">            通过初始化参数指定SpringMVC配置文件的位置和名称
</span></span></span><span class="line"><span class="cl"><span class="c">         --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;init-param&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- contextConfigLocation为固定值 --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">                使用 classpath: 表示从类路径查找配置文件，例如maven工程中的src/main/resources
</span></span></span><span class="line"><span class="cl"><span class="c">             --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-value&gt;</span>classpath:springMVC.xml<span class="nt">&lt;/param-value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/init-param&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">            将启动控制DispatcherServlet的初始化时间提前到服务器启动时：
</span></span></span><span class="line"><span class="cl"><span class="c">        --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/webapp&gt;</span>
</span></span></code></pre></div><p>在<code>springMVC.xml</code>中配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xmlns:context=</span><span class="s">&#34;http://www.springframework.org/schema/context&#34;</span> <span class="na">xmlns:mvc=</span><span class="s">&#34;http://www.springframework.org/schema/mvc&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 自动扫描包 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&#34;com.linner.controller&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 配置Thymeleaf视图解析器（不常用） --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;viewResolver&#34;</span> <span class="na">class=</span><span class="s">&#34;org.thymeleaf.spring5.view.ThymeleafViewResolver&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;order&#34;</span> <span class="na">value=</span><span class="s">&#34;1&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 设置编码，将编码都转为 UTF-8 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;characterEncoding&#34;</span> <span class="na">value=</span><span class="s">&#34;UTF-8&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;templateEngine&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;org.thymeleaf.spring5.SpringTemplateEngine&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;templateResolver&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">                        <span class="c">&lt;!-- 视图前缀 --&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;prefix&#34;</span> <span class="na">value=</span><span class="s">&#34;/WEB-INF/templates/&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">                        <span class="c">&lt;!-- 视图后缀 --&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;suffix&#34;</span> <span class="na">value=</span><span class="s">&#34;.html&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;templateMode&#34;</span> <span class="na">value=</span><span class="s">&#34;HTML5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;characterEncoding&#34;</span> <span class="na">value=</span><span class="s">&#34;UTF-8&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 静态资源访问 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mvc:view-controller</span> <span class="na">path=</span><span class="s">&#34;/&#34;</span> <span class="na">view-name=</span><span class="s">&#34;index&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">        处理静态资源，例如html、js、css、jpg
</span></span></span><span class="line"><span class="cl"><span class="c">        若只设置该标签，则只能访问静态资源，其他请求则无法访问
</span></span></span><span class="line"><span class="cl"><span class="c">        此时必须设置&lt;mvc:annotation-driven/&gt;解决问题
</span></span></span><span class="line"><span class="cl"><span class="c">    --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mvc:default-servlet-handler/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 开启mvc注解驱动 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mvc:annotation-driven&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mvc:message-converters&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 处理响应中文内容乱码 --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;org.springframework.http.converter.StringHttpMessageConverter&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;defaultCharset&#34;</span> <span class="na">value=</span><span class="s">&#34;UTF-8&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;supportedMediaTypes&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;list&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;value&gt;</span>text/html<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;value&gt;</span>application/json<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;/list&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/mvc:message-converters&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/mvc:annotation-driven&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><blockquote>
<p>在视图解析器中设置了视图前缀<code>&lt;property name=&quot;prefix&quot; ...&gt;</code>和视图后缀<code>&lt;property name=&quot;suffix&quot; ...&gt;</code>，那么在Controller的方法中，想要跳转到视图时，只需返回对应的视图文件名称，并去掉其后缀。例如访问<code>hello.html</code>只需返回<code>&quot;hello&quot;</code>，但<code>hello.html</code>必须要在对应的前缀路径中。</p>
</blockquote>
<p>SpringMVC编码过滤器（必须在<code>web.xml</code>中进行注册）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;webapp&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 配置 SpringMVC 的编码过滤器 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;filter&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;filter-name&gt;</span>CharacterEncodingFilter<span class="nt">&lt;/filter-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="nt">&lt;/filter-class&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;init-param&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-name&gt;</span>encoding<span class="nt">&lt;/param-name&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-value&gt;</span>UTF-8<span class="nt">&lt;/param-value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/init-param&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;init-param&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-name&gt;</span>forceResponseEncoding<span class="nt">&lt;/param-name&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/init-param&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/filter&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;filter-mapping&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;filter-name&gt;</span>CharacterEncodingFilter<span class="nt">&lt;/filter-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/filter-mapping&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/webapp&gt;</span>
</span></span></code></pre></div><blockquote>
<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效。</p>
</blockquote>
<h2 id="配置类方式" data-numberify>配置类方式<a class="anchor ms-1" href="#配置类方式"></a></h2>
<p>使用配置类则无需在<code>webapp/WEB-INF</code>中添加<code>web.xml</code>文件（当然也可以选择添加）。</p>
<p>SpringMVC项目至少需要<code>ServletConfig</code>、<code>SpringConfig</code>和<code>SpringMvcConfig</code>这三个配置类。</p>
<ul>
<li>ServletConfig：Spring MVC项目初始化类，也是项目的入口，作用与<code>web.xml类似</code>。</li>
<li>SpringConfig：控制业务（Service）和功能（如DataSource、SqlSessionFactoryBean、 MapperScannerConfigurer等）相关的Bean。</li>
<li>SpringMvcConfig（WebConfig）：加载表现层Bean（Controller）。</li>
</ul>
<p><code>ServletConfig</code>（Web项目入口配置类）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletConfig</span> <span class="kd">extends</span> <span class="n">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 指定Spring的配置类
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getRootConfigClasses</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">SpringConfig</span><span class="o">.</span><span class="na">class</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 指定Spring MVC的配置类
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getServletConfigClasses</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">SpringMvcConfig</span><span class="o">.</span><span class="na">class</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 指定DispatcherServlet的映射路径，即url-pattern
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">getServletMappings</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&#34;/&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><code>ServletConfig</code>最重要的是继承<code>AbstractAnnotationConfigDispatcherServletInitializer</code>这个类，并反别重写它的三个方法。</p>
<p>在Servlet3.0环境中，容器会在类路径中查找实现<code>javax.servlet.ServletContainerlnitializer</code>接口的类，如果找到的话就用它来配置Servlet容器。</p>
<p>Spring提供了这个接口的实现，名为<code>SpringServletContainerlnitializer</code>，这个类反过来又会查找实现<code>WebApplicationInitializer</code>的类并将配置的任务交给它们来完成。</p>
<p>Spring3.2引l入了一个便利的<code>WebApplicationInitializer</code>基础实现，名为<code>AbstractAnnotationConfigDispatcherServletlnitializer</code>，当我们的类扩展了<code>AbstractAnnotationConfigDispatcherServletInitializer</code>，并将其部署到Servlet3.O容器的时候，容器会自动发现它，并用它来配置<code>Servlet</code>上下文。</p>
</blockquote>
<p><code>SpringConfig</code>（启动Tomcat服务器时加载Spring配置类）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.service&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">(</span><span class="s">&#34;classpath:jdbc.properties&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Import</span><span class="o">({</span><span class="n">JdbcConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">MyBatisConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span> <span class="c1">// 引入其它配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@EnableTransactionManagement</span>    <span class="c1">// 开启事务管理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>Spring需要管理的是<code>service</code>包和<code>dao</code>包。但<code>dao</code>包最终是交给<code>MapperScannerConfigurer</code>对象来进行扫描处理的。所以<code>SpringConfig</code>只需要扫描到<code>service</code>包即可。</p>
<p>演示<code>@ComponentScan</code>的另一种用法（排除<code>controller</code>包中的Bean）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">&#34;com.linner&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">excludeFilters</span><span class="o">=</span><span class="nd">@ComponentScan.Filter</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">type</span> <span class="o">=</span> <span class="n">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">classes</span> <span class="o">=</span> <span class="n">Controller</span><span class="o">.</span><span class="na">class</span> <span class="c1">// 排除@Controller定义的Bean
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span></code></pre></div><p>上面方法本质是使用<code>@ComponentScan</code>的<code>excludeFilters</code>属性设置过滤规则。</p>
<ul>
<li><code>type</code>：设置排除规则。
<ul>
<li><code>ANNOTATION</code>：按照注解排除。</li>
<li><code>ASSIGNABLE_TYPE</code>：按照指定的类型过滤。</li>
<li><code>ASPECTJ</code>：按照Aspectj表达式排除（基本上不会用）。</li>
<li><code>REGEX</code>：按照正则表达式排除。</li>
<li><code>CUSTOM</code>：按照自定义规则排除。</li>
</ul>
</li>
</ul>
<p><code>classes</code>：设置排除的具体注解类。</p>
</blockquote>
<p><code>SpringMvcConfig</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.controller&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebMvc</span>   <span class="c1">// MVC注解驱动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebConfig</span> <span class="kd">implements</span> <span class="n">WebMvcConfigurer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 相当于 default-servlet-handler
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureDefaultServletHandling</span><span class="o">(</span><span class="n">DefaultServletHandlerConfigurer</span> <span class="n">configurer</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">configurer</span><span class="o">.</span><span class="na">enable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 视图控制器 view-controller
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="n">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">&#34;/hello&#34;</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">&#34;hello&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 文件上传解析器
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MultipartResolver</span> <span class="nf">getMultipartResolver</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CommonsMultipartResolver</span> <span class="n">commonsMultipartResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CommonsMultipartResolver</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">commonsMultipartResolver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 异常处理解析器
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureHandlerExceptionResolvers</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">HandlerExceptionResolver</span><span class="o">&gt;</span> <span class="n">exceptionResolvers</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SimpleMappingExceptionResolver</span> <span class="n">exceptionResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleMappingExceptionResolver</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Properties</span> <span class="n">prop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">prop</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&#34;java.lang.ArithmeticException&#34;</span><span class="o">,</span> <span class="s">&#34;error&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">exceptionResolver</span><span class="o">.</span><span class="na">setExceptionMappings</span><span class="o">(</span><span class="n">prop</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 可以不设置，默认键即为 exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">exceptionResolver</span><span class="o">.</span><span class="na">setExceptionAttribute</span><span class="o">(</span><span class="s">&#34;exception&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">exceptionResolvers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">exceptionResolver</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 模板解析器
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ITemplateResolver</span> <span class="nf">getTemplateResolver</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取当前的 WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">WebApplicationContext</span> <span class="n">webApplicationContext</span> <span class="o">=</span> <span class="n">ContextLoader</span><span class="o">.</span><span class="na">getCurrentWebApplicationContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 使用WebApplicationContext获取ServletContext，并构造ServletContextTemplateResolver
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ServletContextTemplateResolver</span> <span class="n">templateResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServletContextTemplateResolver</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">webApplicationContext</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置视图前缀
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">templateResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">&#34;/WEB-INF/templates/&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置视图后缀
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">templateResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">&#34;.html&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">templateResolver</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">templateResolver</span><span class="o">.</span><span class="na">setTemplateMode</span><span class="o">(</span><span class="n">TemplateMode</span><span class="o">.</span><span class="na">HTML</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">templateResolver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 模板引擎
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param templateResolver 模板解析器（自动装配，@Autowired可忽略不写）
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SpringTemplateEngine</span> <span class="nf">getTemplateEngine</span><span class="o">(</span><span class="n">ITemplateResolver</span> <span class="n">templateResolver</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">SpringTemplateEngine</span> <span class="n">templateEngine</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpringTemplateEngine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">templateEngine</span><span class="o">.</span><span class="na">setTemplateResolver</span><span class="o">(</span><span class="n">templateResolver</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">templateEngine</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 设置视图解析器
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param templateEngine 模板引擎（自动装配）
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ViewResolver</span> <span class="nf">getViewResolver</span><span class="o">(</span><span class="n">SpringTemplateEngine</span> <span class="n">templateEngine</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">ThymeleafViewResolver</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThymeleafViewResolver</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setTemplateEngine</span><span class="o">(</span><span class="n">templateEngine</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>关于Spring MVC的配置类，除了扫描组件和配置模板解析器外，Spring提供了两种方式来配置，一种是实现<code>WebMvcConfigurer</code>接口，另一种是继承<code>WebMvcConfigurationSupport</code>。由于Java 8的接口中提供了<code>default</code>关键字来修饰接口方法，使得接口可以存在默认的实现，所以使用<code>WebMvcConfigurer</code>接口也不必实现所有接口。而在SpringBoot 2中使用<code>WebMvcConfigurationSupport</code>有可能会导致SpringBoot的自动配置不生效，并且在Spring MVC中使用<code>WebMvcConfigurationSupport</code>也可能导致配置类不生效，所以我个人<b><u>推荐使用<code>WebMvcConfigurer</code></u></b>。</p>
<p>如果你使用<code>WebMvcConfigurationSupport</code>后发现拦截器等配置不生效，那么可以尝试实现<code>WebMvcConfigurer</code>接口来解决问题。</p>
</blockquote>
<p>DAO相关配置类：</p>
<p><code>jdbc.properties</code>（数据库配置，放在项目中<code>resources</code>目录下）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">jdbc.driver</span><span class="o">=</span><span class="s">com.mysql.jdbc.Driver</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.url</span><span class="o">=</span><span class="s">jdbc:mysql:///spring_db?useSSL=false&amp;characterEncoding=utf-8</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.username</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.password</span><span class="o">=</span><span class="s">123456</span>
</span></span></code></pre></div><p><code>JdbcConfig</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JdbcConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.driver}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">driver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.url}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">url</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.username}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.password}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">dataSource</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="n">DruidDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DruidDataSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataSource</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="n">driver</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">PlatformTransactionManager</span> <span class="nf">transactionManager</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">DataSourceTransactionManager</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataSourceTransactionManager</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>MyBatisConfig</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyBatisConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SqlSessionFactoryBean</span> <span class="nf">sqlSessionFactory</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">SqlSessionFactoryBean</span> <span class="n">factoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">factoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">factoryBean</span><span class="o">.</span><span class="na">setTypeAliasesPackage</span><span class="o">(</span><span class="s">&#34;com.linner.domain&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">factoryBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MapperScannerConfigurer</span> <span class="nf">mapperScannerConfigurer</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="n">MapperScannerConfigurer</span> <span class="n">msc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapperScannerConfigurer</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">msc</span><span class="o">.</span><span class="na">setBasePackage</span><span class="o">(</span><span class="s">&#34;com.linner.dao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">msc</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="使用过滤器转换编码" data-numberify>使用过滤器转换编码<a class="anchor ms-1" href="#使用过滤器转换编码"></a></h1>
<p>在<code>ServletConfig</code>中重写<code>AbstractAnnotationConfigDispatcherServletInitializer</code>的<code>getServletFilters()</code>来注册过滤器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 注册过滤器
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">Filter</span><span class="o">[]</span> <span class="nf">getServletFilters</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置编码，将编码都转为 UTF-8
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">CharacterEncodingFilter</span> <span class="n">characterEncodingFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CharacterEncodingFilter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">characterEncodingFilter</span><span class="o">.</span><span class="na">setEncoding</span><span class="o">(</span><span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">characterEncodingFilter</span><span class="o">.</span><span class="na">setForceEncoding</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">HiddenHttpMethodFilter</span> <span class="n">hiddenHttpMethodFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HiddenHttpMethodFilter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">Filter</span><span class="o">[]{</span><span class="n">characterEncodingFilter</span><span class="o">,</span> <span class="n">hiddenHttpMethodFilter</span><span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="请求与响应" data-numberify>请求与响应<a class="anchor ms-1" href="#请求与响应"></a></h1>
<p>SpringMVC是Web层的框架，主要作用是接收请求、接收数据、响应结果。</p>
<p>编写Controller只需要在Controller类上使用<code>@Controller</code>注解即可。</p>
<h2 id="请求映射-requestmapping" data-numberify>请求映射 RequestMapping<a class="anchor ms-1" href="#请求映射-requestmapping"></a></h2>
<p>映射请求路径使用<code>@RequestMapping</code>注解。注解中的使用<code>value</code>属性指定映射的请求路径（由于是<code>value</code>属性，所以当注解中无需指定其它参数时，可以省略）。</p>
<p><code>@RequestMapping</code>可以分别作用在类和方法上：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/helloSpring&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">helloSpring</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Hello Spring!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/helloWorld&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">helloWorld</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Hello World!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p>方法上定义的<code>@RequestMapping</code>是具体的请求方式，包括请求路径和请求方式。</p>
<p>即，如果在方法上使用了<code>@RequestMapping</code>并且没有在类上使用<code>@RequestMapping</code>，那么该方法的请求路径即为方法上<code>@RequestMapping</code>中的值。</p>
</li>
<li>
<p>类上定义的<code>@RequestMapping</code>是请求目录。</p>
<p>即，如果在方法和类上均使用了<code>@RequestMapping</code>，那么该方法的请求路径需要加上类<code>@RequestMapping</code>注解中定义的目录。例如上方代码中的请求路径为<code>/user/helloSpring</code>和<code>/user/helloWorld</code>。</p>
</li>
</ul>
<p><code>value</code>属性是一个字符串数组，可以通过以下方式来指定多个请求路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">({</span><span class="s">&#34;hello&#34;</span><span class="o">,</span> <span class="s">&#34;helloWorld&#34;</span><span class="o">})</span>
</span></span></code></pre></div><p><code>@RequestMapping</code>除了<code>value</code>属性外，还有<code>method</code>属性。<code>method</code>属性是用来指定请求方式的，如：<code>@RequestMapping(method = RequestMethod.POST)</code>（匹配POST请求方式）。</p>
<blockquote>
<p>在客户端向服务器发送请求时，<code>DispatcherServlet</code>会首先根据<code>@RequestMapping</code>获取对应的控制器方法。</p>
</blockquote>
<h2 id="接收-url-参数" data-numberify>接收 URL 参数<a class="anchor ms-1" href="#接收-url-参数"></a></h2>
<blockquote>
<p>接收URL参数，GET和POST请求的编写方式一致。</p>
<p>如果要使用不同的方式接收请求，可以修改<code>@RequestMapping</code>注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/save&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span></span></code></pre></div></blockquote>
<h3 id="普通参数" data-numberify>普通参数<a class="anchor ms-1" href="#普通参数"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 [http://localhost/user/hello?name=张三] 访问
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 返回响应体 Hello 张三!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/hello&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Hello &#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&#34;!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 [http://localhost/user/login?name=张三&amp;password=abc] 访问
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 返回响应体 OK，终端输出 userName=张三; password=abc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">login</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">)</span> <span class="n">String</span> <span class="n">userName</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;userName=&#34;</span> <span class="o">+</span> <span class="n">userName</span> <span class="o">+</span> <span class="s">&#34;; password=&#34;</span> <span class="o">+</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p>请求参数：</p>
<p>普通参数即URL地址传参。</p>
<p><u>定义相同的地址参数名与方法形参变量名即可接收参数。</u></p>
<p><u>如果想要形参名与地址参数名不同则可使用<code>@RequestParam</code>注解定义地址参数名。</u></p>
<p>如果有多个请求参数则定义多个方法参数。</p>
</li>
<li>
<p>返回值：</p>
<p>返回值使用<code>@ResponseBody</code>注解后直接在方法中使用<code>return</code>返回。这里注解<code>@ResponseBody</code>是指将返回值作为响应体。</p>
</li>
</ul>
<h3 id="pojo类型参数" data-numberify>POJO类型参数<a class="anchor ms-1" href="#pojo类型参数"></a></h3>
<p>使用POJO类型接收参数，只需要让请求参数名与形参对象属性名相同即可。如果有嵌套的POJO参数，请求参数名与形参对象属性名相同，然后按照对象层次结构关系即可接收。</p>
<p>定义一个POJO类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">province</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// setter、getter and toString...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// setter、getter and toString...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>Controller：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 访问 [http://localhost/user/login?id=123&amp;password=abc&amp;name=张三&amp;address.province=广东&amp;address.city=广州]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 返回响应体 OK，终端输出 Login: User{id=123, name=&#39;张三&#39;, password=&#39;abc&#39;, address=Address{province=&#39;广东&#39;, city=&#39;广州&#39;}}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">login</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Login: &#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="数组集合类型参数" data-numberify>数组、集合类型参数<a class="anchor ms-1" href="#数组集合类型参数"></a></h3>
<p>接收数组参数只需让请求参数名与形参名相同且请求参数为多个即可（形参为数组类型）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 访问 [http://localhost/user/setHobbies?id=123&amp;hobbies=唱歌,跳舞,Rap,打篮球]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 返回响应体 OK，终端输出 User 123&#39;s hobbyies: [唱歌, 跳舞, Rap, 打篮球]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/setHobbies&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">setHobbies</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">hobbies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;User &#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&#34;&#39;s hobbies: &#34;</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">hobbies</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用集合类型形参接收参数，使用方式与数组不同（会报错）。因为SpringMVC将List看做是一个POJO对象来处理，将其创建一个对象并准备把前端的数据封装到对象中，但是List是一个接口无法创建对象。</p>
<p>使用集合类型形参接收参数需要使用<code>@RequestParam</code>绑定参数关系。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 访问方式与数组形式相同，响应体与终端输出也相同
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/setHobbies&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">setHobbies</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@RequestParam</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">hobbies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;User &#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&#34;&#39;s hobbies: &#34;</span> <span class="o">+</span> <span class="n">hobbies</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="日期格式" data-numberify>日期格式<a class="anchor ms-1" href="#日期格式"></a></h3>
<p>使用<code>@DateTimeFormat</code>可以设置参数的日期格式，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// URL: http://localhost/user/setBirthday?id=123&amp;birthday=2023/1/1 18:23:40
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/setBirthday&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">setBirthday</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@DateTimeFormat</span><span class="o">(</span><span class="n">pattern</span> <span class="o">=</span> <span class="s">&#34;yyyy/MM/dd HH:mm:ss&#34;</span><span class="o">)</span> <span class="n">Date</span> <span class="n">birthday</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;User &#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&#34;&#39;s birthday is &#34;</span> <span class="o">+</span> <span class="n">birthday</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="json-数据参数" data-numberify>JSON 数据参数<a class="anchor ms-1" href="#json-数据参数"></a></h2>
<p>使用JSON传输需要添加相应依赖。SpringMVC默认使用的是jackson来处理json的转换：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>jackson-databind<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>2.9.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在配置类中添加<code>@EnableWebMvc</code>注解来开启JSON数据类型自动转换：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner.controller&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebMvc</span> <span class="c1">// 开启JSON数据类型自动转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用JSON传输数据只需要在形参前添加<code>@ResponseBody</code>注解来将外部传递的JSON数据映射到形参到对象中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">login</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Login: &#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/setHobbies&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">setHobbies</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@RequestBody</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="cm">/* 也可以使用 String[] */</span> <span class="n">hobbies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;User &#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&#34;&#39;s hobbies: &#34;</span> <span class="o">+</span> <span class="n">hobbies</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>login()</code>：</p>
<p>URL：<code>http://localhost/user/login</code></p>
<p>JSON：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;张三&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;password&#34;</span><span class="p">:</span> <span class="s2">&#34;123&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;address&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;province&#34;</span><span class="p">:</span> <span class="s2">&#34;广东&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;city&#34;</span><span class="p">:</span> <span class="s2">&#34;广州&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></div></li>
<li>
<p><code>setHobbies</code>：</p>
<p>URL：<code>http://localhost/user/setHobbies2?id=123</code></p>
<p>JSON：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span><span class="s2">&#34;唱歌&#34;</span><span class="p">,</span> <span class="s2">&#34;跳舞&#34;</span><span class="p">,</span> <span class="s2">&#34;Rap&#34;</span><span class="p">,</span> <span class="s2">&#34;打篮球&#34;</span><span class="p">]</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="响应-json-数据" data-numberify>响应 JSON 数据<a class="anchor ms-1" href="#响应-json-数据"></a></h2>
<p>响应JSON数据需要依赖于<code>@ResponseBody</code>（在Controller中）和<code>@EnableWebMvc</code>（在配置类中）注解。将返回值设置为实体类对象，设置返回值类型为实体类类型，即可实现返回对应对象的JSON数据：</p>
<p>实体类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// constructor、setter、getter and toString ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>Controller:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/search&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Book</span> <span class="nf">search</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Book</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;Hello SpringMVC&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/searchName&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="nf">searchName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Search the book &#34;</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span> <span class="n">books</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">books</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Book</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">name</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">i</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">books</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>searchName()</code>：</p>
<p>URL：<code>http://localhost/books/searchName?name=SpringMVC</code>
返回JOSN：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC0&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC1&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC2&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC3&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC4&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div></li>
<li>
<p><code>search()</code>：</p>
<p>URL：<code>http://localhost/books/search?id=123</code>
返回JSON：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="ant-风格路径" data-numberify>Ant 风格路径<a class="anchor ms-1" href="#ant-风格路径"></a></h2>
<p>在Ant风格中，定义了以下几种符号：</p>
<ul>
<li><code>?</code>：表示匹配请求资源目录中的<u>任意单个字符</u>。</li>
<li><code>*</code>：表示匹配请求资源目录中的<u>任意0个或多个字符</u>。</li>
<li><code>/**/</code>：表示匹配请求路径中任意一层或多层目录。例如<code>/**/user</code>可以匹配<code>/abc/user</code>、<code>/abc/def/user</code>等等。</li>
</ul>
<h2 id="rest-风格" data-numberify>REST 风格<a class="anchor ms-1" href="#rest-风格"></a></h2>
<p>REST（Representational State Transfer，表现形式状态转换），是一种软件架构风格。REST的优点有：</p>
<ul>
<li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作。</li>
<li>简化书写。</li>
</ul>
<p>按照REST风格访问资源时使用行为动作区分对资源进行了何种操作：</p>
<ul>
<li>GET：查询；</li>
<li>POST：新增。</li>
<li>PUT：修改。</li>
<li>DELETE：删除。</li>
</ul>
<p>如：</p>
<ul>
<li>
<p><code>http://localhost/users</code> —— GET：</p>
<p>查询全部用户信息（查询）。</p>
</li>
<li>
<p><code>http://localhost/users/1</code> —— GET：查询指定用户（id为1）信息（查询）。</p>
</li>
<li>
<p><code>http://localhost/users</code> —— POST：添加用户信息（新增/保存）。</p>
</li>
<li>
<p><code>http://localhost/users</code> —— PUT：修改用户信息（修改/更新）。</p>
</li>
<li>
<p><code>http://localhost/users/1</code> —— DELETE：删除用户信息（删除）。</p>
</li>
</ul>
<blockquote>
<p>描述模块的名称通常使用复数，表示此类资源，而非单个资源。</p>
</blockquote>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/users&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 添加用户
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">save</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 删除用户
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/{id}&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">DELETE</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">delete</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 修改用户
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">PUT</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">update</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据用户id查询
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/{id}&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">searchById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 查询所有用户
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">searchAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>上方Controller中每个方法的<code>@RequestMapping</code>中都使用了<code>method</code>元素来确定请求方式。并且根据需要<code>save()</code>和<code>update()</code>都接收一个JSON数据。</p>
<p><code>delete()</code>和<code>searchById()</code>都使用了路径参数（<code>value = &quot;\{id}&quot;</code>）。指定路径参数后，需要在方法参数列表中添加名称相同的参数，并且用<code>@PathVariable</code>注解（<code>public String delete(@PathVariable int id)</code>）。</p>
<p>路径参数可以定义多个，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/{id}/{name}&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">searchById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果想要路径参数名与形参名不同，需要在<code>@PathVariable</code>中注明对应关系，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/{id}&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">DELETE</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">delete</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">&#34;id&#34;</span><span class="o">)</span> <span class="kt">int</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="restful-快速开发" data-numberify>RESTful 快速开发<a class="anchor ms-1" href="#restful-快速开发"></a></h3>
<ul>
<li>
<p>使用<code>@RestController</code>注解：</p>
<p>将<code>@ResponseBody</code>注解提到类上，让所有的方法都有<code>@ResponseBody</code>的功能。
<code>@RestController</code>注解正好相当于<code>@Controller</code>加上<code>@ResponseBody</code>的功能，所以可以使用<code>@RestController</code>替代它们。</p>
</li>
<li>
<p>使用<code>@GetMapping</code>、<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>等替代<code>@RequestMapping</code>。</p>
<p>例如<code>@GetMapping</code>就相当于<code>RequestMapping(method = RequestMethod.GET)</code>。</p>
</li>
</ul>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 搜索全部书籍
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;All Books&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 搜索图书
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Get by id &#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 保存图书
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PostMapping</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">save</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">Book</span> <span class="n">book</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Save &#34;</span> <span class="o">+</span> <span class="n">book</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 修改图书
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PutMapping</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">update</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">Book</span> <span class="n">book</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Update &#34;</span> <span class="o">+</span> <span class="n">book</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 删除图书
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@DeleteMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">delete</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Delete by id&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="params-请求参数映射匹配" data-numberify>params 请求参数映射匹配<a class="anchor ms-1" href="#params-请求参数映射匹配"></a></h2>
<p><code>params</code>是<code>@RequestMapping</code>中的一个属性，该属性通过请求的请求参数匹配请求映射。</p>
<p>用法如下：</p>
<ul>
<li>
<p><code>&quot;param&quot;</code>：请求映射所匹配的请求必须携带<code>param</code>这个请求参数。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;login&#34;</span><span class="o">},</span> <span class="n">params</span> <span class="o">=</span> <span class="s">&#34;username&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>请求路径示例：</p>
<pre tabindex="0"><code>http://localhost/login?username=zhangsan
</code></pre></li>
<li>
<p><code>&quot;!param&quot;</code>：否定匹配，请求映射所匹配的请求必须不能携带<code>param</code>请求参数。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;login&#34;</span><span class="o">},</span> <span class="n">params</span> <span class="o">=</span> <span class="s">&#34;!username&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>如果请求路径中包含参数<code>username</code>将不会匹配到该<code>@RequestMapping</code>。</p>
</li>
<li>
<p><code>&quot;param=value&quot;</code>：等值匹配，请求映射所匹配的请求必须携带<code>param</code>请求参数，且<code>param</code>参数的值必须为<code>value</code>。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;login&#34;</span><span class="o">},</span> <span class="n">params</span> <span class="o">=</span> <span class="s">&#34;username=admin&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>请求路径为：</p>
<pre tabindex="0"><code>http://localhost/login?username=admin
</code></pre></li>
<li>
<p><code>&quot;param!=value&quot;</code>：非值匹配，请求映射所匹配的请求必须携带<code>param</code>请求参数，但<code>param</code>的值不能为<code>value</code>。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;login&#34;</span><span class="o">},</span> <span class="n">params</span> <span class="o">=</span> <span class="s">&#34;username!=admin&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>如果请求路径携带参数<code>username</code>且值为<code>admin</code>则匹配失败。</p>
</li>
<li>
<p><code>{expression1[, expression2[, ...]]}</code>：</p>
<p><code>params</code>是字符串数组类型，可以指定多个参数规则，其中<code>expression</code>可以是以上任何类型的字符串表达式中的任何一种。</p>
</li>
</ul>
<p><code>params</code>只对其指定的参数有要求，没有被其指定的参数并没有任何限制。</p>
<p>如果请求的路径和方式都满足<code>@RequestMapping</code>，但是与<code>params</code>指定的规则不付，如果此时没有其它映射来匹配这个请求，服务器会返回给浏览器<code>400</code>错误。</p>
<h2 id="headers-请求头匹配" data-numberify>headers 请求头匹配<a class="anchor ms-1" href="#headers-请求头匹配"></a></h2>
<p><code>headers</code>是<code>@RequestMapping</code>的属性，它指定请求的请求头信息匹配规则。</p>
<p><code>headers</code>的字符串表达式语法与<code>params</code>十分相似：</p>
<ul>
<li>
<p><code>&quot;header&quot;</code>：请求映射所匹配的请求必须携带<code>header</code>请求头信息。</p>
</li>
<li>
<p><code>&quot;!header&quot;</code>：请求映射所匹配的请求必须不能携带<code>header</code>请求头信息。</p>
</li>
<li>
<p><code>&quot;header=value&quot;</code>：请求映射所匹配的请求必须携带<code>header</code>请求头信息且<code>header=value</code>。</p>
<p>请求头中使用的是<code>:</code>分隔开的键值对，<code>:</code>左边是键（即上述中的<code>header</code>），右边是值（即上述中的<code>value</code>）。只需要将<code>:</code>替换为<code>=</code>即是对应的<code>headers</code>字符串表达式。</p>
</li>
<li>
<p><code>&quot;header!=value&quot;</code>：要求请求映射所匹配的请求必须携带<code>header</code>请求头信息且<code>header!=value</code>。</p>
</li>
<li>
<p><code>{expression1[, expression2[, ...]]}</code>：<code>headers</code>属性同样是字符串数组类型，可以在<code>{}</code>中使用上述任何表达式。</p>
</li>
</ul>
<p>当<code>@RequestMapping</code>其它条件都满足，除了<code>headers</code>时，服务器会返回<code>404</code>错误。</p>
<hr>
<h1 id="域对象共享数据" data-numberify>域对象共享数据<a class="anchor ms-1" href="#域对象共享数据"></a></h1>
<p><code>request</code>域对象共享数据的常用方式大致有5种：</p>
<ol>
<li>通过<code>ServletAPI</code>获取（不建议使用）。即通过<code>ServletRequest</code>或<code>HttpServletRequest</code>对象获取<code>request</code>域。</li>
<li>通过<code>ModelAndView</code>获取。</li>
<li>通过<code>Model</code>获取。</li>
<li>通过<code>Map&lt;String, Object&gt;</code>获取。</li>
<li>通过<code>ModelMap</code>获取。</li>
</ol>
<h2 id="servletapi" data-numberify>ServletAPI<a class="anchor ms-1" href="#servletapi"></a></h2>
<p>获取<code>request</code>域对象共享数据的方式之一就是使用<code>ServletAPI</code>。即，在Controller对象中的映射方法中，添加一个<code>ServletRequest</code>或<code>HttpServletRequest</code>对象参数。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testServletAPI&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testServletAPI</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello ServletAPI!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testRequestScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>获取<code>response</code>也是类似的方法。在参数列表中指定一个<code>ServletResponse</code>或<code>HttpServletResponse</code>对象参数。</p>
</blockquote>
<h2 id="model" data-numberify>Model<a class="anchor ms-1" href="#model"></a></h2>
<p><code>Model</code>是SpringMVC提供的专用于共享<code>request</code>域对象数据。</p>
<p>使用<code>Model</code>的方式与使用<code>ServletAPI</code>类似，在形参列表中指定一个<code>Model</code>类型的参数即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testModel&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testModel</span><span class="o">(</span><span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Model!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testRequestScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">model</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testRequestScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testRequestScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="map-string-object" data-numberify>Map String Object<a class="anchor ms-1" href="#map-string-object"></a></h2>
<p>使用<code>Map&lt;String, Object&gt;</code>共享<code>request</code>域对象数据，使用方式也是在形参列表中定义一个<code>Map&lt;String, Object&gt;</code>类型形参。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testMap&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testMap</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Map!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testRequestScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testRequestScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testRequestScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="modelmap" data-numberify>ModelMap<a class="anchor ms-1" href="#modelmap"></a></h2>
<p><code>ModelMap</code>的用法与<code>Map</code>十分类似。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testModelMap&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testModelMap</span><span class="o">(</span><span class="n">ModelMap</span> <span class="n">modelMap</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">modelMap</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello ModelMap!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testRequestScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">modelMap</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testRequestScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testRequestScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="modelandview" data-numberify>ModelAndView<a class="anchor ms-1" href="#modelandview"></a></h2>
<p><code>ModelAndView</code>是SpringMVC提供的用于共享<code>request</code>域对象数据和视图解析跳转的API。</p>
<p>通过<code>ModelAndView</code>共享<code>request</code>域数据，无需在形参中指定该类型参数，只需在方法中<code>new</code>一个即可。但是使用<code>ModelAndView</code>需要将该类型对象作为返回值返回。</p>
<p>除了使用原生<code>ServletAPI</code>之外，使用其它方法（如上<code>Map</code>、<code>Model</code>、<code>ModelMap</code>等）共享<code>request</code>域数据，最终SpringMVC都会将模型数据和视图封装到<code>ModelAndView</code>中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testModelAndView&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ModelAndView</span> <span class="nf">testModelAndView</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ModelAndView</span> <span class="n">mav</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelAndView</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 处理模型数据，即向请求域request共享数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">mav</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello ModelAndView!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置视图名称（返回视图需要有对应的页面）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">mav</span><span class="o">.</span><span class="na">setViewName</span><span class="o">(</span><span class="s">&#34;success&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取数据（第一次写入后可能读取失败，因为只有在方法执行完毕后才能真正写入）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testRequestScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">mav</span><span class="o">.</span><span class="na">getModel</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testRequestScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">mav</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>success.html</code>（在<code>Webapp/WEB-INF/templates/</code>下创建）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Success!<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Success!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p>其实<code>ModelAndView</code>也可以作为Controller方法的参数使用。</p>
<p>需要注意的是，使用<code>ModelAndView</code>设置视图对象无论是否使用<code>@ResponseBody</code>，返回的始终是视图。</p>
</blockquote>
<h2 id="mapmodel-和-modelmap" data-numberify>Map、Model 和 ModelMap<a class="anchor ms-1" href="#mapmodel-和-modelmap"></a></h2>
<p>在使用<code>Map&lt;String, Object&gt;</code>、<code>Model</code>和<code>ModelMap</code>时SpringMVC传入的都是<code>BindingAwareModelMap</code>类型对象。</p>
<ul>
<li>
<p><code>Model</code>是一个接口，它定义了<code>addAllAttributes()</code>、<code>getAttribute()</code>等接口方法。</p>
</li>
<li>
<p><code>ModelMap</code>继承了<code>LinkedHashMap&lt;String, Object&gt;</code>，所以它也是属于<code>Map</code>的子类。<code>ModelMap</code>给出了<code>addAllAttributes()</code>、<code>getAttribute()</code>等接口的实现。</p>
</li>
<li>
<p><code>BindingAwareModelMap</code>继承自<code>ExtendedModelMap</code>类，而<code>ExtendedModelMap</code>又是<code>ModelMap</code>的子类和<code>Model</code>接口的实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExtendedModelMap</span> <span class="kd">extends</span> <span class="n">ModelMap</span> <span class="kd">implements</span> <span class="n">Model</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>BindingAwareModelMap</code>重写了<code>Map</code>的<code>put()</code>和<code>putAll()</code>，使得它能作为<code>Map</code>来读写<code>request</code>域。</p>
</li>
</ul>
<p>综上，<code>BindingAwareModelMap</code>可以作为<code>Model</code>、<code>Map&lt;String, Object&gt;</code>和<code>ModelMap</code>传入Controller方法中。</p>
<p>在浏览器发送请求后，实际上调用Controller中对应方法的是<code>DispatcherServlet</code>中的<code>doDispatch()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doDispatch</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ModelAndView</span> <span class="n">mv</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1">// Actually invoke the handler.（实际的请求处理者）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mv</span> <span class="o">=</span> <span class="n">ha</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">.</span><span class="na">getHandler</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 最后返回一个封装好的ModelAndView对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">processDispatchResult</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="n">mv</span><span class="o">,</span> <span class="n">dispatchException</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>通过断点调试最后发现，无论是<code>Map</code>、<code>Model</code>、<code>ModelMap</code>还是<code>ModelAndView</code>，它们最后都会被封装为<code>ModelAndView</code>（即使Controller方法返回的是<code>ModelAndView</code>，Controller方法中的<code>ModelAndView</code>和<code>DispatcherServlet</code>对象的<code>doDispatch()</code>中的<code>ModelAndView</code>地址也并不相同）。</p>
</blockquote>
<blockquote>
<p>在<code>processDispatchResult()</code>中调用了下方所示方法来进行视图渲染：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">render</span><span class="o">(</span><span class="n">mv</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span></code></pre></div></blockquote>
<h2 id="向-session-域共享数据" data-numberify>向 Session 域共享数据<a class="anchor ms-1" href="#向-session-域共享数据"></a></h2>
<p>使用原生<code>ServletAPI</code>共享：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testSession&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testSession</span><span class="o">(</span><span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Session!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testSessionScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testSessionScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testSessionScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Session可以从Request域中获取：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testSessionInServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testSession</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从Request域中获取Session
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HttpSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Session In Servlet!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testSessionScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testSessionScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testSessionScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="向-application-域共享数据" data-numberify>向 Application 域共享数据<a class="anchor ms-1" href="#向-application-域共享数据"></a></h2>
<p>通过Session域获取<code>ServletContext</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testApplication&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testApplication</span><span class="o">(</span><span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从Session域中获取ServletContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ServletContext</span> <span class="n">application</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">application</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Application!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testSessionScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">application</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testSessionScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testSessionScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>通过Request域获取<code>ServletContext</code>（不推荐）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testApplicationInServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testApplication</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从Request域中获取ServletContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ServletContext</span> <span class="n">application</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">application</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Application In Servlet !&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testSessionScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">application</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testSessionScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testSessionScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="请求报文转换" data-numberify>请求报文转换<a class="anchor ms-1" href="#请求报文转换"></a></h1>
<p><code>HttpMessageConverter</code>即报文信息转换器，能将请求报文转换为Java对象，或将Java对象转换为响应报文</p>
<p><code>HttpMessageConverter</code>提供了两个注解和两个类型：</p>
<ul>
<li>
<p><code>@ResponseBody</code>：即上方Controller方法中使用的将返回值（Java对象）作为响应体发送给浏览器的注解。</p>
</li>
<li>
<p><code>ResponseEntity</code>：可以作为Controller方法的返回值返回，并响应给浏览器。</p>
</li>
<li>
<p><code>@RequestBody</code>：将Controller方法形参指定为请求体，并接收从浏览器发送过来的请求体。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/testRequestBody&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testRequestBody</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">String</span> <span class="n">requestBody</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">requestBody</span> <span class="o">=</span> <span class="s">&#34;RequestBody{&#39;&#34;</span> <span class="o">+</span> <span class="n">requestBody</span> <span class="o">+</span> <span class="s">&#34;&#39;}&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">requestBody</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>RequestEntity</code>：是封装请求报文的一种类型，在Controller方法形参中使用，它获得的是<u>整个请求报文</u>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testRequestEntity&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testRequestEntity</span><span class="o">(</span><span class="n">RequestEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">requestEntity</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">requestEntity</span><span class="o">.</span><span class="na">getHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">body</span> <span class="o">=</span> <span class="n">requestEntity</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">response</span> <span class="o">=</span> <span class="s">&#34;RequestEntity{&#34;</span> <span class="o">+</span> <span class="n">headers</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;}\nRequestBody{&#39;&#34;</span> <span class="o">+</span> <span class="n">body</span> <span class="o">+</span> <span class="s">&#34;&#39;}&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>往响应体写入信息还有一个方法，就是使用原生<code>ServletAPI</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testResponse&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testResponse</span><span class="o">(</span><span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">print</span><span class="o">(</span><span class="s">&#34;Hello Response!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="文件上传下载" data-numberify>文件上传下载<a class="anchor ms-1" href="#文件上传下载"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>commons-fileupload<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>commons-fileupload<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.3.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="responseentity-实现下载" data-numberify>ResponseEntity 实现下载<a class="anchor ms-1" href="#responseentity-实现下载"></a></h2>
<p>将<code>ResponseEntity&lt;byte[]&gt;</code>作为返回值，在其中设置好对应的响应头、响应体和状态码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testDown&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[]&gt;</span> <span class="nf">testResponseEntity</span><span class="o">(</span><span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取ServletContext对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ServletContext</span> <span class="n">servletContext</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取服务器中文件的真实路径 getRealPath()如果不带参数的话获取的是服务器的部署路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">realPath</span> <span class="o">=</span> <span class="n">servletContext</span><span class="o">.</span><span class="na">getRealPath</span><span class="o">(</span><span class="s">&#34;/static/img/test.png&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;RealPath: &#34;</span> <span class="o">+</span> <span class="n">realPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建输入流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">FileInputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">realPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建字节数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">is</span><span class="o">.</span><span class="na">available</span><span class="o">()];</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将流写到字节数组中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建HttpHeaders对象设置响应头信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">MultiValueMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置下载方式以及下载文件的名字
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">headers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Content-Disposition&#34;</span><span class="o">,</span> <span class="s">&#34;attachment;filename=test.png&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置响应状态码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HttpStatus</span> <span class="n">statusCode</span> <span class="o">=</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建ResponseEntity对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[]&gt;</span> <span class="n">responseEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">bytes</span><span class="o">,</span> <span class="n">headers</span><span class="o">,</span> <span class="n">statusCode</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 关闭输入流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">is</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">responseEntity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在下载文件之前，需要通过Session获取当前要下载文件的真实路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ServletContext</span> <span class="n">servletContext</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="n">realPath</span> <span class="o">=</span> <span class="n">servletContext</span><span class="o">.</span><span class="na">getRealPath</span><span class="o">(</span><span class="s">&#34;/static/img/test.png&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p>获取了真实路径后，通过<code>FileInputStream</code>将文件读取并写入字节数组<code>byte[]</code>中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">FileInputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">realPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">is</span><span class="o">.</span><span class="na">available</span><span class="o">()];</span>
</span></span><span class="line"><span class="cl"><span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">is</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span></code></pre></div><p>下载文件时，需要在响应头中设置下载方式以及文件名：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">MultiValueMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 以附件方式下载文件，并且默认文件名为test.png
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">headers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Content-Disposition&#34;</span><span class="o">,</span> <span class="s">&#34;attachment;filename=test.png&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p>最后将字节数组作为响应体，再加上响应头和状态码等信息，创建<code>ResponseEntity</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[]&gt;</span> <span class="n">responseEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">bytes</span><span class="o">,</span> <span class="n">headers</span><span class="o">,</span> <span class="n">statusCode</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="n">responseEntity</span><span class="o">;</span>
</span></span></code></pre></div><h2 id="文件上传" data-numberify>文件上传<a class="anchor ms-1" href="#文件上传"></a></h2>
<p>文件上传依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>commons-fileupload<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>commons-fileupload<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.3.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在<code>springMVC.xml</code>中配置文件上传解析器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 配置文件上传解析器，将上传的文件封装为MultipartFile --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;multipartResolver&#34;</span> <span class="na">class=</span><span class="s">&#34;org.springframework.web.multipart.commons.CommonsMultipartResolver&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>文件上传实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/testUp&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testUp</span><span class="o">(</span><span class="n">MultipartFile</span> <span class="n">photo</span><span class="o">,</span> <span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取上传文件的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">photo</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取上传文件的后缀名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">suffixName</span> <span class="o">=</span> <span class="n">fileName</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">fileName</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="s">&#34;.&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将UUID作为文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将UUID和后缀名拼接后的结果作为最终的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">fileName</span> <span class="o">=</span> <span class="n">uuid</span> <span class="o">+</span> <span class="n">suffixName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 需要通过 ServletContext 获取服务器中 photo 目录的路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ServletContext</span> <span class="n">servletContext</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// photo 其实也可以用 photo.getName() 替代
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">photoPath</span> <span class="o">=</span> <span class="n">servletContext</span><span class="o">.</span><span class="na">getRealPath</span><span class="o">(</span><span class="s">&#34;photo&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">photoPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 判断photoPath所对应路径是否存在
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(!</span><span class="n">file</span><span class="o">.</span><span class="na">exists</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 若不存在，则创建目录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">file</span><span class="o">.</span><span class="na">mkdir</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">finalPath</span> <span class="o">=</span> <span class="n">photoPath</span> <span class="o">+</span> <span class="n">File</span><span class="o">.</span><span class="na">separator</span> <span class="o">+</span> <span class="n">fileName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">photo</span><span class="o">.</span><span class="na">transferTo</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">finalPath</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fileName</span> <span class="o">+</span> <span class="s">&#34; OK!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上传文件时，需要考虑文件之间文件名的冲突问题，可以通过将文件名改为UUID解决：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 获取上传文件的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">photo</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 获取上传文件的后缀名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">suffixName</span> <span class="o">=</span> <span class="n">fileName</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">fileName</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="s">&#34;.&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 将UUID作为文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 将UUID和后缀名拼接后的结果作为最终的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">fileName</span> <span class="o">=</span> <span class="n">uuid</span> <span class="o">+</span> <span class="n">suffixName</span><span class="o">;</span>
</span></span></code></pre></div><hr>
<h1 id="拦截器" data-numberify>拦截器<a class="anchor ms-1" href="#拦截器"></a></h1>
<p>拦截器（Interceptor）是一种动态拦截方法调用的机制，在SpringMVC中动态拦截控制器方法的执行。拦截器可以在指定的发那个发调用前后执行预先设定的代码，可以阻止原始方法的执行。拦截器和过滤器在作用和执行顺序上很相似。它们的关系如下图所示：</p>
<p><picture><img class="img-fluid " alt="拦截器和过滤器的关系" src="/docs/spring/springmvc/springmvc-base/1630676903190.png" loading="lazy" width="1221" height="390" />
</picture>

</p>
<p>创建拦截器类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>  <span class="c1">// 由SpringMVC来管理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookInterceptor</span> <span class="kd">implements</span> <span class="n">HandlerInterceptor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;preHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;postHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;afterCompletion...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="拦截器配置类" data-numberify>拦截器配置类<a class="anchor ms-1" href="#拦截器配置类"></a></h2>
<p>编写拦截器配置类有两种方式：</p>
<ul>
<li>实现<code>WebMvcConfigurer</code>接口；</li>
<li>继承<code>WebMvcConfigurationSupport</code>类并重写方法。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 扫描interceptor包
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner.interceptor&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcSupport</span> <span class="kd">extends</span> <span class="n">WebMvcConfigurationSupport</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>  <span class="c1">// 自动装配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">BookInterceptor</span> <span class="n">bookInterceptor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="n">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">            添加（声明）拦截器并配置拦截规则
</span></span></span><span class="line"><span class="cl"><span class="cm">            可以同时配置多个规则
</span></span></span><span class="line"><span class="cl"><span class="cm">            如果不添加拦截规则，默认拦截所有请求
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">bookInterceptor</span><span class="o">).</span><span class="na">addPathPatterns</span><span class="o">(</span><span class="s">&#34;/books&#34;</span><span class="o">,</span> <span class="s">&#34;/books/*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>让SpringMVC扫描到拦截器的配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.controller&#34;</span><span class="o">,</span> <span class="s">&#34;com.linner.config&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebMvc</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcConfig</span> <span class="o">{}</span>
</span></span></code></pre></div><p>拦截器的配置类<code>SpingMvcSupport</code>可以书写在<code>SpringMvcConfig</code>中，以简化书写（并演示继承<code>WebMvcConfigurer</code>编写拦截器配置类）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.controller&#34;</span><span class="o">,</span> <span class="s">&#34;com.linner.interceptor&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebMvc</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcConfig</span> <span class="kd">implements</span> <span class="n">WebMvcConfigurer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">BookInterceptor</span> <span class="n">bookInterceptor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="n">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">bookInterceptor</span><span class="o">).</span><span class="na">addPathPatterns</span><span class="o">(</span><span class="s">&#34;/books&#34;</span><span class="o">,</span> <span class="s">&#34;/books/*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="拦截器执行过程" data-numberify>拦截器执行过程<a class="anchor ms-1" href="#拦截器执行过程"></a></h2>
<p>运行程序，发送<code>books</code>开头的请求（如<code>http://localhost/books</code>），终端会有如下输出：</p>
<pre tabindex="0"><code>preHandle...
getAll...
postHandle...
afterCompletion...
</code></pre><p>拦截器的执行顺序如下：</p>
<ol>
<li>执行<code>preHandle()</code>。
<ul>
<li><code>preHandle()</code>返回值为<code>true</code>：
<ol>
<li>执行请求路径相应的方法或下一个拦截器的<code>preHandle()</code>。</li>
<li>判断是否执行<code>postHandle()</code>：
<ul>
<li>Controller被执行（后续拦截器链中没有一个<code>preHandle()</code>返回值为<code>false</code>），执行<code>postHandle()</code>。</li>
<li>Controller没有被执行（后续拦截器链中存在一个<code>preHandle()</code>返回值为<code>false</code>），不执行<code>postHandle()</code>。</li>
</ul>
</li>
<li>执行<code>afterCompletion()</code>。</li>
</ol>
</li>
<li><code>preHandle()</code>返回值为<code>false</code>。</li>
</ul>
</li>
<li>结束。</li>
</ol>
<p>当配置多个拦截器时，形成拦截器链。多个<code>preHandle()</code>按照Interceptor被声明顺序执行；多个<code>postHandle()</code>按照Interceptor被声明顺序逆序执行。即，<u>拦截器链的运行顺序以拦截器添加顺序为准</u>。</p>
<p>当拦截器中出现对原始处理器的拦截，后面的拦截器均终止运行。当拦截器运行中断，仅运行配置在前面的拦截器的<code>afterCompletion()</code>操作（<code>afterCompletion()</code>代表当前拦截器执行完成，与后续拦截器链中<code>preHandle()</code>的返回值和Controller是否被执行无关）。</p>
<p>假设现在有如下两个拦截器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FirstInterceptor</span> <span class="kd">implements</span> <span class="n">HandlerInterceptor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;FirstInterceptor preHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;FirstInterceptor postHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;FirstInterceptor afterCompletion...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LaterInterceptor</span> <span class="kd">implements</span> <span class="n">HandlerInterceptor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;LaterInterceptor preHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;LaterInterceptor postHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;LaterInterceptor afterCompletion...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>它们在拦截器类中的添加顺序为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">FirstInterceptor</span> <span class="n">firstInterceptor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">LaterInterceptor</span> <span class="n">laterInterceptor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="n">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果没有配置拦截路径，则默认拦截所有请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">firstInterceptor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">regisrty</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">laterInterceptor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>访问任意资源后，终端输出：</p>
<pre tabindex="0"><code>FirstInterceptor preHandle...
LaterInterceptor preHandle...
LaterInterceptor postHandle...
FirstInterceptor postHandle...
LaterInterceptor afterCompletion...
FirstInterceptor afterCompletion...
</code></pre><p>实际上在<code>DispatcherServlet</code>的<code>doDispatch()</code>方法中，在执行<code>mv = ha.handle(...)</code>之前进行了一个条件判断：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doDispatch</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 拦截器链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HandlerExecutionChain</span> <span class="n">mappedHandler</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取拦截器链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mappedHandler</span> <span class="o">=</span> <span class="n">getHandler</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">mappedHandler</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">noHandlerFound</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 执行相应Interceptor的preHandle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(!</span><span class="n">mappedHandler</span><span class="o">.</span><span class="na">applyPreHandle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Actually invoke the handler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mv</span> <span class="o">=</span> <span class="n">ha</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">.</span><span class="na">getHandler</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 执行相应Interceptor的postHandle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mappedHandler</span><span class="o">.</span><span class="na">applyPostHandle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mv</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 处理调度结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 包含了ModelAndView的进一步处理（渲染视图、处理模型）、还有Interceptor的afterCompletion()调用等等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">processDispatchResult</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="n">mv</span><span class="o">,</span> <span class="n">dispatchException</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>即<code>HandlerExecutionChain</code>（控制器执行链）对象的<code>applyPreHandle()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * preHandle执行链
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kt">boolean</span> <span class="nf">applyPreHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取interceptorList中的interceptor，并逐个执行它们的preHandle方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取interceptor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">HandlerInterceptor</span> <span class="n">interceptor</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行interceptor.preHandle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 如果有一个interceptor返回了false，则立即执行triggerAfterCompletion()并返回false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">interceptor</span><span class="o">.</span><span class="na">preHandle</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">handler</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">triggerAfterCompletion</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 记录拦截器链中返回false的前一个拦截器下标
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">this</span><span class="o">.</span><span class="na">interceptorIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>applyPostHandle()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * postHandle执行链
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">applyPostHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">ModelAndView</span> <span class="n">mv</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 按照倒序，逐个执行interceptor.postHandle()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HandlerInterceptor</span> <span class="n">interceptor</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">interceptor</span><span class="o">.</span><span class="na">postHandle</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">handler</span><span class="o">,</span> <span class="n">mv</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>triggerAfterCompletion()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * afterCompletion执行链
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">triggerAfterCompletion</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从interceptorIndex开始，倒序执行interceptor.afterCompletion()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 即triggerAfterCompletion()只会执行那些返回true的interceptor的afterCompletion()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorIndex</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HandlerInterceptor</span> <span class="n">interceptor</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">interceptor</span><span class="o">.</span><span class="na">afterCompletion</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">handler</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">ex2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;HandlerInterceptor.afterCompletion threw exception&#34;</span><span class="o">,</span> <span class="n">ex2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在一切正常运行完成后，调用Interceptor的<code>afterCompletion()</code>的情况有点复杂（<code>DispatcherServlet</code>中的<code>processDispatchResult()</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">processDispatchResult</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Nullable</span> <span class="n">HandlerExecutionChain</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">ModelAndView</span> <span class="n">mv</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Nullable</span> <span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Did the handler return a view to render?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">mv</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mv</span><span class="o">.</span><span class="na">wasCleared</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 渲染视图
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">render</span><span class="o">(</span><span class="n">mv</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="c1">// 在处理完其它调度结果后，通过mappedHandler.triggerAfterCompletion()来调用interceptor.afterCompletion()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">mappedHandler</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Exception (if any) is already handled..
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">mappedHandler</span><span class="o">.</span><span class="na">triggerAfterCompletion</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>在<code>DispatcherServlet</code>的<code>doDispatch()</code>方法中还有许多<code>try ... catch</code>，当捕捉到异常时，<code>doDispatch()</code>也会通过<code>triggerAfterCompletion()</code>方法来调用<code>mappedHandler.triggerAfterCompletion()</code>。</p>
</blockquote>
<p>更具上述代码总结出<code>HandlerExecutionChain</code>中的执行情况：</p>
<ul>
<li>
<p><code>applyPreHandle()</code>：在执行Controller方法之前执行。</p>
</li>
<li>
<p><code>applyPostHandle()</code>：执行了Controller方法之后执行。</p>
</li>
<li>
<p><code>triggerAfterCompletion()</code>：</p>
<p>两种执行情况：</p>
<ul>
<li>执行<code>applyPreHandle()</code>时，有一个拦截器返回了<code>false</code>；</li>
<li>执行完<code>applyPostHandle()</code>之后，且无错误时执行（即<code>processDispatchResult()</code>中的<code>triggerAfterCompletion()</code>）；</li>
<li>执行<code>applyPreHandle()</code>、<code>applyPostHandle()</code>和Controller方法过程中，出现异常时执行（出现异常时是在<code>DispatcherServlet</code>的<code>triggerAfterCompletion()</code>中调用）。</li>
</ul>
</li>
</ul>
<h2 id="配置文件配置拦截器" data-numberify>配置文件配置拦截器<a class="anchor ms-1" href="#配置文件配置拦截器"></a></h2>
<p>除了使用配置类外，也可以使用配置文件的方式来配置拦截器。</p>
<p>使用<code>&lt;mvc:interceptors&gt;</code>来配置拦截器。添加拦截器的方式有两种，一种是使用<u><code>&lt;bean class=&quot;...&quot;/&gt;</code></u>，另一种是使用<u><code>&lt;ref bean=&quot;...&quot;/&gt;</code></u>，这两种方式本质上没有什么区别。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;mvc:interceptors&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;asia.linner.interceptor.FirstInterceptor&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- bean中指定的是Bean的默认id，即首字母小写的类名 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&#34;laterInterceptor&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mvc:interceptors&gt;</span>
</span></span></code></pre></div><p>在<code>&lt;mvc:interceptors&gt;</code>中可以使用<code>&lt;mvc:interceptor&gt;</code>来配置具体的拦截规则：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;mvc:interceptors&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mvc:interceptor&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- &lt;mvc:mapping&gt;: 拦截路径 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mvc:mapping</span> <span class="na">path=</span><span class="s">&#34;/**&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- &lt;mvc:exclude-mapping&gt;: 排除路径（不拦截） --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mvc:exclude-mapping</span> <span class="na">path=</span><span class="s">&#34;/users&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mvc:exclude-mapping</span> <span class="na">path=</span><span class="s">&#34;/users/**&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 假设只有users和books这两个请求 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&#34;bookInterceptor&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/mvc:interceptor&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mvc:interceptors&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="静态资源处理器" data-numberify>静态资源处理器<a class="anchor ms-1" href="#静态资源处理器"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcSupport</span> <span class="kd">extends</span> <span class="n">WebMvcConfigurationSupport</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="n">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 放行单个目录（Webapp目录下）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">&#34;/pages/**&#34;</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">&#34;/pages/&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 也可以将Webapp整个目录都添加：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// registry.addResourceHandler(&#34;/**&#34;).addResourceLocations(&#34;classpath:/&#34;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>addResourceHandler()</code>：定义访问资源路径。</li>
<li><code>addResourceLocations()</code>：定义访问路径时的静态资源目录。</li>
</ul>
<hr>
<h1 id="异常处理" data-numberify>异常处理<a class="anchor ms-1" href="#异常处理"></a></h1>
<p>Spring MVC 自带了两个异常处理器分别是<code>SimpleMappingExceptionResolver</code>和<code>DefaultHandlerExceptionResolver</code>。</p>
<p>其中<code>DefaultHandlerExceptionResolver</code>是由Spring MVC定义的默认异常处理器，它的<code>doResolveException()</code>定义了一些常见的异常处理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">ModelAndView</span> <span class="nf">doResolveException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpRequestMethodNotSupportedException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpRequestMethodNotSupported</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpRequestMethodNotSupportedException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpMediaTypeNotSupportedException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpMediaTypeNotSupported</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpMediaTypeNotSupportedException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpMediaTypeNotAcceptableException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpMediaTypeNotAcceptable</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpMediaTypeNotAcceptableException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">MissingPathVariableException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleMissingPathVariable</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">MissingPathVariableException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">MissingServletRequestParameterException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleMissingServletRequestParameter</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">MissingServletRequestParameterException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">ServletRequestBindingException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleServletRequestBindingException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">ServletRequestBindingException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">ConversionNotSupportedException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleConversionNotSupported</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">ConversionNotSupportedException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">TypeMismatchException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleTypeMismatch</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">TypeMismatchException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpMessageNotReadableException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpMessageNotReadable</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpMessageNotReadableException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpMessageNotWritableException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpMessageNotWritable</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpMessageNotWritableException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">MethodArgumentNotValidException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleMethodArgumentNotValidException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">MethodArgumentNotValidException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">MissingServletRequestPartException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleMissingServletRequestPartException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">MissingServletRequestPartException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">BindException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleBindException</span><span class="o">((</span><span class="n">BindException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">NoHandlerFoundException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleNoHandlerFoundException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">NoHandlerFoundException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">AsyncRequestTimeoutException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleAsyncRequestTimeoutException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">AsyncRequestTimeoutException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">handlerEx</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isWarnEnabled</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Failure while trying to resolve exception [&#34;</span> <span class="o">+</span> <span class="n">ex</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">,</span> <span class="n">handlerEx</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>SimpleMappingExceptionResolver</code>是Spring MVC提供的自定义异常处理器。</p>
<h2 id="基于配置的异常处理" data-numberify>基于配置的异常处理<a class="anchor ms-1" href="#基于配置的异常处理"></a></h2>
<p>在<code>springMVC.xml</code>中配置异常处理器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 配置异常处理 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;exceptionMappings&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;props&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">                    设置要处理的异常和返回的视图
</span></span></span><span class="line"><span class="cl"><span class="c">                    prop的key：表示处理器方法执行过程中出现的异常
</span></span></span><span class="line"><span class="cl"><span class="c">                    prop的值：表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面
</span></span></span><span class="line"><span class="cl"><span class="c">                 --&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;java.lang.ArithmeticException&#34;</span><span class="nt">&gt;</span>error<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/props&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">            将异常信息共享在请求域中的键
</span></span></span><span class="line"><span class="cl"><span class="c">            exceptionAttribute设置一个属性名，将出现的异常信息在请求域中进行共享
</span></span></span><span class="line"><span class="cl"><span class="c">         --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;exceptionAttribute&#34;</span> <span class="na">value=</span><span class="s">&#34;ex&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><p>在相应路径（如<code>/WEB-INF/templates/</code>）下创建异常视图（如<code>error.html</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Error<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>出现异常<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span> <span class="na">th:text</span><span class="o">=</span><span class="s">&#34;${ex}&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注：使用Thymeleaf管理Html视图，需要在<code>&lt;html&gt;</code>标签中声明<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code>。</p>
</blockquote>
<h2 id="基于注解的异常处理" data-numberify>基于注解的异常处理<a class="anchor ms-1" href="#基于注解的异常处理"></a></h2>
<p>使用<code>@ControllerAdvice</code>标注在异常处理类上，这样的异常处理类与Controller类似。在类的方法上用<code>@ExceptionHandler</code>指定要处理的异常，<code>@ExceptionHandler</code>的<code>value</code>属性接收一个Class类型的数组，意味着可以同时处理多个异常。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ControllerAdvice</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExceptionController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@ExceptionHandler</span><span class="o">({</span>
</span></span><span class="line"><span class="cl">            <span class="n">ArithmeticException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">NullPointerException</span><span class="o">.</span><span class="na">class</span>
</span></span><span class="line"><span class="cl">    <span class="o">})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">testException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">Exception</span> <span class="n">ex</span> <span class="cm">/* 当前出现的异常 */</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 用Model设置属性，将异常信息返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;exception&#34;</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;error&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在<code>ExceptionController</code>中用<code>@ExceptionHandler</code>标注的方法，在它的参数列表中定义一个<code>Exception</code>类型的参数，可用于获取当前处理的实际的异常。</p>
<hr>
<h1 id="重定向" data-numberify>重定向<a class="anchor ms-1" href="#重定向"></a></h1>
<p>Spring MVC默认的方式是<code>forward</code>（即转发），而要使用<code>redirect</code>需要在视图名称中添加<code>redirect:</code>说明。Spring MVC重定向有以下几种方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 通过返回类型为String的方法，返回一个&#34;redirect:...&#34;的字符串进行重定向
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return 重定向的路径
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/test1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;redirect:/index.html&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 通过ModelAndView设置视图名称为&#34;redirect:...&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/test2&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ModelAndView</span> <span class="nf">test2</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">ModelAndView</span><span class="o">(</span><span class="s">&#34;redirect:/test1&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 相当于：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">        ModelAndView mav = new ModelAndView();
</span></span></span><span class="line"><span class="cl"><span class="cm">        mav.setViewName(&#34;redirect:/index&#34;);
</span></span></span><span class="line"><span class="cl"><span class="cm">        return mav;
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 通过原生ServletAPI
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/test3&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test3</span><span class="o">(</span><span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">&#34;/test1&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="spring-mvc-执行流程" data-numberify>Spring MVC 执行流程<a class="anchor ms-1" href="#spring-mvc-执行流程"></a></h1>
<h2 id="常用组件" data-numberify>常用组件<a class="anchor ms-1" href="#常用组件"></a></h2>
<ul>
<li>
<p><strong>DispatcherServlet</strong>：<strong>前端控制器</strong>，由框架提供。</p>
<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求。</p>
<blockquote>
<p>Controller、Interceptor、HandlerExceptionResolver等等都由它来调用。</p>
</blockquote>
</li>
<li>
<p><strong>HandlerMapping</strong>：<strong>处理器映射器</strong>，由框架提供。</p>
<p>作用：根据请求的<code>url</code>、<code>method</code>等信息查找相应的Handler（即控制器方法）。</p>
<blockquote>
<p>就是请求中的<code>@RequestMapping</code>、<code>@GetMapping</code>、<code>@PostMapping</code>等等。将请求和控制器或控制器方法进行映射。</p>
</blockquote>
</li>
<li>
<p><strong>Handler</strong>：<strong>处理器</strong>（控制器方法），由工程师开发。</p>
<p>作用：在DispatcherServlet的控制下，Handler对具体的用户请求进行处理。</p>
</li>
<li>
<p><strong>HandlerAdapter</strong>：<strong>处理器适配器</strong>，由框架提供。</p>
<p>作用：通过HandlerAdapter执行处理器（控制器方法）。</p>
<blockquote>
<p>由HandlerMapping找到对应的Handler，接着由HandlerAdapter执行对应的Handler。</p>
</blockquote>
</li>
<li>
<p><strong>ViewResolver</strong>：<strong>视图解析器</strong>，由框架提供。</p>
<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView（例如forward，即转发时）、RedirectView（例如redirect，即重定向时）。</p>
</li>
<li>
<p><strong>Viw</strong>：<strong>视图</strong>，由框架或视图技术提供。</p>
<p>作用：将模型数据通过页面展示给用户。</p>
</li>
</ul>
<h2 id="dispatcherservlet-继承链" data-numberify>DispatcherServlet 继承链<a class="anchor ms-1" href="#dispatcherservlet-继承链"></a></h2>
<p><code>DispatcherServlet</code> $\xrightarrow{extends}$ <code>FrameworkServlet</code> $\xrightarrow{extends}$ <code>HttpServletBean</code> $\xrightarrow{extends}$ <code>HttpServlet</code> $\xrightarrow{extends}$ <code>GenericServlet</code> $\xrightarrow{implements}$ <code>Servlet</code></p>
<h2 id="dispatcherservlet-初始化过程" data-numberify>DispatcherServlet 初始化过程<a class="anchor ms-1" href="#dispatcherservlet-初始化过程"></a></h2>
<p>DispatcherServlet初始化过程需要根据它的继承链，查找每个类或接口的<code>init()</code>方法。</p>
<ul>
<li>
<p><code>Servlet.init(ServletConfig)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">;</span>
</span></span></code></pre></div></li>
<li>
<p><code>GenericServlet</code>：</p>
<p><code>GenericServlet</code>不仅实现了<code>Servlet.init(ServletConfig)</code>还给出了一个未实现的<code>init()</code>。</p>
<p><code>init(ServletConfig config)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">config</span> <span class="o">=</span> <span class="n">config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>init()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{}</span>
</span></span></code></pre></div></li>
<li>
<p><code>HttpServlet</code>：</p>
<p><code>HttpServlet</code>并没有重写<code>GenericServlet.init(ServletConfig)</code>或<code>GenericServlet.init()</code>。</p>
</li>
<li>
<p><code>HttpServletBean</code>：</p>
<p><code>HttpServletBean</code>实现了<code>GenericServlet.init()</code>并且给出了一个未实现的<code>initServletBean()</code>。</p>
<p><code>init()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Set bean properties from init parameters.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Let subclasses do whatever initialization they like.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initServletBean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>initServletBean()</code>：初始化ServletBean。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initServletBean</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{}</span>
</span></span></code></pre></div></li>
<li>
<p><code>FrameworkServlet</code>：</p>
<p><code>FrameworkServlet</code>实现了<code>HttpServletBean.initServletBean()</code>，并且给出了<code>initServletBean()</code>的实现。</p>
<p><code>initServletBean()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">initServletBean</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 初始化WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">this</span><span class="o">.</span><span class="na">webApplicationContext</span> <span class="o">=</span> <span class="n">initWebApplicationContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">initFrameworkServlet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* catch ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>initWebApplicationContext()</code>：初始化WebApplicationContext。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">WebApplicationContext</span> <span class="nf">initWebApplicationContext</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取当前的WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">WebApplicationContext</span> <span class="n">rootContext</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">            <span class="n">WebApplicationContextUtils</span><span class="o">.</span><span class="na">getWebApplicationContext</span><span class="o">(</span><span class="n">getServletContext</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">WebApplicationContext</span> <span class="n">wac</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 判断当前WebApplicationContext是否为空（第一次执行时恒为空）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">webApplicationContext</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// A context instance was injected at construction time -&gt; use it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">wac</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">webApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">wac</span> <span class="k">instanceof</span> <span class="n">ConfigurableWebApplicationContext</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ConfigurableWebApplicationContext</span> <span class="n">cwac</span> <span class="o">=</span> <span class="o">(</span><span class="n">ConfigurableWebApplicationContext</span><span class="o">)</span> <span class="n">wac</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(!</span><span class="n">cwac</span><span class="o">.</span><span class="na">isActive</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// The context has not yet been refreshed -&gt; provide services such as
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">// setting the parent context, setting the application context id, etc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="o">(</span><span class="n">cwac</span><span class="o">.</span><span class="na">getParent</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// The context instance was injected without an explicit parent -&gt; set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="c1">// the root application context (if any; may be null) as the parent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">cwac</span><span class="o">.</span><span class="na">setParent</span><span class="o">(</span><span class="n">rootContext</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 装配并刷新WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">configureAndRefreshWebApplicationContext</span><span class="o">(</span><span class="n">cwac</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">        如果wac为空则查找WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="cm">        （第一次执行完后wac还是为空，因为没有任何WebApplicationContext）
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">wac</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// No context instance was injected at construction time -&gt; see if one
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// has been registered in the servlet context. If one exists, it is assumed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// that the parent context (if any) has already been set and that the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// user has performed any initialization such as setting the context id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">wac</span> <span class="o">=</span> <span class="n">findWebApplicationContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果wac为空则创建一个WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">wac</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// No context instance is defined for this servlet -&gt; create a local one
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 创建一个WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">wac</span> <span class="o">=</span> <span class="n">createWebApplicationContext</span><span class="o">(</span><span class="n">rootContext</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 没有接收到刷新事件时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">refreshEventReceived</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Either the context is not a ConfigurableApplicationContext with refresh
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// support or the context injected at construction time had already been
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// refreshed -&gt; trigger initial onRefresh manually here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">onRefreshMonitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 刷新WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">onRefresh</span><span class="o">(</span><span class="n">wac</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">publishContext</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Publish the context as a servlet context attribute.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 将ServletContext作为属性，获取它的属性名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">attrName</span> <span class="o">=</span> <span class="n">getServletContextAttributeName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将IOC容器在应用域共享
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">getServletContext</span><span class="o">().</span><span class="na">setAttribute</span><span class="o">(</span><span class="n">attrName</span><span class="o">,</span> <span class="n">wac</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">wac</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>createWebApplicationContext(WebApplicationContext)</code>：通过WebApplicationContext创建WebApplicationContext。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">WebApplicationContext</span> <span class="nf">createWebApplicationContext</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">WebApplicationContext</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">createWebApplicationContext</span><span class="o">((</span><span class="n">ApplicationContext</span><span class="o">)</span> <span class="n">parent</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>createWebApplicationContext(ApplicationContext)</code>：通过ApplicationContext创建WebApplicationContext。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">WebApplicationContext</span> <span class="nf">createWebApplicationContext</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">ApplicationContext</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">contextClass</span> <span class="o">=</span> <span class="n">getContextClass</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(!</span><span class="n">ConfigurableWebApplicationContext</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">isAssignableFrom</span><span class="o">(</span><span class="n">contextClass</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="n">ApplicationContextException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;Fatal initialization error in servlet with name &#39;&#34;</span> <span class="o">+</span> <span class="n">getServletName</span><span class="o">()</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;&#39;: custom WebApplicationContext class [&#34;</span> <span class="o">+</span> <span class="n">contextClass</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;] is not of type ConfigurableWebApplicationContext&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Web IOC 容器对象（即SpringMVC IOC）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ConfigurableWebApplicationContext</span> <span class="n">wac</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">            <span class="o">(</span><span class="n">ConfigurableWebApplicationContext</span><span class="o">)</span> <span class="n">BeanUtils</span><span class="o">.</span><span class="na">instantiateClass</span><span class="o">(</span><span class="n">contextClass</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 配置环境
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">wac</span><span class="o">.</span><span class="na">setEnvironment</span><span class="o">(</span><span class="n">getEnvironment</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* 
</span></span></span><span class="line"><span class="cl"><span class="cm">        整合Spring和SpringMVC时，
</span></span></span><span class="line"><span class="cl"><span class="cm">        设置SpringMVC的父容器，
</span></span></span><span class="line"><span class="cl"><span class="cm">        让Spring和SpringMVC的IOC容器能无缝衔接
</span></span></span><span class="line"><span class="cl"><span class="cm">        SpringMVC IOC容器是Spring IOC容器的子容器
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="n">wac</span><span class="o">.</span><span class="na">setParent</span><span class="o">(</span><span class="n">parent</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">configLocation</span> <span class="o">=</span> <span class="n">getContextConfigLocation</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">configLocation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">wac</span><span class="o">.</span><span class="na">setConfigLocation</span><span class="o">(</span><span class="n">configLocation</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 装配并刷新WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">configureAndRefreshWebApplicationContext</span><span class="o">(</span><span class="n">wac</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">wac</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>onRefresh()</code>：刷新WebApplicationContext。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onRefresh</span><span class="o">(</span><span class="n">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// For subclasses: do nothing by default.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 由子类去实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>FrameworkServlete创建WebApplicationContext后，刷新容器，调用<code>onRefresh(wac)</code>，此方法在<code>DispatcherServlet</code>进行了重写（实现）。</p>
</blockquote>
<p><code>getServletContextAttributeName()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// FrameworkServlet的全类名.CONTEXT.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SERVLET_CONTEXT_PREFIX</span> <span class="o">=</span> <span class="n">FrameworkServlet</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;.CONTEXT.&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">getServletContextAttributeName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 前缀+Servlet友好名称（即前缀 + &lt;servlet-name&gt;）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">SERVLET_CONTEXT_PREFIX</span> <span class="o">+</span> <span class="n">getServletName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>DispatcherServlet</code>：</p>
<p>实现了<code>FrameworkServlet.onRefresh()</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onRefresh</span><span class="o">(</span><span class="n">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">initStrategies</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>initStrategies()</code>：<code>DispatcherServlet</code>初始化策略。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initStrategies</span><span class="o">(</span><span class="n">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化多个解析器，例如文件上传解析器等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initMultipartResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">initLocaleResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化模板解析器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initThemeResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化处理器映射器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initHandlerMappings</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始阿虎处理器适配器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initHandlerAdapters</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化异常处理器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initHandlerExceptionResolvers</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化转换器，将请求转换为视图名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initRequestToViewNameTranslator</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化视图解析器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initViewResolvers</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">initFlashMapManager</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="dispatcherservlet-请求处理过程" data-numberify>DispatcherServlet 请求处理过程<a class="anchor ms-1" href="#dispatcherservlet-请求处理过程"></a></h2>
<ul>
<li>
<p><code>Servlet</code>和<code>GenericServlet</code>：</p>
<p><code>Servlet</code>提供了<code>service()</code>接口，<code>GenericServlet</code>并未对其进行实现。</p>
<p><code>service(ServletRequest, ServletResponse)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">res</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
</span></span></code></pre></div></li>
<li>
<p><code>HttpServlet</code>：</p>
<p><code>service()</code>由<code>HttpServlet</code>实现。并且<code>HttpServlet</code>还提供了<code>service(HttpServletRequest, HttpServletResponse)</code>。</p>
<p><code>service(ServletRequest, ServletResponse)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">res</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">HttpServletRequest</span>  <span class="n">request</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(!(</span><span class="n">req</span> <span class="k">instanceof</span> <span class="n">HttpServletRequest</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">            <span class="n">res</span> <span class="k">instanceof</span> <span class="n">HttpServletResponse</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="n">ServletException</span><span class="o">(</span><span class="s">&#34;non-HTTP request or response&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 转换为HttpServletRequest和HttpServletResponse
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">request</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpServletRequest</span><span class="o">)</span> <span class="n">req</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">)</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">service</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><code>HttpServlet.service(ServletRequest, ServletResponse)</code>的主要作用就是将<code>ServletRequest</code>和<code>ServletResponse</code>分别转换为<code>HttpServletRequest</code>和<code>HttpServletResponse</code>，然后调用<code>HttpServlet.service(HttpServletRequest, HttpServletResponse)</code>。</p>
</blockquote>
<p><code>service(HttpServletRequest, HttpServletResponse)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取请求方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 请求的分发处理，根据请求方式调用相应方法（如调用doGet）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_GET</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">lastModified</span> <span class="o">=</span> <span class="n">getLastModified</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">lastModified</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// servlet doesn&#39;t support if-modified-since, no reason
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// to go through further expensive logic
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">long</span> <span class="n">ifModifiedSince</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getDateHeader</span><span class="o">(</span><span class="n">HEADER_IFMODSINCE</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">ifModifiedSince</span> <span class="o">&lt;</span> <span class="n">lastModified</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// If the servlet mod time is later, call doGet()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">// Round down to the nearest second for a proper compare
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">// A ifModifiedSince of -1 will always be less
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">maybeSetLastModified</span><span class="o">(</span><span class="n">resp</span><span class="o">,</span> <span class="n">lastModified</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_MODIFIED</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_HEAD</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">lastModified</span> <span class="o">=</span> <span class="n">getLastModified</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">maybeSetLastModified</span><span class="o">(</span><span class="n">resp</span><span class="o">,</span> <span class="n">lastModified</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">doHead</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_POST</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doPost</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_PUT</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doPut</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_DELETE</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doDelete</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_OPTIONS</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doOptions</span><span class="o">(</span><span class="n">req</span><span class="o">,</span><span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_TRACE</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doTrace</span><span class="o">(</span><span class="n">req</span><span class="o">,</span><span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// Note that this means NO servlet supports whatever
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// method was requested, anywhere on this server.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>HttpServletBean</code>：</p>
<p>没有对<code>HttpServlet.service()</code>和<code>HttpServlet</code>中<code>do</code>开头的处理请求分发的方法进行重写。</p>
</li>
<li>
<p><code>FrameworkServlet</code>：</p>
<p>重写了<code>HttpServlet.service(HttpServletRequest, HttpServletResponse)</code>和<code>HttpServlet</code>中<code>do</code>开头的处理请求分发的方法。</p>
<p><code>service(HttpServletRequest, HttpServletResponse)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">HttpMethod</span> <span class="n">httpMethod</span> <span class="o">=</span> <span class="n">HttpMethod</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 请求方式为PATCH或null时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">httpMethod</span> <span class="o">==</span> <span class="n">HttpMethod</span><span class="o">.</span><span class="na">PATCH</span> <span class="o">||</span> <span class="n">httpMethod</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">processRequest</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>processRequest()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">processRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行服务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">doService</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* catch ... */</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在<code>FrameworkServlet</code>中的<code>doGet()</code>、<code>doPost()</code>、<code>doPut()</code>和<code>doDelete()</code>中都是直接调用<code>processRequest()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">processRequest</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span></code></pre></div><p>在<code>doOptions()</code>和<code>doTrace()</code>中也有对<code>processRequest()</code>方法的调用。</p>
<p><code>doService()</code>：交由子类实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">doService</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">Exception</span><span class="o">;</span>
</span></span></code></pre></div></li>
<li>
<p><code>DispatcherServlet</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doService</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">logRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Keep a snapshot of the request attributes in case of an include,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// to be able to restore the original attributes after the include.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Make framework objects available to handlers and view objects.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 最终调用doDispatch()来处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">doDispatch</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!</span><span class="n">WebAsyncUtils</span><span class="o">.</span><span class="na">getAsyncManager</span><span class="o">(</span><span class="n">request</span><span class="o">).</span><span class="na">isConcurrentHandlingStarted</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Restore the original attribute snapshot, in case of an include.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">attributesSnapshot</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">restoreAttributesAfterInclude</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">attributesSnapshot</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>doDispatch()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doDispatch</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">HttpServletRequest</span> <span class="n">processedRequest</span> <span class="o">=</span> <span class="n">request</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">        执行链
</span></span></span><span class="line"><span class="cl"><span class="cm">        HandlerExecutionChain包含以下三个部分：
</span></span></span><span class="line"><span class="cl"><span class="cm">        - handler：与请求所匹配的控制器方法
</span></span></span><span class="line"><span class="cl"><span class="cm">        - interceptorList：处理控制器方法的所有拦截器集合，即拦截器链
</span></span></span><span class="line"><span class="cl"><span class="cm">        - interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="n">HandlerExecutionChain</span> <span class="n">mappedHandler</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">boolean</span> <span class="n">multipartRequestParsed</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">WebAsyncManager</span> <span class="n">asyncManager</span> <span class="o">=</span> <span class="n">WebAsyncUtils</span><span class="o">.</span><span class="na">getAsyncManager</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ModelAndView</span> <span class="n">mv</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Exception</span> <span class="n">dispatchException</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">processedRequest</span> <span class="o">=</span> <span class="n">checkMultipart</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">multipartRequestParsed</span> <span class="o">=</span> <span class="o">(</span><span class="n">processedRequest</span> <span class="o">!=</span> <span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Determine handler for the current request.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 获取当前请求的执行链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mappedHandler</span> <span class="o">=</span> <span class="n">getHandler</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">mappedHandler</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">noHandlerFound</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Determine handler adapter for the current request.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">                获取当前请求的处理器适配器
</span></span></span><span class="line"><span class="cl"><span class="cm">                通过控制器方法创建对应的处理器适配器，从而能调用所对应的控制器方法
</span></span></span><span class="line"><span class="cl"><span class="cm">             */</span>
</span></span><span class="line"><span class="cl">            <span class="n">HandlerAdapter</span> <span class="n">ha</span> <span class="o">=</span> <span class="n">getHandlerAdapter</span><span class="o">(</span><span class="n">mappedHandler</span><span class="o">.</span><span class="na">getHandler</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Process last-modified header, if supported by the handler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 执行拦截器链的 preHandle，正序执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(!</span><span class="n">mappedHandler</span><span class="o">.</span><span class="na">applyPreHandle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Actually invoke the handler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 通过HandlerAdapter来调用请求处理，最终获得ModelAndView对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mv</span> <span class="o">=</span> <span class="n">ha</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">.</span><span class="na">getHandler</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">asyncManager</span><span class="o">.</span><span class="na">isConcurrentHandlingStarted</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">applyDefaultViewName</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">mv</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 执行拦截器链的 postHandle，倒序执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mappedHandler</span><span class="o">.</span><span class="na">applyPostHandle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mv</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* catch ... */</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行完请求的后续处理，如视图渲染、异常处理等等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">processDispatchResult</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="n">mv</span><span class="o">,</span> <span class="n">dispatchException</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* catch ... */</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* finally ... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>processDispatchResult()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">processDispatchResult</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Nullable</span> <span class="n">HandlerExecutionChain</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">ModelAndView</span> <span class="n">mv</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Nullable</span> <span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">boolean</span> <span class="n">errorView</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 异常处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">exception</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">exception</span> <span class="k">instanceof</span> <span class="n">ModelAndViewDefiningException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&#34;ModelAndViewDefiningException encountered&#34;</span><span class="o">,</span> <span class="n">exception</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取异常页面的视图
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mv</span> <span class="o">=</span> <span class="o">((</span><span class="n">ModelAndViewDefiningException</span><span class="o">)</span> <span class="n">exception</span><span class="o">).</span><span class="na">getModelAndView</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Did the handler return a view to render?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">mv</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mv</span><span class="o">.</span><span class="na">wasCleared</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 视图渲染
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">render</span><span class="o">(</span><span class="n">mv</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* else ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">mappedHandler</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Exception (if any) is already handled..
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 执行拦截器链的 afterCompletion，倒序执行（此处所有的异常已经被处理完成）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">mappedHandler</span><span class="o">.</span><span class="na">triggerAfterCompletion</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="mvc-执行流程" data-numberify>MVC 执行流程<a class="anchor ms-1" href="#mvc-执行流程"></a></h2>
<ol>
<li>
<p>用户向服务器发送请求，请求被SpringMVC前端控制器<code>DispatcherServlet</code>捕获。</p>
</li>
<li>
<p><code>DispatcherServlet</code>对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p>
<ul>
<li>
<p>如果没有对应的映射：</p>
<p>判断是否配置了<code>mvc:default-servlet-handler</code>（默认处理器）。</p>
<ul>
<li>
<p>如果没配置，则控制台报映射查找不到，向客户端展示404错误。</p>
</li>
<li>
<p>如果有配置，则访问目标资源（一般为静态资源，如JS、CSS、HTML等等）。</p>
<p>如果找不到客户端也会展示404错误。</p>
</li>
</ul>
</li>
<li>
<p>如果存在对应的映射则接着执行下面的流程。</p>
</li>
</ul>
</li>
<li>
<p>根据该URI，调用<code>HandlerMapping</code>获得该<code>Handler</code>配置的所有相关的对象（包括<code>Handler</code>对象以及<code>Handler</code>对象对应的拦截器），最后以<code>HandlerExecutionChain</code>执行链对象的形式返回。</p>
</li>
<li>
<p><code>DispatcherServlet</code>根据获得的<code>Handler</code>，选择一个合适的<code>HandlerAdapter</code>。</p>
</li>
<li>
<p>如果成功获得<code>HandlerAdapter</code>，此时将开始执行拦截器的<code>preHandler()</code>方法。</p>
<p>根据拦截器链的顺序，正序执行。</p>
</li>
<li>
<p>提取<code>Request</code>中的模型数据，填充<code>Handler</code>入参，开始执行<code>Handler</code>（<code>Controller</code>)方法，处理请求。</p>
<p>在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p>
<ul>
<li>
<p><code>HttpMessageConveter</code>： 将请求消息（如JSON、XML等数据）转换成一个对象，或将对象转换为指定的响应信息。</p>
</li>
<li>
<p>数据转换：对请求消息进行数据转换。</p>
<p>如<code>String</code>转换成<code>Integer</code>、<code>Double</code>等。</p>
</li>
<li>
<p>数据格式化：对请求消息进行数据格式化。</p>
<p>如将字符串转换成格式化数字或格式化日期等。</p>
</li>
<li>
<p>数据验证：验证数据的有效性（长度、格式等），验证结果存储到<code>BindingResult</code>或<code>Error</code>中。</p>
</li>
<li>
<p><code>Handler</code>执行完成后，向<code>DispatcherServlet</code>返回一个<code>ModelAndView</code>对象。</p>
</li>
</ul>
</li>
<li>
<p>如果<code>Handler</code>被成功执行，则开始执行拦截器的<code>postHandle()</code>方法。</p>
<p>根据拦截器链的顺序，倒序执行。</p>
</li>
<li>
<p>根据返回的<code>ModelAndView</code>（此时会判断是否存在异常：如果存在异常，则执行<code>HandlerExceptionResolver</code>进行异常处理）选择一个适合的<code>ViewResolver</code>进行视图解析，根据<code>Model</code>和<code>View</code>，来渲染视图。</p>
</li>
<li>
<p>渲染视图完毕执行拦截器的<code>afterCompletion()</code>方法。</p>
<p>根据拦截器链的顺序，倒序执行。</p>
</li>
<li>
<p>将渲染结果返回给客户端。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Java 进阶</title>
      <link>/blog/2023/02/java-%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023/02/java-%E8%BF%9B%E9%98%B6/</guid>
      <description><![CDATA[反射 反射是Java中一种用于动态获取类或对象的信息以及动态调用对象方法的功能机制。在运行状态中，对于任意一个类，使用反射可以获取这个类的所有]]></description>
      <content:encoded><![CDATA[<h1 id="反射" data-numberify>反射<a class="anchor ms-1" href="#反射"></a></h1>
<p>反射是Java中一种用于动态获取类或对象的信息以及动态调用对象方法的功能机制。在运行状态中，对于任意一个类，使用反射可以获取这个类的所有属性和方法；对于任意一个对象，使用反射能够调用它的任意属性和方法。利用反射可以无视对象的修饰符，调用类里面的内容。利用反射可以跟配置文件结合起来使用，把要创建的对象信息和方法写在配置文件中。</p>
<p>使用反射包含以下步骤：</p>
<ol>
<li>获取class字节码文件对象。</li>
<li>利用反射可以操作类或对象的信息有：
<ul>
<li>构造方法（获取、创建对象）</li>
<li>成员变量（获取、赋值）</li>
<li>成员方法（获取、运行）</li>
</ul>
</li>
</ol>
<h2 id="获取字节码文件对象" data-numberify>获取字节码文件对象<a class="anchor ms-1" href="#获取字节码文件对象"></a></h2>
<p>Java中的每个类都是一个<code>Class</code>对象（字节码文件对象）。获取字节码文件对象共有以下三种方式：</p>
<ul>
<li>
<p>通过class字节码文件获取：<code>Class.forName(&quot;类的全类名&quot;)</code></p>
<p>类的全类名=类的包名.类名。</p>
<p>使用该方式，是通过<code>.java</code>源代码文件编译后生成的<code>.class</code>字节码文件获取。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.repo.Student&#34;</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p>通过Class对象的class属性获取：<code>类名.class</code></p>
<p>该方式是对象已载入内存后使用的，需要使用<code>import</code>语句将对应的类导入（<code>.class</code>文件加载到内存后产生的<code>Class</code>对象也是唯一的）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span></span></code></pre></div></li>
<li>
<p>通过对象获取：<code>对象.getClass()</code></p>
<p>通过创建对象后的<code>getClass()</code>方法来返回该对象的<code>Class</code>对象。该方法需要创建具体对象后才能使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Student</span> <span class="n">student</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Student</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">student</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<blockquote>
<p>以上三种方法获取到的<code>Class</code>对象均为同一个对象。即，使用<code>==</code>分别判断以上三种方法获取到的对象均为<code>true</code>。</p>
</blockquote>
</blockquote>
<p>获取了<code>Class</code>对象后就可以获取到该类的各种信息。</p>
<h2 id="获取构造方法" data-numberify>获取构造方法<a class="anchor ms-1" href="#获取构造方法"></a></h2>
<p>获取构造方法即为获取<code>Constructor</code>对象。</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Constructor&lt;?&gt;[] getConstructors()</code></td>
<td style="text-align:left">获得所有的公共构造方法（<code>public</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></td>
<td style="text-align:left">获得所有的构造方法（包括<code>private</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code> Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code></td>
<td style="text-align:left">获取指定的公共构造方法</td>
</tr>
<tr>
<td style="text-align:center"><code>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code></td>
<td style="text-align:left">获取指定的构造方法（包括<code>private</code>）</td>
</tr>
</tbody>
</table>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;创建了一个Student对象&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;创建了一个Student对象：&#34;</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;创建了一个Student对象：name=&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&#34;, age=&#34;</span> <span class="o">+</span> <span class="n">age</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReflectDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">NoSuchMethodException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Class对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.repo.Student&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取所有公共构造方法对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Constructor</span><span class="o">[]</span> <span class="n">constructors1</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getConstructors</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Constructor</span> <span class="n">constructor</span> <span class="o">:</span> <span class="n">constructors1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">constructor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;=======================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取所有构造方法对象（包括private）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Constructor</span><span class="o">[]</span> <span class="n">constructors2</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredConstructors</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Constructor</span> <span class="n">constructor</span> <span class="o">:</span> <span class="n">constructors2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">constructor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;=======================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取指定的构造方法对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 空参构造方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Constructor</span> <span class="n">con1</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">con1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 包含参数的构造方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Constructor</span> <span class="n">con2</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">con2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取指定的构造方法对象（包括private）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Constructor</span> <span class="n">con3</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredConstructor</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">con3</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="通过反射创建对象" data-numberify>通过反射创建对象<a class="anchor ms-1" href="#通过反射创建对象"></a></h2>
<p>使用<code>Constructor</code>对象的<code>newInstance()</code>方法可以为反射的类创建对象。</p>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReflectDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">NoSuchMethodException</span><span class="o">,</span> <span class="n">InvocationTargetException</span><span class="o">,</span> <span class="n">InstantiationException</span><span class="o">,</span> <span class="n">IllegalAccessException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Class对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.reflect.Student&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取无参的公共构造方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Constructor</span> <span class="n">con1</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 使用无参的构造方法创建对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Student</span> <span class="n">stu1</span> <span class="o">=</span> <span class="o">(</span><span class="n">Student</span><span class="o">)</span> <span class="n">con1</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stu1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取带参数的构造方法（包括private）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Constructor</span> <span class="n">con2</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredConstructor</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 暴力反射
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 如果是private修饰的构造方法，需要临时修改构造方法的访问权限（取消检查访问权限）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">con2</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 使用带参数的构造方法创建对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Student</span> <span class="n">stu2</span> <span class="o">=</span> <span class="o">(</span><span class="n">Student</span><span class="o">)</span> <span class="n">con2</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="s">&#34;zhangsan&#34;</span><span class="o">,</span> <span class="mi">23</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stu2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="获取成员变量" data-numberify>获取成员变量<a class="anchor ms-1" href="#获取成员变量"></a></h2>
<p>获取成员变量即为获取<code>Field</code>对象。</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Field[] getFields()</code></td>
<td style="text-align:left">返回所有公共成员变量对象（<code>public</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>Field[] getDeclaredFields()</code></td>
<td style="text-align:left">返回所有成员变量对象（包括<code>private</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>Field getField(String name)</code></td>
<td style="text-align:left">返回指定名称的公共成员变量对象（<code>public</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>Field getDeclaredField(String name)</code></td>
<td style="text-align:left">返回指定名称的成员变量对象（包括<code>private</code>）</td>
</tr>
</tbody>
</table>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReflectDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">NoSuchFieldException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Class对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.reflect.Student&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取所有公共成员变量对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Field</span><span class="o">[]</span> <span class="n">fields1</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getFields</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">field</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;====================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取所有成员变量（包括private）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Field</span><span class="o">[]</span> <span class="n">fields2</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredFields</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">field</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;====================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取指定名称的公共成员变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Field</span> <span class="n">nameField</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getField</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">nameField</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;====================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取指定名称的成员变量（包括private）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Field</span> <span class="n">ageField</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ageField</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="利用反射获取和修改成员变量的值" data-numberify>利用反射获取和修改成员变量的值<a class="anchor ms-1" href="#利用反射获取和修改成员变量的值"></a></h2>
<p>可以使用以下<code>Field</code>对象方法对成员变量的值进行修改：</p>
<ul>
<li>
<p>赋值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span>
</span></span></code></pre></div><p>参数：</p>
<ul>
<li><code>obj</code>：要修改属性值的具体对象；</li>
<li><code>value</code>：具体要修改的值。</li>
</ul>
</li>
<li>
<p>获取值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span>
</span></span></code></pre></div><p>参数：</p>
<ul>
<li><code>obj</code>：要修改属性值的具体对象。</li>
</ul>
</li>
</ul>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="n">String</span> <span class="n">gender</span><span class="o">,</span> <span class="n">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReflectDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">IllegalAccessException</span><span class="o">,</span> <span class="n">NoSuchFieldException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Student</span> <span class="n">student</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Student</span><span class="o">(</span><span class="s">&#34;张三&#34;</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="s">&#34;大三&#34;</span><span class="o">,</span> <span class="s">&#34;广州&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Class对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.reflect.Student&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取并修改name的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Field</span> <span class="n">nameField</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getField</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取name的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">nameField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 修改name的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">nameField</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">student</span><span class="o">,</span> <span class="s">&#34;李四&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">name</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">nameField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;===============&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取并修改私有变量的值（暴力反射）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Field</span> <span class="n">addressField</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;address&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 临时取消访问权限（获取和修改私有变量的值都需要此操作）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">addressField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取私有变量address的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">address</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">addressField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 修改私有变量address的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">addressField</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">student</span><span class="o">,</span> <span class="s">&#34;北京&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">address</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">addressField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="获取成员方法" data-numberify>获取成员方法<a class="anchor ms-1" href="#获取成员方法"></a></h2>
<p>获取成员方法即为获取<code>Method</code>对象。</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Method[] getMethods()</code></td>
<td style="text-align:left">返回所有公共成员方法对象（<code>public</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>Method[] getDeclaredMethods()</code></td>
<td style="text-align:left">放回所有成员方法对象（包括<code>private</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>Method getMethod(String name, Class&lt;?&gt;... parameterTypes)</code></td>
<td style="text-align:left">返回指定名称和形参的公共成员方法对象（<code>public</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes</code></td>
<td style="text-align:left">返回指定名称和形参的成员方法对象（包括<code>private</code>）</td>
</tr>
</tbody>
</table>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.reflect</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="n">String</span> <span class="n">gender</span><span class="o">,</span> <span class="n">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getGender</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGender</span><span class="o">(</span><span class="n">String</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAddress</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAddress</span><span class="o">(</span><span class="n">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Student{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;name=&#39;&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, age=&#34;</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, gender=&#39;&#34;</span> <span class="o">+</span> <span class="n">gender</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, address=&#39;&#34;</span> <span class="o">+</span> <span class="n">address</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">sleep</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">+</span> <span class="s">&#34;正在睡觉&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">study</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">+</span> <span class="s">&#34;正在内卷&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">study</span><span class="o">(</span><span class="kt">int</span> <span class="n">time</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">+</span> <span class="s">&#34;已经卷了&#34;</span> <span class="o">+</span> <span class="n">time</span> <span class="o">+</span> <span class="s">&#34;分钟还在卷&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReflectDemo1</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">NoSuchMethodException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Class对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.reflect.Student&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取所有公共成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span><span class="o">[]</span> <span class="n">methods1</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getMethods</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Method</span> <span class="n">method</span> <span class="o">:</span> <span class="n">methods1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;==============&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取所有成员方法（包括private）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span><span class="o">[]</span> <span class="n">methods2</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Method</span> <span class="n">method</span> <span class="o">:</span> <span class="n">methods2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;==============&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取指定的公共成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 空参的公共成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span> <span class="n">toStringMethod</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&#34;toString&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">toStringMethod</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 带参数的公共成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span> <span class="n">setNameMethod</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&#34;setName&#34;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">setNameMethod</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;==============&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取指定的成员方法（包括private）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 空参的成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span> <span class="n">studyMethod1</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">&#34;study&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">studyMethod1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 带参数的成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span> <span class="n">studyMethod2</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">&#34;study&#34;</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">studyMethod2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="通过反射运行成员方法" data-numberify>通过反射运行成员方法<a class="anchor ms-1" href="#通过反射运行成员方法"></a></h2>
<p>使用<code>Method</code>对象的<code>invoke()</code>方法可以运行成员方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">,</span> <span class="n">Object</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span>
</span></span></code></pre></div><ul>
<li><code>obj</code>：具体调用成员方法的对象；</li>
<li><code>args</code>：调用成员方法传递的参数；</li>
<li>返回值：方法的返回值。</li>
</ul>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReflectDemo1</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">NoSuchMethodException</span><span class="o">,</span> <span class="n">InvocationTargetException</span><span class="o">,</span> <span class="n">IllegalAccessException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Student</span> <span class="n">student</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Student</span><span class="o">(</span><span class="s">&#34;张三&#34;</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="s">&#34;大三&#34;</span><span class="o">,</span> <span class="s">&#34;广州&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Class对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.reflect.Student&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 调用无参的成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span> <span class="n">toStringMethod</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&#34;toString&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">studentToString</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">toStringMethod</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">studentToString</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 调用带参的私有成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span> <span class="n">studyMethod</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">&#34;study&#34;</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 临时取消访问权限
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">studyMethod</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">studyMethod</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">student</span><span class="o">,</span> <span class="mi">180</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="注解" data-numberify>注解<a class="anchor ms-1" href="#注解"></a></h1>
<p>Java注解是附加在代码中的一些元信息，用于编译和运行时进行解析和使用，起到<strong>说明、配置</strong>的功能。</p>
<p>注解不会影响代码的实际逻辑（并不直接影响代码的语义），仅仅起到辅助性的作用（但是注解可以被看做是程序的工具或者类库。会反过来对正在运行的程序语义有所影响）。包含在<code>java.lang.annotation</code>包中。注解使用<code>@interface</code>来定义（类似于接口的定义）。为注解定义一个方法即为注解类型定义了一个元素，方法的声明不允许有参数或<code>throw</code>语句，返回值类型被限定为原始数据类型、<code>String</code>、<code>Class</code>、<code>enums</code>、注解类型，或前面这些类型的数组，方法可以有默认值。注解可以从源文件、class文件或者在运行时通过反射机制多种方式被读取。</p>
<p>注解的实现的原理很大的一部分是基于反射实现。</p>
<p>一般来说，注解一般分为三种类型：</p>
<ul>
<li>元注解</li>
<li>标准注解</li>
<li>自定义注解</li>
</ul>
<h2 id="元注解" data-numberify>元注解<a class="anchor ms-1" href="#元注解"></a></h2>
<p>元注解是专职负责注解其他注解，主要是标明该注解的使用范围，生效范围。元注解并不能被修改，只能被用来定义自定义注解。</p>
<p>元注解包括以下四种：</p>
<table>
<thead>
<tr>
<th style="text-align:center">注解</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>@Target</code></td>
<td style="text-align:left">定义注解的作用目标。即用来定义自定义注解具体作用在类上，方法上，还是变量上。具体值和作用对象如下：<br><code>ElementType.TYPE</code>：接口、类、枚举、注解<br><code>ElementType.FIELD</code>：字段、枚举的常量<br><code>ElementType.METHOD</code>：方法<br><code>ElementType.PARAMETER</code>：方法参数<br><code>ElementType.CONSTRUCTOR</code>：构造函数<br><code>ElementType.LOCAL_VARIABLE</code>：局部变量<br><code>ElementType.ANNOTATION_TYPE</code>：注解<br><code>ElementType.PACKAGE</code>：包</td>
</tr>
<tr>
<td style="text-align:center"><code>Retention</code></td>
<td style="text-align:left">定义注解的保留策略。该注解的值如下：<br><code>RetentionPolicy.SOURCE</code>：定义注解仅存在于源码中，在class字节码文件中不包含；<br><code>RetentionPolicy.CLASS</code>：该注解默认的保留策略，定义注解会在class字节码文件中存在，但运行时无法获得；<br><code>RetentionPolicy.RUNTIME</code>：定义注解会在class字节码文件中存在，在运行时可以通过反射获取到。</td>
</tr>
<tr>
<td style="text-align:center"><code>@Document</code></td>
<td style="text-align:left">说明该注解将被包含在javadoc中。</td>
</tr>
<tr>
<td style="text-align:center"><code>@Inherited</code></td>
<td style="text-align:left">说明子类可以继承该注解。</td>
</tr>
</tbody>
</table>
<h2 id="标准注解" data-numberify>标准注解<a class="anchor ms-1" href="#标准注解"></a></h2>
<p>Java 提供了三个标准注解，定义在<code>java.lang</code>中（这三个注解的作用更多是一种注释）。</p>
<ul>
<li>
<p><code>@Override</code>：表示当前方法覆盖了父类中的对应方法（重写方法）。</p>
</li>
<li>
<p><code>@Deprecated</code>：标记一个元素为已过期，避免或不推荐使用。</p>
<p>支持的元素类型为：<code>CONSTRUCTOR</code>, <code>FIELD</code>, <code>LOCAL_VARIABLE</code>, <code>METHOD</code>, <code>PACKAGE</code>, <code>PARAMETER</code>, <code>TYPE</code>。</p>
</li>
<li>
<p><code>@SuppressWarnings</code>：不输出对应的编译警告。</p>
</li>
</ul>
<h2 id="自定义注解" data-numberify>自定义注解<a class="anchor ms-1" href="#自定义注解"></a></h2>
<p>注解的定义类似于接口的定义，使用<code>@interface</code>来定义。定义注解类中的一个方法即为注解类型定义了一个元素，方法的声明不允许有参数或<code>throw</code>语句，返回值类型被限定为原始数据类型、字符串String、Class、enums、注解类型，或前面这些类型的数组，方法可以有默认值。</p>
<p>自定义注解一般分为以下三个步骤：</p>
<ul>
<li>
<p>定义注解。</p>
<p>如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">Type</span><span class="o">)</span>   <span class="c1">// 表明该注解加载在类上
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span> <span class="c1">// 表明运行时读取该注解
</span></span></span><span class="line"><span class="cl"><span class="c1">// 定义注解类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">MyAnnotationType</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 定义注解方法（不能有参数或throw等）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="nf">value</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>   <span class="c1">// 表明该注解加载在字段上（接口、类、枚举）。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">MyAnnotationField</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="nf">name</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用default定义默认值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="nf">length</span><span class="o">()</span> <span class="k">default</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>使用注解。</p>
<p>如（在其他类上）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@MyAnnotationType</span><span class="o">(</span><span class="s">&#34;Annotation&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 或（有多个元素时需要指定元素名）：@MyAnnotation1(value = &#34;Annotation&#34;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UsingAnnotations</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@MyAnnotationField</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;张三&#34;</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">12</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@MyAnnotationField</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;李四&#34;</span><span class="o">)</span>   <span class="c1">// length将使用默认值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="n">String</span> <span class="n">b</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>读取注解。</p>
<p>如（定义一个类来读取）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnnotationValues</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readValues</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Class</span> <span class="n">usingAnnotationsClass</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;UsingAnnotation&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 读取作用于类上的注解
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">MyAnnotationType</span> <span class="n">mat</span> <span class="o">=</span> <span class="o">(</span><span class="n">MyAnnotationType</span><span class="o">)</span> <span class="n">usingAnnotationsClass</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">MyAnnotationType</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mat</span><span class="o">.</span><span class="na">value</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 读取作用于属性上的注解
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Field</span> <span class="n">a</span> <span class="o">=</span> <span class="n">usingAnnotationsClass</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">MyAnnotationField</span> <span class="n">maf</span> <span class="o">=</span> <span class="o">(</span><span class="n">MyAnnotationField</span><span class="o">)</span> <span class="n">a</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">MyAnnotationField</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maf</span><span class="o">.</span><span class="na">name</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maf</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="使用注解模拟-junit" data-numberify>使用注解模拟 Junit<a class="anchor ms-1" href="#使用注解模拟-junit"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnnotationDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// @MyTest
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;test1...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@MyTest</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test2</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;test2...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// @MyTest
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test3</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;test3...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@MyTest</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test4</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;test4...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@MyTest</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test5</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;test5...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">AnnotationDemo</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationDemo</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Class对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.annotation.AnnotationDemo&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 判断对象的所有方法上是否存在MyTest注解
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span><span class="o">[]</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Method</span> <span class="n">method</span> <span class="o">:</span> <span class="n">methods</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">isAnnotationPresent</span><span class="o">(</span><span class="n">MyTest</span><span class="o">.</span><span class="na">class</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Spring Framework</title>
      <link>/docs/spring/springframework/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springframework/</guid>
      <description><![CDATA[Spring Framewor 简介 Spring5.0已经全面支持JDK8，建议JDK使用1.8版本。 Spring Framework是Spring家族中其他框架的底层基础。 Spring Framewor 架]]></description>
      <content:encoded><![CDATA[<h1 id="spring-framewor-简介" data-numberify>Spring Framewor 简介<a class="anchor ms-1" href="#spring-framewor-简介"></a></h1>
<blockquote>
<p>Spring5.0已经全面支持JDK8，建议JDK使用1.8版本。</p>
</blockquote>
<p>Spring Framework是Spring家族中其他框架的底层基础。</p>
<h2 id="spring-framewor-架构" data-numberify>Spring Framewor 架构<a class="anchor ms-1" href="#spring-framewor-架构"></a></h2>
<p>Spring Framework的发展经历了很多版本的变更，每个版本都有相应的调整。</p>
<p>Spring Framework 架构：</p>
<ol>
<li>
<p>核心层</p>
<p>Core Container：核心容器，这个模块是Spring最核心的模块，其他的都需要依赖该模块。</p>
</li>
<li>
<p>AOP层</p>
<ul>
<li>AOP：面向切面编程，它依赖核心层容器，目的是在<u>不改变原有代码</u>的前提下对其进行<u>功能增强</u>。</li>
<li>Aspects：AOP是编程思想，Aspects是对AOP思想的具体实现。</li>
</ul>
</li>
<li>
<p>数据层</p>
<ul>
<li>Data Access：数据访问，Spring全家桶中有对数据访问的具体实现技术。</li>
<li>Data Integration：数据集成，Spring支持整合其他的数据层解决方案，比如Mybatis。</li>
<li>Transactions：事务，Spring中事务管理是Spring AOP的一个具体实现。</li>
</ul>
</li>
<li>
<p>Web层</p>
</li>
<li>
<p>Test层</p>
<p>Spring主要整合了Junit来完成单元测试和集成测试。</p>
</li>
</ol>
<blockquote>
<p>从Spring Framework 5没有架构图，而最新的架构图是4版本，所以可以认为Spring Framework从4版本开始架构就已经趋于稳定，没有什么变动。</p>
</blockquote>
<h2 id="spring-核心概念" data-numberify>Spring 核心概念<a class="anchor ms-1" href="#spring-核心概念"></a></h2>
<p>在Spring核心概念主要包含：</p>
<ul>
<li>
<p><code>IOC</code></p>
<ul>
<li>IOC，Inversion of Control，即控制反转。</li>
<li>控制反转：主动<code>new</code>产生对象转换为由<u>外部</u>提供对象，此过程中对象创建控制权由程序转移到外部的一种思想。</li>
</ul>
<blockquote>
<p>例如，业务（Service）层要使用到数据（DAO）层的类对象。此时就可以使用IOC思想，由外部程序给业务层创建数据层对象。
这样可以降低业务层和数据层之间的耦合性。
如果数据层的实现更改的话，就无需在业务层中修改实现类。</p>
</blockquote>
<ul>
<li><code>IOC容器</code>
<ul>
<li>Spring提供了一个容器，称为<u>IOC容器</u>，用来充当IOC思想中的&quot;外部&quot;。</li>
<li>IOC容器负责对象的创建、初始化等一系列工作。</li>
</ul>
</li>
<li><code>Bean</code>
<ul>
<li>在IOC容器中，被创建或被管理的对象统称为<code>Bean</code>。</li>
<li>IOC容器中存放的就是一个个的Bean对象。</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>DI</code></p>
<ul>
<li>依赖注入：在容器中建立Bean与Bean之间的依赖关系的整个过程。</li>
</ul>
<blockquote>
<p>例如，业务层和数据层在IOC容器中创建Bean后，并不能直接工作，因为业务层需要依赖数据层才能正确工作。所以此时就需要使用依赖注入，在业务层和数据层之间建立依赖关系。</p>
</blockquote>
</li>
</ul>
<p>IOC和DI的最终目标就是充分解耦。在Spring Framewor中的实现依靠：</p>
<ul>
<li>使用IOC容器管理Bean（IOC）。</li>
<li>在IOC容器内将有依赖关系的Bean进行关系绑定（DI）。</li>
</ul>
<p>最终，使用对象时不仅可以直接从IOC容器中获取，并且获取到的bean已经绑定了所有的依赖关系。</p>
<hr>
<h1 id="配置文件方法使用iocdi" data-numberify>配置文件方法使用IOC/DI<a class="anchor ms-1" href="#配置文件方法使用iocdi"></a></h1>
<h2 id="使用-ioc-容器创建-beanbean-标签" data-numberify>使用 IOC 容器创建 Bean（bean 标签）<a class="anchor ms-1" href="#使用-ioc-容器创建-beanbean-标签"></a></h2>
<p>基础配置：</p>
<ol>
<li>
<p>创建Maven项目，项目基础结构如下：</p>
<ul>
<li>📁<code>project-file-name</code>
<ul>
<li>📁<code>src</code>
<ul>
<li>📁<code>main</code>
<ul>
<li>📁<code>java</code>
<ul>
<li>📁<code>com.linner</code>
<ul>
<li>📁<code>dao</code></li>
<li>📁<code>domain</code></li>
<li>📁<code>service</code></li>
</ul>
</li>
</ul>
</li>
<li>📁<code>resourcs</code></li>
</ul>
</li>
<li>📁<code>test</code>
<ul>
<li>📁<code>java</code>
<ul>
<li>📁<code>com.linner</code>
<ul>
<li>📁<code>service</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>📄<code>pom.xml</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>添加Spring Framework的依赖jar包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--springframework--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--junit--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>4.12<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>添加业务层、数据层类：</p>
<ul>
<li>
<p><code>User.java</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.domain</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;User{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, username=&#39;&#34;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, password=&#39;&#34;</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>DAO(仅测试，无需查询数据库):</p>
<p>接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>实现类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao.impl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao findAll...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao findById:&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao delete:&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao save:&#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao update:&#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>Service:</p>
<p>接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>实现类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service.impl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.impl.UserDaoImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService findAll...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService findById:&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService delete:&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService save:&#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService update:&#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ol>
<ul>
<li>
<p>测试方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.impl.UserServiceImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserServiceImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>创建Bean</p>
<ul>
<li>
<p>在📁<code>resourcs</code>目录下创建String配置文件<code>applicationContext.xml</code>，并使用<code>&lt;bean&gt;</code>标签配置Bean：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--添加UserService--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>接着在程序中使用Spring提供的方法获取IOC容器。然后从IOC容器中获取对象并调用其方法，修改Test类进行测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// private UserService userService = new UserServiceImpl();
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用IOC无需自己创建对象（对象由IOC容器分配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 这里使用静态代码块获取容器和Bean
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取IOC容器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>IOC核心容器创建方式有：</p>
<ul>
<li>
<p><code>ClassPathXmlApplicationContext</code>：类路径下的XML配置文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p><code>ClassPathXmlApplicationContext</code>的参数为XML配置文件在类路径下的相对路径。</p>
</li>
<li>
<p><code>FileSystemXmlApplicationContext</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileSystemXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;/home/linner/IdeaProjects/my-springfw-demo/src/main/resources/applicationContext.xml&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p><code>FileSystemXmlApplicationContext</code>的参数为XML配置文件在文件系统下的绝对路径。</p>
</li>
</ul>
</li>
</ul>
<p><code>UserServiceTest</code>执行成功说明配置成功。</p>
<h3 id="bean-的基础配置" data-numberify>Bean 的基础配置<a class="anchor ms-1" href="#bean-的基础配置"></a></h3>
<p><code>&lt;bean&gt;</code>标签是作为Spring配置Bean使用。其基本形式为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;&#34;</span> <span class="na">class=</span><span class="s">&#34;&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><ul>
<li><code>id</code>：Bean标签的唯一标识。在同一个上下文中(配置文件)不能重复。</li>
<li><code>class</code>：Bean的类型。包含包名和类名。</li>
</ul>
<h3 id="别名name-属性" data-numberify>别名（name 属性）<a class="anchor ms-1" href="#别名name-属性"></a></h3>
<p><code>&lt;bean&gt;</code>的<code>name</code>属性可以为<code>&lt;bean&gt;</code>指定别名，别名可以有多个，使用<code>,</code>，<code>;</code>，空格进行分隔。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">name=</span><span class="s">&#34;service userEbi&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><blockquote>
<p>说明：EBI全称Enterprise Business Interface，译为企业业务接口。</p>
</blockquote>
<h3 id="获取-bean-的方式getbean-方法" data-numberify>获取 Bean 的方式（getBean() 方法）<a class="anchor ms-1" href="#获取-bean-的方式getbean-方法"></a></h3>
<p>使用<code>getBean()</code>获取Bean的方式有三种：</p>
<ul>
<li>
<p>按照名称获取：</p>
<p>是指在<code>getBean()</code>方法中传递<code>String</code>类型的参数，参数的值为Bean的名称。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="nf">getBean</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>按照类型获取：</p>
<p>需要保证该类型在IOC容器中有且仅有一个Bean（不能包含多个同类型的Bean）。
在参数中传递该类型的<code>class</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getBean</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">aClass</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>按照名称和类型获取：</p>
<p>在参数中传入Bean的名称和类型。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getBean</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">aClass</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="作用范围scope-属性" data-numberify>作用范围（scope 属性）<a class="anchor ms-1" href="#作用范围scope-属性"></a></h3>
<p><code>&lt;bean&gt;</code>的<code>scope</code>属性可以为<code>&lt;bean&gt;</code>设置作用范围，可选值为：</p>
<ul>
<li>
<p><code>singloton</code>：默认，表示创建的对象为单例（在整个IOC容器中所有获取到的该对象都为同一个对象）。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">scope=</span><span class="s">&#34;singloton&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>或：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="nt">/&gt;</span>
</span></span></code></pre></div><blockquote>
<p>实际上，单例对象在容器被获取的时候就已经被创建了。</p>
</blockquote>
</li>
<li>
<p><code>prototype</code>：表示创建的对象为非单例（每次在IOC容器中获取到的对象都是不同的对象）。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">name=</span><span class="s">&#34;service userEbi&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">scope=</span><span class="s">&#34;prototype&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div></li>
</ul>
<p>Example：</p>
<ul>
<li>
<p>将<code>UserService</code>设为单例：</p>
<p>String配置文件<code>applicationContext.xml</code>中<code>userService</code>的<code>&lt;bean&gt;</code>（由于Spring默认创建的是单例，所以这里可以选择不添加<code>scope=&quot;singloton&quot;</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>创建新的测试类<code>TestForUserServiceScope</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestForUserServiceScope</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ApplicationContext</span> <span class="n">ctx</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>执行<code>UserServiceTest1</code>后，在输出中可以发现：每个测试方法中使用<code>getBean()</code>获取到的<code>UserService</code>都是同个对象。</p>
</li>
<li>
<p>将<code>UserService</code>设为非单例：</p>
<p>修改String配置文件<code>applicationContext.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">scope=</span><span class="s">&#34;prototype&#34;</span><span class="nt">&gt;</span>
</span></span></code></pre></div><p>再次执行<code>UserServiceTest1</code>，可以发现：每个测试方法中使用<code>getBean()</code>获取到的<code>UserService</code>都是不同的对象。</p>
</li>
</ul>
<h3 id="bean-的实例化" data-numberify>Bean 的实例化<a class="anchor ms-1" href="#bean-的实例化"></a></h3>
<p>实例化Bean分为三种方式：</p>
<ul>
<li>构造方法</li>
<li>静态工厂</li>
<li>实例工厂</li>
</ul>
<h4 id="构造方法实例化-bean默认" data-numberify>构造方法实例化 Bean（默认）<a class="anchor ms-1" href="#构造方法实例化-bean默认"></a></h4>
<p><code>&lt;bean&gt;</code>默认是使用无参的构造方法实例化Bean。并且，Spring底层用的是反射（因为即使将构造方法设置为<code>private</code>依然可以使用）。</p>
<h4 id="静态工厂实例化-beanfactory-method-属性" data-numberify>静态工厂实例化 Bean（factory-method 属性）<a class="anchor ms-1" href="#静态工厂实例化-beanfactory-method-属性"></a></h4>
<p>静态工厂实例化Bean指的是通过工厂类来创建对象。</p>
<p>一般情况下是使用如下方法静态工厂实例化对象：</p>
<ul>
<li>
<p>创建<code>com.linner.factory</code>包，并编写<code>UserDaoFactory</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.factory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.impl.UserDaoImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">UserDao</span> <span class="nf">getUserDao</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>编写<code>TestFroInstanceUserDao</code>测试类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.factory.UserDaoFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestFroInstanceUserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="n">UserDaoFactory</span><span class="o">.</span><span class="na">getUserDao</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>在IOC容器中使用静态工厂实例化：</p>
<ul>
<li>
<p>在Spring配置文件中加入<code>UserDao</code>的配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.factory.UserDaoFactory&#34;</span> <span class="na">factory-method=</span><span class="s">&#34;getUserDao&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><ul>
<li><code>class</code>：工厂类的类全名。这里指定的是创建<code>UserDao</code>的静态工厂类<code>UserDaoFactory</code>。</li>
<li><code>factory-method</code>：<code>class</code>指定的工厂类中创建对象的方法名。这里指定的是工厂类中用来创建<code>UserDao</code>的方法。</li>
</ul>
</li>
<li>
<p>修改<code>TestFroInstanceUserDao</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestFroInstanceUserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>注意：使用这种方法实例化，不能将该Bean注入到其他Bean中。</p>
</blockquote>
<h4 id="实例工厂实例化-bean" data-numberify>实例工厂实例化 Bean<a class="anchor ms-1" href="#实例工厂实例化-bean"></a></h4>
<h5 id="使用-bean-的-factory-bean-属性" data-numberify>使用 Bean 的 factory-bean 属性<a class="anchor ms-1" href="#使用-bean-的-factory-bean-属性"></a></h5>
<p>实例化工厂实例化Bean是指，为工厂类添加一个单例的Bean（为区分则称为工厂Bean），然后在要实例化的Bean中指定使用这个工厂Bean作为实例化工厂。</p>
<p>修改<code>UserDaoFactory</code>（不使用静态工厂）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">UserDao</span> <span class="nf">getUserDao</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在Spring的配置文件中添加<code>UserDaoFactory</code>的<code>&lt;bean&gt;</code>，并且修改<code>UserDao</code>的<code>&lt;bean&gt;</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDaoFactory&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.factory.UserDaoFactory&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">factory-bean=</span><span class="s">&#34;userDaoFactory&#34;</span> <span class="na">factory-method=</span><span class="s">&#34;getUserDao&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><ul>
<li>添加了一个<code>userDaoFactory</code>工厂Bean。</li>
<li><code>factory-bean</code>：工厂的实例对象，即工厂Bean的<code>id</code>或<code>name</code>。</li>
<li><code>factory-method</code>：工厂对象中具体创建对象的方法名，即<code>factory-bean</code>指定对象中创建该对象的方法名。</li>
</ul>
<p>成功执行<code>TestFroInstanceUserDao</code>即配置成功。</p>
<h5 id="使用-factorybean-接口" data-numberify>使用 FactoryBean 接口<a class="anchor ms-1" href="#使用-factorybean-接口"></a></h5>
<p>创建一个<code>UserDaoFactoryBean</code>的类，实现<code>FactoryBean</code>接口，重写接口的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.factory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.impl.UserDaoImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.FactoryBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoFactoryBean</span> <span class="kd">implements</span> <span class="n">FactoryBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getObject</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">getObjectType</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">UserDao</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSingleton</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>getObject()</code>：创建实例化对象并返回。代替原始实例工厂中创建对象的方法。</li>
<li><code>getObjectType()</code>：返回所创建类的Class对象。</li>
<li><code>isSingleton()</code>：设置对象是否为单例。默认<code>true</code>，可以不重写。</li>
</ul>
<p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.factory.UserDaoFactoryBean&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>成功执行<code>TestFroInstanceUserDao</code>即配置成功。</p>
<h3 id="bean-的生命周期" data-numberify>Bean 的生命周期<a class="anchor ms-1" href="#bean-的生命周期"></a></h3>
<p>Bean的生命周期是指Bean对象从创建到销毁的整个过程。对Bean的生命周期进行控制，可以在Bean创建后（如加载初始化需要用到资源）还有销毁前（如释放资源）执行一些操作。</p>
<h4 id="init-method-和-destroy-method-属性" data-numberify>init-method 和 destroy-method 属性<a class="anchor ms-1" href="#init-method-和-destroy-method-属性"></a></h4>
<p>Spring控制生命周期的第一个方法便是使用Spring配置文件中<code>&lt;bean&gt;</code>的 <code>init-method</code> 和 <code>destroy-method</code> 属性。</p>
<p>在<code>UserDaoImpl</code>中创建初始化方法和销毁方法（方法名任意）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 初始化方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao init...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 销毁方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao destroy...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span> <span class="na">init-method=</span><span class="s">&#34;init&#34;</span> <span class="na">destroy-method=</span><span class="s">&#34;destroy&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><ul>
<li><code>init-method</code>：<code>class</code>指定的类中的初始化方法，在创建Bean对象后执行。</li>
<li><code>destroy-method</code>：<code>class</code>指定的类中的销毁方法，在销毁Bean前执行。</li>
</ul>
<p>编写<code>TestForLifeCycle</code>测试类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestForLifeCycle</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testForLifeCycle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ClassPathXmlApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>对比之前的<code>ctx</code>对象，这里<code>ctx</code>对象使用的类型从<code>ApplicationContext</code>变成了<code>ClassPathXmlApplicationContext</code>。这是因为<code>ApplicationContext</code>中并没有<code>close()</code>方法。而想要执行Bean对象中的<code>destroy()</code>，就必须在程序退出前关闭IOC容器（调用<code>ctx.close()</code>）。</p>
<h4 id="注册钩子关闭容器" data-numberify>注册钩子关闭容器<a class="anchor ms-1" href="#注册钩子关闭容器"></a></h4>
<p>在容器未关闭之前，提前设置好回调函数，让JVM在退出之前回调此函数来关闭容器。</p>
<p>修改<code>TestForLifeCycle</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestForLifeCycle</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testForLifeCycle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ClassPathXmlApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="o">.</span><span class="na">registerShutdownHook</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>注意：<code>ApplicationContext</code>中也没有<code>registerShutdownHook()</code>。所以这里使用的是<code>ClassPathXmlApplicationC</code>对象。</p>
</blockquote>
<h4 id="initializingbean-和-disposablebean-接口" data-numberify>InitializingBean 和 DisposableBean 接口<a class="anchor ms-1" href="#initializingbean-和-disposablebean-接口"></a></h4>
<p>Spring 提供了<code>InitializingBean</code>和<code>DisposableBean</code>接口以更加方便地控制Bean生命周期。使用这两个接口则无需通过Sping配置文件中的<code>init-method</code>和<code>destroy-method</code> 属性来控制生命周期。</p>
<p>实现<code>InitializingBean</code>接口的<code>afterPropertiesSet()</code>方法和<code>DisposableBean</code>接口的<code>destroy()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.DisposableBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.InitializingBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span><span class="o">,</span> <span class="n">InitializingBean</span><span class="o">,</span> <span class="n">DisposableBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * InitializingBean接口的初始化方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterPropertiesSet</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao init by afterPropertiesSet()...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * DisposableBean接口的销毁方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao destroyed by destroy()...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在Spring配置文件中删除<code>init-method</code>和<code>destroy-method</code>属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><h3 id="使用-bean-标签的注意事项" data-numberify>使用 Bean 标签的注意事项<a class="anchor ms-1" href="#使用-bean-标签的注意事项"></a></h3>
<ul>
<li>
<p><code>class</code>属性不能使用接口。因为接口不能创建对象。</p>
</li>
<li>
<p>获取Bean无论是通过<code>id</code>还是<code>name</code>获取，如果无法获取到，将抛出异常<code>NoSuchBeanDefinitionException</code>。</p>
</li>
<li>
<p>Bean默认为单例，避免了对象的频繁创建与销毁，达到了对Bean对象的复用，性能高。</p>
</li>
<li>
<p>如果对象是有状态对象（即该对象有成员变量可以用来存储数据）。因为所有请求线程共用一个Bean对象，所以会存在线程安全问题。</p>
</li>
<li>
<p>如果对象是无状态对象（即该对象没有成员变量没有进行数据存储）。因方法中的局部变量在方法调用完成后会被销毁，所以不会存在线程安全问题。</p>
</li>
<li>
<p>适合交给容器进行管理的Bean对象：</p>
<ul>
<li>表现层对象</li>
<li>业务层对象</li>
<li>数据层对象</li>
<li>工具对象</li>
</ul>
</li>
<li>
<p>不适合交给容器进行管理的Bean对象：</p>
<p>封装实例的域对象。会引发线程安全问题。</p>
</li>
</ul>
<h2 id="di-依赖注入" data-numberify>DI 依赖注入<a class="anchor ms-1" href="#di-依赖注入"></a></h2>
<p>上面的程序，在<code>UserServiceImpl</code>中依然需要手动创建对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>当前业务层和数据层的耦合性还是很高。此时就需要使用依赖注入来降低耦合性。</p>
<p>Spring依赖注入支持<u>简单数据类型</u>、<u>引用数据类型</u>还有<u>集合注入</u>，并且提供了两种注入方式：</p>
<ul>
<li>Setter注入</li>
<li>构造器注入</li>
</ul>
<p>基础配置：</p>
<ol>
<li>创建Maven项目。</li>
<li>添加Spring Framework和Junit的依赖jar包。</li>
<li>添加业务层、数据层类：
<ul>
<li><code>User.java</code>: 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>User.java</code>。</li>
<li>DAO(仅测试，无需查询数据库): 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的DAO（<code>UserDao</code>）。</li>
<li>Service: 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的Service（<code>UserService</code>）。</li>
</ul>
</li>
</ol>
<ul>
<li>
<p>测试方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.impl.UserServiceImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="setter-注入property-标签" data-numberify>Setter 注入（property 标签）<a class="anchor ms-1" href="#setter-注入property-标签"></a></h3>
<p>Setter注入是指，在实现类中为需要注入的属性设置Setter方法，让Spring能够使用Setter方法自动给属性创建对象。</p>
<h4 id="注入引用数据类型" data-numberify>注入引用数据类型<a class="anchor ms-1" href="#注入引用数据类型"></a></h4>
<p>要在Bean中注入引用类型属性，注入的属性其实现类必须得是IOC容器中的Bean。</p>
<p>在<code>UserServiceImpl</code>中，取消手动创建对象，并为<code>userDao</code>属性提供<code>setter</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserDao</span><span class="o">(</span><span class="n">UserDao</span> <span class="n">userDao</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userDao</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件<code>applicationContext.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;userDao&#34;</span> <span class="na">ref=</span><span class="s">&#34;userDao&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--...--&gt;</span>
</span></span></code></pre></div><p>为<code>UserService</code>注入<code>UserDao</code>要在<code>UserService</code>的<code>&lt;bean&gt;</code>标签中使用<code>&lt;property&gt;</code>标签。·</p>
<p><code>&lt;property&gt;</code>表示配置当前<code>&lt;bean&gt;</code>的属性，其标签属性有：</p>
<ul>
<li><code>name</code>：<code>&lt;bean&gt;</code>所指的实现类的属性名，表示配置哪一个具体的属性。</li>
<li><code>ref</code>：要配置的属性的Bean的<code>id</code>或<code>name</code>，表示参照哪一个<code>&lt;bean&gt;</code>（该注入的Bean必须在容器中存在）。</li>
</ul>
<p>成功运行<code>ServiceBeanTest</code>说明注入成功。</p>
<p>如果要注入多个属性，则在实例类中加入多个属性，为其设置Setter并在Bean中配置多个<code>&lt;property&gt;</code>即可。</p>
<h4 id="注入简单数据类型" data-numberify>注入简单数据类型<a class="anchor ms-1" href="#注入简单数据类型"></a></h4>
<p>在Bean中注入简单类型属性，简单数据类型并不用在配置文件中为简单类型添加Bean标签配置。</p>
<p>为<code>BookDao</code>添加简单类型属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.InitializingBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span><span class="o">,</span> <span class="n">InitializingBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setConnectionNum</span><span class="o">(</span><span class="kt">int</span> <span class="n">connectionNum</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">connectionNum</span> <span class="o">=</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDatabaseName</span><span class="o">(</span><span class="n">String</span> <span class="n">databaseName</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">databaseName</span> <span class="o">=</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterPropertiesSet</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao init: DatabaseName=&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">databaseName</span>
</span></span><span class="line"><span class="cl">                        <span class="o">+</span> <span class="s">&#34;, ConnectionNum=&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">connectionNum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在Spring配置文件中为<code>UserDao</code>添加<code>&lt;property&gt;</code>标签：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;databaseName&#34;</span> <span class="na">value=</span><span class="s">&#34;mysql&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;connectionNum&#34;</span> <span class="na">value=</span><span class="s">&#34;10&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><ul>
<li><code>name</code>：含义不变，与引用注入类型用法中的含义相同。</li>
<li><code>value</code>: 要配置的属性的值，必须是简单数据类型。对于参数类型，Spring在注入的时候会自动转换，但是有可能会发生转换错误的情况。</li>
</ul>
<p>成功运行<code>ServiceBeanTest</code>说明注入成功。</p>
<h4 id="集合注入" data-numberify>集合注入<a class="anchor ms-1" href="#集合注入"></a></h4>
<p>修改<code>UserDao</code>，为其添加集合类型参数和对应Setter方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span><span class="o">,</span> <span class="n">InitializingBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Properties</span> <span class="n">properties</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...此处省略setter方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterPropertiesSet</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao init: &#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;array=&#34;</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">array</span><span class="o">)</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;, list=&#34;</span> <span class="o">+</span> <span class="n">list</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;, set=&#34;</span> <span class="o">+</span> <span class="n">set</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;, map=&#34;</span> <span class="o">+</span> <span class="n">map</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;, properties=&#34;</span> <span class="o">+</span> <span class="n">properties</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;array&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;array&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>1<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>2<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>3<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/array&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;list&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;list&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>a<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>b<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>c<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/list&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;set&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;set&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>a<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>a<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>b<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>c<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/set&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;map&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;map&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;a&#34;</span> <span class="na">value=</span><span class="s">&#34;1&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;b&#34;</span> <span class="na">value=</span><span class="s">&#34;2&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;c&#34;</span> <span class="na">value=</span><span class="s">&#34;3&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/map&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;properties&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;props&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;a&#34;</span><span class="nt">&gt;</span>1<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;b&#34;</span><span class="nt">&gt;</span>2<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;c&#34;</span><span class="nt">&gt;</span>3<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/props&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><ul>
<li>
<p><code>&lt;property&gt;</code>：Setter注入依然使用该标签。其<code>name</code>属性含义不变。</p>
<p>集合类型的值在其标签下定义。</p>
</li>
<li>
<p><code>&lt;array&gt;</code>：定义数组类型的值。</p>
<ul>
<li>数组元素中的值使用<code>&lt;value&gt;</code>标签定义。</li>
<li><code>&lt;value&gt;</code>标签中的值要与数组的类型一致。
一般形式如下：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;array&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/array&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;list&gt;</code>：定义<code>List</code>类型的值。</p>
<p>其用法与<code>&lt;array&gt;</code>类似。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;list&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/list&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;set&gt;</code>：定义<code>Set</code>类型的值。
其用法与<code>&lt;array&gt;</code>类似。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;set&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/set&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;map&gt;</code>：定义<code>Map</code>类型的值。</p>
<ul>
<li>其元素使用<code>&lt;entry&gt;</code>标签定义。并且元素的<code>key</code>使用<code>key</code>属性定义，元素的<code>value</code>使用<code>value</code>属性定义。</li>
<li><code>key</code>和<code>value</code>属性的值要和<code>Map</code>的类型对应。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;map&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span> <span class="na">value=</span><span class="s">&#34;...&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span> <span class="na">value=</span><span class="s">&#34;...&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span> <span class="na">value=</span><span class="s">&#34;...&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/map&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;props&gt;</code>：定义<code>Properties</code>的值。</p>
<p>其元素使用<code>&lt;prop&gt;</code>标签定义。<code>key</code>使用<code>key</code>属性定义，<code>value</code>在标签中定义。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;props&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/props&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>注意：</p>
<ul>
<li>List的底层也是通过数组实现的，所以<code>&lt;list&gt;</code>和<code>&lt;array&gt;</code>标签是可以混用。</li>
<li>集合中要添加引用类型，只需要把<code>&lt;value&gt;</code>标签改成<code>&lt;ref&gt;</code>标签。</li>
</ul>
</blockquote>
<h3 id="构造器注入constructor-arg-标签" data-numberify>构造器注入（constructor-arg 标签）<a class="anchor ms-1" href="#构造器注入constructor-arg-标签"></a></h3>
<p>构造器注入是指Spring通过Bean的实例类中，带参的构造方法将其他Bean进行注入。</p>
<h4 id="注入引用数据类型-1" data-numberify>注入引用数据类型<a class="anchor ms-1" href="#注入引用数据类型-1"></a></h4>
<p>在<code>UserServices</code>中删除Setter方法（此处删除Setter方法是为了证明使用的是构造器注入而非Setter注入）并添加带参的构造方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserServiceImpl</span><span class="o">(</span><span class="n">UserDao</span> <span class="n">userDao</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userDao</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&#34;userDao&#34;</span> <span class="na">ref=</span><span class="s">&#34;userDao&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p><code>&lt;constructor-arg&gt;</code>中<code>name</code>和<code>ref</code>属性的含义与<code>&lt;property&gt;</code>的含义类似。只不过<code>name</code>属性指的是Bean实例类型中构造方法的参数名（名称必须要一致）。</p>
<p>成功运行<code>ServiceBeanTest</code>说明注入成功。</p>
<p>如果要注入多个类型数据，则在构造方法中加入多个参数并在Bean中配置多个<code>&lt;constructor-arg&gt;</code>即可。</p>
<h4 id="注入简单数据类型-1" data-numberify>注入简单数据类型<a class="anchor ms-1" href="#注入简单数据类型-1"></a></h4>
<p>在<code>UserDao</code>中删除Setter方法，并为其添加带参的构造方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span><span class="o">,</span> <span class="n">InitializingBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserDaoImpl</span><span class="o">(</span><span class="n">String</span> <span class="n">databaseName</span><span class="o">,</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">databaseName</span> <span class="o">=</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">connectionNum</span> <span class="o">=</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&#34;databaseName&#34;</span> <span class="na">value=</span><span class="s">&#34;mysql&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&#34;connectionNum&#34;</span> <span class="na">value=</span><span class="s">&#34;10&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>成功运行<code>ServiceBeanTest</code>说明注入成功。</p>
<h4 id="集合注入-1" data-numberify>集合注入<a class="anchor ms-1" href="#集合注入-1"></a></h4>
<p>构造器注入集合数据类型的方式与Setter注入集合数据类型的方式类似。</p>
<p>只不构造器注入要定义相应的带参方法，并且将<code>&lt;property&gt;</code>标签改为<code>&lt;constructor-arg&gt;</code>。</p>
<h3 id="自动装配bean-标签的-autowire-属性" data-numberify>自动装配（bean 标签的 autowire 属性）<a class="anchor ms-1" href="#自动装配bean-标签的-autowire-属性"></a></h3>
<p>自动装配只适用于引用类型依赖注入，不能对简单类型进行操作。</p>
<p>自动装配的方式有：</p>
<ul>
<li>按类型（常用）</li>
<li>按名称</li>
<li>按构造方法（的参数）</li>
</ul>
<h4 id="按类型自动装配" data-numberify>按类型自动装配<a class="anchor ms-1" href="#按类型自动装配"></a></h4>
<p>为<code>UserService</code>中的属性（如<code>userDao</code>）提供Setter方法。接着在Spring中为<code>UserService</code>删除其<code>&lt;bean&gt;</code>标签下的所有<code>&lt;proerty&gt;</code>或<code>&lt;constructor-arg&gt;</code>。然后给<code>&lt;bean&gt;</code>添加<code>autowire=&quot;byType&quot;</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">autowire=</span><span class="s">&#34;byType&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注意：</p>
<ul>
<li>类中对应属性的Setter方法不能省略。</li>
<li>被注入的对象必须要被Spring的IOC容器管理。</li>
<li>按照类型自动装配如果Spring在IOC中找到多个类型相同的Bean则会报<code>NoUniqueBeanDefinitionException</code>错误。</li>
</ul>
</blockquote>
<h4 id="按名称自动装配" data-numberify>按名称自动装配<a class="anchor ms-1" href="#按名称自动装配"></a></h4>
<p>一个类型在IOC中有多个对象，还想要注入成功，这个时候就需要按照名称注入。</p>
<p>修改Spring配置文件（添加<code>autowire=&quot;byName&quot;</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">autowire=</span><span class="s">&#34;byName&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注意：</p>
<ul>
<li>按名称自动装配是根据Setter方法的名称在IOC容器中寻找名称对应的Bean（Bean的<code>id</code>或<code>name</code>）。如<code>setUserDao()</code>则需要寻找名称为<code>userDao</code>的Bean。</li>
<li>如果按照名称找不到对应的Bean，则注入<code>null</code>（不会报错！）。</li>
<li>按名称自动装配中，实例类成员变量名与配置耦合，不推荐使用。</li>
</ul>
</blockquote>
<h2 id="配置文件管理第三方-beanproperties-文件加载" data-numberify>配置文件管理第三方 Bean（properties 文件加载）<a class="anchor ms-1" href="#配置文件管理第三方-beanproperties-文件加载"></a></h2>
<h3 id="数据源对象管理dao层" data-numberify>数据源对象管理（DAO层）<a class="anchor ms-1" href="#数据源对象管理dao层"></a></h3>
<p>以Druid为例：</p>
<ul>
<li>
<p><code>pom.xml</code>依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Spring Framework--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--MySQL JDBC--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>8.0.29<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Druid--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>1.2.11<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>JDBC配置（<code>jdbc.properties</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">jdbc.driver</span><span class="o">=</span><span class="s">com.mysql.jdbc.Driver</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.url</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:33061/spring_db</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.username</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.password</span><span class="o">=</span><span class="s">n546,Lin0</span>
</span></span></code></pre></div></li>
<li>
<p>Spring配置（<code>applicationContext.xml</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--需要开启context命名空间--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:context=</span><span class="s">&#34;http://www.springframework.org/schema/context&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--加载jdbc配置文件--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;context:property-placeholder</span> <span class="na">location=</span><span class="s">&#34;classpath*:jdbc.properties&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Druid Bean--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;com.alibaba.druid.pool.DruidDataSource&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driverClassName&#34;</span> <span class="na">value=</span><span class="s">&#34;${jdbc.driver}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;${jdbc.url}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;${jdbc.username}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;${jdbc.password}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>编写<code>App.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.alibaba.druid.pool.DruidDataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">DruidDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">DruidDataSource</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果终端成功输出<code>dataSource</code>，说明配置成功。</p>
</li>
</ul>
<hr>
<h1 id="注解开发" data-numberify>注解开发<a class="anchor ms-1" href="#注解开发"></a></h1>
<p>Spring对注解支持的版本历程:</p>
<ul>
<li>2.0版开始支持注解</li>
<li>2.5版注解功能趋于完善</li>
<li>3.0版支持纯注解开发</li>
</ul>
<p>基础配置：</p>
<ol>
<li>创建Maven项目。</li>
<li>添加Spring Framework和Junit的依赖jar包。</li>
<li>添加业务层、数据层类：
<ul>
<li><code>User.java</code>: 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>User.java</code>。</li>
<li>DAO(仅测试，无需查询数据库): 同<a href="/docs/spring/springframework/#setter-%e6%b3%a8%e5%85%a5property-%e6%a0%87%e7%ad%be">Setter 注入</a>中的DAO（<code>UserDao</code>）。</li>
<li>Service: 同<a href="/docs/spring/springframework/#setter-%e6%b3%a8%e5%85%a5property-%e6%a0%87%e7%ad%be">Setter 注入</a>中的Service（<code>UserService</code>）。</li>
</ul>
</li>
</ol>
<h2 id="spring-配置文件包扫描" data-numberify>Spring 配置文件包扫描<a class="anchor ms-1" href="#spring-配置文件包扫描"></a></h2>
<p>为了能够获取到使用注解定义的Bean，需要在Spring配置文件中使用包扫描来识别出指定包下的所有Bean。</p>
<p>创建Spring配置文件。在Spring配置文件中加入包扫描：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xmlns:context=</span><span class="s">&#34;http://www.springframework.org/schema/context&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&#34;com.linner&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注意：</p>
<p>使用<code>&lt;context:component-scan&gt;</code>包扫描，需要在<code>&lt;beans&gt;</code>标签中加入属性：</p>
<pre tabindex="0"><code>xmlns:context=&#34;http://www.springframework.org/schema/context&#34;
</code></pre><p>接着在<code>&lt;context:component-scan&gt;</code>的<code>xsi:schemaLocation</code>属性中加入值：</p>
<pre tabindex="0"><code>http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
</code></pre></blockquote>
<p><code>&lt;context:component-scan&gt;</code>：</p>
<ul>
<li>
<p><code>component</code>：组件，Spring将管理的Bean视作自己的一个组件。</p>
</li>
<li>
<p><code>scan</code>：扫描。</p>
</li>
<li>
<p><code>base-package</code>：该属性指定Spring框架扫描的包路径，它会扫描指定包及其子包中的所有类上的注解。</p>
<ul>
<li>包路径越精确，如：<code>com.linner.dao.impl</code>，扫描的范围越小速度越快。</li>
<li>包路径越广泛，如：<code>com.linner</code>，扫描的范围越大速度越慢。</li>
</ul>
<blockquote>
<p>一般扫描到项目的组织名称即Maven的<code>&lt;groupId&gt;</code>下（如：<code>com.linner</code>）即可。
包扫描不仅能扫描当前包，还能扫描当前包下的子包。</p>
</blockquote>
</li>
</ul>
<h2 id="创建-bean-对象component" data-numberify>创建 Bean 对象（@Component）<a class="anchor ms-1" href="#创建-bean-对象component"></a></h2>
<p>在<code>UserDao</code>中添加<code>@Component</code>注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>编写新的测试类<code>UserDaoTest</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>@Component</code>可以传递一个<code>String</code>类型的值。用于制定Bean的名称。</p>
</li>
<li>
<p><code>@Component</code>可以直接使用而不指定名称。即，使用按类型获取Bean。但必须保证该类型在IOC中有且仅有一个Bean。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">UserDao</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>@Component</code>注解如果不起名称，会有一个默认值，就是将<u>当前类名首字母转为小写后的值</u>。所以也可以按照名称获取。</p>
</li>
<li>
<p><code>@Component</code>还有其他三个衍生注解。</p>
<ul>
<li><code>@Controller</code>：表现层</li>
<li><code>@Service</code>：业务层</li>
<li><code>@Repository</code>：数据层</li>
</ul>
<p>它们的作用和<code>@Component</code>是一样的，仅作为对表现层、业务层和数据层的类进行区分。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="纯注解开发配置类包扫描" data-numberify>纯注解开发（配置类、包扫描）<a class="anchor ms-1" href="#纯注解开发配置类包扫描"></a></h2>
<p>Spring3.0开启了纯注解开发模式，使用Java类替代配置文件。</p>
<p>删除Spring配置文件并创建配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>@Configuration</code>：设定该类为Spring配置类。</p>
</li>
<li>
<p><code>@ComponentScan</code>：包扫描，用来替换配置文件中的<code>&lt;context:component-scan&gt;</code>。在一个配置类中仅能使用一次。多个扫描路径使用数据格式，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.dao&#34;</span><span class="o">,</span> <span class="s">&#34;com.linner.service&#34;</span><span class="o">})</span>
</span></span></code></pre></div><blockquote>
<p>包扫描不仅能扫描当前包，还能扫描当前包下的子包</p>
</blockquote>
</li>
</ul>
<p>修改<code>UserDaoTest</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.config.SpringConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">SpringConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>使用Spring配置类，获取IOC容器应该使用<code>AnnotationConfigApplicationContext</code>对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;...</span> <span class="n">componentClasses</span><span class="o">)</span>
</span></span></code></pre></div><h2 id="作用范围scope" data-numberify>作用范围（@Scope）<a class="anchor ms-1" href="#作用范围scope"></a></h2>
<p>注解开发控制Bean的作用范围使用<code>@Scope</code>。它的值有两个：</p>
<ul>
<li>
<p><code>&quot;singleton&quot;</code>：默认值，将当前类设置为单例。</p>
</li>
<li>
<p><code>&quot;prototype&quot;</code>：将当前类设置为多例。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Scope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Scope</span><span class="o">(</span><span class="s">&#34;prototype&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="生命周期控制postconstruct-和-predestroy" data-numberify>生命周期控制（@PostConstruct 和 @PreDestroy）<a class="anchor ms-1" href="#生命周期控制postconstruct-和-predestroy"></a></h2>
<p>注解控制Bean生命周期使用：</p>
<ul>
<li><code>@PostConstruct</code>：初始化。</li>
<li><code>@PreDestroy</code>：销毁。</li>
</ul>
<p>给<code>UserDao</code>加入初始化和销毁方法（方法名任意）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.annotation.PostConstruct</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.annotation.PreDestroy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 初始化方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PostConstruct</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span> <span class="o">+</span> <span class="s">&#34;init...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 销毁方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PreDestroy</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span> <span class="o">+</span> <span class="s">&#34;destroy...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>与使用注解开发的情况一样，要想执行<code>destroy()</code>需要在程序执行的时候关闭容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ctx</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span></code></pre></div><p>或：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ctx</span><span class="o">.</span><span class="na">registerShutdownHook</span><span class="o">();</span>
</span></span></code></pre></div><p>注意:<code>@PostConstruct</code>和@<code>PreDestroy</code>注解如果找不到，需要导入下面的jar包。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;groupId&gt;</span>javax.annotation<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;artifactId&gt;</span>javax.annotation-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;version&gt;</span>1.3.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>原因是，从JDK9以后jdk中的<code>javax.annotation</code>包被移除了，这两个注解刚好就在这个包中。</p>
</blockquote>
<h2 id="依赖注入" data-numberify>依赖注入<a class="anchor ms-1" href="#依赖注入"></a></h2>
<p>给<code>UserService</code>配置Bean：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="按照类型注入" data-numberify>按照类型注入<a class="anchor ms-1" href="#按照类型注入"></a></h3>
<p>注解开发按照类型注入使用<code>@Autowired</code>注解。</p>
<p>给<code>UserService</code>注入<code>UserDao</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><code>@Autowired</code>可以在实例类的成员变量上使用，也可以在Setter方法上使用，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserDao</span><span class="o">(</span><span class="n">UserDao</span> <span class="n">userDao</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userDao</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在实例类的成员变量上使用<code>@Autowired</code>，即使将Setter方法注释掉依然可以注入成功。因为自动装配基于反射设计创建对象并通过暴力反射为属性进行设值（即使是私有属性也能设值）。</p>
<p>使用<code>@Autowired</code>需要保证该类型在IOC容器中有且仅有一个同类型的Bean。
如果IOC容器中有对个同类型的Bean。那么<code>@Autowired</code>就会按照变量名和Bean的名称进行匹配。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Repository</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span> <span class="cm">/*...*/</span> <span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>也能注入成功。</p>
<p>如果有多个同类型Bean，并且<code>@Autowired</code>名称匹配不上，那么会报<code>NoUniqueBeanDefinitionException</code>错误。</p>
</blockquote>
<p>使用<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>UserServiceTest</code>，成功执行说明配置成功。</p>
<h3 id="按照名称注入" data-numberify>按照名称注入<a class="anchor ms-1" href="#按照名称注入"></a></h3>
<p>注解开发名称注入使用<code>@Qualifier</code>注解来完成。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Qualifier</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在<code>@Qualifier</code>中指定Bean的名称。并且，<code>@Qualifier</code>必须和<code>@Autowired</code>一起使用才能起到按照名称注入的效果。</p>
<blockquote>
<p>经过测试单独使用<code>@Qualifier</code>（不加<code>@Autowired</code>）的效果和按照类型注入的效果一样（可能会有其他细微的区别）。</p>
</blockquote>
<h3 id="注入简单数据类型-2" data-numberify>注入简单数据类型<a class="anchor ms-1" href="#注入简单数据类型-2"></a></h3>
<p>注解开发注入简单类型数据使用<code>@Value</code>注解。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;mysql&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;10&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p><code>@Value</code>中的值使用<code>String</code>类型。如果要注入的是其他类型数据，需要按照其类型数据的格式编写。</p>
<h4 id="注解读取-properties-配置文件" data-numberify>注解读取 properties 配置文件<a class="anchor ms-1" href="#注解读取-properties-配置文件"></a></h4>
<p>使用<code>@Value</code>的意义之一在于：读取properties配置文件的信息。</p>
<p>在<code>resource</code>目录下新建<code>jdbc.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">databaseName</span><span class="o">=</span><span class="s">mysql</span>
</span></span><span class="line"><span class="cl"><span class="na">connectionNum</span><span class="o">=</span><span class="s">10</span>
</span></span></code></pre></div><p>在配置类上添加<code>@PropertySource</code>注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.PropertySource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">(</span><span class="s">&#34;jdbc.properties&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>修改<code>UserDao</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${databaseName}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${connectionNum}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p>读取多个配置文件，使用数组形式给<code>@PropertySource</code>传递字符串数组。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">({</span><span class="s">&#34;jdbc.properties&#34;</span><span class="o">,</span> <span class="s">&#34;xxx.properties&#34;</span><span class="o">})</span>
</span></span></code></pre></div></li>
<li>
<p><code>@PropertySource</code>注解属性中不支持使用通配符<code>*</code>，运行会报错。</p>
</li>
<li>
<p><code>@PropertySource</code>注解属性中可以加入<code>classpath:</code>，代表从当前项目的根路径找文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">({</span><span class="s">&#34;classpath:jdbc.properties&#34;</span><span class="o">})</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="注解管理第三方-bean" data-numberify>注解管理第三方 Bean<a class="anchor ms-1" href="#注解管理第三方-bean"></a></h2>
<p>基础配置：</p>
<ul>
<li>
<p><code>User.java</code>: 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>User.java</code>。</p>
</li>
<li>
<p><code>UserDao</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Select</span><span class="o">(</span><span class="s">&#34;SELECT * FROM user_tb&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Select</span><span class="o">((</span><span class="s">&#34;SELECT * FROM user_tb WHERE id = #{id}&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Delete</span><span class="o">(</span><span class="s">&#34;DELETE FROM user_tb WHERE id = #{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Insert</span><span class="o">(</span><span class="s">&#34;INSERT INTO user_tb(username, password) VALUES (#{username}, #{password})&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Update</span><span class="o">(</span><span class="s">&#34;UPDATE user_tb SET username = #{username}, password = #{password} WHERE id = #{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>UserService</code>：</p>
<p><code>UserService</code>接口同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>UserService.java</code>。</p>
<p><code>UserService</code>实现类<code>UserServiceImpl.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service.impl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">userDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="整合-mybatis" data-numberify>整合 Mybatis<a class="anchor ms-1" href="#整合-mybatis"></a></h3>
<ul>
<li>
<p><code>pom.xml</code>依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--Spring Framework--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MySQL JDBC--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>8.0.29<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Druid--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.2.11<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MyBatis--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.5.10<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Spring JDBC--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MyBatis Spring 整合包--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.3.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Junit 单元测试--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>4.13<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>建立User表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="o">`</span><span class="n">user_tb</span><span class="o">`</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">`</span><span class="n">user_tb</span><span class="o">`</span><span class="w">  </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="nb">int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="w"> </span><span class="k">COMMENT</span><span class="w"> </span><span class="s1">&#39;用户id&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">`</span><span class="n">username</span><span class="o">`</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">COMMENT</span><span class="w"> </span><span class="s1">&#39;用户名&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">`</span><span class="n">password</span><span class="o">`</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">COMMENT</span><span class="w"> </span><span class="s1">&#39;密码&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="nb">CHARACTER</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">utf8</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>JDBC配置文件<code>jdbc.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">jdbc.driver</span><span class="o">=</span><span class="s">com.mysql.cj.jdbc.Driver</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.url</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:3306/spring_db?useSSL=false&amp;useServerPrepStmts=true</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.username</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.password</span><span class="o">=</span><span class="s">root</span>
</span></span></code></pre></div></li>
<li>
<p>JDBC配置类<code>JdbcConfig.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.alibaba.druid.pool.DruidDataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JdbcConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 驱动信息：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.driver}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">driver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.url}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">url</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.username}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.password}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 获取DataSource对象
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">dataSource</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">DruidDataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DruidDataSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置驱动信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ds</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">driver</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">url</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>@Bean</code>：用于方法上，根据返回值类型自动产生Bean，并且方法的参数会按照类型自动装配。</li>
</ul>
</li>
<li>
<p>Mybatis配置类<code>MybatisConfig.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.mybatis.spring.SqlSessionFactoryBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.mybatis.spring.mapper.MapperScannerConfigurer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MybatisConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SqlSessionFactoryBean</span> <span class="nf">sqlSessionFactory</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SqlSessionFactoryBean</span> <span class="n">ssfb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置模型类的别名扫描
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ssfb</span><span class="o">.</span><span class="na">setTypeAliasesPackage</span><span class="o">(</span><span class="s">&#34;com.linner.domain&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置数据源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ssfb</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ssfb</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">    * 获取MapperScannerConfigurer对象
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MapperScannerConfigurer</span> <span class="nf">mapperScannerConfigurer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">MapperScannerConfigurer</span> <span class="n">msc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapperScannerConfigurer</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">msc</span><span class="o">.</span><span class="na">setBasePackage</span><span class="o">(</span><span class="s">&#34;com.linner.dao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">msc</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>SqlSessionFactoryBean</code>：用于封装<code>SqlSessionFactory</code>需要的环境信息（原先的信息是在Mybatis配置文件中定义，如今可以在Java中用代码定义）。用于产生<code>SqlSessionFactory</code>对象。
<ul>
<li><code>setTypeAliasesPackage()</code>：设置模型类的别名扫描</li>
<li><code>setDataSource()</code>：设置<code>DataSource</code>。这里设置的<code>DataSource</code>通过方法的参数和<code>@Bean</code>注解实现了自动装配。并且自动装配的对像是Druid的<code>DataSource</code>。</li>
</ul>
</li>
<li><code>MapperScannerConfigurer</code>：用于加载Dao接口，创建代理对象保存到IOC容器中。此处设置的是<code>dao</code>包下的所有接口。这些接口都会被Mybatis创建成对象并且作为Bean保存在IOC容器中。即，使用<code>ctx.getBean(UserDao.class)</code>能获取到<code>UserDao</code>。</li>
</ul>
</li>
<li>
<p>Spring配置类<code>SpringConfig.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">(</span><span class="s">&#34;classpath:jdbc.properties&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Import</span><span class="o">({</span><span class="n">JdbcConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">MybatisConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>@Import</code>：用于引入其他配置类。如果要引入多个配置类则需要使用数组形式。</li>
</ul>
</li>
<li>
<p>测试类<code>UserServiceTest</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.config.SpringConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">SpringConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">User</span> <span class="n">user</span> <span class="o">:</span> <span class="n">users</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;张三&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">21</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;张三&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="整合-junit" data-numberify>整合 Junit<a class="anchor ms-1" href="#整合-junit"></a></h3>
<ul>
<li>
<p>引入Spring与测试有关的整合包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--Spring 测试整合包--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>修改测试类<code>UserServiceTest</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 设置类运行器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 设置Spring环境对应的配置
</span></span></span><span class="line"><span class="cl"><span class="c1">// 加载配置类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="o">{</span><span class="n">SpringConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 加载配置文件
</span></span></span><span class="line"><span class="cl"><span class="c1">//@ContextConfiguration(locations={&#34;classpath:applicationContext.xml&#34;})
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 自动装配UserService，删除static静态代码块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="aop" data-numberify>AOP<a class="anchor ms-1" href="#aop"></a></h2>
<h3 id="aop-介绍" data-numberify>AOP 介绍<a class="anchor ms-1" href="#aop-介绍"></a></h3>
<p>一般常用的编程思想是OOP（面向对象编程，Object Oriented Programming）。</p>
<p>而AOP（面向切面编程，Aspect Oriented Programming），是一种编程范式，指导开发者如何组织程序结构。</p>
<p>编程思想主要的内容就是指导程序员该如何编写程序，所以AOP和OOP是两种不同的编程范式。</p>
<p>AOP的作用是在不改变原始设计的基础上为其进行功能增强。类似于Filter代理模式。</p>
<p>AOP术语：</p>
<ul>
<li>
<p>连接点（JoinPoint）：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等。</p>
<p>在SpringAOP中，理解为方法的执行。</p>
<p>例如要对项目中<code>UserDao</code>的功能在不进行任何修改的前提下实现增强。那么<code>UserDao</code>中要增强的方法即为<u>连接点</u>。</p>
</li>
<li>
<p>切入点（Pointcut）：匹配连接点的式子。</p>
<p>在SpringAOP中，一个切入点可以描述一个具体方法，也可也匹配多个方法。</p>
<blockquote>
<p>连接点范围要比切入点范围大，是切入点的方法也一定是连接点，但是是连接点的方法就不一定要被增强，所以可能不是切入点。</p>
</blockquote>
</li>
<li>
<p>通知（Advice）：在切入点处执行的操作，也就是共性功能。</p>
<p>在SpringAOP中，功能最终以方法的形式呈现。</p>
</li>
<li>
<p>通知类：定义通知的类。</p>
</li>
<li>
<p>切面（Aspect）：描述通知与切入点的对应关系。</p>
<p>通知是要增强的内容，会有多个；切入点是需要被增强的方法，也会有多个。通知和切入点的关系通过切面来描述。</p>
</li>
<li>
<p>目标对象（Target）：也叫原始对象。原始功能去掉共性功能对应的类产生的对象。即，配置AOP之前原设计的对象（要增强的对象）。</p>
</li>
<li>
<p>代理（Proxy）：通过通知类把目标对象增强后产生的对象。</p>
<p>目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现。</p>
</li>
</ul>
<h3 id="注解开发-aop" data-numberify>注解开发 AOP<a class="anchor ms-1" href="#注解开发-aop"></a></h3>
<p>基础配置：使用<a href="/docs/spring/springframework/#%e6%95%b4%e5%90%88-junit">整合 Junit</a>中的配置。</p>
<ul>
<li>
<p><code>pom.xml</code>导入坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.aspectj<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>aspectjweaver<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.9.4<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><ul>
<li><code>spring-context</code>中已经包含了<code>spring-aop</code>，所以不需要再单独导入<code>spring-aop</code>。</li>
<li>AspectJ是AOP思想的一个具体实现，AspectJ比起Spring的AOP实现来说，更加好用。</li>
</ul>
</li>
<li>
<p>创建通知类<code>UserDaoAdvice</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.aop</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.dao.UserDao.*(..))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Before</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Before...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>@Aspect</code>：设置当前类为AOP切面类。</p>
</li>
<li>
<p><code>@Pointcut</code>：设置切入点方法。切入点定义需要一个不具有实际意义的方法（无参、无返回值、空方法体）。即<code>UserDaoAdvice</code>中的<code>pt()</code>。</p>
<p><code>@Pointcut</code>中的<code>execution()</code>用来定义切入点。</p>
</li>
<li>
<p><code>@Before</code>：设置切面。即设置当前通知方法在原始切入点方法前运行。</p>
<p>切入点定义作为<code>@Before</code>的参数。</p>
</li>
</ul>
</li>
<li>
<p>在<code>SpringConfig</code>加入<code>@EnableAspectJAutoProxy</code>注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableAspectJAutoProxy</span>
</span></span><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">(</span><span class="s">&#34;classpath:jdbc.properties&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Import</span><span class="o">({</span><span class="n">JdbcConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">MybatisConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="aop-切入点表达式" data-numberify>AOP 切入点表达式<a class="anchor ms-1" href="#aop-切入点表达式"></a></h3>
<p>切入点表达式是对要进行增强的方法的描述方式。切入点表达式的一般形式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="err">动作关键字</span><span class="o">(</span><span class="err">访问修饰符</span> <span class="err">返回值类型</span> <span class="err">包名</span><span class="o">.</span><span class="err">类名</span><span class="o">.</span><span class="err">方法名</span><span class="o">(</span><span class="err">参数类型列表</span><span class="o">)</span> <span class="err">异常名</span><span class="o">)</span>
</span></span></code></pre></div><ul>
<li>由于通常都是对<code>public</code>方法进行定义，而<code>public</code>是默认的，所以可以省略。</li>
<li>切入点表达式定义的类可以是接口，也可以是其实现类。</li>
<li>AOP是在Spring中运行的，很显然切入点表达式定义的类必须存在IOC容器中。</li>
<li>如果匹配无参方法，直接省略参数。</li>
</ul>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">execution</span><span class="o">(</span><span class="kt">void</span> <span class="n">com</span><span class="o">.</span><span class="na">linner</span><span class="o">.</span><span class="na">dao</span><span class="o">.</span><span class="na">UserDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="kt">int</span><span class="o">))</span>
</span></span></code></pre></div><h4 id="切入点表达式通配符" data-numberify>切入点表达式通配符<a class="anchor ms-1" href="#切入点表达式通配符"></a></h4>
<ul>
<li>
<p><code>*</code>：匹配任意单个独立的任意符号。</p>
<p>可以独立出现，匹配任意返回值类型、单个包名（不能用做匹配完整包名）、类名、方法名或单个参数类型（即匹配单个单词）；
也可以作为前缀或者后缀的匹配符出现。</p>
<p>如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">execution</span><span class="err">（</span><span class="o">*</span> <span class="n">com</span><span class="o">.</span><span class="na">linner</span><span class="o">.*.</span><span class="na">UserService</span><span class="o">.</span><span class="na">find</span><span class="o">*(*))</span>
</span></span></code></pre></div><p>匹配<code>com.linner</code>包下的任意包中的<code>UserService</code>类或接口中，所有以<code>find</code>开头的、带有一个参数的、任意返回值类型的方法。</p>
</li>
<li>
<p><code>..</code>：匹配多个连续的任意符号。</p>
<p>可以独立出现，常用于简化包名与参数的书写。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">execution</span><span class="err">（</span><span class="o">*</span> <span class="n">com</span><span class="o">..</span><span class="na">UserService</span><span class="o">.</span><span class="na">findById</span><span class="o">(..))</span>
</span></span></code></pre></div><p>匹配<code>com</code>包下的任意包中的<code>UserService</code>类或接口中所有名称为<code>findById</code>的（参数的数量、类型任意，返回值任意）方法。</p>
</li>
</ul>
<ul>
<li>
<p><code>+</code>：专用于匹配子类类型。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">execution</span><span class="o">(*</span> <span class="o">*..*</span><span class="n">Service</span><span class="o">+.*(..))</span>
</span></span></code></pre></div><p>这个使用率较低。<code>*Service+</code>，表示所有以Service结尾的接口的子类。</p>
</li>
</ul>
<p>书写技巧（所有代码按照标准规范开发，否则以下技巧全部失效）：</p>
<ul>
<li>描述切入点通常<u>描述接口</u>，而不描述实现类，如果描述到实现类，就出现耦合了。</li>
<li>访问控制修饰符针对接口开发均采用<code>public</code>描述（简化书写）。</li>
<li>返回值类型对于<u>增删改方法使用精准类型</u>加速匹配，对于查询类使用<code>*</code>通配快速描述。</li>
<li>包名书写尽量不使用<code>..</code>匹配，效率过低，常用<code>*</code>做单个包描述匹配，或精准匹配。</li>
<li>接口名/类名书写名称与模块相关的采用<code>*</code>匹配，例如<code>UserService</code>书写成<code>*Service</code>，绑定业务层接口名。</li>
<li>方法名书写以动词进行精准匹配，名词采用<code>*</code>匹配，例如<code>getById</code>书写成<code>getBy*</code>，<code>selectAll</code>书写成<code>selectAll</code>。</li>
<li>参数规则较为复杂，根据业务方法灵活调整。</li>
<li>通常不使用异常作为匹配规则。</li>
</ul>
<h4 id="通知类型" data-numberify>通知类型<a class="anchor ms-1" href="#通知类型"></a></h4>
<p>AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置。</p>
<p>AspactJ提供了5种通知类型：</p>
<ul>
<li>前置通知</li>
<li>后置通知</li>
<li>环绕通知</li>
<li>返回后通知</li>
<li>抛出异常后通知</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 代码1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 代码2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 原始的业务操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 代码3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 代码4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 代码5
</span></span></span></code></pre></div><p>其中：</p>
<ul>
<li>前置通知：代码1和代码2</li>
<li>返回后通知：代码3</li>
<li>抛出异常后通知：代码4</li>
<li>后置通知:代码5</li>
<li>环绕通知：上述整个代码块</li>
</ul>
<p>通知方法的方法名称没有限制，只需在方法的上端使用注解定义即可。各通知类型的注解如下：</p>
<ul>
<li>前置通知：<code>@Before</code></li>
<li>后置通知：<code>@After</code></li>
<li>环绕通知：<code>@Around</code></li>
<li>返回后通知：<code>@AfterReturning</code></li>
<li>抛出异常后通知：<code>@AfterThrowing</code></li>
</ul>
<p>这些注解的使用方式都是一样的。在对应的方法上定义，并且传入切入点（函数形式）。如：<code>@Around(&quot;pt()&quot;)</code>。</p>
<h5 id="前置通知和后置通知的使用" data-numberify>前置通知和后置通知的使用<a class="anchor ms-1" href="#前置通知和后置通知的使用"></a></h5>
<p>前置通知和后置通知的使用方式一样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.dao.UserDao.*(..))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Before</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Before...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@After</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;After...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h5 id="环绕通知的使用" data-numberify>环绕通知的使用<a class="anchor ms-1" href="#环绕通知的使用"></a></h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.aspectj.lang.ProceedingJoinPoint</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.dao.UserDao.findById(int))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Around</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">around</span><span class="o">(</span><span class="n">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Before...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Object</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;After....&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>环绕通知必须传入一个<code>ProceedingJoinPoint</code>参数。使用<code>pjp.proceed()</code>才可以在环绕通知中掉用原始方法。并且<code>proceed()</code>可以获取到原始方法的返回值。</p>
<p>如果也想让代理后的方法返回跟原始方法一样的值。那么必须定义环绕方法的返回值类型，并且使用<code>proceed()</code>获取原始方法的返回值并返回。</p>
<p>环绕通知比较灵活，可以将其定义成其他类型的通知，并且可以做到其他通知做不到的事情。例如循环调用原始方法等。</p>
<p>环绕通知需要抛出异常是因为。原始方法有可能会出现异常，并且原始方法的异常并不确定。所以为了提高通用性，环绕通知默认抛出异常。</p>
<p>如果环绕方法定义的是<code>void</code>类型，并且原始方法有返回值。如果此时在环绕通知中没有返回值，那么在掉用代理后的方法后，返回的是<code>null</code>。</p>
<h5 id="返回后通知的使用" data-numberify>返回后通知的使用<a class="anchor ms-1" href="#返回后通知的使用"></a></h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.dao.UserDao.findById(int))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@AfterReturning</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterReturning</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;After Returning...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>注意：返回后通知是需要在原始方法正常执行后才会被执行，如果原始方法执行的过程中出现了异常，那么返回后通知不会被执行。</p>
<p>后置通知是不管原始方法有没有抛出异常都会被执行。</p>
</blockquote>
<h5 id="异常后通知" data-numberify>异常后通知<a class="anchor ms-1" href="#异常后通知"></a></h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.service.UserService.findAll())&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@AfterThrowing</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterThrowing</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;After Throwing...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在<code>UserServiceImpl.findAll()</code>中模拟错误即可触发。例如使用<code>int a = 1/0;</code>模拟错误。</p>
<blockquote>
<p>注意：异常后通知是需要原始方法抛出异常。如果没有抛异常，异常后通知将不会被执行。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Ajax 前后端交互</title>
      <link>/docs/spring/java-web/ajax-interaction/</link>
      <pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/ajax-interaction/</guid>
      <description><![CDATA[Ajax AJAX (Asynchronous JavaScript And XML)，其含义为异步的 JavaScript 和 XML。其中 JavaScript 表明该技术和前端相关；XML 是指以此进行数据交换。 AJAX 作用有以下两方面： 与服务器进行数据交]]></description>
      <content:encoded><![CDATA[<h1 id="ajax" data-numberify>Ajax<a class="anchor ms-1" href="#ajax"></a></h1>
<p><code>AJAX</code> (Asynchronous JavaScript And XML)，其含义为异步的 JavaScript 和 XML。其中 <code>JavaScript</code> 表明该技术和前端相关；<code>XML</code> 是指以此进行数据交换。</p>
<p>AJAX 作用有以下两方面：</p>
<ol>
<li><strong>与服务器进行数据交换</strong>：通过AJAX可以给服务器发送请求，服务器将数据直接响应回给浏览器。</li>
<li><strong>异步交互</strong>：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术，如：搜索联想、用户名是否可用校验等等。
<ul>
<li>同步：浏览器页面在发送请求给服务器，在服务器处理请求的过程中，浏览器页面不能做其他的操作。只能等到服务器响应结束后，浏览器页面才能继续做其他的操作。</li>
<li>异步：浏览器页面发送请求给服务器，在服务器处理请求的过程中，浏览器页面还可以做其他的操作。</li>
</ul>
</li>
</ol>
<h2 id="ajax-简单使用" data-numberify>Ajax 简单使用<a class="anchor ms-1" href="#ajax-简单使用"></a></h2>
<p>服务端：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.servlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/ajaxServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AjaxServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 返回给客户端响应数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="s">&#34;Hello Ajax!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>客户端：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">//1. 创建核心对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">let</span> <span class="n">xhttp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">(</span><span class="n">window</span><span class="o">.</span><span class="na">XMLHttpRequest</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">xhttp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XMLHttpRequest</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// code for IE6, IE5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">xhttp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActiveXObject</span><span class="o">(</span><span class="s">&#34;Microsoft.XMLHTTP&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//2. 发送请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">xhttp</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="s">&#34;GET&#34;</span><span class="o">,</span> <span class="s">&#34;http://localhost:8080/ajax-demo/ajaxServlet&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">xhttp</span><span class="o">.</span><span class="na">send</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//3. 获取响应
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">xhttp</span><span class="o">.</span><span class="na">onreadystatechange</span> <span class="o">=</span> <span class="n">function</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">readyState</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">==</span> <span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 处理从服务端发送过来的响应数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">alert</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">responseText</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">};</span>
</span></span></code></pre></div><hr>
<h1 id="axios" data-numberify>Axios<a class="anchor ms-1" href="#axios"></a></h1>
<p>Axios 是一个对原生的AJAX进行封装，简化书写的前端框架。</p>
<h2 id="使用-axios-进行交互" data-numberify>使用 Axios 进行交互<a class="anchor ms-1" href="#使用-axios-进行交互"></a></h2>
<p>Axios 的使用分为以下两步：</p>
<ul>
<li>
<p>引入 Axios 的 js 文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/axios.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>使用 Axios 发送请求，并获取响应结果：</p>
<ul>
<li>
<p>发送 GET 请求的基本形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;get&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 请求参数会传递给服务器，此处请求参数可以转义也可以不转义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">url</span><span class="o">:</span> <span class="s2">&#34;http://localhost:8080/axios-demo/demo?message=Hello%20World&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resp</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对响应数据进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">alert</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p>发送 POST 请求的基本形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;post&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">url</span><span class="o">:</span> <span class="s2">&#34;http://localhost:8080/axios-demo/demo&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="s2">&#34;message=Hello World&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resp</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nx">alert</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<p>其中：</p>
<ul>
<li>
<p><code>axios()</code> 是用来发送异步请求的，小括号中使用 js 对象传递请求相关的参数：</p>
<ul>
<li>
<p><code>method</code> 属性：用来设置请求方式的。</p>
<p>取值为 <code>get</code> 或者 <code>post</code>。</p>
</li>
<li>
<p><code>url</code> 属性：用来书写请求的资源路径。</p>
<p>如果是 <code>get</code> 请求，需要将请求参数拼接到路径的后面，格式为： <code>url?参数名=参数值&amp;参数名2=参数值2</code>。</p>
</li>
<li>
<p><code>data</code> 属性：作为请求体被发送的数据。</p>
<p>即，如果是 <code>post</code> 请求的话，数据需要作为 <code>data</code> 属性的值。</p>
</li>
</ul>
</li>
<li>
<p><code>then()</code> 需要传递一个匿名函数。</p>
<p><code>then()</code> 中传递的匿名函数称为回调函数，意思是该匿名函数在发送请求时不会被调用，而是在成功响应后调用的函数。</p>
<p>而该回调函数中的 <code>resp</code> 参数是对响应的数据进行封装的对象，通过 <code>resp.data</code> 可以获取到响应的数据。</p>
</li>
</ul>
<h2 id="请求方法别名" data-numberify>请求方法别名<a class="anchor ms-1" href="#请求方法别名"></a></h2>
<p>为了方便起见， Axios 已经为所有支持的请求方法提供了别名。如下：</p>
<ul>
<li>
<p><code>get</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span><span class="nx">config</span><span class="p">])</span>
</span></span></code></pre></div></li>
<li>
<p><code>delete</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span><span class="nx">config</span><span class="p">])</span>
</span></span></code></pre></div></li>
<li>
<p><code>head</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">head</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span><span class="nx">config</span><span class="p">])</span>
</span></span></code></pre></div></li>
<li>
<p><code>options</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span><span class="nx">config</span><span class="p">])</span>
</span></span></code></pre></div></li>
<li>
<p><code>post</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span><span class="nx">data</span><span class="p">[,</span><span class="nx">config</span><span class="p">])</span>
</span></span></code></pre></div></li>
<li>
<p><code>put</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span><span class="nx">data</span><span class="p">[,</span><span class="nx">config</span><span class="p">])</span>
</span></span></code></pre></div></li>
<li>
<p><code>patch</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">patch</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span><span class="nx">data</span><span class="p">[,</span><span class="nx">config</span><span class="p">])</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="this-作用域问题" data-numberify>this 作用域问题<a class="anchor ms-1" href="#this-作用域问题"></a></h3>
<p>使用请求方法别名和箭头函数可以解决this作用域问题，防止this指向错误：</p>
<ul>
<li>
<p>GET请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;http://localhost:8080/axios-demo/demo?message=Hello World&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">resp</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对响应数据进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">alert</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p>POST请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">axios</span><span class="o">.</span><span class="na">post</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;http://localhost:8080/axios-demo/demo&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message=Hello World&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">).</span><span class="na">then</span><span class="o">(</span><span class="n">resp</span> <span class="o">=&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对响应数据进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">alert</span><span class="o">(</span><span class="n">resp</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">})</span>
</span></span></code></pre></div></li>
</ul>
<h1 id="json" data-numberify>JSON<a class="anchor ms-1" href="#json"></a></h1>
<p>JSON（JavaScript Object Notation）是指 JavaScript 对象表示法。</p>
<p>JSON的优点：数据格式简单，所占的字节数少等。</p>
<h2 id="json-的格式" data-numberify>JSON 的格式<a class="anchor ms-1" href="#json-的格式"></a></h2>
<p><code>JSON</code> 本质就是一个字符串，但是该字符串内容是有一定的格式要求的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;key_1&#34;</span><span class="p">:</span> <span class="err">value_</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;key_2&#34;</span><span class="p">:</span> <span class="err">value_</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;key_3&#34;</span><span class="p">:</span> <span class="err">value_</span><span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="err">...,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;key_n&#34;</span><span class="p">:</span> <span class="err">value_n</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ul>
<li><code>JSON</code> 格式中的键要求必须使用双引号括起来。</li>
<li>Value 的数据类型分为如下：
<ul>
<li>数字（整数或浮点数）</li>
<li>字符串（使用双引号括起来）</li>
<li>逻辑值（<code>true</code>或者<code>false</code>）</li>
<li>数组（在方括号<code>{}</code>中）</li>
<li>对象（在花括号<code>[]</code>中）</li>
<li>null</li>
</ul>
</li>
</ul>
<p>在 js 中定义 json：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">变量名</span> <span class="o">=</span> <span class="sb">`{
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;key1&#34;:value1,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;key2&#34;:value2,
</span></span></span><span class="line"><span class="cl"><span class="sb">        ...
</span></span></span><span class="line"><span class="cl"><span class="sb">    }`</span><span class="p">;</span>
</span></span></code></pre></div><h2 id="在-js-中使用-josn" data-numberify>在 JS 中使用 JOSN<a class="anchor ms-1" href="#在-js-中使用-josn"></a></h2>
<p>JS 提供了一个对象 <code>JSON</code> ，该对象有如下两个方法：</p>
<ul>
<li>
<p><code>parse(str)</code>：将 JSON串转换为 js 对象。</p>
<p>使用方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">jsObject</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">jsonStr</span><span class="p">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>stringify(obj)</code>：将 js 对象转换为 JSON 串。</p>
<p>使用方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">jsonStr</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">jsObject</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="携带json发送异步请求" data-numberify>携带JSON发送异步请求<a class="anchor ms-1" href="#携带json发送异步请求"></a></h3>
<p>可以使用 <code>JSON.stringify()</code> 将js对象转换为 <code>JSON</code> 串，再将该 <code>JSON</code> 串作为 <code>axios</code> 的 <code>data</code> 属性值进行请求参数的提交。</p>
<p>但其实只需要将需要提交的参数封装成 js 对象，并将该 js 对象作为 <code>axios</code> 的 <code>data</code> 属性值。<code>axios</code> 会自动将 js 对象转换为 <code>JSON</code> 串进行提交。</p>
<blockquote>
<p>发送异步请求时，如果请求参数是 <code>JSON</code> 格式，那请求方式必须是 <code>POST</code>。因为 <code>JSON</code> 串需要放在请求体中。</p>
</blockquote>
<h2 id="fastjson" data-numberify>Fastjson<a class="anchor ms-1" href="#fastjson"></a></h2>
<p><code>Fastjson</code> 是阿里巴巴提供的一个Java语言编写的高性能功能完善的 <code>JSON</code> 库，是目前Java语言中最快的 <code>JSON</code> 库，可以实现 <code>Java</code> 对象和 <code>JSON</code> 字符串的相互转换。</p>
<p>依赖坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>fastjson<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.2.62<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>JOSN 和 Java对象的相互转换包含：</p>
<ul>
<li>
<p>请求数据（反序列化）：</p>
<p>JSON字符串转为Java对象。</p>
<p>将 json 转换为 Java 对象，只需要使用 <code>Fastjson</code> 提供的 <code>JSON</code> 类中的 <code>parseObject()</code> 静态方法即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="nf">toJSONString</span><span class="o">(</span><span class="n">Object</span> <span class="n">object</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>响应数据（序列化）：</p>
<p>Java对象转为JSON字符串。</p>
<p>将 Java 对象转换为 JSON 串，只需要使用 <code>Fastjson</code> 提供的 <code>JSON</code> 类中的 <code>toJSONString()</code> 静态方法即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">parseObject</span><span class="o">(</span><span class="n">String</span> <span class="n">jsonStr</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">clazz</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ul>
<p>Example：</p>
<ul>
<li>
<p>导入坐标。</p>
</li>
<li>
<p>编写<code>pojo</code>类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">pojo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;User{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, username=&#39;&#34;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, password=&#39;&#34;</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>编写<code>FastJsonDemo</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.servlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.alibaba.fastjson.JSON</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pojo.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FastJsonDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. Java对象转JSON字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;zhangsan&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">jsonString</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jsonString</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 输出：{&#34;id&#34;:1,&#34;password&#34;:&#34;123&#34;,&#34;username&#34;:&#34;zhangsan&#34;}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 将JSON字符串转为Java对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">User</span> <span class="n">u</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;{\&#34;id\&#34;:1,\&#34;password\&#34;:\&#34;123\&#34;,\&#34;username\&#34;:\&#34;zhangsan\&#34;}&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">u</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Filter 过滤器</title>
      <link>/docs/spring/java-web/filter/</link>
      <pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/filter/</guid>
      <description><![CDATA[Filter 概述 Filter 表示过滤器，是 JavaWeb 三大组件(Servlet、Filter、Listener)之一。 过滤器可以把对资源的请求拦截下来，从而实现一些特殊的]]></description>
      <content:encoded><![CDATA[<h1 id="filter-概述" data-numberify>Filter 概述<a class="anchor ms-1" href="#filter-概述"></a></h1>
<p>Filter 表示过滤器，是 JavaWeb 三大组件(Servlet、Filter、Listener)之一。</p>
<p>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能。设置 Filter 会在访问资源之前会先经过 Filter，将资源拦截，从而实现权限控制、统一编码处理、敏感字符处理等功能。</p>
<p>过滤器Filter是在请求进入容器后，但在进入Servlet之前进行预处理。</p>
<p>进行 <code>Filter</code> 开发分成以下三步实现：</p>
<ul>
<li>
<p>定义类，实现 Filter接口，并重写其所有方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">filter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebFilter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 拦截的路径，这里 &#34;/*&#34; 拦截了项目中所有资源请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@WebFilter</span><span class="o">(</span><span class="s">&#34;/*&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FilterDemo</span> <span class="kd">implements</span> <span class="n">Filter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Filter的初始化方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">FilterConfig</span> <span class="n">filterConfig</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Filter的操作方法，在init后执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">servletResponse</span><span class="o">,</span> <span class="n">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 销毁Filter执行的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>配置Filter拦截资源的路径：</p>
<p>在类上定义 <code>@WebFilter</code> 注解。</p>
<p>此处注解的 <code>value</code> 属性值 <code>/*</code> 表示拦截所有的资源。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">filter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// import ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 拦截的路径，这里 &#34;/*&#34; 拦截了项目中所有资源请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@WebFilter</span><span class="o">(</span><span class="s">&#34;/*&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FilterDemo</span> <span class="kd">implements</span> <span class="n">Filter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>doFilter()</code>方法中对拦截的资源进行处理，并选择是否放行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.filter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// import ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 拦截的路径，这里 &#34;/*&#34; 拦截了项目中所有资源请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@WebFilter</span><span class="o">(</span><span class="s">&#34;/*&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FilterDemo</span> <span class="kd">implements</span> <span class="n">Filter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">servletResponse</span><span class="o">,</span> <span class="n">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 放行前，对request数据进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 放行前response中没有数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 放行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">servletRequest</span><span class="o">,</span> <span class="n">servletResponse</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 调用该方法，会执行其它拦截器或访问路径中对应的Servlet或访问对应资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 如果该方法没有被调用，那么对应资源将不可被访问，且后续的其它拦截器都不会被执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 放行后，对response数据进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>项目依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;maven.compiler.source&gt;</span>8<span class="nt">&lt;/maven.compiler.source&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;maven.compiler.target&gt;</span>8<span class="nt">&lt;/maven.compiler.target&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>3.1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.maven<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>tomcat7-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;port&gt;</span>80<span class="nt">&lt;/port&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><blockquote>
<p>在<code>doFilter()</code>中，如果要使用<code>request</code>和<code>response</code>，可以将它们强转为对应的<code>HttpServletRequest</code>和<code>HttpServletResponse</code>对象来进行操作。</p>
</blockquote>
<hr>
<h1 id="filter-执行流程" data-numberify>Filter 执行流程<a class="anchor ms-1" href="#filter-执行流程"></a></h1>
<p>Filter 的执行流程如下：</p>
<ul>
<li>
<p>浏览器访问资源</p>
</li>
<li>
<p>资源被Filter拦截</p>
<p>Filter 执行放行前逻辑</p>
</li>
<li>
<p>判断是否放行</p>
<ul>
<li>
<p>放行：</p>
<p>可能会执行以下操作：</p>
<ul>
<li>如果有，则执行后续的Filter</li>
<li>如果资源没有被后续其它Filter拦截，那么访问对应资源</li>
</ul>
</li>
<li>
<p>不放行：</p>
<p>后续的其它 Filter 将不会被执行，资源也不可被访问</p>
</li>
</ul>
</li>
<li>
<p>Filter 执行放行后逻辑</p>
</li>
</ul>
<hr>
<h1 id="filter-拦截路径配置" data-numberify>Filter 拦截路径配置<a class="anchor ms-1" href="#filter-拦截路径配置"></a></h1>
<p>拦截路径表示 Filter 会对请求的哪些资源进行拦截，使用 <code>@WebFilter</code> 注解进行配置。</p>
<p>拦截路径有如下四种配置方式：</p>
<ol>
<li>拦截具体的资源：<code>/index.html</code>，只有访问<code>index.html</code>时才会被拦截</li>
<li>目录拦截：<code>/user/*</code>，访问<code>/user</code>下的所有资源，都会被拦截</li>
<li>后缀名拦截：<code>*.html</code>，访问后缀名为jsp的资源，都会被拦截</li>
<li>拦截所有：<code>/*</code>，访问项目下所有资源，都会被拦截</li>
</ol>
<hr>
<h1 id="过滤器链" data-numberify>过滤器链<a class="anchor ms-1" href="#过滤器链"></a></h1>
<p>过滤器链是指在一个Web应用，可以对同个拦截路径配置多个过滤器，这多个过滤器组成了过滤器链。</p>
<p>过滤器链基于函数回调，多个过滤器之间的优先级顺序以过滤器类名的自然顺序（A-Z 0-9）为规则进行排序。</p>
<p>例如，有<code>Filter1</code>和<code>Filter2</code>两个拦截路径相同的Filter：</p>
<ol>
<li>执行 <code>Filter1</code> 的放行前逻辑代码</li>
<li>执行 <code>Filter1</code> 的放行代码</li>
<li>执行 <code>Filter2</code> 的放行前逻辑代码</li>
<li>执行 <code>Filter2</code> 的放行代码</li>
<li>访问到资源</li>
<li>执行 <code>Filter2</code> 的放行后逻辑代码</li>
<li>执行 <code>Filter1</code> 的放行后逻辑代码</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>会话跟踪技术 Cookie 和 Session</title>
      <link>/docs/spring/java-web/cookie-session/</link>
      <pubDate>Fri, 23 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/cookie-session/</guid>
      <description><![CDATA[会话跟踪技术 会话是指一个终端用户与交互系统进行通讯的过程，例如从浏览器发出请求到服务端响应数据给前端这个过程即为一个会话。 会话跟踪指的是一种]]></description>
      <content:encoded><![CDATA[<h1 id="会话跟踪技术" data-numberify>会话跟踪技术<a class="anchor ms-1" href="#会话跟踪技术"></a></h1>
<p>会话是指一个终端用户与交互系统进行通讯的过程，例如从浏览器发出请求到服务端响应数据给前端这个过程即为一个会话。</p>
<p>会话跟踪指的是一种维护浏览器状态的方法。服务器会收到多个请求，这多个请求可能来自多个浏览器。服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。</p>
<p>浏览器和服务器不支持数据共享的原因：</p>
<ul>
<li>HTTP协议是无状态的，每次浏览器向服务器请求时，服务器都会将该请求视为新的请求。</li>
<li>HTTP协议设计成无状态的目的是让每次请求之间相互独立，互不影响。</li>
<li>请求与请求之间独立后，就无法实现多次请求之间的数据共享。</li>
</ul>
<p>实现会话跟踪技术的方式有：</p>
<ul>
<li>客户端会话跟踪技术：<code>Cookie</code>。
Cookie是存储在浏览器端。</li>
<li>服务端会话跟踪技术：<code>Session</code>。
Session是存储在服务器端。</li>
</ul>
<hr>
<h1 id="cookie" data-numberify>Cookie<a class="anchor ms-1" href="#cookie"></a></h1>
<p>Cookie是一种客户端会话技术，将数据保存到客户端，在以后的每次请求中都携带Cookie数据进行访问。</p>
<p>服务器将Cookie发送给浏览器，是通过在响应头中添加<code>Set-Cookie</code>键值对实现的，如<code>Set-Cookie: message=&quot;Hello Wrold&quot;</code>。在多个Cookie之间使用<code>;</code>分割。</p>
<p>浏览器在接收了服务器发送来的Cookie后，会将数据存储在浏览器的内存中。在接下来的每次请求中，浏览器都会将获取到的Cookie发送到服务器（同一次会话中或在Cookie存活时间内）。浏览器将Cookie发送到服务器，是通过在请求头中设置<code>Cookie</code>键值对实现的，如<code>Cookie: message=&quot;Hello Wrold&quot;</code>。同样的，在多个Cookie之间使用<code>;</code>分割。</p>
<ul>
<li>
<p>创建Cookie对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cookie</span><span class="o">(</span><span class="s">&#34;key&#34;</span><span class="o">,</span><span class="s">&#34;value&#34;</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>发送Cookie到客户端（使用Response对象）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>从客户端获取Cookie（使用Request对象）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">request</span><span class="o">.</span><span class="na">getCookies</span><span class="o">()</span>
</span></span></code></pre></div></li>
</ul>
<p><a href="https://linna-cy.github.io/Tomcat/#%E5%88%9B%E5%BB%BA-maven-web-%E9%A1%B9%E7%9B%AE" target="_blank" rel="noopener noreferrer">创建Maven web项目。<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<p>项目依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--servlet--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>3.1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;pluginManagement&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.maven<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>tomcat7-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/pluginManagement&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><h2 id="发送-cookie" data-numberify>发送 Cookie<a class="anchor ms-1" href="#发送-cookie"></a></h2>
<p>发送Cookie使用的是HttpServletResponse对象提供的<code>addCookie()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.cookie</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URLEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/cookieServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CookieServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 创建Cookie对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;Hello World&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;存储数据: &#34;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cookie</span><span class="o">(</span><span class="s">&#34;message&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置存活时间, 7天
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">cookie</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">7</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 发送Cookie, response
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在发送Cookie时，可以使用<code>setMaxAge()</code>方法设置Cookie存活的时间（单位：秒）。</p>
<p>如果要在Cookie中存储中文数据，需要将中文数据使用<code>URLEncoder.encode()</code>按照UTF-8（与前端页面的编码保持一致）编码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.cookie</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URLEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/cookieServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CookieServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 创建Cookie对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 存储中文
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;你好&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// URL编码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">value</span> <span class="o">=</span> <span class="n">URLEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// System.out.println(&#34;存储数据: &#34; + value);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cookie</span><span class="o">(</span><span class="s">&#34;message&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置存活时间, 7天
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">cookie</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">7</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 发送Cookie, response
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="获取-cookie" data-numberify>获取 Cookie<a class="anchor ms-1" href="#获取-cookie"></a></h2>
<p>从客户端获取Cookie使用的是HttpServletRequest对象提供的<code>getCookies()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">request</span><span class="o">.</span><span class="na">getCookies</span><span class="o">()</span>
</span></span></code></pre></div><p>它返回一个Cookie数组（Cookie[]）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.cookie</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.Cookie</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URLDecoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/cookieServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CookieServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取Cookie数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Cookie</span><span class="o">[]</span> <span class="n">cookies</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getCookies</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 遍历数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">:</span> <span class="n">cookies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 3. 获取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">cookie</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="s">&#34;message&#34;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">cookie</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// URL解码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">value</span> <span class="o">=</span> <span class="n">URLDecoder</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&#34;:&#34;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Cookie对象提供的<code>getName()</code>和<code>getValue()</code>可以分别获取Cookie的名称和值。</p>
<blockquote>
<p>获取Cookie后应该使用<code>URLDecoder.decode</code>进行解码，这样确保Cookie里出现中文数据时不会乱码。</p>
</blockquote>
<h2 id="cookie-常用方法" data-numberify>Cookie 常用方法<a class="anchor ms-1" href="#cookie-常用方法"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Cookie[] getCookies()</code></td>
<td style="text-align:center"><code>HttpServletRequest</code>提供的获取客户端Cookie的方法</td>
</tr>
<tr>
<td style="text-align:center"><code>void addCookie(Cookie cookie)</code></td>
<td style="text-align:center"><code>HttpServletResponse</code>提供的，将Cookie发送到客户端的方法</td>
</tr>
<tr>
<td style="text-align:center"><code>Cookie(String name, String value)</code></td>
<td style="text-align:center"><code>Cookie</code>类的构造函数，用于创建Cookie，需要指定名称<code>name</code>和值<code>value</code></td>
</tr>
<tr>
<td style="text-align:center"><code>void setMaxAge(int expiry)</code></td>
<td style="text-align:center">设置Cookie过期的时间（单位：秒）。值为<code>-1</code>（默认情况下）或其它负数，Cookie只会在当前Session会话中持续有效。值为<code>0</code>表示删除对应Cookie</td>
</tr>
<tr>
<td style="text-align:center"><code>int getMaxAge()</code></td>
<td style="text-align:center">返回Cookie的最大生存周期（单位：秒）。默认情况下（不设置过期时间），<code>-1</code> 表示 Cookie 将持续到浏览器关闭。</td>
</tr>
<tr>
<td style="text-align:center"><code>String getName()</code></td>
<td style="text-align:center">返回Cookie的名称（名称在创建后不能改变）</td>
</tr>
<tr>
<td style="text-align:center"><code>void setValue(String newValue)</code></td>
<td style="text-align:center">设置与Cookie关联的值</td>
</tr>
<tr>
<td style="text-align:center"><code>String getValue()</code></td>
<td style="text-align:center">获取与Cookie关联的值</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="session" data-numberify>Session<a class="anchor ms-1" href="#session"></a></h1>
<p>Session是一种服务端会话跟踪技术，其数据保存在服务端。Session因为是存储在服务端所以比起Cookie，Session要更加安全。但与之相对的，Session不适合长期保存数据。</p>
<p>Session是基于Cookie实现的。Session要想实现一次会话多次请求之间的数据共享，就必须要保证多次请求获取Session的对象是同一个。在第一次获取Session对象时，Session对象会有一个唯一的标识，如<code>id:123</code>。Tomcat服务器发现业务处理中使用了Session对象，就会把Session的唯一标识<code>id:123</code>当做一个Cookie，添加<code>Set-Cookie:JESSIONID=123</code>到响应头中，并响应给浏览器。所以，浏览器通过Cookie告诉服务器Session的<code>id</code>，服务器也通过Cookie获取相应的Session，从而实现一次会话多次请求之间的数据共享。</p>
<p>JavaEE中提供了HttpSession接口，来实现一次会话的多次请求之间数据共享功能：</p>
<ul>
<li>
<p>获取Session对象（使用Request对象）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">HttpSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
</span></span></code></pre></div></li>
<li>
<p>Session对象提供的功能:</p>
<ul>
<li>
<p>存储数据到 session 域中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">setAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">o</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>根据 key，获取值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="nf">getAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>根据 key，删除该键值对：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">removeAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<h2 id="存储数据" data-numberify>存储数据<a class="anchor ms-1" href="#存储数据"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.session</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/sessionServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SessionServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 存储数据到Session中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 1. 获取Session对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">HttpSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 存储数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;message&#34;</span><span class="o">,</span> <span class="s">&#34;Hello World!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>由于Session中的数据是存储在服务器，所以在Session中存储和读取中文数据不需要进行编码和解码。</p>
</blockquote>
<h2 id="获取数据" data-numberify>获取数据<a class="anchor ms-1" href="#获取数据"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.session</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/sessionServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SessionServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 从Session中获取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 1. 获取Session对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">HttpSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Object</span> <span class="n">message</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;message&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="session-的钝化与活化" data-numberify>Session 的钝化与活化<a class="anchor ms-1" href="#session-的钝化与活化"></a></h2>
<p>正常来说，Session是存储在内存中的，只要服务器关闭，那么所有会话的Session都会失效。但是Tomcat在正常关闭的情况下，Session并不会失效，这是因为Session的<strong>钝化</strong>：在服务器正常关闭后，Tomcat会<u>自动将Session数据写入硬盘的文件</u>中。钝化的数据路径为：<code>项目目录\target\tomcat\work\Tomcat\localhost\项目名称\SESSIONS.ser</code>。</p>
<p>再次启动服务器后，从文件中加载数据到Session中，这就是Session的<strong>活化</strong>。而数据加载到Session中后，路径中的<code>SESSIONS.ser</code>文件会被删除掉。</p>
<p>所以说只要浏览器中记录<code>SessionID</code>的Cookie还存在，那么这个对应的Session也就存在，并且唯一。</p>
<p>而Cookie的存在是与浏览器的关闭密切相关的。在无人为销毁Cookie和没有为Cookie设置存活时间的情况下，当浏览器关闭时，其记录的Cookie也会自动销毁。所以当浏览器关闭时，对应的Session可能会消失。</p>
<h2 id="session-的销毁" data-numberify>Session 的销毁<a class="anchor ms-1" href="#session-的销毁"></a></h2>
<p>默认情况下，无操作，30分钟后自动销毁Session。对于这个失效时间，是可以通过在项目的<code>web.xml</code>中配置进行修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;web-app</span> <span class="na">xmlns=</span><span class="s">&#34;http://xmlns.jcp.org/xml/ns/javaee&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">version=</span><span class="s">&#34;3.1&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;session-config&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;session-timeout&gt;</span>100<span class="nt">&lt;/session-timeout&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/session-config&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/web-app&gt;</span>
</span></span></code></pre></div><p>如果没有配置，默认是30分钟，默认值是在Tomcat的<code>web.xml</code>配置文件中写死的。通过在Tomcat的<code>web.xml</code>中搜索<code>&lt;session-timeout&gt;</code>即可找到对应设置。</p>
<p>也可以通过调用<code>HTTPSession</code>的<code>invalidate()</code>方法进行手动销毁。</p>
<h2 id="session-常用方法" data-numberify>Session 常用方法<a class="anchor ms-1" href="#session-常用方法"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>HttpSession getSession()</code></td>
<td style="text-align:center"><code>HttpServletRequest</code>提供的方法，用于获取当前会话的<code>HttpSession</code>对象</td>
</tr>
<tr>
<td style="text-align:center"><code>Object getAttribute(String name)</code></td>
<td style="text-align:center">返回在该 session 会话中具有指定名称（<code>name</code>）的对象；如果没有指定名称的对象，则返回 <code>null</code></td>
</tr>
<tr>
<td style="text-align:center"><code>void setAttribute(String name, Object value)</code></td>
<td style="text-align:center">使用指定的名称绑定一个对象到该 session 会话</td>
</tr>
<tr>
<td style="text-align:center"><code>void removeAttribute(String name)</code></td>
<td style="text-align:center">将从该 session 会话移除指定名称的对象</td>
</tr>
<tr>
<td style="text-align:center"><code>Enumeration getAttributeNames()</code></td>
<td style="text-align:center">返回 String 对象的枚举，String 对象包含所有绑定到该 session 会话的对象的名称</td>
</tr>
<tr>
<td style="text-align:center"><code>String getId()</code></td>
<td style="text-align:center">返回一个包含分配给该 session 会话的唯一标识符的字符串</td>
</tr>
<tr>
<td style="text-align:center"><code>void invalidate()</code></td>
<td style="text-align:center">销毁当前Session对象。该方法指示该 session 会话无效，并解除绑定到它上面的任何对象</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="cookie-和-session" data-numberify>Cookie 和 Session<a class="anchor ms-1" href="#cookie-和-session"></a></h1>
<p>Cookie 和 Session 的区别：</p>
<ul>
<li>存储位置：Cookie 是将数据存储在客户端，Session 将数据存储在服务端。</li>
<li>安全性：Cookie不安全，Session安全。</li>
<li>数据大小：Cookie最大3KB，Session无大小限制。</li>
<li>存储时间：Cookie可以通过setMaxAge()长期存储，Session默认30分钟。</li>
<li>服务器性能：Cookie不占服务器资源，Session占用服务器资源。</li>
</ul>
<p>Session是基于Cookie实现的。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Linux 终端中文编码设置</title>
      <link>/blog/2022/09/linux-%E7%BB%88%E7%AB%AF%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Tue, 13 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022/09/linux-%E7%BB%88%E7%AB%AF%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E8%AE%BE%E7%BD%AE/</guid>
      <description><![CDATA[Ubuntu 安装中文支持： apt-get install language-pack-zh-hans -y 查看系统语言包： locale -a 修改~/.bashrc，加入： export LC_ALL=zh_CN.UTF-8 export LANG=zh_CN.UTF-8 修改/etc/default/locale： LANG=&#34;zh_CN.UTF-8&#34; Debian 安装loc]]></description>
      <content:encoded><![CDATA[<h1 id="ubuntu" data-numberify>Ubuntu<a class="anchor ms-1" href="#ubuntu"></a></h1>
<p>安装中文支持：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apt-get install language-pack-zh-hans -y
</span></span></code></pre></div><p>查看系统语言包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">locale -a
</span></span></code></pre></div><p>修改<code>~/.bashrc</code>，加入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LC_ALL</span><span class="o">=</span>zh_CN.UTF-8
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LANG</span><span class="o">=</span>zh_CN.UTF-8
</span></span></code></pre></div><p>修改<code>/etc/default/locale</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">LANG</span><span class="o">=</span><span class="s2">&#34;zh_CN.UTF-8&#34;</span>
</span></span></code></pre></div><h1 id="debian" data-numberify>Debian<a class="anchor ms-1" href="#debian"></a></h1>
<p>安装<code>locales</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apt install locales -y
</span></span></code></pre></div><p>安装完成后可能会提示设置<code>locales</code>，如果安装完之后想要更改相关设置或者没有提示设置，可以使用如下命令重新设置<code>locales</code>相关信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dpkg-reconfigure locales
</span></span></code></pre></div><h1 id="zsh" data-numberify>ZSH<a class="anchor ms-1" href="#zsh"></a></h1>
<p>修改<code>~/.zshrc</code>，加入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LC_ALL</span><span class="o">=</span>zh_CN.UTF-8
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LANG</span><span class="o">=</span>zh_CN.UTF-8
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>HttpServlet 与 Tomcat</title>
      <link>/docs/spring/java-web/http-servlet/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/http-servlet/</guid>
      <description><![CDATA[HttpServlet 简介 HttpServlet是对HTTP协议封装的Servlet实现类。 Servlet的体系结构： 在开发中，关注更多的是Servlet.se]]></description>
      <content:encoded><![CDATA[<h1 id="httpservlet-简介" data-numberify>HttpServlet 简介<a class="anchor ms-1" href="#httpservlet-简介"></a></h1>
<p>HttpServlet是对HTTP协议封装的Servlet实现类。</p>
<p>Servlet的体系结构：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/http-servlet/1627240593506.png" loading="lazy" width="970" height="294" />
</picture>

</p>
<p>在开发中，关注更多的是<code>Servlet.service()</code>方法。而每实现一个Servlet就必须实现Servlet接口，重写接口中的5个方法。</p>
<p>但其实可以通过继承HttpServlet来编写Servlet，简化Servlet的开发流程。并且，如果是开发B/S架构的Web项目，针对的都是HTTP协议。</p>
<p>使用HttpServlet的格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 需要复写以下两个方法:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Get...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Post...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p>启动Tomcat，使用浏览器访问<a href="http://localhost:8080/web-demo/demo" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/demo<i class="fas fa-external-link-square-alt ms-1"></i></a>可以在控制台看到<code>doGet()</code>方法被执行。</p>
</li>
<li>
<p>在项目的<code>webapp</code>目录下新建<code>index.html</code>，写入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>TestPost<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/web-demo/demo&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;username&#34;</span><span class="p">/&gt;&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>启动Tomcat，访问<a href="http://localhost:8080/web-demo/" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/<i class="fas fa-external-link-square-alt ms-1"></i></a>，在表单输入内容后提交。即可在控制台看到<code>doPost()</code>被执行。</p>
</li>
</ul>
<h2 id="使用servlet实现httpservlet" data-numberify>使用Servlet实现HttpServlet<a class="anchor ms-1" href="#使用servlet实现httpservlet"></a></h2>
<p>既然HttpServlet继承自Servlet，那么也可以通过编写Servlet类来实现HttpServlet：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyHttpServlet</span> <span class="kd">implements</span> <span class="n">Servlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">servletConfig</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ServletConfig</span> <span class="nf">getServletConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">servletResponse</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 根据请求方式的不同,分别进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">HttpServletRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpServletRequest</span><span class="o">)</span> <span class="n">servletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取请求方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 判断
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="s">&#34;GET&#34;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// GET 方式的处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">doGet</span><span class="o">(</span><span class="n">servletRequest</span><span class="o">,</span> <span class="n">servletResponse</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="s">&#34;POST&#34;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// POST 方式的处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">doPost</span><span class="o">(</span><span class="n">servletRequest</span><span class="o">,</span> <span class="n">servletResponse</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">servletResponse</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">servletResponse</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getServletInfo</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>翻阅<code>HttpServlet.service()</code>方法源码，可以发现HttpServlet不仅仅可以对GET和POST进行处理，还能处理其它五种请求：<code>doHead()</code>、<code>doPut()</code>、<code>doDelete()</code>、<code>doOptions()</code>和<code>doTrace()</code>。</p>
</blockquote>
<hr>
<h1 id="httpservletrequest-和-httpservletresponse" data-numberify>HttpServletRequest 和 HttpServletResponse<a class="anchor ms-1" href="#httpservletrequest-和-httpservletresponse"></a></h1>
<h2 id="request-和-response-概述" data-numberify>Request 和 Response 概述<a class="anchor ms-1" href="#request-和-response-概述"></a></h2>
<p><code>Request</code>是请求对象，<code>Response</code>是响应对象。在Servlet中也存在这样的两个对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletDemo</span> <span class="kd">implements</span> <span class="n">Servlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">servletResponse</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ......
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Request</code>作用：获取请求数据</p>
<ul>
<li>
<p>浏览器会发送HTTP请求到后台服务器（如，Tomcat）</p>
</li>
<li>
<p>HTTP的请求中会包含很多请求数据</p>
<p>如，HTTP协议请求：</p>
<ul>
<li>请求行</li>
<li>请求头</li>
<li>请求体</li>
</ul>
</li>
<li>
<p>后台服务器会对HTTP请求中的数据进行解析并把解析结果存入到一个对象中</p>
<p>所存入的对象即为<code>Request</code>对象，所以我们可以从<code>Request</code>对象中获取请求的相关参数</p>
</li>
<li>
<p>获取到数据后就可以继续后续的业务</p>
<p>如，获取用户名和密码就可以实现登录操作的相关业务</p>
</li>
</ul>
<p><code>Response</code>作用：设置响应数据</p>
<ul>
<li>业务处理完后，后台就需要给前端返回业务处理的结果（即，响应数据）</li>
<li>把响应数据封装到<code>Response</code>对象中</li>
<li>后台服务器会解析<code>Response</code>对象，按照格式（响应行+响应头+响应体）拼接结果</li>
<li>浏览器最终解析结果，把内容展示在浏览器给用户浏览</li>
</ul>
<p>而HttpServlet使用的 <code>Request</code> 和 <code>Response</code> 对象与Servlet有所不同。HttpServlet使用的是 <code>HttpServletRequest</code> 和 <code>HttpServletResponse</code>。</p>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpServletDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 使用request对象 获取请求数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">        <span class="c1">// Parameter在地址中以 ? 开始：url?name=zhangsan
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 使用response对象 设置响应数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">&#34;content-type&#34;</span><span class="o">,</span><span class="s">&#34;text/html;charset=utf-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="s">&#34;&lt;h1&gt;&#34;</span><span class="o">+</span><span class="n">name</span><span class="o">+</span><span class="s">&#34;,欢迎您！&lt;/h1&gt;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="request-和-response-继承体系" data-numberify>Request 和 Response 继承体系<a class="anchor ms-1" href="#request-和-response-继承体系"></a></h2>
<p><code>HttpServletRequest</code>和<code>ServletRequest</code>之间是继承关系，<code>HttpServletResponse</code>和<code>ServletResponse</code>是继承关系。</p>
<p><code>Request</code>之间的继承关系如下：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/http-servlet/1628740441008.png" loading="lazy" width="1183" height="398" />
</picture>

</p>
<p><code>Response</code>之间的继承关系如下：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/http-servlet/1628857761317.png" loading="lazy" width="831" height="263" />
</picture>

</p>
<hr>
<h1 id="httpservletrequest" data-numberify>HttpServletRequest<a class="anchor ms-1" href="#httpservletrequest"></a></h1>
<p>HTTP常用的请求方式为：</p>
<ul>
<li>GET</li>
<li>POST</li>
</ul>
<p>HTTP请求数据总共分为三部分内容：</p>
<ul>
<li>请求行</li>
<li>请求头</li>
<li>请求体</li>
</ul>
<p>在请求数据中，还包含着请求参数：</p>
<ul>
<li>对于GET：请求参数包含在请求头中。</li>
<li>对于POST：请求参数一般包含在请求体中。</li>
</ul>
<h2 id="获取请求行数据" data-numberify>获取请求行数据<a class="anchor ms-1" href="#获取请求行数据"></a></h2>
<p>如打开以下链接：</p>
<pre tabindex="0"><code>http://localhost:8080/HttpServlet/httpservlet.html?username=linner
</code></pre><p>其请求行大致内容如下：</p>
<pre tabindex="0"><code>GET /HttpServlet/httpservlet.html?username=linner HTTP/1.1
</code></pre><p>包含以下三部分内容：</p>
<ul>
<li>
<p><strong>请求方式</strong>：<code>GET</code></p>
</li>
<li>
<p><strong>请求资源路径</strong>：<code>/HttpServlet/httpservlet.html?username=linner</code></p>
<p>请求资源路径包含：</p>
<ul>
<li>虚拟目录（项目访问路径）：<code>/HttpServlet</code></li>
<li>URI（统一资源标识符）：<code>/HttpServlet/httpservlet.html</code></li>
<li>请求参数：<code>username=linner</code></li>
</ul>
</li>
<li>
<p><strong>HTTP协议及版本</strong>：<code>HTTP/1.1</code></p>
</li>
</ul>
<p>这三部分内容，<code>HttpServletRequest</code>对象都提供了对应的API方法来获取：</p>
<ul>
<li>
<p>获取请求方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="nf">getMethod</span><span class="o">()</span>
</span></span></code></pre></div><p>返回：<code>GET</code></p>
</li>
<li>
<p>获取虚拟目录（项目访问路径）:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="nf">getContextPath</span><span class="o">()</span>
</span></span></code></pre></div><p>返回：<code>/HttpServlet</code></p>
</li>
<li>
<p>获取URL（统一资源定位符）:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">StringBuffer</span> <span class="nf">getRequestURL</span><span class="o">()</span>
</span></span></code></pre></div><p>返回：<code>http://localhost:8080/HttpServlet/httpservlet.htm</code></p>
</li>
<li>
<p>获取URI（统一资源标识符）:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="nf">getRequestURI</span><span class="o">()</span>
</span></span></code></pre></div><p>返回：<code>/HttpServlet/httpservlet.html</code></p>
</li>
<li>
<p>获取请求参数（GET方式）:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="nf">getQueryString</span><span class="o">()</span>
</span></span></code></pre></div><p>返回：<code>username=linner</code>（多个参数也一并返回）</p>
</li>
</ul>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestHttpServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;---------------------------------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;请求行：&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;请求方式：&#34;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;虚拟目录：&#34;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getContextPath</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;URL：&#34;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;URI：&#34;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;请求参数：&#34;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;---------------------------------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="获取请求头数据" data-numberify>获取请求头数据<a class="anchor ms-1" href="#获取请求头数据"></a></h2>
<p>请求头数据由多个 <code>key: value</code> 组成，如客户端浏览器的版本信息：</p>
<pre tabindex="0"><code>User-Agent: Mozila/5.0 Chrome/105.0.0.0 Edg/105.0.1343.42
</code></pre><p><code>HttpServletRequest</code> 获取请求头的方法为：</p>
<pre tabindex="0"><code>String getHeader(String name)
</code></pre><ul>
<li><code>name</code>：是请求头中的<code>key</code>。</li>
<li>返回值：返回<code>name</code>对应<code>key</code>的<code>value</code>。</li>
</ul>
<p>使用<code>getHeader()</code>获取客户端浏览器的版本信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web.request</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo7</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">agent</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">&#34;user-agent&#34;</span><span class="o">);</span> <span class="c1">// name 不区分大小写
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">agent</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>输出：</p>
<pre tabindex="0"><code>Mozila/5.0 Chrome/105.0.0.0 Edg/105.0.1343.42
</code></pre><h2 id="获取请求体数据" data-numberify>获取请求体数据<a class="anchor ms-1" href="#获取请求体数据"></a></h2>
<p>浏览器发送的GET请求，是没有请求体的。只有在发送POST请求时才带有请求体。</p>
<p>请求体中的数据格式如：</p>
<pre tabindex="0"><code>username=linner&amp;password=123456
</code></pre><p>与资源路径中，请求参数的格式一样。</p>
<p><code>HttpServletRequest</code>提供了两种方式来获取请求体中的数据：</p>
<ul>
<li>
<p>获取字节输入流：</p>
<p>当前端发送的是字节数据，如传递的是文件数据时使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ServletInputStream</span> <span class="nf">getInputStream</span><span class="o">()</span>
</span></span></code></pre></div></li>
<li>
<p>获取字符输入流：</p>
<p>当前端发送的是纯文本数据时使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">BufferedReader</span> <span class="nf">getReader</span><span class="o">()</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>如果要在客户端浏览器发送POST请求，需要编写一个<code>&lt;form&gt;</code>表单。</p>
</blockquote>
<p>Example：</p>
<ol>
<li>
<p>在项目的<code>webapp</code>目录下添加<code>index.html</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">        action: 表单提交的请求地址
</span></span></span><span class="line"><span class="cl"><span class="c">        method: 请求方式，指定为post
</span></span></span><span class="line"><span class="cl"><span class="c">    --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/request-demo/test&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;username&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;password&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>doPost</code>方法中获取数据：</p>
<blockquote>
<p>由于<code>index.html</code>提交的是纯文本数据，所以要使用<code>getReader()</code>方法获取。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web.request</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo8</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取字符输入流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getReader</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 读取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><code>BufferedReader</code>流是通过<code>HttpServletRequest</code>对象来获取的，当请求完成后<code>HttpServletRequest</code>对象就会被销毁，<code>HttpServletRequest</code>对象被销毁后，<code>BufferedReader</code>流就会自动关闭，所以就不需要手动关闭流了。
<code>getReader()</code>获取请求参数后，还需要使用<code>readLine()</code>读取参数数据。</p>
</blockquote>
</li>
<li>
<p>通过浏览器访问：<a href="http://localhost:8080/request-demo/" target="_blank" rel="noopener noreferrer">http://localhost:8080/request-demo/<i class="fas fa-external-link-square-alt ms-1"></i></a>。在表单中输入内容，然后提交，就可以在控制台看到前端所发送的请求数据：</p>
<pre tabindex="0"><code>username=linner&amp;password=123456
</code></pre></li>
</ol>
<h2 id="获取请求参数" data-numberify>获取请求参数<a class="anchor ms-1" href="#获取请求参数"></a></h2>
<p>使用<code>getQueryString()</code>方法和<code>getReader()</code>分别获取GET和POST的请求参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getReader</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>上述代码存在的问题：</p>
<ul>
<li>
<p><code>doGet()</code>和<code>doPost</code>中出现了重复代码。</p>
<p>在实际业务中，可能会出现很多相同的业务代码。</p>
</li>
<li>
<p><code>doGet()</code>和<code>doPost</code>都必须存在。</p>
</li>
<li>
<p>GET请求和POST请求获取请求参数的方式不一样。</p>
</li>
</ul>
<ol>
<li>
<p>在<code>doPost()</code>中调用<code>doGet()</code>，然后在<code>doGet()</code>判断请求的方式，并分别做处理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取请求方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取请求参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">params</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="o">(</span><span class="s">&#34;GET&#34;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">)){</span>
</span></span><span class="line"><span class="cl">            <span class="n">params</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="s">&#34;POST&#34;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">)){</span>
</span></span><span class="line"><span class="cl">            <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getReader</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">params</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 处理请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">params</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span><span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>HttpServletRequest</code>已经对获取请求参数的方式进行了封装：</p>
<ul>
<li>
<p>获取所有参数Map集合</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">[]&gt;</span> <span class="nf">getParameterMap</span><span class="o">()</span>
</span></span></code></pre></div></li>
<li>
<p>根据名称获取参数值（返回值为数组，返回多个参数）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span><span class="o">[]</span> <span class="nf">getParameterValues</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>根据名称获取参数值（单个值）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="nf">getParameter</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ul>
<p>同样是在<code>doPost()</code>中调用<code>doGet()</code>，然后在<code>doGet()</code>处理参数，但是在获取参数时不用对请求方式进行判断。</p>
<p>Example：</p>
<ol>
<li>
<p><code>webapp/index.html</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    test:get
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/request-demo/test&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;get&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;username&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;password&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;hobby&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;1&#34;</span><span class="p">&gt;</span> get-1
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;hobby&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;2&#34;</span><span class="p">&gt;</span> get-2 <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    test:post
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/request-demo/test&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;username&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;password&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;hobby&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;1&#34;</span><span class="p">&gt;</span> post-1
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;hobby&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;2&#34;</span><span class="p">&gt;</span> post-2 <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>使用<code>getParameterValues()</code>和<code>getParameter()</code>获取请求参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo1</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;---------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 验证请求的方式：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取多个 value：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&#34;hobby: &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span><span class="o">[]</span> <span class="n">hobbies</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameterValues</span><span class="o">(</span><span class="s">&#34;hobby&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">hobby</span> <span class="o">:</span> <span class="n">hobbies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">hobby</span> <span class="o">+</span> <span class="s">&#34;, &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;\b\b  &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取单个 value：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;username: &#34;</span> <span class="o">+</span> <span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;password: &#34;</span> <span class="o">+</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>使用<code>getParameterMap()</code>一次性获取所有参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;-------------------------------------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 验证请求的方式：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取所有参数的Map集合
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">[]&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameterMap</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">key</span> <span class="o">+</span> <span class="s">&#34;:&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取key对应的所有values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">String</span><span class="o">[]</span> <span class="n">values</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">value</span> <span class="o">:</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">value</span> <span class="o">+</span> <span class="s">&#34;, &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;\b\b  &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
</li>
</ol>
<h2 id="请求转发" data-numberify>请求转发<a class="anchor ms-1" href="#请求转发"></a></h2>
<p>请求转发（forward）是一种在服务器内部的资源跳转方式。如：</p>
<ol>
<li>服务器内资源A获取请求。</li>
<li>资源A（处理一部分数据后）将请求转发给资源B去处理。</li>
<li>资源B处理完成后将将结果响应给浏览器。</li>
</ol>
<p>请求从资源A到资源B的过程即为请求转发。</p>
<p>请求转发的特点：</p>
<ul>
<li>浏览器地址栏路径不变。</li>
<li>只能转发到当前服务器的内部资源。</li>
<li>一次请求，可以在转发的资源间使用request共享数据。</li>
</ul>
<p>使用<code>request.getRequestDispatcher(&quot;/path&quot;).forward(request, response)</code>进行请求转发：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo1</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;demo1...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 存储数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;msg&#34;</span><span class="o">,</span> <span class="s">&#34;Hello&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 请求转发（资源转发到demo2）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="s">&#34;/demo2&#34;</span><span class="o">).</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo2&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo2</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;demo2...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Object</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;msg&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>通过<a href="http://localhost:8080/request-demo/demo1" target="_blank" rel="noopener noreferrer">http://localhost:8080/request-demo/demo1<i class="fas fa-external-link-square-alt ms-1"></i></a>访问。</p>
<blockquote>
<p>由于请求转发是在服务器内部的资源转发，所以<code>getRequestDispatcher()</code>中的路径不需要包含虚拟目录。</p>
</blockquote>
<p>请求转发使用<code>HttpServletRequest</code>（<code>Request</code>）对象进行资源的传递。这个用来存储资源的空间被称为Request域。</p>
<p><code>HttpServletRequest</code>对象提供了对于Request中的域属性操作的方法有：</p>
<ol>
<li>
<p>在 Request 域属性空间中放入数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">setAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">object</span><span class="o">)</span>
</span></span></code></pre></div><p>其生命周期与 Request 的生命周期相同。</p>
</li>
<li>
<p>从 Request 的域属性空间中获取指定名称的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="nf">getAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>从 Request 的域属性空间中删除指定名称的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">removeAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>创建请求转发器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">RequestDispatcher</span> <span class="nf">getRequestDispatcher</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">)</span>
</span></span></code></pre></div><p>请求转发器中有一个方法，用于完成将请求对象转发给下一个资源：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">forward</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="tomcat7-请求参数中文乱码问题" data-numberify>Tomcat7 请求参数中文乱码问题<a class="anchor ms-1" href="#tomcat7-请求参数中文乱码问题"></a></h2>
<blockquote>
<p>Tomcat8.0 之后，已经将默认编码设置为UTF-8。</p>
</blockquote>
<p>POST请求参数是通过流的方式获取数据：</p>
<ul>
<li>Tomcat在获取流的时候采用的编码是<code>ISO-8859-1</code>。</li>
<li>页面设置的编码格式一般为<code>UTF-8</code>。</li>
<li><code>ISO-8859-1</code>编码是不支持中文的，所以会出现乱码。</li>
</ul>
<p>解决方案：通过<code>HttpServletRequest</code>提供的<code>setCharacterEncoding()</code>，在Tomcat在获取流数据之前的编码设置为UTF-8。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URLDecoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo4Copy</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 设置字符输入流的编码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">request</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取请求参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getReader</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// getReader()获取的是编码后的URL，如果要显示中文，需要对URL按照UTF-8进行解码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">decode</span> <span class="o">=</span> <span class="n">URLDecoder</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;解决乱码后: &#34;</span> <span class="o">+</span> <span class="n">decode</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>GET请求参数包含在URL中：</p>
<blockquote>
<p><code>getQueryString()</code>获取的并不是字符输入流，所以<code>setCharacterEncoding()</code>并不适用。</p>
</blockquote>
<ul>
<li>
<p>浏览器在发送HTTP的过程中会根据页面<code>&lt;meta&gt;</code>标签指定的<code>charset</code>的方式（一般为UTF-8）对URL进行编码。
URL编码：</p>
<ol>
<li>将字符串按照编码方式转为二进制。</li>
<li>每个字节（8位）转为2个16进制数（一个16进制数代表4位）并在前边加上<code>%</code>。</li>
</ol>
</li>
<li>
<p>Tomcat在接收编码后的URL后，会默认按照<code>ISO-8859-1</code>进行URL解码。</p>
<p>可以使用以下两个函数可以模拟URL编码、解码的过程：</p>
<ol>
<li>
<p>编码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">URLEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">string</span><span class="o">,</span> <span class="n">charset</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>解码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">URLDecoder</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">string</span><span class="o">,</span> <span class="n">charset</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ol>
</li>
</ul>
<p>解决方案：</p>
<ol>
<li>把字符数据（URL编码）按照ISO-8859-1编码转换成字节。</li>
<li>字节按照浏览器对应的URL编码（UTF-8）转换成对应的字符。</li>
</ol>
<p>这样在转换的过程中保持编码一致，就可以解决中文乱码问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URLDecoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo4Copy</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">qs</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 把字符数据（URL编码）按照ISO-8859-1编码转换成字节
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">qs</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">StandardCharsets</span><span class="o">.</span><span class="na">ISO_8859_1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 按照UTF-8编码转换成对应的字符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">bytes</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 转换后的字符是URL编码后的字符，需要再次解码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">qs</span> <span class="o">=</span> <span class="n">URLDecoder</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;解决乱码后: &#34;</span> <span class="o">+</span> <span class="n">qs</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>通用方式解决乱码问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo4Copy</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取username
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 解决乱码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">username</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">username</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">StandardCharsets</span><span class="o">.</span><span class="na">ISO_8859_1</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">                            <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;解决乱码后: &#34;</span> <span class="o">+</span> <span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="httpservletresponse" data-numberify>HttpServletResponse<a class="anchor ms-1" href="#httpservletresponse"></a></h1>
<p>HTTP响应数据总共分为三部分内容，分别是：</p>
<ul>
<li>
<p>响应行</p>
<p>如，<code>HTTP/1.1 200 OK</code>，从左到右分别为：</p>
<ul>
<li>
<p>HTTP协议及版本</p>
</li>
<li>
<p>响应状态码
设置响应状态码，<code>HttpServletResponse</code>对象提供了以下方法设置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">setStatus</span><span class="o">(</span><span class="kt">int</span> <span class="n">sc</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>状态码描述</p>
</li>
</ul>
</li>
<li>
<p>响应头</p>
<p>由多个 <code>key: value</code> 组成。<code>HttpServletResponse</code>对象提供了以下方法设置键值对：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">setHeader</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">value</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>响应体</p>
<ul>
<li>
<p>获取字符输出流：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">PrintWriter</span> <span class="nf">getWriter</span><span class="o">()</span>
</span></span></code></pre></div></li>
<li>
<p>获取字节输出流：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ServletOutputStream</span> <span class="nf">getOutputStream</span><span class="o">()</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<h2 id="respones重定向" data-numberify>Respones重定向<a class="anchor ms-1" href="#respones重定向"></a></h2>
<p>Response重定向（redirect）是一种资源跳转方式。如：</p>
<ol>
<li>浏览器发送请求给服务器，服务器中对应的资源A接收到请求。</li>
<li>资源A现在无法处理该请求，就会给浏览器响应一个302的状态码和location（一个访问资源B的路径）。</li>
<li>浏览器接收到响应状态码为302就会重新发送请求到location对应的访问地址去访问资源B。</li>
</ol>
<p>重定向的特点:</p>
<ul>
<li>
<p>浏览器地址栏路径发送变化（由资源A的路径变化为资源B的路径）。</p>
<p>进行重定向访问时，由浏览器发送两次请求，所以地址发生了变化。</p>
</li>
<li>
<p>可以重定向到任意位置的资源（服务器内部、外部均可）。</p>
<p>资源由浏览器来访问，所以可以重定向到任意位置资源。</p>
</li>
<li>
<p>不能在多个资源使用Request重定向共享数据。</p>
<p>重定向是由浏览器来发送新的请求，每次请求中的Request对象都是不同的。</p>
</li>
</ul>
<p>重定向需要两个步骤：</p>
<ol>
<li>
<p>设置302状态码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="mi">302</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>设置响应头中，<code>location</code>的值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">&#34;location&#34;</span><span class="o">,</span> <span class="s">&#34;/path_b&#34;</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ol>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseDemo1</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;demo1...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 重定向
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 1. 设置相应状态码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="mi">302</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 设置相应头 Location (不区分大小写)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">&#34;Location&#34;</span><span class="o">,</span> <span class="s">&#34;/request-demo/demo2&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo2&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseDemo2</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;demo2...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>由于重定向是将重定向后的资源路径告知浏览器，所以<code>location</code>需要添加虚拟目录（如<code>/response-demo/demo2</code>）。
如果是重定向到服务器外部资源，<code>location</code>的值为外部资源的URL。</p>
</blockquote>
<p><code>HttpServletResponse</code>提供了<code>sendRedirect()</code>方法来简化重定向流程。修改<code>ResponseDemo1</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web.response</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/resp1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseDemo1</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;resp1...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 简化方式完成重定向
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 动态获取虚拟目录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">contextPath</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getContextPath</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">resp</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="n">contextPath</span> <span class="o">+</span> <span class="s">&#34;/resp2&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="响应字符数据" data-numberify>响应字符数据<a class="anchor ms-1" href="#响应字符数据"></a></h2>
<p>将字符数据写回到浏览器，需要：</p>
<ol>
<li>
<p>通过<code>HttpServletResponse</code>对象获取字符输出流：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">PrintWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">()</span>
</span></span></code></pre></div></li>
<li>
<p>通过字符输出流写数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&#34;你好&#34;</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ol>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置content-type（响应的数据格式）和字符集（编码）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&#34;text/html;charset=utf-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// content-type也可以使用setHeader()手动设置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// resp.setHeader(&#34;content-type&#34;, &#34;text/html&#34;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取字符输出流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PrintWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&#34;你好&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&#34;&lt;h1&gt;Hello World!&lt;/h1&gt;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><code>write()</code>不仅能写入文本数据，还能写入HTML数据。
<code>PrintWriter</code> 对象会在 <code>HttpServletRequest</code> 被销毁时一并销毁，无需手动关闭。</p>
</blockquote>
<h2 id="响应字节数据" data-numberify>响应字节数据<a class="anchor ms-1" href="#响应字节数据"></a></h2>
<p>将字节数据写回到浏览器，需要：</p>
<ol>
<li>
<p>通过<code>HttpServletResponse</code>对象获取字节输出流：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ServletOutputStream</span> <span class="n">os</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">()</span>
</span></span></code></pre></div></li>
<li>
<p>通过字节输出流写数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">os</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buff</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ol>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletOutputStream</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 读取文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;src/main/webapp/imgs/bg.jpg&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取response字节输出流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ServletOutputStream</span> <span class="n">os</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 完成流的copy
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">buff</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">((</span><span class="n">len</span> <span class="o">=</span> <span class="n">fis</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buff</span><span class="o">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">os</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buff</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>其中，流的copy可以使用<code>IOUtils</code>工具类的<code>copy()</code>来简化操作：</p>
<ul>
<li>
<p>导入配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>commons-io<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>commons-io<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>2.6<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>修改<code>ResponseDemo</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 1. 读取文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;src/main/webapp/imgs/reg_bg_min.jpg&#34;</span><span class="o">);</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 2. 获取response字节输出流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ServletOutputStream</span> <span class="n">os</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 3. 完成流的copy
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">IOUtils</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">fis</span><span class="o">,</span> <span class="n">os</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="总结" data-numberify>总结<a class="anchor ms-1" href="#总结"></a></h1>
<h2 id="httpservletrequest-常用方法" data-numberify>HttpServletRequest 常用方法<a class="anchor ms-1" href="#httpservletrequest-常用方法"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>String getMethod()</code></td>
<td style="text-align:center">获取请求方式</td>
</tr>
<tr>
<td style="text-align:center"><code>String getContextPath()</code></td>
<td style="text-align:center">获取虚拟目录（项目访问路径）</td>
</tr>
<tr>
<td style="text-align:center"><code>StringBuffer getRequestURL()</code></td>
<td style="text-align:center">获取URL（统一资源定位符）</td>
</tr>
<tr>
<td style="text-align:center"><code>String getRequestURI()</code></td>
<td style="text-align:center">获取URI（统一资源标识符）</td>
</tr>
<tr>
<td style="text-align:center"><code>String getQueryString()</code></td>
<td style="text-align:center">获取请求参数（GET方式）</td>
</tr>
<tr>
<td style="text-align:center"><code>String getHeader(String name)</code></td>
<td style="text-align:center">获取<code>name</code>指定<code>key</code>对应的请求头的<code>value</code></td>
</tr>
<tr>
<td style="text-align:center"><code>ServletInputStream getInputStream()</code></td>
<td style="text-align:center">获取请求体字节输入流（POST方式获取请求参数）</td>
</tr>
<tr>
<td style="text-align:center"><code>BufferedReader getReader()</code></td>
<td style="text-align:center">获取请求体字符输入流<br><code>getReader()</code>获取请求参数后，还需要使用<code>readLine()</code>读取参数数据<br>即，<br><code>BufferedReader br = request.getReader();</code><br><code>String line = br.readLine();</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Map&lt;String, String[]&gt; getParameterMap()</code></td>
<td style="text-align:center">获取所有请求参数Map集合</td>
</tr>
<tr>
<td style="text-align:center"><code>String[] getParameterValues(String name)</code></td>
<td style="text-align:center">根据名称获取请求参数值<br>返回值为数组<br>返回多个参数</td>
</tr>
<tr>
<td style="text-align:center"><code>String getParameter(String name)</code></td>
<td style="text-align:center">根据名称获取请求参数值<br>返回单个参数值</td>
</tr>
<tr>
<td style="text-align:center"><code>void setAttribute(String name, Object object)</code></td>
<td style="text-align:center">在 Request 域属性空间中放入数据</td>
</tr>
<tr>
<td style="text-align:center"><code>Object getAttribute(String name)</code></td>
<td style="text-align:center">从 Request 的域属性空间中获取指定名称的数据</td>
</tr>
<tr>
<td style="text-align:center"><code>void removeAttribute(String name)</code></td>
<td style="text-align:center">从 Request 的域属性空间中删除指定名称的数据</td>
</tr>
<tr>
<td style="text-align:center"><code>RequestDispatcher getRequestDispatcher(String path)</code></td>
<td style="text-align:center">创建请求转发器<br>请求转发器中有一个方法，用于完成将请求对象转发给下一个资源：<br><code>void forward(HttpServletRequest request, HttpServletResponse response)</code></td>
</tr>
<tr>
<td style="text-align:center"><code>void setCharacterEncoding(String charset)</code></td>
<td style="text-align:center">设置请求体字符输入流的编码</td>
</tr>
</tbody>
</table>
<h2 id="httpservletresponse-常用方法" data-numberify>HttpServletResponse 常用方法<a class="anchor ms-1" href="#httpservletresponse-常用方法"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>void setStatus(int sc)</code></td>
<td style="text-align:center">设置响应状态码</td>
</tr>
<tr>
<td style="text-align:center"><code>void setHeader(String name, String value)</code></td>
<td style="text-align:center">设置响应头键值对</td>
</tr>
<tr>
<td style="text-align:center"><code>PrintWriter getWriter()</code></td>
<td style="text-align:center">获取响应体字符输出流获取字符输出流后还需要使用<code>write()</code>方法来写入字符数据：<br><code>PrintWriter writer = response.getWriter();</code><br><code>writer.write(&quot;Hello World!&quot;);</code></td>
</tr>
<tr>
<td style="text-align:center"><code>ServletOutputStream getOutputStream()</code></td>
<td style="text-align:center">获取响应体字节输出流<br>获取字节输出流前需要先使用<code>FileInputStream</code>对象来读取文件<br>然后使用<code>IOUtils</code>工具类的<code>copy()</code>来copy流<br>获取字节输出流后还需要使用<code>write()</code>方法来写入字符数据<br><a href="/docs/spring/java-web/http-servlet/#%e5%93%8d%e5%ba%94%e5%ad%97%e8%8a%82%e6%95%b0%e6%8d%ae">响应字节数据</a></td>
</tr>
<tr>
<td style="text-align:center"><code>void sendRedirect(String path)</code></td>
<td style="text-align:center">Respones重定向</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    
    <item>
      <title>Servlet 与 Tomcat</title>
      <link>/docs/spring/java-web/servlet/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/servlet/</guid>
      <description><![CDATA[Servlet 简介 Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。 Servlet 基本使]]></description>
      <content:encoded><![CDATA[<h1 id="servlet-简介" data-numberify>Servlet 简介<a class="anchor ms-1" href="#servlet-简介"></a></h1>
<p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p>
<hr>
<h1 id="servlet-基本使用" data-numberify>Servlet 基本使用<a class="anchor ms-1" href="#servlet-基本使用"></a></h1>
<ol>
<li>
<p>创建Maven Web项目后，导入Servlet依赖坐标和Tomcat插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Servlet依赖 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>3.1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">   	<span class="c">&lt;!-- Tomcat插件 --&gt;</span>
</span></span><span class="line"><span class="cl">       <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">           <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.maven<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">           <span class="nt">&lt;artifactId&gt;</span>tomcat7-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">           <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">       <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><blockquote>
<p>使用<code>&lt;scope&gt;provided&lt;/scope&gt;</code>的原因：
<code>provided</code>指的是在编译和测试过程中有效，最后生成的<code>war</code>包时不会加入。
因为Tomcat的lib目录中已经有servlet-api这个jar包，如果在生成war包的时候生效就会和Tomcat中的jar包冲突，导致报错。</p>
</blockquote>
</li>
<li>
<p>创建Servlet类，实现Servlet接口，并重写接口中所有方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletDemo</span> <span class="kd">implements</span> <span class="n">Servlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">servletResponse</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello Servlet!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getServletInfo</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">servletConfig</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ServletConfig</span> <span class="nf">getServletConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>使用<code>@WebServlet</code>注解配置该Servlet的访问路径：<code>@WebServlet(&quot;/demo&quot;)</code></li>
</ul>
</li>
<li>
<p>启动Tomcat，根据自己项目和Tomcat的配置访问，如：<a href="http://localhost:8080/web-demo/demo" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/demo<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<p>访问成功后可以看到在控制台输出<code>service()</code>方法中的内容。</p>
</li>
</ol>
<hr>
<h1 id="servlet-执行流程" data-numberify>Servlet 执行流程<a class="anchor ms-1" href="#servlet-执行流程"></a></h1>
<p>运行Tomcat时并没有显式创建Servlet对象，也没有显式调用其中的方法。可控制台依然输出了<code>ServletDemo.service()</code>中的内容。</p>
<p>访问该Tomcat项目时，浏览器发出<a href="http://localhost:8080/web-demo/demo" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/demo<i class="fas fa-external-link-square-alt ms-1"></i></a>请求，从请求中可以解析出三部分内容：</p>
<ul>
<li>根据<code>localhost:8080</code>可以找到要访问的Tomcat Web服务器</li>
<li>根据<code>web-demo</code>可以找到部署在Tomcat服务器上的web-demo项目</li>
<li>根据<code>demo</code>可以找到要访问的是项目中的哪个Servlet类，根据@WebServlet后面的值进行匹配</li>
</ul>
<p>找到<code>ServletDemo</code>这个类后，Tomcat Web服务器就会为<code>ServletDemo</code>这个类创建一个对象，然后调用对象中的<code>service()</code>方法。</p>
<p>而Tomcat则是根据<code>@WebServlet</code>注解或<code>web.xml</code>配置文件等信息来创建对应的Servlet对象。</p>
<hr>
<h1 id="servlet-生命周期" data-numberify>Servlet 生命周期<a class="anchor ms-1" href="#servlet-生命周期"></a></h1>
<p>生命周期是指对象的生命周期指一个对象从被创建到被销毁的整个过程。</p>
<p>Servlet运行在Servlet容器（web服务器）中，其生命周期由容器来管理，分为4个阶段：</p>
<ol>
<li>
<p><strong>加载和实例化</strong>：默认情况下，Servlet会在第一次访问时被容器创建</p>
</li>
<li>
<p><strong>初始化</strong>：在Servlet实例化之后，容器将调用Servlet的<code>init()</code>方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作</p>
<p><code>init()</code>方法仅会被调用一次</p>
</li>
<li>
<p><strong>请求处理</strong>：每次请求Servlet时，Servlet容器都会调用Servlet的<code>service()</code>方法对请求进行处理</p>
</li>
<li>
<p><strong>服务终止</strong>：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的<code>destroy()</code>方法完成资源的释放</p>
<p>在<code>destroy()</code>方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收</p>
</li>
</ol>
<p>可以把Servlet的创建放到服务器启动的时候来创建（修改<code>@WebServlet</code>注解）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">&#34;/demo1&#34;</span><span class="o">,</span> <span class="n">loadOnStartup</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span>
</span></span></code></pre></div><p><code>loadOnstartup</code>的取值有两类情况：</p>
<ol>
<li>负整数：第一次访问时创建Servlet对象</li>
<li>非负整数：服务器启动时创建Servlet对象，数字越小优先级越高（<code>0</code>的优先级最高）</li>
</ol>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">&#34;/demo&#34;</span><span class="o">,</span> <span class="n">loadOnStartup</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletDemo</span> <span class="kd">implements</span> <span class="n">Servlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 初始化方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     * - 在Servlet被第一次访问或者服务器启动时被调用一次
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;init...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 提供服务
</span></span></span><span class="line"><span class="cl"><span class="cm">     * - 每一次Servlet被访问时被调用
</span></span></span><span class="line"><span class="cl"><span class="cm">     * - 可被调用多次
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">res</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello Servlet!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 销毁方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     * - 调用时机：内存释放或者服务器关闭的时候被调用一次
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;destroy...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ServletConfig</span> <span class="nf">getServletConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getServletInfo</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>注意：若要在关闭Tomcat时调用<code>destroy()</code>，需要在正常关闭Tomcat的情况下，<code>destroy()</code>才能被执行。</p>
</blockquote>
<hr>
<h1 id="servlet-方法" data-numberify>Servlet 方法<a class="anchor ms-1" href="#servlet-方法"></a></h1>
<p>剩下两个Servlet方法的作用是：</p>
<ul>
<li>
<p>获取Servlet信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">getServletInfo</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>获取ServletConfig对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">getServletInfo</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>ServletConfig对象，Tomcat Web服务器在创建Servlet对象的时候会通过<code>init()</code>方法将其作为参数传入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span>
</span></span></code></pre></div><p>在<code>getServletInfo()</code>中仅需将服务器传过来的ServletConfig进行返回即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">ServletConfig</span> <span class="n">servletConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取服务器传入的ServletConfig
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="o">.</span><span class="na">servletConfig</span> <span class="o">=</span> <span class="n">config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;init...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ServletConfig</span> <span class="nf">getServletConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将服务器传入的ServletConfig返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">servletConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="urlpattern-配置" data-numberify>urlPattern 配置<a class="anchor ms-1" href="#urlpattern-配置"></a></h1>
<h2 id="urlpatterns-多路径访问" data-numberify>urlPatterns 多路径访问<a class="anchor ms-1" href="#urlpatterns-多路径访问"></a></h2>
<p>一个Servlet，可以配置多个访问路径（<code>urlPattern</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">urlPatterns</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;/path1&#34;</span><span class="o">,</span> <span class="s">&#34;/path2&#34;</span><span class="o">,</span> <span class="o">....})</span>
</span></span></code></pre></div><h2 id="精确匹配" data-numberify>精确匹配<a class="anchor ms-1" href="#精确匹配"></a></h2>
<ul>
<li>
<p>配置路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/path/servlet&#34;</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>访问路径：<a href="http://localhost:8080/web-demo/path/servlet" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/path/servlet<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</li>
</ul>
<h2 id="目录匹配" data-numberify>目录匹配<a class="anchor ms-1" href="#目录匹配"></a></h2>
<ul>
<li>
<p>配置路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/path/*&#34;</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>访问路径：</p>
<ul>
<li><a href="http://localhost:8080/web-demo/path/abc" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/path/abc<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="http://localhost:8080/web-demo/path/def" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/path/def<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="http://localhost:8080/web-demo/path/" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/path/<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="http://localhost:8080/web-demo/path/anypath" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/path/anypath<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<blockquote>
<p>精确匹配优先级要高于目录匹配</p>
</blockquote>
<h2 id="扩展名匹配" data-numberify>扩展名匹配<a class="anchor ms-1" href="#扩展名匹配"></a></h2>
<ul>
<li>
<p>配置路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;*.html&#34;</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>访问路径：</p>
<ul>
<li><a href="http://localhost:8080/web-demo/index.html" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/index.html<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="http://localhost:8080/web-demo/login.html" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/login.html<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="http://localhost:8080/web-demo/any_name.html" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/any_name.html<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<blockquote>
<p>注意：</p>
<ol>
<li>如果路径配置的不是扩展名，那么在路径的前面就必须要加<code>/</code>否则会报错</li>
<li>如果路径配置的是<code>*.html</code>，那么在<code>*.html</code>的前面不能加<code>/</code>，否则会报错</li>
</ol>
</blockquote>
<h2 id="任意匹配" data-numberify>任意匹配<a class="anchor ms-1" href="#任意匹配"></a></h2>
<ul>
<li>
<p>配置路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>或</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/*&#34;</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>访问路径：</p>
<p>任何以 <code>http://localhost:8080/web-demo/</code> 开头的路径</p>
</li>
</ul>
<blockquote>
<p><code>/</code>和<code>/*</code>的区别：</p>
<ol>
<li>当项目中的Servlet配置了<code>@WebServlet(&quot;/&quot;)</code>，会覆盖掉Tomcat中的<code>DefaultServlet</code>，当其他的urlPattern都匹配不上时都会走这个Servlet。</li>
<li>当项目中配置了<code>@WebServlet(&quot;/&quot;)</code>，意味着匹配任意访问路径。</li>
<li><code>DefaultServlet</code>是用来处理静态资源，如果使用<code>@WebServlet(&quot;/&quot;)</code>将其覆盖掉。当请求静态资源的时候则是使用了自定义的Servlet类，最终会导致静态资源不能被访问。</li>
</ol>
</blockquote>
<hr>
<h1 id="xml配置servlet不推荐" data-numberify>XML配置Servlet（不推荐）<a class="anchor ms-1" href="#xml配置servlet不推荐"></a></h1>
<p>Servlet从3.0版本后才开始支持注解配置，而3.0版本前只支持XML配置文件的配置方法。</p>
<ul>
<li>
<p>编写Servlet类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletDemo</span> <span class="kd">implements</span> <span class="n">Servlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>web.xml</code>中配置该Servlet：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;web-app</span> <span class="na">xmlns=</span><span class="s">&#34;http://xmlns.jcp.org/xml/ns/javaee&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">version=</span><span class="s">&#34;4.0&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Servlet 全类名 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- Servlet的名称，名字任意 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-name&gt;</span>demo<span class="nt">&lt;/servlet-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- Servlet的类全名 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-class&gt;</span>com.linner.web.ServletDemo<span class="nt">&lt;/servlet-class&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Servlet 访问路径 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet-mapping&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- Servlet的名称，要和上面的名称一致 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-name&gt;</span>demo<span class="nt">&lt;/servlet-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- Servlet的访问路径 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;url-pattern&gt;</span>/demo<span class="nt">&lt;/url-pattern&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/web-app&gt;</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="servletrequest-和-servletresponse" data-numberify>ServletRequest 和 ServletResponse<a class="anchor ms-1" href="#servletrequest-和-servletresponse"></a></h1>
<p>在 <code>Servlet.service()</code> 中有这样两个参数，它们的类型是 <code>ServletRequest</code> 和 <code>ServletResponse</code>。这两个参数就是Servlet的 <code>Request</code> 和 <code>Response</code> 对象。</p>
<p><code>Request</code>是请求对象，作用是将客户端的请求数据从客户端发送到服务端；<code>Response</code>是响应对象，作用是将服务端的响应数据从服务端发送到客户端。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Tomcat</title>
      <link>/docs/spring/java-web/tomcat-base/</link>
      <pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/tomcat-base/</guid>
      <description><![CDATA[Tomcat基本使用 Tomcat安装 访问Tomcat官网下载。Tomcat是绿色版，直接解压即可。 启动Tomcat 以Windows系统为例，]]></description>
      <content:encoded><![CDATA[<h1 id="tomcat基本使用" data-numberify>Tomcat基本使用<a class="anchor ms-1" href="#tomcat基本使用"></a></h1>
<h2 id="tomcat安装" data-numberify>Tomcat安装<a class="anchor ms-1" href="#tomcat安装"></a></h2>
<p>访问<a href="https://tomcat.apache.org/" target="_blank" rel="noopener noreferrer">Tomcat官网<i class="fas fa-external-link-square-alt ms-1"></i></a>下载。Tomcat是绿色版，直接解压即可。</p>
<h2 id="启动tomcat" data-numberify>启动Tomcat<a class="anchor ms-1" href="#启动tomcat"></a></h2>
<p>以Windows系统为例，运行Tomcat目录下 <code>bin\startup.bat</code> 启动脚本即可完成启动。</p>
<p>启动后，通过浏览器访问 <code>http://localhost:8080</code>能看到Apache Tomcat的内容就说明Tomcat已经启动成功。</p>
<p>Windows系统下启动的过程中，如果控制台有中文乱码，需要修改<code>conf/logging.prooperties</code>。</p>
<p>将</p>
<pre tabindex="0"><code>java.util.logging.ConsoleHandler.encoding = UTF-8
</code></pre><p>修改为</p>
<pre tabindex="0"><code>java.util.logging.ConsoleHandler.encoding = GBK
</code></pre><h2 id="关闭tomcat" data-numberify>关闭Tomcat<a class="anchor ms-1" href="#关闭tomcat"></a></h2>
<p>关闭Tomcat不应该直接关闭运行窗口来强制关闭。应该运行<code>bin\shutdown.bat</code>或<code>ctrl+c</code>来正常关闭。</p>
<h2 id="修改端口" data-numberify>修改端口<a class="anchor ms-1" href="#修改端口"></a></h2>
<p>Tomcat默认的端口是8080，通过修改 <code>conf/server.xml</code> 来修改端口号：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;Connector</span> <span class="na">port=</span><span class="s">&#34;8080&#34;</span> <span class="na">protocol=</span><span class="s">&#34;HTTP/1.1&#34;</span> <span class="na">connectionTimeout=</span><span class="s">&#34;20000&#34;</span> <span class="na">redirectPort=</span><span class="s">&#34;8443&#34;</span><span class="nt">&gt;</span>
</span></span></code></pre></div><h2 id="部署" data-numberify>部署<a class="anchor ms-1" href="#部署"></a></h2>
<p>Tomcat部署项目： 将项目放置到<code>webapps</code>目录下，即部署完成。</p>
<p>一般JavaWeb项目会被打包称<code>wa</code>r包，然后将<code>war</code>包放到<code>webapps</code>目录下，Tomcat会自动解压缩。</p>
<hr>
<h1 id="maven-创建-web-项目" data-numberify>Maven 创建 Web 项目<a class="anchor ms-1" href="#maven-创建-web-项目"></a></h1>
<p>使用Maven工具能更加简单快捷的创建Web项目。</p>
<h2 id="maven-web-项目结构" data-numberify>Maven Web 项目结构<a class="anchor ms-1" href="#maven-web-项目结构"></a></h2>
<ul>
<li>📁<code>project_name</code> &mdash; 项目主目录
<ul>
<li>📁<code>src</code> &mdash; 源代码和测试代码文件目录
<ul>
<li>📁<code>main</code> &mdash; 源代码文件目录
<ul>
<li>📁<code>java</code> &mdash; 源代码Java文件目录</li>
<li>📁<code>resourcs</code> &mdash; 源代码配置文件目录</li>
<li>❗📁<code>webapp</code> 或 <code>web</code> &mdash; Web项目核心目录
存放web配置文件和web项目代码 (<code>html</code>, <code>css</code>, <code>javascript</code>等)
<ul>
<li>❗📁<code>WEB-INF</code> &mdash; Web项目核心目录
<ul>
<li>📄<code>web.xml</code> &mdash; Web项目配置文件</li>
</ul>
</li>
<li>其它目录或文件，如 <code>index.html</code>、<code>html</code>、<code>css</code>、<code>js</code>等</li>
</ul>
</li>
</ul>
</li>
<li>📁<code>test</code> &mdash; 测试代码文件目录
<ul>
<li>📁<code>java</code> &mdash; 测试代码Java文件目录</li>
<li>📁<code>resource</code> &mdash; 测试代码配置</li>
</ul>
</li>
<li>📄<code>pom.xml</code> &mdash; 项目核心配置文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>开发完成部署的 Maven Web 项目结构：</p>
<ul>
<li>📁<code>project_name</code> &mdash; 项目访问路径（虚拟目录）
<ul>
<li>❗📁<code>WEB-INF</code> &mdash; Web项目核心目录
<ul>
<li>📁<code>classes</code> &mdash; Java字节码文件
编译后的Java字节码文件和<code>resources</code>的资源文件，会被放到该目录下
包括<code>pom.xml</code>中依赖坐标对应的jar包</li>
<li>📁<code>lib</code> &mdash; 项目所需jar包</li>
<li>📄<code>web.xml</code> &mdash; Web项目配置文件</li>
<li>其它目录或文件，如 <code>index.html</code>、<code>html</code>、<code>css</code>、<code>js</code>等</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="创建-maven-web-项目" data-numberify>创建 Maven Web 项目<a class="anchor ms-1" href="#创建-maven-web-项目"></a></h2>
<p>创建方式有两种：使用骨架和不使用骨架</p>
<p>使用骨架大致步骤如下：</p>
<ol>
<li>创建Maven项目</li>
<li><mark>选择使用Web项目骨架</mark></li>
</ol>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627227650406.png" loading="lazy" width="998" height="789" />
</picture>

</p>
<ol start="3">
<li>
<p>输入Maven项目坐标创建项目</p>
</li>
<li>
<p>确认Maven相关的配置信息后，完成项目创建</p>
</li>
<li>
<p><mark>删除pom.xml中多余内容</mark>
<picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627228584625.png" loading="lazy" width="1255" height="550" />
</picture>

</p>
</li>
<li>
<p>补齐Maven Web项目缺失的目录结构</p>
<p>最终目录结构如下：</p>
<ul>
<li>📁<code>project_name</code>
<ul>
<li>📁<code>src</code>
<ul>
<li>📁<code>main</code>
<ul>
<li>📁<code>java</code></li>
<li>📁<code>resourcs</code></li>
<li>📁<code>webapp</code>
<ul>
<li>📁<code>WEB-INF</code>
<ul>
<li>📄<code>web.xml</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>📄<code>pom.xml</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627204022604.png" loading="lazy" width="1603" height="556" />
</picture>

</p>
<p>不使用骨架大致步骤如下：</p>
<ol>
<li>创建Maven项目</li>
<li>选择<mark>不使用Web项目骨架</mark></li>
</ol>
<p>按照正常的方式创建，不勾选<code>Create from archetype</code></p>
<ol start="3">
<li>
<p>输入Maven项目坐标创建项目</p>
</li>
<li>
<p><mark>在pom.xml设置打包方式为war</mark></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;project&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- ...... --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>......<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>.......<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;vesion&gt;</span>.......<span class="nt">&lt;/vesion&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- ...... --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><mark>补齐Maven Web项目缺失webapp的目录结构</mark></p>
</li>
</ol>
<p>文件&ndash;&gt;项目结构&ndash;&gt;Facet中按<code>+</code>然后选择<code>Web</code>，选择当前项目</p>
<p>修改webapp目录，并补齐Maven Web项目缺失<code>WEB-INF/web.xml</code>的目录结构，即可完成构建</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627204076090.png" loading="lazy" width="1686" height="533" />
</picture>

</p>
<hr>
<h1 id="在idea中使用tomcat" data-numberify>在IDEA中使用Tomcat<a class="anchor ms-1" href="#在idea中使用tomcat"></a></h1>
<p>在IDEA中集成使用Tomcat有两种方式，分别是集成本地Tomcat和Tomcat Maven插件。</p>
<h2 id="集成本地tomcat" data-numberify>集成本地Tomcat<a class="anchor ms-1" href="#集成本地tomcat"></a></h2>
<ol>
<li>右上角 编辑运行/调试配置 对话框&ndash;&gt;编辑配置&ndash;&gt;<code>+</code>&ndash;&gt;Tomcat服务器&ndash;&gt;<code>本地</code></li>
</ol>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627229992900.png" loading="lazy" width="1115" height="686" />
</picture>

</p>
<ol start="2">
<li>指定本地Tomcat的具体路径</li>
</ol>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627230313062.png" loading="lazy" width="1347" height="866" />
</picture>

</p>
<ol start="3">
<li>将开发项目部署项目到Tomcat中</li>
</ol>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627230913259.png" loading="lazy" width="877" height="775" />
</picture>

</p>
<blockquote>
<p><code>xxx.war</code> 和 <code>xxx.war exploded</code> 这两种部署项目模式的区别：</p>
<ul>
<li>war模式是将WEB工程打成war包，把war包发布到Tomcat服务器上</li>
<li>war exploded模式是将WEB工程以当前文件夹的位置关系发布到Tomcat服务器上</li>
</ul>
<p>war模式部署成功后，Tomcat的webapps目录下会有部署的项目内容</p>
<p>war exploded模式部署成功后，Tomcat的webapps目录下没有，而使用的是项目的target目录下的内容进行部署</p>
<p>建议选war模式进行部署，更符合项目部署的实际情况</p>
</blockquote>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627205657117.png" loading="lazy" width="1591" height="625" />
</picture>

</p>
<h2 id="tomcat-maven插件" data-numberify>Tomcat Maven插件<a class="anchor ms-1" href="#tomcat-maven插件"></a></h2>
<ol>
<li>
<p>在<code>pom.xml</code>中添加Tomcat插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">    	<span class="c">&lt;!--Tomcat插件 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.maven<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>tomcat7-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>使用Maven Helper插件快速启动项目，选中项目，右键 &ndash;&gt;Run Maven &ndash;&gt; tomcat7:run</p>
</li>
</ol>
<blockquote>
<p>安装Maven Helper插件：File &ndash;&gt; Settings &ndash;&gt; Plugins &ndash;&gt; Maven Helper &mdash;&gt; Install，重启IDEA</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>MyBatis</title>
      <link>/docs/spring/java-web/mybatis-base/</link>
      <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/mybatis-base/</guid>
      <description><![CDATA[MyBatis 介绍 MyBatis 是一款优秀的持久层框架，用于简化 JDBC 开发。 持久层： 是负责将数据到保存到数据库的那一层代码。即，操作数据库的Java代码为持久层。 而My]]></description>
      <content:encoded><![CDATA[<h1 id="mybatis-介绍" data-numberify>MyBatis 介绍<a class="anchor ms-1" href="#mybatis-介绍"></a></h1>
<p>MyBatis 是一款优秀的持久层框架，用于简化 JDBC 开发。</p>
<blockquote>
<p><strong>持久层：</strong></p>
<ul>
<li>
<p>是负责将数据到保存到数据库的那一层代码。即，操作数据库的Java代码为持久层。</p>
<p>而Mybatis就是对JDBC代码进行了封装。</p>
</li>
<li>
<p>持久层是JavaEE三层架构中的一层。</p>
<p>JavaEE三层架构：表现层、业务层、持久层。</p>
</li>
</ul>
<p><strong>框架：</strong></p>
<ul>
<li>框架就是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。</li>
<li>使用框架的好处：在框架的基础之上构建软件编写更加高效、规范、通用、可扩展。</li>
</ul>
</blockquote>
<p>使用JDBC存在以下问题:</p>
<ul>
<li>
<p>硬编码</p>
<p>手动注册驱动、获取连接、SQL语句等。</p>
</li>
<li>
<p>操作繁琐</p>
<p>手动设置参数、封装结果集等。</p>
</li>
</ul>
<p>使用Mybatis：</p>
<ul>
<li>硬编码可以配置到配置文件。</li>
<li>操作繁琐的地方Mybatis都自动完成。</li>
</ul>
<hr>
<h1 id="配置-mybatis" data-numberify>配置 Mybatis<a class="anchor ms-1" href="#配置-mybatis"></a></h1>
<p>使用Maven导入Mybatis。</p>
<ol>
<li>
<p>在 <code>pom.xml</code> 配置文件中导入坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--mybatis 依赖--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>3.5.5<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--mysql 驱动--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>5.1.46<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>编写 <code>mybatis-config.xml</code> 文件：</p>
<p>在模块下的 <code>resources</code> 目录下创建Mybatis的配置文件 <code>mybatis-config.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE configuration
</span></span></span><span class="line"><span class="cl"><span class="cp">        PUBLIC &#34;-//mybatis.org//DTD Config 3.0//EN&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">        &#34;http://mybatis.org/dtd/mybatis-3-config.dtd&#34;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 需要注意配置标签的前后顺序(按照MyBatis官方文档目录中的顺序去定义) --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 别名或包扫描 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;typeAliases&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- name属性的值是实体类所在包 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 包扫描后,别名默认为类名(不区分大小写) --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 使用别名可以简化映射配置文件中 resultType 属性值的编写 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;package</span> <span class="na">name=</span><span class="s">&#34;package.name.pojo&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/typeAliases&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">    environments:配置数据库的连接环境信息,
</span></span></span><span class="line"><span class="cl"><span class="c">      可以配置多个environment信息,
</span></span></span><span class="line"><span class="cl"><span class="c">      通过对应的default属性切换不同的environment
</span></span></span><span class="line"><span class="cl"><span class="c">  --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;environments</span> <span class="na">default=</span><span class="s">&#34;development&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 可以配置多个&lt;environment&gt; --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 使用 id 给每段环境起名 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 在 &lt;environments&gt; 中使用 default=&#39;environment-id&#39; 来指定使用哪儿段配置 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;environment</span> <span class="na">id=</span><span class="s">&#34;development&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;transactionManager</span> <span class="na">type=</span><span class="s">&#34;JDBC&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dataSource</span> <span class="na">type=</span><span class="s">&#34;POOLED&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">          数据库连接信息
</span></span></span><span class="line"><span class="cl"><span class="c">          注意url、username和password
</span></span></span><span class="line"><span class="cl"><span class="c">        --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driver&#34;</span> <span class="na">value=</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;jdbc:mysql:///mybatis1?useSSL=false&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;root&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;1234&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dataSource&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/environment&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;environment</span> <span class="na">id=</span><span class="s">&#34;test&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;transactionManager</span> <span class="na">type=</span><span class="s">&#34;JDBC&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dataSource</span> <span class="na">type=</span><span class="s">&#34;POOLED&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 数据库连接信息 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driver&#34;</span> <span class="na">value=</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;jdbc:mysql:///mybatis2?useSSL=false&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;root&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;1234&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dataSource&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/environment&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/environments&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;mappers&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 加载映射文件 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ...... --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 在下节中讲解 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/mappers&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/configuration&gt;</span>
</span></span></code></pre></div></li>
</ol>
<blockquote>
<p>更多MyBatis配置请查看官方文档：<a href="https://mybatis.net.cn/configuration.html" target="_blank" rel="noopener noreferrer">MyBatis文档——配置<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<hr>
<h1 id="使用-mybatis" data-numberify>使用 Mybatis<a class="anchor ms-1" href="#使用-mybatis"></a></h1>
<ul>
<li>
<p>编写 <code>Mapper</code>类</p>
<p>在 <code>java</code> 目录下创建与 <code>pojo</code> 对应的 <code>Mapper</code>接口 <code>ClassNameMapper.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ClassNameMapper</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>编写 SQL 映射文件</p>
<p>在模块的 <code>resources</code> 目录下创建与 <code>pojo</code> 对应的映射配置文件 <code>ClassNameMapper.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE mapper PUBLIC &#34;-//mybatis.org//DTD Mapper 3.0//EN&#34; &#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&#34;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- namespace:名称空间 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">&#34;package.name.mapper&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 相应的SQL语句（XML映射） --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mapper&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>在Myb
atis的配置文件 <code>mybatis-config.xml</code> 中加载映射文件：</p>
<ol>
<li>直接加载映射文件：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;mappers&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;mapper</span> <span class="na">resource=</span><span class="s">&#34;com/abc/mapper/ClassNameMapper.xml&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mappers&gt;</span>
</span></span></code></pre></div><p>使用这种方式加载映射文件，多个映射文件需要定义多个 <code>&lt;mapper&gt;</code>，过于繁琐。</p>
<ol start="2">
<li>Mapper代理方式（推荐）：</li>
</ol>
<p>如果 <code>Mapper</code>接口名称和SQL映射文件名称相同，并在同一目录下，则可以使用包扫描的方式简化SQL映射文件的加载。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;mappers&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;package</span> <span class="na">name=</span><span class="s">&#34;com.abc.mapper&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mappers&gt;</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>注意：使用Mapper代理方式加载映射文件，<code>Mapper</code>接口与其对应的配置文件，它们的路径（包名）要相同。</p>
<p>即，在java目录下的 <code>Mapper</code>接口的包名，要和映射配置文件在 <code>resources</code>下的路径要一致。</p>
<p>如 <code>Mapper</code>接口的包名为 <code>com.abc.mapper</code>，那么其映射配置文件的路径则为 <code>com/abc/mapper</code>。</p>
<p>了解 <code>Maven</code>项目结构，请查看：<a href="https://linna-cy.github.io/Maven/#maven%E6%A0%87%E5%87%86%E5%8C%96%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84" target="_blank" rel="noopener noreferrer">Maven标准化项目结构<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<h2 id="实例" data-numberify>实例<a class="anchor ms-1" href="#实例"></a></h2>
<p>在 Mapper 接口中定义方法，方法名就是SQL映射文件中SQL语句的id，并保持参数类型和返回值类型一致。</p>
<p>例如，为 <code>User</code>对象定义 <code>selectAll()</code>和 <code>selectById()</code>方法：</p>
<ul>
<li>
<p>创建 <code>User</code>表:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="n">mybatis</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">USE</span><span class="w"> </span><span class="n">mybatis</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">tb_user</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">username</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">password</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">gender</span><span class="w"> </span><span class="nb">CHAR</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">addr</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;zhangsan&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;123&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;男&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;北京&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;李四&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;234&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;女&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;天津&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;王五&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;11&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;男&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;西安&#39;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><code>pojo</code>包下定义 <code>User</code>实体类:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.pojo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">addr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getGender</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGender</span><span class="o">(</span><span class="n">String</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAddr</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">addr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAddr</span><span class="o">(</span><span class="n">String</span> <span class="n">addr</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">addr</span> <span class="o">=</span> <span class="n">addr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;User{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, username=&#39;&#34;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, password=&#39;&#34;</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, gender=&#39;&#34;</span> <span class="o">+</span> <span class="n">gender</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, addr=&#39;&#34;</span> <span class="o">+</span> <span class="n">addr</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>mapper</code>包下定义 <code>UserMapper</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.pojo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.pojo.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.Select</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">selectAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">selectById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 更多操作接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在 <code>resources</code>目录下创建与 <code>UserMapper</code>包名对应的路径，并添加 <code>UserMapper.xml</code>映射配置文件:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE mapper
</span></span></span><span class="line"><span class="cl"><span class="cp">        PUBLIC &#34;-//mybatis.org//DTD Mapper 3.0//EN&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">        &#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&#34;&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">&#34;com.linner.mapper.UserMapper&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">      select语句使用&lt;select&gt;
</span></span></span><span class="line"><span class="cl"><span class="c">        id          为对应Mapper类中的方法名
</span></span></span><span class="line"><span class="cl"><span class="c">        resultType  为对应的实体类, 使用了&lt;typeAliases&gt;包扫描, 省略了包名
</span></span></span><span class="line"><span class="cl"><span class="c">     --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectAll&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        SELECT *
</span></span><span class="line"><span class="cl">        FROM tb_user;
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/select&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectById&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        SELECT *
</span></span><span class="line"><span class="cl">        FROM tb_user
</span></span><span class="line"><span class="cl">        WHERE id = #{id};
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/select&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 更多XML映射 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mapper&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>resources</code>目录下，配置 <code>mybatis-config.xml</code>文件:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE configuration
</span></span></span><span class="line"><span class="cl"><span class="cp">        PUBLIC &#34;-//mybatis.org//DTD Config 3.0//EN&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">        &#34;http://mybatis.org/dtd/mybatis-3-config.dtd&#34;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 别名或包扫描 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 使用别名可以简化映射配置文件中 resultType 属性值的编写 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;typeAliases&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;package</span> <span class="na">name=</span><span class="s">&#34;com.linner.pojo&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/typeAliases&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;environments</span> <span class="na">default=</span><span class="s">&#34;development&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;environment</span> <span class="na">id=</span><span class="s">&#34;development&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;transactionManager</span> <span class="na">type=</span><span class="s">&#34;JDBC&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;dataSource</span> <span class="na">type=</span><span class="s">&#34;POOLED&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="c">&lt;!-- 数据库连接信息 --&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driver&#34;</span> <span class="na">value=</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;jdbc:mysql:///mybatis?useSSL=false&amp;useServerPerpStmts=true&amp;characterEncoding=UTF-8&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;root&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;1234&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/dataSource&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/environment&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/environments&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mappers&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- Mapper代理方式--&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;package</span> <span class="na">name=</span><span class="s">&#34;com.linner.mapper&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/mappers&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/configuration&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>编写测试类:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.mapper.UserMapper</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.pojo.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.io.Resources</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSession</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSessionFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSessionFactoryBuilder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserMapperTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSelectAll</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 加载mybatis的核心配置文件,获取SqlSessionFactory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">resource</span> <span class="o">=</span> <span class="s">&#34;./mybatis-config.xml&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">Resources</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">SqlSessionFactory</span> <span class="n">sqlSessionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取SqlSession对象,用它来执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">SqlSession</span> <span class="n">sqlSession</span> <span class="o">=</span> <span class="n">sqlSessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 执行sql语句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 3.1 方式一:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// List&lt;User&gt; users = sqlSession.selectList(&#34;com.linner.mapper.UserMapper.selectAll&#34;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 3.2 方式二:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 3.2.1 获取UserMapper接口的代理对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">UserMapper</span> <span class="n">userMapper</span> <span class="o">=</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">getMapper</span><span class="o">(</span><span class="n">UserMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 3.2.2 执行对应Mapper对象的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">selectAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 4. 处理数据(模拟)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">users</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 释放资源(仅需释放SqlSession对象)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sqlSession</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSelectById</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 模拟接收参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取sqlSessionFactory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">resource</span> <span class="o">=</span> <span class="s">&#34;./mybatis-config.xml&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">Resources</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">SqlSessionFactory</span> <span class="n">sqlSessionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取SqlSession对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">SqlSession</span> <span class="n">sqlSession</span> <span class="o">=</span> <span class="n">sqlSessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取Mapper接口的代理对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">UserMapper</span> <span class="n">userMapper</span> <span class="o">=</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">getMapper</span><span class="o">(</span><span class="n">UserMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 4. 执行方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">selectById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 处理数据(模拟)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sqlSession</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="xml-映射器" data-numberify>XML 映射器<a class="anchor ms-1" href="#xml-映射器"></a></h1>
<p>通过在 <code>XxxMapper.xml</code> 中使用元素来定义各种CRUD操作。</p>
<p>常用的元素如下（按照定义的顺序给出）：</p>
<ul>
<li><code>&lt;sql&gt;</code> – 可被其它语句引用的可重用语句块。</li>
<li><code>&lt;insert&gt;</code> – 映射插入语句。</li>
<li><code>&lt;update&gt;</code> – 映射更新语句。</li>
<li><code>&lt;delete&gt;</code> – 映射删除语句。</li>
<li><code>&lt;select&gt;</code> – 映射查询语句。</li>
</ul>
<h2 id="select" data-numberify>Select<a class="anchor ms-1" href="#select"></a></h2>
<h3 id="查询所有数据" data-numberify>查询所有数据<a class="anchor ms-1" href="#查询所有数据"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectAll&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT *
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">selectAll</span><span class="o">();</span>
</span></span></code></pre></div><ul>
<li><code>id</code>：相应 <code>Mapper</code> 接口中的方法名。</li>
<li><code>resultType</code>：相应 <code>Mapper</code> 接口中的返回值类型（可自动封装为对象，不区分大小写）。</li>
<li><code>Mapper</code> 接口返回值：返回一个<code>List&lt;User&gt;</code>。这个返回值可以是<code>User</code>、<code>List&lt;User&gt;</code>或<code>ArrayList&lt;User&gt;</code>等，MyBatis会根据返回值自动封装。</li>
</ul>
<h3 id="根据id字段查询" data-numberify>根据id字段查询<a class="anchor ms-1" href="#根据id字段查询"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectById&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT * FROM tb_user WHERE id = #{id};
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">User</span> <span class="nf">selectById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span></code></pre></div><p><code>&lt;select&gt;</code>中，<code>#{id}</code>为相应 <code>Mapper</code> 接口中的参数 <code>id</code>。<code>#{id}</code>被称为参数占位符，相当于JDBC中的<code>?</code>占位符。</p>
<h3 id="多条件动态查询" data-numberify>多条件动态查询<a class="anchor ms-1" href="#多条件动态查询"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectByCondition&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT *
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;where&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;username != null and username != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            username = #{username}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;password != null and password != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            AND password = #{password}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;gender != null and gender != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            AND gender = #{gender}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;addr != null and addr != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            AND addr = #{addr}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/where&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><p>多条件查询使用了动态SQL<code>&lt;where&gt;</code>和<code>&lt;if&gt;</code>。如果仅需查询某部分字段，仅仅使用SQL语句在实现上有难度。而Mybatis就提供了<u>动态SQL</u>方便了我们的实现。</p>
<ul>
<li>
<p><code>&lt;if&gt;</code>：能根据<code>User</code>对象的值来决定是否在SQL语句中加入其包含的语句。</p>
</li>
<li>
<p><code>&lt;where&gt;</code>：只会在子元素返回任何内容的情况下才插入<code>WHERE</code>子句。</p>
<p>而且，若子句的开头为<code>AND</code>或<code>OR</code>，<code>&lt;where&gt;</code>元素也会将它们去除。</p>
</li>
</ul>
<h3 id="单条件动态查询" data-numberify>单条件动态查询<a class="anchor ms-1" href="#单条件动态查询"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectByConditionSingle&#34;</span> <span class="na">resultMap=</span><span class="s">&#34;brandResultMap&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT *
</span></span><span class="line"><span class="cl">    FROM tb_brand
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;where&gt;</span><span class="c">&lt;!--使用where标签确保不会出错--&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;choose&gt;</span><span class="c">&lt;!--相当于switch--&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;when</span> <span class="na">test=</span><span class="s">&#34;status != null&#34;</span><span class="nt">&gt;</span><span class="c">&lt;!--相当于case--&gt;</span>
</span></span><span class="line"><span class="cl">                status = #{status}
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/when&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;when</span> <span class="na">test=</span><span class="s">&#34;companyName != null and companyName != &#39;&#39; &#34;</span><span class="nt">&gt;</span><span class="c">&lt;!--相当于case--&gt;</span>
</span></span><span class="line"><span class="cl">                company_name like #{companyName}
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/when&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;when</span> <span class="na">test=</span><span class="s">&#34;brandName != null and brandName != &#39;&#39; &#34;</span><span class="nt">&gt;</span><span class="c">&lt;!--相当于case--&gt;</span>
</span></span><span class="line"><span class="cl">                brand_name like #{brandName}
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/when&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!--没有条件输入很可能会报错,使用&lt;otherwise&gt;保底--&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!--如果没有使用&lt;where&gt;，则必须使用&lt;otherwise&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!--&lt;otherwise&gt;
</span></span></span><span class="line"><span class="cl"><span class="c">                1 = 1
</span></span></span><span class="line"><span class="cl"><span class="c">            &lt;/otherwise&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/choose&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/where&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><p>单条件动态查询使用了<code>&lt;where&gt;</code>、<code>&lt;choose&gt;</code>、<code>&lt;when&gt;</code>和<code>&lt;otherwise&gt;</code>，它们都是MyBatis提供的动态SQL元素。</p>
<p><code>&lt;choose&gt;</code>与<code>&lt;when&gt;</code>（必须）和<code>&lt;otherwise&gt;</code>元素配合使用。它会根据子元素<code>&lt;when&gt;</code>的<code>test</code>属性来判断要选择哪个<code>&lt;when&gt;</code>或<code>&lt;otherwise&gt;</code>元素。</p>
<p>如果<code>&lt;choose&gt;</code>外没有被<code>&lt;where&gt;</code>包裹则必须使用<code>&lt;otherwise&gt;</code>来包裹一个永真的条件SQL语句，以确保SQL语句不会出错。如果被<code>&lt;where&gt;</code>包裹了，<code>&lt;where&gt;</code>会根据需要判断是否要添加<code>WHERE</code>子句。</p>
<p><code>&lt;choose&gt;</code>、<code>&lt;when&gt;</code>和<code>&lt;otherwise&gt;</code>与<code>switch</code>语句的作用十分相似。</p>
<h2 id="insert" data-numberify>Insert<a class="anchor ms-1" href="#insert"></a></h2>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">&#34;add&#34;</span> <span class="na">useGeneratedKeys=</span><span class="s">&#34;true&#34;</span> <span class="na">keyProperty=</span><span class="s">&#34;id&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    INSERT INTO tb_user (username, password, ordered, gender,
</span></span><span class="line"><span class="cl">                          addr)
</span></span><span class="line"><span class="cl">    VALUES (#{username}, #{password}, #{ordered}, #{gender},
</span></span><span class="line"><span class="cl">            #{addr});
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/insert&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span></code></pre></div><p>接口方法直接传入对象即可，对象成员要与 <code>VALUES</code> 子句中的参数一一对应（参数符号中的名称要与对象的成员名称相同）。</p>
<blockquote>
<p>如果XML映射中只有一个参数，那么这个参数的名称不必与接口的参数名称相同。</p>
</blockquote>
<ul>
<li>
<p><code>id</code>：含义与 <code>&lt;insert&gt;</code> 的含义相同，为相应 <code>Mapper</code> 接口中的方法名（以下 <code>id</code>均为此含义，省略）。</p>
</li>
<li>
<p><code>useGeneratedKeys</code>：</p>
<ul>
<li>值为 <code>true</code> 时，Mybatis 会使用 JDBC 的 <code>getGeneratedKeys</code> 方法来取出由数据库内部生成的主键（如自增的主键）。</li>
<li>默认为 <code>false</code>。</li>
</ul>
</li>
<li>
<p><code>keyProperty</code>：<code>getGeneratedKeys</code> 获取到的主键值所要赋予的对象成员名。MyBatis 会使用 <code>getGeneratedKeys</code> 的返回值来设置它的值。</p>
<p>如，<code>keyProperty=&quot;id&quot;</code>——直接将获取到的主键值赋值给 <code>user.id</code>。</p>
<p>如果生成列不止一个，可以用逗号分隔多个属性名称。</p>
</li>
<li>
<p><code>Mapper</code> 接口返回值：<code>boolean</code>，插入成功返回 <code>true</code>，插入失败返回 <code>false</code>。</p>
<p>返回值也可以选择忽略，将<code>add()</code>接口的返回值设置为<code>void</code>即可。</p>
</li>
</ul>
<h2 id="update" data-numberify>Update<a class="anchor ms-1" href="#update"></a></h2>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;update</span> <span class="na">id=</span><span class="s">&#34;update&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    UPDATE tb_user
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;set&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;username != null and username != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            username = #{username},
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;password != null and password != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            password = #{password},
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;ordered != null&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            ordered = #{ordered},
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;gender != null and (gender == &#39;男&#39; or gender == &#39;女&#39;)&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            gender = #{gender},
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;addr != null and addr != &#39;&#39;&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            addr = #{addr}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/set&gt;</span>
</span></span><span class="line"><span class="cl">    WHERE id = #{id};
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/update&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span></code></pre></div><p>在 <code>&lt;update&gt;</code> 中有一些用 <code>&lt;set&gt;</code> 包裹起来的 <code>&lt;if&gt;</code>。这是因为需要使用 <code>&lt;set&gt;</code> 动态包含需要更新的列，忽略其它不更新的列。从而能根据<code>User</code>对象的值来决定要更新哪些数据，并且动态地改变SQL语句。</p>
<p>Update的Mapper接口返回值是<code>int</code>类型，返回更新的行数。同样可以将接口的返回值设置为<code>void</code>来忽略它。</p>
<h2 id="delete" data-numberify>Delete<a class="anchor ms-1" href="#delete"></a></h2>
<h3 id="删除单行数据" data-numberify>删除单行数据<a class="anchor ms-1" href="#删除单行数据"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;delete</span> <span class="na">id=</span><span class="s">&#34;deleteById&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    DELETE
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl">    WHERE id = #{id};
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/delete&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span></code></pre></div><h3 id="删除多行数据" data-numberify>删除多行数据<a class="anchor ms-1" href="#删除多行数据"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;delete</span> <span class="na">id=</span><span class="s">&#34;deleteByIds&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    DELETE
</span></span><span class="line"><span class="cl">    FROM tb_brand
</span></span><span class="line"><span class="cl">    WHERE id
</span></span><span class="line"><span class="cl">    IN
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">        &lt;foreach&gt;参数:
</span></span></span><span class="line"><span class="cl"><span class="c">            - item: 代表数组参数中的每个元素
</span></span></span><span class="line"><span class="cl"><span class="c">            - separator: 分隔符
</span></span></span><span class="line"><span class="cl"><span class="c">            - open: 插入开始符
</span></span></span><span class="line"><span class="cl"><span class="c">            - close: 插入结束符
</span></span></span><span class="line"><span class="cl"><span class="c">    --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;foreach</span> <span class="na">collection=</span><span class="s">&#34;ids&#34;</span> <span class="na">item=</span><span class="s">&#34;id&#34;</span> <span class="na">separator=</span><span class="s">&#34;,&#34;</span> <span class="na">open=</span><span class="s">&#34;(&#34;</span> <span class="na">close=</span><span class="s">&#34;)&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        #{id}
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/foreach&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/delete&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">deleteByIds</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">&#34;ids&#34;</span><span class="o">)</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">ids</span><span class="o">);</span>
</span></span></code></pre></div><p>Mybatis提供了 <code>&lt;foreach&gt;</code> 标签遍历数组，拼接SQL语句。<code>&lt;foreach&gt;</code> 同样也是<u>动态SQL</u>。</p>
<blockquote>
<p>更多XML映射器请查看官方文档：<a href="https://mybatis.net.cn/sqlmap-xml.html" target="_blank" rel="noopener noreferrer">MyBatis文档——XML映射器<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<h2 id="结果映射" data-numberify>结果映射<a class="anchor ms-1" href="#结果映射"></a></h2>
<h3 id="resultmap" data-numberify>resultMap<a class="anchor ms-1" href="#resultmap"></a></h3>
<p>假设SQL表中的字段与实体类的成员变量名无法一一对应，会导致SQL语句的传参出现问题。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_id</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_name</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_password</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_gender</span><span class="w"> </span><span class="nb">CHAR</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_addr</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">addr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// setter 和 getter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>那么可以使用<code>&lt;resultMap&gt;</code>元素来对表字段和成员名做一个映射（结果映射）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">    &lt;resultMap&gt;:
</span></span></span><span class="line"><span class="cl"><span class="c">        - id: 唯一标识
</span></span></span><span class="line"><span class="cl"><span class="c">        - type: 映射的类型,支持别名
</span></span></span><span class="line"><span class="cl"><span class="c">--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;resultMap</span> <span class="na">id=</span><span class="s">&#34;userResultMap&#34;</span> <span class="na">type=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">        两种标签:
</span></span></span><span class="line"><span class="cl"><span class="c">            - &lt;id&gt;: 完成主键字段的映射
</span></span></span><span class="line"><span class="cl"><span class="c">                - column: 表的列名
</span></span></span><span class="line"><span class="cl"><span class="c">                - property: 实体类的属性名
</span></span></span><span class="line"><span class="cl"><span class="c">            - &lt;result&gt;: 完成一般字段的映射
</span></span></span><span class="line"><span class="cl"><span class="c">                - column: 表的列名
</span></span></span><span class="line"><span class="cl"><span class="c">                - property: 实体类的属性名
</span></span></span><span class="line"><span class="cl"><span class="c">    --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;id</span> <span class="na">column=</span><span class="s">&#34;user_id&#34;</span> <span class="na">property=</span><span class="s">&#34;id&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&#34;user_name&#34;</span> <span class="na">property=</span><span class="s">&#34;userame&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&#34;user_password&#34;</span> <span class="na">property=</span><span class="s">&#34;password&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&#34;user_gender&#34;</span> <span class="na">property=</span><span class="s">&#34;gender&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&#34;user_addr&#34;</span> <span class="na">property=</span><span class="s">&#34;addr&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/resultMap&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectAll&#34;</span> <span class="na">resultMap=</span><span class="s">&#34;userResultMap&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT *
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><blockquote>
<p>要使用结果映射，需要把<code>&lt;select&gt;</code>中的<code>resultType</code>属性替换为<code>resultMap</code>，并且其属性值为<code>&lt;resultMap&gt;</code>的<code>id</code>值。</p>
</blockquote>
<h3 id="自动映射" data-numberify>自动映射<a class="anchor ms-1" href="#自动映射"></a></h3>
<p>当自动映射查询结果时，MyBatis 会获取结果中返回的列名并在 Java 类中查找相同名字的属性（忽略大小写）。</p>
<p>接上节例子，使用SQL语句的 <code>AS</code> 来实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectAll&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT 
</span></span><span class="line"><span class="cl">        user_id AS &#34;id&#34;,
</span></span><span class="line"><span class="cl">        user_name AS &#34;username&#34;,
</span></span><span class="line"><span class="cl">        user_password AS &#34;password&#34;,
</span></span><span class="line"><span class="cl">        user_gender AS gender,
</span></span><span class="line"><span class="cl">        user_addr AS &#34;addr&#34;
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><blockquote>
<ul>
<li>
<p>通常数据库列使用大写字母组成的单词命名，单词间用下划线分隔；而 Java 属性一般遵循驼峰命名法约定。为了在这两种命名方式之间启用自动映射，需要将 <code>mapUnderscoreToCamelCase</code> 设置为 <code>true</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 配置mybatis自动转换为驼峰式命名 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;settings&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&#34;mapUnderscoreToCamelCase&#34;</span> <span class="na">value=</span><span class="s">&#34;true&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/settings&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;resultMap&gt;</code>和自动映射可以混用。</p>
</li>
</ul>
</blockquote>
<h2 id="参数" data-numberify>参数<a class="anchor ms-1" href="#参数"></a></h2>
<p>MyBatis有两种参数：</p>
<ul>
<li><code>#{p}</code> —— 会自动转义。</li>
<li><code>${p}</code> —— 不会自动转义。</li>
</ul>
<blockquote>
<p>官方文档：<a href="https://mybatis.net.cn/sqlmap-xml.html#Parameters" target="_blank" rel="noopener noreferrer">MyBatis——XML映射器参数<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<p><strong>MyBatis 参数封装</strong>:</p>
<ul>
<li>
<p>单个参数:</p>
<ol>
<li>
<p>POJO类型: 直接使用,保证 <strong>属性名</strong> 和 <strong>参数占位符名称</strong> 一致</p>
</li>
<li>
<p>Map类型: 直接使用,保证 <strong>键名</strong> 和 <strong>参数占位符名称</strong> 一致</p>
</li>
<li>
<p>Collection: 封装为Map集合</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg0&#34;</span><span class="o">,</span> <span class="n">collection</span><span class="err">集合</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;collection&#34;</span><span class="o">,</span> <span class="n">collection</span><span class="err">集合</span><span class="o">)</span>
</span></span></code></pre></div><ul>
<li>使用<code>@Param</code>注解，替换Map集合中默认的arg键名</li>
</ul>
</li>
<li>
<p>List: 封装为Map集合</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg0&#34;</span><span class="o">,</span> <span class="n">list</span><span class="err">集合</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;collection&#34;</span><span class="o">,</span> <span class="n">list</span><span class="err">集合</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;list&#34;</span><span class="o">,</span> <span class="n">list</span><span class="err">集合</span><span class="o">)</span>
</span></span></code></pre></div><ul>
<li>使用<code>@Param</code>注解,替换Map集合中默认的arg键名</li>
</ul>
</li>
<li>
<p>Array: 封装为Map集合</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg0&#34;</span><span class="o">,</span> <span class="err">数组</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;array&#34;</span><span class="o">,</span> <span class="err">数组</span><span class="o">)</span>
</span></span></code></pre></div><ul>
<li>使用<code>@Param</code>注解,替换Map集合中默认的arg键名</li>
</ul>
</li>
<li>
<p>其他类型: 直接使用,且占位符名称和参数名称可以不相同</p>
</li>
</ol>
</li>
<li>
<p>多个参数: 封装为Map集合</p>
<ul>
<li>
<p>每个参数有两个键:</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg0&#34;</span><span class="o">,</span> <span class="err">参数值</span><span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;param1&#34;</span><span class="o">,</span> <span class="err">参数值</span><span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg1&#34;</span><span class="o">,</span> <span class="err">参数值</span><span class="mi">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;param2&#34;</span><span class="o">,</span> <span class="err">参数值</span><span class="mi">2</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>使用<code>@Param</code>注解,替换Map集合中默认的arg键名:</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Param</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">)</span> <span class="err">参数类型</span> <span class="err">参数名</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">,</span> <span class="err">参数值</span><span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;param1&#34;</span><span class="o">,</span> <span class="err">参数值</span><span class="mi">1</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<p>示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">selectById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">selectByCondition</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="nd">@Param</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">)</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="nd">@Param</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">)</span> <span class="n">String</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="注解实现crud" data-numberify>注解实现CRUD<a class="anchor ms-1" href="#注解实现crud"></a></h2>
<p>对于简单的SQL语句来说，使用注解开发会比配置文件开发更加方便。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Select</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;SELECT * FROM tb_user WHERE id = #{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">User</span> <span class="nf">selectById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span></code></pre></div><blockquote>
<p>注意：注解是用来替换映射配置文件方式配置的，所以使用了注解，就不需要再映射配置文件中书写对应的 <code>statement</code>。</p>
</blockquote>
<p>Mybatis 针对 CURD 操作都提供了对应的注解：</p>
<ul>
<li>查询 ：<code>@Select</code></li>
<li>添加 ：<code>@Insert</code></li>
<li>修改 ：<code>@Update</code></li>
<li>删除 ：<code>@Delete</code></li>
</ul>
<p>注解适合用于完成简单功能，而使用配置文件来完成复杂功能。如果使用注解来完成动态SQL之类的复杂功能，就需要使用到MyBatis提供的SQL构建器来完成。详情请阅读官方SQL构建器文档：<a href="https://mybatis.net.cn/statement-builders.html" target="_blank" rel="noopener noreferrer">MyBatis文档——SQL语句构建器<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<hr>
<h1 id="动态sql" data-numberify>动态SQL<a class="anchor ms-1" href="#动态sql"></a></h1>
<p>动态 SQL 是 MyBatis 的强大特性之一。</p>
<p>MyBatis提供的动态SQL元素有：</p>
<ul>
<li><code>&lt;if&gt;</code></li>
<li><code>&lt;choose&gt;</code> (<code>&lt;when&gt;</code>, <code>&lt;otherwise&gt;</code>)</li>
<li><code>&lt;trim&gt;</code> (<code>&lt;where&gt;</code>, <code>&lt;set&gt;</code>)</li>
<li><code>&lt;foreach&gt;</code></li>
</ul>
<blockquote>
<p>更多与动态SQL请查看官方文档：<a href="https://mybatis.net.cn/dynamic-sql.html" target="_blank" rel="noopener noreferrer">MyBatis文档——动态SQL<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<hr>
<h1 id="sqlsessionfactory工具类抽取" data-numberify>SqlSessionFactory工具类抽取<a class="anchor ms-1" href="#sqlsessionfactory工具类抽取"></a></h1>
<p>MyBatis重复代码会造成一些问题:</p>
<ul>
<li>不利于后期的维护。</li>
<li>SqlSessionFactory工厂类进行重复创建。</li>
</ul>
<p>对于Mybatis的基础操作出现的重复代码，可以使用一个静态代码块来自动加载：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SqlSessionFactoryUtils</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">SqlSessionFactory</span> <span class="n">sqlSessionFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 静态代码块会随着类的加载而自动执行，且只执行一次
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">resource</span> <span class="o">=</span> <span class="s">&#34;mybatis-config.xml&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">Resources</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">sqlSessionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">SqlSessionFactory</span> <span class="nf">getSqlSessionFactory</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">sqlSessionFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>工具类抽取以后，以后在对Mybatis的SqlSession进行操作的时候，就可以直接使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">SqlSessionFactory</span> <span class="n">sf</span> <span class="o">=</span> <span class="n">SqlSessionFactoryUtils</span><span class="o">.</span><span class="na">getSqlSessionFactory</span><span class="o">();</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>集合论</title>
      <link>/blog/2022/09/%E9%9B%86%E5%90%88%E8%AE%BA/</link>
      <pubDate>Fri, 02 Sep 2022 12:43:41 +0800</pubDate>
      
      <guid>/blog/2022/09/%E9%9B%86%E5%90%88%E8%AE%BA/</guid>
      <description><![CDATA[集合的概念 A set is a group of objects. (simplest way) By a set we mean any collection M into a whole of definite disinct objects m (which we called elements of M) of our perception or thought. (Cantor&rsquo;s way) 集合（set）是由 &lt;u&gt;指定范围 &lt;/]]></description>
      <content:encoded><![CDATA[<h1 id="集合的概念" data-numberify>集合的概念<a class="anchor ms-1" href="#集合的概念"></a></h1>
<blockquote>
<ul>
<li>A <strong>set</strong> is a group of objects. (simplest way)</li>
<li>By a <strong>set</strong> we mean any collection M into a whole of definite disinct objects m (which we called <strong>elements</strong> of M) of our perception or thought. (Cantor&rsquo;s way)</li>
</ul>
</blockquote>
<p><strong>集合</strong>（set）是由 <code>&lt;u&gt;</code>指定范围 <code>&lt;/u&gt;</code>内的 <code>&lt;u&gt;</code>满足给定条件的所有对象 <code>&lt;/u&gt;</code>聚集在一起构成的，指定范围内的每一个对象称为这个集合的<strong>元素</strong>（element）。</p>
<ul>
<li>集合中的元素是<strong>无序</strong>的。</li>
<li>集合中的元素是<strong>不同</strong>的（即，同个集合中相同或重复的元素被认为是一个元素）。</li>
</ul>
<p>通常情况下，</p>
<ul>
<li>用带（或不带）下标的 <code>&lt;u&gt;</code>大写 <code>&lt;/u&gt;</code>英文字母表示 <code>&lt;u&gt;</code>集合 <code>&lt;/u&gt;</code>：$A,B,C,\dots,A_1,B_1,C_1,\dots$</li>
<li>用带（或不带）下标的 <code>&lt;u&gt;</code>小写 <code>&lt;/u&gt;</code>英文字母表示 <code>&lt;u&gt;</code>元素 <code>&lt;/u&gt;</code>：$a,b,c,\dots,a_1,b_1,c_1,\dots$</li>
</ul>
<p>ZFC 公理化集合论：</p>
<ul>
<li>外延公理，</li>
<li>空集存在公理，</li>
<li>无序对公理，</li>
<li>并集公理，</li>
<li>幂集公理，</li>
<li>无穷公理，</li>
<li>替换公理，</li>
<li>正则公理，</li>
<li>选择公理。</li>
</ul>
<hr>
<h2 id="常见的集合" data-numberify>常见的集合<a class="anchor ms-1" href="#常见的集合"></a></h2>
<ul>
<li>空集 $\emptyset$；</li>
<li>正整数集 $\mathbf{N^+}$ or $\mathbf{W}$：$1,2,3,\cdots$</li>
<li>自然数集 $\mathbf{N}$：$0,1,2,3,\cdots$</li>
<li>整数集 $\mathbf{Z}$：$\cdots,-2,-1,0,1,2,\cdots$</li>
<li>质数/素数集 $\mathbf{P}$：$2,3,5,7,\cdots$</li>
<li>有理数集 $\mathbf{Q}$；</li>
<li>无理数集 $\mathbf{I}$；</li>
<li>实数集 $\mathbf{R}$；</li>
<li>复数集 $\mathbf{C}$；</li>
<li>$\cdots\cdots$</li>
</ul>
<p>关系：</p>
<p>$$
\mathbf{W} \subseteq \mathbf{N} \subseteq \mathbf{Z} \subseteq \mathbf{Q} \subseteq \mathbf{R} \subseteq \mathbf{C}
$$</p>
<hr>
<h1 id="集合的表示方法" data-numberify>集合的表示方法<a class="anchor ms-1" href="#集合的表示方法"></a></h1>
<h2 id="枚举法" data-numberify>枚举法<a class="anchor ms-1" href="#枚举法"></a></h2>
<p><strong>枚举法</strong>又称<strong>列举法</strong>或<strong>显示法</strong>，是枚举出集合中的所有或部分元素（要能看出其他元素之间的规律）。</p>
<p>Example：</p>
<ul>
<li>枚举出集合中的所有元素：$A = {a,b,c,d}$；</li>
<li>枚举出集合中的部分元素：$B = {1,3,5,\cdots,2n+1,\cdots}$。</li>
</ul>
<hr>
<h2 id="叙述法" data-numberify>叙述法<a class="anchor ms-1" href="#叙述法"></a></h2>
<p><strong>叙述法</strong>又称<strong>隐式法</strong>，是通过刻画（或用自然语言描述）集合中元素所具备的某种特性来表示集合的方法，通常用符号 $P(x)$ 来表示不同对象 $x$ 所具有的性质 $P$ ，由 $P(x)$ 所定义的集合常记为</p>
<p>$$
{x|P(x)}。
$$</p>
<hr>
<h2 id="文氏图" data-numberify>文氏图<a class="anchor ms-1" href="#文氏图"></a></h2>
<p><strong>文氏图</strong>（<strong>Venn diagram</strong>）又叫<strong>维恩图</strong>，用于展示集合或类之间的大致关系。</p>
<p><picture><img class="img-fluid " alt="维恩图" src="/blog/2022/09/%E9%9B%86%E5%90%88%E8%AE%BA/%E7%BB%B4%E6%81%A9%E5%9B%BE.png" loading="lazy" width="1980" height="563" />
</picture>

</p>
<p>一般用方向表示全集，用圆形表示某一特定集合。</p>
<hr>
<h2 id="递归指定集合法" data-numberify>递归指定集合法<a class="anchor ms-1" href="#递归指定集合法"></a></h2>
<p>递归指定集合法是指通过计算规则定义集合中的元素的方法。</p>
<p>Example：</p>
<p>设 $a_0 = 1$，$a_{i+1}=2a_i(i \ge 0)$，定义 $S={a_0,a_1,\cdots,a_n,\cdots}={a_k|k\ge0}$，可以得出集合 $S$ 为</p>
<p>$$
S={1,2,2^2,\cdots,2^n,\cdots}。
$$</p>
<hr>
<h2 id="归纳法" data-numberify>归纳法<a class="anchor ms-1" href="#归纳法"></a></h2>
<ol>
<li>
<p>指出集合至少要包含的元素</p>
<ul>
<li>第一部分：基础，指出某些最 <code>&lt;u&gt;</code>基本元素 <code>&lt;/u&gt;</code>属于某集合；</li>
<li>第二部分：归纳，指出 <code>&lt;u&gt;</code>由基本元素构造新元素的方法 <code>&lt;/u&gt;</code>；</li>
</ul>
</li>
<li>
<p>指出集合至多要包含的元素</p>
<ul>
<li>第三部分：极小性，指出该 <code>&lt;u&gt;</code>集合的界限 <code>&lt;/u&gt;</code>。</li>
</ul>
</li>
</ol>
<hr>
<h1 id="基数" data-numberify>基数<a class="anchor ms-1" href="#基数"></a></h1>
<p>Definition：</p>
<p>集合 $A$ 中的元素个数称为集合的<strong>基数</strong>（base number），记为 $|A|$。</p>
<p>对于任意集合 $A$ 来说，</p>
<ul>
<li>若 $|A|$ 是 <code>&lt;u&gt;</code>有限的 <code>&lt;/u&gt;</code>，称该集合为<strong>有限集</strong>（finite set）；</li>
<li>若 $|A|$ 是 <code>&lt;u&gt;</code>无限的 <code>&lt;/u&gt;</code>，称该集合为<strong>无限集</strong>（infinite set）。</li>
</ul>
<hr>
<h1 id="集合与元素的关系" data-numberify>集合与元素的关系<a class="anchor ms-1" href="#集合与元素的关系"></a></h1>
<p>元素与集合之间有两种关系：</p>
<ul>
<li>
<p>属于：如 “$a$ 是集合 $A$ 中的元素” 或 “$a$ 属于 $A$ ” 记为</p>
<p>$$
a \in A。
$$</p>
</li>
<li>
<p>不属于：如 “$a$ 不是是集合 $A$ 中的元素” 或 “$a$ 不属于 $A$” 记为</p>
<p>$$
a \notin A。
$$</p>
</li>
</ul>
<hr>
<h1 id="集合与集合的关系" data-numberify>集合与集合的关系<a class="anchor ms-1" href="#集合与集合的关系"></a></h1>
<h2 id="外延性原理" data-numberify>外延性原理<a class="anchor ms-1" href="#外延性原理"></a></h2>
<p>Theorem：</p>
<p>两个集合 $A$ 和 $B$ <strong>相等</strong>，当且仅当它们的<strong>元素完全相同</strong>，记为 $A\ =\ B$，否则 $A$ 和 $B$ <strong>不相等</strong>，记为 $A\ \neq\ B$。</p>
<hr>
<h2 id="包含关系" data-numberify>包含关系<a class="anchor ms-1" href="#包含关系"></a></h2>
<p>Definitions：</p>
<p>设 $A$，$B$ 是任意两个集合，</p>
<ul>
<li>
<p><strong>包含与不包含</strong>：如果 $B$ 的每个元素都是 $A$ 中的元素，则称 $B$ 是 $A$ 的<strong>子集</strong>（subset），也称 ${B}$ <strong>被</strong> ${A}$ <strong>包含</strong>或 ${A}$ <strong>包含</strong> ${B}$，记作 ${B \subseteq A}$ 或 $A \supseteq B$，称 $\subseteq$ 或 $\supseteq$ 为<strong>被包含关系</strong>（included relation）或<strong>包含关系</strong>（inclusion relation）；否则记作 ${B \nsubseteq A}$。</p>
<p>“$\subseteq$” 定义的数学语言描述为：</p>
<p>$$
B \subseteq A<br>
\Longleftrightarrow\ \forall x，
如果 x \subseteq B，
则 x \subseteq A。
$$</p>
<p>由子集的定义可推出 $A \subseteq A$。</p>
</li>
<li>
<p><strong>真包含</strong>：如果 $B \subseteq A$ 并且 $A \neq B$，则称 $B$ 是 $A$ 的<strong>真子集</strong>（proper subset），也称做 ${B}$ <strong>被</strong> ${A}$ <strong>真包含</strong>或 ${A}$ <strong>真包含</strong> ${B}$，记作 ${B \subset A}$，称 $\subset$ 为<strong>真包含关系</strong>（properly inclusion relation）。</p>
<p>“$\subset$” 定义的数学语言描述为：</p>
<p>$$
B \subset A \Longleftrightarrow 对 \forall x，若 x \in B，则 x \in A，并且 \exists y \in A，但 y \notin B。
$$</p>
</li>
</ul>
<hr>
<h2 id="相等关系" data-numberify>相等关系<a class="anchor ms-1" href="#相等关系"></a></h2>
<p>Theorem：</p>
<p>设 $A$，$B$ 为任意两个集合，则 ${A\ =\ B}\ \Longleftrightarrow\ {A \subseteq B}$ 并且 ${B \subseteq A}$。</p>
<hr>
<h1 id="常见特殊的集合" data-numberify>常见特殊的集合<a class="anchor ms-1" href="#常见特殊的集合"></a></h1>
<h2 id="空集" data-numberify>空集<a class="anchor ms-1" href="#空集"></a></h2>
<p>Definition：</p>
<p>不含任何元素的集合叫做<strong>空集</strong>（empty set），记作 $\emptyset$。</p>
<p>$$
\emptyset = {x|x \neq x}
$$</p>
<ul>
<li>空集是一切集合的子集。</li>
<li>空集是<strong>绝对唯一</strong>的。</li>
</ul>
<p>Example：</p>
<ul>
<li>$|\emptyset| = 0$，</li>
<li>$|{\emptyset}| = 1$。</li>
</ul>
<hr>
<h3 id="证明空集是绝对唯一的" data-numberify>证明空集是绝对唯一的<a class="anchor ms-1" href="#证明空集是绝对唯一的"></a></h3>
<blockquote>
<p>对 “唯一性” 的证明通常采用反证法（先假设 “不唯一”，得出矛盾，从而证明 “唯一性” 是正确的）。</p>
</blockquote>
<p>证明：</p>
<p>假设有两个不同的空集 $\emptyset_1$ 和 $\emptyset_2$ ，由空集是一切集合的子集得</p>
<p>$$
\empty_1 \subseteq \emptyset_2\ 和\ \emptyset_2 \subseteq \emptyset_1
$$</p>
<p>根据集合的相等关系，得 $\emptyset_1 = \emptyset_2$，与假设矛盾。因此空集是绝对唯一的。</p>
<hr>
<h2 id="全集" data-numberify>全集<a class="anchor ms-1" href="#全集"></a></h2>
<p>Definition：</p>
<p>在一个相对固定的范围内，包含此范围内所有元素的集合，称为<strong>全集</strong>或<strong>论集</strong>（universal set），用 $U$ 或 $E$ 表示。</p>
<p>在维恩图中一般用方形表示全集。</p>
<p><picture><img class="img-fluid " alt="全集" src="/blog/2022/09/%E9%9B%86%E5%90%88%E8%AE%BA/%E5%85%A8%E9%9B%86.png" loading="lazy" width="1021" height="563" />
</picture>

</p>
<p>全集是<strong>相对唯一</strong>的。</p>
<hr>
<h2 id="m-元子集" data-numberify>m 元子集<a class="anchor ms-1" href="#m-元子集"></a></h2>
<p>Definition：</p>
<p>如果一个集合含有 $n$ 个元素，则称集合 $A$ 为 $n$ 元子集，称含有 $A$ 中 $m(0 \le m \le n)$个元素的子集为它的 $m$ 元子集。</p>
<p>对于任意 $n$ 元集合 $A$，它的 $m$ 元（$0 \le m \le n$）子集（包含空集）个数为 $C_n^m$ 个，所以不同的子集个数为：</p>
<p>$$
C_n^0 + C_n^1 + \cdots + C_n^n = (1 + 1)^n = 2^n。
\tag{1}
$$</p>
<hr>
<h2 id="幂集" data-numberify>幂集<a class="anchor ms-1" href="#幂集"></a></h2>
<p>Definition：</p>
<p>设 $A$ 为任意集合，把 $A$ 的所有不同子集构成的集合叫做 $A$ 的<strong>幂集</strong>（power set），记作 $P(A)$，即</p>
<p>$$
P(A)\ =\ {x|x \subseteq A}。
$$</p>
<p>由公式 $(1)$ 可得 $|A| = 2^n(n=|A|)$。</p>
<p>幂集也叫做<strong>集族</strong>（family of set）或<strong>集合的集合</strong>。</p>
<blockquote>
<p>对集族的研究在数学方面、知识库和表处理语言以及人工智能等方面都有十分重要的意义。</p>
</blockquote>
<hr>
<h1 id="集合的运算" data-numberify>集合的运算<a class="anchor ms-1" href="#集合的运算"></a></h1>
<h2 id="集合运算的定义" data-numberify>集合运算的定义<a class="anchor ms-1" href="#集合运算的定义"></a></h2>
<p>Definition：</p>
<p>设 $U$ 是全集，$A$、$B$ 是 $U$ 的两个子集，则</p>
<ol>
<li>
<p>“$\cup$” <strong>并运算</strong>（union operation）：$A \cup B = {x|x \in A\ or\ x \in B}$ 是 $A$ 与 $B$ 的<strong>并集</strong>（union）。</p>
<p><picture><img class="img-fluid " alt="并集" src="/blog/2022/09/%E9%9B%86%E5%90%88%E8%AE%BA/%E5%B9%B6%E9%9B%86.png" loading="lazy" width="1585" height="828" />
</picture>

</p>
<p>并集可代表两个集合 “相加”。</p>
</li>
<li>
<p>“$\cap$” <strong>交运算</strong>（intersection operation）：$A \cap B = {x|x \in A\ and\ B}$ 是 $A$ 与 $B$ 的<strong>交集</strong>（intersection）。</p>
<p><picture><img class="img-fluid " alt="交集" src="/blog/2022/09/%E9%9B%86%E5%90%88%E8%AE%BA/%E4%BA%A4%E9%9B%86.png" loading="lazy" width="1585" height="828" />
</picture>

</p>
</li>
<li>
<p>“$\overline{A}$” <strong>补运算</strong>（complement operation）：$\overline{A} = U - A$ 是集合 $A$ 的<strong>补集</strong>（complement）（也可记为 $A&rsquo;$、$~A$、$A^c$ 等）。$A$ 对于全集 $U$ 的补集是<strong>绝对补集</strong>。</p>
<p><picture><img class="img-fluid " alt="补集" src="/blog/2022/09/%E9%9B%86%E5%90%88%E8%AE%BA/%E8%A1%A5%E9%9B%86.png" loading="lazy" width="1116" height="828" />
</picture>

</p>
</li>
<li>
<p>“$-$” <strong>差运算</strong>（subtraction operation）：$A-B={x|x \in A\ and\ x \notin B} = A \cap \overline{B}$ 是 $A$ 与 $B$ 的<strong>差集</strong>（subtraction)，又称 $B$ 在 $A$ 中的<strong>相对补集</strong>。</p>
<p><picture><img class="img-fluid " alt="差集" src="/blog/2022/09/%E9%9B%86%E5%90%88%E8%AE%BA/%E5%B7%AE%E9%9B%86.png" loading="lazy" width="1585" height="828" />
</picture>

</p>
<p>当 $A=U$ 时，$A-B=\overline{B}$。</p>
</li>
<li>
<p>“$\oplus$” <strong>对称差运算</strong>（symmetric difference operation）：$A \oplus B = {x|(x \in A\ and\ x \notin B)\ or\ (x\in B\ and\ x \notin A} = (A-B) \cup (B-A)$ 是 $A$ 与 $B$ 的<strong>对称差集</strong>（symmetric difference of set）。</p>
<p><picture><img class="img-fluid " alt="相对补集" src="/blog/2022/09/%E9%9B%86%E5%90%88%E8%AE%BA/%E7%9B%B8%E5%AF%B9%E8%A1%A5%E9%9B%86.png" loading="lazy" width="1585" height="828" />
</picture>

</p>
</li>
</ol>
<p>扩展：</p>
<p>设 $A_1,A_2,\cdots,A_n$ 是任意 $n$ 个集合，则</p>
<ul>
<li>
<p>这 $\mathbf n$ <strong>个集合的并集</strong>是包含那些<strong>至少是这组集合中一个集合成员的元素</strong>的集合，即</p>
<p>$$
\displaystyle \bigcup_{i=1}^{n}{A_i}
= A_1 \cup A_2 \cup \cdots \cup A_n
= {x|x \in A_1\ or\ x \in A_2 \cdots or\ x \in A_n}
$$</p>
</li>
<li>
<p>这 $\mathbf n$ <strong>个集合的交集</strong>是那些属于<strong>这组集合中所有集合成员的元素</strong>的集合，即</p>
<p>$$
\displaystyle \bigcap_{i=1}^{n}{A_i}
= A_1 \cap A_2 \cap \cdots \cap A_n
= {x|x \in A_1\ and\ x \in A_2 \cdots and\ x \in A_n}
$$</p>
</li>
</ul>
<p>当 $n$ 无限增大时，可记为</p>
<ul>
<li>$\displaystyle \bigcup^{\infin}_{i=1}A_i = A_1 \cup A_2 \cup \cdots$</li>
<li>$\displaystyle \bigcap^{\infin}_{i=1}A_i = A_1 \cap A_2 \cap \cdots$</li>
</ul>
<hr>
<h2 id="集合运算的基本等式" data-numberify>集合运算的基本等式<a class="anchor ms-1" href="#集合运算的基本等式"></a></h2>
<p>设 $U$ 为全集，$A$，$B$，$C$ 为任意集合，</p>
<table>
<thead>
<tr>
<th style="text-align:left">等式</th>
<th style="text-align:center">性质</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$A \cup A = A$<br>$A \cap A = A$</td>
<td style="text-align:center">幂等率</td>
</tr>
<tr>
<td style="text-align:left">$A \cup B = B \cup A$<br>$A \cap B = B \cap A$</td>
<td style="text-align:center">交换律</td>
</tr>
<tr>
<td style="text-align:left">$A \cup (B \cup C) = (A \cup B) \cup C$<br>$A \cap (B \cap C) = (A \cap B) \cap C$</td>
<td style="text-align:center">结合律</td>
</tr>
<tr>
<td style="text-align:left">$A \cup \emptyset = A$<br>$A \cap U = A$</td>
<td style="text-align:center">同一律</td>
</tr>
<tr>
<td style="text-align:left">$A \cup U = U$<br>$A \cap \emptyset = \emptyset$</td>
<td style="text-align:center">零律</td>
</tr>
<tr>
<td style="text-align:left">$A \cup (B \cap C) = (A \cup B) \cap (A \cup C)$<br>$A \cap (B \cup C) = (A \cap B) \cup (A \cap C)$</td>
<td style="text-align:center">分配律</td>
</tr>
<tr>
<td style="text-align:left">$A \cup (A \cap B) = A$<br>$A \cap (A \cup B)$</td>
<td style="text-align:center">吸收律</td>
</tr>
<tr>
<td style="text-align:left">$\overline{A} \cap A = \emptyset$</td>
<td style="text-align:center">矛盾律</td>
</tr>
<tr>
<td style="text-align:left">$\overline{A} \cup A = U$</td>
<td style="text-align:center">排中律</td>
</tr>
<tr>
<td style="text-align:left">$\overline{\overline{A}}=A$</td>
<td style="text-align:center">双重否定律</td>
</tr>
<tr>
<td style="text-align:left">$\overline{A \cup B} = \overline{A} \cap \overline{B}$<br>$\overline{A \cap B} = \overline{A}$</td>
<td style="text-align:center">德摩根律</td>
</tr>
</tbody>
</table>
<p>Example：</p>
<p><picture><img class="img-fluid " alt="分配律" src="/blog/2022/09/%E9%9B%86%E5%90%88%E8%AE%BA/%E5%88%86%E9%85%8D%E5%BE%8B-16308401576391.png" loading="lazy" width="3655" height="1381" />
</picture>

</p>
<p>证明德摩根律的等式之一：$\overline{A \cup B} = \overline{A} \cap \overline{B}$</p>
<p>证明：</p>
<ol>
<li>
<p>证明 $\overline{A \cup B} \subseteq \overline{A} \cap \overline{B}$</p>
<p>$\begin{aligned} \forall x \in \overline{A \cup B} \quad &amp; \Rightarrow\ x \notin A \cup B\ \Rightarrow\ x \notin A\ and\ x \notin B\ &amp; \Rightarrow x \in \overline{A}\ and\ x \in \overline{B}\ \Rightarrow\ x \in \overline{A} \cap \overline{B}， \end{aligned}$</p>
<p>即 $\overline{A \cup B} \subseteq \overline{A} \cap \overline{B}$；</p>
</li>
<li>
<p>证明 $\overline{A} \cap \overline{B} \subseteq \overline{A \cup B}$</p>
<p>$\begin{aligned} \forall x \in \overline{A} \cap \overline{B} \quad &amp; \Rightarrow\ x \in \overline{A}\ and\ x \in \overline{B}\ \Rightarrow\ x \notin A\ and\ x \notin B\ &amp; \Rightarrow\ x \notin A \cup B\ \Rightarrow\ x \in \overline{A} \cap \overline{B}， \end{aligned}$</p>
<p>即 $\overline{A} \cap \overline{B} \subseteq \overline{A \cup B}$。</p>
</li>
</ol>
<p>综上可得 $\overline{A \cup B} = \overline{A} \cap \overline{B}$。</p>
<hr>
<h1 id="无限集合" data-numberify>无限集合<a class="anchor ms-1" href="#无限集合"></a></h1>
<p>有限集合与无限集合的根本区别是：对于无限集合，表面上个数完全不相等的两个集合之间仍可能存在等势关系，如集合与真子集之间。</p>
<h2 id="等势" data-numberify>等势<a class="anchor ms-1" href="#等势"></a></h2>
<p><strong>冯·诺依曼的自然数定义</strong>：</p>
<p>基于基数，利用一个集合的序列来定义自然数。</p>
<ol>
<li>$\emptyset \in \mathbf{N}$；</li>
<li>若 $n \in \mathbf{N}$，则 $n&rsquo; \equiv n \cup {n} \in \mathbf{N}$。</li>
</ol>
<p>从而，这个 <code>&lt;u&gt;</code>集合序列的基数 <code>&lt;/u&gt;</code>可以来定义自然数：</p>
<ul>
<li>$0 \equiv \emptyset$；</li>
<li>$1 \equiv \emptyset \cup {\emptyset} = {\emptyset} = {0}$；</li>
<li>$2 \equiv {\emptyset} \cup {{\emptyset}} = {\emptyset, {\emptyset}} = {0,1}$；</li>
<li>$\cdots$</li>
<li>$n \equiv {0,1,2,3,\cdots,n-1}$；</li>
<li>$\cdots$</li>
<li>$\mathbf{N} \equiv {0,1,2,\cdots,n,\cdots}$。</li>
</ul>
<blockquote>
<p>实际上，任意含有 $n$ 个元素的集合都可以用 $n$ 表示。即，任意两个基数相同的集合之间都可以建立一一对应关系。</p>
</blockquote>
<hr>
<p>Definition：</p>
<p>设 $A$，$B$ 为两个集合，若在 $A$，$B$ 之间存在一种一一对应的关系：</p>
<p>$$
\Psi:\ A \rightarrow B
$$</p>
<p>则称 $A$ 与 $B$ 是<strong>等势的</strong>（equipotential），记作：</p>
<p>$$
A \sim B
$$</p>
<p>也称集合 $A$、$B$ <strong>等势</strong>（equipotent）。</p>
<p>由等势定义可得，如果 $A = B$，那么 $A \sim B$，反之则不一定成立。</p>
<p>Theorem：</p>
<ol>
<li>两个有限集合等式当且仅当它们有相同的元素个数。</li>
<li>有限集合不和其任何真子集等势。</li>
<li><code>&lt;u&gt;</code>可数集合可以与其可数的真子集等势 <code>&lt;/u&gt;</code>。</li>
</ol>
<hr>
<h2 id="可数集合" data-numberify>可数集合<a class="anchor ms-1" href="#可数集合"></a></h2>
<p>Definition：</p>
<p>凡与自然数集合 $\mathbf{N}$ 等势的集合，称之为<strong>可数集合</strong>（countable set），该类集合的基数记为 $\aleph_0$（aleph，阿列夫）。</p>
<p>Example：</p>
<p>证明以下集合是可数集合，</p>
<ol>
<li>
<p>$O^+ = {x|x \in \mathbf{N}，x是正奇数}$</p>
<p>在 $O^+$ 与 $\mathbf{N}$ 之间建立一个一一对应关系 $\varphi_1 : \mathbf{N} \rightarrow O^+$：</p>
<p>$$
\begin{matrix}
0&amp; 1&amp; 2&amp; \cdots&amp; n&amp; \cdots\
\downarrow&amp; \downarrow&amp; \downarrow&amp; \downarrow&amp; \downarrow&amp; \downarrow\
1&amp; 3&amp; 5&amp; \cdots&amp; 2n+1&amp; \cdots&amp;\
\end{matrix}
$$</p>
<p>所以 $O^+$ 是可数集合。</p>
</li>
<li>
<p>$P = {x|x \in \mathbf{N}，x是素数}$</p>
<p>在 $P$ 与 $\mathbf{N}$ 之间建立一个一一对应关系 $\varphi_2 : \mathbf{N} \rightarrow P$：</p>
<p>$$
\begin{matrix}
0&amp; 1&amp; 2&amp; 3&amp; 4&amp; \cdots\
\downarrow&amp; \downarrow&amp; \downarrow&amp; \downarrow&amp; \downarrow&amp; \downarrow\
2&amp; 3&amp; 5&amp; 7&amp; 11&amp; \cdots&amp;\
\end{matrix}
$$</p>
<p>所以 $P$ 是可数集合。</p>
</li>
<li>
<p>有理数集合 $\mathbf{Q}$</p>
<p>将 $\mathbf{Q}$ 中的所有元素都写成 $p/q$（$p$、$q$ 是整数，且 $q \neq 0$）的形式，从 $0/1^{[0]}$ 开始，将所有有理数与自然数一一配对（其中 $p/q^{[n]}$ 的上标 $[n]$ 代表对应于该有理数的自然数）：</p>
<p><picture><img class="img-fluid " alt="证明Q是可数集合" src="/blog/2022/09/%E9%9B%86%E5%90%88%E8%AE%BA/%E8%AF%81%E6%98%8EQ%E6%98%AF%E5%8F%AF%E6%95%B0%E9%9B%86%E5%90%88-16308441770882.jpg" loading="lazy" width="1362" height="360" />
</picture>

</p>
<p>所以 $\mathbf{Q}$ 是可数集合。</p>
</li>
</ol>
<hr>
<h2 id="不可数集合" data-numberify>不可数集合<a class="anchor ms-1" href="#不可数集合"></a></h2>
<p>Definition：</p>
<p>开区间 $(0,1)$ 称为不可数集合，凡<strong>与开区间 $(0,1)$ 等势</strong>的集合，都称为<strong>不可数集合</strong>，该类集合的基数记为 $\aleph$（或 $\aleph_1$）。</p>
<p>Example：</p>
<ol>
<li>
<p>闭区间 $[0,1]$ 是不可数集合。</p>
<p>证明：在 $[0,1]$ 和 $(0,1)$ 之间建立如下对应关系：</p>
<p>$$
R:
\begin{cases}
\begin{matrix}
0&amp; \rightarrow&amp; 1/4 \
1&amp; \rightarrow&amp; 1/2 \
\cfrac{1}{2^n}&amp; \rightarrow&amp; \cfrac{1}{2^{n+2}},&amp; n=1,2,3,\cdots \
n&amp; \rightarrow&amp; n,&amp; 其他 n \in (0,1)\
\end{matrix}
\end{cases}
$$</p>
<p>显然 $[0,1]$ 与 $(0,1)$ 是等势的，所以 $[0,1]$ 是不可数集合。</p>
</li>
<li>
<p>实数集 $\mathbf R$ 是不可数集合。</p>
<p>证明：在实数集 $\mathbf R$ 和开区间 $(0,1)$ 之间建立如下对应关系：</p>
<p>$$
n \rightarrow \tan{\pi\bigg(\cfrac{2n-1}{2}\bigg)}
$$</p>
<p>显然 $(0,1)$ 与 $\mathbf{R}$ 之间是等势的，所以 $\mathbf{R}$ 是一个不可数集合。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Druid 数据库连接池</title>
      <link>/docs/spring/java-web/druid/</link>
      <pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/druid/</guid>
      <description><![CDATA[数据库连接池 数据库连接池是个容器, 负责分配, 管理数据库连接 (Connection). 数据库连接池允许应用程序重复使用一个现有的数据库连接, 而不是再重新建立一个. 从而]]></description>
      <content:encoded><![CDATA[<h1 id="数据库连接池" data-numberify>数据库连接池<a class="anchor ms-1" href="#数据库连接池"></a></h1>
<p>数据库连接池是个容器, 负责分配, 管理数据库连接 (Connection).</p>
<p>数据库连接池允许应用程序重复使用一个现有的数据库连接, 而不是再重新建立一个. 从而减少资源浪费.</p>
<p>数据库连接池会自动释放超过最大空闲时间的数据库连接 (强制释放), 来避免因为没有释放数据库连接而引起的数据库连接遗漏.</p>
<p>使用数据库连接池的好处:</p>
<ul>
<li>资源可以重用</li>
<li>提升系统响应速度</li>
<li>避免数据库连接遗漏</li>
</ul>
<p>在通常情况下使用JDBC, 有可能会反复地创建和销毁 <code>Connection</code>对象. 这样重复创建销毁的过程特别耗费计算机的性能和时间.</p>
<p>而数据库使用了数据库连接池后，就能达到Connection对象的复用.</p>
<p>连接池是在一开始就创建好了一些连接 (Connection) 对象存储起来. 用户需要连接数据库时, 不需要自己创建连接, 而只需要从连接池中获取一个连接进行使用, 使用完毕后再将连接对象归还给连接池; 这样就可以起到资源重用, 也节省了频繁创建连接销毁连接所花费的时间, 从而提升了系统响应的速度.</p>
<p>常见的数据库连接池有:</p>
<ul>
<li>DBCP</li>
<li>C3P0</li>
<li>Druid</li>
</ul>
<hr>
<h1 id="druid" data-numberify>Druid<a class="anchor ms-1" href="#druid"></a></h1>
<h2 id="配置-druid" data-numberify>配置 Druid<a class="anchor ms-1" href="#配置-druid"></a></h2>
<ul>
<li>
<p><a href="https://repo1.maven.org/maven2/com/alibaba/druid/" target="_blank" rel="noopener noreferrer">下载Druid jar包<i class="fas fa-external-link-square-alt ms-1"></i></a>, 并导入:</p>
<p>在项目中, 将下载好的jar包放入项目的 <code>lib</code>目录中.</p>
<ul>
<li>然后点击鼠标右键&ndash;&gt;Add as Library (添加为库).</li>
<li>在添加为库文件的时候，有如下三个选项:
<ul>
<li>
<p>Global Library: 全局有效</p>
</li>
<li>
<p>Project Library: 项目有效</p>
</li>
<li>
<p>Module Library: 模块有效</p>
<p>选择Module Library.</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>在项目目录下定义Druid配置文件 <code>druid.properties</code>:</p>
<pre tabindex="0"><code>driverClassName=com.mysql.jdbc.Driver
url=jdbc:mysql:///db1?useSSL=false&amp;useServerPrepStmts=true
username=root
password=1234
# 初始化连接数量
initialSize=5
# 最大连接数
maxActive=10
# 最大等待时间
maxWait=3000
</code></pre></li>
<li>
<p>加载配置文件:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Properties</span> <span class="n">prop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">prop</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;demo/src/druid.properties&#34;</span><span class="o">));</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="使用-druid" data-numberify>使用 Druid<a class="anchor ms-1" href="#使用-druid"></a></h2>
<p>Java中从数据库连接池获取连接对象, 使用的是官方提供的数据库连接池标准接口, 由第三方组织实现此接口. 该接口提供了获取连接的功能:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Connection</span> <span class="nf">getConnection</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                  <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>因此, 使用Druid获取数据库连接还需要以下两步:</p>
<ul>
<li>
<p>获取数据库连接池对象:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"> <span class="n">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="n">DruidDataSourceFactory</span><span class="o">.</span><span class="na">createDataSource</span><span class="o">(</span><span class="n">prop</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p>从数据库连接池中获取连接 (<code>Connection</code>):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="操作实例" data-numberify>操作实例<a class="anchor ms-1" href="#操作实例"></a></h1>
<h2 id="需求分析" data-numberify>需求分析<a class="anchor ms-1" href="#需求分析"></a></h2>
<p>完成商品品牌数据的增删改查操作</p>
<ul>
<li>查询：查询所有数据</li>
<li>添加：添加品牌</li>
<li>修改：根据id修改</li>
<li>删除：根据id删除</li>
</ul>
<h2 id="环境准备" data-numberify>环境准备<a class="anchor ms-1" href="#环境准备"></a></h2>
<ol>
<li>
<p>创建数据库表:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 删除tb_brand表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">tb_brand</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 创建tb_brand表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tb_brand</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="p">,</span><span class="w"> </span><span class="c1">-- id 主键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">brand_name</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w"> </span><span class="c1">-- 品牌名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">company_name</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w"> </span><span class="c1">-- 企业名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">ordered</span><span class="w"> </span><span class="nb">INT</span><span class="p">,</span><span class="w"> </span><span class="c1">-- 排序字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">description</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span><span class="w"> </span><span class="c1">-- 描述信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="c1">-- 状态：0：禁用  1：启用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 添加数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_brand</span><span class="w"> </span><span class="p">(</span><span class="n">brand_name</span><span class="p">,</span><span class="w"> </span><span class="n">company_name</span><span class="p">,</span><span class="w"> </span><span class="n">ordered</span><span class="p">,</span><span class="w"> </span><span class="n">description</span><span class="p">,</span><span class="w"> </span><span class="n">status</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;三只松鼠&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;三只松鼠股份有限公司&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;好吃不上火&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="s1">&#39;华为&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;华为技术有限公司&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="s1">&#39;小米&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;小米科技有限公司&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">50</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;are you ok&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>创建 <code>pojo</code>包, 并在包中添加 <code>Brand</code>实体类:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">pojo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">* 品牌
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Brand</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span> <span class="c1">// id 主键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">brandName</span><span class="o">;</span> <span class="c1">// 品牌名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">companyName</span><span class="o">;</span> <span class="c1">// 企业名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">ordered</span><span class="o">;</span> <span class="c1">// 排序字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">description</span><span class="o">;</span> <span class="c1">// 描述信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">status</span><span class="o">;</span> <span class="c1">// 状态：0：禁用  1：启用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getBrandName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">brandName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBrandName</span><span class="o">(</span><span class="n">String</span> <span class="n">brandName</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">brandName</span> <span class="o">=</span> <span class="n">brandName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCompanyName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">companyName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCompanyName</span><span class="o">(</span><span class="n">String</span> <span class="n">companyName</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">companyName</span> <span class="o">=</span> <span class="n">companyName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getOrdered</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ordered</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setOrdered</span><span class="o">(</span><span class="n">Integer</span> <span class="n">ordered</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">ordered</span> <span class="o">=</span> <span class="n">ordered</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">description</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDescription</span><span class="o">(</span><span class="n">String</span> <span class="n">description</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">description</span> <span class="o">=</span> <span class="n">description</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getStatus</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">status</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStatus</span><span class="o">(</span><span class="n">Integer</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">status</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Brand{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, brandName=&#39;&#34;</span> <span class="o">+</span> <span class="n">brandName</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, companyName=&#39;&#34;</span> <span class="o">+</span> <span class="n">companyName</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, ordered=&#34;</span> <span class="o">+</span> <span class="n">ordered</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, description=&#39;&#34;</span> <span class="o">+</span> <span class="n">description</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, status=&#34;</span> <span class="o">+</span> <span class="n">status</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="实现操作" data-numberify>实现操作<a class="anchor ms-1" href="#实现操作"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pojo.Brand</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.alibaba.druid.pool.DruidDataSourceFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.sql.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Properties</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 品牌数据的增删改查操作
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BrandDAO</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取Connection:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// - 导入jar包 &amp; 定义配置文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// - 加载配置文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Properties</span> <span class="n">prop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">prop</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;demo/src/druid.properties&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// - 获取连接池对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">dataSource</span> <span class="o">=</span> <span class="n">DruidDataSourceFactory</span><span class="o">.</span><span class="na">createDataSource</span><span class="o">(</span><span class="n">prop</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 查询所有
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 1. SQL: SELECT * FROM tb_brand
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 2. 参数: 不需要
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 3. 结果: ArrayList&lt;Brand&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Brand</span><span class="o">&gt;</span> <span class="nf">selectAll</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取数据库连接Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *2. 定义SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT * FROM tb_brand&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取pstmt对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">        <span class="c1">// *4. 设置参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *6. 处理结果: ArrayList&lt;Brand&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Brand</span> <span class="n">brand</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Brand</span><span class="o">&gt;</span> <span class="n">brands</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// - 遍历结果集
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 1. 获取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&#34;id&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">brandName</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;brand_name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">companyName</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;company_name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">ordered</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&#34;ordered&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">description</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;description&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">status</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&#34;status&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 2. 封装Brand对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">brand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Brand</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setCompanyName</span><span class="o">(</span><span class="n">companyName</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setOrdered</span><span class="o">(</span><span class="n">ordered</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setDescription</span><span class="o">(</span><span class="n">description</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 3. 装载ArrayList集合
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">brands</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">brand</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 7. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 8. 返回结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">brands</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 添加
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 1. SQL:
</span></span></span><span class="line"><span class="cl"><span class="cm">         INSERT INTO tb_brand(
</span></span></span><span class="line"><span class="cl"><span class="cm">            brand_name,
</span></span></span><span class="line"><span class="cl"><span class="cm">            company_name,
</span></span></span><span class="line"><span class="cl"><span class="cm">            ordered,
</span></span></span><span class="line"><span class="cl"><span class="cm">            description,
</span></span></span><span class="line"><span class="cl"><span class="cm">            status)
</span></span></span><span class="line"><span class="cl"><span class="cm">         VALUES(?,?,?,?,?)
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 2. 参数: 除了id之外的所有参数信息
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 3. 结果: boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">Brand</span> <span class="n">brand</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取数据库连接Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *2. 定义SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">                INSERT INTO tb_brand(
</span></span></span><span class="line"><span class="cl"><span class="s">                    brand_name,
</span></span></span><span class="line"><span class="cl"><span class="s">                    company_name,
</span></span></span><span class="line"><span class="cl"><span class="s">                    ordered,
</span></span></span><span class="line"><span class="cl"><span class="s">                    description,
</span></span></span><span class="line"><span class="cl"><span class="s">                    status)
</span></span></span><span class="line"><span class="cl"><span class="s">                VALUES(?,?,?,?,?)&#34;&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取pstmt对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *4. 设置参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getBrandName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getCompanyName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getOrdered</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getStatus</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span> <span class="c1">// 返回影响的行数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 7. 返回结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 修改
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 1. SQL:
</span></span></span><span class="line"><span class="cl"><span class="cm">         UPDATE tb_brand
</span></span></span><span class="line"><span class="cl"><span class="cm">         SET brand_name=?,
</span></span></span><span class="line"><span class="cl"><span class="cm">            company_name=?,
</span></span></span><span class="line"><span class="cl"><span class="cm">            ordered=?,
</span></span></span><span class="line"><span class="cl"><span class="cm">            description=?,
</span></span></span><span class="line"><span class="cl"><span class="cm">            status=?
</span></span></span><span class="line"><span class="cl"><span class="cm">         WHERE id=?
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 2. 参数: 所有
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 3. 结果: boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">update</span><span class="o">(</span><span class="n">Brand</span> <span class="n">brand</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取数据库连接Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *2. 定义SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">                UPDATE tb_brand
</span></span></span><span class="line"><span class="cl"><span class="s">                SET brand_name=?,
</span></span></span><span class="line"><span class="cl"><span class="s">                    company_name=?,
</span></span></span><span class="line"><span class="cl"><span class="s">                    ordered=?,
</span></span></span><span class="line"><span class="cl"><span class="s">                    description=?,
</span></span></span><span class="line"><span class="cl"><span class="s">                    status=?
</span></span></span><span class="line"><span class="cl"><span class="s">                WHERE id=?&#34;&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取pstmt对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *4. 设置参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getBrandName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getCompanyName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getOrdered</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getStatus</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">6</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span> <span class="c1">// 返回影响的行数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 8. 返回结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 删除
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 1. SQL:DELETE FROM tb_brand WHERE id=?
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 2. 参数: id
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 3. 结果: boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">deleteById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取数据库连接Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *2. 定义SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;DELETE FROM tb_brand WHERE id=?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取pstmt对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *4. 设置参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span> <span class="c1">// 返回影响的行数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 7. 返回结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Maven 基础</title>
      <link>/docs/spring/java-web/maven-base/</link>
      <pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/maven-base/</guid>
      <description><![CDATA[Maven 简介 Apache Maven是专门用于管理和构建Java项目的工具, 它基于项目对象模型 (POM) 的概念, 通过一小段描述信息来管理项目的构建, 报告和文档. Mav]]></description>
      <content:encoded><![CDATA[<h1 id="maven-简介" data-numberify>Maven 简介<a class="anchor ms-1" href="#maven-简介"></a></h1>
<p>Apache Maven是专门用于管理和构建Java项目的工具, 它基于项目对象模型 (POM) 的概念, 通过一小段描述信息来管理项目的构建, 报告和文档.</p>
<p>Maven的主要功能有:</p>
<ul>
<li>提供了一套标准化的项目结构.</li>
<li>提供了一套标准化的构建流程 (编译, 测试, 打包, 发布&hellip;).</li>
<li>提供了一套依赖管理机制.</li>
</ul>
<h2 id="maven-模型" data-numberify>Maven 模型<a class="anchor ms-1" href="#maven-模型"></a></h2>
<p>Maven模型包含:</p>
<ul>
<li>项目对象模型 (Project Object Model)</li>
<li>依赖管理模型 (Dependency)</li>
<li>插件 (Plugin)</li>
</ul>
<p>Maven模型图示:</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/maven-base/1662167147568.png" loading="lazy" width="740" height="333" />
</picture>

</p>
<p>其中紫色框框起来的部分, 就是用来完成标准化构建流程.</p>
<h2 id="仓库" data-numberify>仓库<a class="anchor ms-1" href="#仓库"></a></h2>
<p>Maven仓库是项目中依赖的第三方库, 这个库所在的位置叫做仓库 (在Maven的术语中，仓库是一个位置, place).</p>
<p>Maven中, 任何一个依赖、插件或者项目构建的输出，都可以称之为构件.
Maven仓库能帮助我们管理构件 (主要是JAR), 它就是放置所有JAR文件 (WAR, ZIP, POM等等) 的地方.</p>
<p>仓库有三种类型:</p>
<ul>
<li>本地 (local)</li>
<li>中央 (central)</li>
<li>远程 (remote)</li>
</ul>
<p>在项目中使用坐标引入对应依赖jar包后, Maven会按照本地仓库 &ndash;&gt; 远程仓库&ndash;&gt; 中央仓库的顺序去查找相应的jar包. 只要jar包存在, 如果是在本地仓库则直接使用, 而如果在远程仓库或中央仓库, Maven则将jar包自动下载到本地仓库.</p>
<h3 id="本地仓库" data-numberify>本地仓库<a class="anchor ms-1" href="#本地仓库"></a></h3>
<p>本地仓库在第一次执行maven命令的时候才被创建.</p>
<p>运行 Maven 的时候, Maven 所需要的任何构件都是直接从本地仓库获取的. 如果本地仓库没有, 它会首先尝试从远程仓库下载构件至本地仓库, 然后再使用本地仓库的构件.</p>
<p>Maven 本地仓库默认为用户主目录 (USER HOME) 中的 <code>.m2/repository</code>.</p>
<h3 id="中央仓库" data-numberify>中央仓库<a class="anchor ms-1" href="#中央仓库"></a></h3>
<p>Maven 中央仓库是由 Maven 社区提供的仓库, 其中包含了大量常用的库.</p>
<p>中央仓库包含了绝大多数流行的开源Java构件, 以及源码、作者信息、SCM、信息、许可证信息等. 一般来说，简单的Java项目依赖的构件都可以在这里下载到.</p>
<p>Maven 社区提供了一个 URL: <a href="http://search.maven.org/#browse" target="_blank" rel="noopener noreferrer">search.maven.org/#browse<i class="fas fa-external-link-square-alt ms-1"></i></a>, 来浏览中央仓库的内容.</p>
<h3 id="远程仓库" data-numberify>远程仓库<a class="anchor ms-1" href="#远程仓库"></a></h3>
<p>远程仓库是开发人员自己定制的仓库, 包含了所需要的代码库或者其他工程中用到的 jar 文件. 一般是由公司团队搭建的私有仓库.</p>
<hr>
<h1 id="maven标准化项目结构" data-numberify>Maven标准化项目结构<a class="anchor ms-1" href="#maven标准化项目结构"></a></h1>
<p>Maven提供了一套标准化的项目结构, 所有的IDE使用Maven构建的项目完全一样. 所以, 使用Maven创建的项目在所有IDE中可以通用.</p>
<p>使用Maven构建的项目结构示例:</p>
<ul>
<li>📁<code>project_name</code> &mdash; 项目主目录
<ul>
<li>📁<code>src</code> &mdash; 源代码和测试代码文件目录
<ul>
<li>📁<code>main</code> &mdash; 源代码文件目录
<ul>
<li>📁<code>java</code> &mdash; 源代码Java文件目录</li>
<li>📁<code>resourcs</code> &mdash; 源代码配置文件目录</li>
</ul>
</li>
<li>📁<code>test</code> &mdash; 测试代码文件目录
<ul>
<li>📁<code>java</code> &mdash; 测试代码Java文件目录</li>
<li>📁<code>resource</code> &mdash; 测试代码配置</li>
</ul>
</li>
<li>📄<code>pom.xml</code> &mdash; 项目核心配置文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="项目核心配置文件-pomxml" data-numberify>项目核心配置文件 pom.xml<a class="anchor ms-1" href="#项目核心配置文件-pomxml"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0
</span></span></span><span class="line"><span class="cl"><span class="s">                      http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 模型版本 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- The Basics --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 公司或者组织的唯一标志 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>...<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 当前项目唯一ID --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>...<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 本项目目前所处的版本号 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>...<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 打包的机制 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;packaging&gt;</span>...<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 项目依赖关系 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependencies&gt;</span>...<span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;parent&gt;</span>...<span class="nt">&lt;/parent&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependencyManagement&gt;</span>...<span class="nt">&lt;/dependencyManagement&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;modules&gt;</span>...<span class="nt">&lt;/modules&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- pom常量 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;properties&gt;</span>...<span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- Build Settings --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;build&gt;</span>...<span class="nt">&lt;/build&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;reporting&gt;</span>...<span class="nt">&lt;/reporting&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- More Project Information --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 项目的名称 --&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;name&gt;</span>...<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 项目的详细描述 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;description&gt;</span>...<span class="nt">&lt;/description&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 项目主页的URL --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;url&gt;</span>...<span class="nt">&lt;/url&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;inceptionYear&gt;</span>...<span class="nt">&lt;/inceptionYear&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;licenses&gt;</span>...<span class="nt">&lt;/licenses&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;organization&gt;</span>...<span class="nt">&lt;/organization&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;developers&gt;</span>...<span class="nt">&lt;/developers&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;contributors&gt;</span>...<span class="nt">&lt;/contributors&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- Environment Settings --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;issueManagement&gt;</span>...<span class="nt">&lt;/issueManagement&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;ciManagement&gt;</span>...<span class="nt">&lt;/ciManagement&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;mailingLists&gt;</span>...<span class="nt">&lt;/mailingLists&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;scm&gt;</span>...<span class="nt">&lt;/scm&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;prerequisites&gt;</span>...<span class="nt">&lt;/prerequisites&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 发现依赖和扩展的远程仓库列表 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;repositories&gt;</span>...<span class="nt">&lt;/repositories&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;pluginRepositories&gt;</span>...<span class="nt">&lt;/pluginRepositories&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;distributionManagement&gt;</span>...<span class="nt">&lt;/distributionManagement&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;profiles&gt;</span>...<span class="nt">&lt;/profiles&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>pom.xml中描述符的根为<code>&lt;project&gt;</code>.</p>
<h2 id="maven坐标" data-numberify>Maven坐标<a class="anchor ms-1" href="#maven坐标"></a></h2>
<ul>
<li>Maven 中的坐标是资源的唯一标识.</li>
<li>使用坐标来<u>定义项目</u>或<u>引入项目中需要的依赖</u>.</li>
</ul>
<p>Maven坐标的主要组成 (在pom.xml文件中):</p>
<ul>
<li><code>&lt;groupId&gt;</code>: 公司或者组织的唯一标志. 配置时生成的路径也是由此生成. 如<code>com.linner.blog</code> (通常是域名反写), Maven会将该项目打成的jar包放本地路径：<code>/com/linner/blog</code>.</li>
<li><code>&lt;artifactId&gt;</code>: 当前项目的唯一ID (通常是模块名称). 一个groupId下面可能多个项目, 就是靠<code>&lt;artifactId&gt;</code>来区分.</li>
<li><code>&lt;version&gt;</code>: 本项目目前所处的版本号.</li>
</ul>
<p>Maven 中, 根据 <code>groupId</code>、<code>artifactId</code>、<code>version</code> 组合成 <code>groupId:artifactId:version</code> 来唯一识别一个 jar 包. 这三个标签构成了Maven坐标.</p>
<h2 id="其他基本配置" data-numberify>其他基本配置<a class="anchor ms-1" href="#其他基本配置"></a></h2>
<ul>
<li><code>&lt;modelVersion&gt;</code>: 指定pom.xml符合哪个版本的描述符. Maven2和3只能为<code>4.0.0</code>.</li>
<li><code>&lt;packaging&gt;</code>: 打包的机制. 有以下几种:
<ul>
<li>pom</li>
<li>jar &mdash; 默认值</li>
<li>maven-plugin</li>
<li>ejb</li>
<li>war</li>
<li>ear</li>
<li>rar</li>
<li>par</li>
</ul>
</li>
<li><code>&lt;dependencies&gt;</code>: 定义本项目的依赖关系.</li>
</ul>
<hr>
<h1 id="maven依赖管理" data-numberify>Maven依赖管理<a class="anchor ms-1" href="#maven依赖管理"></a></h1>
<p>依赖管理是指管理项目中所依赖的第三方资源 (jar包, 插件). 而Maven使用标准的<mark>坐标</mark>配置来管理各种依赖, 只需要简单的配置就可以完成依赖管理.</p>
<p>Maven的依赖资源是在pom.xml配置文件中的<code>&lt;dependencies&gt;</code>描述的. 其结构如下:</p>
<ul>
<li><code>&lt;project&gt;</code>
<ul>
<li>&hellip;</li>
<li><code>&lt;dependencies&gt;</code>
<ul>
<li><code>&lt;dependency&gt;</code>: 一个<code>&lt;dependency&gt;</code>代表一个依赖项.
<code>&lt;groupId&gt;</code>, <code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>的含义与<code>&lt;project&gt;</code>的子标签<code>&lt;groupId&gt;</code>, <code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>的含义相同.
<ul>
<li><code>&lt;groupId&gt;</code></li>
<li><code>&lt;artifactId&gt;</code></li>
<li><code>&lt;version&gt;</code></li>
<li><code>&lt;type&gt;</code>: 依赖的打包机制. 对应<code>&lt;packaging&gt;</code>的类型, 有pom, jar(默认), maven-plugin, ejb, war, ear, rar, par.</li>
<li><code>&lt;scope&gt;</code>: 任务的类路径 (编译和运行时, 测试等) 以及如何限制依赖关系的传递性.
<table>
<thead>
<tr>
<th style="text-align:center">scope取值</th>
<th style="text-align:center">有效范围(compile, runtime, test)</th>
<th style="text-align:center">依赖传递</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>compile</code></td>
<td style="text-align:center">all</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>provided</code></td>
<td style="text-align:center">compile, test</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center"><code>runtime</code></td>
<td style="text-align:center">runtime, test</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>test</code></td>
<td style="text-align:center">test</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center"><code>system</code></td>
<td style="text-align:center">compile, test</td>
<td style="text-align:center">是</td>
</tr>
</tbody>
</table>
</li>
<li><code>&lt;optional&gt;</code></li>
<li><code>&lt;exclusions&gt;</code>
<ul>
<li><code>&lt;exclusion&gt;</code>
<ul>
<li><code>&lt;groupId&gt;</code></li>
<li><code>&lt;artifactId&gt;</code></li>
</ul>
</li>
<li><code>&lt;exclusion&gt;</code>
<ul>
<li>&hellip;</li>
</ul>
</li>
<li>多个<code>&lt;exclusion&gt;</code>&hellip;</li>
</ul>
</li>
</ul>
</li>
<li>多个<code>&lt;dependency&gt;</code>&hellip;</li>
</ul>
</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<p><code>&lt;scope&gt;</code>取值说明:</p>
<hr>
<h1 id="maven常用命令" data-numberify>Maven常用命令<a class="anchor ms-1" href="#maven常用命令"></a></h1>
<ul>
<li><code>compile</code>: 编译</li>
<li><code>clean</code>: 清理</li>
<li><code>test</code>: 测试</li>
<li><code>package</code>: 打包</li>
<li><code>install</code>: 安装</li>
</ul>
<p>使用Maven命令需要先配置PATH, 然后在项目目录下执行.</p>
<p>例如项目路径为<code>~/project</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~/project
</span></span></code></pre></div><h2 id="编译" data-numberify>编译<a class="anchor ms-1" href="#编译"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn compile
</span></span></code></pre></div><p>第一次执行该命令, Maven会自动从仓库 (中央仓库或远程仓库, 介绍常用命令时, 如无特别指出, 仓库均指中央仓库或远程仓库) 下载编译所需的jar插件包. 然后在项目下会生成一个 <code>target</code> 目录. 编译后的字节码文件就放在该目录下.</p>
<h2 id="清理" data-numberify>清理<a class="anchor ms-1" href="#清理"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn clean
</span></span></code></pre></div><p>第一次执行该命令, Maven会从仓库下载清理所需要的jar插件包. 接着便使用插件清除项目下的<code>target</code>目录.</p>
<h2 id="打包" data-numberify>打包<a class="anchor ms-1" href="#打包"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn package
</span></span></code></pre></div><p>第一次执行该命令, Maven会从仓库下载打包所需要的jar插件包. 然后在项目的 <code>terget</code> 目录下生成一个jar包 (将当前项目打成的jar包).</p>
<h2 id="测试" data-numberify>测试<a class="anchor ms-1" href="#测试"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn <span class="nb">test</span>
</span></span></code></pre></div><p>该命令会执行所有的测试代码, 即<code>project/scr/text</code>下的代码.</p>
<h2 id="安装" data-numberify>安装<a class="anchor ms-1" href="#安装"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn install
</span></span></code></pre></div><p>该命令会将当前项目打成jar包, 并安装到本地仓库. 执行完上述命令后可以到本地仓库查看结果. 仓库中的路径为pom.xml文件中<code>&lt;groupId&gt;</code>相应的路径, 生成的jar包名为<code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>组成的内容.</p>
<hr>
<h1 id="maven生命周期" data-numberify>Maven生命周期<a class="anchor ms-1" href="#maven生命周期"></a></h1>
<p>Maven 构建项目生命周期描述的是一次构建过程经历经历了多少个事件.</p>
<p>Maven对项目构建的生命周期划分为3套:</p>
<ul>
<li>clean: 清理工作.</li>
<li>default: 核心工作, 例如编译, 测试, 打包, 安装等.</li>
<li>site:  产生报告, 发布站点等. 这套声明周期一般不会使用.</li>
</ul>
<p>同一套生命周期内, 执行后边的命令, 前面的所有命令会自动执行.</p>
<p>default 生命周期如下:</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/maven-base/1662167229604.png" loading="lazy" width="388" height="83" />
</picture>

</p>
<p>如执行<code>install</code>命令, maven会按照上图中从左到右的顺序先执行<code>compile</code>, 再执行<code>test</code>, <code>package</code>, 最后执行<code>install</code>; 如果执行<code>package</code>, 除了<code>install</code>命令, 其它命令按照上图左到右顺序执行.</p>
<blockquote>
<p>默认的生命周期其实有对应的很多命令, 上图中只展示了常用的.</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>SSH 公钥配置</title>
      <link>/blog/2022/08/ssh-%E5%85%AC%E9%92%A5%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022/08/ssh-%E5%85%AC%E9%92%A5%E9%85%8D%E7%BD%AE/</guid>
      <description><![CDATA[创建.ssh目录并生成公钥: ssh-keygen -t rsa 所有选项全部回车, 使用默认选项即可. 然后切换到用户目录下的.ssh目录: cd ~/.ssh 该目录下默认有三个文件: id_rsa: 用户]]></description>
      <content:encoded><![CDATA[<p>创建<code>.ssh</code>目录并生成公钥:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh-keygen -t rsa
</span></span></code></pre></div><p>所有选项全部回车, 使用默认选项即可.</p>
<p>然后切换到用户目录下的<code>.ssh</code>目录:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~/.ssh
</span></span></code></pre></div><p>该目录下默认有三个文件:</p>
<ul>
<li><code>id_rsa</code>: 用户私钥, 不要复制发送给任何人.</li>
<li><code>id_rsa.pub</code>: 公钥, 将里面内容发送给客户端.</li>
<li><code>authorized_keys</code>: 信任的公钥.</li>
</ul>
<p>只需要将<code>id_rsa.pub</code>里的内容以 (<code>ssh-rsa</code>开头的一行内容) 复制到客户端的<code>authorized_keys</code>的目录下即可.</p>
<p>接着在客户端使用:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh username@ip -p port
</span></span></code></pre></div><p>即可连接到服务器.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>JDBC</title>
      <link>/docs/spring/java-web/jdbc/</link>
      <pubDate>Fri, 12 Aug 2022 14:46:53 +0000</pubDate>
      
      <guid>/docs/spring/java-web/jdbc/</guid>
      <description><![CDATA[JDBC 简介 JDBC (Java DataBase Connectivity, Java 数据库连接) 是使用Java语言操作关系型数据库的一套 API. JDBC其实是SUN公司制订的一套操作数据库的标准接口. JDBC中定义]]></description>
      <content:encoded><![CDATA[<h1 id="jdbc-简介" data-numberify>JDBC 简介<a class="anchor ms-1" href="#jdbc-简介"></a></h1>
<p>JDBC (Java DataBase Connectivity, Java 数据库连接) 是使用Java语言操作关系型数据库的一套 API.</p>
<p>JDBC其实是SUN公司制订的一套操作数据库的标准接口. JDBC中定义了所有操作关系型数据库的规则. 由各自的数据库厂商给出实现类 (驱动jar包).</p>
<p>Java, JDBC和各种数据库的关系如下图:</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/jdbc/1662106467207.png" loading="lazy" width="756" height="421" />
</picture>

</p>
<p>使用JDBC的好处:</p>
<ul>
<li>不需要针对不同数据库分别开发.</li>
<li>可随时替换底层数据库, 访问数据库的Java代码基本不变.</li>
</ul>
<hr>
<h1 id="jdbc-使用的基本步骤" data-numberify>JDBC 使用的基本步骤<a class="anchor ms-1" href="#jdbc-使用的基本步骤"></a></h1>
<ol>
<li>
<p>导入JDBC驱动jar包:</p>
<ul>
<li>
<p>下载MySQL jar驱动包, <a href="https://www.runoob.com/java/java-mysql-connect.html#:~:text=Java%20%E8%BF%9E%E6%8E%A5%20MySQL%20%E9%9C%80%E8%A6%81%E9%A9%B1%E5%8A%A8%E5%8C%85%EF%BC%8C%E6%9C%80%E6%96%B0%E7%89%88%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E4%B8%BA%EF%BC%9A%20http%3A%2F%2Fdev.mysql.com%2Fdownloads%2Fconnector%2Fj%2F%20%EF%BC%8C%E8%A7%A3%E5%8E%8B%E5%90%8E%E5%BE%97%E5%88%B0%20jar%20%E5%BA%93%E6%96%87%E4%BB%B6%EF%BC%8C%E7%84%B6%E5%90%8E%E5%9C%A8%E5%AF%B9%E5%BA%94%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AF%BC%E5%85%A5%E8%AF%A5%E5%BA%93%E6%96%87%E4%BB%B6%E3%80%82,%E4%BD%A0%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%E6%9C%AC%E7%AB%99%E6%8F%90%E4%BE%9B%E7%9A%84%20jar%20%E5%8C%85%EF%BC%9A%20mysql-connector-java-5.1.39-bin.jar%20%E6%9C%AC%E5%AE%9E%E4%BE%8B%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF%20Eclipse%EF%BC%8C%E5%AF%BC%E5%85%A5%20jar%20%E5%8C%85%EF%BC%9A" target="_blank" rel="noopener noreferrer">菜鸟教程 Java MySQL 连接<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
</li>
<li>
<p>在项目中, 将下载好的jar包放入项目的 <code>lib</code>目录中.</p>
</li>
<li>
<p>然后点击鼠标右键&ndash;&gt;Add as Library (添加为库).</p>
</li>
<li>
<p>在添加为库文件的时候，有如下三个选项:</p>
<ul>
<li>
<p>Global Library: 全局有效</p>
</li>
<li>
<p>Project Library: 项目有效</p>
</li>
<li>
<p>Module Library: 模块有效</p>
<p>选择Global Library.</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>注册驱动:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="o">);</span>
</span></span></code></pre></div><blockquote>
<p>MySQL提供的 <code>Driver</code>的静态代码块会自动执行 <code>DriverManager.registerDriver()</code> 方法来注册驱动. 所以我们只需加载 <code>Driver</code>即可.
MySQL5之后的驱动包, 可以省略注册驱动的步骤.</p>
</blockquote>
</li>
<li>
<p>获取数据库连接:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span></code></pre></div><ul>
<li>
<p>其中, <code>url</code>, <code>username</code>和 <code>password</code>都是 <code>String</code>类型.</p>
</li>
<li>
<p><code>url</code>格式:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">jdbc:数据库软件名称://ip地址或域名:端口/数据库名称?参数键值对1&amp;参数键值对2...
</span></span></code></pre></div><p>例如, 连接本地mysql中名为test的数据库:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">jdbc:mysql://127.0.0.1:3306/test
</span></span></code></pre></div><p>本地mysql, 且端口为3306, url可简写为:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">jdbc:mysql:///数据库名称?参数键值对
</span></span></code></pre></div><p>常用的参数键值对有:</p>
<pre tabindex="0"><code>useSSL=false            // 禁用安全连接方式, 解决警告提示
useServerPrepStmts=true // 开启预编译(默认为false)
serverTimezone=GMT%2B8  // 设置时区, 东八区(即GMT+8)
serverTimezone=Asia/Shanghai    // 设置时区东八区
useUnicode=true&amp;characterEncoding=UTF-8 // 设置字符集为UTF-8
</code></pre></li>
</ul>
</li>
<li>
<p>获取执行SQL对象:</p>
<p>执行SQL语句需要SQL执行对象 (<code>Statement</code>对象):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Statement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
</span></span></code></pre></div><p><code>Statement</code>对象存在安全问题 (SQL注入等问题), 而使用 <code>PreparedStatement</code>不仅可以提升查询速度, 而且还能防止SQL注入问题.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;...SQL语句...&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p>执行SQL语句:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div><p>用于执行DML, DDL语句.</p>
<p>或者:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div><p>用于执行DQL语句.</p>
</li>
<li>
<p>处理返回结果</p>
</li>
<li>
<p>释放资源:</p>
<p><code>ResultSet</code>、<code>Statement</code>和 <code>Connection</code>对象都要 <code>&lt;i&gt;</code>按照顺序 <code>&lt;/i&gt;</code>释放资源.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">stmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span></code></pre></div></li>
</ol>
<p>大致代码如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.sql.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JDBCDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 接收用户输入的用户名和密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;...&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">pwd</span> <span class="o">=</span> <span class="s">&#34;...&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 注册驱动（装载类，并实例化）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;jdbc:mysql://127.0.0.1:3306/test&#34;</span> <span class="o">+</span> 
</span></span><span class="line"><span class="cl">                <span class="s">&#34;?useServerPrepStmts=true&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">&#34;root&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">&#34;1234&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 定义SQL语句 (用?作占位符)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 4. 获取执行SQL的PreparedStatement对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置参数（?）的值 pstmt.setXxx(index, value)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">pwd</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 处理结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">                ...
</span></span></span><span class="line"><span class="cl"><span class="cm">            */</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 7. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="preparedstatement-对象" data-numberify>PreparedStatement 对象<a class="anchor ms-1" href="#preparedstatement-对象"></a></h1>
<p>PreparedStatement 对象可以:</p>
<ul>
<li>预编译SQL语句并执行</li>
<li>预防SQL注入问题</li>
</ul>
<p>获取 <code>PreparedStatement</code>需要先传入SQL语句:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// SQL语句中的参数值,使用 ? 占位符替代
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 通过Connection对象获取PreparedStatement, 并传入对应的SQL语句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div><p>接着我们需要设置SQL对象中的参数值:</p>
<p>使用 <code>pstmt.setXxx(index, value)</code>, 给 <code>?</code> 赋值. 其中, <code>index</code>的值从 <code>1</code>开始, <code>value</code>的类型为 <code>Xxx</code>或 <code>xxx</code>.</p>
<p>例如, 给 <code>int</code>类型的 <code>value</code>赋值使用 <code>setInt()</code>, <code>String</code>类型使用 <code>setString()</code>. 除此之外还有 <code>setFloat()</code>, <code>setDouble()</code>, <code>setArray()</code>, <code>setByte()</code>等.</p>
<p>如果 <code>prepareStatement()</code>方法传入的是DML, DDL语句, 则使用 <code>executeUpdate()</code> 方法:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">executeUpdate</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>如果该方法执行的是DML语句 (<code>INSERT</code>, <code>UPDATE</code>和 <code>DELETE</code>), 则返回DML语句操作的行数; 如果是DDL语句则返回 0.</p>
<blockquote>
<p>需要注意, 在开发中很少使用java代码操作DDL语句.</p>
</blockquote>
<p>如果 <code>prepareStatement()</code>方法传入的是DQL语句 (<code>SELECT</code>), 使用的是 <code>executeQuery()</code> 方法:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ResultSet</span> <span class="nf">executeQuery</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>该方法返回的是DQL语句查询后的结果集.</p>
<p>在使用 <code>PreparedStatement</code>对象后, 需要使用 <code>close()</code>方法释放资源.</p>
<h2 id="statement-和-preparedstatement" data-numberify>Statement 和 PreparedStatement<a class="anchor ms-1" href="#statement-和-preparedstatement"></a></h2>
<p><code>Statement</code> 对象的一般用法如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;UPDATE tb_user SET password = \&#34;abc\&#34; WHERE id = 1&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Statement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">stmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div><p><code>Statement</code>的SQL语句是作为 <code>executeUpdate()</code>和 <code>executeQuery()</code>的参数传入, 而 <code>PreparedStatement</code>则是在创建对象就已经作为 <code>prepareStatement()</code>方法的参数传入.</p>
<p>这是因为 <code>PreparedStatement</code>需要预先传入SQL语句, 来起到预编译SQL语句和预防SQL注入问题.</p>
<h2 id="预编译" data-numberify>预编译<a class="anchor ms-1" href="#预编译"></a></h2>
<p>一般情况下, java执行SQL语句的过程如下:</p>
<p>java程序请求数据库执行SQL语句后:</p>
<ul>
<li>检查: 数据库接收指令, 检查SQL语法</li>
<li>编译: 如果SQL语句无语法错误, 则将该语句编译成可执行的函数</li>
<li>执行: 编译完成后执行SQL语句</li>
</ul>
<p>而检查SQL和编译SQL花费的时间比执行SQL的时间还要长, 如果需要一次性执行多条SQL语句, 那会浪费大量时间和资源. 所以, <code>PreparedStatement</code>的出现解决了这个问题.</p>
<p>通过使用 <code>PreparedStatement</code>对象, 并且在连接数据库的 <code>url</code>中添加 <code>useServerPrepStmts=true</code>参数来开启SQL语句预编译功能. 预编译功能会将我们设置的SQL语句 (如 <code>&quot;SELECT id,username,password FROM tb_user WHERE username = ? AND password = ?&quot;</code>) 预先传给数据库, 让其先完成检查和编译的工作 (先完成耗时的工作), 然后再一次性执行所有SQL语句 (这些SQL语句都是相同的, 只是占位符处设置的值不同).</p>
<h2 id="sql注入" data-numberify>SQL注入<a class="anchor ms-1" href="#sql注入"></a></h2>
<p>SQL注入是指通过把SQL命令插入到Web表单提交, 或输入域名或页面请求的查询字符串, 最终达到欺骗服务器执行恶意的SQL命令.</p>
<p>而 <code>PreparedStatement</code>通过在SQL语句中使用 <code>?</code>占位符, 并且使用相应的 <code>setXxx()</code>方法来设置值 (设置的值如果含有特殊字符, 如 <code>&quot;</code> 和 <code>'</code> 等, 则会进行转义), 防止了SQL注入的发生.</p>
<p>下面代码说明了 <code>PreparedStatement</code>如何防止SQL注入:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// useServerPrepStmts=true开启预编译
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;jdbc:mysql:///test?useSSL=false&amp;useServerPrepStmts=true&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">&#34;root&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">&#34;n546,Lin0&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 接收用户输入的用户名和密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;zhangsan&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">pwd</span> <span class="o">=</span> <span class="s">&#34;&#39; OR &#39;1&#39; = &#39;1&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 定义SQL（用?作占位符）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 获取PreparedStatement对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   - 预编译SQL，性能更高
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//     默认关闭，在url加上参数useServerPrepStmts=true开启
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   - 防止SQL注入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 设置参数（?）的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   - 防注入原理：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//     字符串参数在setString中会被转义，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//     即整个参数被当成sql里面的字符串，而不是java的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 从mysql日志文件可以发现：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// &#39; OR &#39;1&#39; = &#39;1 转义成了 \&#39; OR \&#39;1\&#39; = \&#39;1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">pwd</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 判读登录是否成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;登录成功！&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;登陆失败！&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>下面代码演示了把SQL代码片段插入到SQL命令, 来进行免密登录:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">LoginInject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;jdbc:mysql:///test&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">&#34;root&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">&#34;1234&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 接收用户输入的用户名和密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;abcdefg&#34;</span><span class="o">;</span> <span class="c1">// 用户名随意
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">pwd</span> <span class="o">=</span> <span class="s">&#34;&#39; OR &#39;1&#39; = &#39;1&#34;</span><span class="o">;</span> <span class="c1">// 密码传入SQL代码片段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = &#39;&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;&#39; AND password = &#39;&#34;</span><span class="o">+</span> <span class="n">pwd</span> <span class="o">+</span> <span class="s">&#34;&#39;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将sql语句where部分展开：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// WHERE username = &#39;abcdefg&#39; AND password = &#39;&#39; OR &#39;1&#39; = &#39;1&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 发现where语句条件始终为真
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Statement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">stmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 判读登录是否成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;登录成功！&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;登陆失败！&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 返回的是登录成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">stmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="resultset-对象" data-numberify>ResultSet 对象<a class="anchor ms-1" href="#resultset-对象"></a></h1>
<p><code>ResultSet</code> (结果集对象) 作用: 封装了SQL查询语句的结果, 是 <code>executeQuery()</code>方法的返回值类型.</p>
<p><code>ResultSet</code>对象有三个方法:</p>
<ul>
<li>
<p><code>next()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">boolean</span> <span class="nf">next</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>每次执行时, 将光标从当前位置向前移动一行 (光标从第0行开始), 并且判断当前行是否为有效行 (返回 <code>true</code>则代表为有效行)。</p>
</li>
<li>
<p><code>getXxx()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">xxx</span> <span class="nf">getXxx</span><span class="o">(</span><span class="n">arg</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>arg类型:</p>
<ul>
<li><code>int</code>: 代表列的编号 (按照 <code>SELECT</code>语句中的查询顺序), 从1开始</li>
<li><code>String</code>: 列的名称</li>
</ul>
</li>
<li>
<p><code>close()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">close</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>释放 <code>ResultSet</code>对象.</p>
</li>
</ul>
<p>下面演示了 <code>ResultSet</code>的使用:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password FROM tb_user&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Statement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// - 处理结果，遍历rs中的所有数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   - rs.next()：光标向下移动一行，并判断当前行是否有效
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// - 获取数据 getXxx()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// getXxx()方法可以使用列索引（从1开始）也可以使用列名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">String</span> <span class="n">usrname</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">passwd</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;id: &#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;username: &#34;</span> <span class="o">+</span> <span class="n">usrname</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;passwd: &#34;</span> <span class="o">+</span> <span class="n">passwd</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;-----------------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// - 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// ResultSet、Statement和Connection都要按照顺序释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 先释放ResultSet, 再释放Statement, 最后是Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">stmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="操作实例" data-numberify>操作实例<a class="anchor ms-1" href="#操作实例"></a></h1>
<p>用户账号密码增删改操作.</p>
<p>在编写JDBC代码之前需要先完成创建数据库, 创建 <code>pojo</code>包并编写 <code>User</code>实体类的工作:</p>
<ol>
<li>
<p>创建数据库并运行下方SQL代码:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1">-- 删除tb_user表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">tb_user</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 创建tb_user表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="nf">tb_user</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="kt">INT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="kp">AUTO_INCREMENT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">username</span><span class="w"> </span><span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">password</span><span class="w"> </span><span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 添加数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="k">VALUES</span><span class="p">(</span><span class="no">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;zhangsan&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;123&#39;</span><span class="p">),</span><span class="w"> </span><span class="p">(</span><span class="no">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;lisi&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;234&#39;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>创建 <code>pojo</code>包, 并在包中添加 <code>User</code>实体类:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">pojo</span><span class="o">;</span> <span class="c1">// pojo包存放实体类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Account{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, username=&#39;&#34;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, password=&#39;&#34;</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="增删改操作" data-numberify>增删改操作<a class="anchor ms-1" href="#增删改操作"></a></h2>
<p>JDBC数据访问层的代码放在 <code>DAO</code>包下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pojo.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.sql.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDAO</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">URL</span> <span class="o">=</span> <span class="s">&#34;jdbc:mysql:///test&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;?useSSL=false&amp;useServerPrepStmts=true&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">USERNAME</span> <span class="o">=</span> <span class="s">&#34;root&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">PASSWORD</span> <span class="o">=</span> <span class="s">&#34;1234&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据用户名和密码查询
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param username
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param password
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return User
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @throws SQLException
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">select</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 参数有null值时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">username</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">password</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 连接数据库
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">URL</span><span class="o">,</span> <span class="n">USERNAME</span><span class="o">,</span> <span class="n">PASSWORD</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取PreparedStatement对象, 并设置SQL语句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id, username, password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取ResultSet
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">Integer</span> <span class="n">id</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&#34;id&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">pw</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">pw</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据用户名和密码添加数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param username
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param password
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @throws SQLException
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">URL</span><span class="o">,</span> <span class="n">USERNAME</span><span class="o">,</span> <span class="n">PASSWORD</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;INSERT INTO tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; VALUE(null, ?, ?)&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据用户名和密码删除数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param username
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param password
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @throws SQLException
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">URL</span><span class="o">,</span> <span class="n">USERNAME</span><span class="o">,</span> <span class="n">PASSWORD</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;DELETE FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Code Server 部署</title>
      <link>/blog/2022/07/code-server-%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Sat, 23 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022/07/code-server-%E9%83%A8%E7%BD%B2/</guid>
      <description><![CDATA[下载code-server： wget https://github.com/coder/code-server/releases/download/v4.5.1/code-server-4.5.1-linux-amd64.tar.gz 可以访问code-server GitHub 页面获取下载连接。 解压： tar -zxvf code-server-4.5.1-linux-amd64.tar.gz 将解压后的文件移动到/opt目录下，并重命名：]]></description>
      <content:encoded><![CDATA[<ol>
<li>
<p>下载code-server：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/coder/code-server/releases/download/v4.5.1/code-server-4.5.1-linux-amd64.tar.gz
</span></span></code></pre></div><p>可以访问<a href="https://github.com/coder/code-server" title="code-server GitHub 页面" target="_blank" rel="noopener noreferrer">code-server GitHub 页面<i class="fas fa-external-link-square-alt ms-1"></i></a>获取下载连接。</p>
</li>
<li>
<p>解压：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tar -zxvf code-server-4.5.1-linux-amd64.tar.gz
</span></span></code></pre></div></li>
<li>
<p>将解压后的文件移动到<code>/opt</code>目录下，并重命名：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mv code-server-4.5.1-linux-amd64 /opt/code-server
</span></span></code></pre></div></li>
<li>
<p>创建软链到<code>/usr/bin</code>目录下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ln -s /opt/code-server/code-server /usr/bin/code-server
</span></span></code></pre></div></li>
<li>
<p>修改配置文件<code>~/.config/code-server/config.yaml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim ~/.config/code-server/config.yaml
</span></span></code></pre></div></li>
<li>
<p>添加code-server服务：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim /lib/systemd/system/codeweb.service
</span></span></code></pre></div><p>写入如下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>Unit<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Description</span><span class="o">=</span>The nginx HTTP and reverse proxy server
</span></span><span class="line"><span class="cl"><span class="nv">After</span><span class="o">=</span>network.target remote-fs.target nss-lookup.target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Service<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Type</span><span class="o">=</span>simple
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/code-server
</span></span><span class="line"><span class="cl"><span class="nv">KillSignal</span><span class="o">=</span>SIGQUIT
</span></span><span class="line"><span class="cl"><span class="nv">TimeoutStopSec</span><span class="o">=</span><span class="m">5</span>
</span></span><span class="line"><span class="cl"><span class="nv">KillMode</span><span class="o">=</span>process
</span></span><span class="line"><span class="cl"><span class="nv">PrivateTmp</span><span class="o">=</span><span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="nv">StandardOutput</span><span class="o">=</span>syslog
</span></span><span class="line"><span class="cl"><span class="nv">StandardError</span><span class="o">=</span>inherit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Install<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></span></code></pre></div></li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>搭建 frp 服务</title>
      <link>/blog/2022/07/%E6%90%AD%E5%BB%BA-frp-%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Sat, 23 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022/07/%E6%90%AD%E5%BB%BA-frp-%E6%9C%8D%E5%8A%A1/</guid>
      <description><![CDATA[下载frp： wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_amd64.tar.gz 或者访问frp项目获取自己需要的版本。 解压： tar -zxvf frp_0.44.0_linux_amd64.tar.gz 进入目录后，配置frps.ini和frpc.ini： cd frp_0.44.0_linux_amd64 服务端： vim frps.ini 将文件]]></description>
      <content:encoded><![CDATA[<ol>
<li>
<p>下载frp：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_amd64.tar.gz
</span></span></code></pre></div><p>或者访问<a href="https://github.com/fatedier/frp/" title="frp项目" target="_blank" rel="noopener noreferrer">frp项目<i class="fas fa-external-link-square-alt ms-1"></i></a>获取自己需要的版本。</p>
</li>
<li>
<p>解压：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tar -zxvf frp_0.44.0_linux_amd64.tar.gz
</span></span></code></pre></div></li>
<li>
<p>进入目录后，配置<code>frps.ini</code>和<code>frpc.ini</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> frp_0.44.0_linux_amd64
</span></span></code></pre></div><ul>
<li>
<p>服务端：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim frps.ini
</span></span></code></pre></div><p>将文件按照下面修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>common<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># frp监听的端口，默认是7000，可以改成其他的</span>
</span></span><span class="line"><span class="cl"><span class="nv">bind_port</span> <span class="o">=</span> <span class="m">7000</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 授权码，请改成更复杂的</span>
</span></span><span class="line"><span class="cl"><span class="nv">token</span> <span class="o">=</span> <span class="m">123456</span>  <span class="c1"># 这个token之后在客户端会用到</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># frp管理后台端口，请按自己需求更改</span>
</span></span><span class="line"><span class="cl"><span class="nv">dashboard_port</span> <span class="o">=</span> <span class="m">7500</span>
</span></span><span class="line"><span class="cl"><span class="c1"># frp管理后台用户名和密码，请改成自己的</span>
</span></span><span class="line"><span class="cl"><span class="nv">dashboard_user</span> <span class="o">=</span> admin
</span></span><span class="line"><span class="cl"><span class="nv">dashboard_pwd</span> <span class="o">=</span> admin
</span></span><span class="line"><span class="cl"><span class="nv">enable_prometheus</span> <span class="o">=</span> <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># frp日志配置</span>
</span></span><span class="line"><span class="cl"><span class="nv">log_file</span> <span class="o">=</span> /var/log/frps.log
</span></span><span class="line"><span class="cl"><span class="nv">log_level</span> <span class="o">=</span> info
</span></span><span class="line"><span class="cl"><span class="nv">log_max_days</span> <span class="o">=</span> <span class="m">3</span>
</span></span></code></pre></div></li>
<li>
<p>客户端：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim frpc.ini
</span></span></code></pre></div><p>将文件按照下面修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 客户端配置</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>common<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">server_addr</span> <span class="o">=</span> 服务器ip
</span></span><span class="line"><span class="cl"><span class="nv">server_port</span> <span class="o">=</span> <span class="m">7000</span> <span class="c1"># 与frps.ini的bind_port一致</span>
</span></span><span class="line"><span class="cl"><span class="nv">token</span> <span class="o">=</span> <span class="m">52010</span>  <span class="c1"># 与frps.ini的token一致</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置ssh服务</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>ssh<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">type</span> <span class="o">=</span> tcp
</span></span><span class="line"><span class="cl"><span class="nv">local_ip</span> <span class="o">=</span> 127.0.0.1 <span class="c1"># 默认本地ip</span>
</span></span><span class="line"><span class="cl"><span class="nv">local_port</span> <span class="o">=</span> <span class="m">22</span>
</span></span><span class="line"><span class="cl"><span class="nv">remote_port</span> <span class="o">=</span> <span class="m">6000</span>  <span class="c1"># 这个自定义，之后再ssh连接的时候要用</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置http服务，可用于小程序开发、远程调试等，如果没有可以不写下面的</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>web<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">type</span> <span class="o">=</span> http
</span></span><span class="line"><span class="cl"><span class="nv">local_ip</span> <span class="o">=</span> 127.0.0.1
</span></span><span class="line"><span class="cl"><span class="nv">local_port</span> <span class="o">=</span> <span class="m">8080</span>
</span></span><span class="line"><span class="cl"><span class="nv">subdomain</span> <span class="o">=</span> test.hijk.pw  <span class="c1"># web域名</span>
</span></span><span class="line"><span class="cl"><span class="nv">remote_port</span> <span class="o">=</span> 自定义的远程服务器端口，例如8080
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>接着需要在防火墙开启相应的端口。</p>
</li>
<li>
<p>启动服务：</p>
<ul>
<li>
<p>服务端：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./frps -s frps.ini
</span></span></code></pre></div><p>或者配置<code>frps.server</code>文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo vim /lib/systemd/system/frps.service
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>Unit<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Description</span><span class="o">=</span>The nginx HTTP and reverse proxy server
</span></span><span class="line"><span class="cl"><span class="nv">After</span><span class="o">=</span>network.target remote-fs.target nss-lookup.target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Service<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Type</span><span class="o">=</span>simple
</span></span><span class="line"><span class="cl"><span class="c1"># 根据实际情况修改这条命令或者将frps、frps.ini移动到相应位置</span>
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/frps -c /etc/frp/frps.ini
</span></span><span class="line"><span class="cl"><span class="nv">KillSignal</span><span class="o">=</span>SIGQUIT
</span></span><span class="line"><span class="cl"><span class="nv">TimeoutStopSec</span><span class="o">=</span><span class="m">5</span>
</span></span><span class="line"><span class="cl"><span class="nv">KillMode</span><span class="o">=</span>process
</span></span><span class="line"><span class="cl"><span class="nv">PrivateTmp</span><span class="o">=</span><span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="nv">StandardOutput</span><span class="o">=</span>syslog
</span></span><span class="line"><span class="cl"><span class="nv">StandardError</span><span class="o">=</span>inherit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Install<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></span></code></pre></div></li>
<li>
<p>客户端：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./frpc -c frpc.ini
</span></span></code></pre></div><p>如果是Linux也可以配置<code>frpc.service</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>Unit<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Description</span><span class="o">=</span>Frp Client Service
</span></span><span class="line"><span class="cl"><span class="nv">After</span><span class="o">=</span>network.target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Service<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Type</span><span class="o">=</span>simple
</span></span><span class="line"><span class="cl"><span class="c1">#User=nobody</span>
</span></span><span class="line"><span class="cl"><span class="nv">Restart</span><span class="o">=</span>on-failure
</span></span><span class="line"><span class="cl"><span class="nv">RestartSec</span><span class="o">=</span>5s
</span></span><span class="line"><span class="cl"><span class="c1"># 根据实际情况修改以下两条命令或者将frps、frps.ini移动到相应位置</span>
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/frpc -c /etc/frp/frpc.ini
</span></span><span class="line"><span class="cl"><span class="nv">ExecReload</span><span class="o">=</span>/usr/bin/frpc reload -c /etc/frp/frpc.ini
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Install<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></span></code></pre></div></li>
</ul>
</li>
</ol>
<p>更多请见<a href="https://frps.cn/11.html" title="Frp官方文档" target="_blank" rel="noopener noreferrer">Frp官方文档<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>经典查找算法</title>
      <link>/blog/2022/02/%E7%BB%8F%E5%85%B8%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 27 Feb 2022 14:44:00 +0000</pubDate>
      
      <guid>/blog/2022/02/%E7%BB%8F%E5%85%B8%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</guid>
      <description><![CDATA[二分查找 二分查找又叫折半查找，是在有序列表的基础上进行查找，每次查找可以筛掉一半的元素。 算法步骤 以升序数列$L[0&hellip;n-1]$]]></description>
      <content:encoded><![CDATA[<h1 id="二分查找" data-numberify>二分查找<a class="anchor ms-1" href="#二分查找"></a></h1>
<p>二分查找又叫折半查找，是在有序列表的基础上进行查找，每次查找可以筛掉一半的元素。</p>
<h2 id="算法步骤" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤"></a></h2>
<p>以升序数列$L[0&hellip;n-1]$为例，假设要查找的数为$x$：</p>
<p>让$x$与数列中间位置的元素$L[\lfloor \frac n2 \rfloor]$进行比较，如果相等则返回该元素下标，否则：</p>
<ul>
<li>如果$x$比中间元素小，递归地对中间元素左边的数列（比二分查找小的元素）进行二分查找；</li>
<li>如果$x$比中间元素大，递归地对中间元素右边的数列（比二分查找大的元素）进行二分查找。</li>
</ul>
<h2 id="代码实现" data-numberify>代码实现<a class="anchor ms-1" href="#代码实现"></a></h2>
<h3 id="python实现" data-numberify>Python实现<a class="anchor ms-1" href="#python实现"></a></h3>
<ol>
<li>递归实现：
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">BinarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;二分排序（递归实现）
</span></span></span><span class="line"><span class="cl"><span class="s2">    left=0,right=len(arr)-1&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">left</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">right</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">right</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="n">right</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">mid</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">target</span> <span class="o">==</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">mid</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">target</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">BinarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">BinarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">target</span> <span class="o">=</span> <span class="mi">66</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">BinarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span></code></pre></div></li>
<li>非递归实现：
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">BinarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;二分排序（非递归实现）&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">right</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">mid</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">target</span> <span class="o">==</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">mid</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">target</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">target</span> <span class="o">=</span> <span class="mi">66</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">BinarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ol>
<h3 id="c实现" data-numberify>C实现<a class="anchor ms-1" href="#c实现"></a></h3>
<ol>
<li>递归实现：
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define LEN 100
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">BinarySearch</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="n">right</span> <span class="o">||</span> <span class="n">arr</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">target</span> <span class="o">==</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">mid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">target</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nf">BinarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">target</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nf">BinarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">target</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">LEN</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LEN</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">target</span> <span class="o">=</span> <span class="mi">66</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="nf">BinarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">LEN</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">target</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;False</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>非递归实现：
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define LEN 100
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">BinarySearch</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="n">right</span> <span class="o">||</span> <span class="n">arr</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">target</span> <span class="o">==</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">mid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">target</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">LEN</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LEN</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">target</span> <span class="o">=</span> <span class="mi">66</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="nf">BinarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">LEN</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">target</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;False</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
</ol>
<hr>
<h1 id="散列表查找" data-numberify>散列表查找<a class="anchor ms-1" href="#散列表查找"></a></h1>
<p>散列表查找又叫哈希表查找，是通过记录存储位置和关键字构建一个确定的关系$f$，使得每个关键字$key$对应一个存储位置$f(key)$，称这个为散列技术。其中，$f$称为散列函数或者哈希函数。</p>
<p>通过散列技术将记录存储在一块连续的存储空间中，这块连续的空间称为散列表或者哈希表。</p>
<p>散列表最适合查找与给定的值相等的记录。</p>
<p>散列函数的冲突：</p>
<p>在使用散列表的过程中，可能会有两个关键字通过散列函数得到的存储地址是一样的，这个现象被称为冲突。此时就需要通过冲突解决办法来解决冲突。在解决冲突的同时也要保证查找和插入效率问题。同时为了避免冲突，散列函数的构造也是很重要的。</p>
<h2 id="算法步骤-1" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤-1"></a></h2>
<h3 id="散列函数的构造方法" data-numberify>散列函数的构造方法<a class="anchor ms-1" href="#散列函数的构造方法"></a></h3>
<p>选取散列函数的参考：</p>
<ol>
<li>计算散列地址所需的时间；</li>
<li>关键字长度； </li>
<li> 散列表大小； </li>
<li>关键字的分布情况； </li>
<li>查找记录的频率。</li>
</ol>
<h4 id="直接定址法" data-numberify>直接定址法<a class="anchor ms-1" href="#直接定址法"></a></h4>
<p>直接定址法就是直接通过取关键字的某个线性值作为散列地址：</p>
<p>$$
f(key)=a \cdot key+b\quad(a,b为常数)
$$</p>
<p>例如，要存储0-100岁的人口统计表，就可以采用散列函数为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">f(key) = key
</span></span></code></pre></div><h4 id="数字分析法" data-numberify>数字分析法<a class="anchor ms-1" href="#数字分析法"></a></h4>
<p>数字分析法通常适合处理关键字位数比较大的情况，如果事先知道关键字的分布且关键字的若干位分布比较  均匀，就可以考虑这个方法。</p>
<p>Example：</p>
<p>假设某公司的员工登记表以员工的手机号作为关键字。手机号一共11位。前3位是接入号，对应不同运营商的子品牌；中间4位表示归属地；最后4位是用户号。不同手机号前7位相同的可能性很大，所以可以选择后4位作为散列地址，或者对后4位反转（1234 -&gt; 4321）、循环右移（1234 -&gt; 4123）、循环左移等等之后作为散列地址。</p>
<h4 id="平方取中法" data-numberify>平方取中法<a class="anchor ms-1" href="#平方取中法"></a></h4>
<p>假设关键字是1234，平方之后是1522756，再抽取中间3位227，用作散列地址。平方取中法比较适合于不知道关键字的分布，而位数又不是很大的情况。</p>
<h4 id="折叠法" data-numberify>折叠法<a class="anchor ms-1" href="#折叠法"></a></h4>
<p>将关键字从左到右分割成位数相等的几部分，最后一部分位数不够时可以短些，然后将这几部分叠加求和，  并按散列表表长，取后几位作为散列地址。</p>
<p>比如关键字是9876543210，散列表表长是3位，将其分为四组，然后叠加求和：987 + 654 + 321 + 0 =  1962，取后3位962作为散列地址。</p>
<p>折叠法事先不需要知道关键字的分布，适合关键字位数较多的情况。</p>
<h4 id="x20除留取余数法" data-numberify>&#x20;除留取余数法<a class="anchor ms-1" href="#x20除留取余数法"></a></h4>
<p>此方法为最常用的构造散列函数方法。</p>
<p>除留取余数法：</p>
<p>$$
f(key)=key\enspace mod\enspace p\quad (p\le m),\ m为散列表长
$$</p>
<p>这种方法不仅可以对关键字直接取模，也可在折叠、平方取中后再取模。根据经验，若散列表表长为$m$，通常$p$为小于或等于表长（最好接近$m$）的最小质数，可以更好的减小冲突。</p>
<h4 id="随机数法" data-numberify>随机数法<a class="anchor ms-1" href="#随机数法"></a></h4>
<p>$$
f(key)=random(key),\quad random是随机函数
$$</p>
<p>当关键字的长度不等时，采用这个方法构造散列函数是比较合适的。</p>
<h3 id="处理散列表冲突问题的方法" data-numberify>处理散列表冲突问题的方法<a class="anchor ms-1" href="#处理散列表冲突问题的方法"></a></h3>
<h4 id="开放地址法" data-numberify>开放地址法<a class="anchor ms-1" href="#开放地址法"></a></h4>
<p>开放地址就是一旦发生冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并且记录它。有三种寻找空散列地址的方法：</p>
<ol>
<li>
<p>线性探测法</p>
<p>$$
f&rsquo;(key)=(f(key)+d)% n,\quad 其中d取(0,1,2,&hellip;,n-1),\ n为散列表的长度
$$</p>
<p>$d$初始为0，如果有冲突，那么$d$就通过递增来寻找空的散列地址。</p>
<p>Example：</p>
<table>
<thead>
<tr>
<th><strong>下标</strong></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>关键字</strong></td>
<td>12</td>
<td>25</td>
<td></td>
<td></td>
<td>16</td>
<td></td>
<td></td>
<td>67</td>
<td>56</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>在如上所示的散列表中插入37。首先使用散列函数计算37的散列地址：$f&rsquo;(37)=f(37)%12=1$（这里假设$f(key)=key$）。</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>而下标为1的位置已经存放了25，那就只能继续寻找下一个空散列地址：$f&rsquo;(37)=(f(37)+1)%12=2$。</p>
<p>2这个位置没有内容，所以得到：</p>
<table>
<thead>
<tr>
<th><strong>下标</strong></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>关键字</strong></td>
<td>12</td>
<td>25</td>
<td>37</td>
<td></td>
<td>16</td>
<td></td>
<td></td>
<td>67</td>
<td>56</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>使用线性探测来解决冲突问题，会造成冲突堆积。所谓的冲突堆积就是上例的37，它本来是属于下标1的元素，现在却占用了下标为2的空间。如果现在需要存放原本存放在下标为2的元素，就会再次发生冲突，这个冲突会一直传播下去，大大减低查找和插入效率。</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>二次探测法</p>
<p>$$
f&rsquo;(key)=(f(key)+q^2)%n,\quad 其中q取(0,1,-1,2,-2,&hellip;,\frac n2,-\frac n2),\ n为散列表的长度
$$</p>
<p>二次探测法其实是对线性探测的一个优化，增加了平方可以不让关键字聚集在某一块区域。</p>
<p>Example：</p>
<table>
<thead>
<tr>
<th><strong>下标</strong></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>关键字</strong></td>
<td>12</td>
<td>25</td>
<td>37</td>
<td></td>
<td>16</td>
<td></td>
<td></td>
<td>67</td>
<td>56</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>插入元素7，通过二次探测的散列函数计算得到：$f&rsquo;(7)=f(7)%12=7$。</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>但下标为7的位置已经存放了67，所以需要寻找下一个存储地址：$f&rsquo;(7)=(f(7)+1^2)%12=8$。</p>
<p>下标为8的位置已经存放了56，继续寻找： $f&rsquo;(7)=(f(7)+(-1^2))%12=6$。</p>
<p>6这个位置为空，得到：</p>
<table>
<thead>
<tr>
<th><strong>下标</strong></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>关键字</strong></td>
<td>12</td>
<td>25</td>
<td>37</td>
<td></td>
<td>16</td>
<td></td>
<td>7</td>
<td>67</td>
<td>56</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>随机探测法</p>
<p>$$
f&rsquo;(key)=(f(key)+d)%m,\quad d为随机数,m为表长
$$</p>
<p>在实现中应预先用随机数发生器产生一个随机序列，将此序列作为依次探测的步长。这样就能使不同的关键字具有不同的探测次序，从而可以避免或减少堆积。</p>
</li>
</ol>
<h4 id="多重散列法" data-numberify>多重散列法<a class="anchor ms-1" href="#多重散列法"></a></h4>
<p>多重散列法又叫再散列函数法。其公式如下：</p>
<p>$$
f&rsquo;(key)=RH(key)
$$</p>
<p>其中$RH$就是不同的散列函数，这些散列函数可以是任何散列函数。只要其中一个发生了冲突，就马上换一个散列函数，直到冲突解决。缺点就是增加了很多计算时间。</p>
<h4 id="链地址法" data-numberify>链地址法<a class="anchor ms-1" href="#链地址法"></a></h4>
<p>链地址法就是当冲突发生时，用链表来存放同义词（即存放在当前位置，每个位置使用链表存放同义词）。这个思路和图的邻接表存储方式很相似。</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/02/%E7%BB%8F%E5%85%B8%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/20170329114036533_Gh2zPBSsES.jpg" loading="lazy" width="314" height="294" />
</picture>

</p>
<h4 id="公共溢出区法" data-numberify>公共溢出区法<a class="anchor ms-1" href="#公共溢出区法"></a></h4>
<p>公共溢出区法就是把那些冲突的元素直接追加到另外一个溢出表中，如下图所示：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/02/%E7%BB%8F%E5%85%B8%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/20170329114409113__GJU2mNyy2.png" loading="lazy" width="743" height="721" />
</picture>

</p>
<p>在查找的时候，如果在基本表没有找到，那么就只能去溢出表中进行顺序查找。这个方法比较适合冲突元素少的情况。</p>
<h2 id="代码实现-1" data-numberify>代码实现<a class="anchor ms-1" href="#代码实现-1"></a></h2>
<h3 id="python实现-1" data-numberify>Python实现<a class="anchor ms-1" href="#python实现-1"></a></h3>
<ul>
<li>除留取余数法构造散列函数，开放地址法-线性探测处理散列表冲突：
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">HashTable</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">elem</span> <span class="o">=</span> <span class="p">[</span><span class="kc">None</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">size</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">hash</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;除留取余数法构造哈希函数&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">key</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">insert_hash</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">address</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">hash</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 开放地址法-线性探测</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">elem</span><span class="p">[</span><span class="n">address</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">address</span> <span class="o">=</span> <span class="p">(</span><span class="n">address</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">elem</span><span class="p">[</span><span class="n">address</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">search_hash</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">star</span> <span class="o">=</span> <span class="n">address</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">hash</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">elem</span><span class="p">[</span><span class="n">address</span><span class="p">]</span> <span class="o">!=</span> <span class="n">key</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">address</span> <span class="o">=</span> <span class="p">(</span><span class="n">address</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">elem</span><span class="p">[</span><span class="n">address</span><span class="p">]</span> <span class="ow">or</span> <span class="n">address</span> <span class="o">==</span> <span class="n">star</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">address</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">list_a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">34</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">hash_table</span> <span class="o">=</span> <span class="n">HashTable</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">list_a</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">hash_table</span><span class="o">.</span><span class="n">insert_hash</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">hash_table</span><span class="o">.</span><span class="n">elem</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">i</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">((</span><span class="n">hash_table</span><span class="o">.</span><span class="n">elem</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">i</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s2">&#34; &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">hash_table</span><span class="o">.</span><span class="n">search_hash</span><span class="p">(</span><span class="mi">15</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">hash_table</span><span class="o">.</span><span class="n">search_hash</span><span class="p">(</span><span class="mi">33</span><span class="p">))</span>
</span></span></code></pre></div></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>MySQL 环境配置</title>
      <link>/blog/2022/02/mysql-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022/02/mysql-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description><![CDATA[Ubuntu MySQL 8 安装： 首先更新本地存储库索引： sudo apt update 从 APT 存储库安装 MySQL： sudo apt install MySQL-server -y 查看 MySQL 版本，验证是否安装成功： mysql --version 检查 MySQL 是否正在运行： systemctl status mysql.service 如]]></description>
      <content:encoded><![CDATA[<h1 id="ubuntu" data-numberify>Ubuntu<a class="anchor ms-1" href="#ubuntu"></a></h1>
<p>MySQL 8 安装：</p>
<ol>
<li>
<p>首先更新本地存储库索引：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt update
</span></span></code></pre></div></li>
<li>
<p>从 APT 存储库安装 MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install MySQL-server -y
</span></span></code></pre></div></li>
<li>
<p>查看 MySQL 版本，验证是否安装成功：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mysql --version
</span></span></code></pre></div></li>
<li>
<p>检查 MySQL 是否正在运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl status mysql.service
</span></span></code></pre></div></li>
</ol>
<p>如果服务未运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo systemctl start mysql
</span></span></code></pre></div><hr>
<p>MySQL 安装完成后需要更改密码。</p>
<ol>
<li>
<p>查看默认账户和密码：</p>
<p>执行后找到 <code>user</code> 和 <code>password</code>，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo vim /etc/mysql/debian.cnf
</span></span></code></pre></div><p>或：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo cat /etc/mysql/debian.cnf
</span></span></code></pre></div><p>找到如下：</p>
<pre tabindex="0"><code class="language-纯文本" data-lang="纯文本">user     = debian-sys-maint
password = 12E0cDBeusG6vANp
</code></pre></li>
<li>
<p>使用默认账户登录：</p>
<p>然后输入默认密码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mysql -udebian-sys-maint -p
</span></span></code></pre></div><pre tabindex="0"><code class="language-纯文本" data-lang="纯文本">12E0cDBeusG6vANp
</code></pre></li>
<li>
<p>输入以下命令修改 root 密码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">USER</span><span class="w"> </span><span class="s1">&#39;root&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span><span class="w"> </span><span class="n">identified</span><span class="w"> </span><span class="k">WITH</span><span class="w"> </span><span class="n">mysql_native_password</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="s1">&#39;your_password&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>修改完成后执行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">FLUSH</span><span class="w"> </span><span class="k">privileges</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">QUIT</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>最后重启 MySQL 后就可以使用 root 用户了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo service mysql restart
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mysql -uroot -p
</span></span></code></pre></div></li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Ubuntu 安装 Oh my zsh</title>
      <link>/blog/2022/01/ubuntu-%E5%AE%89%E8%A3%85-oh-my-zsh/</link>
      <pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022/01/ubuntu-%E5%AE%89%E8%A3%85-oh-my-zsh/</guid>
      <description><![CDATA[oh-my-zsh主页： https://ohmyz.sh/ 安装并设置zsh 安装zsh： sudo apt install zsh 查看系统中所有的shell： cat /etc/shells # /etc/shells: valid login shells /bin/sh /bin/bash /usr/bin/bash /bin/rbash /usr/bin/rbash /bin/dash /usr/bin/dash /usr/bin/tmux /usr/bin/screen /bin/zsh /usr/bin/zsh 将zsh设置为]]></description>
      <content:encoded><![CDATA[<p>oh-my-zsh主页： <a href="https://ohmyz.sh/" title="https://ohmyz.sh/" target="_blank" rel="noopener noreferrer">https://ohmyz.sh/<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<h1 id="安装并设置zsh" data-numberify>安装并设置zsh<a class="anchor ms-1" href="#安装并设置zsh"></a></h1>
<p>安装zsh：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install zsh
</span></span></code></pre></div><p>查看系统中所有的shell：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat /etc/shells
</span></span></code></pre></div><pre tabindex="0"><code class="language-纯文本" data-lang="纯文本"># /etc/shells: valid login shells
/bin/sh
/bin/bash
/usr/bin/bash
/bin/rbash
/usr/bin/rbash
/bin/dash
/usr/bin/dash
/usr/bin/tmux
/usr/bin/screen
/bin/zsh
/usr/bin/zsh
</code></pre><p>将zsh设置为默认的shell：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo chsh -s /bin/zsh
</span></span></code></pre></div><p>重新连接到Ubuntu，然后查看当前默认shell：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$SHELL</span>
</span></span></code></pre></div><p>如果显示<code>/bin/zsh</code>则配置成功。</p>
<hr>
<h1 id="安装-oh-my-zsh" data-numberify>安装 oh-my-zsh<a class="anchor ms-1" href="#安装-oh-my-zsh"></a></h1>
<p>下载install.sh：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh
</span></span></code></pre></div><p>给install.sh添加权限：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chmod +x install.sh
</span></span></code></pre></div><p>执行install.sh：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./install.sh
</span></span></code></pre></div><blockquote>
<p>📌在执行install.sh之前还需要安装git。否则会报错。</p>
<p>安装git：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install git
</span></span></code></pre></div></blockquote>
<hr>
<h1 id="配置zsh" data-numberify>配置zsh<a class="anchor ms-1" href="#配置zsh"></a></h1>
<p>zsh的配置文件为：<code>~/.zshrc</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim ~/.zshrc
</span></span></code></pre></div><h2 id="修改主题" data-numberify>修改主题<a class="anchor ms-1" href="#修改主题"></a></h2>
<p>主题配置项为：<code>ZSH_THEME</code>。</p>
<p>默认主题配置为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">ZSH_THEME=&#34;robbyrussell&#34;
</span></span></code></pre></div><p>可以修改为其中之一：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">ZSH_THEME=&#34;ys&#34;
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">ZSH_THEME=&#34;geoffgarside&#34;
</span></span></code></pre></div><p>还可以访问<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes" title="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes" target="_blank" rel="noopener noreferrer">https://github.com/ohmyzsh/ohmyzsh/wiki/Themes<i class="fas fa-external-link-square-alt ms-1"></i></a> 查看更多主题。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>命题逻辑</title>
      <link>/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/</link>
      <pubDate>Sun, 23 Jan 2022 02:03:41 +0800</pubDate>
      
      <guid>/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/</guid>
      <description><![CDATA[命题的定义 具有确切真值的陈述句称为命题（proposition）。命题可以取一个 “值”，称为真值。真值只有 “真”（用 “T” or “1” 表示，即 T]]></description>
      <content:encoded><![CDATA[<h1 id="命题的定义" data-numberify>命题的定义<a class="anchor ms-1" href="#命题的定义"></a></h1>
<p>具有<u>确切真值的陈述句</u>称为<strong>命题</strong>（<strong>proposition</strong>）。命题可以取一个 “值”，称为<strong>真值</strong>。真值只有 “真”（用 “T” or “1” 表示，即 True）和 “假”（用 “F” or “0” 表示，即 False）。</p>
<blockquote>
<p>通常用带或不带下标的大写英文字母表示命题。</p>
</blockquote>
<hr>
<h2 id="非命题" data-numberify>非命题<a class="anchor ms-1" href="#非命题"></a></h2>
<p>一切没有判断内容的句子，如命令句（祈使句）、感叹句、疑问句、二义性的陈述句等都<u>不能作为命题</u>。</p>
<hr>
<h1 id="原子命题与复合命题" data-numberify>原子命题与复合命题<a class="anchor ms-1" href="#原子命题与复合命题"></a></h1>
<ul>
<li><strong>原子命题</strong>（<strong>简单命题</strong>）：不能再分解为更简单命题的命题。</li>
<li><strong>复合命题</strong>：可以分解为更为简单命题的命题。这些简单命题之间是通过联结词和标点符号复合而成。</li>
</ul>
<hr>
<h2 id="命题变元" data-numberify>命题变元<a class="anchor ms-1" href="#命题变元"></a></h2>
<p>一个特定的命题是一个<strong>常值命题</strong>，它不是具有值 “T”，就是具有值 “F”。</p>
<p>一个任意的没有赋予具体内容的原子命题就是一个<u>变量命题</u>，常称它为<strong>命题变量</strong>（或<strong>命题变元</strong>，<strong>propositional vatiable</strong>）。</p>
<p>命题变元<u>无具体的真值</u>，它的变域是集合 ${T,F}$（或 ${0,1}$）。</p>
<hr>
<h1 id="联结词" data-numberify>联结词<a class="anchor ms-1" href="#联结词"></a></h1>
<p>联结词是<strong>两个命题真值之间的联结</strong>，而不是命题内容之间的连接，因此复合命题的真值只取决于<u>构成它们的各简单命题的真值</u>，而与它们的内容无关，与二者之间是否有关系无关。</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264217690456.jpg" loading="lazy" width="1268" height="208" />
</picture>

</p>
<hr>
<h2 id="否定联结词" data-numberify>否定联结词<a class="anchor ms-1" href="#否定联结词"></a></h2>
<p>设 $P$ 是任意一个命题，复合命题 <font color="green">“非 $P$”</font>（或 <font color="green">“$P$ 的否定”</font>）称为 $P$ 的<strong>否定式</strong>（<strong>negation</strong>），记作 <font color="red">$\neg P$</font>，“$\neg$” 为否定联结词。</p>
<p>$P$ 为真当且仅当 $\neg P$ 为假。</p>
<p>真值表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$P$</th>
<th style="text-align:center">$\neg P$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<blockquote>
<p>“$\neg$” 是自然语言中的 “非”、“不”、“没有” 等的逻辑抽象。</p>
</blockquote>
<hr>
<h2 id="合取联结词" data-numberify>合取联结词<a class="anchor ms-1" href="#合取联结词"></a></h2>
<p>设 $P$、$Q$ 是任意两个命题，复合命题 <font color="green">“$P$ 并且 $Q$”</font>（或 <font color="green">“$P$ 和 $Q$”</font>）称为 $P$ 与 $Q$ 的<strong>合取式</strong>（<strong>conjunction</strong>），记作 <font color="red">$P \wedge Q$</font>，“$\wedge$” 为<strong>合取联结词</strong>。</p>
<p>$P \wedge Q$ 为真当且仅当 $P$、$Q$ 同为真。</p>
<p>真值表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$P \qquad Q$</th>
<th style="text-align:center">$P \wedge Q$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$0 \qquad 0$</td>
<td style="text-align:center">$0$</td>
</tr>
<tr>
<td style="text-align:center">$0 \qquad 1$</td>
<td style="text-align:center">$0$</td>
</tr>
<tr>
<td style="text-align:center">$1 \qquad 0$</td>
<td style="text-align:center">$0$</td>
</tr>
<tr>
<td style="text-align:center">$1 \qquad 1$</td>
<td style="text-align:center">$1$</td>
</tr>
</tbody>
</table>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16263438047401.jpg" loading="lazy" width="1246" height="252" />
</picture>

</p>
<hr>
<h2 id="析取联结词" data-numberify>析取联结词<a class="anchor ms-1" href="#析取联结词"></a></h2>
<p>设 $P$、$Q$ 是任意两个命题，复合命题 <font color="green">“$P$ 或 $Q$”</font> 称为 $P$ 与 $Q$ 的<strong>析取式</strong>（<strong>disjunction</strong>），记作 <font color="red">$P \vee Q$</font>，“$\vee$” 为<strong>析取联结词</strong>。</p>
<p>$P \vee Q$ 为真当且仅当 $P$、$Q$ 至少有一个为真。</p>
<p>真值表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$P \qquad Q$</th>
<th style="text-align:center">$P \vee Q$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$0 \qquad 0$</td>
<td style="text-align:center">$0$</td>
</tr>
<tr>
<td style="text-align:center">$0 \qquad 1$</td>
<td style="text-align:center">$1$</td>
</tr>
<tr>
<td style="text-align:center">$1 \qquad 0$</td>
<td style="text-align:center">$1$</td>
</tr>
<tr>
<td style="text-align:center">$1 \qquad 1$</td>
<td style="text-align:center">$1$</td>
</tr>
</tbody>
</table>
<blockquote>
<p>联结词 “$\vee$” 是自然语言中的 “或”、“或者” 等的逻辑抽象。</p>
<p>自然语言中的 “或” 有 “可兼或”（或称为同或）、“不可兼或”（即异或）两种。</p>
<p>严格来讲，析取联结词实际上代表的是可兼或。</p>
</blockquote>
<hr>
<h2 id="异或联结词" data-numberify>异或联结词<a class="anchor ms-1" href="#异或联结词"></a></h2>
<p>设 $P$、$Q$ 是任意两个命题，复合命题 <font color="green">“$P$ 或 $Q$”</font> 有时代表不可兼或，记作 <font color="red">$P \oplus Q$ 或 $P \overline{\vee} Q$</font>，“$\oplus$” 或 “$\overline{\vee}$” 为<strong>异或联结词</strong>。</p>
<p>$P \oplus Q$ 为真当且仅当 $P$、$Q$ 中有且仅有一个为真。</p>
<p>真值表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$P \qquad Q$</th>
<th style="text-align:center">$P \vee Q$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$0 \qquad 0$</td>
<td style="text-align:center">$0$</td>
</tr>
<tr>
<td style="text-align:center">$0 \qquad 1$</td>
<td style="text-align:center">$1$</td>
</tr>
<tr>
<td style="text-align:center">$1 \qquad 0$</td>
<td style="text-align:center">$1$</td>
</tr>
<tr>
<td style="text-align:center">$1 \qquad 1$</td>
<td style="text-align:center">$0$</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="蕴涵联结词" data-numberify>蕴涵联结词<a class="anchor ms-1" href="#蕴涵联结词"></a></h2>
<p>设 $P$、$Q$ 是任意两个命题，复合命题 <font color="green">“如果 $P$，则 $Q$”</font> 称为 $P$ 与 $Q$ 的<strong>蕴涵式</strong>（<strong>implication</strong>），记作 $P \rightarrow Q$，“$\rightarrow$” 为<strong>蕴含联结词</strong>。</p>
<p>$P \rightarrow Q$ 为假当且仅当 $P$ 为真且 $Q$ 为假（$P$ 为假时，认为该蕴涵式为真）。</p>
<p>一般把蕴涵式 $P \rightarrow Q$ 中的 $P$ 称为该蕴涵式的<strong>前件</strong>，$Q$ 称为蕴涵式的<strong>后件</strong>。</p>
<p>真值表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$P \qquad Q$</th>
<th style="text-align:center">$P \vee Q$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$0 \qquad 0$</td>
<td style="text-align:center">$1$</td>
</tr>
<tr>
<td style="text-align:center">$0 \qquad 1$</td>
<td style="text-align:center">$1$</td>
</tr>
<tr>
<td style="text-align:center">$1 \qquad 0$</td>
<td style="text-align:center">$0$</td>
</tr>
<tr>
<td style="text-align:center">$1 \qquad 1$</td>
<td style="text-align:center">$1$</td>
</tr>
</tbody>
</table>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264203339885.jpg" loading="lazy" width="1270" height="255" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264204420358.jpg" loading="lazy" width="1289" height="552" />
</picture>

</p>
<hr>
<h2 id="等价联结词" data-numberify>等价联结词<a class="anchor ms-1" href="#等价联结词"></a></h2>
<p>设 $P$、$Q$ 是任意两个命题，复合命题 <font color="green">“$P$ 当且仅当 $Q$”</font> 称为 $P$ 与 $Q$ 的<strong>蕴涵式</strong>（<strong>implication</strong>），记作 $P \leftrightarrow Q$，“$\leftrightarrow$” 为<strong>等价联结词</strong>。</p>
<p>$P \leftrightarrow Q$ 为真当且仅当 $P$、$Q$ 同为真假。</p>
<p>真值表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$P \qquad Q$</th>
<th style="text-align:center">$P \vee Q$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$0 \qquad 0$</td>
<td style="text-align:center">$1$</td>
</tr>
<tr>
<td style="text-align:center">$0 \qquad 1$</td>
<td style="text-align:center">$0$</td>
</tr>
<tr>
<td style="text-align:center">$1 \qquad 0$</td>
<td style="text-align:center">$0$</td>
</tr>
<tr>
<td style="text-align:center">$1 \qquad 1$</td>
<td style="text-align:center">$1$</td>
</tr>
</tbody>
</table>
<blockquote>
<p>“$\leftrightarrow$” 是自然语言中的 “等价”、“充分必要条件”、“当且仅当” 等的逻辑抽象。</p>
</blockquote>
<hr>
<h2 id="总结" data-numberify>总结<a class="anchor ms-1" href="#总结"></a></h2>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264212687867.jpg" loading="lazy" width="1139" height="479" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264213759514.jpg" loading="lazy" width="1138" height="303" />
</picture>

</p>
<p>命题联结词 “$\wedge$”、“$\vee$”、“$\leftrightarrow$” 具有对称性，而 “$\neg$”、“$\rightarrow$” 没有。</p>
<hr>
<h2 id="优先级" data-numberify>优先级<a class="anchor ms-1" href="#优先级"></a></h2>
<p>优先顺序：括号、否定、合取、析取、蕴涵、等价。同级的联结词，按出现的先后次序（从左到右）。</p>
<hr>
<h1 id="命题联结词的应用" data-numberify>命题联结词的应用<a class="anchor ms-1" href="#命题联结词的应用"></a></h1>
<h2 id="联结词与开关电路" data-numberify>联结词与开关电路<a class="anchor ms-1" href="#联结词与开关电路"></a></h2>
<p>设命题 $P$：开关 $S_1$ 闭合；命题 $Q$：开关 $S_2$ 闭合。则以下电路可用复合命题表示：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264222756445.jpg" loading="lazy" width="1072" height="270" />
</picture>

</p>
<ol>
<li>“串联”：$P \wedge Q$；</li>
<li>“并联”：$P \vee Q$；</li>
<li>“断开”：$\neg P$。</li>
</ol>
<hr>
<h2 id="联结词与逻辑电路" data-numberify>联结词与逻辑电路<a class="anchor ms-1" href="#联结词与逻辑电路"></a></h2>
<ol>
<li>
<p>与门：$\wedge$</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264225030176.jpg" loading="lazy" width="338" height="138" />
</picture>

</p>
</li>
<li>
<p>或门：$\vee$</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264225922743.jpg" loading="lazy" width="336" height="139" />
</picture>

</p>
</li>
<li>
<p>非门：$\neg$</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264226657751.jpg" loading="lazy" width="330" height="139" />
</picture>

</p>
</li>
</ol>
<hr>
<h2 id="联结词与网页检索" data-numberify>联结词与网页检索<a class="anchor ms-1" href="#联结词与网页检索"></a></h2>
<p>在<strong>布尔检索</strong>中，</p>
<ol>
<li>$\wedge$（一般用 AND 表示）用于匹配包含两个检索项的记录；</li>
<li>$\vee$（一般用 OR 表示）用于匹配包含两个检索项至少一个的记录；</li>
<li>$\neg$（一般用 NOT 表示）用于排除某个特定的检索项。</li>
</ol>
<hr>
<h2 id="联结词与位运算" data-numberify>联结词与位运算<a class="anchor ms-1" href="#联结词与位运算"></a></h2>
<ol>
<li>按位与：$\wedge$；</li>
<li>按位或：$\vee$；</li>
<li>按位取反：$\neg$。</li>
</ol>
<hr>
<h1 id="命题公式" data-numberify>命题公式<a class="anchor ms-1" href="#命题公式"></a></h1>
<p>复合命题是由原子命题与联结词构成的命题。所以，当其中的原子命题是<a href="#命题变元">命题变元</a>时，此复合命题也即为命题变元的函数，且该函数的值仍为 “真” 或 “假” 值，这样的函数可形象地称为 “<strong>真值函数</strong>” 或 “<strong>命题公式</strong>”，此命题公式没有确切的真值。</p>
<hr>
<h2 id="命题公式的定义" data-numberify>命题公式的定义<a class="anchor ms-1" href="#命题公式的定义"></a></h2>
<p><strong>命题演算的合式公式</strong>（<strong>Well Formed Formula</strong>，<strong>WFF</strong>），又称<strong>命题公式</strong>（简称公式），按如下规则生成：</p>
<ol>
<li>命题变元本身是一个公式；</li>
<li>如果 $G$ 是公式，则 $(\neg G)$ 也是公式；</li>
<li>如果 $G$、$H$ 是公式，则 $(G \wedge H)$、$(G \vee H)$、$(G \rightarrow H)$、$(G \leftrightarrow H)$ 也是公式；</li>
<li>仅由<u>有限步使用规则 1、2、3</u> 后所得到的包含命题变元、联结词和括号的符号串才是命题公式。</li>
</ol>
<p>如果 $G$ 是含有 $n$ 个命题变元 $P_1、P_2、P_3、\cdots、P_n$ 的公式，可记为：$G(P_1,P_2,P_3,\cdots,P_n)$ 或简写为 $G$。</p>
<hr>
<ul>
<li>原子命题变元是最简单的合式公式，称为原子合式公式，简称原子公式；</li>
<li>命题公式没有真值，只有对其命题变元进行真值指派后，方可确定命题公式的真值；</li>
<li>整个公式的最外层括号可以省略，公式中不影响运算次序的括号也可以省略；</li>
<li>在实际应用中，为了便于存储和运算，命题公式常用二元数方式来表达。</li>
</ul>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264271696146.jpg" loading="lazy" width="870" height="365" />
</picture>

</p>
<hr>
<h2 id="命题公式的解释" data-numberify>命题公式的解释<a class="anchor ms-1" href="#命题公式的解释"></a></h2>
<p>设 $P_1、P_2、P_3、\cdots、P_n$ 是出现在公式 $G$ 中的所有命题变元，给 $P_1、P_2、P_3、\cdots、P_n$ 指定一组真值，则这组真值称为 $G$ 的一个<strong>解释</strong>，常记为 <font color="red">$I$</font>。</p>
<ul>
<li>如果公式 $G$ 在解释 $I$ 下是真的，则称 <font color="green">$I$ 满足 $G$</font>，此时 $I$ 是 $G$ 的<strong>成真赋值</strong>；</li>
<li>如果 $G$ 在解释 $I$ 下是假的，则称 <font color="green">$I$ 弄假于 $G$</font>，此时 $I$ 是 $G$ 的<strong>成假赋值</strong>。</li>
</ul>
<hr>
<h2 id="命题公式的分类" data-numberify>命题公式的分类<a class="anchor ms-1" href="#命题公式的分类"></a></h2>
<ul>
<li><strong>永真公式</strong>（又叫<strong>重言式</strong>，<strong>tautology</strong>）：如果在它的所有解释之下其真值都为 “真”。</li>
<li><strong>永假公式</strong>（又叫<strong>矛盾式</strong>，<strong>contradiction</strong>）：如果在它的所有解释下其真值都为 “假”。</li>
</ul>
<hr>
<ul>
<li><strong>不可满足公式</strong>：即永假公式。</li>
<li><strong>可满足公式</strong>（<strong>satisfiable</strong>）：不为永假公式的公式。</li>
</ul>
<hr>
<ul>
<li>$G$ 是永真的当且仅当 $\neg G$ 是永假的；</li>
<li>$G$ 是可满足的当且仅当至少有一个解释 $I$，使 $G$ 在 $I$ 下为真；</li>
<li>若 $G$ 是永真式，则 $G$ 一定是可满足式，但反之可满足式不一定是永真式。</li>
</ul>
<hr>
<h2 id="等价的命题公式" data-numberify>等价的命题公式<a class="anchor ms-1" href="#等价的命题公式"></a></h2>
<p>设 $G$、$H$ 是两个命题公式，$P_1、P_2、P_3、\cdots、P_n$ 是出现在 $G$、$H$ 中所有的命题变元，如果对于 $P_1、P_2、P_3、\cdots、P_n$ 的 $2^n$ 个解释，$G$ 与 $H$ 的<strong>真值结果都相同</strong>，则称公式 $G$ 与 $H$ 是<strong>等价</strong>的，记作 <font color="red">$G = H$</font>（或 <font color="red">$G \Leftrightarrow H$</font>）。</p>
<hr>
<h3 id="公式等价的充分必要条件" data-numberify>公式等价的充分必要条件<a class="anchor ms-1" href="#公式等价的充分必要条件"></a></h3>
<p>对于任意两个公式 $G$ 和 $H$，<font color="red">$G = H$ 的充分必要条件是公式 $G \leftrightarrow H$ 是永真公式</font>。</p>
<p>Proof：</p>
<ul>
<li>必要性：假定 $G = H$，则 $G$、$H$ 在其任意解释 $I$ 下或同为真或同为假，于是由 “$\leftrightarrow$” 的意义知，公式 $G \leftrightarrow H$ 在其任何的解释 $I$ 下，其真值为 “真”，即 $G \leftrightarrow H$ 为永真公式。</li>
<li>充分性：假定公式 $G \leftrightarrow H$ 是永真公式，$I$ 是它的任意解释，在 $I$ 下，$G \leftrightarrow H$ 为真，因此，$G$，$H$ 或同为真或同为假，由于 $I$ 的任意性，故有 $G = H$。</li>
</ul>
<blockquote>
<p>可判定性：能否给出一个可行方法，完成对任意公式的判定问题（类型或等价判定）。</p>
</blockquote>
<p>命题公式是可判定的。</p>
<hr>
<h2 id="命题公式的基本等价关系" data-numberify>命题公式的基本等价关系<a class="anchor ms-1" href="#命题公式的基本等价关系"></a></h2>
<p>设 $G$、$H$、$S$ 为任意的命题公式。</p>
<table>
<thead>
<tr>
<th style="text-align:center">性质</th>
<th style="text-align:left">等式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><b id="a2"></b>幂等律</td>
<td style="text-align:left">$G \vee G = G$<br/>$G \wedge G = G$</td>
</tr>
<tr>
<td style="text-align:center"><b id="a3"></b>交换律</td>
<td style="text-align:left">$G \vee H = H \vee G$<br/>$G \wedge H = H \wedge G$</td>
</tr>
<tr>
<td style="text-align:center">结合律</td>
<td style="text-align:left">$G \vee (H \vee S) = (G \vee H) \vee S$<br/>$G \wedge (H \wedge S) = (G \wedge H) \wedge S$</td>
</tr>
<tr>
<td style="text-align:center"><b id="a4"></b>同一律</td>
<td style="text-align:left">$G \wedge 0 = G$<br/>$G \vee 1 = G$</td>
</tr>
<tr>
<td style="text-align:center"><b id="a5"></b>零律</td>
<td style="text-align:left">$G \vee 1 = 1$<br/>$G \wedge 0 = 0$</td>
</tr>
<tr>
<td style="text-align:center"><b id="a6"></b>分配律</td>
<td style="text-align:left">$G \vee (H \wedge S) = (G \vee H) \wedge (G \vee S)$</br>$G \wedge (H \vee S) = (G \wedge H) \vee (G \wedge S)$</td>
</tr>
<tr>
<td style="text-align:center">吸收率</td>
<td style="text-align:left">$G \vee (G \wedge H) = G$<br/>$G \wedge (G \vee H) = G$</td>
</tr>
<tr>
<td style="text-align:center"><b id="a7"></b>矛盾律</td>
<td style="text-align:left">$\neg G \wedge G = 0$</td>
</tr>
<tr>
<td style="text-align:center"><b id="a8"></b>排中律</td>
<td style="text-align:left">$\neg G \vee G = 1$</td>
</tr>
<tr>
<td style="text-align:center"><b id="a9"></b>双重否定律</td>
<td style="text-align:left">$\neg(\neg G) = G$</td>
</tr>
<tr>
<td style="text-align:center"><b id="a10"></b>德摩根律</td>
<td style="text-align:left">$\neg(G \vee H) = \neg G \wedge \neg H$</br>$\neg(G \wedge H) = \neg G \vee \neg H$</td>
</tr>
<tr>
<td style="text-align:center"><b id="a11"></b>蕴涵式</td>
<td style="text-align:left">$G \rightarrow H = \neg G \vee H$</td>
</tr>
<tr>
<td style="text-align:center">假言易位</td>
<td style="text-align:left">$G \rightarrow H = \neg H \rightarrow \neg G$</td>
</tr>
<tr>
<td style="text-align:center"><b id="a12"></b>等价式</td>
<td style="text-align:left">$G \leftrightarrow H = (G \rightarrow H) \wedge (H \rightarrow G) = (\neg G \vee H) \wedge (\neg H \vee G)$</td>
</tr>
<tr>
<td style="text-align:center">等价否定等式</td>
<td style="text-align:left">$G \leftrightarrow H = \neg G \leftrightarrow \neg H$</td>
</tr>
<tr>
<td style="text-align:center">归谬论</td>
<td style="text-align:left">$(G \rightarrow H) \wedge (G \rightarrow \neg H) = \neg G$</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="基本等价关系的应用" data-numberify>基本等价关系的应用<a class="anchor ms-1" href="#基本等价关系的应用"></a></h3>
<p>（1）判断公式类型</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264420672234.jpg" loading="lazy" width="620" height="374" />
</picture>

</p>
<p>（2）证明公式等价</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264420999525.jpg" loading="lazy" width="883" height="430" />
</picture>

</p>
<p>（3）开关电路化简</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264421759266.jpg" loading="lazy" width="646" height="360" />
</picture>

</p>
<p>（4）逻辑电路化简</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264422111932.jpg" loading="lazy" width="622" height="380" />
</picture>

</p>
<p>（5）其他</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264422514796.jpg" loading="lazy" width="1232" height="605" />
</picture>

</p>
<hr>
<h1 id="范式" data-numberify>范式<a class="anchor ms-1" href="#范式"></a></h1>
<ul>
<li>命题变元或命题变元的否定称为<strong>文字</strong>。</li>
<li><u>有限个</u>文字（$\ge 1$）的析取称为<strong>简单析取式</strong>（或<strong>子句</strong>）。
单个文字可构成子句。</li>
<li><u>有限个</u>文字（$\ge 1$）的合取称为<strong>简单合取式</strong>（或<strong>短语</strong>）。
单个文字可构成短语。</li>
<li>$P$ 与 $\neg P$ 称为<strong>互补对</strong>。</li>
</ul>
<hr>
<ul>
<li><u>有限个</u>（$\ge 1$）简单合取式（短语）的析取式称为<strong>析取范式</strong>（<strong>disjunctive normal form</strong>）。</li>
<li><u>有限个</u>（$\ge 1$）简单析取式（子句）的合取式称为<strong>合取范式</strong>（<strong>conjunctive normal form</strong>）。</li>
</ul>
<p>文字可以是子句、短语、析取范式、合取范式。</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16265483645877.png" loading="lazy" width="1226" height="340" />
</picture>

</p>
<ol>
<li>命题公式的析取范式可以指出公式何时为真，而合取范式可以指出公式何时为假，从而能够替代真值表。</li>
<li>命题公式的范式表达并不唯一。</li>
</ol>
<p>Example：</p>
<ol>
<li>
<p>$P$、$\neg P$ 可以是文字、短语、子句、析取范式、合取范式。</p>
</li>
<li>
<p>$P \vee Q \vee \neg R$ 是子句、合取范式、析取范式。</p>
<ul>
<li>
<p>将该式认为是子句，那么单个子句就可构成合取范式。</p>
</li>
<li>
<p>将 $P$、$Q$、$\neg R$ 认为是短语，那么三个短语析取可构成析取范式。</p>
</li>
<li>
<p>$(P \vee Q \vee \neg R)$ 是子句、合取范式。</p>
<p>加了括号后该式就被认为是一个整体，不能作为析取范式。</p>
</li>
</ul>
</li>
<li>
<p>$\neg P \wedge Q \wedge R$ 是短语、析取范式、合取范式。</p>
<ul>
<li>将该式认为是短语，那么单个短语就可构成析取范式。</li>
<li>将 $\neg P$、$Q$、$R$ 认为是子句，那么三个子句合取可构成合取范式。</li>
<li>$(\neg P \wedge Q \wedge R)$ 是短语、析取范式。</li>
</ul>
</li>
<li>
<p>$P \vee (Q \vee \neg R)$ 即不是析取范式也不是合取范式，但转换为 $P \vee Q \vee \neg R$ 后，即是析取范式又是合取范式。</p>
</li>
</ol>
<hr>
<h2 id="范式存在定理" data-numberify>范式存在定理<a class="anchor ms-1" href="#范式存在定理"></a></h2>
<p>联结词之间可以通过命题公式的基本等价关系进行相互转换，因此可以通过逻辑等价公式求出等价的析取范式和合取范式，具体步骤如下：</p>
<ol>
<li>将公式中的 $\rightarrow$、$\leftrightarrow$ 用联结词 $\neg$、$\wedge$、$\vee$ 来取代（使用<a href="#a11">蕴涵式</a>和<a href="#a12">等价式</a>）。</li>
<li>将否定联结词移到各个命题变元的前端，并消去多余的否定号（使用<a href="#a9">双重否定律</a>和<a href="#a10">德摩根律</a>）。</li>
<li>利用<a href="#a6">分配律</a>，可将公式化成一些合取式的析取，或化成一些析取式的合取。</li>
</ol>
<p>对任意一个公式，经过以上步骤（期间可用其他<a href="#命题公式的基本等价关系">等价公式</a>来化简），必能化成与其等价的析取范式和合取范式。</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16264518371675.jpg" loading="lazy" width="622" height="382" />
</picture>

</p>
<hr>
<h2 id="主范式" data-numberify>主范式<a class="anchor ms-1" href="#主范式"></a></h2>
<p>范式是不唯一的，对构成范式的子句或短语进一步进行规范化，形成唯一的主析取范式和主合取范式。</p>
<hr>
<h3 id="极大项和极小项" data-numberify>极大项和极小项<a class="anchor ms-1" href="#极大项和极小项"></a></h3>
<p>在含有 $n$ 个命题变元 $P_1、P_2、P_3、\cdots、P_n$ 的<u>短语或子句</u>中，若
<u>每个命题变元与其否定不同时存在</u>，但<u>二者之一恰好出现一次且仅一次</u>，并且<font color="green">出现的次序与 $P_1、P_2、P_3、\cdots、P_n$ 一致</font>，则</p>
<ul>
<li>称此<strong>短语</strong>为关于 $P_1、P_2、P_3、\cdots、P_n$ 的一个<strong>极小项</strong>，</li>
<li>称此<strong>子句</strong>为关于 $P_1、P_2、P_3、\cdots、P_n$ 的一个<strong>极大项</strong>。</li>
</ul>
<p>若有 $n$ 个命题，则应有 $2^n$ 个不同的极小项和 $2^n$ 个不同的极大项。</p>
<hr>
<p>对于极小项：</p>
<ul>
<li>没有两个不同的极小项是等价的。</li>
<li>每个极小项只有一组成假赋值，因此可用于给极大项编码。
编码规则为：命题变元与 0 对应，命题变元的否定与 1 对应。</li>
</ul>
<p>Example：</p>
<p>设命题变元 $P$、$Q$，</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16265086173840.jpg" loading="lazy" width="1150" height="340" />
</picture>

</p>
<hr>
<p>对于极大项（与极小项相反的规定）：</p>
<ul>
<li>没有两个不同的极大项是等价的。</li>
<li>每个极大项只有一组成假赋值，因此可用于给极大项编码。
编码规则为：命题变元与 0 对应，命题变元的否定与 1 对应。</li>
</ul>
<p>Example：</p>
<p>设命题变元 $P$、$Q$，</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16265087894491.jpg" loading="lazy" width="1146" height="339" />
</picture>

</p>
<hr>
<p>极小项的编码可对应为真情况时，相应的短语为真的真值序列。极大项的编码可对应为假情况时，相应的子句为假的真值序列。</p>
<p>极小项和极大项还有以下性质：</p>
<p>设有 $n$ 个命题变元，设 $i,j \in {0, 1, \cdots, 2^{n-1}}$ 且 $i \neq j$，$m_i、m_j$ 代表这 $n$ 个命题变元对应的极小项，$M_i、M_j$ 代表对应的命题变元的极大项。那么就有</p>
<ol>
<li>
<p>$m_i \wedge m_j = 0$，</p>
<p>$M_i \vee M_j = 1$；</p>
</li>
<li>
<p>$m_i = \neg M_i$，</p>
<p>$M_i = \neg m_i$；</p>
</li>
<li>
<p>$\displaystyle \bigvee_{i=0}^{2^n-1}{m_i} = 1$，</p>
<p>$\displaystyle \bigwedge_{i=0}^{2^n-1}{M_i} = 0$。</p>
</li>
</ol>
<hr>
<h3 id="主析取范式和主合取范式" data-numberify>主析取范式和主合取范式<a class="anchor ms-1" href="#主析取范式和主合取范式"></a></h3>
<ul>
<li>在给定的<u>析取范式</u>中，若<u>每一个短语都是极小项</u>，且按照编码<u>从小到大</u>的顺序排列，则称该范式为<strong>主析取范式</strong>(<strong>principal disjunctive normal form</strong>)。</li>
<li>在给定的<u>合取范式</u>中，若<u>每一个子句都是极大项</u>，且按照编码<u>从小到大</u>的顺序排列，则称该范式为<strong>主合取范式</strong>(<strong>principal conjunctive normal form</strong>)。</li>
</ul>
<p>如果一个主析取范式<u>不包含任何极小项</u>，则称该主析取范式为 “<strong>空</strong>”；如果一个<u>主合取范式不包含</u>任何极大项，则称主合取范式为 “<strong>空</strong>”。</p>
<hr>
<p>任何一个公式都有与之等价的主析取范式和主合取范式。</p>
<ul>
<li>如果某一公式的主析取范式包含所有的极小项，即主合取范式为空，则该公式为永真公式。</li>
<li>如果某一公式主合取范式包含所有的极大项，即主析取范式为空，则该公式为永假公式。</li>
<li>若有两个公式，它们具有相同的主析取范式或主合取范式，则两公式等价。</li>
</ul>
<hr>
<h2 id="主范式求解定理" data-numberify>主范式求解定理<a class="anchor ms-1" href="#主范式求解定理"></a></h2>
<ol>
<li>
<p>求出该公式所对应的析取范式和合取范式。</p>
</li>
<li>
<p>消去重复出现的命题变元，矛盾式或重言式。</p>
<ol>
<li>先利用<a href="#a2">幂等律</a>、<a href="#a7">矛盾律</a>和<a href="#a8">排中律</a>消去重复出现的命题元素；</li>
<li>再使用<a href="#a4">同一律</a>和<a href="#a5">零律</a>消去其中的常数。</li>
</ol>
</li>
<li>
<p>若析取（合取）范式的某一个短语（子句）$B_i$ 中缺少命题变元 $P$，则可用如下方式将 $P$ 补进去：</p>
<ul>
<li>求主析取范式：$B_i = B_i \wedge 1 = B_i \wedge (\neg P \vee P) = (B_i \wedge \neg P) \vee (B_i \wedge P)$；</li>
<li>求主合取范式：$B_i = B_i \vee 0 = B_i \vee (\neg P \wedge P) = (B_i \vee \neg P) \wedge (B_i \vee P)$。</li>
</ul>
</li>
<li>
<p>利用<a href="#a2">幂等律</a>将重复的极小项和极大项合并，并利用<a href="#a3">交换律</a>进行顺序调整，由此可转换成标准的主析取范式和主合取范式。</p>
</li>
</ol>
<p>主析取范式的极小项编码序列与主合取范式的极大项变编码序列是互补的。因此，只需求出主析取范式或主合取范式中其中之一，就可对应求出主合取范式或主析取范式。</p>
<hr>
<h3 id="公式转换法" data-numberify>公式转换法<a class="anchor ms-1" href="#公式转换法"></a></h3>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16265114352643.jpg" loading="lazy" width="962" height="466" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16265112790430.jpg" loading="lazy" width="1014" height="389" />
</picture>

</p>
<hr>
<h3 id="真值表技术" data-numberify>真值表技术<a class="anchor ms-1" href="#真值表技术"></a></h3>
<p>从真值表按所给的算法求出主范式的方法，称为<strong>真值表技术</strong> (<strong>technique of truth table</strong>)。</p>
<p>方法：</p>
<ul>
<li>列出真值表，选出公式的真值结果为真的所有的行，在这样的每一行中，找到其每一个解释所对应的极小项，将这些极小项进行析取即可得到相应的主析取范式。</li>
<li>列出真值表，选出公式的真值结果为假的所有的行，在这样的每一行中，找到其每一个解释所对应的极大项，将这些极大项进行合取即可得到相应的主合取范式。</li>
</ul>
<hr>
<h1 id="推理" data-numberify>推理<a class="anchor ms-1" href="#推理"></a></h1>
<p><strong>推理</strong>是指从一组前提合乎逻辑的推出结论的思维过程。</p>
<hr>
<h2 id="基本推理形式" data-numberify>基本推理形式<a class="anchor ms-1" href="#基本推理形式"></a></h2>
<p>设 $G_1、G_2、\cdots、G_n、H$ 是命题公式，称 $H$ 是 $G_1、G_2、\cdots、G_n$ 的<strong>逻辑结果</strong>当且仅当<font color="green">对任意解释 $I$，如果 $I$ 使得 $G_1 \wedge G_2 \wedge \cdots \wedge G_n$ 为真，则 $I$ 也会使 $H$ 为真</font>，记为 $G_1、G_2、\cdots、G_n\ \Rightarrow\ H$，“$\Rightarrow$” 称为<strong>蕴涵关系</strong>，此时称 $G_1、G_2、\cdots、G_n\ \Rightarrow\ H$ 为有效的，否则称为无效的。</p>
<p>$G_1、G_2、\cdots、G_n$ 称为一组<strong>前提</strong>，有时用集合 $\Gamma$ 来表示，记为 $\Gamma = {G_1,G_2,\cdots,G_n}$，$H$ 称为<strong>结论</strong>。此时也称 $H$ 是前提集合 $\Gamma$ 的逻辑结果，记为 $\Gamma \Rightarrow H$。</p>
<hr>
<h2 id="推理的判定定理" data-numberify>推理的判定定理<a class="anchor ms-1" href="#推理的判定定理"></a></h2>
<p>公式 $H$ 是前提集合 $\Gamma = {G_1,G_2,\cdots,G_n}$ 的逻辑结果当且仅当 $(G_1 \wedge G_2 \wedge \cdots \wedge G_n) \rightarrow H$ 为永真公式。</p>
<p>判定方法：</p>
<ol>
<li>真值表技术，</li>
<li>公式转换法，</li>
<li>主析取范式法。</li>
</ol>
<p><picture><img class="img-fluid " alt="16265511416012" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16265511416012.jpg" loading="lazy" width="620" height="370" />
</picture>

</p>
<hr>
<h2 id="基本蕴涵关系" data-numberify>基本蕴涵关系<a class="anchor ms-1" href="#基本蕴涵关系"></a></h2>
<p>设 $G$、$H$、$I$ 为任意命题公式。</p>
<table>
<thead>
<tr>
<th style="text-align:center">规则</th>
<th style="text-align:left">公式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">简化规则</td>
<td style="text-align:left">$G \wedge H \Rightarrow G$<br/>$G \wedge H \Rightarrow H$</td>
</tr>
<tr>
<td style="text-align:center">添加规则</td>
<td style="text-align:left">$G \Rightarrow G \vee H$</td>
</tr>
<tr>
<td style="text-align:center">合取引入规则</td>
<td style="text-align:left">$G,H \Rightarrow G \wedge H$</td>
</tr>
<tr>
<td style="text-align:center">选言三段论</td>
<td style="text-align:left">$G \vee H, \neg G \Rightarrow H$</td>
</tr>
<tr>
<td style="text-align:center">假言推理规则</td>
<td style="text-align:left">$G \rightarrow H, G \Rightarrow H$</td>
</tr>
<tr>
<td style="text-align:center">否定后件式</td>
<td style="text-align:left">$G \rightarrow H, \neg H \Rightarrow \neg G$</td>
</tr>
<tr>
<td style="text-align:center">假言三段论</td>
<td style="text-align:left">$G \rightarrow H, H \rightarrow I \Rightarrow G \rightarrow I$</td>
</tr>
<tr>
<td style="text-align:center">二难推论</td>
<td style="text-align:left">$G \vee H, G \rightarrow I, H \rightarrow I \Rightarrow I$</td>
</tr>
</tbody>
</table>
<p>![])(16265520749814.jpg)</p>
<hr>
<h2 id="自然演绎法推理" data-numberify>自然演绎法推理<a class="anchor ms-1" href="#自然演绎法推理"></a></h2>
<ul>
<li>
<p>规则 $\mathbf{P}$（称为<strong>前提引用规则</strong>）：在推导过程中，可随时引入前提集合中的任意一个前提，引入附加前提时需作声明。</p>
</li>
<li>
<p>规则 $\mathbf{T}$（称为<strong>逻辑结果引用规则</strong>）：在推导过程中，可随时引入公式 $S$，该公式 $S$ 是由其前的一个或多个公式（可以是前提条件或推导出来的公式）推导出来的逻辑结果。</p>
</li>
<li>
<p>规则 $\mathbf{CP}$（称为<strong>附加前提规则</strong>）：如果能从给定的前提集合 $\Gamma$ 与公式 $P$ 推导出 $S$，则能从此前提集合 $\Gamma$ 推导出 $P \rightarrow S$。</p>
<p>原理：$P \rightarrow (Q \rightarrow R) = (P \wedge Q) \rightarrow R$。
使用场合：当结论公式是<u>蕴涵式或析取式</u>时使用。</p>
</li>
</ul>
<p>命题演算推理系统 = 三个推理规则 + 基本等价公式 + 基本蕴涵公式。</p>
<hr>
<p>从前提集合 $\Gamma$ 推出结论 $H$ 的一个<strong>演绎</strong>是构造命题公式的一个有限序列：</p>
<p>$$
H_1, H_2, H_3, \cdots, H_{n-1}, H_n
$$</p>
<p>其中，$H_i$ 或者是 $\Gamma$ 中的某个前提，或者是前面的某些 $H_j(j &lt; i)$ 的有效结论，并且 $H_n$ 就是 $H$，则称公式 $H$ 为该演绎的有效结论，或者称从前提 $\Gamma$ 能够演绎出结论 $H$ 来。</p>
<hr>
<h3 id="直接证明法" data-numberify>直接证明法<a class="anchor ms-1" href="#直接证明法"></a></h3>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16265912526773.jpg" loading="lazy" width="620" height="442" />
</picture>

</p>
<hr>
<h3 id="规则-cp-证明法" data-numberify>规则 CP 证明法<a class="anchor ms-1" href="#规则-cp-证明法"></a></h3>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16265902308226.jpg" loading="lazy" width="622" height="426" />
</picture>

</p>
<hr>
<h3 id="间接证明法" data-numberify>间接证明法<a class="anchor ms-1" href="#间接证明法"></a></h3>
<p>间接证明法又叫反证法、归谬法。</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16265935152814.jpg" loading="lazy" width="1206" height="620" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16265936708923.jpg" loading="lazy" width="622" height="362" />
</picture>

</p>
<blockquote>
<p>反证法在逻辑推理中有时十分方便。反证法实际上是规则 CP 的一种变形，所以可以使用 CP 证明法来代替它。</p>
</blockquote>
<hr>
<h1 id="谓词逻辑" data-numberify>谓词逻辑<a class="anchor ms-1" href="#谓词逻辑"></a></h1>
<p>对简单命题进行分解，利用<u>个体词、谓词和量词</u>来描述简单命题句子，从而研究其中的逻辑关系，并研究个体与总体的内在联系和数量关系。</p>
<hr>
<h2 id="个体词" data-numberify>个体词<a class="anchor ms-1" href="#个体词"></a></h2>
<p>在原子命题中，可以<u>独立存在的客体</u>（句子中的主语、宾语等），称为<strong>个体词</strong>。</p>
<p>个体词可分为个体常量和个体变量，均在个体域内取值。</p>
<ol>
<li>表示具体或特定的个体词称为<strong>个体常量</strong>。一般用带或不带下标的小写英文字母 $a, b, c, \cdots, a_1, b_1, c_1, \cdots$ 等表示。</li>
<li>表示抽象的或泛指的个体词称为<strong>个体变量</strong>。一般用带或不带下标的小写英文字母 $x, y, z, \cdots, x_1, y_1, z_1, \cdots$ 等表示。</li>
</ol>
<hr>
<ul>
<li>个体词的取值范围称为<strong>个体域</strong>（或<strong>论域</strong>），常用 $D$ 表示。</li>
<li>宇宙间的所有个体域聚集在一起所构成的个体域称为<strong>全总个体域</strong>。无特别说明时，默认使用全总个体域。</li>
</ul>
<hr>
<h2 id="谓词" data-numberify>谓词<a class="anchor ms-1" href="#谓词"></a></h2>
<p>在原子命题中，用以刻划<u>客体的性质或客体之间的关系</u>即是<strong>谓词</strong>。</p>
<p>设 $D$ 为非空的个体域，定义在 $D^n$ 上取值为 ${0,1}$ 上的 $n$ 元函数，称为 $n$ 元命题函数或 $n$ 元谓词，记为 $P(x_1, x_2, \cdots, x_n)$。其中，个体变量 $x_1, x_2, \cdots, x_n \in D$。</p>
<ol>
<li>表示具体性质或关系的谓词称为<strong>谓词常量</strong>。</li>
<li>表示抽象的或泛指的性质或关系的谓词称为<strong>谓词变量</strong>。</li>
</ol>
<p>谓词均使用大写英文字母 $P, Q, R, \cdots, F, G, H, \cdots$ 来表示。</p>
<p>$D^n$ 表示 $n$ 个个体都在个体域 $D$ 上取值。</p>
<ul>
<li>谓词中个体词的顺序不能随意变更。</li>
<li>一元谓词用以描述某一个个体的某种<strong>特性</strong>，而 $n$ 元谓词（$n \ge 2$）则用以描述 $n$ 个个体之间的<strong>关系</strong>。</li>
<li>谓词 $P(x_1, x_2, \cdots, x_n)$ 包含了个体变量，因而本身并不是命题，只有用谓词常量取代 $P$，用个体常量取代 $x_1, x_2, \cdots, x_n$ 后才会称为命题。</li>
<li>一般将<u>没有任何个体变量</u>的谓词称为 <strong>0 元谓词</strong>（如，$F(a_1, a_2, \cdots, a_n$）。当 $F$ 为谓词常量时，0 元谓词就成为命题。命题逻辑中的所有命题都可以表示成 0 元谓词。</li>
</ul>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16267215046524.jpg" loading="lazy" width="1204" height="546" />
</picture>

</p>
<hr>
<h2 id="量词" data-numberify>量词<a class="anchor ms-1" href="#量词"></a></h2>
<ul>
<li><strong>全称量词</strong>（$\forall x$）：所有的 $x$；任意的 $x$；一切的 $x$；每一个 $x$；……</li>
<li><strong>存在量词</strong>（$\exists x$）：有些 $x$；至少有一个 $x$；某一些 $x$；存在 $x$；……</li>
</ul>
<p>其中的 $x$ 称为作用变量。一般将其量词加在其谓词之前，记为 $(\forall x)F(x)$、$(\exists x)F(x)$。此时，$F(x)$ 称为全称量词和存在量词的<strong>辖域</strong>。</p>
<p>![16267650196113.jpg]</p>
<p>引入更准确的表达方式：以上符号化必须要特别注明个体域，在表达比较复杂的命题时会容易混淆。</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16267651119352.jpg" loading="lazy" width="622" height="392" />
</picture>

</p>
<p>其中，$T(x)$、$C(x)$、$H(x)$ 和 $N(x)$ 分别是各自个体变量的<strong>个性谓词</strong>。</p>
<hr>
<p>统一一个<strong>全总个体域</strong>，而对每一个句子中个体变量的变化范围用一元<strong>特性谓词</strong>刻划之。这种特性谓词在加入到命题函数中时必定遵循如下原则：</p>
<ul>
<li>对于<strong>全称量词</strong>（$\forall x$），刻划其对应个体域的特性谓词作为<strong>蕴涵式的前件</strong>加入。</li>
<li>对于<strong>存在量词</strong>（$\exists x$），刻划其对应个体域的特性谓词作为<strong>合取式的合取项</strong>加入。</li>
</ul>
<hr>
<h2 id="谓词逻辑的真值" data-numberify>谓词逻辑的真值<a class="anchor ms-1" href="#谓词逻辑的真值"></a></h2>
<ul>
<li>$(\forall x)G(x)$：对 $\forall x \in D$，$G(x)$ 都成立。
<ul>
<li>$(\forall x)G(x)$ 取值为 1 当且仅当对任意 $x \in D$，$G(x)$ 都取值为 1；</li>
<li>$(\forall x)G(x)$ 取值为 0 当且仅当存在 $x_0 \in D$，使得 $G(x_0)$ 取值为 0。</li>
</ul>
</li>
<li>$(\exists x)G(x)$：存在一个 $x_0 \in D$（是有一个的意思，即可以存在一个以上，且包括一个），使得 $G(x_0)$ 成立。
<ul>
<li>$(\exists x)G(x)$ 取值为 1 当且仅当存在 $x_0 \in D$，使得 $G(x_0)$ 取值为 1；</li>
<li>$(\exists x)G(x)$ 取值为 0 当且仅当对任意 $x \in D$，$G(x)$ 都取值为 0。</li>
</ul>
</li>
</ul>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16267661575626.jpg" loading="lazy" width="1261" height="559" />
</picture>

</p>
<p>当个体域 $D = {x_0, x_1, \cdots, x_n}$ 是<strong>有限集合</strong>时，</p>
<ul>
<li>$(\forall x)G(x) = G(x_0) \wedge G(x_1) \wedge \cdots \wedge G(x_n)$；</li>
<li>$(\exists x)G(x) = G(x_0) \vee G(x_1) \vee \cdots \vee G(x_n)$。</li>
</ul>
<p>注意：量词对变元的约束往往与量词的次序有关。不同的量词次序，可以产生不同的真值。因此当多个量词同时出现时，不能随意颠倒它们的顺序，否则会改变原有的含义。</p>
<hr>
<h1 id="谓词合式公式" data-numberify>谓词合式公式<a class="anchor ms-1" href="#谓词合式公式"></a></h1>
<p>在基于谓词的形式化中，将使用如下四种符号：</p>
<ol>
<li><strong>常量符号</strong>：指所属个体域 $D$ 中的某个元素，用带或不带下标的小写英文字母 $a, b, c, \cdots, a_1, b_1, c_1, \cdots$ 来表示。</li>
<li><strong>变量符号</strong>：指所属个体域 $D$ 中的任意元素，用带或不带下标的小写英文字母 $x, y, z, \cdots, x_1, y_1, z_1, \cdots$ 来表示。</li>
<li><strong>函数符号</strong>：$n$ 元函数符号 $f(x_1, x_2, \cdots, x_n)$ 可以是所属个体域集合 $D^n \rightarrow D$ 的任意一个函数，用带或不带下标的小写英文字母 $f, g, h, \cdots, f_1, g_1, h_1, \cdots$ 来表示。</li>
<li><strong>谓词符号</strong>：$n$ 元谓词符号 $P(x_1, x_2, \cdots, x_n)$ 可以是所属个体域集合 $D_n \rightarrow {0, 1}$ 的任意一个谓词，用带或不带下标的大写英文字母 $P, Q, R, \cdots, P_1, Q_1, R_1, \cdots$ 来表示。</li>
</ol>
<p>函数可用于表达个体词之间的转换关系，可以更方便地表示谓词逻辑中的个体词。</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16267707683350.jpg" loading="lazy" width="1188" height="301" />
</picture>

</p>
<p>$n$ 元函数是个体域集合 $D^n$ 到 $D$ 的映射。</p>
<hr>
<h2 id="项的定义" data-numberify>项的定义<a class="anchor ms-1" href="#项的定义"></a></h2>
<p>谓词逻辑中的<strong>项</strong>（<strong>Term</strong>），被递归地定义为：</p>
<ul>
<li><u>任意的常量符号或任意的变量符号</u>是项。</li>
<li>若 $f(x_1, x_2, \cdots, x_n)$ 是 $n$ 元函数符号，$t_1, t_2, \cdots, t_n$ 是项，则 $f(t_1, t_2, \cdots, t_n)$ 是项。</li>
<li>仅由<u>有限次</u>使用以上两个规则产生的符号串才是项。</li>
</ul>
<hr>
<h2 id="合式公式的定义" data-numberify>合式公式的定义<a class="anchor ms-1" href="#合式公式的定义"></a></h2>
<p>若 $P(x_1, x_2, \cdots, x_n)$ 是 $n$ 元谓词， $t_1, t_2, \cdots, t_n$ 是项，则称 $P(t_1, t_2, \cdots, t_n)$ 为<strong>原子谓词公式</strong>，简称<strong>原子公式</strong>。</p>
<hr>
<p>满足下列条件的表达式，称为<strong>合式公式</strong>（<strong>well-formed formulae/wff</strong>），简称公式。</p>
<ol>
<li><u>原子公式</u>是合式公式。</li>
<li>若 $G$、$H$ 是合式公式，则 $(\neg G), (\neg H), (G \vee H), (G \wedge H), (G \rightarrow H), (G \leftrightarrow H)$ 也是合式公式。</li>
<li>若 $G$ 是合式公式，$x$ 是个体变量，则 $(\forall x)G$、$(\exists x)G$ 也是合式公式。</li>
<li>由<u>有限次</u>使用以上三个规则产生的表达式是合式公式。</li>
</ol>
<hr>
<ul>
<li>公式的最外层括号可省略。</li>
<li>量词后面的括号省略方式为：一个量词的辖域中仅出现一个原子公式，则此辖域的外层括号可省略，否则不能省略。</li>
<li>一个个体词只能接受一个量词的约束，否则就是没有意义的。</li>
</ul>
<hr>
<h2 id="自由变元与约束变元" data-numberify>自由变元与约束变元<a class="anchor ms-1" href="#自由变元与约束变元"></a></h2>
<p>给定一个合式公式 $G$，若变元 $x$ 出现<u>在使用变元的量词的辖域之内</u>，则称变元 $x$ 的出现为<strong>约束出现</strong>，此时的变元 $x$ 称为<strong>约束变元</strong>。若 $x$ 的出现<u>不是约束出现</u>，则称它为<strong>自由出现</strong>，此时的变元 $x$ 称为<strong>自由变元</strong>。</p>
<ul>
<li>若量词后有括号，则括号内的子公式就是该量词的辖域；</li>
<li>若量词后无括号，则与量词邻接的子公式为该量词的辖域。</li>
</ul>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16267722145151.jpg" loading="lazy" width="1273" height="591" />
</picture>

</p>
<hr>
<p>为了区分同一公式中，变量符号相同但不是同为自由变元或约束变元的符号（这样的变量是不同的变量，仅是符号相同），可以分别使用不同的变量符号来表示。</p>
<ol>
<li>
<p>约束变元的命名规则：</p>
<ul>
<li>将量词中的变元以及该量词辖域中此变量的所有约束出现都用新的个体变元替换；</li>
<li>新的变元一定要有别于改名辖域中的其他变量。</li>
</ul>
</li>
<li>
<p>自由变元的命名规则：</p>
<ul>
<li>
<p>将公式中出现该自由变元的每一处都用新的个体变元替换；</p>
</li>
<li>
<p>新的变元不允许在源公式中以任何约束形式出现。</p>
<p>也可用个体常量代入。但是代入个体常量后，公式的含义就发生了变化，即公式从具有普遍意义变为仅针对该个体变量有意义。</p>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="闭式" data-numberify>闭式<a class="anchor ms-1" href="#闭式"></a></h2>
<p>设 $G$ 是任意一个公式，若 $G$ 中无自由出现的个体变元，则称 $G$ 为封闭的合式公式，简称<strong>闭式</strong>。</p>
<p>闭式是一个命题。</p>
<hr>
<h2 id="谓词逻辑公式的解释" data-numberify>谓词逻辑公式的解释<a class="anchor ms-1" href="#谓词逻辑公式的解释"></a></h2>
<p>谓词逻辑中，公式 $G$ 的每一个解释 $I$ 由如下四部分组成：</p>
<ol>
<li><strong>非空的个体域</strong>集合 $D$。</li>
<li>$G$ 中的每个<strong>常量符号</strong>，指定 $D$ 中的某个特定元素。</li>
<li>$G$ 中的每个 $n$ 元<strong>函数符号</strong>，指定 $D^n$ 到 $D$ 中的某个特定的函数。</li>
<li>$G$ 中的每个 $n$ 元<strong>谓词符号</strong>，指定 $D^n$ 到 ${0,1}$ 中的某个特定的谓词。</li>
</ol>
<p>规定：公式中无自由变元，或将自由变元看成是常量符号。</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/16268605039802.jpg" loading="lazy" width="1141" height="592" />
</picture>

</p>
<hr>
<h2 id="谓词公式的分类" data-numberify>谓词公式的分类<a class="anchor ms-1" href="#谓词公式的分类"></a></h2>
<ol>
<li>
<p>如果公式 $G$ 在它<u>所有的解释下都取值为真</u>，则称 $G$ 为<strong>有效公式</strong>。</p>
<p>如 $(\forall x)(\forall y)(P(x, y) \wedge Q(x, y) \rightarrow P(x, y))$。</p>
</li>
<li>
<p>如果公式 $G$ 在它<u>所有的解释下都取值为假</u>，则称 $G$ 为<strong>矛盾公式</strong>。</p>
<p>如，$(\forall x)(\forall y)(\neg P(x, y) \wedge P(x, y))$。</p>
</li>
<li>
<p>如果<font color="green">至少有一种解释使得公式 $G$ 取值为真</font>，则称 $G$ 为<strong>可满足公式</strong>。</p>
</li>
</ol>
<hr>
<h2 id="谓词公式的可判定性" data-numberify>谓词公式的可判定性<a class="anchor ms-1" href="#谓词公式的可判定性"></a></h2>
<ul>
<li>
<p>一般情况下，谓词逻辑是不可判定的。</p>
</li>
<li>
<p>只含有一元谓词变项的公式是可判定的。</p>
</li>
<li>
<p>如下形式的公式：</p>
<p>$(\forall x_1) (\forall x_2) \cdots (\forall x_n) P(x_1, x_2, \cdots, x_n)$，</p>
<p>$(\exists x_1) (\exists x_2) \cdots (\exists x_n) P(x_1, x_2, \cdots, x_n)$。</p>
<p>若 $P$ 中无量词和其他自由变元时，是可判定的。</p>
</li>
<li>
<p>个体域有穷时的谓词公式是可判定的。</p>
</li>
</ul>
<hr>
<h2 id="谓词公式的等价关系" data-numberify>谓词公式的等价关系<a class="anchor ms-1" href="#谓词公式的等价关系"></a></h2>
<p>如果公式 $G \leftrightarrow H$ 是<strong>有效公式</strong>，则公式 $G$、$H$ 称为<strong>等价</strong>的，记为 $G=H$。</p>
<hr>
<p>设 $G(P_1, P_2, \cdots, P_n)$ 是命题演算<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>中的<a href="#命题公式">命题公式</a>，$P_1, P_2, \cdots, P_n$ 是出现在 $G$ 中的命题变元，当用任意的谓词公式 $G_i(1\le i \le n)$ 分别代入 $P_i$ 后，得到的新谓词公式 $G(G_1, G_2, \cdots, G_n)$​ 称为原公式的<strong>代入实例</strong>。</p>
<p>定理：永真公式的任意一个代入实例必为有效公式。</p>
<hr>
<p>##谓词演算中的基本等价公式</p>
<p><a href="#命题公式的基本等价关系">命题演算中的基本等价公式</a>在谓词演算中依然成立。</p>
<table>
<thead>
<tr>
<th style="text-align:center">性质</th>
<th style="text-align:left">等式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">改名规则</td>
<td style="text-align:left"><code>(\exists x)G(x) = (\exists y)G(y)</code><br/><code>(\forall x)G(x) = (\forall y)G(y)</code></td>
</tr>
<tr>
<td style="text-align:center">量词转换律<br/>or<br/>量词否定等价式</td>
<td style="text-align:left"><code>\neg (\exists x)G(x) = (\forall x)G(x)</code><br/><code>\neg (\forall x) \neg G(x) = (\exists x) \neg G(x)</code></td>
</tr>
</tbody>
</table>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>命题公式、范式和推理都是针对命题演算，它们的对象都是命题。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>经典字符串匹配</title>
      <link>/blog/2022/01/%E7%BB%8F%E5%85%B8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Fri, 21 Jan 2022 00:15:00 +0000</pubDate>
      
      <guid>/blog/2022/01/%E7%BB%8F%E5%85%B8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</guid>
      <description><![CDATA[经典字符串匹配 BF暴力匹配算法 暴力匹配，即Brute Force，简称BF算法。BF算法是一种简单朴素的模式匹配算法，常用于在一个主串S内查找]]></description>
      <content:encoded><![CDATA[<h1 id="经典字符串匹配" data-numberify>经典字符串匹配<a class="anchor ms-1" href="#经典字符串匹配"></a></h1>
<h1 id="bf暴力匹配算法" data-numberify>BF暴力匹配算法<a class="anchor ms-1" href="#bf暴力匹配算法"></a></h1>
<p>暴力匹配，即Brute Force，简称BF算法。BF算法是一种简单朴素的模式匹配算法，常用于在一个主串S内查找一个子串T的出现位置。</p>
<h2 id="算法步骤" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤"></a></h2>
<p>假设有主串S与子串P，主串S的长度为N，子串T的长度为M。</p>
<ol>
<li>将S和T左对齐，并比较其第一个元素。</li>
<li>若匹配，则继续比较下一个元素，一直到第M个元素。</li>
<li>若不匹配则T向右移动一个位置。</li>
<li>接着根据步骤3和4进行比较，直到匹配到或者T移动了N-M且仍未匹配到。</li>
</ol>
<h2 id="代码实现" data-numberify>代码实现<a class="anchor ms-1" href="#代码实现"></a></h2>
<h3 id="python实现" data-numberify>Python实现<a class="anchor ms-1" href="#python实现"></a></h3>
<p>实现1：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">BFMatch</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 匹配阶段</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 匹配，s和p的指针均向前一步</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 不匹配，i后退到下一个要匹配的位置，j后头到p开头</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="s2">&#34;abcdefghijkl&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="s2">&#34;ijk&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">BFMatch</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;False&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span></code></pre></div><p>实现2：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">BFMatch</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 最多移动len(s)-len(p)+1次</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 如果s的前len(s)-len(p)+1个与p均没有匹配</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 那么直接判断为不匹配，无需比较后len(p)-1个</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">index</span> <span class="o">=</span> <span class="n">i</span>           <span class="c1"># 当前比较的字符</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 相等继续比较下一个</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">==</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 不相等停止比较</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 如果完全相等，返回当前位置</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">index</span> <span class="o">-</span> <span class="n">i</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">i</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="s2">&#34;abcdefghijkl&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="s2">&#34;ijk&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">BFMatch</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;False&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="c实现" data-numberify>C实现<a class="anchor ms-1" href="#c实现"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">BFMatch</span><span class="p">(</span><span class="kt">char</span> <span class="n">s</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len_s</span><span class="p">,</span> <span class="kt">char</span> <span class="n">p</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len_p</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">len_s</span> <span class="o">&lt;</span> <span class="n">len_p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 之匹配s的前len_s-len_p+1个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果s[len(s)-len(p)] != p[0]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 那么就不用继续匹配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// i-j代表s与p对齐的位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">len_s</span><span class="o">-</span><span class="n">len_p</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">len_p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define S &#34;abcdefghijkl&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define P &#34;ijk&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="kt">char</span> <span class="n">s</span><span class="p">[</span><span class="k">sizeof</span><span class="p">(</span><span class="n">S</span><span class="p">)]</span> <span class="o">=</span> <span class="n">S</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">p</span><span class="p">[</span><span class="k">sizeof</span><span class="p">(</span><span class="n">P</span><span class="p">)]</span> <span class="o">=</span> <span class="n">P</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="nf">BFMatch</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">S</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">            <span class="n">p</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">P</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;False</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="kmp快速匹配算法" data-numberify>KMP快速匹配算法<a class="anchor ms-1" href="#kmp快速匹配算法"></a></h1>
<p>快速模式匹配算法，即Knuth Morris Pratt（简称KMP）算法，是解决字符串匹配问题的经典算法。</p>
<p>KMP算法是在 BF 算法基础上改进得到的算法。BF算法的实现过程是用子串与主串中的字符一一配对，算法执行效率不高。对于主串S和子串P，BF算法如果遇到了不匹配的情况，主串S和子串P的指针都会回退，而且子串会回退到子串首部。KMP算法的实现过程接近人为进行模式匹配的过程。它只需回退子串，并且是根据情况回退，并不一定要回退到子串首部。</p>
<h2 id="算法步骤-1" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤-1"></a></h2>
<p>假设有主串S与子串P，主串S的长度为N，子串T的长度为M。</p>
<ol>
<li>求字串P的部分匹配表。</li>
<li>将S和T左对齐，并比较其第一个元素。</li>
<li>若匹配，则继续比较下一个元素，一直到第M个元素。</li>
<li>若不匹配，根据部分匹配表回退P的指针。</li>
<li>接着根据步骤3和4进行比较，直到匹配到或者T移动了N-M且仍未匹配到。</li>
</ol>
<h3 id="失配指针求解" data-numberify>失配指针求解<a class="anchor ms-1" href="#失配指针求解"></a></h3>
<p>让KMP尽量减少回移的关键在于，用一个部分匹配表（也称失配移动表）记录每次需要回退的位置。部分匹配表是一个与原字符串长度相等的整数数组。表中的元素是字符串中相对于元素的前缀集合和后缀集合的交集中的长度最大的字符串的</p>
<p>假设一个长度为n的模式串为$P=a_0a_1&hellip;a_{n-1}$，其中$a_i(0\le i&lt;n)$是单个字符， $Next[\ n+1\ ]$为其部分匹配表。</p>
<p>那么对于$a_{i-1}$：</p>
<ul>
<li>
<p>前缀集合：</p>
<p>$$
P_1={a_0,a_0a_1,\cdots,a_0&hellip;a_{i-1}}
$$</p>
</li>
<li>
<p>后缀集合：</p>
<p>$$
P_2={a_{i-1},a_{i-2}a_{i-1},\cdots,a_1&hellip;a_{i-1}}
$$</p>
</li>
<li>
<p>失配指针：</p>
<p>$$
Next[i] =
\begin{cases}
-1 &amp; 当\ i=0 时 \
max &amp; { k|0&lt;k&lt;j 且 &ldquo;p_0\cdots p_{k-1}&rdquo; = &ldquo;p_{j-k}\cdots p_{j-1}&rdquo; } \
0 &amp; 其他情况
\end{cases}
$$</p>
<p>即：</p>
<ul>
<li>$Next[0] = -1$；</li>
<li>$Next[i] = maxLength(P_1 \cap P_2),\ i \neq 0$。</li>
</ul>
</li>
</ul>
<p>过程代码演示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_next_process</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">next_val</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;第&#34;</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;趟：&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;^&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;初始化&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">next_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_next</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;求部分匹配表（失配指针）&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>    <span class="c1"># 指向主串的指针</span>
</span></span><span class="line"><span class="cl">    <span class="n">j</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>   <span class="c1"># 指向模式串的指针，一开始</span>
</span></span><span class="line"><span class="cl">    <span class="n">next_val</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>    <span class="c1"># 要返回的next数组</span>
</span></span><span class="line"><span class="cl">    <span class="n">get_next_process</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">next_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># next[0]==-1，只需要求后面的len(p)-1个值即可</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 匹配成功，相同前缀长度增加1</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>    
</span></span><span class="line"><span class="cl">            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_val</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span>
</span></span><span class="line"><span class="cl">            <span class="n">get_next_process</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">next_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 匹配不成功则在前面的子串中继续搜索，直至找不到</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="n">next_val</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">next_val</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="s2">&#34;abababc&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">get_next</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span></span></code></pre></div><p>输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">第 1 趟：
</span></span><span class="line"><span class="cl">abababc
</span></span><span class="line"><span class="cl">初始化
</span></span><span class="line"><span class="cl">[-1, -1, -1, -1, -1, -1, -1]
</span></span><span class="line"><span class="cl">第 2 趟：
</span></span><span class="line"><span class="cl">abababc
</span></span><span class="line"><span class="cl"> abababc
</span></span><span class="line"><span class="cl"> ^
</span></span><span class="line"><span class="cl">[-1, 0, -1, -1, -1, -1, -1]
</span></span><span class="line"><span class="cl">第 3 趟：
</span></span><span class="line"><span class="cl">abababc
</span></span><span class="line"><span class="cl">  abababc
</span></span><span class="line"><span class="cl">  ^
</span></span><span class="line"><span class="cl">[-1, 0, 0, -1, -1, -1, -1]
</span></span><span class="line"><span class="cl">第 4 趟：
</span></span><span class="line"><span class="cl">abababc
</span></span><span class="line"><span class="cl">  abababc
</span></span><span class="line"><span class="cl">   ^
</span></span><span class="line"><span class="cl">[-1, 0, 0, 1, -1, -1, -1]
</span></span><span class="line"><span class="cl">第 5 趟：
</span></span><span class="line"><span class="cl">abababc
</span></span><span class="line"><span class="cl">  abababc
</span></span><span class="line"><span class="cl">    ^
</span></span><span class="line"><span class="cl">[-1, 0, 0, 1, 2, -1, -1]
</span></span><span class="line"><span class="cl">第 6 趟：
</span></span><span class="line"><span class="cl">abababc
</span></span><span class="line"><span class="cl">  abababc
</span></span><span class="line"><span class="cl">     ^
</span></span><span class="line"><span class="cl">[-1, 0, 0, 1, 2, 3, -1]
</span></span><span class="line"><span class="cl">第 7 趟：
</span></span><span class="line"><span class="cl">abababc
</span></span><span class="line"><span class="cl">  abababc
</span></span><span class="line"><span class="cl">      ^
</span></span><span class="line"><span class="cl">[-1, 0, 0, 1, 2, 3, 4]
</span></span></code></pre></div><h2 id="代码实现-1" data-numberify>代码实现<a class="anchor ms-1" href="#代码实现-1"></a></h2>
<h3 id="python实现-1" data-numberify>Python实现<a class="anchor ms-1" href="#python实现-1"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_next</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;求部分匹配表（失配指针）&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>    <span class="c1"># 指向主串的指针</span>
</span></span><span class="line"><span class="cl">    <span class="n">j</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>   <span class="c1"># 指向模式串的指针</span>
</span></span><span class="line"><span class="cl">    <span class="n">next_val</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>    <span class="c1"># 要返回的next数组</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># next[0]==-1，只需要求后面的len(p)-1个值即可</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 匹配成功，相同前缀长度增加1</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>    
</span></span><span class="line"><span class="cl">            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_val</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 匹配不成功则在前面的子串中继续搜索，直至找不到</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="n">next_val</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">next_val</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">KMP</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 求next数组</span>
</span></span><span class="line"><span class="cl">    <span class="nb">next</span> <span class="o">=</span> <span class="n">get_next</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 匹配阶段</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="nb">next</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="s2">&#34;ababababca&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="s2">&#34;abababc&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">KMP</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;False&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span></code></pre></div><p>优化代码：去除<code>get_next()</code>，边匹配边计算部分匹配表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">KMP</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">p_i</span><span class="p">,</span> <span class="n">p_j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">next</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 边计算部分匹配表，边匹配</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 求部分匹配表</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">p_i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">p_j</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">p</span><span class="p">[</span><span class="n">p_i</span><span class="p">]</span> <span class="o">==</span> <span class="n">p</span><span class="p">[</span><span class="n">p_j</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">p_i</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="n">p_j</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="nb">next</span><span class="p">[</span><span class="n">p_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_j</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">p_j</span> <span class="o">=</span> <span class="nb">next</span><span class="p">[</span><span class="n">p_j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 匹配阶段</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="nb">next</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="s2">&#34;ababababca&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="s2">&#34;abababc&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">KMP</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;False&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="c语言" data-numberify>C语言<a class="anchor ms-1" href="#c语言"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">KMP</span><span class="p">(</span><span class="kt">char</span> <span class="n">s</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len_s</span><span class="p">,</span> <span class="kt">char</span> <span class="n">p</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len_p</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">len_s</span> <span class="o">&lt;</span> <span class="n">len_p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建和初始化部分匹配表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span><span class="o">*</span> <span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="n">len_p</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len_p</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">next</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 边计算部分匹配表，边匹配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p_i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p_j</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len_s</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len_p</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 求部分匹配表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">p_i</span> <span class="o">&lt;</span> <span class="n">len_p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">p_j</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="n">p</span><span class="p">[</span><span class="n">p_i</span><span class="p">]</span> <span class="o">==</span> <span class="n">p</span><span class="p">[</span><span class="n">p_j</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">p_i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">p_j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">next</span><span class="p">[</span><span class="n">p_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="n">p_j</span> <span class="o">=</span> <span class="n">next</span><span class="p">[</span><span class="n">p_j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 匹配阶段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="n">next</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">free</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">len_p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define LEN(S) sizeof(S)-1
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define S &#34;ababababca&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define P &#34;abababc&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="kt">char</span> <span class="n">s</span><span class="p">[</span><span class="k">sizeof</span><span class="p">(</span><span class="n">S</span><span class="p">)]</span> <span class="o">=</span> <span class="n">S</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">p</span><span class="p">[</span><span class="k">sizeof</span><span class="p">(</span><span class="n">P</span><span class="p">)]</span> <span class="o">=</span> <span class="n">P</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="nf">KMP</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="nf">LEN</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="n">p</span><span class="p">,</span> <span class="nf">LEN</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;False</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>两数交换算法</title>
      <link>/blog/2022/01/%E4%B8%A4%E6%95%B0%E4%BA%A4%E6%8D%A2%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022/01/%E4%B8%A4%E6%95%B0%E4%BA%A4%E6%8D%A2%E7%AE%97%E6%B3%95/</guid>
      <description><![CDATA[临时变量 通过建立一个临时变量来实现两数交换： def swap(x, y): print(x, y) tmp = x x = y y = tmp print(x, y) return x, y if __name__ == &#39;__main__&#39;: swap(1, 2) 缺点： 需要消耗额外的内存。 优点： 不限制类型，大]]></description>
      <content:encoded><![CDATA[<h1 id="临时变量" data-numberify>临时变量<a class="anchor ms-1" href="#临时变量"></a></h1>
<p>通过建立一个临时变量来实现两数交换：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">swap</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">tmp</span> <span class="o">=</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="n">tmp</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">swap</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span></code></pre></div><p>缺点：</p>
<p>需要消耗额外的内存。</p>
<p>优点：</p>
<p>不限制类型，大多数类型都能使用该操作。</p>
<hr>
<h1 id="加减交换" data-numberify>加减交换<a class="anchor ms-1" href="#加减交换"></a></h1>
<p>通过加减法实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">swap</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">swap</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span></code></pre></div><p>假设两个数保存在x和y中：</p>
<ol>
<li>
<p>先将y中的值加到x中。</p>
<p>即这两个数一同保存在同一内存空间x中。</p>
</li>
<li>
<p>然后用x的值减去y的值，再将其保存到内存y中。</p>
<p>x-y即为x最初的值。</p>
</li>
<li>
<p>最后再用x的值减去y的值，赋给内存x。</p>
<p>x最初的值已经在y中，所以x-y的值为y最初的值。</p>
</li>
</ol>
<p>缺点：</p>
<p>该方法只适用于数值不大的数，如果数值过大，可能会越界（对于某些语言来说）。</p>
<hr>
<h1 id="异或交换" data-numberify>异或交换<a class="anchor ms-1" href="#异或交换"></a></h1>
<p>通过异或的操作实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">swap</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">^</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">^</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">^</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">swap</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span></code></pre></div><p>缺点：</p>
<p>只能对整数类型执行位操作，不能对实数类型进行位操作。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python 基础</title>
      <link>/blog/2022/01/python-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022/01/python-%E5%9F%BA%E7%A1%80/</guid>
      <description><![CDATA[Python 语法 注释 Python 的注释风格： # 行注释 &#39;&#39;&#39; 块注释1 &#39;&#39;&#39; &#34;&#34;&#34; 块注释2 &#34;&#34;&#34; 注释中的内容将不会被执行。 标识符 首字母必须是大写或小写的英文字母或者下划线 _。 其他部]]></description>
      <content:encoded><![CDATA[<h1 id="python-语法" data-numberify>Python 语法<a class="anchor ms-1" href="#python-语法"></a></h1>
<h2 id="注释" data-numberify>注释<a class="anchor ms-1" href="#注释"></a></h2>
<p>Python 的注释风格：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 行注释</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">块注释1
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">块注释2
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span></code></pre></div><p>注释中的内容将不会被执行。</p>
<hr>
<h2 id="标识符" data-numberify>标识符<a class="anchor ms-1" href="#标识符"></a></h2>
<ul>
<li>
<p>首字母必须是大写或小写的英文字母或者下划线 <code>_</code>。</p>
</li>
<li>
<p>其他部分由大写或小写的英文字母、数字和下划线组成。</p>
</li>
<li>
<p>大小写敏感（区分大小写）。</p>
</li>
</ul>
<p>Python3 中允许使用非 ASCII 标识符，即中文也可作为标识符：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">变量</span> <span class="o">=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">变量</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">5</span>
</span></span></code></pre></div><hr>
<h2 id="关键字" data-numberify>关键字<a class="anchor ms-1" href="#关键字"></a></h2>
<p>Python <strong>关键字</strong>（<strong>keyword</strong>）不能作为标识符使用，关键字又称<strong>保留字</strong>。</p>
<p>使用 <code>keyword</code> 模块输出 Python 的所有关键字：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">keyword</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">keyword</span><span class="o">.</span><span class="n">kwlist</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;False&#39;</span><span class="p">,</span> <span class="s1">&#39;None&#39;</span><span class="p">,</span> <span class="s1">&#39;True&#39;</span><span class="p">,</span> <span class="s1">&#39;and&#39;</span><span class="p">,</span> <span class="s1">&#39;as&#39;</span><span class="p">,</span> <span class="s1">&#39;assert&#39;</span><span class="p">,</span> <span class="s1">&#39;break&#39;</span><span class="p">,</span> <span class="s1">&#39;class&#39;</span><span class="p">,</span> <span class="s1">&#39;continue&#39;</span><span class="p">,</span> <span class="s1">&#39;def&#39;</span><span class="p">,</span> <span class="s1">&#39;del&#39;</span><span class="p">,</span> <span class="s1">&#39;elif&#39;</span><span class="p">,</span> <span class="s1">&#39;else&#39;</span><span class="p">,</span> <span class="s1">&#39;except&#39;</span><span class="p">,</span> <span class="s1">&#39;finally&#39;</span><span class="p">,</span> <span class="s1">&#39;for&#39;</span><span class="p">,</span> <span class="s1">&#39;from&#39;</span><span class="p">,</span> <span class="s1">&#39;global&#39;</span><span class="p">,</span> <span class="s1">&#39;if&#39;</span><span class="p">,</span> <span class="s1">&#39;import&#39;</span><span class="p">,</span> <span class="s1">&#39;in&#39;</span><span class="p">,</span> <span class="s1">&#39;is&#39;</span><span class="p">,</span> <span class="s1">&#39;lambda&#39;</span><span class="p">,</span> <span class="s1">&#39;nonlocal&#39;</span><span class="p">,</span> <span class="s1">&#39;not&#39;</span><span class="p">,</span> <span class="s1">&#39;or&#39;</span><span class="p">,</span> <span class="s1">&#39;pass&#39;</span><span class="p">,</span> <span class="s1">&#39;raise&#39;</span><span class="p">,</span> <span class="s1">&#39;return&#39;</span><span class="p">,</span> <span class="s1">&#39;try&#39;</span><span class="p">,</span> <span class="s1">&#39;while&#39;</span><span class="p">,</span> <span class="s1">&#39;with&#39;</span><span class="p">,</span> <span class="s1">&#39;yield&#39;</span><span class="p">]</span>
</span></span></code></pre></div><hr>
<h2 id="变量的赋值" data-numberify>变量的赋值<a class="anchor ms-1" href="#变量的赋值"></a></h2>
<p>Python 中的变量并不需要声明，直接赋值后就可使用。还可以同时为多个变量赋值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pai</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">,</span> <span class="mf">2.72</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="n">b</span> <span class="o">=</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span>
</span></span></code></pre></div><hr>
<h2 id="代码规范" data-numberify>代码规范<a class="anchor ms-1" href="#代码规范"></a></h2>
<p>Python 代码中的所有块都是使用空格缩进来表示。同一块中的所有语句都必须包含相同的缩进空格数，一般使用 4 个空格作为缩进，并且最好在代码编辑器中设置将 Tab 转化为空格。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 输出数字 1~9 的平方数</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 块的开始</span>
</span></span><span class="line"><span class="cl">    <span class="n">square</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl">    <span class="n">total</span> <span class="o">+=</span> <span class="n">square</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">square</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># 块的结束</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 输出数字 1~9 的所有平方数的总和</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
</span></span></code></pre></div><p>缩进相同的一组语句构成一个代码块，或称之为代码组。</p>
<hr>
<p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p>
<p>空行是程序代码的一部分，但并不是 Python 语法的一部分。空行的作用在于分割两段不同功能或含义的代码，便于日后代码的维护或重构，有无空行并不影响程序运行。</p>
<hr>
<p>反斜杠 <code>\</code> 作为续行符，表示下一行是上一行的延续。对于过长的语句，Python 使用反斜杠、换行再加上缩进来将长语句分为多行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">total</span> <span class="o">=</span> <span class="n">item_one</span> <span class="o">+</span> \
</span></span><span class="line"><span class="cl">        <span class="n">item_two</span> <span class="o">+</span> \
</span></span><span class="line"><span class="cl">        <span class="n">item_three</span>
</span></span></code></pre></div><p>在 <code>[]</code>,<code>{}</code>, 或 <code>()</code> 中的多行语句，不需要使用反斜杠 <code>\</code> 来换行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">total</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;item_one&#39;</span><span class="p">,</span> <span class="s1">&#39;item_two&#39;</span><span class="p">,</span> <span class="s1">&#39;item_three&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;item_four&#39;</span><span class="p">,</span> <span class="s1">&#39;item_five&#39;</span><span class="p">]</span>
</span></span></code></pre></div><hr>
<p>Python 可以在同一行中使用多条语句，语句之间使用分号 <code>;</code> 分割。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span> <span class="o">=</span> <span class="s1">&#39;123&#39;</span><span class="p">;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">123</span>
</span></span></code></pre></div><hr>
<h1 id="标准数据类型" data-numberify>标准数据类型<a class="anchor ms-1" href="#标准数据类型"></a></h1>
<p>Python 支持 6 种基本数据类型：</p>
<ul>
<li>
<p><strong>Number</strong> —— 数字类型</p>
</li>
<li>
<p><strong>String</strong> —— 字符串类型</p>
</li>
<li>
<p><strong>List</strong> —— 列表</p>
</li>
<li>
<p><strong>Tuple</strong> —— 元组</p>
</li>
<li>
<p><strong>Set</strong> —— 集合</p>
</li>
<li>
<p><strong>Dictionary</strong> —— 字典</p>
</li>
</ul>
<p>List、Dictionary、Set 是 Python 内置的数据结构。</p>
<p>Python 变量分为可变和不可变数据类型，以下是它们的定义：</p>
<ul>
<li>
<p><strong>不可变（immutable）数据类型</strong>：当该数据类型对应的变量的值发生了改变，它对应的内存地址也会发生改变（重新分配内存空间），如 Number、String、Tuple。即，数据中的元素不能被更改。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 测试 Number 类型是否是不可变数据类型</span>
</span></span><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>      <span class="c1"># 赋值</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="mi">2</span>      <span class="c1"># 改变值</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 可能输出：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1562536992 &lt;class &#39;int&#39;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1562537024 &lt;class &#39;int&#39;&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><strong>可变（mutable）数据类型</strong>：当该数据类型对应的变量的值发生了改变，它对应的内存地址不发生改变，如 List、Dictionary、Set。即，数据中的元素可以被更改。</p>
</li>
</ul>
<p>可迭代对象：List、Tuple、Set 、 Dictionary 和 String。</p>
<hr>
<h2 id="number类型" data-numberify>Number类型<a class="anchor ms-1" href="#number类型"></a></h2>
<p>Python 支持的数字类型：</p>
<ul>
<li>
<p><strong>int</strong> —— 整数类型。</p>
</li>
<li>
<p><strong>float</strong> —— 浮点数类型（实数类型），如 <code>3.14</code>、<code>3E-2</code>。</p>
</li>
<li>
<p><strong>bool</strong> —— 布尔类型（<code>True</code> 和 <code>False</code>）。</p>
</li>
<li>
<p><strong>complex</strong> —— 复数类型，如 <code>1.1 + 2.2j</code>、<code>complex(a, b)</code>。</p>
</li>
</ul>
<p>Python 2 中有 long 型，Python 3 中没有。</p>
<hr>
<h3 id="数字函数" data-numberify>数字函数<a class="anchor ms-1" href="#数字函数"></a></h3>
<p>数字函数需要导入 math 模块：<code>import math</code></p>
<table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>abs(x)</code></td>
<td>返回数字 <code>x</code>（可以是复数）的绝对值（内置函数，不用导入 math 模块）。</td>
</tr>
<tr>
<td><code>ceil(x)</code></td>
<td>返回数字 <code>x</code> 的上入整数（向上取整）。</td>
</tr>
<tr>
<td><code>cmp(x, y)</code></td>
<td>如果 <code>x &lt; y</code> 返回 <code>-1</code>，如果 <code>x == y</code> 返回 <code>0</code>，如果 <code>x &gt; y</code> 返回 <code>1</code>。
Python 3 已废弃，使用 <code>(x&gt;y)-(x&lt;y)</code> 替换。</td>
</tr>
<tr>
<td><code>exp(x)</code></td>
<td>返回 <code>e</code> 的 <code>x</code> 次幂 $e^x$。</td>
</tr>
<tr>
<td><code>fabs(x)</code></td>
<td>返回数字 <code>x</code>（不能是复数）的绝对值。</td>
</tr>
<tr>
<td><code>floor(x)</code></td>
<td>返回数字的下舍整数（向下取整）。</td>
</tr>
<tr>
<td><code>log(x[, y])</code></td>
<td><code>log(x)</code> —— 返回 <code>x</code> 的自然对数；
<code>log(x, y)</code> —— 返回以 <code>y</code> 为基数的 <code>x</code> 的对数：$\log_y{x}$。</td>
</tr>
<tr>
<td><code>log10(x)</code></td>
<td>返回以 10为基数的 <code>x</code> 的对数。</td>
</tr>
<tr>
<td><code>max(x1, x2,...)</code></td>
<td>返回给定参数的最大值，参数可以为序列。</td>
</tr>
<tr>
<td><code>min(x1, x2,...)</code></td>
<td>返回给定参数的最小值，参数可以为序列。</td>
</tr>
<tr>
<td><code>modf(x)</code></td>
<td>返回 <code>x</code> 的整数部分与小数部分，两部分的数值符号与 <code>x</code> 相同，整数部分以浮点型表示。</td>
</tr>
<tr>
<td><code>pow(x, y[, z])</code></td>
<td><code>pow(x, y)</code> —— <code>x**y</code> 运算后的值；
<code>pow(x, y, z)</code> —— 相当于 <code>pow(x, y) % z</code>。
通过内置方法调用，会把参数作为整型，而 math 会把参数转换为 float。</td>
</tr>
<tr>
<td><code>round(x [, n])</code></td>
<td>返回浮点数 <code>x</code> 的四舍五入值，如给出 <code>n</code> 值，则代表舍入到小数点后的位数。
<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td>
</tr>
<tr>
<td><code>sqrt(x)</code></td>
<td>返回数字 <code>x</code> 的平方根。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="string类型" data-numberify>String类型<a class="anchor ms-1" href="#string类型"></a></h2>
<p>Python 的字符串（String）有以下特点：</p>
<ul>
<li>
<p>字符串常量可以使用单引号 <code>'</code> 和双引号 <code>&quot;</code> 指定。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">str1</span> <span class="o">=</span> <span class="s1">&#39;Hello&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">str2</span> <span class="o">=</span> <span class="s1">&#39;World&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span> <span class="n">str2</span><span class="p">,</span> <span class="s1">&#39;!&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Hello</span> <span class="n">World</span> <span class="err">!</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">str1</span> <span class="o">=</span> <span class="s1">&#39;打印 &#34;双引号&#34; &#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">str1</span> <span class="o">+=</span> <span class="s2">&#34;要用 &#39;单引号&#39; 将其括起来&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">str1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">打印</span> <span class="s2">&#34;双引号&#34;</span> <span class="n">要用</span> <span class="s1">&#39;单引号&#39;</span> <span class="n">将其括起来</span>
</span></span></code></pre></div></li>
<li>
<p>使用三个引号可指定一个多行字符串常量。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">str1</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;这是一个段落，
</span></span></span><span class="line"><span class="cl"><span class="s2">... 可以由多行组成&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">str1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">这是一个段落</span><span class="err">，</span>
</span></span><span class="line"><span class="cl"><span class="n">可以由多行组成</span>
</span></span></code></pre></div></li>
<li>
<p>转义符用 <code>\</code>  开头。单个反斜杠依然可以作为续行符。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span> <span class="o">=</span> <span class="s1">&#39;str</span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="s1">... ing&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">string</span>
</span></span></code></pre></div></li>
<li>
<p>使用 <code>r</code> 或 <code>R</code> 可以让反斜杠不发生转义。这样的字符串被称为原始字符串。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;this is a line with \n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">line</span> <span class="k">with</span> \<span class="n">n</span>
</span></span></code></pre></div></li>
<li>
<p>按字面意义级联字符串。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;this &#39;</span> <span class="s1">&#39;is &#39;</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">this</span> <span class="ow">is</span> <span class="n">string</span>
</span></span></code></pre></div></li>
<li>
<p>字符串可以用 <code>+</code> 运算符连接在一起，用 <code>*</code> 运算符重复。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;this &#39;</span> <span class="o">+</span> <span class="s1">&#39;is &#39;</span> <span class="o">+</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">this</span> <span class="ow">is</span> <span class="n">string</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span> <span class="o">=</span> <span class="s1">&#39;Hello World!&#39;</span> <span class="o">*</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Hello</span> <span class="n">World</span><span class="err">!</span><span class="n">Hello</span> <span class="n">World</span><span class="err">!</span><span class="n">Hello</span> <span class="n">World</span><span class="err">!</span>
</span></span></code></pre></div></li>
<li>
<p>有两种索引方式：从左往右以 0 开始，从右往左以 -1 开始。</p>
</li>
<li>
<p>字符串的截取的语法格式：<code>变量[头下标:尾下标:步长]</code>。字符串被截取后返回一个包含所需字符的新字符串。遵循<strong>左闭右开</strong>原则。</p>
<p><strong>尾下标</strong>从 <code>1</code> 开始。</p>
<p><strong>步长</strong>是指输出字符串中第 $n$ 个字符后，接着输出第 $(n + 步长)$ 个字符，直至到达尾下标指定处。</p>
<p>省略步长代表按字符串顺序输出，省略尾下标代表截取到字符串的最后一个字符，省略头下标代表从第一个字符开始截取。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span><span class="o">=</span><span class="s1">&#39;123456789&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>    <span class="c1"># 输出字符串第一个字符</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">])</span>    <span class="c1"># 输出从第三个开始到第五个的字符</span>
</span></span><span class="line"><span class="cl"><span class="mi">345</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>  <span class="c1"># 输出第一个到倒数第二个的所有字符</span>
</span></span><span class="line"><span class="cl"><span class="mi">12345678</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="mi">2</span><span class="p">:])</span>    <span class="c1"># 输出从第三个开始后的所有字符</span>
</span></span><span class="line"><span class="cl"><span class="mi">3456789</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[:</span><span class="mi">3</span><span class="p">])</span>    <span class="c1"># 输出从第一个开始到第三个的字符</span>
</span></span><span class="line"><span class="cl"><span class="mi">123</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">5</span><span class="p">:</span><span class="mi">2</span><span class="p">])</span>  <span class="c1"># 输出从第二个开始到第五个且每隔一个的字符（步长为2）</span>
</span></span><span class="line"><span class="cl"><span class="mi">24</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[:])</span>    <span class="c1"># 同时省略头下标和尾，创建了一个str的副本</span>
</span></span></code></pre></div></li>
<li>
<p>字符串不能改变。即，字符串的切片不能被赋值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span> <span class="o">=</span> <span class="s1">&#39;string&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;S&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ne">TypeError</span><span class="p">:</span> <span class="s1">&#39;str&#39;</span> <span class="nb">object</span> <span class="n">does</span> <span class="ow">not</span> <span class="n">support</span> <span class="n">item</span> <span class="n">assignment</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span> <span class="o">=</span> <span class="s1">&#39;string&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">string</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span> <span class="o">=</span> <span class="s1">&#39;String&#39;</span>  <span class="c1"># 修改字符串只能重新进行赋值</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">String</span>
</span></span></code></pre></div></li>
<li>
<p>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</p>
</li>
</ul>
<p>在Python2中，普通字符串是以 8 位 ASCII 码进行存储的，而 Unicode 字符串则存储为 16 位 unicode 字符串。使用的语法是在字符串前面加上前缀 <code>u</code>。</p>
<p>在Python3中，所有的字符串都是 Unicode 字符串。</p>
<hr>
<h3 id="转义符" data-numberify>转义符<a class="anchor ms-1" href="#转义符"></a></h3>
<table>
<thead>
<tr>
<th><strong>转义字符</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\</code>（在代码行尾时）</td>
<td>续行符。</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>反斜杠符号。</td>
</tr>
<tr>
<td><code>\'</code></td>
<td>单引号。</td>
</tr>
<tr>
<td><code>\&quot;</code></td>
<td>双引号。</td>
</tr>
<tr>
<td><code>\a</code></td>
<td>响铃
<code>print(&quot;\a&quot;)</code>执行后电脑有响声。</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>退格（Backspace）。</td>
</tr>
<tr>
<td><code>\000</code></td>
<td>空。</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>换行。</td>
</tr>
<tr>
<td><code>\v</code></td>
<td>纵向制表符。</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>横向制表符。</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>回车，将 <code>\r</code> 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 <code>\r</code> 后面的内容完全替换完成。</td>
</tr>
<tr>
<td><code>\f</code></td>
<td>换页。</td>
</tr>
<tr>
<td><code>\yyy</code></td>
<td>八进制数，<code>y</code> 代表 0~7 的字符，如 <code>\012</code> 代表换行。</td>
</tr>
<tr>
<td><code>\xyy</code></td>
<td>十六进制数，以 <code>\x</code> 开头，<code>y</code> 代表的字符，例 <code>\x0a</code> 代表换行。</td>
</tr>
<tr>
<td><code>\other</code></td>
<td>其它的字符以普通格式输出。</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="格式化字符串" data-numberify>格式化字符串<a class="anchor ms-1" href="#格式化字符串"></a></h3>
<p><code>print()</code> 函数能够使用 <code>%</code> 来进行格式化字符串的输出。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%e</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="mf">3.14</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mf">3.140000e+00</span>
</span></span></code></pre></div><p>字符串格式化符号：</p>
<table>
<thead>
<tr>
<th><strong>符  号</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%c</code></td>
<td>格式化字符及其 ASCII 码。</td>
</tr>
<tr>
<td><code>%s</code></td>
<td>格式化字符串。</td>
</tr>
<tr>
<td><code>%d</code></td>
<td>格式化整数。</td>
</tr>
<tr>
<td><code>%u</code></td>
<td>格式化无符号整型。</td>
</tr>
<tr>
<td><code>%o</code></td>
<td>格式化无符号八进制数。</td>
</tr>
<tr>
<td><code>%x</code></td>
<td>格式化无符号十六进制数。</td>
</tr>
<tr>
<td><code>%X</code></td>
<td>格式化无符号十六进制数（大写）。</td>
</tr>
<tr>
<td><code>%f</code></td>
<td>格式化浮点数字，可指定小数点后的精度。</td>
</tr>
<tr>
<td><code>%e</code> 或 <code>%E</code></td>
<td>用科学计数法格式化浮点数。
<code>%e</code> 中显示的字母为小写，<code>%E</code> 则为大写。</td>
</tr>
<tr>
<td><code>%g</code></td>
<td>%f和%e的简写。</td>
</tr>
<tr>
<td><code>%G</code></td>
<td>%f 和 %E 的简写。</td>
</tr>
<tr>
<td><code>%p</code></td>
<td>用十六进制数格式化变量的地址。</td>
</tr>
</tbody>
</table>
<p>格式化操作符辅助符号：</p>
<table>
<thead>
<tr>
<th><strong>符号</strong></th>
<th><strong>功能</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>定义宽度或者小数点精度。</td>
</tr>
<tr>
<td><code>-</code></td>
<td>用做左对齐。</td>
</tr>
<tr>
<td><code>+</code></td>
<td>在正数前面显示加号。</td>
</tr>
<tr>
<td><code>&lt;sp&gt;</code></td>
<td>在正数前面显示空格。</td>
</tr>
<tr>
<td><code>#</code></td>
<td>在八进制数前面显示零 <code>'0'</code>，在十六进制前面显示 <code>'0x'</code> 或者 <code>'0X'</code>（取决于用的是 <code>'x'</code> 还是 <code>'X'</code>）。</td>
</tr>
<tr>
<td><code>0</code></td>
<td>显示的数字前面填充 <code>'0'</code> 而不是默认的空格。</td>
</tr>
<tr>
<td><code>%</code></td>
<td><code>'%%'</code> 输出一个单一的 <code>'%'</code>。</td>
</tr>
<tr>
<td><code>(var)</code></td>
<td>映射变量(字典参数)。</td>
</tr>
<tr>
<td><code>m.n.</code></td>
<td>m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)。</td>
</tr>
</tbody>
</table>
<p>辅助符号在格式字符串 <code>%</code> 和符号中间使用，如需指定其它参数需要在字符串后的 <code>%</code> 使用括号 <code>()</code> 指定参数和要显示的值。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%*d</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="mi">2</span>
</span></span></code></pre></div><hr>
<h3 id="f-string" data-numberify>f-string<a class="anchor ms-1" href="#f-string"></a></h3>
<p>f-string 是 python3.6 之后版本添加的，称之为字面量格式化字符串，是新的格式化字符串的语法。f-string格式化字符串以 <code>f</code> 开头，后面跟着字符串，字符串中的表达式用大括号 <code>{}</code> 包起来，它会将变量或表达式计算后的值替换进去。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;World!&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="s1">&#39;Hello </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s1">&#39;</span>  <span class="c1"># 替换变量</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;Hello World!&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="mi">1</span><span class="o">+</span><span class="mi">2</span><span class="si">}</span><span class="s1">&#39;</span>         <span class="c1"># 使用表达式</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;3&#39;</span>
</span></span></code></pre></div><hr>
<h3 id="strformat" data-numberify>str.format()<a class="anchor ms-1" href="#strformat"></a></h3>
<p><code>str.format()</code> 是用于格式化字符串的字符串方法。旧式的格式化最终会从该语言中移除，应该更多的使用 <code>str.format()</code>。</p>
<p><code>format()</code> 将 <code>str</code> 中的格式化字段（<code>{}</code> 及其里面包含的字符）替换为 <code>format()</code> 中的参数。它的用法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{}</span><span class="s1"> and </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">))</span>      <span class="c1"># 按照参数顺序</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="ow">and</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{1}</span><span class="s1"> and </span><span class="si">{0}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">))</span>    <span class="c1"># 指定参数位置（从 0 开始）</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="ow">and</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{}</span><span class="s1"> and </span><span class="si">{b}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="s1">&#39;b&#39;</span><span class="p">))</span>  <span class="c1"># 指定关键字</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="ow">and</span> <span class="n">b</span>
</span></span></code></pre></div><p><code>!a</code>（使用 <code>ascii()</code>)，<code>!s</code>（使用 <code>str()</code>）和 <code>!r</code>（使用 <code>repr()</code>）可以用于在格式化某个值之前对其进行转化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">math</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;常量 PI 的值近似为： </span><span class="si">{}</span><span class="s1">。&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">pi</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">常量</span> <span class="n">PI</span> <span class="n">的值近似为</span><span class="err">：</span> <span class="mf">3.141592653589793</span><span class="err">。</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;常量 PI 的值近似为： </span><span class="si">{!r}</span><span class="s1">。&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">pi</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">常量</span> <span class="n">PI</span> <span class="n">的值近似为</span><span class="err">：</span> <span class="mf">3.141592653589793</span><span class="err">。</span>
</span></span></code></pre></div><p>可以使用 <code>:</code>，在右边指定输出形式，在 <code>:</code> 左边的是 <code>format()</code> 参数位置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">math</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;常量 PI 的值近似为 </span><span class="si">{0:.3f}</span><span class="s1">。&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">pi</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">常量</span> <span class="n">PI</span> <span class="n">的值近似为</span> <span class="mf">3.142</span><span class="err">。</span>
</span></span></code></pre></div><p>在 <code>:</code> 后传入一个整数, 可以保证该域至少有这么多的宽度。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">table</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">number</span> <span class="ow">in</span> <span class="n">table</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{0:10}</span><span class="s1"> ==&gt; </span><span class="si">{1:10d}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span>          <span class="o">==&gt;</span>          <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span>          <span class="o">==&gt;</span>          <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span>          <span class="o">==&gt;</span>          <span class="mi">3</span>
</span></span></code></pre></div><p>传入一个字典，然后使用方括号 <code>[]</code> 来访问键值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">table</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;b: </span><span class="si">{0[b]:d}</span><span class="s1">; a: </span><span class="si">{0[a]:d}</span><span class="s1">; c: </span><span class="si">{0[c]:d}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">table</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">;</span> <span class="n">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span> <span class="n">c</span><span class="p">:</span> <span class="mi">3</span>
</span></span></code></pre></div><p>也可以通过在变量前使用 <code>**</code> 来实现相同的功能：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">table</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;b: </span><span class="si">{b:d}</span><span class="s1">; a: </span><span class="si">{a:d}</span><span class="s1">; c: </span><span class="si">{c:d}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="n">table</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">;</span> <span class="n">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span> <span class="n">c</span><span class="p">:</span> <span class="mi">3</span>
</span></span></code></pre></div><hr>
<h3 id="字符串方法" data-numberify>字符串方法<a class="anchor ms-1" href="#字符串方法"></a></h3>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>str.capitalize()</code></td>
<td>将字符串的第一个字符转换为大写。</td>
</tr>
<tr>
<td><code>str.center(width[, fillchar])</code></td>
<td>返回一个指定的宽度 <code>width</code> 居中的字符串。
<code>fillchar</code> 为填充的字符，默认为空格。</td>
</tr>
<tr>
<td><code>str.count(sub[, start= 0, end=len(string)])</code></td>
<td>返回 <code>sub</code> 在 <code>str</code> 的指定范围里面出现的次数。
<code>sub</code> —— 搜索的子字符串。
<code>start</code> —— 字符串开始搜索的位置。默认为第一个字符（索引为 <code>0</code>）。
<code>end</code> —— 字符串中结束搜索的位置。默认为字符串的最后一个位置。</td>
</tr>
<tr>
<td><code>str.encode(encoding='UTF-8',errors='strict')</code></td>
<td>以 <code>encoding</code> 指定的编码格式编码字符串，如果出错默认报一个<code>ValueError</code> 的异常，除非 <code>errors</code> 指定的是 <code>'ignore'</code> 或者 <code>'replace'</code>。</td>
</tr>
<tr>
<td><code>bytes.decode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)</code></td>
<td>以指定的编码格式解码 <code>bytes</code> 对象。
<code>encoding</code> —— 要使用的编码，默认为 <code>&quot;utf-8&quot;</code>。
<code>errors</code> —— 设置不同错误的处理方案。默认为 <code>&quot;strict&quot;</code>，意为编码错误引起一个 <code>UnicodeError</code>。 其他可能的值有 <code>&quot;ignore&quot;</code>，<code>&quot;replace&quot;</code>，<code>&quot;xmlcharrefreplace&quot;</code>，<code>&quot;backslashreplace&quot;</code> 以及通过 <code>codecs.register_error()</code> 注册的任何值。
Python3 中没有 <code>decode()</code> 方法，但可以使用 <code>bytes</code> 对象的 <code>decode()</code> 方法来解码给定的 <code>bytes</code> 对象，这个 <code>bytes</code> 对象可以由 <code>str.encode()</code> 来编码返回<a href="https://www.wolai.com/jXMTD4hXeMQaPS4Rx4pcFg#i1UVu5eTHv7TvT3SWHoFXr" title="↩" target="_blank" rel="noopener noreferrer">↩<i class="fas fa-external-link-square-alt ms-1"></i></a>。</td>
</tr>
<tr>
<td><code>str.endswith(suffix[, start=0, end=len(string)])</code></td>
<td>检查字符串指定范围是否以 <code>suffix</code> 结束，如果是，返回 <code>True</code>，否则返回 <code>False</code>。
<code>suffix</code> —— 可以是一个字符串或者是一个元素。
<code>start</code> —— 指定的开始位置。默认为字符串第一个字符（索引为 <code>0</code>）。
<code>end</code> —— 指定的结束位置。默认为字符串的最后一个字符。</td>
</tr>
<tr>
<td><code>str.expandtabs(tabsize=8)</code></td>
<td>把字符串 <code>str</code> 中的 Tab 符号 <code>\t</code> 转为空格。
<code>tabsize</code> —— Tab 符号的长度，默认为 8。</td>
</tr>
<tr>
<td><code>str.find(sub[, beg=0, end=len(str)])</code></td>
<td>检测 <code>sub</code> 是否包含在字符串 <code>str</code> 的指定范围中，如果包含则返回开始的索引值，否则返回 <code>-1</code>。
<code>sub</code> —— 字符串。
<code>beg</code> —— 指定的开始位置。默认为字符串第一个字符（索引为 <code>0</code>）。
<code>end</code> —— 指定的结束位置。默认为字符串的最后一个字符。</td>
</tr>
<tr>
<td><code>str.index(sub[, beg=0, end=len(string)])</code></td>
<td>同 <code>find()</code>方法一样，只不过如果 <code>sub</code> 不在字符串中会报一个异常。</td>
</tr>
<tr>
<td><code>str.isalnum()</code></td>
<td>如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 <code>True</code>，否则返回 <code>False</code>。</td>
</tr>
<tr>
<td><code>str.isalpha()</code></td>
<td>如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 <code>True</code>, 否则返回 <code>False</code>。</td>
</tr>
<tr>
<td><code>str.isdigit()</code></td>
<td>如果字符串只包含数字则返回 <code>True</code>，否则返回 <code>False</code>。</td>
</tr>
<tr>
<td><code>str.islower()</code></td>
<td>如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 <code>True</code>，否则返回 <code>False</code>。</td>
</tr>
<tr>
<td><code>str.isnumeric()</code></td>
<td>如果字符串中只包含数字字符，则返回 <code>True</code>，否则返回 <code>False</code>。</td>
</tr>
<tr>
<td><code>str.isspace()</code></td>
<td>如果字符串中只包含空白，则返回 <code>True</code>，否则返回 <code>False</code>。</td>
</tr>
<tr>
<td><code>str.istitle()</code></td>
<td>如果字符串是标题化的（见 <code>title()</code>），则返回 <code>True</code>，否则返回 <code>False</code>。</td>
</tr>
<tr>
<td><code>str.isupper()</code></td>
<td>如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 <code>True</code>，否则返回 <code>False</code>。</td>
</tr>
<tr>
<td><code>str.join(sequence)</code></td>
<td>字符串 <code>str</code> 作为分隔符，将 <code>sequence</code> 中所有的元素（的字符串表示）合并为一个新的字符串。</td>
</tr>
<tr>
<td><code>len(string)</code></td>
<td>返回字符串长度。</td>
</tr>
<tr>
<td><code>str.ljust(width[, fillchar])</code></td>
<td>返回一个原字符串左对齐，并使用 <code>fillchar</code> 填充至长度 <code>width</code> 的新字符串，<code>fillchar</code> 默认为空格。如果指定的长度小于原字符串的长度则返回原字符串。</td>
</tr>
<tr>
<td><code>str.lower()</code></td>
<td>转换字符串中所有大写字符为小写。</td>
</tr>
<tr>
<td><code>str.lstrip([chars])</code></td>
<td>截掉字符串左边的空格或指定字符。
<code>chars</code> —— 指定截取的字符。</td>
</tr>
<tr>
<td><code>str.maketrans(intab, outtab)</code></td>
<td>创建字符映射的转换表。<a href="https://www.wolai.com/jXMTD4hXeMQaPS4Rx4pcFg#mqWsc4jJBXazkgF45wd4Ym" title="↩" target="_blank" rel="noopener noreferrer">↩<i class="fas fa-external-link-square-alt ms-1"></i></a><code>intab</code> —— 字符串，表示需要转换的字符。
<code>outtab</code> —— 字符串表示转换的目标。</td>
</tr>
<tr>
<td><code>max(str)</code></td>
<td>返回字符串 <code>str</code> 中最大的字母。</td>
</tr>
<tr>
<td><code>min(str)</code></td>
<td>返回字符串 <code>str</code> 中最小的字母。</td>
</tr>
<tr>
<td><code>str.replace(old, new[, max])</code></td>
<td>将字符串中的 <code>old</code> 替换成 <code>new</code>，如果 <code>max</code> 指定，则替换不超过 <code>max</code> 次。</td>
</tr>
<tr>
<td><code>str.rfind(sub[, beg=0,end=len(string)])</code></td>
<td>类似于 <code>find()</code> 函数，不过是从右边开始查找。即，返回字符串最后一次出现的位置，如果没有匹配项则返回 <code>-1</code>。</td>
</tr>
<tr>
<td><code>str.rindex(sub[, beg=0, end=len(string)])</code></td>
<td>类似于 <code>index()</code>，不过是从右边开始。即，返回子字符串 <code>sub</code> 在字符串中最后出现的位置，如果没有匹配的字符串会报异常。</td>
</tr>
<tr>
<td><code>str.rjust(width[, fillchar])</code></td>
<td>返回一个原字符串右对齐，并使用 <code>fillchar</code>（默认空格）填充至长度 <code>width</code> 的新字符串。</td>
</tr>
<tr>
<td><code>str.rstrip([chars])</code></td>
<td>删除字符串末尾的指定字符 <code>chars</code>，默认为空格。</td>
</tr>
<tr>
<td><code>str.split([str1=&quot;&quot;, num=string.count(str1)])</code></td>
<td>以参数 <code>str1</code> 为分隔符截取字符串，如果 <code>num</code> 有指定值，则仅截取 <code>num+1</code> 个子字符串<a href="https://www.wolai.com/jXMTD4hXeMQaPS4Rx4pcFg#aV1m8VHmVaQtoTLyZoCoTi" title="↩" target="_blank" rel="noopener noreferrer">↩<i class="fas fa-external-link-square-alt ms-1"></i></a>。</td>
</tr>
<tr>
<td><code>str.splitlines([keepends])</code></td>
<td>按照行（<code>'\r'</code>，<code>'\r\n'</code>，<code>\n'</code>）分隔，返回一个包含各行作为元素的列表。如果参数 <code>keepends</code> 为 <code>False</code>，返回的列表则不包含换行符；如果为 <code>True</code>，则保留换行符。</td>
</tr>
<tr>
<td><code>str.startswith(substr[, beg=0, end=len(string)])</code></td>
<td>检查字符串是否是以指定子字符串 <code>substr</code> 开头，是则返回 <code>True</code>，否则返回 <code>False</code>。如果 <code>beg</code> 和 <code>end</code> 指定值，则在指定范围内检查。</td>
</tr>
<tr>
<td><code>str.strip([chars])</code></td>
<td>在字符串上执行 <code>lstrip()</code> 和 <code>rstrip()</code>。即移除字符串头尾指定的字符 <code>chars</code>（默认为空格）。</td>
</tr>
<tr>
<td><code>str.swapcase()</code></td>
<td>将字符串中大写转换为小写，小写转换为大写。</td>
</tr>
<tr>
<td><code>str.title()</code></td>
<td>返回 “标题化” 的字符串，即转化为所有单词都是以大写开始，其余字母均为小写的形式。</td>
</tr>
<tr>
<td><code>str.translate(table[, deletechars=&quot;&quot;])</code></td>
<td>根据 <code>str</code> 给出的表（包含 256 个字符）转换 <code>str</code> 的字符，要过滤掉的字符放到 <code>deletechars</code> 参数中。</td>
</tr>
<tr>
<td><code>str.upper()</code></td>
<td>转换字符串中的小写字母为大写。</td>
</tr>
<tr>
<td><code>str.zfill (width)</code></td>
<td>返回长度为 <code>width</code> 的字符串，原字符串右对齐，前面填充 <code>0</code>。</td>
</tr>
<tr>
<td><code>str.isdecimal()</code></td>
<td>检查字符串是否只包含十进制字符（只存在于 <code>unicode</code> 对象。），如果是返回 <code>True</code>，否则返回 <code>False</code>。</td>
</tr>
</tbody>
</table>
<p><code>encode()</code> 和 <code>decode()</code> 用法实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span> <span class="o">=</span> <span class="s2">&#34;Hello World!&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">str_utf8</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;UTF-8&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">str_gbk</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;GBK&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Hello</span> <span class="n">World</span><span class="err">!</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;UTF-8 编码：&#34;</span><span class="p">,</span> <span class="n">str_utf8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">UTF</span><span class="o">-</span><span class="mi">8</span> <span class="n">编码</span><span class="err">：</span> <span class="sa">b</span><span class="s1">&#39;Hello World!&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;GBK 编码：&#34;</span><span class="p">,</span> <span class="n">str_gbk</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">GBK</span> <span class="n">编码</span><span class="err">：</span> <span class="sa">b</span><span class="s1">&#39;Hello World!&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;UTF-8 解码：&#34;</span><span class="p">,</span> <span class="n">str_utf8</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;UTF-8&#39;</span><span class="p">,</span><span class="s1">&#39;strict&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">UTF</span><span class="o">-</span><span class="mi">8</span> <span class="n">解码</span><span class="err">：</span> <span class="n">Hello</span> <span class="n">World</span><span class="err">!</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;GBK 解码：&#34;</span><span class="p">,</span> <span class="n">str_gbk</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;GBK&#39;</span><span class="p">,</span><span class="s1">&#39;strict&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">GBK</span> <span class="n">解码</span><span class="err">：</span> <span class="n">Hello</span> <span class="n">World</span><span class="err">!</span>
</span></span></code></pre></div><p><code>maketrans()</code> 的用法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">intab</span> <span class="o">=</span> <span class="s2">&#34;aeiou&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">outtab</span> <span class="o">=</span> <span class="s2">&#34;12345&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">trantab</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">maketrans</span><span class="p">(</span><span class="n">intab</span><span class="p">,</span> <span class="n">outtab</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span> <span class="o">=</span> <span class="s2">&#34;this is string example....wow!!!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="p">(</span><span class="nb">str</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">trantab</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">th3s</span> <span class="mi">3</span><span class="n">s</span> <span class="n">str3ng</span> <span class="mi">2</span><span class="n">x1mpl2</span><span class="o">....</span><span class="n">w4w</span><span class="err">!!!</span>
</span></span></code></pre></div><p><code>split()</code> 的用法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span> <span class="o">=</span> <span class="s2">&#34;this is string example....wow!!!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="p">(</span><span class="nb">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span> <span class="p">))</span>       <span class="c1"># 以空格为分隔符</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;this&#39;</span><span class="p">,</span> <span class="s1">&#39;is&#39;</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="s1">&#39;example....wow!!!&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="p">(</span><span class="nb">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>   <span class="c1"># 以 i 为分隔符</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;th&#39;</span><span class="p">,</span> <span class="s1">&#39;s is string example....wow!!!&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="p">(</span><span class="nb">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;w&#39;</span><span class="p">))</span>     <span class="c1"># 以 w 为分隔符</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;this is string example....&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span><span class="p">,</span> <span class="s1">&#39;!!!&#39;</span><span class="p">]</span>
</span></span></code></pre></div><hr>
<h3 id="byte样式字符串" data-numberify>byte样式字符串<a class="anchor ms-1" href="#byte样式字符串"></a></h3>
<p>在字符串前面加上字符 <code>b</code>，可以得到该字符串的字节类型对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="sa">b</span><span class="s1">&#39;Hello World!&#39;</span>
</span></span></code></pre></div><p>使用 16 进制 ASCII 码赋值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x48\x65\x6C\x6C\x20\x57\x6F\x72\x6C\x64\x21</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="sa">b</span><span class="s1">&#39;Hell World!&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x01\x02\x03</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x01\x02\x03</span><span class="s1">&#39;</span>
</span></span></code></pre></div><p>Python 会自动将可读的部分按照转换为文字。如果数据是不可读的，则使用 16 进制来表示。</p>
<p>byte 对象的元素是字节：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">bt</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;Hello World!&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">bt</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">108</span>
</span></span></code></pre></div><p>可以使用 <code>bin()</code> 查看每个字节在内存中的存储方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">bin</span><span class="p">(</span><span class="n">bt</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;0b1101100&#39;</span>
</span></span></code></pre></div><p>除字面量表示之外，还可以用 <code>bytes()</code> 函数来得到字节类型。</p>
<hr>
<h2 id="list" data-numberify>List<a class="anchor ms-1" href="#list"></a></h2>
<p>列表（List）由一系列按特定顺序排列的元素组成，它是写在方括号 <code>[]</code> 之间、用逗号分隔开的元素列表。列表其实更像是 Python 中的线性数据结构的实现，它具有绝大多数常见的线性数据结构的操作。</p>
<ul>
<li>
<p>列表中元素的类型可以不相同，它支持数字，字符串，甚至可以包含列表（嵌套）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="p">{</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">}]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="p">{</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">}]</span>
</span></span></code></pre></div></li>
<li>
<p>有两种索引方式：从左往右以 0 开始，从右往左以 -1 开始。</p>
</li>
<li>
<p>列表的截取的语法格式：<code>变量[头下标:尾下标:步长]</code>。遵循<strong>左闭右开</strong>原则。</p>
<p><strong>尾下标</strong>从 <code>1</code> 开始。</p>
<p><strong>步长</strong>是指输出字符串中第 $n$ 个元素后，接着输出第 $(n + 步长)$ 个元素，直至到达尾下标指定处。</p>
<p>省略尾下标代表截取到字符串的最后一个字符，省略头下标代表从第一个字符开始截取。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="p">{</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">}]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="p">(</span><span class="nb">list</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>        <span class="c1"># 输出列表第一个元素</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="p">(</span><span class="nb">list</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">])</span>      <span class="c1"># 从第二个开始输出到第三个元素</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="p">(</span><span class="nb">list</span><span class="p">[</span><span class="mi">2</span><span class="p">:])</span>      <span class="c1"># 输出从第三个元素开始的所有元素</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mf">3.4</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="p">{</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">}]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">[:])</span>        <span class="c1"># 同时省略头下标和尾，创建了一个list的副本</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">tinylist</span> <span class="o">=</span> <span class="p">[</span><span class="mi">123</span><span class="p">,</span> <span class="s1">&#39;list&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="p">(</span><span class="nb">list</span> <span class="o">+</span> <span class="n">tinylist</span><span class="p">)</span>    <span class="c1"># 连接列表</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="p">{</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">},</span> <span class="mi">123</span><span class="p">,</span> <span class="s1">&#39;list&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">double</span> <span class="o">=</span> <span class="n">tinylist</span> <span class="o">*</span> <span class="mi">2</span>    <span class="c1"># 重复列表</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">double</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">123</span><span class="p">,</span> <span class="s1">&#39;list&#39;</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="s1">&#39;list&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>      <span class="c1"># 步长为-1，表示逆向</span>
</span></span><span class="line"><span class="cl"><span class="p">[{</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">},</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="mf">3.4</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">):]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">]</span>    <span class="c1"># 在列表末尾插入元素</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="p">{</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">},</span> <span class="mi">6</span><span class="p">]</span>
</span></span></code></pre></div></li>
<li>
<p>列表中的元素是可更改的，并且列表长度也是可改变的。List 内置了许多方法来支持这种特性。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">6</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span></code></pre></div></li>
<li>
<p>列表可以用 <code>+</code> 运算符拼接，用 <code>*</code> 运算符重复。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span> <span class="o">=</span> <span class="n">list1</span> <span class="o">+</span> <span class="n">list2</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span> <span class="o">=</span> <span class="n">list1</span> <span class="o">*</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span></code></pre></div></li>
</ul>
<p>虽然列表和字符串有一些特性很相似，但它们是两个完全不同的类型。</p>
<p>删除列表或列表元素：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="nb">list</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span></code></pre></div><hr>
<h3 id="列表方法" data-numberify>列表方法<a class="anchor ms-1" href="#列表方法"></a></h3>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>list.append(obj)</code></td>
<td>在列表末尾添加新的对象 <code>obj</code>，无返回值。相当于 <code>list[len(list):] = [x]</code></td>
</tr>
<tr>
<td><code>list.count(obj)</code></td>
<td>返回 <code>obj</code> 在列表中出现的次数。</td>
</tr>
<tr>
<td><code>list.extend(seq)</code></td>
<td>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。
<code>seq</code> —— 元素列表，可以是列表、元组、集合、字典，若为字典，则仅会将键（key）作为元素依次添加至原列表的末尾。</td>
</tr>
<tr>
<td><code>list.index(x[, start[, end]])</code></td>
<td>从列表中找出某个值第一个匹配项的索引位置。如果没有找到对象则抛出异常。
<code>x</code>—— 查找的对象；
<code>start</code> —— 可选，查找的起始位置；
<code>end</code> —— 可选，查找的结束位置。</td>
</tr>
<tr>
<td><code>list.insert(index, obj)</code></td>
<td>将对象插入列表，无返回值。
<code>index</code> —— 对象 <code>obj</code> 需要插入的索引位置；
<code>obj</code> —— 要插入列表中的对象。</td>
</tr>
<tr>
<td><code>list.pop([index=-1])</code></td>
<td>移除列表中 <code>index</code> 指定的元素（默认最后一个元素），并且返回该元素的值。</td>
</tr>
<tr>
<td><code>list.remove(obj)</code></td>
<td>移除列表中值与 <code>obj</code> 相同的第一个匹配项，无返回值。</td>
</tr>
<tr>
<td><code>list.reverse()</code></td>
<td>反向列表中元素。</td>
</tr>
<tr>
<td><code>list.sort(key=None, reverse=False)</code></td>
<td>对原列表进行排序。
<code>key</code> —— 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序；↩
<code>reverse</code> —— 排序规则，<code>reverse = True</code> 降序， <code>reverse = False</code> 升序（默认）。</td>
</tr>
<tr>
<td><code>list.clear()</code></td>
<td>清空列表，类似于 <code>del list[:]</code>。</td>
</tr>
<tr>
<td><code>list.copy()</code></td>
<td>返回复制后的新列表，类似于 <code>list[:]</code>。</td>
</tr>
</tbody>
</table>
<p><code>list.sort()</code> 指定排序元素：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 获取列表的第二个元素</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">takeSecond</span><span class="p">(</span><span class="n">elem</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">elem</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 列表</span>
</span></span><span class="line"><span class="cl"><span class="n">random</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 指定第二个元素排序</span>
</span></span><span class="line"><span class="cl"><span class="n">random</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">takeSecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 输出类别</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="p">(</span><span class="s1">&#39;排序列表：&#39;</span><span class="p">,</span> <span class="n">random</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：排序列表：[(4, 1), (2, 2), (1, 3), (3, 4)]</span>
</span></span></code></pre></div><p>Python 列表的特性可以很方便地将其封装成其他线性数据结构。</p>
<hr>
<h3 id="列表推导式" data-numberify>列表推导式<a class="anchor ms-1" href="#列表推导式"></a></h3>
<p>列表推导式是指在方括号 <code>[]</code> 中使用 <code>for</code> 语句生成一串序列，这个 <code>for</code> 语句可以有零到多个 <code>for</code> 或 <code>if</code> 子句。返回结果是一个根据表达从其后的 <code>for</code> 和 <code>if</code> 上下文环境中生成出来的列表。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">81</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="mi">355</span><span class="o">/</span><span class="mi">113</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;3.1&#39;</span><span class="p">,</span> <span class="s1">&#39;3.14&#39;</span><span class="p">,</span> <span class="s1">&#39;3.142&#39;</span><span class="p">,</span> <span class="s1">&#39;3.1416&#39;</span><span class="p">,</span> <span class="s1">&#39;3.14159&#39;</span><span class="p">]</span>
</span></span></code></pre></div><hr>
<h2 id="tuple" data-numberify>Tuple<a class="anchor ms-1" href="#tuple"></a></h2>
<p>元组（tuple）与列表类似，不同之处在于元组的元素可修改。元组写在小括号 <code>()</code> 里，元素之间用逗号隔开。</p>
<ul>
<li>
<p>元素的类型可以不相同。</p>
</li>
<li>
<p>元组中只包含一个元素时，需要在元素后面添加逗号 <code>,</code> ，否则括号会被当作运算符使用。</p>
</li>
<li>
<p>有两种索引方式：从左往右以 0 开始，从右往左以 -1 开始。</p>
</li>
<li>
<p>列表的截取的语法格式：<code>变量[头下标:尾下标:步长]</code>。遵循<strong>左闭右开</strong>原则。</p>
</li>
<li>
<p>元组元素不可修改是指元组中每个元素的指向永远不变。
无法对元组的元素进行增删操作，但并非所有类型的元素都不可修改。</p>
<ul>
<li>
<p>对于不可变数据类型的元素，的确不能修改。</p>
</li>
<li>
<p>对于可变数据类型的元素，可以按照其规则修改。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">tuple</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">tuple</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">tuple</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>可以用 <code>+</code> 运算符拼接，用 <code>*</code> 运算符重复。</p>
</li>
</ul>
<p>元组的某些操作可以参照列表，除了增加和删除元素的操作。</p>
<hr>
<p>元组支持推导式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">81</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h2 id="set" data-numberify>Set<a class="anchor ms-1" href="#set"></a></h2>
<p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。集合的基本功能是进行成员关系测试和删除重复元素。可以使用大括号 <code>{}</code> 或者构造函数 <code>set()</code> 创建集合。</p>
<ul>
<li>
<p>集合是一个无序不重复元素的集。</p>
</li>
<li>
<p>元素的类型可以不相同。</p>
</li>
<li>
<p>元素是可更改的。</p>
</li>
<li>
<p>创建空集：</p>
<p>使用不带参数的构造函数 <code>set()</code> 创建，不可使用 <code>{}</code> 创建（<code>{}</code> 代表空字典）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span><span class="p">()</span>
</span></span></code></pre></div></li>
<li>
<p>不包含多余的重复元素。在集合中，不会多次出现的相同元素。</p>
</li>
<li>
<p>不可使用索引或截取等操作。</p>
</li>
<li>
<p>可以使用集合运算。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">set1</span> <span class="o">-</span> <span class="n">set2</span><span class="p">)</span>      <span class="c1"># set1 和 set2 的差集</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">set1</span> <span class="o">|</span> <span class="n">set2</span><span class="p">)</span>      <span class="c1"># set1 和 set2 的并集</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">set1</span> <span class="o">&amp;</span> <span class="n">set2</span><span class="p">)</span>      <span class="c1"># set1 和 set2 的交集</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">set1</span> <span class="o">^</span> <span class="n">set2</span><span class="p">)</span>      <span class="c1"># set1 和 set2 的对称差集</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<p>集合支持推导式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="p">{</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">25</span><span class="p">}</span>
</span></span></code></pre></div><hr>
<p>集合的成员测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">avengers</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;captain america&#39;</span><span class="p">,</span> <span class="s1">&#39;iron man&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;thor&#39;</span><span class="p">,</span> <span class="s1">&#39;doctor strange&#39;</span><span class="p">,</span> <span class="s1">&#39;star-Lord&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="s1">&#39;hulk&#39;</span><span class="p">,</span> <span class="s1">&#39;black widow&#39;</span><span class="p">,</span> <span class="s1">&#39;black panther&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="s1">&#39;spider man&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="s1">&#39;spider man&#39;</span> <span class="ow">in</span> <span class="n">avengers</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;蜘蛛侠是复仇者&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;蜘蛛侠不是复仇者&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="s1">&#39;thanos&#39;</span> <span class="ow">in</span> <span class="n">avengers</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;灭霸是复仇者&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;灭霸不是复仇者&#39;</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h3 id="集合方法" data-numberify>集合方法<a class="anchor ms-1" href="#集合方法"></a></h3>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>set.add()</code></td>
<td>为集合添加元素。</td>
</tr>
<tr>
<td><code>set.clear()</code></td>
<td>移除集合中的所有元素。</td>
</tr>
<tr>
<td><code>set.copy()</code></td>
<td>拷贝一个集合。</td>
</tr>
<tr>
<td><code>set.difference(set1, set2, ...)</code></td>
<td>返回集合 $(set - set1)\cap(set - set2)\cap\cdots$。</td>
</tr>
<tr>
<td><code>set.difference_update(set1, set2, ...)</code></td>
<td>移除集合 <code>set</code> 中的元素，该元素在指定的集合 <code>set1, set2, ...</code> 也存在。
即，将集合 <code>set</code> 更新为集合 $(set - set1)\cap(set - set2)\cap\cdots$。</td>
</tr>
<tr>
<td><code>set.discard(value)</code></td>
<td>删除集合 <code>set</code> 中指定的元素 <code>value</code>。
与 <code>remove()</code> 不同的是，如果 <code>value</code> 不存在 <code>set</code> 中，并不会发生错误。</td>
</tr>
<tr>
<td><code>set.intersection(set1, set2, ...)</code></td>
<td>返回集合 $set \cap set1 \cap set2 \cap \cdots$。</td>
</tr>
<tr>
<td><code>set.intersection_update(set1, set2, ...)</code></td>
<td>将集合 <code>set</code> 更新为集合 $set \cap set1 \cap set2 \cap \cdots$。</td>
</tr>
<tr>
<td><code>set1.isdisjoint(set2)</code></td>
<td>判断集合 <code>set1</code> 和 <code>set2</code> 是否包含相同的元素，如果没有返回 <code>True</code>，否则返回 <code>False</code>。</td>
</tr>
<tr>
<td><code>set1.issubset(set2)</code></td>
<td>判断集合 <code>set1</code> 是否是集合 <code>set2</code> 的子集。如果是，则返回 <code>True</code>；否则返回 <code>False</code>。</td>
</tr>
<tr>
<td><code>set1.issuperset(set2)</code></td>
<td>判断集合 <code>set1</code> 是否是集合 <code>set2</code> 的父集。如果是，则返回 <code>True</code>；否则返回 <code>False</code>。</td>
</tr>
<tr>
<td><code>set.pop()</code></td>
<td>随机移除元素，并返回该元素。</td>
</tr>
<tr>
<td><code>set.remove(item)</code></td>
<td>移除指定元素 <code>item</code>。如果 <code>item</code> 不存在 <code>set</code> 中，会发生错误。</td>
</tr>
<tr>
<td><code>set1.symmetric_difference(set2)</code></td>
<td>返回集合  <code>set1</code> 和 <code>set2</code> 的对称差集 $set1 \oplus set2$。</td>
</tr>
<tr>
<td><code>set1.symmetric_difference_update(set2)</code></td>
<td>将集合 <code>set1</code> 更新为 $set1 \oplus set2$。</td>
</tr>
<tr>
<td><code>set.union(set1, set2...)</code></td>
<td>返回集合 $set \cup set1 \cup set2 \cup \cdots$。</td>
</tr>
<tr>
<td><code>set.update(added_set)</code></td>
<td>添加新的元素或集合到当前集合中。
<code>added_set</code> —— 可以是元素或集合。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="dictionary" data-numberify>Dictionary<a class="anchor ms-1" href="#dictionary"></a></h2>
<p>字典是一种映射类型，用 <code>{}</code> 标识，是一个无序的 <code>key:value</code> （键 - 值对）的集合。字典当中的元素是通过键来存取的，而不是通过偏移存取。字典还可以使用构造函数 <code>dict()</code> 创建。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 一般方法：</span>
</span></span><span class="line"><span class="cl"><span class="n">dic</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;name&#39;</span><span class="p">:</span>   <span class="s1">&#39;tom&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;age&#39;</span><span class="p">:</span>    <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;height&#39;</span><span class="p">:</span> <span class="mi">185</span><span class="p">,</span>    <span class="c1"># cm</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;weight&#39;</span><span class="p">:</span> <span class="mi">71</span>      <span class="c1"># kg</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：{&#39;name&#39;: &#39;tom&#39;, &#39;age&#39;: 20, &#39;height&#39;: 185, &#39;weight&#39;: 71}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 构造函数：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1.</span>
</span></span><span class="line"><span class="cl"><span class="n">dic</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span>   <span class="s1">&#39;lucy&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">age</span> <span class="o">=</span>    <span class="mi">18</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">height</span> <span class="o">=</span> <span class="mi">169</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">weight</span> <span class="o">=</span> <span class="mi">56</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：{&#39;name&#39;: &#39;lucy&#39;, &#39;age&#39;: 18, &#39;height&#39;: 169, &#39;weight&#39;: 56}</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2.</span>
</span></span><span class="line"><span class="cl"><span class="n">dic</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;jiessie&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="s1">&#39;height&#39;</span><span class="p">,</span> <span class="mi">178</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="s1">&#39;weight&#39;</span><span class="p">,</span> <span class="mi">63</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：{&#39;name&#39;: &#39;jiessie&#39;, &#39;age&#39;: 25, &#39;height&#39;: 178, &#39;weight&#39;: 63}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 for 循环：</span>
</span></span><span class="line"><span class="cl"><span class="n">dic</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：{2: 4, 4: 16, 6: 36}</span>
</span></span></code></pre></div><p>更多构造字典的方法↩。</p>
<ul>
<li>
<p>键（key）必须使用不可变类型，且是唯一的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">dic</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="mi">20</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">:</span><span class="mi">50</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">):</span><span class="mi">6</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">):</span> <span class="mi">6</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="mi">20</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="mi">50</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">dic</span><span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl"><span class="mi">6</span>
</span></span></code></pre></div></li>
<li>
<p>值（value）可以是任何类型的元素。</p>
</li>
<li>
<p>使用键作为索引。</p>
</li>
<li>
<p>使用 <code>in</code> 操作符判断键是否存在字典中，如 <code>key in dict</code> ，如果键在字典dict里返回 <code>True</code>，否则返回 <code>False</code>。<code>not in</code> 操作符与 <code>in</code> 相反。</p>
</li>
</ul>
<hr>
<h3 id="字典方法" data-numberify>字典方法<a class="anchor ms-1" href="#字典方法"></a></h3>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>radiansdict.clear()</code></td>
<td>删除字典内所有元素，无返回值。</td>
</tr>
<tr>
<td><code>radiansdict.copy()</code></td>
<td>返回一个字典的浅复制。</td>
</tr>
<tr>
<td><code>radiansdict.fromkeys(seq[, value])</code></td>
<td>创建一个新字典，以序列 <code>seq</code> 中元素做字典的键，<code>value</code> 为字典所有键对应的初始值（可选）。</td>
</tr>
<tr>
<td><code>radiansdict.get(key, default=None)</code></td>
<td>返回指定键 <code>key</code> 的值，如果键不在字典中返回 <code>default</code> 设置的默认值。</td>
</tr>
<tr>
<td><code>radiansdict.items()</code></td>
<td>以列表返回一个视图对象，视图对象中的元素以键-值对 <code>(key, value)</code> 的形式显示。
视图对象不是列表，不支持索引，其中的元素是键-值对。字典的视图对象都是只读的，但字典改变，视图也会跟着变化。</td>
</tr>
<tr>
<td><code>radiansdict.keys()</code></td>
<td>返回一个只包含键的视图对象。</td>
</tr>
<tr>
<td><code>radiansdict.setdefault(key, default=None)</code></td>
<td>和 <code>get()</code> 类似，如果 <code>key</code> 存在于 <code>radiandict</code> 中，就返回其值；但如果 <code>key</code> 不存在于字典中，将会添加键并将值设为 <code>default</code>。</td>
</tr>
<tr>
<td><code>radiansdict.update(dict2)</code></td>
<td>把字典 <code>dict2</code> 的键-值对更新到 <code>dict</code> 里，无返回值。</td>
</tr>
<tr>
<td><code>radiansdict.values()</code></td>
<td>返回一个只包含值的视图对象。</td>
</tr>
<tr>
<td><code>radiansdict.pop(key[, default])</code></td>
<td>删除字典给定键 <code>key</code> 所对应的值，返回值为被删除的值。<code>key</code> 值必须给出。否则，返回 <code>default</code> 值。如果 <code>key</code> 不存在字典中，返回 <code>default</code> 值（<code>default</code> 值必须给出，否则会报错。</td>
</tr>
<tr>
<td><code>radiansdict.popitem()</code></td>
<td>随机返回并删除字典中的最后一对键和值 <code>(key, value)</code>。
如果字典已经为空，却调用了此方法，就报出 KeyError 异常。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="函数操作" data-numberify>函数操作<a class="anchor ms-1" href="#函数操作"></a></h2>
<table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>len(obj)</code></td>
<td>返回对象的元素个数</td>
</tr>
<tr>
<td><code>max(x1[, x2[, x3[, ...]]])</code></td>
<td>返回参数中最大值，参数还可以是集合、列表或元组。</td>
</tr>
<tr>
<td><code>min(x1[, x2[, x3[, ...]]])</code></td>
<td>返回参数中最小值，参数还可以是集合、列表或元组。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="数据类型转换" data-numberify>数据类型转换<a class="anchor ms-1" href="#数据类型转换"></a></h2>
<p>将数据类型作为函数名即可进行数据类型的转换。以下内置的数据类型转换函数返回一个新的对象，表示转换的值。</p>
<table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>int(x, base = 10)</code></td>
<td>将 <code>x</code> 转换为一个整数。
<code>x</code> —— 字符串或数字；
<code>base</code> —— 基数（进制数），默认 10。</td>
</tr>
<tr>
<td><code>float(x = 0.0)</code></td>
<td>将 <code>x</code> 转换为一个浮点数。
<code>x</code> —— 字符串或数字，默认为 <code>0.0</code>。</td>
</tr>
<tr>
<td><code>complex(real[, imag])</code></td>
<td>创建一个值为 <code>real + imag * j </code> 的复数。
<code>real</code> —— 为字符串时不需要指定第二个参数，还可以为 int 或 float；
<code>imag</code> —— int、float。</td>
</tr>
<tr>
<td><code>str(object = '')</code></td>
<td>将对象 <code>object</code> 转换为字符串，默认为空字符串。</td>
</tr>
<tr>
<td><code>repr(object)</code></td>
<td>将对象 <code>object</code> 转换为表达式字符串。<a href="https://www.wolai.com/jXMTD4hXeMQaPS4Rx4pcFg#7imkekufL7cP1iNPsFJUPW" title="↩" target="_blank" rel="noopener noreferrer">↩<i class="fas fa-external-link-square-alt ms-1"></i></a></td>
</tr>
<tr>
<td><code>eval(expression[, globals[, locals]])</code></td>
<td>用来执行字符串中的有效表达式，并返回表达式的值。
<code>expression</code> —— 表达式字符串；
<code>globals</code> —— 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象；
<code>locals</code> —— 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</td>
</tr>
<tr>
<td><code>tuple(iterable)</code></td>
<td>将序列 <code>iterable</code> 转换为一个元组。
<code>iterable</code> —— 可迭代对象，如列表、字典、元组等等。</td>
</tr>
<tr>
<td><code>list(seq)</code></td>
<td>将序列 <code>seq</code> 转换为一个列表。
<code>seq</code> —— 元组或字符串。</td>
</tr>
<tr>
<td><code>set([iterable])</code></td>
<td>将 <code>iterable</code> 转换为可变集合，默认创建空集。
<code>iterable</code> —— 可迭代对象。</td>
</tr>
<tr>
<td><code>dict(**kwarg)</code>、
<code>class dict(mapping, **kwarg) </code>、
<code>class dict(iterable, **kwarg)</code></td>
<td>创建一个字典，默认创建空集。<a href="https://www.wolai.com/jXMTD4hXeMQaPS4Rx4pcFg#fMV3hFyFYXDnjis1W11TRq" title="↩" target="_blank" rel="noopener noreferrer">↩<i class="fas fa-external-link-square-alt ms-1"></i></a><code>**kwargs</code> —— 关键字，如 <code>key=value</code>；
<code>mapping</code> —— 元素的容器；
<code>iterable</code> —— 可迭代对象。</td>
</tr>
<tr>
<td><code>frozenset([iterable])</code></td>
<td>将 <code>iterable</code> 转换为不可变集合，默认创建空集。
<code>iterable</code> —— 可迭代的对象。</td>
</tr>
<tr>
<td><code>chr(i)</code></td>
<td>将一个整数 <code>i</code>（<code>in rang(256)</code>）转换为一个字符。
返回值是当前整数对应的 ASCII 字符。</td>
</tr>
<tr>
<td><code>ord(c)</code></td>
<td>将一个字符 <code>c</code> 转换为它的整数值（ASCII 数值，或者 Unicode 数值）。
<code>c</code> —— 字符（长度为 1 的字符串）。
如果所给的 Unicode 字符超出了你的 Python 定义范围，则会引发一个 TypeError 的异常。</td>
</tr>
<tr>
<td><code>hex(x)</code></td>
<td>将整数 <code>x</code> 转换为一个十六进制字符串（以 <code>0x</code> 为前缀）。</td>
</tr>
<tr>
<td><code>oct(x)</code></td>
<td>将整数 <code>x</code> 转换为一个八进制字符串。
Python2.x 版本的 8 进制以 <code>0</code> 作为前缀表示；
Python3.x 版本的 8 进制以 <code>0o</code> 作为前缀表示。</td>
</tr>
</tbody>
</table>
<p><code>repr</code> 的用法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">dic</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">repr</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;[1, 2, 3]&#39;</span>
</span></span></code></pre></div><p><code>dict()</code> 的用法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span><span class="nb">dict</span><span class="p">()</span>                         <span class="c1"># 创建空字典</span>
</span></span><span class="line"><span class="cl"><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="s1">&#39;t&#39;</span><span class="p">)</span>     <span class="c1"># 传入关键字</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;t&#39;</span><span class="p">:</span> <span class="s1">&#39;t&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">([</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]))</span>   <span class="c1"># 映射函数方式来构造字典</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="s1">&#39;one&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">dict</span><span class="p">([(</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;three&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)])</span>    <span class="c1"># 可迭代对象方式来构造字典</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="s1">&#39;one&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span></span></code></pre></div><hr>
<h2 id="其他操作" data-numberify>其他操作<a class="anchor ms-1" href="#其他操作"></a></h2>
<p>使用 Python 的 <code>type()</code> 函数查看变量的类型：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="mf">5.5</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="n">j</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">type</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="nb">type</span><span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="nb">type</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">int</span><span class="s1">&#39;&gt; &lt;class &#39;</span><span class="nb">float</span><span class="s1">&#39;&gt; &lt;class &#39;</span><span class="nb">bool</span><span class="s1">&#39;&gt; &lt;class &#39;</span><span class="nb">complex</span><span class="s1">&#39;&gt;</span>
</span></span></code></pre></div><p>使用 <code>isinstance</code> 判断数据类型是否正确：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">111</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kc">True</span>
</span></span></code></pre></div><p><code>isinstance()</code> 和 <code>type()</code> 的区别在于：</p>
<ul>
<li>
<p><code>type()</code> 不会认为子类是一种父类类型。</p>
</li>
<li>
<p><code>isinstance()</code> 会认为子类是一种父类类型。即，子类和父类被认为是同一类型。</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="k">pass</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span> 
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="c1"># B 是 A 的子类</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="k">pass</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span> 
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">A</span><span class="p">(),</span> <span class="n">A</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">A</span><span class="p">())</span> <span class="o">==</span> <span class="n">A</span> 
</span></span><span class="line"><span class="cl"><span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">B</span><span class="p">(),</span> <span class="n">A</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">B</span><span class="p">())</span> <span class="o">==</span> <span class="n">A</span>
</span></span><span class="line"><span class="cl"><span class="kc">False</span>
</span></span></code></pre></div><hr>
<p>Python3 中，bool 是 int 的子类，<code>True</code> 和 <code>False</code> 可以和数字相加。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kc">True</span> <span class="o">==</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kc">False</span> <span class="o">==</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="kc">True</span>
</span></span></code></pre></div><p>可以通过 <code>is</code> 来判断：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kc">True</span> <span class="ow">is</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="kc">False</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">flag</span> <span class="ow">is</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="kc">True</span>
</span></span></code></pre></div><hr>
<p>使用 <code>del</code> 删除对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">del</span> <span class="n">var</span>        <span class="c1"># 删除一个对象</span>
</span></span><span class="line"><span class="cl"><span class="k">del</span> <span class="n">var_1</span><span class="p">,</span> <span class="n">var_2</span>  <span class="c1"># 删除多个对象</span>
</span></span></code></pre></div><hr>
<p><code>print</code> 默认输出是换行的，如果要实现不换行需要在变量末尾加上 <code>end=&quot;&quot;</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">str1</span> <span class="o">=</span> <span class="s1">&#39;Hello &#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">str2</span> <span class="o">=</span> <span class="s1">&#39;World!&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">str1</span><span class="p">);</span> <span class="nb">print</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Hello</span>
</span></span><span class="line"><span class="cl"><span class="n">World</span><span class="err">!</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="nb">print</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Hello</span> <span class="n">World</span><span class="err">!</span>
</span></span></code></pre></div><hr>
<h1 id="运算符" data-numberify>运算符<a class="anchor ms-1" href="#运算符"></a></h1>
<h2 id="算术运算符" data-numberify>算术运算符<a class="anchor ms-1" href="#算术运算符"></a></h2>
<table>
<thead>
<tr>
<th><strong>Operators</strong></th>
<th><strong>Explains</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>+</code></td>
<td>加
操作对象为字符串、列表或元组时，表示将两个对象拼接在一起。</td>
</tr>
<tr>
<td><code>-</code></td>
<td>减</td>
</tr>
<tr>
<td><code>*</code></td>
<td>乘
<code>a * b</code>，若 <code>a</code> 为字符串、列表或元组，<code>b</code> 为整数时，表示将 <code>b</code> 个 <code>a</code> 拼接在一起。</td>
</tr>
<tr>
<td><code>/</code></td>
<td>除</td>
</tr>
<tr>
<td><code>%</code></td>
<td>取模</td>
</tr>
<tr>
<td><code>**</code></td>
<td>幂，如 <code>a**b</code> 返回 <code>a</code> 的 <code>b</code> 次方</td>
</tr>
<tr>
<td><code>//</code></td>
<td>整除，向下取整</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="比较关系运算符" data-numberify>比较（关系）运算符<a class="anchor ms-1" href="#比较关系运算符"></a></h2>
<p>所有比较运算符返回 <code>1</code>（或 <code>True</code>）表示真，返回 <code>0</code>（或 <code>False</code>）表示假。</p>
<table>
<thead>
<tr>
<th><strong>Operators</strong></th>
<th><strong>Explains</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>==</code></td>
<td>相等</td>
</tr>
<tr>
<td><code>!=</code></td>
<td>不等于
Python 3 已不支持 <code>&lt;&gt;</code></td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>大于</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>小于</td>
</tr>
<tr>
<td><code>&gt;=</code></td>
<td>大于等于 - 返回x是否大于等于y。</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>小于等于 - 返回x是否小于等于y。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="赋值运算符" data-numberify>赋值运算符<a class="anchor ms-1" href="#赋值运算符"></a></h2>
<table>
<thead>
<tr>
<th><strong>Operators</strong></th>
<th><strong>Explains</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>=</code></td>
<td>赋值运算符</td>
</tr>
<tr>
<td><code>+=</code></td>
<td>加法赋值运算符</td>
</tr>
<tr>
<td><code>-=</code></td>
<td>减法赋值运算符</td>
</tr>
<tr>
<td><code>*=</code></td>
<td>乘法赋值运算符</td>
</tr>
<tr>
<td><code>/=</code></td>
<td>除法赋值运算符</td>
</tr>
<tr>
<td><code>%=</code></td>
<td>取模赋值运算符</td>
</tr>
<tr>
<td><code>**=</code></td>
<td>幂赋值运算符</td>
</tr>
<tr>
<td><code>//=</code></td>
<td>取整除赋值运算符</td>
</tr>
<tr>
<td><code>:=</code></td>
<td>海象运算符，可在表达式内部为变量赋值，然后直接进行判断。<strong>Python3.8 版本新增运算符</strong>。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="位运算符" data-numberify>位运算符<a class="anchor ms-1" href="#位运算符"></a></h2>
<table>
<thead>
<tr>
<th><strong>Operators</strong></th>
<th><strong>Explain</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;</code></td>
<td>按位与运算符：
参与运算的两个值，如果两个相应位都为 1，则该位的结果为 1，否则为 0。</td>
</tr>
<tr>
<td><code>|</code></td>
<td>按位或运算符：
只要对应的两个二进位有一个为 1 时，结果位就为 1。</td>
</tr>
<tr>
<td><code>^</code></td>
<td>按位异或运算符：
当两对应的二进位相异时，结果为 1。</td>
</tr>
<tr>
<td><code>~</code></td>
<td>按位取反运算符：
对数据的每个二进制位取反，即把 1 变为 0，把 0 变为 1。<code>~x</code> 类似于 <code>x-1</code></td>
</tr>
<tr>
<td><code>&lt;&lt;</code></td>
<td>左移动运算符：
运算数的各二进位全部左移若干位，由 <code>&lt;&lt;</code> 右边的数指定移动的位数，高位丢弃，低位补 0。</td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td>右移动运算符：
把 <code>&gt;&gt;</code> 左边的运算数的各二进位全部右移若干位，<code>&gt;&gt;</code> 右边的数指定移动的位数。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="逻辑运算符" data-numberify>逻辑运算符<a class="anchor ms-1" href="#逻辑运算符"></a></h2>
<table>
<thead>
<tr>
<th><strong>Operators</strong></th>
<th><strong>Expressions</strong></th>
<th><strong>Explains</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>and</code></td>
<td><code>x and y</code></td>
<td>布尔 “与”
如果 <code>x</code> 为 <code>False</code>，<code>x and y</code> 返回 <code>x</code> 的值，否则返回 <code>y</code> 的计算值。</td>
</tr>
<tr>
<td><code>or</code></td>
<td><code>x or y</code></td>
<td>布尔 “或”
如果 <code>x</code> 是 <code>True</code>，它返回 <code>x</code> 的值，否则它返回 <code>y</code> 的计算值。</td>
</tr>
<tr>
<td><code>not</code></td>
<td><code>not x</code></td>
<td>布尔 “非”
如果 <code>x</code> 为 <code>True</code>，返回 <code>False</code>；如果 <code>x</code> 为 <code>False</code>，它返回 <code>True</code>。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="成员运算符" data-numberify>成员运算符<a class="anchor ms-1" href="#成员运算符"></a></h2>
<table>
<thead>
<tr>
<th><strong>Operators</strong></th>
<th><strong>Explains</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>in</code></td>
<td>如果在指定的序列中找到值返回 <code>True</code>，否则返回 <code>False</code>。</td>
</tr>
<tr>
<td><code>not in</code></td>
<td>如果在指定的序列中没有找到值返回 <code>True</code>，否则返回 <code>False</code>。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="身份运算符" data-numberify>身份运算符<a class="anchor ms-1" href="#身份运算符"></a></h2>
<table>
<thead>
<tr>
<th><strong>Operators</strong></th>
<th><strong>Explains</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>is</code></td>
<td>判断两个标识符是不是引用自一个对象。
<code>x is y</code>，类似 <code>id(x) == id(y)</code>。
如果引用的是同一个对象则返回 <code>True</code>，否则返回 <code>False</code></td>
</tr>
<tr>
<td><code>is not</code></td>
<td>判断两个标识符是不是引用自不同对象。
<code>x is not y</code>，类似 <code>id(a) != id(b)</code>。
如果引用的不是同一个对象则返回结果 <code>True</code>，否则返回 <code>False</code>。</td>
</tr>
</tbody>
</table>
<p><code>is</code> 和 <code>==</code> 的区别：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="ow">is</span> <span class="n">a</span> 
</span></span><span class="line"><span class="cl"><span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">==</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl"><span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">[:]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="ow">is</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl"><span class="kc">False</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">==</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl"><span class="kc">True</span>
</span></span></code></pre></div><hr>
<h2 id="运算符优先级" data-numberify>运算符优先级<a class="anchor ms-1" href="#运算符优先级"></a></h2>
<p>优先级按从高到底排列：</p>
<table>
<thead>
<tr>
<th>Operators</th>
<th>Explains</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>**</code></td>
<td>指数</td>
</tr>
<tr>
<td><code>~</code> <code>+</code> <code>-</code></td>
<td>按位翻转，一元加号和减号（最后两个的方法名为 +@ 和 -@）</td>
</tr>
<tr>
<td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td>
<td>乘，除，求余数和取整除</td>
</tr>
<tr>
<td><code>+</code> <code>-</code></td>
<td>加法减法</td>
</tr>
<tr>
<td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td>
<td>右移，左移运算符</td>
</tr>
<tr>
<td><code>&amp;</code></td>
<td>按位与</td>
</tr>
<tr>
<td><code>^</code> <code>|</code></td>
<td>按位异或，按位与</td>
</tr>
<tr>
<td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td>
<td>比较运算符</td>
</tr>
<tr>
<td><code>==</code> <code>!=</code></td>
<td>等于运算符</td>
</tr>
<tr>
<td><code>=</code> <code>%=</code> <code>/=</code> <code>//=</code> <code>-=</code> <code>+=</code> <code>*=</code> <code>**=</code></td>
<td>赋值运算符</td>
</tr>
<tr>
<td><code>is</code> <code>is not</code></td>
<td>身份运算符</td>
</tr>
<tr>
<td><code>in</code> <code>not in</code></td>
<td>成员运算符</td>
</tr>
<tr>
<td><code>not</code> <code>and</code> <code>or</code></td>
<td>逻辑运算符</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="if条件控制" data-numberify>if条件控制<a class="anchor ms-1" href="#if条件控制"></a></h1>
<p><code>if</code> 语句的形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="n">condition_1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_block_1</span>
</span></span><span class="line"><span class="cl"><span class="k">elif</span> <span class="n">condition_2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_block_2</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_block_3</span>
</span></span></code></pre></div><p><code>if</code> 语句的条件通常由关系运算符或返回值为布尔值的语句组成，使用逻辑运算符在一条 <code>if</code> 语句中连接多个条件。</p>
<hr>
<h2 id="条件运算符" data-numberify>条件运算符<a class="anchor ms-1" href="#条件运算符"></a></h2>
<p>Python 提供了条件运算符（三目运算符）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">statement_1</span> <span class="k">if</span> <span class="n">condition</span> <span class="k">else</span> <span class="n">statement</span>
</span></span></code></pre></div><ul>
<li>
<p>如果 <code>condition</code> 为 <code>True</code>，执行 <code>statement_1</code> 并且返回 <code>staement_1</code> 的结果。</p>
</li>
<li>
<p>如果 <code>condition</code> 为 <code>False</code>，执行 <code>statement_2</code> 并且返回 <code>statement_2</code> 的结果。</p>
</li>
</ul>
<hr>
<h1 id="循环语句" data-numberify>循环语句<a class="anchor ms-1" href="#循环语句"></a></h1>
<p>Python 有 <code>while</code> 和 <code>for</code> 两种循环语句。</p>
<hr>
<h2 id="while条件循环" data-numberify>while条件循环<a class="anchor ms-1" href="#while条件循环"></a></h2>
<p><code>while</code> 循环的一般用法是，当指定条件成立时执行一次 <code>while</code> 后的代码块。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">while</span> <span class="n">condition</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statements_block</span>
</span></span></code></pre></div><p><code>while</code> 语句后可接 <code>else</code> 语句。当指定条件不成立时，执行一次 <code>while</code> 后面的 <code>else</code> 语句。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">while</span> <span class="n">condition</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statements_block_1</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statements_block_2</span>
</span></span></code></pre></div><hr>
<h2 id="for循环遍历" data-numberify>for循环遍历<a class="anchor ms-1" href="#for循环遍历"></a></h2>
<p><code>for</code> 循环的一般用法是，遍历任何可迭代对象。每次循环，都会从指定的可迭代对象中选取一个赋给指定的变量。如此循环下去，直到遍历完指定的可迭代对象中所有元素。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">variables</span> <span class="ow">in</span> <span class="n">sequence</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statements_block</span>
</span></span></code></pre></div><p><code>for</code> 语句后可接 <code>else</code> 语句。当指定的可迭代对象为空时，执行一次 <code>for</code> 后面的 <code>else</code> 语句。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">variable</span> <span class="ow">in</span> <span class="n">sequence</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statements_block_1</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statements_block_2</span>
</span></span></code></pre></div><hr>
<p><code>for</code> 循环经常与 <code>range()</code> 函数一起使用。当需要遍历数字序列时，可以使用 <code>range()</code> 函数生成数列。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 输出数字 5~12</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">13</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>    <span class="c1"># 输出一个换行符</span>
</span></span></code></pre></div><hr>
<h3 id="遍历技巧" data-numberify>遍历技巧<a class="anchor ms-1" href="#遍历技巧"></a></h3>
<p>在字典中遍历时，关键字和对应的值可以使用 <code>items()</code> 方法同时解读出来：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;one&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nb">dict</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="s1">&#39; = &#39;</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">one</span>  <span class="o">=</span>  <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">two</span>  <span class="o">=</span>  <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">three</span>  <span class="o">=</span>  <span class="mi">3</span>
</span></span></code></pre></div><p>在序列中遍历时，索引位置和对应值可以使用 <code>enumerate()</code> 函数同时得到：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">([</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="s1">&#39;: &#39;</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="mi">0</span> <span class="p">:</span>  <span class="n">one</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span> <span class="p">:</span>  <span class="n">two</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span> <span class="p">:</span>  <span class="n">three</span>
</span></span></code></pre></div><p>同时遍历两个或更多的序列，可以使用 <code>zip()</code> 组合：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">questions</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;quest&#39;</span><span class="p">,</span> <span class="s1">&#39;favorite color&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">answers</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;lancelot&#39;</span><span class="p">,</span> <span class="s1">&#39;the holy grail&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">q</span><span class="p">,</span> <span class="n">a</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">questions</span><span class="p">,</span> <span class="n">answers</span><span class="p">):</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;What is your </span><span class="si">{0}</span><span class="s1">?  It is </span><span class="si">{1}</span><span class="s1">.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">a</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">What</span> <span class="ow">is</span> <span class="n">your</span> <span class="n">name</span><span class="err">?</span>  <span class="n">It</span> <span class="ow">is</span> <span class="n">lancelot</span><span class="o">.</span>
</span></span><span class="line"><span class="cl"><span class="n">What</span> <span class="ow">is</span> <span class="n">your</span> <span class="n">quest</span><span class="err">?</span>  <span class="n">It</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">holy</span> <span class="n">grail</span><span class="o">.</span>
</span></span><span class="line"><span class="cl"><span class="n">What</span> <span class="ow">is</span> <span class="n">your</span> <span class="n">favorite</span> <span class="n">color</span><span class="err">?</span>  <span class="n">It</span> <span class="ow">is</span> <span class="n">blue</span><span class="o">.</span>
</span></span></code></pre></div><p>反向遍历序列，可以调用 <code>reversed()</code> 函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="mi">9876543210</span>
</span></span></code></pre></div><p>要按顺序遍历一个序列，使用 <code>sorted()</code> 函数返回一个已排序的序列，并不修改原值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">basket</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;apple&#39;</span><span class="p">,</span> <span class="s1">&#39;orange&#39;</span><span class="p">,</span> <span class="s1">&#39;apple&#39;</span><span class="p">,</span> <span class="s1">&#39;pear&#39;</span><span class="p">,</span> <span class="s1">&#39;orange&#39;</span><span class="p">,</span> <span class="s1">&#39;banana&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">basket</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">apple</span>
</span></span><span class="line"><span class="cl"><span class="n">banana</span>
</span></span><span class="line"><span class="cl"><span class="n">orange</span>
</span></span><span class="line"><span class="cl"><span class="n">pear</span>
</span></span></code></pre></div><hr>
<h3 id="列表推导式-1" data-numberify>列表推导式<a class="anchor ms-1" href="#列表推导式-1"></a></h3>
<p>列表推导式（又称列表解析式）的基本语法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[</span><span class="n">val</span> <span class="k">for</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">sequence</span> <span class="n">if_or_for_statement</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># if_or_for_statement是一个if判断语句或for循环</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 如果是if语句，那么只有条件位真时val才会在列表中</span>
</span></span></code></pre></div><p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</span></span></code></pre></div><p>列表推导式中的<code>for</code>语句和<code>if</code>语句是可嵌套的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[</span><span class="n">x</span><span class="o">*</span><span class="n">y</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="k">if</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">]</span>
</span></span></code></pre></div><p>上面语句的执行顺序是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">                <span class="n">x</span><span class="o">*</span><span class="n">y</span>
</span></span></code></pre></div><p>列表推导式除了<code>list</code>还可以被转化成其它对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="o">&lt;</span><span class="n">genexpr</span><span class="o">&gt;</span> <span class="n">at</span> <span class="mh">0x0000026F7A655BA0</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h2 id="break-and-continue" data-numberify>break and continue<a class="anchor ms-1" href="#break-and-continue"></a></h2>
<ul>
<li>
<p><code>break</code> 语句 —— 跳出（终止）循环。不执行当前循环块中 <code>break</code> 语句以下的语句，并且将控制转移到当前循环语句的下一条语句。</p>
</li>
<li>
<p><code>continue</code> 语句 —— 进入下一轮循环。不执行当前循环块中 <code>continue</code> 语句以下的语句，并且将控制转义到循环语句的开头。</p>
</li>
</ul>
<p><code>break</code> 和 <code>continue</code> 在循环语句中使用。一般在循环中的 <code>if</code> 条件语句中使用。即，达到某个条件便结束或进入下一次循环。</p>
<hr>
<h2 id="pass语句" data-numberify>pass语句<a class="anchor ms-1" href="#pass语句"></a></h2>
<p><code>pass</code> 语句是空语句，即不执行任何操作。<code>pass</code> 是为了保持 Python 程序结构的完整性。</p>
<p><code>pass</code> 一般作为占位语句，当操作都在条件语句或循环语句中完成时，在语句块中使用 <code>pass</code> 占位。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="n">condition_1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">condition_2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">variable</span> <span class="ow">in</span> <span class="n">sequence</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><hr>
<h1 id="迭代器与生成器" data-numberify>迭代器与生成器<a class="anchor ms-1" href="#迭代器与生成器"></a></h1>
<h2 id="迭代器" data-numberify>迭代器<a class="anchor ms-1" href="#迭代器"></a></h2>
<p>迭代是一种访问集合元素的方式。迭代器是一个可以记住遍历位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p>
<p>迭代器有两个基本的方法：<code>iter()</code> 和 <code>next()</code>。</p>
<p>字符串、列表或元组对象都可用于创建迭代器。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>     <span class="c1"># 创建迭代器对象</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">))</span>    <span class="c1"># 输出迭代器的下一个元素</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span>
</span></span></code></pre></div><p>迭代器对象可以使用常规 <code>for</code> 语句进行遍历：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">it</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>    <span class="c1"># 创建迭代器对象</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">it</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>使用 <code>next()</code> 迭代：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>         <span class="c1"># 引入 sys 模块</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="nb">list</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">it</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>    <span class="c1"># 创建迭代器对象</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span></span></code></pre></div><hr>
<h3 id="创建迭代器" data-numberify>创建迭代器<a class="anchor ms-1" href="#创建迭代器"></a></h3>
<p>把一个类作为一个迭代器使用需要在类中实现两个方法 <code>__iter__()</code> 与 <code>__next__()</code> 。</p>
<ul>
<li>
<p><code>__iter__()</code> 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 <code>__next__()</code>方法并通过 <code>StopIteration</code> 异常标识迭代的完成。</p>
</li>
<li>
<p><code>__next__()</code> 方法（Python 2 里是 <code>next()</code>）会返回下一个迭代器对象。</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyNumbers</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="fm">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="bp">self</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="fm">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">a</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">myclass</span> <span class="o">=</span> <span class="n">MyNumbers</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">myiter</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">myclass</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">myiter</span><span class="p">),</span> <span class="n">end</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：1 2 3 4 5 6 7 8 9 10</span>
</span></span></code></pre></div><hr>
<h3 id="迭代结束标志" data-numberify>迭代结束标志<a class="anchor ms-1" href="#迭代结束标志"></a></h3>
<p><code>StopIteration</code> 异常用于标识迭代的完成，在 <code>__next__()</code> 方法中我们可以设置在完成指定循环次数后触发 <code>StopIteration</code> 异常来结束迭代。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 迭代 10 次后停止</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyNumbers</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="fm">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="bp">self</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="fm">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">&lt;=</span> <span class="mi">20</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">a</span>
</span></span><span class="line"><span class="cl">      <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">raise</span> <span class="ne">StopIteration</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">myclass</span> <span class="o">=</span> <span class="n">MyNumbers</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">myiter</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">myclass</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">myiter</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：1 2 3 4 5 6 7 8 9 10</span>
</span></span></code></pre></div><hr>
<h2 id="生成器" data-numberify>生成器<a class="anchor ms-1" href="#生成器"></a></h2>
<p>在 Python 中，使用了 <code>yield</code> 的函数被称为生成器（generator），生成器是一个返回迭代器的函数，只能用于迭代操作。</p>
<p>在调用生成器运行的过程中，每次遇到 <code>yield</code> 时函数会暂停并保存当前所有的运行信息，返回 <code>yield</code> 的值, 并在下一次执行 <code>next()</code> 方法时从当前位置继续运行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="c1"># 生成器函数 - 斐波那契</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">counter</span> <span class="o">&gt;</span> <span class="n">n</span><span class="p">):</span> 
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="k">yield</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl">        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">        <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="n">fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1"># f 是一个迭代器，由生成器返回生成</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s2">&#34; &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：1 1 2 3 5 8 13 21 34 55 89</span>
</span></span></code></pre></div><hr>
<h1 id="函数" data-numberify>函数<a class="anchor ms-1" href="#函数"></a></h1>
<p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。函数能提高应用的模块性，和代码的重复利用率。</p>
<p>函数的定义形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">function_name</span><span class="p">(</span><span class="n">arguments</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;explain&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">statements_block</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">expression</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># end function_name</span>
</span></span></code></pre></div><ul>
<li>
<p><code>explain</code> 是使用文档字符串存放的函数说明。</p>
</li>
<li>
<p><code>return</code> 代表一个函数的结束，并且返回一个值给调用方，这个值放在 <code>return</code> 后面，可以是具体的值也可以是一条有确切值的表达式。不带值或表达式的 <code>return</code> 相当于返回 <code>None</code>。当函数不需要返回值时，可以省略 <code>return</code>。</p>
</li>
</ul>
<p>调用一个函数时需要使用该函数名并根据其定义指定参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">function_name</span><span class="p">(</span><span class="n">arguments</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;explain&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">statements_block</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">expression</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># end function_name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">function_name</span><span class="p">(</span><span class="n">arguments</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h2 id="参数" data-numberify>参数<a class="anchor ms-1" href="#参数"></a></h2>
<ul>
<li>
<p><strong>不可变类型的参数传递</strong>：类似 C++ 的值传递。传递的只是参数的值，没有影响参数对象本身。如果在 <code>fun(a)</code> 内部修改 <code>a</code> 的值，则是新生成一个 <code>a</code> 的对象。即，修改参数之前函数内部参数的地址和函数外部参数的地址相同，一旦修改了变量，参数的地址将会发生变化。如 Number、String、Tuple。</p>
</li>
<li>
<p><strong>可变类型的参数传递</strong>：类似 C++ 的引用传递。如 <code>fun(la)</code>，则是将 <code>la</code> 真正的传过去，修改后 <code>fun</code> 外部的 <code>la</code> 也会受影响。无论是否对参数进行修改，参数地址都不会发生改变。如 List、Dictionary、Set。</p>
</li>
</ul>
<p>参数类型：</p>
<ul>
<li>
<p><strong>必须参数</strong>：须以正确的顺序传入函数。调用时，必须参数的数量必须和声明时一样。</p>
</li>
<li>
<p><strong>关键字参数</strong>：函数调用时使用关键字参数来确定传入的参数值。使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;a = &#39;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="s1">&#39;b = &#39;</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">func</span><span class="p">(</span><span class="n">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></div></li>
<li>
<p><strong>默认参数</strong>：调用函数时，如果没有传递参数，则会使用默认参数。默认参数在定义函数时定义。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;a = &#39;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="s1">&#39;b = &#39;</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">func</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span></code></pre></div></li>
<li>
<p><strong>不定长参数</strong>：</p>
<ul>
<li>
<p>加了星号 <code>*</code> 的参数会以元组的形式导入，存放所有未命名的变量参数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">atg1</span><span class="p">,</span> <span class="o">*</span><span class="n">vartuple</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">atg1</span><span class="p">,</span> <span class="n">vartuple</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：1 (2, 3)</span>
</span></span></code></pre></div></li>
<li>
<p>加了两个星号 <code>**</code> 的参数会以字典的形式导入。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">atg1</span><span class="p">,</span> <span class="o">**</span><span class="n">vartuple</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">atg1</span><span class="p">,</span> <span class="n">vartuple</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：1 {&#39;a&#39;: 2, &#39;b&#39;: 3}</span>
</span></span></code></pre></div></li>
<li>
<p>如果参数单独出现星号 <code>*</code> 后的参数必须用关键字传入。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="n">c</span><span class="p">):</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="k">return</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">+</span><span class="n">c</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span> 
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>   <span class="c1"># 报错</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ne">TypeError</span><span class="p">:</span> <span class="n">f</span><span class="p">()</span> <span class="n">takes</span> <span class="mi">2</span> <span class="n">positional</span> <span class="n">arguments</span> <span class="n">but</span> <span class="mi">3</span> <span class="n">were</span> <span class="n">given</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">c</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># 正常</span>
</span></span><span class="line"><span class="cl"><span class="mi">6</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>强制位置参数</strong>：Python3.8 新增了一个函数形参语法 <code>/ </code> 用来指明函数形参必须使用指定位置参数，不能使用关键字参数的形式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">/</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 形参 a 和 b 必须使用指定位置参数，c 可以是位置形参或关键字形参</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="lambda匿名函数" data-numberify>lambda匿名函数<a class="anchor ms-1" href="#lambda匿名函数"></a></h2>
<p>Python 使用 <code>lambda</code> 来创建匿名函数。</p>
<ul>
<li>
<p><code>lambda</code> 的主体是一个表达式，而不是一个代码块（比 <code>def</code> 简单很多）。仅仅能在 <code>lambda</code> 表达式中封装有限的逻辑进去。</p>
</li>
<li>
<p><code>lambda</code> 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。</p>
</li>
<li>
<p>虽然 <code>lambda</code> 函数看起来只能写一行，却不等同于 C 或 C++ 的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</p>
</li>
</ul>
<p><code>lambda</code> 函数的语法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">lambda</span> <span class="p">[</span><span class="n">arg1</span> <span class="p">[,</span><span class="n">arg2</span><span class="p">,</span><span class="o">.....</span><span class="n">argn</span><span class="p">]]:</span> <span class="n">expression</span>
</span></span></code></pre></div><p>用法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">sum</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">:</span> <span class="n">arg1</span> <span class="o">+</span> <span class="n">arg2</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">3</span>
</span></span></code></pre></div><hr>
<h1 id="模块" data-numberify>模块<a class="anchor ms-1" href="#模块"></a></h1>
<p>模块是一个包含函数定义和变量的文件，其后缀名是 <code>.py</code>。</p>
<ul>
<li>
<p>模块可以被别的程序引入，以使用该模块中的函数等功能。</p>
</li>
<li>
<p>Python 标准库也是一个个内置的模块。</p>
<p>这些模块会根据不同的操作系统进行不同的配置，不同的操作系统可能会有一些不同的模块。</p>
</li>
<li>
<p>每个模块有各自独立的符号表，在模块内部为所有的函数当作全局符号表来使用，可以使用 <code>dir()</code> 查看。</p>
<p>在导入模块后，可以通过 <code>modname.itemname</code> 这样的表示法来访问模块内的函数。</p>
</li>
<li>
<p>模块可以被导入其他模块。被导入的模块的名称将被放入当前操作的模块的符号表中。</p>
</li>
<li>
<p>模块除了方法定义，还可以包括可执行的代码。</p>
<p>这些代码一般用来初始化这个模块，只有在第一次被导入时才会被执行。</p>
</li>
</ul>
<hr>
<h2 id="包" data-numberify>包<a class="anchor ms-1" href="#包"></a></h2>
<p>包是一种管理 Python 模块命名空间的形式，采用 “点模块名称”。如一个模块的名称是 <code>A.B</code>， 那么他表示一个包 <code>A</code> 中的子模块 <code>B</code>。优点是不用担心不同模块之间的名称冲突。</p>
<p>包结构实例：</p>
<pre tabindex="0"><code class="language-纯文本" data-lang="纯文本">sound/                          顶层包
      __init__.py               初始化 sound 包
      formats/                  文件格式转换子包
              __init__.py
              wavread.py
              wavwrite.py
              aiffread.py
              aiffwrite.py
              auread.py
              auwrite.py
              ...
      effects/                  声音效果子包
              __init__.py
              echo.py
              surround.py
              reverse.py
              ...
      filters/                  filters 子包
              __init__.py
              equalizer.py
              vocoder.py
              karaoke.py
              ...
</code></pre><p>包还提供一个额外的属性 <code>__path__</code>。这是一个目录列表，里面每一个包含的目录都有为这个包服务的 __init__.py，得在其他 __init__.py 被执行前定义。可以修改这个变量，用来影响包含在包里面的模块和子包。这个功能并不常用，一般用来扩展包里面的模块。</p>
<hr>
<h2 id="import语句" data-numberify>import语句<a class="anchor ms-1" href="#import语句"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">module1</span><span class="p">[,</span> <span class="n">module2</span><span class="p">[,</span><span class="o">...</span> <span class="n">moduleN</span><span class="p">]</span>
</span></span></code></pre></div><p>当解释器遇到 <code>import</code> 语句，如果模块在当前的搜索路径就会被导入。<code>import</code> 命令一般放在脚本顶端，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/python3</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Filename: support.py</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">print_hello</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="p">(</span><span class="s1">&#39;Hello World！&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/python3</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Filename: test.py</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 导入模块</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hello</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 . 运算符调用模块中的函数</span>
</span></span><span class="line"><span class="cl"><span class="n">hello</span><span class="o">.</span><span class="n">print_hello</span><span class="p">()</span>
</span></span></code></pre></div><p>对于同一个模块，无论执行了多少次 <code>import</code> 语句，一个模块只会被导入一次。</p>
<p>搜索路径是一个解释器会先进行搜索的所有目录的列表，由一系列目录名组成的，Python 解释器就依次从这些目录中去寻找所引入的模块（很像环境变量）。搜索路径是在 Python 编译或安装的时候确定的，安装新的库应该也会修改。搜索路径被存储在 <code>sys</code> 模块中的 <code>path</code> 变量。</p>
<p>以 Windows 系统为例（在 VS2017 中安装的 Python3）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;C:</span><span class="se">\\</span><span class="s1">Program Files (x86)</span><span class="se">\\</span><span class="s1">Microsoft Visual Studio</span><span class="se">\\</span><span class="s1">Shared</span><span class="se">\\</span><span class="s1">Python36_64</span><span class="se">\\</span><span class="s1">python36.zip&#39;</span><span class="p">,</span> <span class="s1">&#39;C:</span><span class="se">\\</span><span class="s1">Program Files (x86)</span><span class="se">\\</span><span class="s1">Microsoft Visual Studio</span><span class="se">\\</span><span class="s1">Shared</span><span class="se">\\</span><span class="s1">Python36_64</span><span class="se">\\</span><span class="s1">DLLs&#39;</span><span class="p">,</span> <span class="s1">&#39;C:</span><span class="se">\\</span><span class="s1">Program Files (x86)</span><span class="se">\\</span><span class="s1">Microsoft Visual Studio</span><span class="se">\\</span><span class="s1">Shared</span><span class="se">\\</span><span class="s1">Python36_64</span><span class="se">\\</span><span class="s1">lib&#39;</span><span class="p">,</span> <span class="s1">&#39;C:</span><span class="se">\\</span><span class="s1">Program Files (x86)</span><span class="se">\\</span><span class="s1">Microsoft Visual Studio</span><span class="se">\\</span><span class="s1">Shared</span><span class="se">\\</span><span class="s1">Python36_64&#39;</span><span class="p">,</span> <span class="s1">&#39;C:</span><span class="se">\\</span><span class="s1">Program Files (x86)</span><span class="se">\\</span><span class="s1">Microsoft Visual Studio</span><span class="se">\\</span><span class="s1">Shared</span><span class="se">\\</span><span class="s1">Python36_64</span><span class="se">\\</span><span class="s1">lib</span><span class="se">\\</span><span class="s1">site-packages&#39;</span><span class="p">]</span>
</span></span></code></pre></div><p><code>sys.path</code> 输出是一个列表，其中第一项是空串，代表当前目录（若是从一个脚本中打印出来的话，可以更清楚地看出是哪个目录），即我们执行 Python 解释器的目录（对于脚本的话就是运行的脚本所在的目录）。</p>
<p>如果要引入一些不在搜索路径中的模块，可以在脚本中修改 <code>sys.path</code>。</p>
<p>如果要经常使用一个模块中的函数，可以赋给它一个本地名称：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">module</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">func</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">func</span>
</span></span><span class="line"><span class="cl"><span class="n">func</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h2 id="from--import语句" data-numberify>from &hellip; import语句<a class="anchor ms-1" href="#from--import语句"></a></h2>
<p>使用 <code>from ... import</code> 语句可以从模块中导入一个指定的部分到当前命名空间中。这种导入的方法不会把被导入的模块的名称放在当前的字符表中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">modname</span> <span class="kn">import</span> <span class="n">item1</span><span class="p">[,</span> <span class="n">item2</span><span class="p">[,</span> <span class="o">...</span> <span class="n">itemN</span><span class="p">]]</span>
</span></span></code></pre></div><p>这样只会把 <code>modname</code> 中的指定的部分 <code>item1[, item2[, ... itemN]]</code> 导入到当前命名空间中，并且可以直接使用它们的名称来调用它们（无需使用 <code>.</code> 运算符）。<code>item1[, item2[, ... itemN]]</code> 可以是子模块、函数、类或变量等。</p>
<p>使用 <code>from package import item</code> 这种形式的时候，<code>import</code> 语法会首先把 <code>item</code> 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 <code>:exc:ImportError</code> 异常。</p>
<p>把一个模块的所有内容全都导入到当前的命名空间（不推荐使用），但是那些由单一下划线 <code>_</code> 开头的名字不在此例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">modname</span> <span class="kn">import</span> <span class="o">*</span>
</span></span></code></pre></div><p>Python 会进入文件系统，找到这个包里面所有的子模块，然后一个一个的把它们都导入进来。但这个方法在 Windows 平台上工作的就不是非常好，因为 Windows 是一个不区分大小写的系统。</p>
<p>为了解决这个问题，需要提供一个精确包的索引。导入语句遵循如下规则：</p>
<p>如果包定义文件 <code>__init__.py</code> 存在一个叫做 <code>__all__</code> 的列表变量，那么在使用 <code>from package import *</code> 的时候就把这个列表中的所有名字作为包内容导入。</p>
<p>以下实例在 file:sounds/effects/_<em>init</em>_.py 中包含如下代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">__all__</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;echo&#34;</span><span class="p">,</span> <span class="s2">&#34;surround&#34;</span><span class="p">,</span> <span class="s2">&#34;reverse&#34;</span><span class="p">]</span>
</span></span></code></pre></div><hr>
<h2 id="from--import--as语句" data-numberify>from &hellip; import &hellip; as语句<a class="anchor ms-1" href="#from--import--as语句"></a></h2>
<p><code>import ... as</code> 可以将导入的模块、函数或者变量等重命名：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">name</span> <span class="k">as</span> <span class="nn">new_name</span>
</span></span></code></pre></div><p>该语句也可以接在 <code>from</code> 语句后面：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">modname</span> <span class="kn">import</span> <span class="n">name</span> <span class="k">as</span> <span class="n">new_name</span>
</span></span></code></pre></div><hr>
<h2 id="__name__-属性" data-numberify>\_\_name\_\_ 属性<a class="anchor ms-1" href="#__name__-属性"></a></h2>
<p>一个模块被另一个程序第一次引入时，其主程序将运行。可以用 <code>__name__</code> 属性来使该程序块仅在该模块自身运行时执行（被其它程序或模块引入时不执行）。</p>
<p>每个模块都有一个 <code>__name__</code> 属性，当其值是 <code>'__main__'</code> 时，表明该模块自身在运行，否则是被引入。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/python3</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Filename: using_name.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;程序自身在运行&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;我来自另一模块&#39;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="err">$</span> <span class="n">python</span> <span class="n">using_name</span><span class="o">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="n">程序自身在运行</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="err">$</span> <span class="n">python</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">using_name</span>
</span></span><span class="line"><span class="cl"><span class="n">我来自另一模块</span>
</span></span></code></pre></div><hr>
<h2 id="dir-函数" data-numberify>dir() 函数<a class="anchor ms-1" href="#dir-函数"></a></h2>
<p>内置的函数 <code>dir()</code> 可以找到指定模块内定义的所有名称，以一个字符串列表的形式返回。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">math</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="n">math</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s1">&#39;__loader__&#39;</span><span class="p">,</span> <span class="s1">&#39;__name__&#39;</span><span class="p">,</span> <span class="s1">&#39;__package__&#39;</span><span class="p">,</span> <span class="s1">&#39;__spec__&#39;</span><span class="p">,</span> <span class="s1">&#39;acos&#39;</span><span class="p">,</span> <span class="s1">&#39;acosh&#39;</span><span class="p">,</span> <span class="s1">&#39;asin&#39;</span><span class="p">,</span> <span class="s1">&#39;asinh&#39;</span><span class="p">,</span> <span class="s1">&#39;atan&#39;</span><span class="p">,</span> <span class="s1">&#39;atan2&#39;</span><span class="p">,</span> <span class="s1">&#39;atanh&#39;</span><span class="p">,</span> <span class="s1">&#39;ceil&#39;</span><span class="p">,</span> <span class="s1">&#39;copysign&#39;</span><span class="p">,</span> <span class="s1">&#39;cos&#39;</span><span class="p">,</span> <span class="s1">&#39;cosh&#39;</span><span class="p">,</span> <span class="s1">&#39;degrees&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">,</span> <span class="s1">&#39;erf&#39;</span><span class="p">,</span> <span class="s1">&#39;erfc&#39;</span><span class="p">,</span> <span class="s1">&#39;exp&#39;</span><span class="p">,</span> <span class="s1">&#39;expm1&#39;</span><span class="p">,</span> <span class="s1">&#39;fabs&#39;</span><span class="p">,</span> <span class="s1">&#39;factorial&#39;</span><span class="p">,</span> <span class="s1">&#39;floor&#39;</span><span class="p">,</span> <span class="s1">&#39;fmod&#39;</span><span class="p">,</span> <span class="s1">&#39;frexp&#39;</span><span class="p">,</span> <span class="s1">&#39;fsum&#39;</span><span class="p">,</span> <span class="s1">&#39;gamma&#39;</span><span class="p">,</span> <span class="s1">&#39;gcd&#39;</span><span class="p">,</span> <span class="s1">&#39;hypot&#39;</span><span class="p">,</span> <span class="s1">&#39;inf&#39;</span><span class="p">,</span> <span class="s1">&#39;isclose&#39;</span><span class="p">,</span> <span class="s1">&#39;isfinite&#39;</span><span class="p">,</span> <span class="s1">&#39;isinf&#39;</span><span class="p">,</span> <span class="s1">&#39;isnan&#39;</span><span class="p">,</span> <span class="s1">&#39;ldexp&#39;</span><span class="p">,</span> <span class="s1">&#39;lgamma&#39;</span><span class="p">,</span> <span class="s1">&#39;log&#39;</span><span class="p">,</span> <span class="s1">&#39;log10&#39;</span><span class="p">,</span> <span class="s1">&#39;log1p&#39;</span><span class="p">,</span> <span class="s1">&#39;log2&#39;</span><span class="p">,</span> <span class="s1">&#39;modf&#39;</span><span class="p">,</span> <span class="s1">&#39;nan&#39;</span><span class="p">,</span> <span class="s1">&#39;pi&#39;</span><span class="p">,</span> <span class="s1">&#39;pow&#39;</span><span class="p">,</span> <span class="s1">&#39;radians&#39;</span><span class="p">,</span> <span class="s1">&#39;sin&#39;</span><span class="p">,</span> <span class="s1">&#39;sinh&#39;</span><span class="p">,</span> <span class="s1">&#39;sqrt&#39;</span><span class="p">,</span> <span class="s1">&#39;tan&#39;</span><span class="p">,</span> <span class="s1">&#39;tanh&#39;</span><span class="p">,</span> <span class="s1">&#39;tau&#39;</span><span class="p">,</span> <span class="s1">&#39;trunc&#39;</span><span class="p">]</span>
</span></span></code></pre></div><p>如果没有给定参数，<code>dir()</code> 函数会罗列出当前定义的所有名称。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;__annotations__&#39;</span><span class="p">,</span> <span class="s1">&#39;__builtins__&#39;</span><span class="p">,</span> <span class="s1">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s1">&#39;__loader__&#39;</span><span class="p">,</span> <span class="s1">&#39;__name__&#39;</span><span class="p">,</span> <span class="s1">&#39;__package__&#39;</span><span class="p">,</span> <span class="s1">&#39;__spec__&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">]</span>
</span></span></code></pre></div><hr>
<h1 id="输入输出" data-numberify>输入输出<a class="anchor ms-1" href="#输入输出"></a></h1>
<h2 id="标准输出" data-numberify>标准输出<a class="anchor ms-1" href="#标准输出"></a></h2>
<p>在 Python 中使用 <code>print()</code> 来将其参数输出到标准输出上。默认的标准输出是屏幕。</p>
<p>可以使用 <code>str.format()</code> 函数等方式⤴ 来格式化输出值。</p>
<p>可以使用 <code>repr()</code> 或 <code>str()</code> 函数来将输出的值转成字符串。</p>
<ul>
<li>
<p><code>str()</code>：函数返回一个用户易读的表达形式。</p>
</li>
<li>
<p><code>repr()</code>：产生一个解释器易读的表达形式。</p>
</li>
</ul>
<hr>
<h2 id="标准输入" data-numberify>标准输入<a class="anchor ms-1" href="#标准输入"></a></h2>
<p>Python 提供了 <code>input()</code> 内置函数从标准输入读入一行文本，默认的标准输入是键盘。</p>
<p>Python3.x 中 <code>input()</code> 函数接受一个标准输入数据，返回为 string 类型。Python3.x 没有 <code>raw_input()</code>。</p>
<p><code>input()</code> 函数的语法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">input</span><span class="p">([</span><span class="n">prompt</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prompt —— 输出到标准输出的提示信息</span>
</span></span></code></pre></div><p>用法示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;输入一个整数：&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">输入一个整数</span><span class="err">：</span><span class="mi">123</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">str</span><span class="s1">&#39;&gt;      # input() 返回的是 string</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>      <span class="c1"># 使用 int() 类型转换</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">int</span><span class="s1">&#39;&gt; 123    # 此时 a 才是 int</span>
</span></span></code></pre></div><p><code>input()</code> 接收多个值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#输入三角形的三边长</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s2">&#34;请输入三角形三边的长：&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#计算三角形的半周长p</span>
</span></span><span class="line"><span class="cl"><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#计算三角形的面积s</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="n">a</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="n">b</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="n">c</span><span class="p">))</span><span class="o">**</span><span class="mf">0.5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#输出三角形的面积</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;三角形面积为：&#34;</span><span class="p">,</span> <span class="nb">format</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s1">&#39;.2f&#39;</span><span class="p">))</span>
</span></span></code></pre></div><hr>
<h2 id="读写文件" data-numberify>读写文件<a class="anchor ms-1" href="#读写文件"></a></h2>
<p><code>open()</code> 将会返回一个 <code>file</code> 对象，基本语法格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">[,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;r&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="c1"># filename —— 包含了要访问的文件名称的字符串值</span>
</span></span><span class="line"><span class="cl"><span class="c1"># mode —— 打开文件的模式的字符串值，默认文件访问模式为只读（r）</span>
</span></span></code></pre></div><p>打开文件的模式：</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>t</code></td>
<td>文本模式 (默认)。</td>
</tr>
<tr>
<td><code>x</code></td>
<td>写模式，新建一个文件，如果该文件已存在则会报错。</td>
</tr>
<tr>
<td><code>b</code></td>
<td>二进制模式。</td>
</tr>
<tr>
<td><code>+</code></td>
<td>打开一个文件进行更新（可读可写）。</td>
</tr>
<tr>
<td><code>U</code></td>
<td>通用换行模式（不推荐）。</td>
</tr>
<tr>
<td><code>r</code></td>
<td>以只读方式打开文件（默认模式）。文件的指针将会放在文件的开头。</td>
</tr>
<tr>
<td><code>rb</code></td>
<td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td><code>r+</code></td>
<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td><code>rb+</code></td>
<td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td><code>w</code></td>
<td>打开一个文件只用于写入。
如果该文件已存在，则清空原文件内容，并从开头开始编辑。
如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td><code>wb</code></td>
<td>以二进制格式打开一个文件只用于写入。
打开方式与 <code>w</code> 相同（会覆盖原有的文件）。</td>
</tr>
<tr>
<td><code>w+</code></td>
<td>打开一个文件用于读写。
打开方式与 <code>w</code> 相同。</td>
</tr>
<tr>
<td><code>wb+</code></td>
<td>以二进制格式打开一个文件用于读写。
打开方式与 <code>w</code> 相同。</td>
</tr>
<tr>
<td><code>a</code></td>
<td>打开一个文件用于追加。
如果该文件已存在，文件指针将会放在文件的结尾。
即，新的内容将会被写入到已有内容之后。
如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td><code>ab</code></td>
<td>以二进制格式打开一个文件用于追加。
打开方式与 <code>a</code> 相同。</td>
</tr>
<tr>
<td><code>a+</code></td>
<td>打开一个文件用于读写。
打开方式与 <code>a</code> 相同。</td>
</tr>
<tr>
<td><code>ab+</code></td>
<td>以二进制格式打开一个文件用于追加。
打开方式与 <code>a</code> 相同。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>模式</th>
<th><code>r</code></th>
<th><code>r+</code></th>
<th><code>w</code></th>
<th><code>w+</code></th>
<th><code>a</code></th>
<th><code>a+</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>读</td>
<td>+</td>
<td>+</td>
<td></td>
<td>+</td>
<td></td>
<td>+</td>
</tr>
<tr>
<td>写</td>
<td></td>
<td>+</td>
<td>+</td>
<td>+</td>
<td>+</td>
<td>+</td>
</tr>
<tr>
<td>创建</td>
<td></td>
<td></td>
<td>+</td>
<td>+</td>
<td>+</td>
<td>+</td>
</tr>
<tr>
<td>覆盖</td>
<td></td>
<td></td>
<td>+</td>
<td>+</td>
<td></td>
<td></td>
</tr>
<tr>
<td>指针在开始</td>
<td>+</td>
<td>+</td>
<td>+</td>
<td>+</td>
<td></td>
<td></td>
</tr>
<tr>
<td>指针在结尾</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>+</td>
<td>+</td>
</tr>
</tbody>
</table>
<p><code>open()</code> 函数的完整语法格式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">open</span><span class="p">(</span><span class="n">file</span><span class="p">[,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">buffering</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">closefd</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">opener</span><span class="o">=</span><span class="kc">None</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="c1"># file —— 必需，文件路径（相对或者绝对路径）。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># mode —— 可选，文件打开模式</span>
</span></span><span class="line"><span class="cl"><span class="c1"># buffering —— 设置缓冲</span>
</span></span><span class="line"><span class="cl"><span class="c1"># encoding —— 一般使用 utf8</span>
</span></span><span class="line"><span class="cl"><span class="c1"># errors —— 报错级别</span>
</span></span><span class="line"><span class="cl"><span class="c1"># newline —— 区分换行符</span>
</span></span><span class="line"><span class="cl"><span class="c1"># closefd —— 传入的 file 参数类型</span>
</span></span><span class="line"><span class="cl"><span class="c1"># opener —— 自定义打开文件方式</span>
</span></span></code></pre></div><hr>
<p>打开文件后，要进行的就是写入和读取操作，这些操作都是对 <code>file</code> 对象进行操作。</p>
<p><code>file</code> 对象方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>file.close()</code></td>
<td>关闭文件。关闭后文件不能再进行读写操作。
在执行完文件的读写操作后，有必要执行该方法。</td>
</tr>
<tr>
<td><code>file.flush()</code></td>
<td>刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。</td>
</tr>
<tr>
<td><code>file.fileno()</code></td>
<td>返回一个整型的文件描述符（file descriptor FD 整型），可以用在如 <code>os</code> 模块的 <code>read</code> 方法等一些底层操作上。</td>
</tr>
<tr>
<td><code>file.isatty()</code></td>
<td>如果文件连接到一个终端设备返回 <code>True</code>，否则返回 <code>False</code>。</td>
</tr>
<tr>
<td><code>file.next()</code></td>
<td>返回文件下一行。</td>
</tr>
<tr>
<td><code>file.read([size=-1])</code></td>
<td>从文件读取指定的字节数，默认为 <code>-1</code>，为负数时表示读取所有。</td>
</tr>
<tr>
<td><code>file.readline([size=-1])</code></td>
<td>读取整行（<code>size</code> 默认为 <code>-1</code>，为负数表示读取整行），包括 <code>'\n'</code> 字符。
如果指定了 <code>size</code> 则读取该行的前 <code>size</code> 字符。
第一次调用时读取第一行，第二次调用时读取第二行，以此类推。</td>
</tr>
<tr>
<td><code>file.readlines([sizeint])</code></td>
<td>读取所有行并返回列表，若给定 <code>sizeint</code> &gt; 0，则是设置一次读多少字节，这是为了减轻读取压力。</td>
</tr>
<tr>
<td><code>file.seek(offset[, whence=0])</code></td>
<td>设置文件当前位置。
<code>offset</code> —— 开始的偏移量。
<code>whence</code> —— 给 <code>offset</code> 参数一个定义，表示要从哪个位置开始偏移；<code>0</code> 代表从文件开头开始算起，<code>1</code>代表从当前位置开始算起，<code>2 </code>代表从文件末尾算起。默认为 <code>0</code>。</td>
</tr>
<tr>
<td><code>file.tell()</code></td>
<td>返回文件当前位置。</td>
</tr>
<tr>
<td><code>file.truncate([size=file.tell()])</code></td>
<td>截取文件，截取的字节通过 <code>size</code> 指定，默认为当前文件位置。</td>
</tr>
<tr>
<td><code>file.write(str)</code></td>
<td>将字符串写入文件，返回的是写入的字符长度。
如果文件打开模式带 <code>b</code>，那写入文件内容时，<code>str</code> 要用 <code>encode()</code> 方法转为 <code>bytes</code> 形式，否则报错：TypeError: a bytes-like object is required, not &lsquo;str&rsquo;。</td>
</tr>
<tr>
<td><code>file.writelines(sequence)</code></td>
<td>向文件写入一个序列字符串列表（这一序列字符串可以是由迭代对象产生的，如一个字符串列表），如果需要换行则要自己加入每行的换行符。</td>
</tr>
</tbody>
</table>
<hr>
<p><code>file.write()</code> 用法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w+&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;test1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;从文件中读取到的字符串：&#39;</span><span class="p">,</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 从文件中读取到的字符串： test1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;wb+&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;test1&#39;</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;从二进制文件中读取到的内容：&#39;</span><span class="p">,</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;将其转化为字符串输出：&#39;</span><span class="p">,</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 从二进制文件中读取到的内容： b&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 将其转化为字符串输出： test1</span>
</span></span></code></pre></div><hr>
<h1 id="os模块" data-numberify>os模块<a class="anchor ms-1" href="#os模块"></a></h1>
<p>os 模块提供了非常丰富的方法用来处理文件和目录。以下是一些常用的方法：</p>
<hr>
<p><code>os.access(path, mode)</code></p>
<p>检验权限模式（使用当前的 UID/GID 尝试访问路径）。</p>
<ul>
<li>
<p><code>path</code> —— 要用来检测是否有访问权限的路径。</p>
</li>
<li>
<p><code>mode</code> —— 参数取值如下：</p>
<ul>
<li>
<p><code>os.F_OK</code> —— 测试 <code>path</code> 是否存在；</p>
</li>
<li>
<p><code>os.R_OK</code> —— 测试 <code>path</code> 是否可读；</p>
</li>
<li>
<p><code>os.W_OK</code> —— 测试 <code>path</code> 是否可写；</p>
</li>
<li>
<p><code>os.X_OK</code> —— 测试 <code>path</code> 是否可执行。</p>
</li>
<li>
<p>在相应模式下，如果存在/可读/写/执行返回 <code>True</code> ，否则返回 <code>False</code>。</p>
</li>
</ul>
</li>
</ul>
<hr>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>os.chdir(path)</code></td>
<td>改变当前工作目录到 <code>path</code> 指定的路径。如果允许访问返回 <code>True</code>，否则返回 <code>False</code>。</td>
</tr>
<tr>
<td><code>os.chflags(path, flags)</code></td>
<td>设置路径 <code>path</code> 的标记为数字标记。多个标记可以使用 OR 来组合起来。
<code>flags</code> —— 参数取值如下：
<code>stat.UF_NODUMP</code> —— 非转储文件；
<code>stat.UF_IMMUTABLE</code> —— 文件是只读的；
<code>stat.UF_APPEND</code> —— 文件只能追加内容；
<code>stat.UF_NOUNLINK</code> —— 文件不可删除；
<code>stat.UF_OPAQUE</code> —— 目录不透明，需要通过联合堆栈查看；
以下参数值是超级用户可设置的：
<code>stat.SF_ARCHIVED</code> —— 可存档文件；
<code>stat.SF_IMMUTABLE</code> —— 文件是只读的；
<code>stat.SF_APPEND</code> —— 文件只能追加内容；
<code>stat.SF_NOUNLINK</code> —— 文件不可删除；
<code>stat.SF_SNAPSHOT</code> —— 快照文件。</td>
</tr>
<tr>
<td><code>os.chmod(path, mode)</code></td>
<td>更改权限</td>
</tr>
<tr>
<td><code>os.chown(path, uid, gid)</code></td>
<td>更改文件所有者</td>
</tr>
<tr>
<td><code>os.chroot(path)</code></td>
<td>改变当前进程的根目录</td>
</tr>
<tr>
<td><code>os.close(fd)</code></td>
<td>关闭文件描述符 fd</td>
</tr>
<tr>
<td><code>os.closerange(fd_low, fd_high)</code></td>
<td>关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略</td>
</tr>
<tr>
<td><code>os.dup(fd)</code></td>
<td>复制文件描述符 fd</td>
</tr>
<tr>
<td><code>os.dup2(fd, fd2)</code></td>
<td>将一个文件描述符 fd 复制到另一个 fd2</td>
</tr>
<tr>
<td><code>os.fchdir(fd)</code></td>
<td>通过文件描述符改变当前工作目录</td>
</tr>
<tr>
<td><code>os.fchmod(fd, mode)</code></td>
<td>改变一个文件的访问权限，该文件由参数fd指定，参数mode是Unix下的文件访问权限。</td>
</tr>
<tr>
<td><code>os.fchown(fd, uid, gid)</code></td>
<td>修改一个文件的所有权，这个函数修改一个文件的用户ID和用户组ID，该文件由文件描述符fd指定。</td>
</tr>
<tr>
<td><code>os.fdatasync(fd)</code></td>
<td>强制将文件写入磁盘，该文件由文件描述符fd指定，但是不强制更新文件的状态信息。</td>
</tr>
<tr>
<td><code>os.fdopen(fd[, mode[, bufsize]])</code></td>
<td>通过文件描述符 fd 创建一个文件对象，并返回这个文件对象</td>
</tr>
<tr>
<td><code>os.fpathconf(fd, name)</code></td>
<td>返回一个打开的文件的系统配置信息。name为检索的系统配置的值，它也许是一个定义系统值的字符串，这些名字在很多标准中指定（POSIX.1, Unix 95, Unix 98, 和其它）。</td>
</tr>
<tr>
<td><code>os.fstat(fd)</code></td>
<td>返回文件描述符fd的状态，像stat()。</td>
</tr>
<tr>
<td><code>os.fstatvfs(fd)</code></td>
<td>返回包含文件描述符fd的文件的文件系统的信息，Python 3.3 相等于 statvfs()。</td>
</tr>
<tr>
<td><code>os.fsync(fd)</code></td>
<td>强制将文件描述符为fd的文件写入硬盘。</td>
</tr>
<tr>
<td><code>os.ftruncate(fd, length)</code></td>
<td>裁剪文件描述符fd对应的文件, 所以它最大不能超过文件大小。</td>
</tr>
<tr>
<td><code>os.getcwd()</code></td>
<td>返回当前工作目录</td>
</tr>
<tr>
<td><code>os.getcwdb()</code></td>
<td>返回一个当前工作目录的Unicode对象</td>
</tr>
<tr>
<td><code>os.isatty(fd)</code></td>
<td>如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回true, 否则False。</td>
</tr>
<tr>
<td><code>os.lchflags(path, flags)</code></td>
<td>设置路径的标记为数字标记，类似 chflags()，但是没有软链接</td>
</tr>
<tr>
<td><code>os.lchmod(path, mode)</code></td>
<td>修改连接文件权限</td>
</tr>
<tr>
<td><code>os.lchown(path, uid, gid)</code></td>
<td>更改文件所有者，类似 chown，但是不追踪链接。</td>
</tr>
<tr>
<td><code>os.link(src, dst)</code></td>
<td>创建硬链接，名为参数 dst，指向参数 src</td>
</tr>
<tr>
<td><code>os.listdir(path)</code></td>
<td>返回path指定的文件夹包含的文件或文件夹的名字的列表。</td>
</tr>
<tr>
<td><code>os.lseek(fd, pos, how)</code></td>
<td>设置文件描述符 fd当前位置为pos, how方式修改: SEEK_SET 或者 0 设置从文件开始的计算的pos; SEEK_CUR或者 1 则从当前位置计算; os.SEEK_END或者2则从文件尾部开始. 在unix，Windows中有效</td>
</tr>
<tr>
<td><code>os.lstat(path)</code></td>
<td>像stat(),但是没有软链接</td>
</tr>
<tr>
<td><code>os.major(device)</code></td>
<td>从原始的设备号中提取设备major号码 (使用stat中的st_dev或者st_rdev field)。</td>
</tr>
<tr>
<td><code>os.makedev(major, minor)</code></td>
<td>以major和minor设备号组成一个原始设备号</td>
</tr>
<tr>
<td><code>os.makedirs(path[, mode])</code></td>
<td>递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。</td>
</tr>
<tr>
<td><code>os.minor(device)</code></td>
<td>从原始的设备号中提取设备minor号码 (使用stat中的st_dev或者st_rdev field )。</td>
</tr>
<tr>
<td><code>os.mkdir(path[, mode])</code></td>
<td>以数字mode的mode创建一个名为path的文件夹.默认的 mode 是 0777 (八进制)。</td>
</tr>
<tr>
<td><code>os.mkfifo(path[, mode])</code></td>
<td>创建命名管道，mode 为数字，默认为 0666 (八进制)</td>
</tr>
<tr>
<td><code>os.mknod(filename[, mode=0600, device])</code></td>
<td>创建一个名为filename文件系统节点（文件，设备特别文件或者命名pipe）。</td>
</tr>
<tr>
<td><code>os.open(file, flags[, mode])</code></td>
<td>打开一个文件，并且设置需要的打开选项，mode参数是可选的</td>
</tr>
<tr>
<td><code>os.openpty()</code></td>
<td>打开一个新的伪终端对。返回 pty 和 tty的文件描述符。</td>
</tr>
<tr>
<td><code>os.pathconf(path, name)</code></td>
<td>返回相关文件的系统配置信息。</td>
</tr>
<tr>
<td><code>os.pipe()</code></td>
<td>创建一个管道. 返回一对文件描述符(r, w) 分别为读和写</td>
</tr>
<tr>
<td><code>os.popen(command[, mode[, bufsize]])</code></td>
<td>从一个 command 打开一个管道</td>
</tr>
<tr>
<td><code>os.read(fd, n)</code></td>
<td>从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。</td>
</tr>
<tr>
<td><code>os.readlink(path)</code></td>
<td>返回软链接所指向的文件</td>
</tr>
<tr>
<td><code>os.remove(path)</code></td>
<td>删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。</td>
</tr>
<tr>
<td><code>os.removedirs(path)</code></td>
<td>递归删除目录。</td>
</tr>
<tr>
<td><code>os.rename(src, dst)</code></td>
<td>重命名文件或目录，从 src 到 dst</td>
</tr>
<tr>
<td><code>os.renames(old, new)</code></td>
<td>递归地对目录进行更名，也可以对文件进行更名。</td>
</tr>
<tr>
<td><code>os.rmdir(path)</code></td>
<td>删除path指定的空目录，如果目录非空，则抛出一个OSError异常。</td>
</tr>
<tr>
<td><code>os.stat(path)</code></td>
<td>获取path指定的路径的信息，功能等同于C API中的stat()系统调用。</td>
</tr>
<tr>
<td><code>os.stat_float_times([newvalue])</code></td>
<td>决定stat_result是否以float对象显示时间戳</td>
</tr>
<tr>
<td><code>os.statvfs(path)</code></td>
<td>获取指定路径的文件系统统计信息</td>
</tr>
<tr>
<td><code>os.symlink(src, dst)</code></td>
<td>创建一个软链接</td>
</tr>
<tr>
<td><code>os.tcgetpgrp(fd)</code></td>
<td>返回与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组</td>
</tr>
<tr>
<td><code>os.tcsetpgrp(fd, pg)</code></td>
<td>设置与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组为pg。</td>
</tr>
<tr>
<td><code>os.tempnam([dir[, prefix]])</code></td>
<td><strong>Python3 中已删除。</strong> 返回唯一的路径名用于创建临时文件。</td>
</tr>
<tr>
<td><code>os.tmpfile()</code></td>
<td><strong>Python3 中已删除。</strong> 返回一个打开的模式为(w+b)的文件对象 .这文件对象没有文件夹入口，没有文件描述符，将会自动删除。</td>
</tr>
<tr>
<td><code>os.tmpnam()</code></td>
<td><strong>Python3 中已删除。</strong> 为创建一个临时文件返回一个唯一的路径</td>
</tr>
<tr>
<td><code>os.ttyname(fd)</code></td>
<td>返回一个字符串，它表示与文件描述符fd 关联的终端设备。如果fd 没有与终端设备关联，则引发一个异常。</td>
</tr>
<tr>
<td><code>os.unlink(path)</code></td>
<td>删除文件路径</td>
</tr>
<tr>
<td><code>os.utime(path, times)</code></td>
<td>返回指定的path文件的访问和修改的时间。</td>
</tr>
<tr>
<td><code>os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])</code></td>
<td>输出在文件夹中的文件名通过在树中游走，向上或者向下。</td>
</tr>
<tr>
<td><code>os.write(fd, str)</code></td>
<td>写入字符串到文件描述符 fd中. 返回实际写入的字符串长度</td>
</tr>
<tr>
<td><code>os.path</code> 模块</td>
<td>获取文件的属性信息。</td>
</tr>
<tr>
<td><code>os.pardir()</code></td>
<td>获取当前目录的父目录，以字符串形式显示目录名。</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="错误和异常" data-numberify>错误和异常<a class="anchor ms-1" href="#错误和异常"></a></h1>
<p>Python 中的语法错误也可称之为解析错。即便 Python 程序的语法是正确的，在运行它的时候，也有可能发生错误。运行期检测到的错误被称为异常。</p>
<p>异常以不同的类型出现，这些类型都作为信息的一部分打印出来：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="mi">10</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">)</span>             <span class="c1"># 0 不能作为除数，触发异常</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="err">?</span>
</span></span><span class="line"><span class="cl"><span class="ne">ZeroDivisionError</span><span class="p">:</span> <span class="n">division</span> <span class="n">by</span> <span class="n">zero</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span> <span class="o">+</span> <span class="n">spam</span><span class="o">*</span><span class="mi">3</span>             <span class="c1"># spam 未定义，触发异常</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="err">?</span>
</span></span><span class="line"><span class="cl"><span class="ne">NameError</span><span class="p">:</span> <span class="n">name</span> <span class="s1">&#39;spam&#39;</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">defined</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="s1">&#39;2&#39;</span> <span class="o">+</span> <span class="mi">2</span>               <span class="c1"># int 不能与 str 相加，触发异常</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ne">TypeError</span><span class="p">:</span> <span class="n">can</span> <span class="n">only</span> <span class="n">concatenate</span> <span class="nb">str</span> <span class="p">(</span><span class="ow">not</span> <span class="s2">&#34;int&#34;</span><span class="p">)</span> <span class="n">to</span> <span class="nb">str</span>
</span></span></code></pre></div><p>错误信息的前面部分显示了异常发生的上下文，并以调用栈的形式显示具体信息。</p>
<hr>
<h2 id="异常处理" data-numberify>异常处理<a class="anchor ms-1" href="#异常处理"></a></h2>
<h3 id="tryexcept" data-numberify>try/except<a class="anchor ms-1" href="#tryexcept"></a></h3>
<p>异常捕捉可以使用 <code>try/except</code> 语句：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 执行一次 try 子句，并尝试捕捉异常</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 如果没有异常发生，忽略 except 子句</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 当捕捉到异常时，将执行对应的 except 子句</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 如果一个异常没有与任何的 except 匹配，那么这个异常将会传递给上层的 try 中</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 一个 try 语句可能包含多个except子句，分别来处理不同的特定的异常。但最多只有一个分支会被执行。</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_1</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="n">Error1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_2</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="n">Error2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_3</span>
</span></span><span class="line"><span class="cl"><span class="o">......</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span><span class="p">:</span> <span class="c1"># 省略异常的名称，将被当作通配符使用</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_n</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 一次处理多个异常</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_1</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="p">(</span><span class="n">Error1</span><span class="p">,</span> <span class="n">Error2</span><span class="p">,</span> <span class="o">...</span><span class="p">):</span> <span class="c1"># 这里是一个元素为“异常”的元组</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_2</span>
</span></span></code></pre></div><p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s2">&#34;请输入一个数字: &#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;您输入的不是数字，请再次尝试输入！&#34;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;myfile.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">i</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">OSError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;OS error: </span><span class="si">{0}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Could not convert data to an integer.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Unexpected error:&#34;</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">raise</span> <span class="c1"># 再次将触发的异常抛出</span>
</span></span></code></pre></div><hr>
<h3 id="tryexcept--else" data-numberify>try/except &hellip; else<a class="anchor ms-1" href="#tryexcept--else"></a></h3>
<p><code>try/except</code> 语句还有一个可选的 <code>else</code> 子句，如果使用这个子句，那么必须放在所有的 <code>except</code> 子句之后。<code>else</code> 子句将在 <code>try</code> 子句没有发生任何异常的时候执行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_1</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="n">Error1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_2</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="n">Error2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_3</span>
</span></span><span class="line"><span class="cl"><span class="o">......</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_n</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_e</span>
</span></span></code></pre></div><p>判断文件是否可以打开，如果打开文件时正常的没有发生异常则执行 else 部分的语句，读取文件内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">IOError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;cannot open&#39;</span><span class="p">,</span> <span class="n">arg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="s1">&#39;has&#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()),</span> <span class="s1">&#39;lines&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></div><p>使用 <code>else</code> 子句比把所有的语句都放在 <code>try</code> 子句里面要好，这样可以避免一些意想不到，而 <code>except</code> 又无法捕获的异常。异常处理并不仅仅处理那些直接发生在 <code>try</code> 子句中的异常，而且还能处理子句中调用的函数（甚至间接调用的函数）里抛出的异常。</p>
<hr>
<h3 id="try-finally" data-numberify>try-finally<a class="anchor ms-1" href="#try-finally"></a></h3>
<p><code>try-finally</code> 语句无论是否发生异常都将执行 <code>finally</code> 子句的代码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_1</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="n">Error1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_2</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="n">Error2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_3</span>
</span></span><span class="line"><span class="cl"><span class="o">......</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_n</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_e</span>
</span></span><span class="line"><span class="cl"><span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">statement_f</span>
</span></span></code></pre></div><p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">runoob</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">AssertionError</span> <span class="k">as</span> <span class="n">error</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;file.log&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">read_data</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">FileNotFoundError</span> <span class="k">as</span> <span class="n">fnf_error</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">fnf_error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;这句话，无论异常是否发生都会执行。&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p><code>finally</code> 子句通常用作定义任何情况下都会执行的清理行为。</p>
<p>如果一个异常在 <code>try</code> 子句里（或者在 <code>except</code> 和 <code>else</code> 子句里）被抛出，而又没有任何的 <code>except </code>把它截住，那么这个异常会在 <code>finally</code> 子句执行后被抛出。</p>
<hr>
<h2 id="抛出异常" data-numberify>抛出异常<a class="anchor ms-1" href="#抛出异常"></a></h2>
<p>Python 使用 <code>raise</code> 语句抛出一个指定的异常。<code>raise</code> 唯一的一个参数指定了要被抛出的异常。它必须是一个异常的实例或者是异常的类（也就是 <code>Exception</code> 的子类）。<code>raise</code> 语法格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">raise</span> <span class="p">[</span><span class="ne">Exception</span> <span class="p">[,</span> <span class="n">args</span> <span class="p">[,</span> <span class="n">traceback</span><span class="p">]]]</span>
</span></span></code></pre></div><p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s1">&#39;x 不能大于 5。x 的值为: </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span></span></code></pre></div><p>执行以上代码会触发异常：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-latex" data-lang="latex"><span class="line"><span class="cl">Traceback (most recent call last):
</span></span><span class="line"><span class="cl">  File &#34;test.py&#34;, line 3, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    raise Exception(&#39;x 不能大于 5。x 的值为: <span class="nb">{}</span>&#39;.format(x))
</span></span><span class="line"><span class="cl">Exception: x 不能大于 5。x 的值为: 10
</span></span></code></pre></div><hr>
<h2 id="用户自定义异常" data-numberify>用户自定义异常<a class="anchor ms-1" href="#用户自定义异常"></a></h2>
<p>异常类都是直接或间接地继承自 <code>Exception</code> 类。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">MyError</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>         <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>         <span class="k">return</span> <span class="nb">repr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="k">raise</span> <span class="n">MyError</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span> <span class="k">except</span> <span class="n">MyError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;My exception occurred, value:&#39;</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">My</span> <span class="n">exception</span> <span class="n">occurred</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">raise</span> <span class="n">MyError</span><span class="p">(</span><span class="s1">&#39;oops!&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="err">?</span>
</span></span><span class="line"><span class="cl"><span class="n">__main__</span><span class="o">.</span><span class="n">MyError</span><span class="p">:</span> <span class="s1">&#39;oops!&#39;</span>
</span></span></code></pre></div><hr>
<h2 id="预定义清理行为" data-numberify>预定义清理行为<a class="anchor ms-1" href="#预定义清理行为"></a></h2>
<p><code>with</code> 语句可以保证诸如文件之类的对象在使用完之后一定会正确的执行他的清理方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;myfile.txt&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h2 id="assert-断言" data-numberify>assert 断言<a class="anchor ms-1" href="#assert-断言"></a></h2>
<p>Python <code>assert</code>（断言）用于判断一个表达式，在表达式条件为 <code>false</code> 的时候触发异常。</p>
<p>断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况。</p>
<p>语法格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">assert</span> <span class="n">expression</span>
</span></span><span class="line"><span class="cl"><span class="c1"># expression 值为 True 时，正常执行；</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 为 False 时，触发异常</span>
</span></span></code></pre></div><p>它等价于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="ow">not</span> <span class="n">expression</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">raise</span> <span class="ne">AssertionError</span>
</span></span></code></pre></div><p><code>assert</code> 后面也可以紧跟参数:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">assert</span> <span class="n">expression</span> <span class="p">[,</span> <span class="n">arguments</span><span class="p">]</span>
</span></span></code></pre></div><p>等价于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="ow">not</span> <span class="n">expression</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">raise</span> <span class="ne">AssertionError</span><span class="p">(</span><span class="n">arguments</span><span class="p">)</span>
</span></span></code></pre></div><p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">assert</span> <span class="kc">True</span>     <span class="c1"># 条件为 true 正常执行</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">assert</span> <span class="kc">False</span>    <span class="c1"># 条件为 false 触发异常</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ne">AssertionError</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">assert</span> <span class="mi">1</span><span class="o">==</span><span class="mi">1</span>    <span class="c1"># 条件为 true 正常执行</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">assert</span> <span class="mi">1</span><span class="o">==</span><span class="mi">2</span>    <span class="c1"># 条件为 false 触发异常</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ne">AssertionError</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">assert</span> <span class="mi">1</span><span class="o">==</span><span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;1 不等于 2&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ne">AssertionError</span><span class="p">:</span> <span class="mi">1</span> <span class="n">不等于</span> <span class="mi">2</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 判断当前系统是否为 Linux，如果不满足条件则直接触发异常，不必执行接下来的代码</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="k">assert</span> <span class="p">(</span><span class="s1">&#39;linux&#39;</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">platform</span><span class="p">),</span> <span class="s2">&#34;该代码只能在 Linux 下执行&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ... 接下来要执行的代码</span>
</span></span></code></pre></div><hr>
<h1 id="面向对象" data-numberify>面向对象<a class="anchor ms-1" href="#面向对象"></a></h1>
<ul>
<li>
<p><strong>类</strong>（Class）：用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</p>
</li>
<li>
<p><strong>方法</strong>：类中定义的函数。</p>
</li>
<li>
<p><strong>类变量</strong>：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</p>
</li>
<li>
<p><strong>数据成员</strong>：类变量或者实例变量用于处理类及其实例对象的相关的数据。</p>
</li>
<li>
<p><strong>方法重写</strong>：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</p>
</li>
<li>
<p><strong>局部变量</strong>：定义在方法中的变量，只作用于当前实例的类。</p>
</li>
<li>
<p><strong>实例变量</strong>：在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。</p>
</li>
<li>
<p><strong>继承</strong>：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。继承是模拟 “是一个（is-a）” 关系。</p>
</li>
<li>
<p><strong>实例化</strong>：创建一个类的实例，类的具体对象。</p>
</li>
<li>
<p><strong>对象</strong>：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</p>
</li>
</ul>
<hr>
<h2 id="类定义和类对象" data-numberify>类定义和类对象<a class="anchor ms-1" href="#类定义和类对象"></a></h2>
<h2 id="创建类" data-numberify>创建类<a class="anchor ms-1" href="#创建类"></a></h2>
<p>创建类的语法格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ClassName</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">    <span class="o">&lt;</span><span class="n">statement</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span>
</span></span><span class="line"><span class="cl">    <span class="o">&lt;</span><span class="n">statement</span><span class="o">-</span><span class="n">N</span><span class="o">&gt;</span>
</span></span></code></pre></div><hr>
<h2 id="创建实例对象" data-numberify>创建实例对象<a class="anchor ms-1" href="#创建实例对象"></a></h2>
<p>类对象支持两种操作：属性引用和实例化。</p>
<p>在 Python 中，类的实例化类似函数调用方式，其语法格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="n">ClassName</span><span class="p">([</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="o">...</span><span class="p">])</span>
</span></span></code></pre></div><hr>
<h2 id="访问对象属性" data-numberify>访问对象属性<a class="anchor ms-1" href="#访问对象属性"></a></h2>
<p>类的属性是指在类中定义的变量和方法等。</p>
<p>属性引用使用 <code>obj.name</code> 语法。类对象创建后，类命名空间中所有的命名（如变量、方法等）都是有效属性名。</p>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyClass</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">var1</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">var2</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;This is my class.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="n">MyClass</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">var1</span><span class="p">,</span> <span class="n">obj</span><span class="o">.</span><span class="n">var2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span><span class="o">.</span><span class="n">func</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1 2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># This is my class.</span>
</span></span></code></pre></div><hr>
<h2 id="__init__-和self" data-numberify>\_\_init\_\_() 和self<a class="anchor ms-1" href="#__init__-和self"></a></h2>
<p>在类定义中有一个特殊的方法，构造方法 <code>__init__()</code>。如果类定义了 <code>__init__()</code> 方法，那么在类实例化时，会自动调用该方法。</p>
<p>在类定义中，<code>self</code> 代表类的实例，而非类。<code>self</code> 必须存在，且位于其他形参前面。类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的<strong>第一个参数名称</strong>，按照惯例它的名称是 <code>self</code>。</p>
<p><code>self</code> 的名字并不是规定死的，也可以使用 <code>this</code>，但是最好还是按照约定使用 <code>self</code>。</p>
<p>在类的内部，使用 <code>def</code> 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 <code>self</code>, 且为第一个参数。</p>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Complex</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;复数类&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">realpart</span><span class="p">,</span> <span class="n">imagpart</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">r</span> <span class="o">=</span> <span class="n">realpart</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">i</span> <span class="o">=</span> <span class="n">imagpart</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">print_complex</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{:f}{:+f}</span><span class="s1">i&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">r</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">i</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="n">Complex</span><span class="p">(</span><span class="mf">3.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">4.5</span><span class="p">)</span> <span class="c1"># 实例化</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">r</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">i</span><span class="p">)</span>   <span class="c1"># 输出：3.0 -4.5</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="o">.</span><span class="n">print_complex</span><span class="p">()</span> <span class="c1"># 输出：3.000000-4.500000i</span>
</span></span></code></pre></div><p>在 Python 调用 <code>__init__()</code> 来创建实例时，将自动传入实参 <code>self</code>。每个与类相关联的方法调用都自动传递实参 <code>self</code>。</p>
<p>在类的内部使用属性和方法，需要使用 <code>self.attrs</code> 或 <code>self.method()</code>。</p>
<hr>
<h2 id="修改属性值" data-numberify>修改属性值<a class="anchor ms-1" href="#修改属性值"></a></h2>
<p>通常有两种方法可以修改属性值，一种是直接使用 <code>obj.name</code> 语法修改，另一种是通过方法对属性值进行修改。</p>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Car</span><span class="p">():</span> 
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">make</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">year</span><span class="p">):</span> 
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;初始化描述汽车的属性&#34;&#34;&#34;</span> 
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">make</span> <span class="o">=</span> <span class="n">make</span> 
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span> 
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">year</span> <span class="o">=</span> <span class="n">year</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">odometer_reading</span> <span class="o">=</span> <span class="mi">0</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">get_descriptive_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> 
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;返回整洁的描述性信息&#34;&#34;&#34;</span> 
</span></span><span class="line"><span class="cl">        <span class="n">long_name</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">year</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">make</span> 
</span></span><span class="line"><span class="cl">          <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">model</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">long_name</span><span class="o">.</span><span class="n">title</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">read_odometer</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> 
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;打印一条指出汽车里程的消息&#34;&#34;&#34;</span> 
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;This car has &#34;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">odometer_reading</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">              <span class="o">+</span> <span class="s2">&#34; miles on it.&#34;</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">update_odometer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mileage</span><span class="p">):</span> 
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34; 
</span></span></span><span class="line"><span class="cl"><span class="s2">        将里程表读数设置为指定的值
</span></span></span><span class="line"><span class="cl"><span class="s2">        禁止将里程表读数往回调
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">mileage</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">odometer_reading</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">odometer_reading</span> <span class="o">=</span> <span class="n">mileage</span> 
</span></span><span class="line"><span class="cl">     <span class="k">else</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">      <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;You can&#39;t roll back an odometer!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">increment_odometer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">miles</span><span class="p">):</span> 
</span></span><span class="line"><span class="cl">     <span class="s2">&#34;&#34;&#34;将里程表读数增加指定的量&#34;&#34;&#34;</span> 
</span></span><span class="line"><span class="cl">     <span class="bp">self</span><span class="o">.</span><span class="n">odometer_reading</span> <span class="o">+=</span> <span class="n">miles</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_new_car</span> <span class="o">=</span> <span class="n">Car</span><span class="p">(</span><span class="s1">&#39;audi&#39;</span><span class="p">,</span> <span class="s1">&#39;a4&#39;</span><span class="p">,</span> <span class="mi">2016</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"><span class="c1"># 通过方法获取属性</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_new_car</span><span class="o">.</span><span class="n">get_descriptive_name</span><span class="p">())</span> 
</span></span><span class="line"><span class="cl"><span class="n">my_new_car</span><span class="o">.</span><span class="n">read_odometer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2016 Audi A4 </span>
</span></span><span class="line"><span class="cl"><span class="c1"># This car has 0 miles on it.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 通过方法对属性值进行修改</span>
</span></span><span class="line"><span class="cl"><span class="n">my_used_car</span> <span class="o">=</span> <span class="n">Car</span><span class="p">(</span><span class="s1">&#39;subaru&#39;</span><span class="p">,</span> <span class="s1">&#39;outback&#39;</span><span class="p">,</span> <span class="mi">2013</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_used_car</span><span class="o">.</span><span class="n">get_descriptive_name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_used_car</span><span class="o">.</span><span class="n">update_odometer</span><span class="p">(</span><span class="mi">23500</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"><span class="n">my_used_car</span><span class="o">.</span><span class="n">read_odometer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_used_car</span><span class="o">.</span><span class="n">increment_odometer</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"><span class="n">my_used_car</span><span class="o">.</span><span class="n">read_odometer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2013 Subaru Outback </span>
</span></span><span class="line"><span class="cl"><span class="c1"># This car has 23500 miles on it. </span>
</span></span><span class="line"><span class="cl"><span class="c1"># This car has 23600 miles on it.</span>
</span></span></code></pre></div><hr>
<h2 id="继承" data-numberify>继承<a class="anchor ms-1" href="#继承"></a></h2>
<p>子类（派生类 DerivedClassName）会继承父类（基类 BaseClassName）的属性和方法。派生类的定义如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DerivedClassName</span><span class="p">(</span><span class="n">BaseClassName</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="o">&lt;</span><span class="n">statement</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span>
</span></span><span class="line"><span class="cl">    <span class="o">&lt;</span><span class="n">statement</span><span class="o">-</span><span class="n">N</span><span class="o">&gt;</span>
</span></span></code></pre></div><p><code>BaseClassName</code>（实例中的基类名）必须与派生类定义在一个作用域内。</p>
<p>如果基类定义在另一个模块中，需要使用 <code>.</code> 运算符：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DerivedClassName</span><span class="p">(</span><span class="n">modname</span><span class="o">.</span><span class="n">BaseClassName</span><span class="p">):</span>
</span></span></code></pre></div><p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 类定义</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">people</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 定义基本属性</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">age</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 定义私有属性,私有属性在类外部无法直接进行访问</span>
</span></span><span class="line"><span class="cl">    <span class="n">__weight</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 定义构造方法</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">w</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__weight</span> <span class="o">=</span> <span class="n">w</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">speak</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">%s</span><span class="s2"> 说: 我 </span><span class="si">%d</span><span class="s2"> 岁。&#34;</span> <span class="o">%</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">age</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 单继承示例</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">student</span><span class="p">(</span><span class="n">people</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">grade</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="n">g</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 调用父类的构函</span>
</span></span><span class="line"><span class="cl">        <span class="n">people</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">w</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">grade</span> <span class="o">=</span> <span class="n">g</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 覆写父类的方法</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">speak</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">%s</span><span class="s2"> 说: 我 </span><span class="si">%d</span><span class="s2"> 岁了，我在读 </span><span class="si">%d</span><span class="s2"> 年级&#34;</span><span class="o">%</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">age</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">grade</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="n">student</span><span class="p">(</span><span class="s1">&#39;ken&#39;</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">60</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span><span class="o">.</span><span class="n">speak</span><span class="p">()</span>
</span></span></code></pre></div><hr>
<h3 id="多继承" data-numberify>多继承<a class="anchor ms-1" href="#多继承"></a></h3>
<p>Python 有限地支持<strong>多继承</strong>，多继承的类定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DerivedClassName</span><span class="p">(</span><span class="n">Base1</span><span class="p">,</span> <span class="n">Base2</span><span class="p">,</span> <span class="n">Base3</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="o">&lt;</span><span class="n">statement</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span>
</span></span><span class="line"><span class="cl">    <span class="o">&lt;</span><span class="n">statement</span><span class="o">-</span><span class="n">N</span><span class="o">&gt;</span>
</span></span></code></pre></div><p>若是父类中有相同的方法名，而在子类使用时未指定，Python 会根据圆括号中父类的顺序从左至右搜索。即方法在子类中未找到时，从左到右查找父类中是否包含方法。</p>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 接上一个例子</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 另一个类，多重继承之前的准备</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">speaker</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">topic</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">t</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">topic</span> <span class="o">=</span> <span class="n">t</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">speak</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;我叫 </span><span class="si">%s</span><span class="s2">，我是一个演说家，我演讲的主题是 </span><span class="si">%s</span><span class="s2">&#34;</span><span class="o">%</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">topic</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 多重继承</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">sample</span><span class="p">(</span><span class="n">speaker</span><span class="p">,</span><span class="n">student</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span> <span class="o">=</span><span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="n">g</span><span class="p">,</span><span class="n">t</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">student</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="n">g</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">speaker</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">test</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="s2">&#34;Tim&#34;</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">80</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="s2">&#34;Python&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test</span><span class="o">.</span><span class="n">speak</span><span class="p">()</span>   <span class="c1"># 方法名同，默认调用的是在括号中排前地父类的方法</span>
</span></span></code></pre></div><hr>
<h3 id="方法重写" data-numberify>方法重写<a class="anchor ms-1" href="#方法重写"></a></h3>
<p>可以在子类中重写其父类的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Parent</span><span class="p">:</span>        <span class="c1"># 定义父类</span>
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">myMethod</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="nb">print</span> <span class="p">(</span><span class="s1">&#39;调用父类方法&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">Parent</span><span class="p">):</span> <span class="c1"># 定义子类</span>
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">myMethod</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="nb">print</span> <span class="p">(</span><span class="s1">&#39;调用子类方法&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="n">Child</span><span class="p">()</span>          <span class="c1"># 子类实例</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span><span class="o">.</span><span class="n">myMethod</span><span class="p">()</span>         <span class="c1"># 子类调用重写方法</span>
</span></span><span class="line"><span class="cl"><span class="nb">super</span><span class="p">(</span><span class="n">Child</span><span class="p">,</span><span class="n">c</span><span class="p">)</span><span class="o">.</span><span class="n">myMethod</span><span class="p">()</span> <span class="c1"># 用子类对象调用父类已被覆盖的方法</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 调用子类方法</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 调用父类方法</span>
</span></span></code></pre></div><hr>
<h3 id="子类继承父类构造函数说明" data-numberify>子类继承父类构造函数说明<a class="anchor ms-1" href="#子类继承父类构造函数说明"></a></h3>
<p>如果在子类中需要父类的构造方法就需要显式地调用父类的构造方法，或者不重写父类的构造方法。</p>
<p>子类不重写 <code>__init__</code>，实例化子类时，会自动调用父类定义的 <code>__init__</code>。</p>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Father</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="p">(</span><span class="s2">&#34;name: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">getName</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s1">&#39;Father &#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 重写了 getName 但并没有重写 __init__</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Son</span><span class="p">(</span><span class="n">Father</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">getName</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s1">&#39;Son &#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">son</span> <span class="o">=</span> <span class="n">Son</span><span class="p">(</span><span class="s1">&#39;runoob&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">son</span><span class="o">.</span><span class="n">getName</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># name: runoob</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Son runoob</span>
</span></span></code></pre></div><hr>
<p>如果重写了<code>__init__</code> 时，实例化子类，就不会调用父类已经定义的 <code>__init__</code>。</p>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Father</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="o">=</span><span class="n">name</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="p">(</span> <span class="s2">&#34;name: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span><span class="p">(</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">getName</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s1">&#39;Father &#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 重写了 __init__ 和 getName</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Son</span><span class="p">(</span><span class="n">Father</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="p">(</span> <span class="s2">&#34;hi&#34;</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span>  <span class="n">name</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">getName</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s1">&#39;Son &#39;</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span><span class="o">==</span><span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">son</span><span class="o">=</span><span class="n">Son</span><span class="p">(</span><span class="s1">&#39;runoob&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="p">(</span><span class="n">son</span><span class="o">.</span><span class="n">getName</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># hi</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Son runoob</span>
</span></span></code></pre></div><hr>
<p>如果重写了 <code>__init__</code> 时，要继承父类的构造方法，可以在 <code>__init__</code> 的定义中使用 <code>super</code> 关键字：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">super</span><span class="p">(</span><span class="n">子类</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">参数1</span><span class="p">,</span> <span class="n">参数2</span><span class="p">,</span> <span class="o">....</span><span class="p">)</span>
</span></span></code></pre></div><p>另一种写法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">父类名称</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">参数1</span><span class="p">,</span> <span class="n">参数2</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
</span></span></code></pre></div><p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Father</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;name: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">getName</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s1">&#39;Father &#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Son</span><span class="p">(</span><span class="n">Father</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">(</span><span class="n">Son</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;hi&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span>  <span class="n">name</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">getName</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s1">&#39;Son &#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">son</span><span class="o">=</span><span class="n">Son</span><span class="p">(</span><span class="s1">&#39;runoob&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="p">(</span><span class="n">son</span><span class="o">.</span><span class="n">getName</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># name: runoob</span>
</span></span><span class="line"><span class="cl"><span class="c1"># hi</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Son runoob</span>
</span></span></code></pre></div><hr>
<h2 id="类的私有属性与私有方法" data-numberify>类的私有属性与私有方法<a class="anchor ms-1" href="#类的私有属性与私有方法"></a></h2>
<p>私有属性不能在类的外部被使用或直接访问。使用两个下划线开头，声明该属性为私有：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">__private_attrs</span>
</span></span></code></pre></div><p>在类内部的方法中使用私有属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="bp">self</span><span class="o">.</span><span class="n">__private_attrs</span>
</span></span></code></pre></div><p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">JustCounter</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">__secretCount</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># 私有变量</span>
</span></span><span class="line"><span class="cl">    <span class="n">publicCount</span> <span class="o">=</span> <span class="mi">0</span>    <span class="c1"># 公开变量</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__secretCount</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">publicCount</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__secretCount</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">counter</span> <span class="o">=</span> <span class="n">JustCounter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">counter</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">counter</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="p">(</span><span class="n">counter</span><span class="o">.</span><span class="n">publicCount</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="p">(</span><span class="n">counter</span><span class="o">.</span><span class="n">__secretCount</span><span class="p">)</span>  <span class="c1"># 报错，实例不能访问私有变量</span>
</span></span></code></pre></div><p>输出结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;test.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">16</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="p">(</span><span class="n">counter</span><span class="o">.</span><span class="n">__secretCount</span><span class="p">)</span>  <span class="c1"># 报错，实例不能访问私有变量</span>
</span></span><span class="line"><span class="cl"><span class="ne">AttributeError</span><span class="p">:</span> <span class="s1">&#39;JustCounter&#39;</span> <span class="nb">object</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s1">&#39;__secretCount&#39;</span>
</span></span></code></pre></div><hr>
<p>私有方法只能在类的内部调用 ，不能在类的外部调用。使用两个下划线开头，声明该方法为私有方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">__private_method</span><span class="p">(</span><span class="bp">self</span><span class="p">[,</span> <span class="o">...</span><span class="p">]):</span>
</span></span></code></pre></div><p>在类内部的方法中使用私有方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="bp">self</span><span class="o">.</span><span class="n">__private_methods</span><span class="p">([</span><span class="o">...</span><span class="p">])</span>
</span></span></code></pre></div><p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Site</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>   <span class="c1"># public</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__url</span> <span class="o">=</span> <span class="n">url</span>   <span class="c1"># private</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">who</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;name  : &#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;url : &#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">__url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">__foo</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>          <span class="c1"># 私有方法</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;这是私有方法&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>            <span class="c1"># 公共方法</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;这是公共方法&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__foo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="n">Site</span><span class="p">(</span><span class="s1">&#39;菜鸟教程&#39;</span><span class="p">,</span> <span class="s1">&#39;www.runoob.com&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="o">.</span><span class="n">who</span><span class="p">()</span>        <span class="c1"># 正常输出</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="o">.</span><span class="n">foo</span><span class="p">()</span>        <span class="c1"># 正常输出</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="o">.</span><span class="n">__foo</span><span class="p">()</span>      <span class="c1"># 报错</span>
</span></span></code></pre></div><p>输出结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">name</span>  <span class="p">:</span>  <span class="n">菜鸟教程</span>
</span></span><span class="line"><span class="cl"><span class="n">url</span> <span class="p">:</span>  <span class="n">www</span><span class="o">.</span><span class="n">runoob</span><span class="o">.</span><span class="n">com</span>
</span></span><span class="line"><span class="cl"><span class="n">这是公共方法</span>
</span></span><span class="line"><span class="cl"><span class="n">这是私有方法</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;c:/Users/27120/Documents/MyDocuments/Code/test.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">20</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>      
</span></span><span class="line"><span class="cl">    <span class="n">x</span><span class="o">.</span><span class="n">__foo</span><span class="p">()</span>      <span class="c1"># 报错，外部不能调用私有方法</span>
</span></span><span class="line"><span class="cl"><span class="ne">AttributeError</span><span class="p">:</span> <span class="s1">&#39;Site&#39;</span> <span class="nb">object</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s1">&#39;__foo&#39;</span>
</span></span></code></pre></div><hr>
<h2 id="类的专有方法" data-numberify>类的专有方法<a class="anchor ms-1" href="#类的专有方法"></a></h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>__init__ </code></td>
<td>构造函数，在生成对象时调用</td>
</tr>
<tr>
<td><code>__del__</code></td>
<td>析构函数，释放对象时使用</td>
</tr>
<tr>
<td><code>__repr__</code></td>
<td>打印，转换</td>
</tr>
<tr>
<td><code>__setitem__</code></td>
<td>按照索引赋值</td>
</tr>
<tr>
<td><code>__getitem__</code></td>
<td>按照索引获取值</td>
</tr>
<tr>
<td><code>__len__</code></td>
<td>获得长度</td>
</tr>
<tr>
<td><code>__cmp__</code></td>
<td>比较运算</td>
</tr>
<tr>
<td><code>__call__</code></td>
<td>函数调用</td>
</tr>
<tr>
<td><code>__add__</code></td>
<td>加运算</td>
</tr>
<tr>
<td><code>__sub__</code></td>
<td>减运算</td>
</tr>
<tr>
<td><code>__mul__</code></td>
<td>乘运算</td>
</tr>
<tr>
<td><code>__truediv__</code></td>
<td>除运算</td>
</tr>
<tr>
<td><code>__mod__</code></td>
<td>求余运算</td>
</tr>
<tr>
<td><code>__pow__</code></td>
<td>乘方</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="运算符重载" data-numberify>运算符重载<a class="anchor ms-1" href="#运算符重载"></a></h3>
<p>可以对类的专有方法进行重载：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Vector</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl">      <span class="bp">self</span><span class="o">.</span><span class="n">b</span> <span class="o">=</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="s1">&#39;Vector (</span><span class="si">%d</span><span class="s1">, </span><span class="si">%d</span><span class="s1">)&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">a</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="fm">__add__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">Vector</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">a</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">b</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">v1</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">v2</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="p">(</span><span class="n">v1</span> <span class="o">+</span> <span class="n">v2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Vector(7,8)</span>
</span></span></code></pre></div><hr>
<h1 id="命名空间" data-numberify>命名空间<a class="anchor ms-1" href="#命名空间"></a></h1>
<p>命名空间（Namespace）是从名称到对象的映射，大部分的命名空间都是通过 Python 字典来实现的。</p>
<p>命名空间提供了在项目中避免名字冲突的一种方法。各个命名空间是独立的，没有任何关系的，所以一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响。</p>
<p>一般有三种命名空间：</p>
<ol>
<li>
<p><strong>内置名称（built-in names）</strong>：Python 语言内置的名称，比如函数名 abs、char 和异常名称 BaseException、Exception 等等。</p>
</li>
<li>
<p><strong>全局名称（global names）</strong>：模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。</p>
</li>
<li>
<p><strong>局部名称（local names）</strong>：函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量（类中定义的也是）。</p>
</li>
</ol>
<ul>
<li>
<p>命名空间查找顺序：局部的命名空间 $\rightarrow$ 全局命名空间 $\rightarrow$ 内置命名空间。</p>
</li>
<li>
<p>如果找不到变量，将放弃查找并引发一个 <code>NameError</code> 异常：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ne">NameError</span><span class="p">:</span> <span class="n">name</span> <span class="s1">&#39;runoob&#39;</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">defined</span>
</span></span></code></pre></div></li>
<li>
<p>命名空间的生命周期：命名空间的生命周期取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束。</p>
</li>
</ul>
<p>因此，无法从外部命名空间访问内部命名空间的对象。</p>
<hr>
<h1 id="作用域" data-numberify>作用域<a class="anchor ms-1" href="#作用域"></a></h1>
<p>作用域就是一个 Python 程序可以直接访问命名空间的正文区域。变量的访问权限取决于这个变量是在哪里赋值的。</p>
<p>变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python 的作用域一共有 4 种，分别是：</p>
<ol>
<li>
<p><strong>L（Local）</strong>：最内层，包含局部变量。如一个函数/方法内部。</p>
</li>
<li>
<p><strong>E（Enclosing）</strong>：包含了非局部（non-local）也非全局（non-global）的变量。
如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 non-local。</p>
</li>
<li>
<p><strong>G（Global）</strong>：当前脚本的最外层。如当前模块的全局变量。</p>
</li>
<li>
<p><strong>B（Built-in）</strong>： 包含了内建的变量/关键字等，最后被搜索。</p>
</li>
</ol>
<p>作用域查找顺序： L $\rightarrow$ E $\rightarrow$ G $\rightarrow$ B。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">g_count</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># 全局作用域</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">outer</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">o_count</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># 闭包函数外的函数中</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">inner</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">i_count</span> <span class="o">=</span> <span class="mi">2</span>  <span class="c1"># 局部作用域</span>
</span></span></code></pre></div><p>内置作用域是通过一个名为 builtin 的标准模块来实现的，但是这个变量名自身并没有放入内置作用域内，所以必须导入这个文件才能够使用它。在Python3.0中，可以使用以下的代码来查看到底预定义了哪些变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">builtins</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="n">builtins</span><span class="p">)</span>
</span></span></code></pre></div><p>Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 <code>if</code>/<code>elif</code>/<code>else</code>、<code>try</code>/<code>except</code>、<code>for</code>/<code>while</code>等）是不会引入新的作用域的：</p>
<hr>
<h2 id="全局变量和局部变量" data-numberify>全局变量和局部变量<a class="anchor ms-1" href="#全局变量和局部变量"></a></h2>
<p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。</p>
<p>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。</p>
<hr>
<h2 id="global和nonlocal" data-numberify>global和nonlocal<a class="anchor ms-1" href="#global和nonlocal"></a></h2>
<p><code>global</code> 和 <code>nonlocal</code> 的作用是让内部作用域修改外部作用域变量。</p>
<p><code>global</code> —— 修改全局变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">num</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">fun1</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">global</span> <span class="n">num</span>  <span class="c1"># 需要使用 global 关键字声明</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="n">num</span> <span class="o">=</span> <span class="mi">123</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="n">fun1</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 123</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 123</span>
</span></span></code></pre></div><p><code>nonlocal</code> —— 修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">outer</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">num</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">inner</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">nonlocal</span> <span class="n">num</span>   <span class="c1"># nonlocal关键字声明</span>
</span></span><span class="line"><span class="cl">        <span class="n">num</span> <span class="o">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">inner</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="n">outer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 100</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 100</span>
</span></span></code></pre></div><hr>
<p>不使用 <code>global</code> 或 <code>nonlocal</code> 修改外部作用域变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test</span><span class="p">()</span>
</span></span></code></pre></div><p>结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;test.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">7</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="n">test</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;test.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">5</span><span class="p">,</span> <span class="ow">in</span> <span class="n">test</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="ne">UnboundLocalError</span><span class="p">:</span> <span class="n">local</span> <span class="n">variable</span> <span class="s1">&#39;a&#39;</span> <span class="n">referenced</span> <span class="n">before</span> <span class="n">assignment</span>
</span></span></code></pre></div><p>局部作用域引用错误，因为 <code>test</code> 函数中的 <code>a</code> 使用的是局部，未定义，无法修改。</p>
<hr>
<p>for x in range(1,5)</p>
<p>if x &gt; 2</p>
<p>for y in range(1,4)</p>
<p>if y &lt; 3</p>
<p>x*y</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python 进阶 — 正则表达式篇</title>
      <link>/blog/2022/01/python-%E8%BF%9B%E9%98%B6-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AF%87/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022/01/python-%E8%BF%9B%E9%98%B6-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AF%87/</guid>
      <description><![CDATA[正则表达式语法 —— Python 正则表达式是一个特殊的字符序列，能方便地检查一个字符串是否与某种模式匹配。 正则表达式可以拼接。 正则表达式可以包含普通或者]]></description>
      <content:encoded><![CDATA[<h1 id="正则表达式语法--python" data-numberify>正则表达式语法 —— Python<a class="anchor ms-1" href="#正则表达式语法--python"></a></h1>
<p>正则表达式是一个特殊的字符序列，能方便地检查一个字符串是否与某种模式匹配。</p>
<ul>
<li>
<p>正则表达式可以拼接。</p>
</li>
<li>
<p>正则表达式可以包含普通或者特殊字符。</p>
<ul>
<li>
<p>绝大部分普通字符，是最简单的正则表达式。它们就匹配自身。</p>
</li>
<li>
<p>特殊字符既可以表示它的普通含义， 也可以影响它旁边的正则表达式的解释。</p>
</li>
<li>
<p>重复修饰符（<code>*</code>、<code>+</code>、<code>?</code>、<code>{m,n}</code>, 等）不能直接嵌套。避免了非贪婪后缀 <code>?</code> 修饰符，和其他实现中的修饰符产生的多义性。要应用一个内层重复嵌套，可以使用括号。</p>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="特殊字符" data-numberify>特殊字符<a class="anchor ms-1" href="#特殊字符"></a></h2>
<table>
<thead>
<tr>
<th><strong>序列</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.</code></td>
<td>（点）在默认模式，匹配除了换行的任意字符。                                                                                                                                                                                                                                <br>如果指定了标签 <code>DOTALL</code>，它将匹配包括换行符的任意字符。</td>
</tr>
<tr>
<td><code>\</code></td>
<td>转义特殊字符（允许你匹配 <code>'*'</code>、<code>'?'</code>，或者其他正则表达式中使用的特殊字符），或者表示一个特殊序列。</td>
</tr>
<tr>
<td><code>[…]</code></td>
<td>用于表示一个字符集合。<br> 字符可以单独列出：<code>[abc]</code>，匹配 <code>'a'</code>、<code>'b'</code>、<code>'c'</code>。<br>可以表示字符范围，通过用 <code>'-'</code> 将两个字符连起来：<code>[a-z]</code> 将匹配任何小写 ASCII 字符； 可以指定多个范围：<code>[a-zA-Z]</code> 将匹配所有英文字符。 如果 <code>-</code> 进行了转义 （比如 <code>[a-z]</code>）或者它的位置在首位或者末尾（如 <code>[-a]</code> 或 <code>[a-]</code>），它就只表示普通字符 <code>'-'</code>。  <br>特殊字符在集合中，失去它的特殊含义：<code>[(+*)]</code> 只会匹配这几个文法字符 <code>'('</code>、<code>'+'</code>、<code>'*'</code> 或 <code>')'</code>。 <br>字符类如 <code>\w</code> 或者 <code>\S</code> 在集合内可以接受，它们可以匹配的字符由 <code>ASCII</code> 或者 <code>LOCALE</code> 模式决定。<br> 不在集合范围内的字符可以通过取反（<code>'^'</code> 作为首字符）来进行匹配：<code>[^a]</code> 将匹配除了 <code>'a'</code> 之外的所有字符。 <code>'^'</code> 如果不在集合首位，就没有特殊含义。<br>在集合内要匹配一个字符 <code>']'</code>，有两种方法，要么将它进行转义，要么就把它放到集合首位（如 <code>[()[]{}]</code> 和 <code>[]()[{}]</code>）。                                                                                      <br>嵌套集合和集合操作支持可能在未来添加。如果有多以的情况发生，将会抛出 <code>FutureWarning</code>。</td>
</tr>
<tr>
<td><code>|</code></td>
<td><code>A|B</code>， <code>A</code> 和 <code>B</code> 可以是任意正则表达式，创建一个正则表达式，匹配 <code>A</code> 或者 <code>B</code>。任意个正则表达式可以用 <code>'|'</code> 连接。它可以在集合或组合内使用。 <code>'|'</code> 操作符绝不贪婪：扫描目标字符串时，由 <code>'|'</code> 分隔开的正则样式从左到右进行匹配。当一个样式完全匹配时，这个分支就被接受。即，一旦 <code>A</code> 匹配成功， <code>B</code> 就不再进行匹配，即便它能产生一个更好的匹配。 如果要匹配 <code>'|'</code> 字符，使用 <code>|</code>， 或者把它包含在字符集里 <code>[|]</code>。</td>
</tr>
<tr>
<td><code>(…)</code></td>
<td>（组合），匹配括号内的任意正则表达式，并标识出组合的开始和结尾。</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="定位符" data-numberify>定位符<a class="anchor ms-1" href="#定位符"></a></h3>
<p>定位符用来描述字符串或单词的边界。</p>
<table>
<thead>
<tr>
<th><strong>序列</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>（插入符号）匹配字符串的开头， 并且在 <code>MULTILINE</code> 模式也匹配换行后的首个符号。</td>
</tr>
<tr>
<td><code>$</code></td>
<td>匹配字符串尾或者在字符串尾的换行符的前一个字符，在 <code>MULTILINE</code> 模式下也会匹配换行符之前的文本。<br>在 <code>'foo1\nfoo2\n'</code> 中搜索 <code>foo.$</code>，通常匹配 <code>'foo2'</code>，但在 <code>MULTILINE</code> 模式下可以匹配到 <code>'foo1'</code>。<br> 在 <code>'foo\n'</code> 中搜索 <code>$</code> 会找到两个（空的）匹配：一个在换行符之前，一个在字符串的末尾。</td>
</tr>
<tr>
<td><code>\A</code></td>
<td>只匹配字符串的开始。相当于默认模式下的 <code>^</code>。</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>匹配一个单词边界。即，匹配空字符串，但只在单词开始或结尾的位置。<br>通常 <code>\b</code> 定义为 <code>\w</code> 和 <code>\W</code> 字符之间，或者 <code>\w</code> 和字符串开始/结尾的边界。<br>如果使用了 <code>LOCALE</code> 标志，则词的边界由当前语言区域设置。<br> 在字符集合内表示退格（如 <code>[\b]</code>）。</td>
</tr>
<tr>
<td><code>\B</code></td>
<td>非单词边界匹配。即，匹配除了单词边界外的任何其他位置。<code>\B</code> 是 <code>\b</code> 的取非。<br>如果使用了 <code>LOCALE</code> 标志，则词的边界由当前语言区域设置。</td>
</tr>
<tr>
<td><code>\Z</code></td>
<td>只匹配字符串尾。</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="重复修饰符限定符" data-numberify>重复修饰符（限定符）<a class="anchor ms-1" href="#重复修饰符限定符"></a></h3>
<ul>
<li>
<p><code>{m}</code></p>
<p>对其之前的正则式指定匹配 m 个重复；少于 m 的话就会导致匹配失败。</p>
</li>
</ul>
<p>贪婪修饰符：</p>
<ul>
<li>
<p><code>*</code></p>
<p>对它前面的正则式匹配 0 到任意次重复， 尽量多地匹配字符串。
等价于：<code>{0,}</code>。</p>
</li>
<li>
<p><code>+</code></p>
<p>对它前面的子表达式匹配 1 到任意次重复， 尽量多地匹配字符串。
等价于：<code>{1,}</code>。</p>
</li>
<li>
<p><code>?</code></p>
<p>对它前面的子表达式匹配 0 到 1 次重复， 尽量多地匹配字符串。
等价于：<code>{0,1}</code>。</p>
</li>
<li>
<p><code>{m,}</code></p>
<p>对它前面的子表达式进行 m 到任意次重复， 尽量多地匹配字符串。</p>
</li>
<li>
<p><code>{m,n}</code>（中间不要有空白字符）</p>
<p>对它前面的子表达式进行 m 到 n 次匹配，在 m 和 n 之间取尽量多。</p>
</li>
</ul>
<p>非贪婪修饰符：</p>
<ul>
<li>
<p><code>*?</code>、<code>+?</code>、<code>??</code>、<code>{m,}?</code>、<code>{m,n}?</code>：</p>
<p>在修饰符之后添加 <code>?</code> 将使样式以非贪婪方式，或者 :dfn: 最小方式进行匹配； 尽量少的字符将会被匹配。</p>
</li>
</ul>
<hr>
<h3 id="扩展标记法" data-numberify>扩展标记法<a class="anchor ms-1" href="#扩展标记法"></a></h3>
<ul>
<li>
<p><code>(?…)``'?'</code> 仅跟随 <code>'('</code> 并无含义。<code>'?'</code> 后面的第一个字符决定了这个构建采用什么样的语法。这种扩展通常并不创建新的组合； <code>(?P&lt;name&gt;...)</code> 是唯一的例外。</p>
</li>
<li>
<p><code>(?aiLmsux)</code></p>
<p>在 <code>(?</code> 后带 <code>'a'</code>、 <code>'i'</code>、<code>'L'</code>、<code>'m'</code>、<code>'s'</code>、<code>'u'</code>、<code>'x'</code> 中的一个或多个。<code>(?aimsx)</code> 将会匹配空字符串。</p>
<p>这些字符代表内联标记（与 <code>re</code> 模块中的 RegexFlag 标志常量对应）。</p>
<ul>
<li>
<p><code>'a'</code> —— <code>re.A</code> 模式；</p>
</li>
<li>
<p><code>'i'</code> —— <code>re.I</code> 模式；</p>
</li>
<li>
<p><code>'L'</code> —— <code>re.L</code> 模式；</p>
</li>
<li>
<p><code>'m'</code> —— <code>re.M</code> 模式；</p>
</li>
<li>
<p><code>'s'</code> —— <code>re.S</code> 模式；</p>
</li>
<li>
<p><code>'u'</code> —— <code>re.U</code> 模式；</p>
</li>
<li>
<p><code>'x'</code> —— <code>re.X</code> 模式。</p>
</li>
</ul>
</li>
<li>
<p><code>(?:…)</code></p>
<p>正则括号的非捕获版本。 匹配在括号内的任何正则表达式，但该分组所匹配的子字符串不能在执行匹配后被获取或是之后在模式中被引用。</p>
</li>
<li>
<p><code>(?aiLmsux-imsx:…)``'?'</code> 后面 <code>'-'</code> 前面带 <code>'a'</code>、 <code>'i'</code>、<code>'L'</code>、<code>'m'</code>、<code>'s'</code>、<code>'u'</code>、<code>'x'</code> 中的 0 个或多个。<code>'-'</code> 后面 <code>':'</code> 前面带 <code>'i'</code>、<code>'m'</code>、<code>'s'</code>、<code>'x'</code> 中的一到多个。表示设置或者去除（<code>'-'</code> 后指定去除的标记）相应标记。</p>
<p>与 <code>(?aiLmsux)</code> 一样，这些字符分别代表了不同的内联标记。</p>
<p><code>'a'</code>、<code>'L'</code> 和 <code>'u'</code> 作为内联标记是相互排斥的， 所以它们不能结合在一起，或者跟随 <code>'-'</code> 。 当他们中的某个出现在内联组中，它就覆盖了括号组内的匹配模式。Python3.7 接受 <code>'a'</code>、<code>'L'</code> 和 <code>'u'</code> 存在于一个组合。
这种方式只覆盖组合内匹配，括号外的匹配模式不受影响。</p>
</li>
<li>
<p><code>(?P&lt;name&gt;…)</code></p>
<p>（命名组合）类似正则组合，但是匹配到的子串组在外部可以通过定义的 <code>name</code> 来获取的（也可以通过数字获取）。组合名必须是有效的 Python 标识符，并且每个组合名只能用一个正则表达式定义，只能定义一次。
命名组合可以在三种上下文中引用：</p>
<table>
<thead>
<tr>
<th><strong>引用组合 &ldquo;quote&rdquo; 的上下文</strong></th>
<th><strong>引用方法</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>在正则式自身内</td>
<td><code>(?P=quote)</code> 或 <code>\1</code></td>
</tr>
<tr>
<td>处理匹配对象 <code>m</code></td>
<td><code>m.group('quote')</code> 或 <code>m.end('quote')</code>（等）</td>
</tr>
<tr>
<td>传递到 <code>re.sub()</code> 里的 <code>repl</code> 参数中</td>
<td><code>\g&lt;quote&gt;</code> 或 <code>\g&lt;1&gt;</code> 或 <code>\1</code></td>
</tr>
</tbody>
</table>
</li>
<li>
<p><code>(?P=name)</code></p>
<p>反向引用一个命名组合；它匹配前面名为 <code>name</code> 的命名组中匹配到的串同样的字串（如上所示）。</p>
</li>
<li>
<p><code>(?#…)</code></p>
<p>注释，里面的内容会被忽略。</p>
</li>
<li>
<p><code>(?=…)</code></p>
<p>lookahead assertion，匹配 <code>…</code> 的内容，但是并不消费样式的内容。如，<code>abc(?=def)</code> 当 <code>'abc'</code> 后面是 <code>'def'</code> 的时候，才匹配 <code>'abc'</code>。</p>
</li>
<li>
<p><code>(?!…)</code></p>
<p>negative lookahead assertion（前视取反），匹配 <code>…</code> 不符合的情况。如，<code>abc(?!def)</code> 当 <code>'abc'</code> 后面不是 <code>'def'</code> 的时候，才匹配 <code>'abc'</code>。</p>
</li>
<li>
<p><code>(?&lt;=…)</code></p>
<p>:dfn:positive lookbehind assertion（正向后视断定），匹配字符串的当前位置，它的前面匹配 <code>…</code> 的内容到当前位置。如，<code>(?&lt;=abc)def</code> 当 <code>'def'</code> 前面是 <code>'abc'</code> 时匹配 <code>'def'</code>，该样式是从 <code>'d'</code> 开始往回搜索的。
包含的匹配样式必须是定长的（ <code>abc</code> 或 <code>a|b</code> 是允许的，但是 <code>a*</code> 和 <code>a{3,4}</code> 不可以）。</p>
</li>
<li>
<p><code>(?&lt;!…)</code></p>
<p>negative lookbehind assertion （后视断定取非），匹配当前位置之前不是 <code>…</code> 的样式。</p>
<p>包含的样式匹配必须是定长的。</p>
<p>由 negative lookbehind assertion 开始的样式可以从字符串搜索开始的位置进行匹配。</p>
</li>
<li>
<p><code>(?(id/name)yes-pattern|no-pattern)</code></p>
<p>如果给定的 <code>id</code> 或 <code>name</code> 存在，将会尝试匹配 <code>yes-pattern</code> ，否则就尝试匹配 <code>no-pattern</code>（<code>no-pattern</code> 可选，可以被忽略）。</p>
</li>
</ul>
<hr>
<h3 id="普通字符" data-numberify>\\+普通字符<a class="anchor ms-1" href="#普通字符"></a></h3>
<p><code>\</code> + （ASCII 数字或字母）：</p>
<table>
<thead>
<tr>
<th><strong>序列</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\number</code></td>
<td>匹配数字代表的组合。每个正则表达式中的括号是一个组合，组合从 <code>1</code> 开始编号。<br> 如：<code>(.+) \1</code> 匹配 <code>'the the'</code> 或者 <code>'55 55'</code>。<br> 这个特殊序列只能用于匹配前面 99 个组合。<br> 如果 <code>number</code> 的第一个数位是 0， 或者 <code>number</code> 是三个八进制数，它将不会被看作是一个组合，而是八进制的数字值。</td>
</tr>
<tr>
<td><code>\A</code></td>
<td>只匹配字符串开始。</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>（单词边界定位符）匹配空字符串，但只在单词开始或结尾的位置。<br> 在字符集合内表示退格（如 <code>[\b]</code>）。</td>
</tr>
<tr>
<td><code>\B</code></td>
<td>（非单词边界定位符）匹配空字符串，但不能在词的开头或者结尾。</td>
</tr>
<tr>
<td><code>\d</code></td>
<td>对于 Unicode（str）样式：<br> 匹配任何 Unicode 十进制数（就是在 Unicode 字符目录 [Nd] 里的字符，包括了 <code>[0-9]</code> ，和很多其他的数字字符）。如果设置了 <code>ASCII</code> 标志，就只匹配 <code>[0-9]</code> 。<br> 对于8位（bytes）样式：<br> 匹配任何十进制数（<code>[0-9]</code>）。</td>
</tr>
<tr>
<td><code>\D</code></td>
<td>匹配任何非十进制数字的字符（<code>\d</code> 取非）。<br> 如果设置了 <code>ASCII</code> 标志，就相当于 <code>[^0-9]</code> 。</td>
</tr>
<tr>
<td><code>\s</code></td>
<td>对于 Unicode（str）样式：<br> 匹配任何 Unicode 空白字符（包括 <code>[ \t\n\r\f\v]</code> ，还有很多其他字符，比如不同语言排版规则约定的不换行空格）。如果 <code>ASCII</code> 被设置，就只匹配 <code>[ \t\n\r\f\v]</code> 。<br>对于8位（bytes）样式：<br> 匹配ASCII中的空白字符（<code>[ \t\n\r\f\v]</code>） 。</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配任何非空白字符（<code>\s</code> 取非）。<br> 如果设置了 <code>ASCII</code> 标志，就相当于 <code>[^ \t\n\r\f\v]</code> 。</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>对于 Unicode（str）样式：<br> 匹配 Unicode 词语的字符，包含了可以构成词语的绝大部分字符，也包括数字和下划线。如果设置了 <code>ASCII</code> 标志，就只匹配 <code>[a-zA-Z0-9_]</code> 。<br>对于8位（bytes）样式：<br> 匹配 ASCII 字符中的数字和字母和下划线，就是 <code>[a-zA-Z0-9_]</code> 。如果设置了 <code>LOCALE</code> 标记，就匹配当前语言区域的数字和字母和下划线。</td>
</tr>
<tr>
<td><code>\W</code></td>
<td>匹配非单词字符的字符（与 <code>\w</code> 正相反）。<br> 如果使用了 <code>ASCII</code> 标志，就等价于 <code>[^a-zA-Z0-9_]</code>。<br>如果使用了 <code>LOCALE</code> 标志，则会匹配当前区域中既非字母数字也非下划线的字符。</td>
</tr>
<tr>
<td><code>\Z</code></td>
<td>只匹配字符串尾。<br>如果普通字符不是 ASCII 数位或者 ASCII 字母，那么正则样式将匹配第二个字符（如，<code>\$</code> 匹配字符 <code>'$'</code>）。</td>
</tr>
</tbody>
</table>
<p>绝大部分 Python 的标准转义字符也被正则表达式分析器支持：</p>
<pre tabindex="0"><code class="language-纯文本" data-lang="纯文本">\a      \b      \f      \n
\N      \r      \t      \u
\U      \v      \x      \\
</code></pre><p><code>'\u'</code>、<code>'\U'</code> 和 <code>'\N'</code> 转义序列只在 Unicode 模式中可被识别。 在 bytes 模式中它们会导致错误。未知的 ASCII 字母转义序列保留在未来使用，会被当作错误来处理。</p>
<p>八进制转义包含为一个有限形式。如果首位数字是 0， 或者有三个八进制数位，那么就认为它是八进制转义。其他的情况，就看作是组引用。对于字符串文本，八进制转义最多有三个数位长。</p>
<hr>
<h1 id="re-模块" data-numberify>re 模块<a class="anchor ms-1" href="#re-模块"></a></h1>
<p>Python 的 <code>re</code> 模块提供了与 Perl 语言类似的正则表达式匹配操作。</p>
<hr>
<h2 id="函数" data-numberify>函数<a class="anchor ms-1" href="#函数"></a></h2>
<h3 id="匹配一项" data-numberify>匹配一项<a class="anchor ms-1" href="#匹配一项"></a></h3>
<p>在 <code>re</code> 模块中，有三个函数用于查找并返回一个匹配对象：</p>
<ol>
<li>
<p><code>re.match()</code> —— 返回一个从字符串的起始位置匹配的对象。</p>
</li>
<li>
<p><code>re.search()</code> —— 返回整个字符串中任意位置第一个成功的匹配。</p>
</li>
<li>
<p><code>re.fullmatch()</code> —— 整个字符串与正则表达式完全匹配。</p>
</li>
</ol>
<hr>
<h4 id="match-函数" data-numberify>match() 函数<a class="anchor ms-1" href="#match-函数"></a></h4>
<p><code>re.match()</code> 尝试从字符串的起始位置匹配一个模式，其语法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">re</span><span class="o">.</span><span class="k">match</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span></code></pre></div><p>参数：</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pattern</code></td>
<td>匹配的正则表达式。</td>
</tr>
<tr>
<td><code>string</code></td>
<td>要匹配的字符串。</td>
</tr>
<tr>
<td><code>flags</code></td>
<td>标志位，用于控制正则表达式的匹配方式。</td>
</tr>
</tbody>
</table>
<p>返回值：</p>
<p>匹配成功，<code>re.match()</code> 函数返回一个匹配对象（<code>Match</code>）；否则返回 <code>None</code>。</p>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="k">match</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="s1">&#39;abcdefg&#39;</span><span class="p">)</span>  <span class="c1"># 在起始位置匹配</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">_sre</span><span class="o">.</span><span class="n">SRE_Match</span> <span class="nb">object</span><span class="p">;</span> <span class="n">span</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="k">match</span><span class="o">=</span><span class="s1">&#39;abc&#39;</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="k">match</span><span class="p">(</span><span class="s1">&#39;efg&#39;</span><span class="p">,</span> <span class="s1">&#39;abcdefg&#39;</span><span class="p">)</span>  <span class="c1"># 不在起始位置匹配</span>
</span></span><span class="line"><span class="cl"><span class="kc">None</span>
</span></span></code></pre></div><hr>
<h4 id="search-函数" data-numberify>search() 函数<a class="anchor ms-1" href="#search-函数"></a></h4>
<p><code>re.search()</code> 扫描整个字符串并返回第一个成功的匹配，其语法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span></code></pre></div><p>参数用法与 <code>re.match()</code> 类似。匹配成功，<code>re.search()</code> 方法返回一个匹配对象（<code>Match</code>）；否则返回 <code>None</code>。</p>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="s1">&#39;abcdefg&#39;</span><span class="p">)</span>  <span class="c1"># 在起始位置匹配</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">_sre</span><span class="o">.</span><span class="n">SRE_Match</span> <span class="nb">object</span><span class="p">;</span> <span class="n">span</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="k">match</span><span class="o">=</span><span class="s1">&#39;abc&#39;</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;efg&#39;</span><span class="p">,</span> <span class="s1">&#39;abcdefg&#39;</span><span class="p">)</span>  <span class="c1"># 不在起始位置匹配</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">_sre</span><span class="o">.</span><span class="n">SRE_Match</span> <span class="nb">object</span><span class="p">;</span> <span class="n">span</span><span class="o">=</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span> <span class="k">match</span><span class="o">=</span><span class="s1">&#39;efg&#39;</span><span class="o">&gt;</span>
</span></span></code></pre></div><hr>
<h4 id="fullmatch-函数" data-numberify>fullmatch() 函数<a class="anchor ms-1" href="#fullmatch-函数"></a></h4>
<p><code>fullmatch()</code> 将整个字符串与正则表达式匹配，其语法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">re</span><span class="o">.</span><span class="n">fullmatch</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span></code></pre></div><p>参数用法与 <code>re.match()</code> 类似。如果 <code>string</code> 与 <code>pattern</code> 完全匹配，那么返回一个匹配对象（<code>Match</code>）；否则返回 <code>None</code>。</p>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">fullmatch</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="s1">&#39;abcdefg&#39;</span><span class="p">)</span>    <span class="c1"># 在起始位置匹配</span>
</span></span><span class="line"><span class="cl"><span class="kc">None</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">fullmatch</span><span class="p">(</span><span class="s1">&#39;abcdefg&#39;</span><span class="p">,</span> <span class="s1">&#39;abcdefg&#39;</span><span class="p">)</span>  <span class="c1"># 匹配整个字符串</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">_sre</span><span class="o">.</span><span class="n">SRE_Match</span> <span class="nb">object</span><span class="p">;</span> <span class="n">span</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span> <span class="k">match</span><span class="o">=</span><span class="s1">&#39;abcdefg&#39;</span><span class="o">&gt;</span>
</span></span></code></pre></div><hr>
<h3 id="匹配多项" data-numberify>匹配多项<a class="anchor ms-1" href="#匹配多项"></a></h3>
<p>有两个函数用于查找并返回匹配的多个匹配对象：</p>
<ol>
<li>
<p><code>re.findall</code> —— 在字符串的任意位置匹配，并返回一个包含了所有匹配对象的列表。</p>
</li>
<li>
<p><code>re.finditer</code> —— 在字符串的任意位置匹配，并返回一个包含了所有匹配对象的迭代器。</p>
</li>
</ol>
<hr>
<h4 id="finall" data-numberify>finall()<a class="anchor ms-1" href="#finall"></a></h4>
<p><code>finall()</code> 在字符串中找到正则表达式所匹配的所有子串，其语法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span></code></pre></div><p>参数：</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pattern</code></td>
<td>匹配的正则表达式。</td>
</tr>
<tr>
<td><code>string</code></td>
<td>要匹配的字符串。</td>
</tr>
<tr>
<td><code>flags</code></td>
<td>标志位，用于控制正则表达式的匹配方式。</td>
</tr>
</tbody>
</table>
<p>返回值：</p>
<p>返回一个列表，包含了所有匹配对象；如果没有任何匹配项，则返回空列表。</p>
<hr>
<h4 id="finditer" data-numberify>finditer()<a class="anchor ms-1" href="#finditer"></a></h4>
<p>与 <code>finall()</code> 类似，其语法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">re</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span></code></pre></div><p>该函数返回的是迭代器。</p>
<p>如果可能存在大量的匹配项的话，建议使用 <code>finditer()</code>。</p>
<hr>
<h3 id="split-正则分割" data-numberify>split() 正则分割<a class="anchor ms-1" href="#split-正则分割"></a></h3>
<p><code>re.split()</code> 按照能够匹配的子串对字符串进行分割，其语法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">string</span><span class="p">[,</span> <span class="n">maxsplit</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">])</span>
</span></span></code></pre></div><p>参数：</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pattern</code></td>
<td>匹配的正则表达式。</td>
</tr>
<tr>
<td><code>string</code></td>
<td>要匹配的字符串。</td>
</tr>
<tr>
<td><code>maxsplit</code></td>
<td>最大分割次数，<code>maxsplit=1</code> 分割一次，默认为 <code>0</code>，不限制次数。</td>
</tr>
<tr>
<td><code>flags</code></td>
<td>标志位，用于控制正则表达式的匹配方式。</td>
</tr>
</tbody>
</table>
<p>返回值：</p>
<p>返回一个用 <code>patterm</code> 模式匹配的字符分割的字符串列表。如果查找不到任何匹配，则返回一个仅包含 <code>string</code> 的列表。</p>
<p><code>str</code> 模块下也有一个 <code>split()</code> 函数，但它并不支持正则分割。</p>
<hr>
<h3 id="替换" data-numberify>替换<a class="anchor ms-1" href="#替换"></a></h3>
<p>有两个替换函数：<code>re.sub()</code> 和 <code>re.subn()</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">repl</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">re</span><span class="o">.</span><span class="n">subn</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">repl</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span></code></pre></div><p>参数：</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pattern</code></td>
<td>匹配的正则表达式。</td>
</tr>
<tr>
<td><code>repl</code></td>
<td>替换内容，可以是字符串，也可以是函数。如果 <code>repl</code> 为函数，只能有一个匹配对象作为参数。</td>
</tr>
<tr>
<td><code>string</code></td>
<td>要匹配的字符串。</td>
</tr>
<tr>
<td><code>count</code></td>
<td>最大替换次数。</td>
</tr>
<tr>
<td><code>flags</code></td>
<td>标志位，用于控制正则表达式的匹配方式。</td>
</tr>
</tbody>
</table>
<p><code>repl</code> 替换掉 <code>string</code> 中被 <code>pattern</code> 匹配的字符。</p>
<p>返回值：</p>
<p><code>re.sub()</code> 返回一个替换后的字符串。如果 <code>string</code> 中没有任何匹配项，则返回 <code>string</code>。</p>
<p><code>re.subn()</code> 返回一个元组，包含了替换后的字符串和替换次数：<code>(str, n)</code>。</p>
<hr>
<h3 id="excape-转义函数" data-numberify>excape() 转义函数<a class="anchor ms-1" href="#excape-转义函数"></a></h3>
<p><code>re.exvape()</code> 函数可以转义参数 <code>pattern</code> 中的特殊字符。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">re</span><span class="o">.</span><span class="n">exvape</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span>
</span></span></code></pre></div><p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="s1">&#39;http://www.python.org&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span>\<span class="o">.</span><span class="n">python</span>\<span class="o">.</span><span class="n">org</span>
</span></span></code></pre></div><p>Python3.3：<code>_</code> 不再被转义。</p>
<p>Python3.7：只有在正则表达式中具有特殊含义的字符才会被转义。 因此， <code>!</code>、<code>&quot;</code>、<code>%</code>、<code>'</code>、<code>,</code>、<code>/</code>、<code>:</code>、<code>;</code>&lt;&rsquo;、<code>=</code>&gt;&rsquo;、<code>@</code> 和 ` 将不再会被转义。</p>
<p>使用 <code>re.exvape()</code> 函数很容易出现转义错误的问题，所以并不建议使用它转义。</p>
<hr>
<h3 id="purge-清除正则表达式缓存" data-numberify>purge() 清除正则表达式缓存<a class="anchor ms-1" href="#purge-清除正则表达式缓存"></a></h3>
<p><code>re.purge()</code> 用于清除正则表达式的缓存。它没有参数，没有返回值。</p>
<hr>
<h2 id="regexflag-标志常量" data-numberify>RegexFlag 标志常量<a class="anchor ms-1" href="#regexflag-标志常量"></a></h2>
<ul>
<li>
<p>re.ASCII：</p>
<ul>
<li>
<p>简写：<code>re.A</code>。</p>
</li>
<li>
<p>让 <code>\w</code>, <code>\W</code>, <code>\b</code>, <code>\B</code>, <code>\d</code>, <code>\D</code>, <code>\s</code> 和 <code>\S</code> 只匹配 ASCII 编码支持的字符，而不是 Unicode。这只对 Unicode 样式（Python3 默认）有效，会被 byte 样式忽略。</p>
</li>
<li>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;\w+&#39;</span><span class="p">,</span> <span class="s1">&#39;中文字符和ASCII&#39;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">A</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">_sre</span><span class="o">.</span><span class="n">SRE_Match</span> <span class="nb">object</span><span class="p">;</span> <span class="n">span</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="k">match</span><span class="o">=</span><span class="s1">&#39;ASCII&#39;</span><span class="o">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>对应内联标记：<code>(?a)</code> 。</p>
</li>
</ul>
</li>
<li>
<p>re.DEBUG：</p>
<ul>
<li>
<p>显示编译时的 debug 信息，没有内联标记。</p>
</li>
<li>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;.*&#39;</span><span class="p">,</span> <span class="s1">&#39;显示debug信息&#39;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">MAX_REPEAT</span> <span class="mi">0</span> <span class="n">MAXREPEAT</span>
</span></span><span class="line"><span class="cl">  <span class="n">ANY</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">_sre</span><span class="o">.</span><span class="n">SRE_Match</span> <span class="nb">object</span><span class="p">;</span> <span class="n">span</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">),</span> <span class="k">match</span><span class="o">=</span><span class="s1">&#39;显示debug信息&#39;</span><span class="o">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>对应内联标记：<code>(?i)</code> 。</p>
</li>
</ul>
</li>
<li>
<p>re.IGNORECASE：</p>
<ul>
<li>
<p>简写：<code>re.I</code>。</p>
</li>
<li>
<p>进行忽略大小写匹配。</p>
</li>
<li>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;[a-z]&#39;</span><span class="p">,</span> <span class="s1">&#39;大写字母：ABCDE 小写字母：abcde&#39;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">I</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">]</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>re.LOCALE：</p>
<ul>
<li>
<p>简写：<code>re.L</code>。</p>
</li>
<li>
<p>语言依赖，由当前语言区域决定 <code>\w</code>, <code>\W</code>, <code>\b</code>, <code>\B</code> 和大小写敏感匹配。这个标记只能对 byte 样式有效。这个标记官方并不推荐使用，因为语言区域机制很不可靠，它一次只能处理一个 “习惯”，而且只对 8 位字节有效。</p>
</li>
<li>
<p>对应内联标记：<code>(?L)</code> 。</p>
</li>
</ul>
</li>
<li>
<p>re.MULTILINE：</p>
<ul>
<li>
<p>简写：<code>re.M</code>。</p>
</li>
<li>
<p>多行模式，样式字符 <code>'^'</code> 匹配每一个行开始（字符串的开始和换行符后紧跟的符号）；样式字符 <code>'$'</code> 匹配每一个行结尾（字符串结尾和换行符前面的符号）。</p>
<p>默认情况下不支持换行符特性，<code>'^'</code> 匹配字符串开始，<code>'$'</code> 匹配字符串结尾。</p>
</li>
<li>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^.*$&#39;</span><span class="p">,</span> <span class="s1">&#39;第1行</span><span class="se">\n</span><span class="s1">第2行</span><span class="se">\n</span><span class="s1">第3行&#39;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">M</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;第1行&#39;</span><span class="p">,</span> <span class="s1">&#39;第2行&#39;</span><span class="p">,</span> <span class="s1">&#39;第3行&#39;</span><span class="p">]</span>
</span></span></code></pre></div></li>
<li>
<p>对应内联标记：<code>(?m)</code>。</p>
</li>
</ul>
</li>
<li>
<p>re.DOTALL：</p>
<ul>
<li>
<p>简写：<code>re.S</code>。</p>
</li>
<li>
<p>让 <code>'.'</code> 特殊字符匹配全部字符，包括换行符。</p>
<p>默认情况下，<code>'.'</code> 仅匹配除了换行符的其他任意字符。</p>
</li>
<li>
<p>对应内联标记：<code>(?s)</code> 。</p>
</li>
</ul>
</li>
<li>
<p>re.VERBOSE：</p>
<ul>
<li>
<p>简写：<code>re.X</code>。</p>
</li>
<li>
<p>冗长模式，允许在正则表达式中换行和添加注释。
该模式下空白符号会被忽略，除非在一个字符集合中或者由反斜杠转义，或者在 <code>*?</code>、<code>(?:</code>、<code>(?P&lt;…&gt;</code> 分组之内。
当一个行内有 <code>#</code> 不在字符集和转义序列，那么它之后的所有字符都是注释。</p>
</li>
<li>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;&#39;&#39;\d +  # the integral part
</span></span></span><span class="line"><span class="cl"><span class="s1">...               \.    # the decimal point
</span></span></span><span class="line"><span class="cl"><span class="s1">...               \d *  # some fractional digits&#39;&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>           <span class="s1">&#39;圆周率：3.14&#39;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">X</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">_sre</span><span class="o">.</span><span class="n">SRE_Match</span> <span class="nb">object</span><span class="p">;</span> <span class="n">span</span><span class="o">=</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="k">match</span><span class="o">=</span><span class="s1">&#39;3.14&#39;</span><span class="o">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>对应内联标记：<code>(?x)</code> 。</p>
</li>
</ul>
</li>
<li>
<p>re.UNICODE：</p>
<ul>
<li>
<p>简写：<code>re.U</code>。</p>
</li>
<li>
<p>匹配 Unicode 编码支持的字符，是 Python3 默认的字符串模式。虽然保留着，但对 Python3 来说是个冗余的常量。</p>
</li>
</ul>
</li>
<li>
<p>re.TEMPLATE：</p>
<ul>
<li>
<p>简写：<code>re.T</code>。</p>
</li>
<li>
<p><code>re</code> 模块的源码是这样描述该常量的（官方文档中并没有具体的描述）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">TEMPLATE</span> <span class="o">=</span> <span class="n">T</span> <span class="o">=</span> <span class="n">sre_compile</span><span class="o">.</span><span class="n">SRE_FLAG_TEMPLATE</span> <span class="c1"># disable backtracking</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<hr>
<h2 id="正则对象-pattern" data-numberify>正则对象 Pattern<a class="anchor ms-1" href="#正则对象-pattern"></a></h2>
<p>使用 <code>compile()</code> 和 <code>template()</code> 可以将正则表达式编译为正则表达式对象（Pattern，正则对象）。</p>
<p><code>re.compile()</code> 的语法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span></code></pre></div><table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pattern</code></td>
<td>要转化为正则对象的正则表达式。</td>
</tr>
<tr>
<td><code>flags</code></td>
<td>标志位，用于控制正则表达式的匹配方式。 可以通过位的 OR（<code>'|'</code>）操作来结合多个模式。</td>
</tr>
</tbody>
</table>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">pattern_obj</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">pattern_obj</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;abcdefg&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">_sre</span><span class="o">.</span><span class="n">SRE_Match</span> <span class="nb">object</span><span class="p">;</span> <span class="n">span</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="k">match</span><span class="o">=</span><span class="s1">&#39;abc&#39;</span><span class="o">&gt;</span>
</span></span></code></pre></div><p>使用正则对象和函数：</p>
<ol>
<li>
<p>正则对象和函数是一致的。</p>
<p>模块的底层实现中，<code>re.compile()</code> 与其他 <code>re</code> 函数内部调用的是同一个函数 <code>re._compile()</code>。</p>
</li>
<li>
<p>如果需要多次使用某个正则表达式的话，使用 <code>re.compile()</code> 和保存这个正则对象以便复用，可以让程序更加高效。通过 <code>re.compile()</code> 编译后的样式，和模块级的函数会被缓存。</p>
</li>
</ol>
<hr>
<h3 id="正则对象方法" data-numberify>正则对象方法<a class="anchor ms-1" href="#正则对象方法"></a></h3>
<p>正则对象支持以下方法：</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Pattern.search(string[, pos[, endpos]])</code></td>
<td>扫描整个 <code>string</code> 寻找第一个匹配的位置， 并返回一个相应的匹配对象（<code>Match</code>）。如果没有匹配，就返回 <code>None</code>。<br><code>pos</code> —— 字符串中开始搜索的位置索引，默认为 <code>0</code>，它不完全等价于字符串切片。<code>^</code> 样式字符匹配行开头，但不会匹配索引规定开始的位置。<br><code>endpos</code> —— 字符串搜索的结束。只有从 <code>pos</code> 到 <code>endpos - 1</code> 的字符会被匹配。<br>如果 <code>endpos</code> 小于 <code>pos</code>，就不会有匹配产生。<br>pattern_obj.search(string, 0, 50)<code>等价于</code>pattern_obj.search(string[:50], 0)`。</td>
</tr>
<tr>
<td><code>Pattern.match(string[, pos[, endpos]])</code></td>
<td>如果 <code>string</code> 的开始位置能够找到这个正则样式 <code>Pattern</code> 的任意个匹配，就返回一个相应的匹配对象（<code>Match</code>）。如果不匹配，就返回 <code>None</code>。<br>可选参数 <code>pos</code> 和 <code>endpos</code> 指定 <code>string</code> 的查找范围，与 <code>Pattern.search()</code> 含义相同。</td>
</tr>
<tr>
<td><code>Pattern.fullmatch(string[, pos[, endpos]])</code></td>
<td>如果整个 <code>string</code> 匹配这个正则表达式，就返回一个相应的匹配对象（<code>Match</code>）。如果不匹配，就返回 <code>None</code>。<br>可选参数 <code>pos</code> 和 <code>endpos</code> 指定 <code>string</code> 的查找范围。</td>
</tr>
<tr>
<td><code>Pattern.findall(string[, pos[, endpos]])</code></td>
<td>类似 <code>re.findall()</code>，使用了编译后样式，在 <code>string</code> 中找到 <code>Pattern</code> 所匹配的所有子串，以列表形式返回所有匹配项。<br>可选参数 <code>pos</code> 和 <code>endpos</code> 指定 <code>string</code> 的查找范围。</td>
</tr>
<tr>
<td><code>Pattern.finditer(string[, pos[, endpos]])</code></td>
<td>类似函数 <code>finiter()</code> ， 使用了编译后样式，在 <code>string</code> 中找到 <code>Pattern</code> 所匹配的所有子串，以迭代器形式返回所有匹配项。<br>可选参数 <code>pos</code> 和 <code>endpos</code> 指定 <code>string</code> 的查找范围。</td>
</tr>
<tr>
<td><code>Pattern.split(string, maxsplit=0)</code></td>
<td>等价于 <code>split()</code> 函数，使用了编译后的样式，按照能够匹配的子串对字符串进行分割。<br> <code>maxsplit</code> —— 最大分割次数。</td>
</tr>
<tr>
<td><code>Pattern.sub(repl, string, count=0)</code></td>
<td>等价于 <code>sub()</code> 函数，使用了编译后的样式，使用 <code>repl</code> 替换掉 <code>string</code> 中被 <code>Pattern</code> 匹配的字符。<br><code>count</code> —— 最大替换次数。<br>返回一个替换后的字符串。如果 <code>string</code> 中没有任何匹配项，则返回 <code>string</code>。</td>
</tr>
<tr>
<td><code>Pattern.subn(repl, string, count=0)</code></td>
<td>等价于 <code>subn()</code> 函数，使用了编译后的样式，使用 <code>repl</code> 替换掉 <code>string</code> 中被 <code>Pattern</code> 匹配的字符。<br><code>count</code> —— 最大替换次数。<br>返回一个元组，包含了替换后的字符串和替换次数。</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="正则对象属性" data-numberify>正则对象属性<a class="anchor ms-1" href="#正则对象属性"></a></h3>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Pattern.flags</code></td>
<td>正则匹配标记。<br>可以传递给 <code>compile()</code> 的参数。任何 <code>(?…)</code> 内联标记，隐性标记（<code>re.U</code>）的结合。</td>
</tr>
<tr>
<td><code>Pattern.groups</code></td>
<td>捕获到的模式串中组的数量。</td>
</tr>
<tr>
<td><code>Pattern.groupindex</code></td>
<td>映射由 <code>(?P&lt;id&gt;)</code> 定义的命名符号组合和数字组合的字典。如果没有符号组，那字典就是空的。</td>
</tr>
<tr>
<td><code>Pattern.pattern</code></td>
<td>编译对象的原始样式字符串。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="匹配对象" data-numberify>匹配对象<a class="anchor ms-1" href="#匹配对象"></a></h2>
<p>匹配对象（Match）是调用 <code>re</code> 模块中的函数或方法匹配后返回的对象。</p>
<p>匹配对象总是有一个布尔值 <code>True</code>。如果没有匹配的话 <code>re.match()</code> 和 <code>re.search()</code> 返回 <code>None</code>。可以简单的用 <code>if</code> 语句来判断是否匹配：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">if</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;abc&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">if</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;abc&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span> <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span><span class="p">(</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="kc">False</span>
</span></span></code></pre></div><hr>
<h3 id="匹配对象方法" data-numberify>匹配对象方法<a class="anchor ms-1" href="#匹配对象方法"></a></h3>
<p>匹配对象支持以下方法：</p>
<ul>
<li>
<p><code>Match.expand(template)</code>：</p>
<ul>
<li>对 <code>template</code> 进行反斜杠（<code>'\'</code>）转义替换并且返回。</li>
</ul>
</li>
<li>
<p><code>Match.group([group1, ...])</code>：</p>
<ul>
<li>
<p>返回一个或者多个匹配的子组。</p>
</li>
<li>
<p>如果只有一个参数，结果就是一个字符串；
如果有多个参数，结果就是一个元组（每个参数对应一个项）；
如果没有参数，<code>group1</code> 默认为 <code>0</code>（整个匹配都被返回）。</p>
</li>
<li>
<p>如果一个 <code>groupN</code> 参数值为 <code>0</code>，相应的返回值就是整个匹配字符串；
如果它是一个范围 [1..99]，结果就是相应的括号组字符串。</p>
</li>
<li>
<p>如果一个组号是负数，或者大于样式中定义的组数，会抛出一个 <code>IndexError</code>。</p>
</li>
<li>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="k">match</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;(\w+) (\w+)&#39;</span><span class="p">,</span> <span class="s1">&#39;Python PHP Java C++&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">()</span>    <span class="c1"># 返回整个匹配</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;Python PHP&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>    <span class="c1"># 返回第一个括号组</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;Python&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c1"># 返回第二个括号组</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;PHP&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1"># 多个参数返回一个元组</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s1">&#39;Python&#39;</span><span class="p">,</span> <span class="s1">&#39;PHP&#39;</span><span class="p">)</span>
</span></span></code></pre></div></li>
<li>
<p>如果正则表达式使用了 <code>(?P&lt;name&gt;…)</code> 语法， <code>groupN</code> 参数可以是索引值，也可以是组名。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="k">match</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;(?P&lt;name_1&gt;\w+) (?P&lt;name_2&gt;\w+)&#39;</span><span class="p">,</span> <span class="s1">&#39;Python PHP&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s1">&#39;name_1&#39;</span><span class="p">,</span> <span class="s1">&#39;name_2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s1">&#39;Python&#39;</span><span class="p">,</span> <span class="s1">&#39;PHP&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s1">&#39;Python&#39;</span><span class="p">,</span> <span class="s1">&#39;PHP&#39;</span><span class="p">)</span>
</span></span></code></pre></div></li>
<li>
<p>如果一个组包含在样式的一部分，并被匹配多次，就返回最后一个匹配。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="k">match</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;(..)+&#39;</span><span class="p">,</span> <span class="s1">&#39;a1b2c3&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;c3&#39;</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><code>Match.getitem(g)</code>：</p>
<ul>
<li>
<p>Python3.6 新增功能。</p>
</li>
<li>
<p>等价于 <code>m.group(g)</code>，允许更方便地引用一个匹配。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="k">match</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;(?P&lt;name_1&gt;\w+) (?P&lt;name_2&gt;\w+)&#39;</span><span class="p">,</span> <span class="s1">&#39;Python PHP&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;Python PHP&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;Python&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;PHP&#39;</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><code>Match.groups(default=None)</code>：</p>
<ul>
<li>
<p>返回一个元组，包含所有匹配的子组，在样式中出现的从 1 到任意多的组合。<code>default</code> 参数用于不参与匹配的情况，默认为 <code>None</code>。</p>
</li>
<li>
<p>Example：
使小数部分可选，那么不是所有的组都会参与到匹配当中。这些组合默认会返回一个 <code>None</code> ，除非指定了 <code>default</code> 参数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="k">match</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;(\d+)\.(\d+)&#39;</span><span class="p">,</span> <span class="s1">&#39;3.14&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="o">.</span><span class="n">groups</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s1">&#39;3&#39;</span><span class="p">,</span> <span class="s1">&#39;14&#39;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="k">match</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;(\d+)\.?(\d+)?&#34;</span><span class="p">,</span> <span class="s1">&#39;3&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="o">.</span><span class="n">groups</span><span class="p">()</span>    <span class="c1"># 第二个子组默认为 None</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s1">&#39;3&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="o">.</span><span class="n">groups</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="p">)</span>  <span class="c1"># 第二个子组被设置为指定的默认值 &#39;0&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s1">&#39;3&#39;</span><span class="p">,</span> <span class="s1">&#39;0&#39;</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><code>Match.groupdict(default=None)</code>：</p>
<ul>
<li>
<p>返回一个字典，包含了所有的命名子组。key 就是组名。 <code>default</code> 参数用于不参与匹配的组合；默认为 <code>None</code>。</p>
</li>
<li>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="k">match</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;(?P&lt;name_1&gt;\w+) (?P&lt;name_2&gt;\w+)&#39;</span><span class="p">,</span> <span class="s1">&#39;Python PHP&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="o">.</span><span class="n">groupdict</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="s1">&#39;name_1&#39;</span><span class="p">:</span> <span class="s1">&#39;Python&#39;</span><span class="p">,</span> <span class="s1">&#39;name_2&#39;</span><span class="p">:</span> <span class="s1">&#39;PHP&#39;</span><span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><code>Match.start([group])</code> 和 <code>Match.end([group])</code>：</p>
<ul>
<li>
<p>返回 <code>group</code> 匹配到的字串在原字符串的开始和结束索引。<code>group</code> 默认为 <code>0</code>（意思是整个匹配的子串）。如果 <code>group</code> 存在，但未产生匹配，就返回 <code>-1</code> 。</p>
</li>
<li>
<p>从 email 地址中移除掉 <code>remove_this</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">email</span> <span class="o">=</span> <span class="s2">&#34;tony@tiremove_thisger.net&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&#34;remove_this&#34;</span><span class="p">,</span> <span class="n">email</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">email</span><span class="p">[:</span><span class="n">m</span><span class="o">.</span><span class="n">start</span><span class="p">()]</span> <span class="o">+</span> <span class="n">email</span><span class="p">[</span><span class="n">m</span><span class="o">.</span><span class="n">end</span><span class="p">():]</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;tony@tiger.net&#39;</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><code>Match.span([group])</code>：</p>
<ul>
<li>对于一个匹配 <code>m</code> ， 返回一个二元组 <code>(m.start(group), m.end(group))</code> 。
如果 <code>group</code> 没有在这个匹配中，就返回 <code>(-1, -1)</code> 。
<code>group</code> 默认为 <code>0</code>，就是整个匹配。</li>
</ul>
</li>
</ul>
<hr>
]]></content:encoded>
    </item>
    
    <item>
      <title>vbs 后台运行 bat</title>
      <link>/blog/2022/01/vbs-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-bat/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022/01/vbs-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-bat/</guid>
      <description><![CDATA[假设有三个 bat 程序需要后台运行（称为 A.bat、B.bat、C.bat）： Set ws = CreateObject(&#34;Wscript.Shell&#34;) ws.run &#34;cmd /c A.bat&#34;,0 ws.run &#34;cmd /c B.bat&#34;,0 ws.run &#34;cmd /c C.bat&#34;,0]]></description>
      <content:encoded><![CDATA[<p>假设有三个 bat 程序需要后台运行（称为 <code>A.bat</code>、<code>B.bat</code>、<code>C.bat</code>）：</p>
<pre tabindex="0"><code class="language-vbs" data-lang="vbs">Set ws = CreateObject(&#34;Wscript.Shell&#34;)
ws.run &#34;cmd /c A.bat&#34;,0
ws.run &#34;cmd /c B.bat&#34;,0
ws.run &#34;cmd /c C.bat&#34;,0
</code></pre>]]></content:encoded>
    </item>
    
    <item>
      <title>经典排序算法</title>
      <link>/blog/2022/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description><![CDATA[冒泡排序 冒泡排序（Bubble Sort）是一种简单直观的排序算法。 这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 时间复]]></description>
      <content:encoded><![CDATA[<h1 id="冒泡排序" data-numberify>冒泡排序<a class="anchor ms-1" href="#冒泡排序"></a></h1>
<p>冒泡排序（Bubble Sort）是一种简单直观的排序算法。</p>
<p>这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<p>时间复杂度：$O(n^2)$</p>
<h2 id="算法步骤" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤"></a></h2>
<p>假设一个序列长度为n，m（m≤n）是已排序完成的在末尾的数。</p>
<ol>
<li>
<p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p>
</li>
<li>
<p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。对比结束后，最后的元素会是最大的数。</p>
</li>
<li>
<p>对接下来n-m个未排序的数重复步骤1和2，直到没有任何一对数字需要比较。</p>
<p>第一趟对序列中所有n个数进行比对，第二趟对序列中n-1个未排序完成的数进行比对，以此类推。每次比对的数为n-m。</p>
</li>
</ol>
<p>动画演示：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1662172310783.gif" loading="lazy" width="826" height="257" />
</picture>

</p>
<h2 id="代码实现" data-numberify>代码实现<a class="anchor ms-1" href="#代码实现"></a></h2>
<h3 id="python实现" data-numberify>Python实现<a class="anchor ms-1" href="#python实现"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">bubbleSort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">arr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">bubbleSort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="c实现" data-numberify>C实现<a class="anchor ms-1" href="#c实现"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">bubbleSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">bubbleSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="优化算法" data-numberify>优化算法<a class="anchor ms-1" href="#优化算法"></a></h2>
<h3 id="有序标志" data-numberify>有序标志<a class="anchor ms-1" href="#有序标志"></a></h3>
<p>冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说并没有什么太大作用。</p>
<ul>
<li>
<p>Python实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">bubbleSort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 有序flag，初始为True</span>
</span></span><span class="line"><span class="cl">        <span class="n">isSorted</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># 发生交换，序列定为无序</span>
</span></span><span class="line"><span class="cl">                <span class="n">isSorted</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 序列有序，停止循环</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">isSorted</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">arr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">bubbleSort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span></code></pre></div></li>
<li>
<p>C实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdbool.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">bubbleSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 有序flag，初始为True
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">bool</span> <span class="n">isSorted</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">^</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">^</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">^</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 发生交换，序列定为无序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">isSorted</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 序列有序，停止循环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">isSorted</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">bubbleSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="数列有序区" data-numberify>数列有序区<a class="anchor ms-1" href="#数列有序区"></a></h3>
<p>通常，有序区的长度和排序的轮数是相等的。如，第一轮排序后的有序区长度是1，第二轮排序后是2 ……</p>
<p>但实际上，数列的有序区长度可能会大于这个长度，并且每轮增加的有序区长度也不一定仅为1。</p>
<p>该优化算法解决了这个问题，通过在每一轮排序的最后，记录下最后一次元素交换的位置（该位置也就是无序数列的边界，再往后就是有序区），而每轮的交换只要交换到无序区边界。</p>
<ul>
<li>
<p>Python实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">bubbleSort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 无序数列的边界</span>
</span></span><span class="line"><span class="cl">    <span class="n">sortBorder</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 有序flag，初始为True</span>
</span></span><span class="line"><span class="cl">        <span class="n">isSorted</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 每次仅需交换到无序区边界</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sortBorder</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># 把无序数列的边界更新为最后一次交换元素的位置</span>
</span></span><span class="line"><span class="cl">                <span class="n">sortBorder</span> <span class="o">=</span> <span class="n">j</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># 发生交换，序列定为无序</span>
</span></span><span class="line"><span class="cl">                <span class="n">isSorted</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 序列有序，停止循环</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">isSorted</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">arr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">89</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">bubbleSort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span></code></pre></div></li>
<li>
<p>C实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdbool.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">bubbleSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sortBorder</span> <span class="o">=</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 有序flag，初始为True
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">bool</span> <span class="n">isSorted</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">^</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">^</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">^</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 把无序数列的边界更新为最后一次交换元素的位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">sortBorder</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 发生交换，序列定为无序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">isSorted</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 序列有序，停止循环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">isSorted</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">bubbleSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="选择排序" data-numberify>选择排序<a class="anchor ms-1" href="#选择排序"></a></h1>
<p>选择排序（Selection Sort）是一种简单直观的排序算法，无论什么数据进去都是 $O(n²)$ 的时间复杂度。</p>
<h2 id="算法步骤-1" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤-1"></a></h2>
<ol>
<li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li>
<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>
<li>重复步骤2，直到所有元素均排序完毕。</li>
</ol>
<p>动画演示：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1662172350447.gif" loading="lazy" width="811" height="248" />
</picture>

</p>
<h2 id="代码实现-1" data-numberify>代码实现<a class="anchor ms-1" href="#代码实现-1"></a></h2>
<h3 id="python实现-1" data-numberify>Python实现<a class="anchor ms-1" href="#python实现-1"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">selectionSort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 记录最小数的索引</span>
</span></span><span class="line"><span class="cl">        <span class="n">minIndex</span> <span class="o">=</span> <span class="n">i</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">minIndex</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">minIndex</span> <span class="o">=</span> <span class="n">j</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># i 不是最小数时，将 i 和最小数进行交换</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">minIndex</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">minIndex</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">minIndex</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">arr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="n">selectionSort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="c实现-1" data-numberify>C实现<a class="anchor ms-1" href="#c实现-1"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">selectionSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>     <span class="c1">// 走访未排序的元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 找到最小值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">min</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                <span class="n">min</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// i 不是最小数时，将 i 和最小数进行交换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">min</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">min</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="p">[</span><span class="n">min</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">selectionSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="插入排序" data-numberify>插入排序<a class="anchor ms-1" href="#插入排序"></a></h1>
<p>插入排序（Insertion Sort）是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
<p>插入排序的有一种优化算法，叫做拆半插入。</p>
<h2 id="算法步骤-2" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤-2"></a></h2>
<p>假设序列的长度为$n$，其待排序序列第一个元素的位置为$m$（$1 \le m \le n$，元素位置从0开始）。</p>
<ol>
<li>
<p>将元素$m$与已排序序列中的每个元素进行比较。如果已排序元素比元素$m$大，将元素$m$中比已排序序列大的元素往后移，直到前面没有比元素$m$大的元素（或前面已经没有元素）。将元素m插入。</p>
<p>如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。</p>
</li>
<li>
<p>从头到尾依次扫描未排序序列，直到没有未排序元素。</p>
</li>
</ol>
<p>动画演示：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1662172376035.gif" loading="lazy" width="811" height="505" />
</picture>

</p>
<h2 id="代码实现-2" data-numberify>代码实现<a class="anchor ms-1" href="#代码实现-2"></a></h2>
<h3 id="python实现-2" data-numberify>Python实现<a class="anchor ms-1" href="#python实现-2"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">insertionSort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">preIndex</span> <span class="o">=</span> <span class="n">i</span>
</span></span><span class="line"><span class="cl">        <span class="n">current</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 找出要插入的位置</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">preIndex</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">arr</span><span class="p">[</span><span class="n">preIndex</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">current</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 将比current大的元素往后移</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="p">[</span><span class="n">preIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">preIndex</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">preIndex</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 将current插入到适当的位置</span>
</span></span><span class="line"><span class="cl">        <span class="n">arr</span><span class="p">[</span><span class="n">preIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">current</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">arr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">insertionSort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="c实现-2" data-numberify>C实现<a class="anchor ms-1" href="#c实现-2"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">insertionSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">current</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">current</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">current</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">insertionSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="希尔排序" data-numberify>希尔排序<a class="anchor ms-1" href="#希尔排序"></a></h1>
<h2 id="算法步骤-3" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤-3"></a></h2>
<p>希尔排序（Shell Sort），也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。</p>
<p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>
<ul>
<li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li>
<li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位。</li>
</ul>
<p>希尔排序的基本思想是：先将整个待排序的增量序列根据增量分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p>
<h2 id="算法步骤-4" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤-4"></a></h2>
<ol>
<li>选择一个增量序列$t_1,t_2,&hellip;,t_k$，其中$t_i &lt; t_{i-1}(1 \le i \le k),t_k = 1$；</li>
<li>按增量序列个数$k$，对序列进行$k$趟排序；</li>
<li>每趟排序，根据对应的增量$t_i$，将待排序列分割成若干长度为$t_i$的子序列，分别对各子表进行直接插入排序。仅增量因子为$1$时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
</ol>
<p>动画演示：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1662172408969.gif" loading="lazy" width="277" height="344" />
</picture>

</p>
<p>详细过程（引用自博客：<a href="https://blog.csdn.net/weixin_43715360/article/details/120140579" title="一个很懒的人" target="_blank" rel="noopener noreferrer">一个很懒的人<i class="fas fa-external-link-square-alt ms-1"></i></a>）：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/ff8014a4eddb45289d60ec4552cf2ea8.png" loading="lazy" width="1328" height="869" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/9ad210308fdd44f9931f5717561db7aa.png" loading="lazy" width="1117" height="419" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/82e279c4fccb459ca4119d6385657eb6.png" loading="lazy" width="1206" height="200" />
</picture>

</p>
<h2 id="代码实现-3" data-numberify>代码实现<a class="anchor ms-1" href="#代码实现-3"></a></h2>
<h3 id="python实现-3" data-numberify>Python实现<a class="anchor ms-1" href="#python实现-3"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">shellSort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 将增量d初始化为len(arr)//2</span>
</span></span><span class="line"><span class="cl">    <span class="n">d</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">d</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 分别用插入排序排序每个以d为增量的分组</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">            <span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">d</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">tmp</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="n">d</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">j</span> <span class="o">-=</span> <span class="n">d</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="n">d</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 每次将增量d缩小1/2</span>
</span></span><span class="line"><span class="cl">        <span class="n">d</span> <span class="o">//=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">arr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">shellSort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="c实现-3" data-numberify>C实现<a class="anchor ms-1" href="#c实现-3"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">shellSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将增量d初始化为len/2，每次将增量d缩小1/2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">len</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span> <span class="n">d</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">d</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 分别用插入排序排序每个以d为增量的分组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">d</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">tmp</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span> <span class="n">j</span> <span class="o">-=</span> <span class="n">d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="n">d</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="n">d</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">shellSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="归并排序" data-numberify>归并排序<a class="anchor ms-1" href="#归并排序"></a></h1>
<p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p>
<p>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p>
<ol>
<li>自上而下的递归；</li>
<li>自下而上的迭代。</li>
</ol>
<h2 id="算法步骤-5" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤-5"></a></h2>
<ol>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>
<li>重复步骤 3 直到某一指针达到序列尾；将另一序列剩下的所有元素直接复制到合并序列尾。</li>
</ol>
<p>动画演示：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1662172440073.gif" loading="lazy" width="811" height="505" />
</picture>

</p>
<p>图片演示：</p>
<ol>
<li>
<p>递归演示：</p>
<p><picture><img class="img-fluid " alt="" src="https://www.runoob.com/wp-content/uploads/2019/05/1557906108-5066-20161218163120151-452283750.png" loading="lazy" />
</picture>

</p>
</li>
<li>
<p>合并演示：</p>
<p><picture><img class="img-fluid " alt="" src="https://www.runoob.com/wp-content/uploads/2019/05/1557906108-2034-20161218194508761-468169540.png" loading="lazy" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="https://www.runoob.com/wp-content/uploads/2019/05/1557906108-7614-20161218194621308-588010220.png" loading="lazy" />
</picture>

</p>
</li>
</ol>
<h2 id="代码实现-4" data-numberify>代码实现<a class="anchor ms-1" href="#代码实现-4"></a></h2>
<h3 id="python-实现" data-numberify>Python 实现<a class="anchor ms-1" href="#python-实现"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 结束递归</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">arr</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 计算中间位置下标</span>
</span></span><span class="line"><span class="cl">    <span class="n">middle</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 将序列切分为两半</span>
</span></span><span class="line"><span class="cl">    <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[:</span><span class="n">middle</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">middle</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 进行归并排序</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">merge</span><span class="p">(</span><span class="n">mergeSort</span><span class="p">(</span><span class="n">left</span><span class="p">),</span> <span class="n">mergeSort</span><span class="p">(</span><span class="n">right</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">left</span> <span class="ow">and</span> <span class="n">right</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># 将较小的元素放在前面</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">left</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">right</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 将某一序列中剩下的元素全部放入</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">left</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">left</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">right</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">right</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="n">mergeSort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="c实现-4" data-numberify>C实现<a class="anchor ms-1" href="#c实现-4"></a></h3>
<p>非递归实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">min</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="o">?</span> <span class="nl">x</span> <span class="p">:</span> <span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="n">arr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">*</span> <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="n">len</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 分为约log_2(len)次
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">seg</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">seg</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">seg</span> <span class="o">+=</span> <span class="n">seg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 每次对下标区间为[low,high)的子序列进行归并排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">start</span> <span class="o">+=</span> <span class="n">seg</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 当前排序区间：[low,high)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="n">start</span><span class="p">,</span> <span class="n">mid</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">seg</span><span class="p">,</span> <span class="n">len</span><span class="p">),</span> 
</span></span><span class="line"><span class="cl">                <span class="n">high</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">seg</span> <span class="o">*</span> <span class="mi">2</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 第1段：[low,mid)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">start1</span> <span class="o">=</span> <span class="n">low</span><span class="p">,</span> <span class="n">end1</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 第2段：[mid,high)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">start2</span> <span class="o">=</span> <span class="n">mid</span><span class="p">,</span> <span class="n">end2</span> <span class="o">=</span> <span class="n">high</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 对子序列进行归并排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">low</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 将两个序列中较小的放在前面
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">while</span> <span class="p">(</span><span class="n">start1</span> <span class="o">&lt;</span> <span class="n">end1</span> <span class="o">&amp;&amp;</span> <span class="n">start2</span> <span class="o">&lt;</span> <span class="n">end2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">start1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">start2</span><span class="p">]</span> <span class="o">?</span> <span class="n">a</span><span class="p">[</span><span class="n">start1</span><span class="o">++</span><span class="p">]</span> <span class="o">:</span> <span class="n">a</span><span class="p">[</span><span class="n">start2</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 将某一序列中剩下的元素全部放入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">while</span> <span class="p">(</span><span class="n">start1</span> <span class="o">&lt;</span> <span class="n">end1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">start1</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="p">(</span><span class="n">start2</span> <span class="o">&lt;</span> <span class="n">end2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">start2</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span><span class="o">*</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">b</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">!=</span> <span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">free</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">mergeSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>递归实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">merge_sort_recursive</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">reg</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 结束递归
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">start</span> <span class="o">&gt;=</span> <span class="n">end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 当前排序区间：[start,end]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">,</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 第1段：[start,mid]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">start1</span> <span class="o">=</span> <span class="n">start</span><span class="p">,</span> <span class="n">end1</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 第2段：[mid+1,end]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">start2</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end2</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对第1段进行递归地排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">merge_sort_recursive</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">reg</span><span class="p">,</span> <span class="n">start1</span><span class="p">,</span> <span class="n">end1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对第2段进行递归地排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">merge_sort_recursive</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">reg</span><span class="p">,</span> <span class="n">start2</span><span class="p">,</span> <span class="n">end2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">start1</span> <span class="o">&lt;=</span> <span class="n">end1</span> <span class="o">&amp;&amp;</span> <span class="n">start2</span> <span class="o">&lt;=</span> <span class="n">end2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">reg</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">start1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">start2</span><span class="p">]</span> <span class="o">?</span> <span class="n">arr</span><span class="p">[</span><span class="n">start1</span><span class="o">++</span><span class="p">]</span> <span class="o">:</span> <span class="n">arr</span><span class="p">[</span><span class="n">start2</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">start1</span> <span class="o">&lt;=</span> <span class="n">end1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">reg</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">start1</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">start2</span> <span class="o">&lt;=</span> <span class="n">end2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">reg</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">start2</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">reg</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">*</span> <span class="n">reg</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="n">len</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="nf">merge_sort_recursive</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">reg</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">mergeSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="快速排序" data-numberify>快速排序<a class="anchor ms-1" href="#快速排序"></a></h1>
<p>快速排序在平均状况下，排序$n$个项目是$O(n\log {n})$。最坏运行情况是$O(n^2)$，但这种状况并不常见，比如说数列为顺序数列的情况下。一般，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p>
<p>事实上，快速排序通常明显比其他$O(n\log {n})$算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p>
<p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。</p>
<p>本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p>
<h2 id="算法步骤-6" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤-6"></a></h2>
<ol>
<li>从序列中选择一个元素作为“基准”（pivot）。</li>
<li>将所有比基准数小的放在基准左边，所有比基准数大的放在基准右边（相同的数可以在任一边）。这个称为分区（partition）操作。</li>
<li>分区完成后，该基准就会归到序列中的相应位置，该位置是排序完成后的位置。</li>
<li>分别递归地把小于基准数的子序列（左边）和大于基准数的子序列（右边）执行1~3操作。</li>
</ol>
<p>动画演示：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1662172485719.gif" loading="lazy" width="811" height="252" />
</picture>

</p>
<h2 id="代码实现-5" data-numberify>代码实现<a class="anchor ms-1" href="#代码实现-5"></a></h2>
<h3 id="python实现-4" data-numberify>Python实现<a class="anchor ms-1" href="#python实现-4"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 设置基准</span>
</span></span><span class="line"><span class="cl">    <span class="n">pivot</span> <span class="o">=</span> <span class="n">left</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 索引从基准的下一个元素开始</span>
</span></span><span class="line"><span class="cl">    <span class="n">index</span> <span class="o">=</span> <span class="n">pivot</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 遍历:[index,right]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 将小于基准值的元素全部放到左边</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">pivot</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 将基准归位</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 此时index位置上的是比基准值大的元素</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 或者等于right+1</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 即1&lt;=index&lt;=right+1</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 只有index-1才是基准真正的位置</span>
</span></span><span class="line"><span class="cl">    <span class="n">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">pivot</span><span class="p">,</span> <span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">index</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 设定参数值</span>
</span></span><span class="line"><span class="cl">    <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">))</span> <span class="k">else</span> <span class="n">left</span>
</span></span><span class="line"><span class="cl">    <span class="n">right</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">if</span> <span class="ow">not</span> \
</span></span><span class="line"><span class="cl">        <span class="nb">isinstance</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">))</span> <span class="k">else</span> <span class="n">right</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 先进行“治”操作并取得分区索引</span>
</span></span><span class="line"><span class="cl">        <span class="n">partitionIndex</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 分别对左右两个分区递归地进行快速排序</span>
</span></span><span class="line"><span class="cl">        <span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">partitionIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">partitionIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">arr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="c实现-5" data-numberify>C实现<a class="anchor ms-1" href="#c实现-5"></a></h3>
<p>递归实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">quick_sort_recursive</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">start</span> <span class="o">&gt;=</span> <span class="n">end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置基准
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">start</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">start</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 先从右边起找出比基准小的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">pivot</span> <span class="o">&amp;&amp;</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">right</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 把比基准小的放到基准左边
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">arr</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">right</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 再从左边起找出比基准大的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">pivot</span> <span class="o">&amp;&amp;</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">left</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 把比基准大的放到基准右边
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">arr</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">left</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将基准归位
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">arr</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivot</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 分别递归地排序左右两个分区
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">quick_sort_recursive</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">left</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">quick_sort_recursive</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">quickSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">quick_sort_recursive</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>非递归实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 范围
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_stack</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Range</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 申请一个新的栈元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Range</span> <span class="nf">new_Range</span><span class="p">(</span><span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Range</span> <span class="n">s</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">start</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">end</span> <span class="o">=</span> <span class="n">end</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">quickSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// s模拟栈，p为数量，r[p++]为push，r[--p]为pop0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Range</span><span class="o">*</span> <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">Range</span><span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="n">len</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Range</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 范围为[0,len-1]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">s</span><span class="p">[</span><span class="n">p</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="nf">new_Range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// pop出当前要排序的范围
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Range</span> <span class="n">range</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="o">--</span><span class="n">p</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">range</span><span class="p">.</span><span class="n">start</span> <span class="o">&gt;=</span> <span class="n">range</span><span class="p">.</span><span class="n">end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置基准
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">range</span><span class="p">.</span><span class="n">start</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">range</span><span class="p">.</span><span class="n">start</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">range</span><span class="p">.</span><span class="n">end</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 先从右边起找出比基准小的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">while</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">pivot</span> <span class="o">&amp;&amp;</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">right</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 把比基准小的放到基准左边
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">arr</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">right</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 再从左边起找出比基准大的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">while</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">pivot</span> <span class="o">&amp;&amp;</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">left</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 把比基准大的放到基准右边
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">arr</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">left</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将基准归位
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">arr</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivot</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 分别设置左右两个分区的范围
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">range</span><span class="p">.</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">left</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">s</span><span class="p">[</span><span class="n">p</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="nf">new_Range</span><span class="p">(</span><span class="n">range</span><span class="p">.</span><span class="n">start</span><span class="p">,</span> <span class="n">left</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">range</span><span class="p">.</span><span class="n">end</span> <span class="o">&gt;</span> <span class="n">left</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">s</span><span class="p">[</span><span class="n">p</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="nf">new_Range</span><span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">range</span><span class="p">.</span><span class="n">end</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">free</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="堆排序" data-numberify>堆排序<a class="anchor ms-1" href="#堆排序"></a></h1>
<p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。</p>
<p>堆积是一种近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>
<p>堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p>
<ol>
<li>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</li>
<li>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</li>
</ol>
<p>堆排序的平均时间复杂度为 Ο(nlogn)。</p>
<p>堆排序是不稳定的。</p>
<h2 id="算法步骤-7" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤-7"></a></h2>
<ol>
<li>
<p>将待排序的数组构造出一个堆 <code>H[0……n-1]</code>；</p>
</li>
<li>
<p>把堆首（堆顶结点，即最大值）和堆尾（堆的最下层最右边的结点）互换；</p>
<p>此时不再对原堆顶（最大值）进行操作，即原堆顶已经被“移出”，堆的长度缩小1。</p>
</li>
<li>
<p>把新的数组顶端数据调整到相应位置；</p>
</li>
<li>
<p>重复步骤 2~3，直到堆的尺寸为 1。</p>
</li>
</ol>
<p>动画演示：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1662172508258.gif" loading="lazy" width="547" height="364" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="https://www.runoob.com/wp-content/uploads/2019/03/Sorting_heapsort_anim.gif" loading="lazy" />
</picture>

</p>
<h2 id="代码实现-6" data-numberify>代码实现<a class="anchor ms-1" href="#代码实现-6"></a></h2>
<h3 id="python实现-5" data-numberify>Python实现<a class="anchor ms-1" href="#python实现-5"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">heapify</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="nb">len</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 子结点</span>
</span></span><span class="line"><span class="cl">    <span class="n">son</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 最大值元素位置</span>
</span></span><span class="line"><span class="cl">    <span class="n">largest</span> <span class="o">=</span> <span class="n">i</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 将最大值置为堆顶结点</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">son</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">son</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">len</span> <span class="ow">and</span> <span class="n">arr</span><span class="p">[</span><span class="n">son</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">son</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">son</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">son</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">largest</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">largest</span> <span class="o">=</span> <span class="n">son</span>
</span></span><span class="line"><span class="cl">            <span class="n">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">largest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 重新构造子堆</span>
</span></span><span class="line"><span class="cl">            <span class="n">heapify</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="nb">len</span><span class="p">,</span> <span class="n">largest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">buildMaxHeap</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># int(len(arr)/2)递减至0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">heapify</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">),</span> <span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">heapSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">global</span> <span class="n">arrLen</span>
</span></span><span class="line"><span class="cl">    <span class="n">arrLen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 构造堆</span>
</span></span><span class="line"><span class="cl">    <span class="n">buildMaxHeap</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># len(arr)-1递减至1</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 交换堆顶和最下层最右元素</span>
</span></span><span class="line"><span class="cl">        <span class="n">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 将原堆顶移出并重新调整堆</span>
</span></span><span class="line"><span class="cl">        <span class="n">heapify</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">arr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">heapSort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="c实现-6" data-numberify>C实现<a class="anchor ms-1" href="#c实现-6"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="o">*</span><span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">y</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">heapify</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 子节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">son</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 最大值元素位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将最大值置为堆顶结点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">son</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">son</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">arr</span><span class="p">[</span><span class="n">son</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">son</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">son</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">son</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">largest</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">largest</span> <span class="o">=</span> <span class="n">son</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="nf">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">largest</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 重新构造子堆
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nf">heapify</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">largest</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">buildMaxHeap</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">len</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">heapify</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">heapSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 构造堆
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">buildMaxHeap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 交换堆顶和最下层最右元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nf">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将原堆顶移出并重新调整堆
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nf">heapify</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">heapSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="计数排序" data-numberify>计数排序<a class="anchor ms-1" href="#计数排序"></a></h1>
<p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>
<p>当输入的元素是 n 个 0 到 k 之间的整数时，它的运行时间是$Θ(n + k)$。计数排序不是比较排序，排序的速度快于任何比较排序算法。</p>
<p>由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序0到100之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序中的算法来排序数据范围很大的数组。</p>
<h2 id="算法步骤-8" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤-8"></a></h2>
<ol>
<li>找出待排序的数组中最大和最小的元素。</li>
<li>统计数组中每个值为 <code>i</code>的元素出现的次数，存入数组 <code>C</code>的第 <code>i</code>项。</li>
<li>对所有的计数累加（从 <code>C</code>中的第一个元素开始，每一项和前一项相加）。</li>
<li>反向填充目标数组：将每个元素 <code>i</code>放在新数组的第 <code>C(i)</code> 项，每放一个元素就将 <code>C(i)</code> 减去 <code>1</code>。</li>
</ol>
<p>动画演示：</p>
<p><picture><img class="img-fluid " alt="" src="https://www.runoob.com/wp-content/uploads/2019/03/countingSort.gif" loading="lazy" />
</picture>

</p>
<h2 id="代码实现-7" data-numberify>代码实现<a class="anchor ms-1" href="#代码实现-7"></a></h2>
<h3 id="python实现-6" data-numberify>Python实现<a class="anchor ms-1" href="#python实现-6"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">countingSort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 找出最大值</span>
</span></span><span class="line"><span class="cl">    <span class="nb">max</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nb">max</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">max</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 构建一个长度为max+1的数组</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucket</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="nb">max</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 计数</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">bucket</span><span class="p">[</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">bucket</span><span class="p">[</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="n">bucket</span><span class="p">[</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 反向填充</span>
</span></span><span class="line"><span class="cl">    <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">bucket</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">bucket</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
</span></span><span class="line"><span class="cl">            <span class="n">bucket</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">arr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">countingSort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="c实现-7" data-numberify>C实现<a class="anchor ms-1" href="#c实现-7"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">countingSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 找出最大值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">max</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 构造和初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">bucketLen</span> <span class="o">=</span> <span class="n">max</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">*</span> <span class="n">bucket</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="n">bucketLen</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">bucketLen</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">bucket</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1">// 计数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">bucketLen</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">bucket</span><span class="p">[</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 反向填充
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">bucketLen</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">bucket</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">bucket</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">countingSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="桶排序" data-numberify>桶排序<a class="anchor ms-1" href="#桶排序"></a></h1>
<p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，需要做到两点：</p>
<ol>
<li>在额外空间充足的情况下，尽量增大桶的数量</li>
<li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li>
</ol>
<p>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p>
<ul>
<li>最快的情况：当输入的数据可以均匀的分配到每一个桶中。</li>
<li>最慢的情况：当输入的数据被分配到了同一个桶中。</li>
</ul>
<h2 id="算法步骤-9" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤-9"></a></h2>
<ol>
<li>
<p>将数列中的数均匀地分布到每个桶中（有时候并不是均匀分布）。</p>
</li>
<li>
<p>将每个桶中的数进行排序。</p>
<p>这里的排序可以使用桶排序也可以使用其它方法排序。</p>
</li>
<li>
<p>按照顺序将所有桶中的数据取出。</p>
</li>
</ol>
<p>图片演示：</p>
<p>将元素分布在桶中：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1662172566530.png" loading="lazy" width="311" height="131" />
</picture>

</p>
<p>元素在每个桶中排序：</p>
<p><picture><img class="img-fluid " alt="" src="/blog/2022/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1662172573696.png" loading="lazy" width="311" height="131" />
</picture>

</p>
<h2 id="代码实现-8" data-numberify>代码实现<a class="anchor ms-1" href="#代码实现-8"></a></h2>
<h3 id="python实现-7" data-numberify>Python实现<a class="anchor ms-1" href="#python实现-7"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">quick_sort</span> <span class="kn">import</span> <span class="n">quickSort</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">bucketSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">bucketsize</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">bucketsize</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">arr</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 确定最大最小值</span>
</span></span><span class="line"><span class="cl">    <span class="n">maxValue</span> <span class="o">=</span> <span class="n">minValue</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">minValue</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">minValue</span> <span class="o">=</span> <span class="n">i</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">maxValue</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">maxValue</span> <span class="o">=</span> <span class="n">i</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 桶数量</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span> <span class="o">=</span> <span class="p">(</span><span class="n">maxValue</span> <span class="o">-</span> <span class="n">minValue</span><span class="p">)</span> <span class="o">//</span> <span class="n">bucketsize</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 对应的桶</span>
</span></span><span class="line"><span class="cl">    <span class="n">buckets</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1"># 把数据放入相应的桶</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">minValue</span><span class="p">)</span> <span class="o">//</span> <span class="n">bucketsize</span>
</span></span><span class="line"><span class="cl">        <span class="n">buckets</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1"># 桶内排序并合并数据</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">buckets</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">j</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 桶排序</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># bucketSort(j, bucketsize-1)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 快速排序</span>
</span></span><span class="line"><span class="cl">            <span class="n">quickSort</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 还可以换其它方法排序</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">arr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucketSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="c实现-8" data-numberify>C实现<a class="anchor ms-1" href="#c实现-8"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">extern</span> <span class="kt">void</span> <span class="nf">quickSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_list</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">*</span> <span class="n">bucket</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">List</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">append</span><span class="p">(</span><span class="n">List</span><span class="o">*</span> <span class="n">pl</span><span class="p">,</span> <span class="kt">int</span> <span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pl</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">pl</span><span class="o">-&gt;</span><span class="n">bucket</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">pl</span><span class="o">-&gt;</span><span class="n">bucket</span><span class="p">[</span><span class="n">pl</span><span class="o">-&gt;</span><span class="n">len</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">*</span> <span class="n">tmp</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">((</span><span class="n">pl</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pl</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pl</span><span class="o">-&gt;</span><span class="n">bucket</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">tmp</span><span class="p">[</span><span class="n">pl</span><span class="o">-&gt;</span><span class="n">len</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">free</span><span class="p">(</span><span class="n">pl</span><span class="o">-&gt;</span><span class="n">bucket</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pl</span><span class="o">-&gt;</span><span class="n">bucket</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">bucketSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bucketsize</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 确定最大最小值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">min</span> <span class="o">=</span> <span class="n">max</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">min</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">max</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1">// 桶数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="p">(</span><span class="n">max</span> <span class="o">-</span> <span class="n">min</span><span class="p">)</span> <span class="o">/</span> <span class="n">bucketsize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对应的桶
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">List</span><span class="o">*</span> <span class="n">buckets</span> <span class="o">=</span> <span class="p">(</span><span class="n">List</span><span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="n">count</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">List</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">buckets</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">bucket</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">buckets</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 方案一：动态数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 把数据放入相应的桶
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">min</span><span class="p">)</span> <span class="o">/</span> <span class="n">bucketsize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">append</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buckets</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 方案二：二维数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// int* size = (int*)malloc(count * sizeof(int));
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// // 计算最大宽度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// for (int i = 0; i &lt; count; i++)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     size[i] = 0;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// for (int i = 0; i &lt; len; i++)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     size[(arr[i] - min) / bucketsize]++;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// int maxSize = 0;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// for (int i = 0; i &lt; count; i++)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     if (size[i] &gt; maxSize)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         maxSize = size[i];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// // 把数据放入相应的桶
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// for (int i = 0; i &lt; len; i++)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     int index = (arr[i] - min) / bucketsize;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     if (!buckets[index].len)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         buckets[index].bucket = (int*)malloc(maxSize * sizeof(int));
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     buckets[index].bucket[buckets[index].len++] = arr[i];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// free(size);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 桶内快排并合并数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">buckets</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nf">quickSort</span><span class="p">(</span><span class="n">buckets</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">bucket</span><span class="p">,</span> <span class="n">buckets</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">buckets</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">len</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">arr</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">buckets</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">bucket</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">+=</span> <span class="n">buckets</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">len</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="nf">free</span><span class="p">(</span><span class="n">buckets</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">bucket</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">buckets</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">bucket</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">buckets</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="nf">free</span><span class="p">(</span><span class="n">buckets</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">bucketSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="基数排序" data-numberify>基数排序<a class="anchor ms-1" href="#基数排序"></a></h1>
<p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。基数排序还可以用于其它数据类型的排序（但其本质上还是整型，如字符型）。</p>
<p>基数排序用到了桶的概念，是桶排序的扩展，它是根据键值的每位数字来分配桶。</p>
<h2 id="算法步骤-10" data-numberify>算法步骤<a class="anchor ms-1" href="#算法步骤-10"></a></h2>
<p>有两类基数排序：</p>
<ol>
<li>最低位优先法，简称LSD法：先从最低位开始排序，再对次低位排序，直到对最高位排序后得到一个有序序列；</li>
<li>最高位优先法，简称MSD法：先从最高位开始排序，再逐个对各分组按次高位进行子排序，循环直到最低位。</li>
</ol>
<blockquote>
<p>📌如果位没有数的话，补0。</p>
</blockquote>
<p>动画演示：</p>
<p><picture><img class="img-fluid " alt="LSD基数排序演示" src="https://www.runoob.com/wp-content/uploads/2019/03/radixSort.gif" loading="lazy" />
</picture>

</p>
<h2 id="代码实现-9" data-numberify>代码实现<a class="anchor ms-1" href="#代码实现-9"></a></h2>
<h3 id="python实现-8" data-numberify>Python实现<a class="anchor ms-1" href="#python实现-8"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">getBit</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">num</span> <span class="o">//</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">getMax</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">max</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nb">max</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">max</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">max</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">radixSort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">arr</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 获取最大值</span>
</span></span><span class="line"><span class="cl">    <span class="nb">max</span> <span class="o">=</span> <span class="n">getMax</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 根据最大位数排序</span>
</span></span><span class="line"><span class="cl">    <span class="n">index</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="nb">max</span> <span class="o">//</span> <span class="n">index</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 桶排序</span>
</span></span><span class="line"><span class="cl">        <span class="n">buckets</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">bit_num</span> <span class="o">=</span> <span class="n">getBit</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">buckets</span><span class="p">[</span><span class="n">bit_num</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">arr</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">buckets</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">index</span> <span class="o">*=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">arr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">radixSort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="c实现-9" data-numberify>C实现<a class="anchor ms-1" href="#c实现-9"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_list</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">*</span> <span class="n">bucket</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">List</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">append</span><span class="p">(</span><span class="n">List</span><span class="o">*</span> <span class="n">pl</span><span class="p">,</span> <span class="kt">int</span> <span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pl</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">pl</span><span class="o">-&gt;</span><span class="n">bucket</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">pl</span><span class="o">-&gt;</span><span class="n">bucket</span><span class="p">[</span><span class="n">pl</span><span class="o">-&gt;</span><span class="n">len</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">*</span> <span class="n">tmp</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">((</span><span class="n">pl</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pl</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pl</span><span class="o">-&gt;</span><span class="n">bucket</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">tmp</span><span class="p">[</span><span class="n">pl</span><span class="o">-&gt;</span><span class="n">len</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">free</span><span class="p">(</span><span class="n">pl</span><span class="o">-&gt;</span><span class="n">bucket</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pl</span><span class="o">-&gt;</span><span class="n">bucket</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">getBit</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">num</span> <span class="o">/</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">radixSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取最大值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">max</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 根据最大位数排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 方案一：动态数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">max</span> <span class="o">/</span> <span class="n">i</span><span class="p">;</span> <span class="n">i</span> <span class="o">*=</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 桶排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">List</span> <span class="n">buckets</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">}</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nf">append</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buckets</span><span class="p">[</span><span class="nf">getBit</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">i</span><span class="p">)],</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">buckets</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">buckets</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">len</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">arr</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">buckets</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">bucket</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="n">index</span> <span class="o">+=</span> <span class="n">buckets</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">len</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="nf">free</span><span class="p">(</span><span class="n">buckets</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">bucket</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">buckets</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">bucket</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">buckets</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 方案二：二维数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// for (int i = 1; max / i; i *= 10)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     // 计算最大宽度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     int size[10] = { 0 };
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     for (int j = 0; j &lt; len; j++)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         size[getBit(arr[j], i)]++;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     int maxSize = size[0];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     for (int j = 0; j &lt; 10; j++)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         if (size[j] &gt; maxSize)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//             maxSize = size[j];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     // 桶排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     List buckets[10] = { {NULL, 0} };
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     for (int j = 0; j &lt; len; j++)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         int index = getBit(arr[j], i);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         if (!buckets[index].len)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//             buckets[index].bucket = (int*)malloc(maxSize*sizeof(int));
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         buckets[index].bucket[buckets[index].len++] = arr[j];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     int index = 0;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     for (int j = 0; j &lt; 10; j++)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         if (buckets[j].len)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//             for (int k = 0; k &lt; buckets[j].len; k++)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//                 arr[index + k] = buckets[j].bucket[k];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//             index += buckets[j].len;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//             free(buckets[j].bucket);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//             buckets[j].bucket = NULL;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//             buckets[j].len = 0;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="mi">22</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">radixSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
]]></content:encoded>
    </item>
    
    <item>
      <title>SQL 语句</title>
      <link>/blog/2022/01/sql-%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022/01/sql-%E8%AF%AD%E5%8F%A5/</guid>
      <description><![CDATA[基本概念 SQL（Structured Query Language，发音为 sequal）是一种专门用来与数据库沟通的语言。通过 SQL，用户可以对数据库进]]></description>
      <content:encoded><![CDATA[<h1 id="基本概念" data-numberify>基本概念<a class="anchor ms-1" href="#基本概念"></a></h1>
<p><strong>SQL</strong>（<strong>Structured Query Language</strong>，发音为 sequal）是一种专门用来与数据库沟通的语言。通过 SQL，用户可以对数据库进行各种操作。</p>
<blockquote>
<p>标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSISQL。</p>
</blockquote>
<hr>
<h2 id="数据库" data-numberify>数据库<a class="anchor ms-1" href="#数据库"></a></h2>
<p><strong>数据库</strong>（<strong>database</strong>）是一个用于保存有组织的数据的容器或数据集合。</p>
<p>每个数据库都有唯一的标识符。</p>
<hr>
<h3 id="表" data-numberify>表<a class="anchor ms-1" href="#表"></a></h3>
<p><strong>表</strong>（<strong>table</strong>）是某种特定类型数据的结构化清单，用于存储某种特定类型的数据。</p>
<p>在同一个数据库中的每个表都有一个唯一的标识符来标识自己。因此，在同个数据库中，不能拥有两个名称相同的表，但在不同的数据库中可以使用相同的表名。</p>
<hr>
<h3 id="模式" data-numberify>模式<a class="anchor ms-1" href="#模式"></a></h3>
<p><strong>模式</strong>（<strong>schema</strong>）是一种关于数据库和表的布局及特性的信息。它是用来描述数据库中表的特性（如，存储的数据类型、数据的分解方式、各部分的信息的命名），或描述整个数据库（和其中表的关系）。</p>
<hr>
<h3 id="行和列" data-numberify>行和列<a class="anchor ms-1" href="#行和列"></a></h3>
<h4 id="列" data-numberify>列<a class="anchor ms-1" href="#列"></a></h4>
<p><strong>列</strong>（<strong>column</strong>）是表中的一个字段（即，表的组成部分）。所有的表都是由一个或多个列组成的。列存储表中的某部分信息，且这部分信息必须是同一种数据类型（<strong>datatype</strong>）。</p>
<p>数据类型限制（或允许）该列中存储的数据的种类。它还能帮助正确地分类数据，并在优化磁盘使用方面起重要的作用。</p>
<p>利用特定的列，可以对数据进行分类和过滤。所以，数据分解十分重要。</p>
<p>数据类型及其名称是 SQL 不兼容的重要原因之一。对于不同的 DBMS，大多数基本数据类型都得到了一致的支持，但许多高级数据类型却没有。</p>
<hr>
<h4 id="行" data-numberify>行<a class="anchor ms-1" href="#行"></a></h4>
<p>表中每一条记录的数据都是按<strong>行</strong>（<strong>row</strong>）存储的。</p>
<hr>
<h4 id="主键" data-numberify>主键<a class="anchor ms-1" href="#主键"></a></h4>
<p><strong>主键</strong>（<strong>primary key</strong>）是用来唯一标识表中每一行的列（如国际标准书号 ISBN 就可作为主键），可以是一列或多列。</p>
<p>满足以下条件的列即可作为主键：</p>
<ol>
<li>
<p>任意两行都不具有相同的主键值。</p>
</li>
<li>
<p>每一行都必须具有一个主键值（主键列不允许空值 NULL）。</p>
</li>
<li>
<p>主键列中的值不允许修改或更新。</p>
</li>
<li>
<p>主键值不能重用（即使某行从表中删除，它的主键依然不能赋给以后的新行）。</p>
</li>
</ol>
<p>在使用多列作为主键时，上述条件必须应用到所有列，即所有列值的组合必须是唯一的（但不同列中可以存在相同的值）。</p>
<hr>
<h2 id="关系数据库" data-numberify>关系数据库<a class="anchor ms-1" href="#关系数据库"></a></h2>
<p>关系数据库由关系表组成，而关系表的设计就是要把信息分解成多个表，一类数据一个表。各表通过某些共同的值互相关联。</p>
<p>常见的两个关系表都会有至少一个相同类型且表示相同的列，对于其中一个表，该列是这个表的主键，从而能使另一个表甚至关系数据库中的其他表通过这个主键对应到这个表中的行。</p>
<p>一个优秀的关系数据库通常具有以下优点：</p>
<ul>
<li>
<p>关系库中的每个表中的每个行的信息重复很少，减少了时间和空间的浪费。</p>
</li>
<li>
<p>如果信息有更新，仅需更新对应的表中的数据。</p>
</li>
<li>
<p>数据是一致的（没有重复的数据），使得处理数据和生成报表更简单。</p>
</li>
</ul>
<p>总结：关系数据库的<strong>可伸缩性</strong>（<strong>scale</strong>）远比非关系数据库要好。</p>
<blockquote>
<p>可伸缩是指，能够适应不断增加的工作量而不失败。</p>
</blockquote>
<hr>
<h2 id="数据库管理系统" data-numberify>数据库管理系统<a class="anchor ms-1" href="#数据库管理系统"></a></h2>
<p><strong>数据库管理系统</strong>（<strong>DataBase Management System</strong>，<strong>DBMS</strong>）是一种用于创建和操纵数据库的软件。</p>
<p>绝大多数 DBMS 都支持 ANSI SQL，但一些 DBMS 有自己的扩展。不同的 SQL 实现有自己的名称（如 Oracle 的 PL/SQL、微软 SQL Server 的 Transact-SQL 等）。</p>
<p>DBMS 可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存应用中实体的数据，一般会在数据库创建多个表，以保存程序中实体的数据。</p>
<p>数据库管理系统、数据库和表的关系：</p>
<hr>
<h2 id="sql-语句分类" data-numberify>SQL 语句分类<a class="anchor ms-1" href="#sql-语句分类"></a></h2>
<ol>
<li>
<p><strong>DDL</strong>（<strong>Data Definition Language</strong>，<strong>数据定义语言</strong>）：用来定义数据库对象：数据库，表，列等。</p>
<p>关键字：<code>create</code>、<code>drop</code>、<code>alter</code> 等。</p>
</li>
<li>
<p><strong>DML</strong>（<strong>Data Manipulation Language</strong>，<strong>数据操作语言</strong>）：用来对数据库中表的数据进行增删改。</p>
<p>关键字：<code>insert</code>、<code>delete</code>、<code>update</code> 等。</p>
</li>
<li>
<p><strong>DQL</strong>（<strong>Data Query Language</strong>，<strong>数据查询语言</strong>）：用来查询数据库中表的记录。</p>
<p>关键字：<code>select</code>、<code>where</code> 等。</p>
</li>
<li>
<p><strong>DCL</strong>（<strong>Data Control Language</strong>，<strong>数据控制语言</strong>）：用来定义数据库的访问权限和安全级别，及创建用户。</p>
<p>关键字：<code>GRANT</code>、<code>REVOKE</code> 等。</p>
</li>
</ol>
<hr>
<h2 id="sql-语法" data-numberify>SQL 语法<a class="anchor ms-1" href="#sql-语法"></a></h2>
<ul>
<li>
<p>SQL语句可以单行或多行书写，以分号结尾。</p>
</li>
<li>
<p>可使用空格和缩进来增强语句的可读性。</p>
</li>
<li>
<p>大多数数据库的 SQL 语句不区分大小写，关键字建议使用大写（可以提高运行速度）。</p>
</li>
</ul>
<hr>
<h2 id="字段" data-numberify>字段<a class="anchor ms-1" href="#字段"></a></h2>
<p><strong>字段</strong>（<strong>filed</strong>）基本上与列的意思相同，但字段这个术语通常在计算字段这种场合下使用。</p>
<hr>
<h1 id="select-语句" data-numberify>SELECT 语句<a class="anchor ms-1" href="#select-语句"></a></h1>
<p>任何 SQL 语句都是<strong>查询</strong>（<strong>query</strong>）。但此术语一般指 SELECT 语句。</p>
<hr>
<ul>
<li>
<p>检索列：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 从 tab_name 中检索出filed1, filed2 等列（字段）
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 可以检索单个列或多个列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>列的顺序是按照指令中指出的列名的顺序显示。行的顺序是按照存储在物理内存中的顺序显示。</p>
<hr>
</li>
<li>
<p>使用<strong>通配符</strong> <code>*</code> 检索表中的所有列：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 检索出 tab_name 中所有的列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>一般情况下，返回的列是按照存储在物理内存中的顺序显示的，并没有特定顺序。可能是按照数据被添加到表中的顺序显示（在没有增删数据的情况下），也可能不是（在有数据进行过更新或删除，这个顺序将会受到 DBMS 重用回收存储空间的方式的影响）。</p>
<p>使用通配符可以很方便地显示表中所有的列（包括名字未知的列），但这么做可能会降低检索速度和应用程序的性能（因为程序会检索所有表中的所有列）。</p>
</li>
</ul>
<hr>
<h2 id="all-和-distinct" data-numberify>ALL 和 DISTINCT<a class="anchor ms-1" href="#all-和-distinct"></a></h2>
<p>可以在列名前指定 <code>ALL</code>（默认）和 <code>DISTINCT</code> 关键字，它们表示：</p>
<ul>
<li>
<p><code>ALL</code> —— 列出当前指定的列的所有行。</p>
</li>
<li>
<p><code>DISTINCT</code> —— 列出由当前所有列组合的不重复的行。</p>
</li>
</ul>
<p>可以对聚集函数使用 <code>ALL</code> 和 <code>DISTINCT</code> 关键字指定。</p>
<ul>
<li>
<p><code>ALL</code> —— 默认选项，包含所有的行，对聚集函数指定 <code>ALL</code>（可忽略）表示对所有的行执行计算。</p>
</li>
<li>
<p><code>DISTINCT</code> —— 指定 <code>DISTINCT</code>，包含不重复的行。</p>
<ul>
<li>
<p>对聚集函数指定 <code>DISTINCT</code> 表示只对不重复的行进行计算。</p>
</li>
<li>
<p>使用 <code>DISTINCT</code> 必须明确指出列名，而不能使用 <code>*</code>。</p>
</li>
</ul>
</li>
</ul>
<p>列出不重复的行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1, filed2, ... 不重复
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p><code>DISTINCT</code> 作用于所有指定的列，该 SELECT 语句会返回所有不重复的 <code>filed1, filed2, ...</code> 组合的行。使用 <code>DISTINCT *</code> 可以返回由所有列组合的不重复的行。</p>
<hr>
<h2 id="限制返回的行" data-numberify>限制返回的行<a class="anchor ms-1" href="#限制返回的行"></a></h2>
<p>各 DBMS 实现并不相同：</p>
<ul>
<li>
<p>SQL Server：使用 <code>TOP</code> 关键字。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 返回前 n 行
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n 是任一正整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">TOP</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
</li>
<li>
<p>DB2：<code>FETCH FIRST n ROWS ONLY</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 返回前 n 行
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n 是任一正整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FETCH</span><span class="w"> </span><span class="k">FIRST</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="k">ROWS</span><span class="w"> </span><span class="k">ONLY</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
</li>
<li>
<p>Oracle：基于 <code>ROWNUM</code>（行计数器）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 返回前 n 行
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n 是任一正整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">ROWNUM</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
</li>
<li>
<p>MySQL、MariaDB、PostgreSQL and SQLite：使用 <code>LIMIT</code> 子句。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 返回前 n 行
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n 是任一正整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LIMIT</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 返回从第 m 行开始的前 n 行
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n 是任一正整数，m 是任一非负整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LIMIT</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="k">OFFSET</span><span class="w"> </span><span class="n">m</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>在 MySQL、MariaDB 和 SQLite 中，上条指令可简化为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 返回从第 m 行开始的前 n 行
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n 是任一正整数，m 是任一非负整数
</span></span></span><span class="line"><span class="cl"><span class="c1">-- m 指定开始的行数，n 指定返回的行数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LIMIT</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>行是从 0 开始计数。</p>
</li>
</ul>
<hr>
<h2 id="order-by-排序数据" data-numberify>ORDER BY 排序数据<a class="anchor ms-1" href="#order-by-排序数据"></a></h2>
<ol>
<li>
<p>使用 <code>ORDER BY</code> 子句取一个或多个列的名字，据此对数据进行排序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- order1, order2, ... 是排序的依据
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 该语句会先对 order1 进行排序
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 仅在具有多行相同 order1 值时，才按照 order2 排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">order1</span><span class="p">,</span><span class="w"> </span><span class="n">order2</span><span class="p">,</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div><p><code>ORDER BY</code> 子句必须是 SELECT 语句中的最后一条子句。默认是升序排序（从 A 到 Z）。</p>
<hr>
</li>
<li>
<p>按相对列位置进行排序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- n1、n2 …… 是小于或等于指定的列的总数的正整数
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n1、n2 …… 这组数中的每两个数都不相等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">n1</span><span class="p">,</span><span class="w"> </span><span class="n">n2</span><span class="p">,</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div><p>按相对位置排序的好处是不用输入列名，但有可能会造成错用列进行排序（特别是在对 SELECT 清单进行更改时）。</p>
</li>
</ol>
<p>实际列名排序和相对列位置排序可混合使用。</p>
<blockquote>
<p>📌最好的排序方式是，对冗长的列名重命名，然后使用列名进行排序。这样可以减少错误的出现。</p>
</blockquote>
<hr>
<h3 id="指定排序方向" data-numberify>指定排序方向<a class="anchor ms-1" href="#指定排序方向"></a></h3>
<p>指定排序的关键字：<code>ASC</code> —— 升序排序、<code>DESC</code> —— 降序排序。<code>ASC</code> 和 <code>DESC</code> 必须对每一列进行指定，因为它们只会对直接位于其前面的列名指定排序方式。可以对某一列指定 <code>ASC</code>（或 <code>DESC</code>）后对其它列指定 <code>DESC</code>（或 <code>ASC</code>）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- order1, order2, ... 是排序的依据，且都被指定了升序排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">order1</span><span class="w"> </span><span class="k">ASC</span><span class="p">,</span><span class="w"> </span><span class="n">order2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span></code></pre></div><ol>
<li>
<p><code>DESC</code> 关键字指定降序排序。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- order1, order2, ... 是排序的依据，且都被指定了降序排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">order1</span><span class="w"> </span><span class="k">DESC</span><span class="p">,</span><span class="w"> </span><span class="n">order2</span><span class="w"> </span><span class="k">DESC</span><span class="p">,</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>对某些列指定升序排序，对另外某些列指定升序排序。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- asc_order1, asc_order2, ... 都是指定升序排序
</span></span></span><span class="line"><span class="cl"><span class="c1">-- desc_order1, desc_order2, ... 都是指定降序排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">asc_order1</span><span class="w"> </span><span class="k">ASC</span><span class="p">,</span><span class="w"> </span><span class="n">asc_order2</span><span class="p">,</span><span class="w"> </span><span class="p">...,</span><span class="w"> </span><span class="n">desc_order1</span><span class="w"> </span><span class="k">DESC</span><span class="p">,</span><span class="w"> </span><span class="n">desc_order2</span><span class="w"> </span><span class="k">DESC</span><span class="p">,</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div></li>
</ol>
<p>大多数 DBMS 默认使用字典（dictionary）排序（即大小写字母被视为相同），但许多 DBMS 允许改变这种方式。</p>
<hr>
<h2 id="where-过滤数据" data-numberify>WHERE 过滤数据<a class="anchor ms-1" href="#where-过滤数据"></a></h2>
<p>使用 <code>WHERE</code> 子句能够根据指定的<strong>搜索条件</strong>（<strong>search criteria</strong>），检索用户需要的数据。搜索条件也被称为<strong>过滤条件</strong>（<strong>filter condition1</strong>）。</p>
<ul>
<li>
<p>检索单一条件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一列名
</span></span></span><span class="line"><span class="cl"><span class="c1">-- condition1 的类型和 n 的类型要一致
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>数据也可以在应用层进行过滤，但当 DBMS 返回的数据超出实际所需的数据时，会影响应用的性能，并且降低应用的可伸缩性，这还会造成网络宽带的浪费（服务器不得不通过网络发送多余的数据）。</p>
<hr>
</li>
<li>
<p><strong>WHERE 子句操作符</strong>（条件操作符）：</p>
<p>并非所有 DBMS 都支持所有的操作符，某些 DBMS 可能不支持个别操作符。</p>
<table>
<thead>
<tr>
<th><strong>操作符</strong></th>
<th><strong>说明</strong></th>
<th><strong>操作符</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>=</code></td>
<td>等于</td>
<td><code>&gt;</code></td>
<td>大于</td>
</tr>
<tr>
<td><code>&lt;&gt;</code> or <code>!=</code></td>
<td>不等于</td>
<td><code>&gt;=</code></td>
<td>大于等于</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>小于</td>
<td><code>!&gt;</code></td>
<td>不大于</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>小于等于</td>
<td><code>BETWEEN</code></td>
<td>范围在指定的两个值之间</td>
</tr>
<tr>
<td><code>!&lt;</code></td>
<td>不小于</td>
<td><code>IS NULL</code></td>
<td>为 NULL 的值</td>
</tr>
</tbody>
</table>
<hr>
</li>
<li>
<p>使用 <code>BETWEEN</code> 在指定范围内检索：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一列名
</span></span></span><span class="line"><span class="cl"><span class="c1">-- condition1 的类型和 n 、m 的类型要一致
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n 和 m 为低端值和高端值
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 检索时匹配的值包括 n 和 m
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w"> </span><span class="k">BETWEEN</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">m</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
</li>
<li>
<p>使用 <code>IS NULL</code> 检索空值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一列名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w"> </span><span class="k">IS</span><span class="w"> </span><span class="no">NULL</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><code>IS NOT NULL</code> 检索不为空值的行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一列名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w"> </span><span class="k">IS</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
<hr>
<h3 id="逻辑操作符" data-numberify>逻辑操作符<a class="anchor ms-1" href="#逻辑操作符"></a></h3>
<p>可以在一条 <code>WHERE</code> 子句中包含任意数量的<strong>逻辑操作符</strong>（<strong>logical operator</strong>），且允许两者结合以进行复杂、高级的过滤。</p>
<ol>
<li>
<p><code>AND</code> 操作符检索满足所有给定条件的行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition11，condition12 …… 是包含条件操作符的子句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">condition12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">AND</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div><hr>
</li>
<li>
<p><code>OR</code> 操作符检索满足任一条件的行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition11，condition12 …… 是包含条件操作符的子句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="n">condition12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">OR</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div><p>许多 DBMS 在使用 <code>OR</code> 操作符时，当第 1 个条件满足的情况下，就不再计算第 2 个条件。</p>
<hr>
</li>
<li>
<p><code>NOT</code> 操作符是否定操作符，否定跟随在其后的条件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是任意条件子句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="n">condition11</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>大多数 DBMS 允许使用 NOT 否定任何条件。</p>
</li>
</ol>
<hr>
<h3 id="in-指定条件范围" data-numberify>IN 指定条件范围<a class="anchor ms-1" href="#in-指定条件范围"></a></h3>
<p><code>IN</code> 操作符用来指定条件范围，匹配范围中指定的每个条件。<code>IN</code> 操作符后的括号中的合法值用逗号分隔。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一列
</span></span></span><span class="line"><span class="cl"><span class="c1">-- val1, val2, ... 是与 condition1 类型相同的一组合法值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="n">val1</span><span class="p">,</span><span class="w"> </span><span class="n">val2</span><span class="p">,</span><span class="w"> </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><p><code>IN</code> 操作符和 <code>OR</code> 操作符的功能类似，但在某些方面，<code>IN</code> 操作符有其优点。</p>
<ul>
<li>
<p>在有很多合法选项时，<code>IN</code> 操作符可读性更强。</p>
</li>
<li>
<p>与其他 <code>AND</code> 和 <code>OR</code> 操作符组合使用 <code>IN</code> 时，求值顺序更容易管理。</p>
</li>
<li>
<p><code>IN</code> 操作符一般比一组 <code>OR</code> 操作符执行得更快。</p>
</li>
<li>
<p><code>IN</code> 操作符可包含其他 SELECT 语句，能更动态地建立 WHERE 子句。</p>
</li>
</ul>
<hr>
<h3 id="通配符" data-numberify>通配符<a class="anchor ms-1" href="#通配符"></a></h3>
<p><strong>通配符</strong>（<strong>wildcard</strong>）是用于匹配值的一部分的特殊字符。</p>
<p><strong>搜索模式</strong>（<strong>search pattern</strong>）由字面值、通配符或两者组合构成的搜索条件。</p>
<p>利用通配符，可以创建比较特定数据的搜索模式。要使用通配符，必须在搜索子句中使用 <code>LIKE</code> 操作符。且通配符只能用于字符串。</p>
<ul>
<li>
<p>使用通配符搜索一般比其他简单搜索耗费更长的处理时间。</p>
</li>
<li>
<p>不要过度使用通配符。</p>
</li>
<li>
<p>尽量不要把通配符用在搜索模式的开始处（通配符置于开始处是最慢的）。</p>
</li>
<li>
<p>不同类型的通配符可以混合使用。</p>
</li>
</ul>
<hr>
<ol>
<li>
<p><code>%</code> 通配符：表示任何字符出现任意次数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一字符类型的列
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 该语句表示在 condition1 列中搜索以 ABC 开头的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">WHRER</span><span class="w"> </span><span class="n">condition1</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;ABC%&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>
<p>包含 <code>ABC</code> 的字符串：<code>'%ABC%'</code>；</p>
</li>
<li>
<p>以 <code>ABC</code> 结尾的字符串：<code>'ABC%'</code>；</p>
</li>
<li>
<p>以 <code>A</code> 为开头，以 <code>B</code> 为结尾的字符：<code>'A%B'</code>；</p>
</li>
<li>
<p>某些 DBMS 会用空格来填补字段内容，可能会对该搜索模式造成影响。</p>
</li>
<li>
<p>包含 <code>AB</code> 和 <code>CD</code> 的字符串：<code>'%AB%CD%'</code>；</p>
</li>
<li>
<p>……</p>
</li>
</ul>
<hr>
</li>
<li>
<p><code>_</code> 通配符：表示匹配单个任意字符。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一字符类型的列
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 该语句表示匹配以 ABC 结尾，开头为任意一个字符的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;_ABC&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
</li>
<li>
<p><code>[]</code> 通配符：用来指定一个字符集，它必须匹配指定位置的一个字符。</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一字符类型的列
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 该语句匹配以 A 或 B 其中之一与 C 的组合的字符串（仅有两个字符）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;[AB]C&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>使用 <code>^</code> 可以来否定 <code>[]</code> 定义的字符集：<code>'[^AB]'</code> —— 该模式会匹配除了 <code>A</code> 和 <code>B</code> 之外的任何一个字符。</p>
</li>
</ol>
<h3 id="子查询" data-numberify>子查询<a class="anchor ms-1" href="#子查询"></a></h3>
<p>子查询通过嵌套的<code>SELECT</code>语句，将查询结果作为值返回。</p>
<p><code>SELECT</code>可以嵌套地使用。</p>
<hr>
<h1 id="拼接" data-numberify>拼接<a class="anchor ms-1" href="#拼接"></a></h1>
<p><strong>拼接</strong>（<strong>concatenate</strong>）是指将值联结到一起（将一个值附加到另一个值）构成单个值。</p>
<ul>
<li>
<p>SQL Server 使用 <code>+</code> 号拼接：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1, filed2, filed3, ... 可以是任意同类型的字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">filed2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">filed3</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>DB2、Oracle、PostgreSQL 和 SQLite 使用 <code>||</code>：<code>filed1 || filed2 || filed3 || ...</code>。</p>
</li>
<li>
<p>MySQL 和 MariaDB 使用 <code>Concat()</code> 函数：<code>Concat(filed1, filed2, filed3, ...)</code>。</p>
</li>
</ul>
<p>某些 DBMS 会用空格填充字段，可以使用 <code>RTRIM()</code> 函数来清除这些空格。</p>
<hr>
<h1 id="as-指定别名" data-numberify>AS 指定别名<a class="anchor ms-1" href="#as-指定别名"></a></h1>
<p>使用 <code>AS</code> 关键字赋予字段或值一个<strong>别名</strong>（<strong>alias</strong>）。别名既可以是一个单词，也可以是一个字符串，字符串需用引号括起。使用别名时不应使用表中实际的列名，虽然这样做也算合法，但可能会产生模糊的错误消息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed 是一个字段或值
</span></span></span><span class="line"><span class="cl"><span class="c1">-- alias 是 filed 的别名
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 赋予别名后可以在接下来的子句中使用别名来替代这个字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="k">alias</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="k">alias</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="函数" data-numberify>函数<a class="anchor ms-1" href="#函数"></a></h1>
<h2 id="数值处理函数" data-numberify>数值处理函数<a class="anchor ms-1" href="#数值处理函数"></a></h2>
<p>数值处理函数仅处理数值数据，是最一致、最统一的函数。</p>
<p>常用的数值处理函数：</p>
<table>
<thead>
<tr>
<th><strong>Functions</strong></th>
<th><strong>Explain</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ABC()</code></td>
<td>返回一个数的绝对值。</td>
</tr>
<tr>
<td><code>COS()</code></td>
<td>返回一个角度的余弦。</td>
</tr>
<tr>
<td><code>EXP()</code></td>
<td>返回一个数的指数值。</td>
</tr>
<tr>
<td><code>PI()</code></td>
<td>返回圆周率 $\pi$ 值。</td>
</tr>
<tr>
<td><code>SIN()</code></td>
<td>返回一个角度的正弦。</td>
</tr>
<tr>
<td><code>SQRT()</code></td>
<td>返回一个数的平方根。</td>
</tr>
<tr>
<td><code>TAN()</code></td>
<td>返回一个角度的正切。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="文本处理函数" data-numberify>文本处理函数<a class="anchor ms-1" href="#文本处理函数"></a></h2>
<p>常用的文本处理函数：</p>
<table>
<thead>
<tr>
<th><strong>Functions</strong></th>
<th><strong>Explain</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>LEFT(str, num)</code></td>
<td>返回字符串 <code>str</code> 左边前 <code>num</code> 个字符。</td>
</tr>
<tr>
<td><code>LENGTH(str)</code>、
<code>DATALENGTH(str)</code>
or
<code>LEN(str)</code></td>
<td>返回字符串的长度。</td>
</tr>
<tr>
<td><code>LOWER(str)</code></td>
<td>将字符串转换为小写。</td>
</tr>
<tr>
<td><code>LTRIM(str)</code></td>
<td>去掉字符串左边的空格。</td>
</tr>
<tr>
<td><code>RIGHT(str, num)</code></td>
<td>返回字符串 <code>str</code> 右边前 <code>num</code> 个字符。</td>
</tr>
<tr>
<td><code>RTRIM(str)</code></td>
<td>去掉字符串右边的空格。</td>
</tr>
<tr>
<td><code>SUBSTR(str, n, size)</code> or <code>SUBSTRING(str, n, size)</code></td>
<td>提取字符串的组成部分。
DB2、Oracle、PostgreSQL 和 SQLite 使用 <code>SUBSTR()</code>；
MariaDB、MySQL 和 SQL Server 使用 <code>SUBSTRING()</code>。
<code>n</code> 是指字符串中第 <code>n</code> 个字符（从 1 开始计数），
<code>size</code> 是指截取的字符串长度，截取出的字符串包括第 <code>n</code> 个字符。</td>
</tr>
<tr>
<td><code>SOUNDEX(str)</code></td>
<td>返回字符串的 SOUNDEX 值（描述 <code>str</code> 语音表示的字母数字模式）。
PostgreSQL 不支持。SQLite 要开启 SQLITE_SOUNDEX 编译选项。
使用 <code>SOUNDEX()</code> 函数对两个字符串进行比较，
使得能对字符串进行发音比较而不是字母比较。
如 <code>WHERE SOUNDEX(str1) = SOUNDEX(str2)</code>。</td>
</tr>
<tr>
<td><code>UPPER(str)</code></td>
<td>将字符串转换为大写。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="日期和时间处理函数" data-numberify>日期和时间处理函数<a class="anchor ms-1" href="#日期和时间处理函数"></a></h2>
<p>日期和时间函数在 SQL 中可移植性最差。</p>
<ul>
<li>
<p>SQL Server 使用 <code>DATEPART(part, date)</code> 返回日期中的一部分，<code>part</code>（不是字符型的参数）指定要返回的成分，<code>date</code> 是要从中国年返回成分的日期。</p>
</li>
<li>
<p>PostgreSQL 使用 <code>DATE_PART(part_str, date)</code> 返回日期中的一部分，<code>part_str</code> 指定要返回的成分，<code>date</code> 是要从中国年返回成分的日期。</p>
</li>
<li>
<p>Oracle 和 PostgreSQL 都支持 <code>EXTRACT(part FROM date)</code> 返回日期中的一部分。<code>part</code>（不是字符型）指定要返回的成分，<code>date</code> 是要从中国年返回成分的日期。</p>
</li>
<li>
<p>Oracle 还支持 <code>to_date(date_str, form_str)</code> 将字符串转化成日期，<code>date_str</code> 是某个带有日期格式的字符串，<code>form_str</code> 指定日期的形式。一般这样使用：<code>WHERE date_column BETWEEN to_date('2020-01-01', 'yyyy-mm-dd') AND todate('2020-12-31', 'yyyy-mm-dd')</code>。</p>
</li>
<li>
<p>DB2、MySQL 和 MariaDB 中有 <code>YEAR(date)</code> 和 <code>MONTH(date)</code> 等函数用于提取年份和月份等信息。</p>
</li>
<li>
<p>在 SQLite 可以使用 <code>strftime('%Y', date)</code> 提取年份，也可以提取月份等。</p>
</li>
</ul>
<hr>
<p>MySQL Date 函数：</p>
<table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>NOW()</code></td>
<td>返回当前的日期和时间。</td>
</tr>
<tr>
<td><code>CURDATE()</code></td>
<td>返回当前的日期。</td>
</tr>
<tr>
<td><code>CURTIME()</code></td>
<td>返回当前的时间。</td>
</tr>
<tr>
<td><code>DATE()</code></td>
<td>提取日期或日期/时间表达式的日期部分。</td>
</tr>
<tr>
<td><code>EXTRACT()</code></td>
<td>返回日期/时间的单独部分。</td>
</tr>
<tr>
<td><code>DATE_ADD()</code></td>
<td>向日期添加指定的时间间隔。</td>
</tr>
<tr>
<td><code>DATE_SUB()</code></td>
<td>从日期减去指定的时间间隔。</td>
</tr>
<tr>
<td><code>DATEDIFF()</code></td>
<td>返回两个日期之间的天数。</td>
</tr>
<tr>
<td><code>DATE_FORMAT()</code></td>
<td>用不同的格式显示日期/时间。</td>
</tr>
</tbody>
</table>
<hr>
<p>SQL Server Date 函数：</p>
<table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>GETDATE()</code></td>
<td>返回当前的日期和时间</td>
</tr>
<tr>
<td><code>DATEPART()</code></td>
<td>返回日期/时间的单独部分</td>
</tr>
<tr>
<td><code>DATEADD()</code></td>
<td>在日期中添加或减去指定的时间间隔</td>
</tr>
<tr>
<td><code>DATEDIFF()</code></td>
<td>返回两个日期之间的时间</td>
</tr>
<tr>
<td><code>CONVERT()</code></td>
<td>用不同的格式显示日期/时间</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="汇总数据" data-numberify>汇总数据<a class="anchor ms-1" href="#汇总数据"></a></h2>
<p>使用<strong>聚集函数</strong>（<strong>aggregate function</strong>）可以对某些行进行计算并返回一个值。</p>
<p>SQL 聚集函数：</p>
<table>
<thead>
<tr>
<th><strong>Functions</strong></th>
<th>Explain</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>AVG(filed)</code></td>
<td>返回某字段的平均数，类型必须是数值类型，<code>AVG()</code> 会忽略值为 <code>NULL</code> 的行。</td>
</tr>
<tr>
<td><code>COUNT(filed)</code></td>
<td>返回某字段的行数</td>
</tr>
<tr>
<td><code>MAX(filed)</code></td>
<td>返回某字段的最大值，允许 <code>filed</code> 是日期值，许多 DBMS 还允许 <code>filed</code> 是字符串，如果 <code>filed</code> 是字符串，那么 <code>MAX()</code> 会返回按该列排序后的最后一行。<code>MAX()</code> 忽略值为 <code>NULL</code> 的行。</td>
</tr>
<tr>
<td><code>MIN(filed)</code></td>
<td>返回某字段的最小值，与 <code>MAX()</code> 类似，如果 <code>filed</code> 是字符串，那么 <code>MAX()</code> 会返回按该列排序后的最前面一行。</td>
</tr>
<tr>
<td><code>SUM(filed)</code></td>
<td>返回某列值之和，类型必须是数值类型，<code>SUM()</code> 会忽略值为 <code>NULL</code> 的行。</td>
</tr>
</tbody>
</table>
<p>Usage for Example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="k">AVG</span><span class="p">(</span><span class="n">filed</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">average</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>SELECT 语句可以根据需要包含多个聚集函数。</p>
<hr>
<h1 id="group-by-数据分组" data-numberify>GROUP BY 数据分组<a class="anchor ms-1" href="#group-by-数据分组"></a></h1>
<p><strong>分组</strong>是使用 SELECT 语句的 <code>GROUP BY</code> 子句，将数据分为多个逻辑组，对每个组进行操作。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 显示 filed1, filed2, ... 并根据它们进行分组
</span></span></span><span class="line"><span class="cl"><span class="c1">-- COUNT(*) 表示计算分组中的所有行
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 该语句是先按照 filed1 进行分组，然后再按照 filed2 进行分组
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 使用分组后输出的结果可能是根据 filed1, filed2, ... 排序好的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...,</span><span class="w"> </span><span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div><p><code>GROUP BY</code> 子句指示 DBMS 分组数据，然后对每个组（不是整个结果集）进行聚集。</p>
<p>使用 <code>GROUP BY</code> 的规定：</p>
<ul>
<li>
<p><code>GROUP BY</code> 子句可以包含任意数目的列。所以可以对分组进行嵌套，更细致地进行数据分组。</p>
</li>
<li>
<p>在建立分组后，操作的最小单位只能是分组，而无法再对个别列进行操作。</p>
</li>
<li>
<p><code>GROUP BY</code> 子句中列出的每一列都必须是检索列或有效表达式列（但不能是聚集函数）。在 SELECT 中使用表达式，则必须在 <code>GROUP BY</code> 子句中指定相同的表达式，而不能使用别名。</p>
</li>
<li>
<p>大多数 SQL 实现不允许 <code>GROUP BY</code> 列带有长度可变的数据类型（如文本或备注型字段）。</p>
</li>
<li>
<p>除聚集计算语句外，SELECT 语句中的每一列都必须在 <code>GROUP BY</code> 子句中给出。</p>
</li>
<li>
<p>分组列中所有包含具有 <code>NULL</code> 值的行，都将 <code>NULL</code> 作为一个分组返回。</p>
</li>
<li>
<p><code>GROUP BY</code> 子句必须出现在 <code>WHERE</code> 子句之后，<code>ORDER BY</code> 子句之前。</p>
</li>
</ul>
<blockquote>
<p>📌并非所有 SQL 实现都支持在使用 <code>GROUP BY</code> 子句时，使用相对位置指定列，并且使用它容易在编辑 SQL 语句时出错。</p>
</blockquote>
<hr>
<h2 id="having-过滤分组" data-numberify>HAVING 过滤分组<a class="anchor ms-1" href="#having-过滤分组"></a></h2>
<p>使用 <code>HAVING</code> 子句来过滤分组。<code>HAVING</code> 支持所有 <code>WHERE</code> 子句支持的操作符，两者的区别是 <code>WHERE</code> 仅对行进行过滤，而 <code>HAVING</code> 可以对分组进行过滤（在没有指定 <code>GROUP BY</code> 时，大多数 DBMS 会同等对待 <code>WHERE</code> 和 <code>HAVING</code>，即 <code>HAVING</code> 也可以对行进行过滤）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed_1, filed_2, ... 是聚集操作
</span></span></span><span class="line"><span class="cl"><span class="c1">-- condition1 是相对于每行的条件，condition1_ 是相对于每个分组的条件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="n">filed_1</span><span class="p">,</span><span class="w"> </span><span class="n">filed_2</span><span class="p">,</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">HAVING</span><span class="w"> </span><span class="n">condition1_</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>在同时使用 <code>WHERE</code> 和 <code>GROUP BY</code> 时，被 <code>WHERE</code> 过滤掉的行并不会包括在分组中。</p>
<hr>
<h2 id="分组和排序" data-numberify>分组和排序<a class="anchor ms-1" href="#分组和排序"></a></h2>
<p><code>ORDER BY</code> 与 <code>GROUP BY</code> 的区别</p>
<table>
<thead>
<tr>
<th><strong>ORDER BY</strong></th>
<th><strong>GROUP BY</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>对产生的输出排序</td>
<td>对行分组，但输出可能不是分组的顺序</td>
</tr>
<tr>
<td>任意列都可以使用（甚至非选择的列也可以使用，即 SELECT 没有给出的列也能使用）</td>
<td>只可能使用选择列或表达式列（SELECT 中给出的列），而且必须使用每个选择列表达式（不能使用别名）</td>
</tr>
<tr>
<td>是可选的，任何情况下都能根据需要选择是否使用</td>
<td>在使用聚集函数的情况下，
还要显示列（或表达式），则必须使用</td>
</tr>
</tbody>
</table>
<p><code>GROUP BY</code> 分组不一定是按照分组顺序输出的，所以应该提供明确的 <code>ORDER BY</code> 子句指定排序方式，以确保在任何情况下输出都能正确地排序。</p>
<hr>
<h1 id="子查询-1" data-numberify>子查询<a class="anchor ms-1" href="#子查询-1"></a></h1>
<p><strong>子查询</strong>（<strong>subquery</strong>）是指嵌套在其他查询中的查询。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 每个子查询中的 SELECT 语句有且仅有一个字段
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 在子查询中企图检索多个列将返回错误
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 理论上可以无限嵌套，但实际使用时由于性能的限制，不能嵌套太多的子查询
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                     </span><span class="k">FROM</span><span class="w"> </span><span class="n">table2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                     </span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition12</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed_2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                          </span><span class="k">FROM</span><span class="w"> </span><span class="n">table3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                          </span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition13</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(...));</span><span class="w">
</span></span></span></code></pre></div><p>在 SELECT 语句中，子查询总是从内向外处理（类似递归的处理方式）。</p>
<hr>
<h2 id="使用计算字段进行子查询" data-numberify>使用计算字段进行子查询<a class="anchor ms-1" href="#使用计算字段进行子查询"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed_1, filed_2, ... 是计算字段，是由其 AS 前的圆括号中的子查询建立的
</span></span></span><span class="line"><span class="cl"><span class="c1">-- table1._filed1 是 table1 中名为 _filed1 的列或列表达式
</span></span></span><span class="line"><span class="cl"><span class="c1">-- table2._filed1 是 table2 中名为 _filed2 的列或列表达式
</span></span></span><span class="line"><span class="cl"><span class="c1">-- table1._filed1 和 table2._filed1 是两个不同表格中同名同类型的列，并不是同一个列
</span></span></span><span class="line"><span class="cl"><span class="c1">-- table1._filed2 和 table3._filed2 的关系与 table1._filed1 和 table2._filed1 类似
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 第 1 条子查询的解释是，对所有 table2 中符合 table1._filed1 = table2._filed1 的行进行计数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">FROM</span><span class="w"> </span><span class="n">table2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">WHERE</span><span class="w"> </span><span class="n">table1</span><span class="p">.</span><span class="n">_filed1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">table2</span><span class="p">.</span><span class="n">_filed1</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">filed_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">FROM</span><span class="w"> </span><span class="n">table3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">WHERE</span><span class="w"> </span><span class="n">table1</span><span class="p">.</span><span class="n">_filed2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">table3</span><span class="p">.</span><span class="n">_filed2</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">filed_2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>计算字段用一个句点分隔表名和列名，句点前是表名，句点后是列名，即 <code>tab_name.column</code>，这种写法也叫完全限定列名。在有可能混淆列名时（如使用子查询时）必须使用这种语法。</p>
<hr>
<h1 id="join-联结表" data-numberify>JOIN 联结表<a class="anchor ms-1" href="#join-联结表"></a></h1>
<p><strong>联结</strong>（<strong>join</strong>）是一种机制，用来在一条 SELECT 语句中关联表，可以联结多个表返回一组输出。</p>
<blockquote>
<p>联结不是物理实体，它在实际的数据库表总并不存在，它仅在数据查询的执行期间存在。
对于联结，需要考虑性能，如果联结过多的表，可能会非常耗费资源，使性能下降。
SQL 本身不限制每个联结约束中表的数目，但实际上许多 DBMS 都有限制。</p>
</blockquote>
<p>联结类型：</p>
<ul>
<li>
<p>内联结（inner join）</p>
</li>
<li>
<p>外联结（outer join）</p>
</li>
<li>
<p>自联结（self-join）</p>
</li>
<li>
<p>自然联结（natural join）</p>
</li>
</ul>
<p>可以在一个 SELECT 语句中使用联结多个表，而且每个表的联结类型可以不相同。</p>
<hr>
<h2 id="inner-join-内联结" data-numberify>INNER JOIN 内联结<a class="anchor ms-1" href="#inner-join-内联结"></a></h2>
<p><strong>内联结</strong>（<strong>inner join</strong>）又称为<strong>等值联结</strong>（<strong>equijoin</strong>），是基于两个表之间的项等测试。</p>
<p>许多子查询都可以使用内联结来替代，但是子查询与联结同样需要耗费一定的资源，所以在一个语句中，不应使用过多的子查询和联结。</p>
<hr>
<ol>
<li>
<p>在 <code>FROM</code> 中指定多个列（等值联结）。</p>
<p>对于联结，需要保证所有联结都有 <code>WHERE</code> 子句，并且要保证 <code>WHERE</code> 子句的正确性。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1, filed2, ... 是存在于 table1, table2, ... 中的任意列或列表达式
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 如果在不同表中出现名称相同的列，就需要使用完全限定名来指定
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 完全限定名：tab_name.column_name
</span></span></span><span class="line"><span class="cl"><span class="c1">-- condition1s 中必须给出联结条件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="p">,</span><span class="w"> </span><span class="n">table2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1s</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>如果上述语句没有在 <code>WHERE</code> 中指出配对方式，那么 <code>table1</code> 中的每一行会与 <code>table2</code> 中的每一行进行配对，然后 <code>table1</code> 和 <code>table2</code> 已经配对完成的行会再次与 <code>table3</code> 中的每一行配对，以此类推，直到所有的表都完成了配对。这种由没有联结条件的表联结后返回的结果为<strong>笛卡尔积</strong>（<strong>cartesian product</strong>）。</p>
</li>
<li>
<p>使用 <code>INNER JOIN</code>（内联结）指定要联结的表，联结条件用特定的 <code>ON</code> 子句给出。</p>
<p>同样地，对于这种方式的联结，需要保证所有联结都有有效的 <code>ON</code> 子句。如果没有 <code>ON</code> 子句，也会出现笛卡尔积。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1, filed2, ... 是存在于 table1, table2, ... 中的任意列或列表达式
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 如果在不同表中出现名称相同的列，就需要使用完全限定名来指定
</span></span></span><span class="line"><span class="cl"><span class="c1">-- condition1 中必须给出联结条件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INNER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">table2</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">condition11</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INNER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">table3</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">condition12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INNER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 如果有其他条件的话 WHERE 子句在 INNER JOIN 之后给出
</span></span></span></code></pre></div></li>
</ol>
<p>ANSI SQL 规范首选 <code>INNER JOIN</code> 语法。</p>
<hr>
<h2 id="自联结" data-numberify>自联结<a class="anchor ms-1" href="#自联结"></a></h2>
<p><strong>自联结</strong>（<strong>self-join</strong>）是指在同一个 SELECT 语句中，多次联结同一个表。</p>
<p>对于自联结来说，由于多次引用同一个表，如果不对表起别名的话，会造成系统混乱（同一个表，表名自然相同，所以系统无法区分究竟指的是哪个表，虽然本质上都是同一个表）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T1</span><span class="p">,</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed_1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">AND</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed_2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">value</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>虽然自联结也可以用子查询替换，但对于大多数 DBMS 来说，处理联结远比处理子查询快。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">filed_1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                 </span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                 </span><span class="k">WHERE</span><span class="w"> </span><span class="n">filed_2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">value</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="自然联结" data-numberify>自然联结<a class="anchor ms-1" href="#自然联结"></a></h2>
<p><strong>自然联结</strong>（<strong>natural join</strong>）指每个含义相同的列仅出现一次的联结。自然联结一般是通过对一个表使用通配符，而对其他表的列使用明确的子集来完成。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T1</span><span class="p">,</span><span class="w"> </span><span class="n">table2</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed_1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">AND</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="outer-join-外联结" data-numberify>OUTER JOIN 外联结<a class="anchor ms-1" href="#outer-join-外联结"></a></h2>
<p><strong>外联结</strong>（<strong>outer join</strong>）是指包含无关联行的联结。通常，内联结都是将一个表格中的行与另一个表格中的行通过联结条件进行关联，此时两个表格中没有被联结条件关联起来的行将会被忽略。而外联结则会包含这些没有被联结条件所关联起来的行，并根据需要给某些列赋予 <code>NULL</code> 值。</p>
<p>外联结有三种类型：</p>
<ul>
<li>
<p><code>LEFT OUTER JOIN</code> —— 左外联结，包含左表的所有行（即 <code>FROM</code> 后面紧跟的表，示例中为 <code>T1</code>），即使在右表（示例中为 <code>T2</code>）中没有被匹配（结果为 <code>NULL</code>）。</p>
<p>基本上所有的 DBMS 都支持。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">T1</span><span class="p">,</span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">T2</span><span class="p">.</span><span class="n">filed_1</span><span class="p">,</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed_2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LEFT</span><span class="w"> </span><span class="k">OUTER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">table2</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ON</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><code>RIGHT OUTER JOIN</code> —— 右外联结，包含左表的所有行（即 <code>JOIN</code> 关键字后紧跟的表，示例中为 <code>T2</code>），即使在右表（示例中为 <code>T1</code>）中没有被匹配（结果为 <code>NULL</code>）。</p>
<p>SQLite 不支持。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">T1</span><span class="p">,</span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">T2</span><span class="p">.</span><span class="n">filed_1</span><span class="p">,</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed_2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RIGHT</span><span class="w"> </span><span class="k">OUTER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">table2</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ON</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><code>FULL OUTER JOIN</code> —— 全外联结，只要左表和右表其中一个表中存在匹配，就返回。</p>
<p>MariaDB、MySQL 和 SQLite 都不支持。</p>
</li>
</ul>
<p>左外联结和右外联结可以相互转换。</p>
<hr>
<h2 id="联结聚合函数与分组" data-numberify>联结、聚合函数与分组<a class="anchor ms-1" href="#联结聚合函数与分组"></a></h2>
<p>联结的一种用法是使用聚合函数从另一个表格中汇总数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是联结条件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="k">COUNT</span><span class="p">(</span><span class="n">T2</span><span class="p">.</span><span class="n">filed_1</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">name_filed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INNER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">table2</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T2</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">condition1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">T1</span><span class="p">,</span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div><p>对于上述语句也可以指定外联结，仅需将 <code>INNER JOIN</code> 替换成外联结的关键字。</p>
<p>使用外联结从另一个表中汇总数据，那些没有被关联的行经过 <code>COUNT()</code> 函数计算后的返回值将会为 0。</p>
<hr>
<h1 id="union-组合查询" data-numberify>UNION 组合查询<a class="anchor ms-1" href="#union-组合查询"></a></h1>
<p><strong>组合查询</strong>通常称为<strong>并</strong>（<strong>union</strong>）或<strong>符合查询</strong>（<strong>compound query</strong>）。通过组合查询可以同时执行多条 SELECT 语句，并将结果作为一个查询结果集返回。</p>
<p>需要使用组合查询的情况：</p>
<ul>
<li>
<p>在一个查询中从不同的表返回结构数据；</p>
</li>
<li>
<p>对一个表执行多个查询，按一个查询返回数据。</p>
</li>
</ul>
<blockquote>
<p>📌</p>
<ul>
<li>
<p>组合相同表的查询所完成的工作一般可以用 <code>WHERE</code> 子句替代。</p>
<p>理论上使用 <code>WHERE</code> 子句和组合查询从性能上看并没有太大差别，但各实现之间任有差别。</p>
</li>
<li>
<p>第一条 SELECT 中的列名或指定的别名作为整个组合查询的结果集的列名。因此组合查询所返回的结果集的列名是第一条 SELECT 中的列名，且在组合查询中的 <code>ORDER BY</code> 子句中指出的列名应是第一条 SELECT 中第列名。</p>
</li>
<li>
<p>每一个组合查询最多仅能有一条 <code>ORDER BY</code> 子句，且必须位于整个组合查询语句的最后（即最后一条 SELECT 语句）。</p>
<p>即，无法对某条 SELECT 指定一种排序方式，而对另一条 SELECT 指定另一种排序方式，所有的 SELECT 只能用同一种方式排序。</p>
</li>
</ul>
</blockquote>
<p>使用组合查询的规则：</p>
<ul>
<li>
<p>必须由两条或两条以上的 SELECT 语句组成，语句之间用关键字 <code>UNION</code> 分隔。</p>
</li>
<li>
<p>每个查询必须包含相同的列、表达式或聚集函数（数量必须要相同，类型必须要兼容）。</p>
</li>
</ul>
<hr>
<p>使用 <code>UNION</code> 关键字，会自动去除重复的行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1, filed2, ... 和 filed_1, filed_2, ... 数量必须相同，类型要兼容
</span></span></span><span class="line"><span class="cl"><span class="c1">-- table1 和 table2 可以是同个表格，也可以是不同的表格
</span></span></span><span class="line"><span class="cl"><span class="c1">-- ORDER BY 必须位于语句的最后
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">UNION</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed_1</span><span class="p">,</span><span class="w"> </span><span class="n">filed_2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">UNION</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">filed</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>在上述语句中，将 <code>UNION</code> 替换成 <code>UNION ALL</code>，返回的结果集将包含重复的行。</p>
<hr>
<h1 id="insert-语句" data-numberify>INSERT 语句<a class="anchor ms-1" href="#insert-语句"></a></h1>
<p>INSERT 语句用来将行插入（或添加）到数据库表。</p>
<hr>
<h2 id="插入完整的行" data-numberify>插入完整的行<a class="anchor ms-1" href="#插入完整的行"></a></h2>
<ol>
<li>
<p>简单但不保险的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="p">(</span><span class="n">value1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">value2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">value3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">...,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><p><code>VALUES</code> 后面的括号中，按照表中列的定义次序，指出了要存储到表中的数据，且必须给每一列提供一个值（在没有指定列名的情况下）。如果某列没有值，则该列应该使用 <code>NULL</code>（在允许对该列指定空值的情况下）。各列必须以它们在表定义中出现的次序填充。</p>
<p>这种语法虽然简单但并不安全，因为这种 SQL 语句高度依赖于表中列的定义次序。如果表结构发生变动，那么这样的语句并不能按照预期的情况执行。</p>
<blockquote>
<p>📌在某些 SQL 实现中，<code>INTO</code> 关键字是可选的。但为了确保可移植，还是要提供 <code>INTO</code> 关键字。</p>
</blockquote>
</li>
<li>
<p>保险但比较繁琐的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1 与 value1 对应，filed2 与 value2 对应，以此类推
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tab_name</span><span class="p">(</span><span class="n">filed1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="n">filed2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="n">filed3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="p">...)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="p">(</span><span class="n">value1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">value2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">value3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><p>这种方法需要在表名后面，使用括号将表中的所有列名指出（不用按照表中列的定义顺序）。在插入行时，VALUES 必须以其指定的次序匹配指定的列名，这样即使表结构改变，该 INSERT 语句仍能正确工作。不要使用没有明确给出列的 INSERT 语句。</p>
</li>
</ol>
<p>主键的值必须有唯一性，DBMS 不允许插入主键值重复的行。如果确实需要插入，应先删除原有的记录。</p>
<hr>
<h2 id="插入行的一部分" data-numberify>插入行的一部分<a class="anchor ms-1" href="#插入行的一部分"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1 与 value1 对应，filed2 与 value2 对应，以此类推
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tab_name</span><span class="p">(</span><span class="n">filed1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="n">filed2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="p">...)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="p">(</span><span class="n">value1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">value2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><p>同样使用表名后面的括号指定列，只不过仅需指出需要插入的部分列，并且只需给这些列提供值。</p>
<p>无论是插入完整的行还是插入行的一部分，都必须确保 <code>VALUES</code> 的数目正确。如果不提供列名，则必须给每个表列提供一个值；如果提供列名，则必须给列出的每一个列一个值。否则，就会产生错误。</p>
<p>在 <code>VALUES</code> 中没有指出的列，DBMS 将赋予它们默认值或空值。这些列必须满足：</p>
<ul>
<li>
<p>列定义为允许 <code>NULL</code> 值。</p>
</li>
<li>
<p>在表定义中给出了默认值。</p>
</li>
</ul>
<hr>
<h2 id="insert-select" data-numberify>INSERT SELECT<a class="anchor ms-1" href="#insert-select"></a></h2>
<p>INSERT 还允许利用 SELECT 语句将检索到的结果插入表中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 将 table2 中满足条件的 filed_1, filed_2, ... 列按照对应顺序插入到 table1 中
</span></span></span><span class="line"><span class="cl"><span class="c1">-- table1 和 table2 可以是同一个表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">table1</span><span class="p">(</span><span class="n">filed1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                   </span><span class="n">filed2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                   </span><span class="p">...)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed_1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">filed_2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1s</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>一般 INSERT 只插入一行。而 INSERT SELECT 可以用一条语句插入多行。</p>
<hr>
<h2 id="select-into" data-numberify>SELECT INTO<a class="anchor ms-1" href="#select-into"></a></h2>
<p><code>SELECT ... INTO</code> 用于从一个表中复制数据，然后把数据插入到另一个新表中（<code>INTO</code> 子句后指定的表，该语句执行后会自动创建）。</p>
<blockquote>
<p>📌MySQL 不支持 <code>SELECT ... INTO</code> 语句。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- INTO 后面的 IN 子句代表插入到其他数据库
</span></span></span><span class="line"><span class="cl"><span class="c1">-- IN 子句可省略，默认代表当前数据库
</span></span></span><span class="line"><span class="cl"><span class="c1">-- new_table 的表结构与 old_table 指定列 filed1, filed2, ... 的结构相同
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INTO</span><span class="w"> </span><span class="n">new_table</span><span class="w"> </span><span class="p">[</span><span class="k">IN</span><span class="w"> </span><span class="n">external_db</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">old_table</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p><code>SELECT INTO</code> 语句可以通过使用促使查询没有数据返回的 <code>WHERE</code> 子句创建一个新的空表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INTO</span><span class="w"> </span><span class="n">new_table</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">old_table</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="更新和删除数据" data-numberify>更新和删除数据<a class="anchor ms-1" href="#更新和删除数据"></a></h1>
<blockquote>
<p>在客户端或服务器的 DBMS 中，使用 UPDATE 和 DELETE 语句可能需要特殊的安全权限。</p>
</blockquote>
<hr>
<h2 id="update-语句" data-numberify>UPDATE 语句<a class="anchor ms-1" href="#update-语句"></a></h2>
<p>UPDATE 语句用于更新（修改）表中的数据。</p>
<p>有两种使用 UPDATE 语句的方式：</p>
<ol>
<li>
<p>更新表中的特定行 —— 使用 <code>WHERE</code> 子句过滤：</p>
<p>基本的 UPDATE子句由三部分组成：</p>
<ul>
<li>
<p>要更新的表 —— 使用 <code>UPDATE</code> 关键字指定；</p>
</li>
<li>
<p>列名和它们的新值 —— 使用 <code>SET</code> 关键字指定更新的内容（即使用 “列=值” 对将新值赋给被更新的列）；</p>
</li>
<li>
<p>确定要更新哪些行的过滤 —— 使用 <code>WHERE</code> 子句指定过滤条件。
在 UPDATE 中，<code>WHERE</code> 可以使用 SELECT 子查询。</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1, filed2, ... 是 tab_name 中的列
</span></span></span><span class="line"><span class="cl"><span class="c1">-- value1, value2, ... 是与 filed1, filed2, ... 相对应类型的数据
</span></span></span><span class="line"><span class="cl"><span class="c1">-- filed1 = value1, filed2 = value2, ... 是 “列=值” 对
</span></span></span><span class="line"><span class="cl"><span class="c1">-- condition1s 是过滤的条件，指定了要更新的行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">UPDATE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SET</span><span class="w"> </span><span class="n">filed1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">value1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">filed2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">value2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1s</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>更新表中的所有行 —— 不使用 <code>WHERE</code> 子句。</p>
<p>一般的 UPDATE 字句都要使用 <code>WHERE</code> 字句指定过滤条件，否则 <code>SET</code> 子句指定的更新内容将应用到所有的列。</p>
</li>
</ol>
<blockquote>
<p>📌有的 SQL 实现支持在 UPDATE 语句中使用 FROM 子句，用一个表的数据更新另一个表的行。</p>
</blockquote>
<p>使用 UPDATE 删除某个列的值：将要删除的列置为 <code>NULL</code>（假设表定义允许 <code>NULL</code>）。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">UPDATE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SET</span><span class="w"> </span><span class="n">del_filed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">NULL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1s</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="delete-语句" data-numberify>DELETE 语句<a class="anchor ms-1" href="#delete-语句"></a></h2>
<p>使用 DELETE 语句可以从一个表中删除（去掉）数据。</p>
<p>有两种使用 DELETE 语句的方式：</p>
<ul>
<li>从表中删除特定的行 —— 使用 <code>WHERE</code> 子句过滤：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1s 是过滤条件，指定了要删除的行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1s</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>从表中删除所有行 —— 不使用 <code>WHERE</code> 子句：
使用 DELETE 语句时应该指定 <code>WHERE</code> 子句，否则它将会删除表中所有的行。
如果确实想删除表中所有行，应该使用速度更快的 <code>TRUNCATE TABLE</code> 语句。</li>
</ul>
<p>DELETE 语句删除的是表中的行，即它的操作对象是行而不是列，如果想要删除列，则要使用 UPDATE 语句将该列置为 <code>NULL</code>。</p>
<hr>
<h2 id="update-和-delete-的使用准则" data-numberify>UPDATE 和 DELETE 的使用准则<a class="anchor ms-1" href="#update-和-delete-的使用准则"></a></h2>
<ul>
<li>
<p><strong>绝对不要使用不带  子句的 UPDATE 或 DELETE 子句</strong>，除非确实打算更新和删除每一行。</p>
</li>
<li>
<p><strong>应保证每个表都有主键</strong>。</p>
</li>
<li>
<p>在使用 UPDATE 或 DELETE 之前，应先用 SELETE 进行测试，确保 <code>WHERE</code> 子句过滤的是正确的记录。:</p>
</li>
<li>
<p>使用强制实施引用完整性的数据库，这样 DBMS 将不允许删除其数据与其他表相关的行。</p>
</li>
<li>
<p>如果 DBMS 允许数据库管理员施加约束，防止执行不带 <code>WHERE</code> 子句的 UPDATE 或 DELETE 子句，那么应该使用它。</p>
</li>
</ul>
<blockquote>
<p>📌如果 SQL 没有撤销（undo）按钮，应该更小心地使用 UPDATE 和 DELETE 语句。</p>
</blockquote>
<hr>
<h1 id="创建和删除数据库" data-numberify>创建和删除数据库<a class="anchor ms-1" href="#创建和删除数据库"></a></h1>
<p>创建数据库使用 <code>CREATE DATABASE</code> 语句。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="n">db_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>删除数据库使用 <code>DROP DATABASE</code> 语句。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="n">db_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>注意：删除数据库后，数据库中的所有数据（表、视图、索引等数据都将会被删除）。</p>
<hr>
<h1 id="sql-通用数据类型" data-numberify>SQL 通用数据类型<a class="anchor ms-1" href="#sql-通用数据类型"></a></h1>
<p>数据类型定义列中存放的值的种类。数据库表中的每个列都要求有名称和数据类型。SQL 开发人员必须在创建 SQL 表时决定表中的每个列将要存储的数据的类型。</p>
<p>不同的 DBMS 数据类型有些不同。有的 DBMS 允许自定义数据类型，有的不允许。</p>
<p>以下是 SQL 通用数据类型：</p>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>CHARACTER(n)</code> 或 <code>CHAR(n)</code></td>
<td>字符/字符串。固定长度 <code>n</code>。</td>
</tr>
<tr>
<td><code>VARCHAR(n)</code> 或  <code>CHARACTER VARYING(n)</code></td>
<td>字符/字符串。可变长度。最大长度 <code>n</code>。</td>
</tr>
<tr>
<td><code>BINARY(n)</code></td>
<td>二进制串。固定长度 <code>n</code>。</td>
</tr>
<tr>
<td><code>BOOLEAN</code></td>
<td>存储 <code>TRUE</code> 或 <code>FALSE</code> 值</td>
</tr>
<tr>
<td><code>VARBINARY(n) </code> 或 <code>BINARY VARYING(n)</code></td>
<td>二进制串。可变长度。最大长度 <code>n</code>。</td>
</tr>
<tr>
<td><code>INTEGER(p)</code></td>
<td>整数值（没有小数点）。精度 <code>p</code>。</td>
</tr>
<tr>
<td><code>SMALLINT</code></td>
<td>整数值（没有小数点）。精度 5。</td>
</tr>
<tr>
<td><code>INTEGER</code></td>
<td>整数值（没有小数点）。精度 10。</td>
</tr>
<tr>
<td><code>BIGINT</code></td>
<td>整数值（没有小数点）。精度 19。</td>
</tr>
<tr>
<td><code>DECIMAL(p,s)</code></td>
<td>精确数值，精度 <code>p</code>，小数点后位数 <code>s</code>。
例如：<code>DECIAML(5,2)</code> 是一个小数点前有 3 位数，小数点后有 2 位数的数字。</td>
</tr>
<tr>
<td><code>NUMERIC(p,s)</code></td>
<td>精确数值，精度 <code>p</code>，小数点后位数 <code>s</code>。（与  DECIMAL 相同）.</td>
</tr>
<tr>
<td><code>FLOAT(p)</code></td>
<td>近似数值，尾数精度 <code>p</code>。一个采用以 10 为基数的指数计数法的浮点数。该类型的 <code>size</code> 参数由一个指定最小精度的单一数字组成。</td>
</tr>
<tr>
<td><code>REAL</code></td>
<td>近似数值，尾数精度 7。</td>
</tr>
<tr>
<td><code>FLOAT</code></td>
<td>近似数值，尾数精度 16。</td>
</tr>
<tr>
<td><code>DOUBLE PRECISION</code></td>
<td>近似数值，尾数精度 16。</td>
</tr>
<tr>
<td><code>DATE</code></td>
<td>存储年、月、日的值。</td>
</tr>
<tr>
<td><code>TIME</code></td>
<td>存储小时、分、秒的值。</td>
</tr>
<tr>
<td><code>TIMESTAMP</code></td>
<td>存储年、月、日、小时、分、秒的值。</td>
</tr>
<tr>
<td><code>INTERVAL</code></td>
<td>由一些整数字段组成，代表一段时间，取决于区间的类型。</td>
</tr>
<tr>
<td><code>ARRAY</code></td>
<td>元素的固定长度的有序集合。</td>
</tr>
<tr>
<td><code>MULTISET</code></td>
<td>元素的可变长度的无序集合。</td>
</tr>
<tr>
<td><code>XML</code></td>
<td>存储 XML 数据。</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>SQL 数据类型快速参考手册</strong>：</p>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>Access</strong></th>
<th><strong>SQL Server</strong></th>
<th><strong>Oracle</strong></th>
<th><strong>MySQL</strong></th>
<th><strong>PostgreSQL</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>boolean</strong></td>
<td><code>Yes/No</code></td>
<td><code>Bit</code></td>
<td><code>Byte</code></td>
<td>N/A</td>
<td><code>Boolean</code></td>
</tr>
<tr>
<td><strong>integer</strong></td>
<td><code>Number (integer)</code></td>
<td><code>Int</code></td>
<td><code>Number</code></td>
<td><code>Int</code>、 <code>Integer</code></td>
<td><code>Int</code>、 <code>Integer</code></td>
</tr>
<tr>
<td><strong>float</strong></td>
<td><code>Number (single)</code></td>
<td><code>Float Real</code></td>
<td><code>Number</code></td>
<td><code>Float</code></td>
<td><code>Numeric</code></td>
</tr>
<tr>
<td><strong>currency</strong></td>
<td><code>Currency</code></td>
<td><code>Money</code></td>
<td>N/A</td>
<td>N/A</td>
<td><code>Money</code></td>
</tr>
<tr>
<td><strong>string (fixed)</strong></td>
<td>N/A</td>
<td><code>Char</code></td>
<td><code>Char</code></td>
<td><code>Char</code></td>
<td><code>Char</code></td>
</tr>
<tr>
<td><strong>string (variable)</strong></td>
<td>Text (&lt;256) Memo (65k+)</td>
<td><code>Varchar</code></td>
<td><code>Varchar</code>、<code>Varchar2</code></td>
<td><code>Varchar</code></td>
<td><code>Varchar</code></td>
</tr>
<tr>
<td><strong>binary object</strong></td>
<td>OLE Object Memo</td>
<td>Binary (fixed up to 8K) Varbinary (&lt;8K) Image (&lt;2GB)</td>
<td>Long Raw</td>
<td>Blob Text</td>
<td>Binary Varbinary</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="时间数据格式" data-numberify>时间数据格式<a class="anchor ms-1" href="#时间数据格式"></a></h2>
<p>MySQL 使用下列数据类型在数据库中存储日期或日期/时间值：</p>
<ul>
<li>
<p>DATE - 格式：<code>YYYY-MM-DD</code></p>
</li>
<li>
<p>DATETIME - 格式：<code>YYYY-MM-DD HH:MM:SS</code></p>
</li>
<li>
<p>TIMESTAMP - 格式：<code>YYYY-MM-DD HH:MM:SS</code></p>
</li>
<li>
<p>YEAR - 格式：<code>YYYY</code> 或 <code>YY</code></p>
</li>
</ul>
<p>SQL Server 使用下列数据类型在数据库中存储日期或日期/时间值：</p>
<ul>
<li>
<p>DATE - 格式：<code>YYYY-MM-DD</code></p>
</li>
<li>
<p>DATETIME - 格式：<code>YYYY-MM-DD HH:MM:SS</code></p>
</li>
<li>
<p>SMALLDATETIME - 格式：<code>YYYY-MM-DD HH:MM:SS</code></p>
</li>
<li>
<p>TIMESTAMP - 格式：唯一的数字</p>
</li>
</ul>
<hr>
<h1 id="创建和操纵表格" data-numberify>创建和操纵表格<a class="anchor ms-1" href="#创建和操纵表格"></a></h1>
<h2 id="create-table-创建表" data-numberify>CREATE TABLE 创建表<a class="anchor ms-1" href="#create-table-创建表"></a></h2>
<p>一般有两种创建表格的方法：</p>
<ol>
<li>
<p>使用 SQL 语句 <code>CTEATE TABLE</code> 创建表格；</p>
</li>
<li>
<p>多数 DBMS 都具有交互式创建和管理数据库表的工具。</p>
<ul>
<li>其本质是交互工具根据用户操作自动生成并执行相应的 SQL 语句。</li>
</ul>
</li>
</ol>
<blockquote>
<p>不同的 SQL 实现中，CREATE TABLE 语句的语法会有所不同（主要区别是在列定义上）。</p>
</blockquote>
<p>使用 <code>CREATE TABLE</code> 创建表，必须给出以下信息：</p>
<ul>
<li>
<p>新表的名字，在关键字 <code>CREATE TABLE</code> 之后给出；</p>
</li>
<li>
<p>表列的名字和定义，在列名后的括号中指出，用逗号分隔；</p>
</li>
<li>
<p>有的 DBMS 还要求指定表的位置。</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column_name1</span><span class="w">    </span><span class="n">DataType1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column_name2</span><span class="w">    </span><span class="n">DataType2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column_name3</span><span class="w">    </span><span class="n">DataType3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">cluumn_name4</span><span class="w">    </span><span class="n">DataType4</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>创建新表时只能指定不存在的表名，SQL 无法通过 <code>CREATE</code> 语句覆盖已有的表。</p>
<h2 id="alter-table-更新表定义" data-numberify>ALTER TABLE 更新表定义<a class="anchor ms-1" href="#alter-table-更新表定义"></a></h2>
<p>使用 ALTER TABLE 时需要考虑的事情：</p>
<ul>
<li>
<p>理想情况下，不要在表中包含数据时对表结构进行更新（特别是不要删除已有的列）。
应该在表的设计过程中充分考虑未来可能的需求，避免今后对表的结构做大改动。</p>
</li>
<li>
<p>所有的 DBMS 都允许给现有的表增加列，不过对所增加列的数据类型（以及 NULL 和 DEFAULT 的使用）有所限制。</p>
</li>
<li>
<p>许多 DBMS 不允许删除或更改表中的列。</p>
</li>
<li>
<p>多数 DBMS 允许重新命名表中的列。</p>
</li>
<li>
<p>许多 DBMS 限制对已经填有数据的列进行更改，对未填有数据的列几乎没有限制。</p>
</li>
</ul>
<p>使用 ALTER TABLE 必须给出的信息：</p>
<ul>
<li>
<p>在 ALTER TABLE 之后给出表名；</p>
</li>
<li>
<p>列出要更改表的操作。</p>
</li>
</ul>
<hr>
<ol>
<li>
<p>增加表列：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="n">filed</span><span class="w"> </span><span class="n">DataType</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>删除列：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">COLUMN</span><span class="w"> </span><span class="n">filed</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>修改列定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">COLUMN</span><span class="w"> </span><span class="k">column_name</span><span class="w"> </span><span class="n">NewDataType</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>在MySQL中使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MODIFY</span><span class="w"> </span><span class="k">column_name</span><span class="w"> </span><span class="n">NewDataType</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
</ol>
<hr>
<p>复杂的表结构更改一般需要执行以下步骤：</p>
<ol>
<li>
<p>用新的列布局创建一个新表；</p>
</li>
<li>
<p>使用 INSERT SELECT 语句从旧表复制数据到新表；</p>
</li>
<li>
<p>检验包含所需数据的新表；</p>
</li>
<li>
<p>重命名旧表（在确定无误的情况下可删除）；</p>
</li>
<li>
<p>用旧表原来的名字重命名新表；</p>
</li>
<li>
<p>根据需要，重新创建触发器、存储过程、索引和外键。</p>
</li>
</ol>
<hr>
<p>使用 ALTER TABLE 的注意事项：</p>
<ul>
<li>
<p>SQLite 对使用 ALTER TABLE 的最重要的限制是：不支持使用 ALTER TABLE 定义主键和外键，必须在最初创建表时指定。</p>
</li>
<li>
<p>在使用 ALTER TABLE 之前应先做好完整的备份（表结构和数据的备份）。</p>
</li>
<li>
<p>表结构的更改不能撤销。</p>
<ul>
<li>
<p>如果增加了不需要的列，也许无法删除它们。</p>
</li>
<li>
<p>如果删除了不应该删除的列，可能会丢失该列中的所有数据。</p>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="drop-table-删除表" data-numberify>DROP TABLE 删除表<a class="anchor ms-1" href="#drop-table-删除表"></a></h2>
<p><code>DROP TABLE</code> 语句用于删除表本身（包括表数据）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>📌删除表时，没有确认步骤，且不能撤销。</p>
</blockquote>
<blockquote>
<p>📌<strong>使用关系规则防止意外删除</strong>：</p>
<p>许多 DBMS 允许强制实施有关规则，防止删除与其他表相关联的表。在实施这些规则时，如果对某个表发布一条 <code>DORP TABLE</code> 语句，且该表是某个关系的组成部分，则 DBMS 将阻止这条语句执行，直到该关系被删除为止。</p>
</blockquote>
<hr>
<h2 id="truncate-table-删除表数据" data-numberify>TRUNCATE TABLE 删除表数据<a class="anchor ms-1" href="#truncate-table-删除表数据"></a></h2>
<p><code>TRUNCATE TABLE</code> 语句用于删除表内的数据（但并不包括表本身）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">TRUNCATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="重命名表" data-numberify>重命名表<a class="anchor ms-1" href="#重命名表"></a></h2>
<p>对于重命名表，每个 DBMS 的支持都有所不同：</p>
<ul>
<li>
<p>DB2、MariaDB、MySQL、Oracle 和 PostgreSQL 使用 <code>RENAME</code> 语句。</p>
</li>
<li>
<p>SQL Server 使用 <code>sp_rename</code> 存储过程。</p>
</li>
<li>
<p>SQLite 使用 <code>ALTER TABLE</code> 语句。</p>
</li>
</ul>
<hr>
<h1 id="sql-约束" data-numberify>SQL 约束<a class="anchor ms-1" href="#sql-约束"></a></h1>
<p>SQL <strong>约束</strong>（Constraints）用于规定表中如何插入或处理数据的规则。如果存在违反约束的数据行为，行为会被约束终止。</p>
<p>约束可以在创建表时规定（通过 <code>CREATE TABLE</code> 语句），或者在表创建之后规定（通过 <code>ALTER TABLE</code> 语句）。</p>
<p>SQL 有如下几种约束：</p>
<table>
<thead>
<tr>
<th><strong>关键字</strong></th>
<th><strong>解释</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>NULL</code></td>
<td>允许存储 NULL 值。
如果不指定 NOT NULL 或 PRIMARY KEY，则默认为 NULL。
在插入行时允许不给出该列的值。此时，会给该项指定为值 NULL。
对于 DB2，在定义允许 NULL 的列中不能指定 NULL。</td>
</tr>
<tr>
<td><code>NOT NULL</code></td>
<td>指示某列不能存储 NULL 值。
如果不向字段添加值，就无法插入新记录或者更新记录。</td>
</tr>
<tr>
<td><code>UNIQUE </code></td>
<td>唯一约束。保证某列的每行必须有唯一的值。
唯一约束可包含 NULL 值，可重复使用，但是不能用来定义外键。</td>
</tr>
<tr>
<td><code>PRIMARY KEY</code></td>
<td>主键约束。NOT NULL 和 UNIQUE 的结合。
确保某列（或多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</td>
</tr>
<tr>
<td><code>FOREIGN KEY</code></td>
<td>外键约束。保证一个表中的数据匹配另一个表中的值的参照完整性。</td>
</tr>
<tr>
<td><code>CHECK</code></td>
<td>保证列中的值符合指定的条件。</td>
</tr>
<tr>
<td><code>DEFAULT</code></td>
<td>规定没有给列赋值时的默认值。
在插入行时如果不给出值，则用默认值赋值。</td>
</tr>
</tbody>
</table>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">主键约束</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w">  </span><span class="n">Type1</span><span class="w">  </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">默认为允许</span><span class="w"> </span><span class="k">NULL</span><span class="err">，可以不用指出</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w">  </span><span class="n">Type2</span><span class="w">  </span><span class="p">[</span><span class="k">NULL</span><span class="p">],</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">不允许</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="err">的列，必须用</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="err">指出</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column3</span><span class="w">  </span><span class="n">Type3</span><span class="w">  </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">用</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="err">指定默认值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="n">default_val</span><span class="w"> </span><span class="err">是</span><span class="w"> </span><span class="n">Type4</span><span class="w"> </span><span class="err">类型的值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column4</span><span class="w">  </span><span class="n">Type4</span><span class="w">  </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w">  </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">default_val</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="not-null-非空约束" data-numberify>NOT NULL 非空约束<a class="anchor ms-1" href="#not-null-非空约束"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>添加 NOT NULL 约束：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MODIFY</span><span class="w"> </span><span class="k">column_name</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="unique-唯一约束" data-numberify>UNIQUE 唯一约束<a class="anchor ms-1" href="#unique-唯一约束"></a></h2>
<p>每个表可以有多个 UNIQUE 约束。</p>
<p>创建表时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">方法一：直接在列定义中用</span><span class="w"> </span><span class="k">UNIQUE</span><span class="w"> </span><span class="err">关键字指出</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w"> </span><span class="n">Type2</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">UNIQUE</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">方法二：定义列后使用</span><span class="w"> </span><span class="k">UNIQUE</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">UNIQUE</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w"> </span><span class="n">Type2</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">可以不用定义</span><span class="w"> </span><span class="n">u_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="p">[</span><span class="n">u_name</span><span class="p">]</span><span class="w"> </span><span class="k">UNIQUE</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="p">...)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>更新表定义时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">UNIQUE</span><span class="w"> </span><span class="p">(</span><span class="k">column_name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="err">可以省略</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">u_name</span><span class="w"> </span><span class="k">UNIQUE</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>撤销 UNIQUE 约束：</p>
<p>MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">u_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>SQL Server / Oracle / MS Access：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">u_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="primary-key-主键约束" data-numberify>PRIMARY KEY 主键约束<a class="anchor ms-1" href="#primary-key-主键约束"></a></h2>
<p>只要满足以下条件，就可以被用作主键：</p>
<ul>
<li>
<p>任意两行的主键值都不相同（主键必须包含唯一值）。</p>
</li>
<li>
<p>每行都具有一个主键值（主键列不能包含 NULL 值）。</p>
</li>
<li>
<p>包含主键值的列从不修改或更新。</p>
</li>
<li>
<p>主键值不能重用。如果从表中删除某一行，其主键值不分配给新行。</p>
</li>
</ul>
<hr>
<p>创建表时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 在列定义中直接指出主键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 通过 PRIMARY KEY () 定义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">可以不用定义</span><span class="w"> </span><span class="n">pk_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="p">[</span><span class="n">pk_name</span><span class="p">]</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="p">...)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>更新表定义时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="k">column_name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="err">可以省略</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">pk_name</span><span class="w"> </span><span class="k">UNIQUE</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>撤销 PRIMARY KEY 约束：</p>
<p>MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>SQL Server / Oracle / MS Access：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">pk_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="foreign-key-外键约束" data-numberify>FOREIGN KEY 外键约束<a class="anchor ms-1" href="#foreign-key-外键约束"></a></h2>
<p>创建表时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">方法一：使用</span><span class="w"> </span><span class="k">REFERENCES</span><span class="w"> </span><span class="err">关键字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">table1</span><span class="p">(</span><span class="n">column_1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w"> </span><span class="n">Type2</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w"> </span><span class="n">Type2</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">方法二：使用</span><span class="w"> </span><span class="k">FOREIGN</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">FOREIGN</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">column2</span><span class="p">)</span><span class="w"> </span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">table2</span><span class="p">(</span><span class="n">column_2</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">命名</span><span class="w"> </span><span class="k">FOREIGN</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="err">约束</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="p">[</span><span class="n">fk_name</span><span class="p">]</span><span class="w"> </span><span class="k">FOREIGN</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">column3</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">table3</span><span class="p">(</span><span class="n">column_3</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>更新表定义时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">FOREIGN</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">table1</span><span class="p">(</span><span class="n">column_1</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 命名 FOREIGN KEY 约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">fk_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FOREIGN</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">table1</span><span class="p">(</span><span class="n">column_1</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>撤销 FOREIGN KEY 约束：</p>
<p>MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">FOREIGN</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">fk_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>SQL Server / Oracle / MS Access：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">fk_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="check-检查约束" data-numberify>CHECK 检查约束<a class="anchor ms-1" href="#check-检查约束"></a></h2>
<p>CHECK 约束常见用途：</p>
<ul>
<li>
<p>检查最小或最大值。</p>
</li>
<li>
<p>指定范围。</p>
</li>
<li>
<p>只允许特定值。</p>
</li>
</ul>
<hr>
<p>创建表时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">限制</span><span class="w"> </span><span class="n">column1</span><span class="w"> </span><span class="err">的值大于</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w"> </span><span class="n">Type2</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">限制</span><span class="w"> </span><span class="n">column2</span><span class="w"> </span><span class="err">只能取</span><span class="w"> </span><span class="s1">&#39;Y&#39;</span><span class="w"> </span><span class="err">或</span><span class="w"> </span><span class="s1">&#39;N&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">column2</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;[YN]&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 命名 CHECK 约束，并定义多个列的 CHECK 约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w"> </span><span class="n">Type2</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">chk_name</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">column2</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;[YN]&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>修改表定义时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 命名 CHECK 约束，并定义多个列的 CHECK 约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">chk_name</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">column2</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;[YN]&#39;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>撤销 CHECK 约束：</p>
<p>MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="n">chk_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>SQL Server / Oracle / MS Access：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">chk_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="default-默认约束" data-numberify>DEFAULT 默认约束<a class="anchor ms-1" href="#default-默认约束"></a></h2>
<p>创建表时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="n">default_val</span><span class="w"> </span><span class="err">是</span><span class="w"> </span><span class="n">Type4</span><span class="w"> </span><span class="err">类型的值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w">  </span><span class="n">Type1</span><span class="w">  </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w">  </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">default_val</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 可以使用类似 GETDATE() 的函数插入系统值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">默认值为当前的日期</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">birthday</span><span class="w">  </span><span class="nb">DATE</span><span class="w">  </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w">  </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">GETDATE</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>更新表结构时：</p>
<p>MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="n">column1</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">default_val</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>SQL Server / MS Access：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">default_val</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">column1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Oracle：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MODIFY</span><span class="w"> </span><span class="n">column1</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">default_val</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>撤销 DEFAULT 约束：</p>
<p>MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="n">column1</span><span class="w"> </span><span class="k">DROP</span><span class="w"> </span><span class="k">DEFAULT</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>SQL Server / Oracle / MS Access：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">COLUMN</span><span class="w"> </span><span class="n">column1</span><span class="w"> </span><span class="k">DROP</span><span class="w"> </span><span class="k">DEFAULT</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="auto-increment-字段" data-numberify>AUTO INCREMENT 字段<a class="anchor ms-1" href="#auto-increment-字段"></a></h1>
<p>在定义表时，在列中添加 auto-increment 字段可以在新纪录插入表时对该列生成一个唯一的数字。</p>
<p>定义为 auto-increment 字段的列必须是整数类型。</p>
<p>定义为 auto-increment 的列常常被定义为 <code>PRIMARY KEY</code>。</p>
<hr>
<p>MySQL 使用 <code>AUTO_INCREMENT</code> 关键字来执行 auto-increment 任务：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">定义</span><span class="w"> </span><span class="n">column1</span><span class="w"> </span><span class="err">为</span><span class="w"> </span><span class="n">AUTO</span><span class="w"> </span><span class="k">INCREMENT</span><span class="w"> </span><span class="err">主键字段</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">TYPE1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w"> </span><span class="n">TYPE2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column3</span><span class="w"> </span><span class="n">TYPE3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>定义了 AUTO_INCREMENT 字段后，可以不用对该列指定值，或者对该列指定为 NULL 值（会自动添加一个唯一的值）。</p>
<p>MySQL 的 AUTO_INCREMENT 只能在 key 上被定义。PRIMARY KEY 和 UNIQUE 都是有效的定义。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- val2 和 val3 是分别与 column2 和 column3 同类型的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 不对 auto-increment 列指定值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="n">column3</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">val2</span><span class="p">,</span><span class="w"> </span><span class="n">val3</span><span class="w"> </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 指定为 NULL 值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="n">column3</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">val2</span><span class="p">,</span><span class="w"> </span><span class="n">val3</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>AUTO_INCREMENT 默认的开始值是 <code>1</code>，每新增一条记录都会递增 <code>1</code>。</p>
<p>让 AUTO_INCREMENT 序列以其他的值起始：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- number 是任意数字
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="nb">number</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>MySQL 设定起始值只能在建表后使用 <code>ALTER TABLE</code> 语句。也可以在建表后直接使用 <code>ALTER TABLE</code> 语句定义 AUTO_INCREMENT 以及它的起始值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_test</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="nb">number</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- number 是任意数字
</span></span></span></code></pre></div><hr>
<p>MS SQL Server 使用 <code>IDENTITY()</code> 来执行 auto-increment 任务：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- IDENTITY(initial, incremental) 中，
</span></span></span><span class="line"><span class="cl"><span class="c1">-- initial 是初始值，incremental 是递增值
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 即，以 initial 作为初始值，每新增一条记录递增 incremental
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">IDENTITY</span><span class="p">(</span><span class="n">initial</span><span class="p">,</span><span class="w"> </span><span class="n">incremental</span><span class="p">)</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><p>插入数据的方法同 MySQL。</p>
<hr>
<p>Oracle 通过创建 <code>sequence</code> 对象（该对象生成数字序列）创建 auto-increment 字段：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">SEQUENCE</span><span class="w"> </span><span class="n">sp_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MINVALUE</span><span class="w"> </span><span class="mi">1</span><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">最小值为</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">START</span><span class="w"> </span><span class="k">WITH</span><span class="w"> </span><span class="mi">1</span><span class="w">  </span><span class="o">#</span><span class="w"> </span><span class="err">起始值为</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INCREMENT</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="mi">1</span><span class="w">  </span><span class="o">#</span><span class="w"> </span><span class="err">每次递增</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CACHE</span><span class="w"> </span><span class="mi">10</span><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">缓存</span><span class="w"> </span><span class="mi">10</span><span class="w"> </span><span class="err">个值以提高性能</span><span class="w">
</span></span></span></code></pre></div><p>插入新记录时，必须使用 <code>sequence</code> 对象的 <code>nextval</code> 函数（该函数从 <code>sp_name</code> 序列中取回下一个值）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 假设 tab_name 已被创建，
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 且要对 column1 使用 nextval() 函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="n">column3</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">sp_name</span><span class="p">.</span><span class="n">nextval</span><span class="p">,</span><span class="w"> </span><span class="n">val2</span><span class="p">,</span><span class="w"> </span><span class="n">val3</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="视图" data-numberify>视图<a class="anchor ms-1" href="#视图"></a></h1>
<p>视图是虚拟的表。视图并不包含数据，它只包含使用时动态检索数据的查询。视图的 SELECT 用法与表的用法基本相同。</p>
<p>使用视图的原因：</p>
<ul>
<li>
<p>重用 SQL 语句。</p>
</li>
<li>
<p>简化复杂的 SQL 操作（无需知道视图的基本查询细节）。</p>
</li>
<li>
<p>使用表的一部分而不是整个表。</p>
</li>
<li>
<p>保护数据。
可以授予用户访问表的特定部分的权限，而不是整个表的访问权限。</p>
</li>
<li>
<p>更改数据格式和表示。
视图可返回与底层表的表示和格式不同的数据。</p>
</li>
</ul>
<hr>
<p>视图的使用规则：</p>
<ul>
<li>
<p>视图名必须为一且不能与其他视图或表重名。</p>
</li>
<li>
<p>对于可创建的视图数目没有限制。</p>
</li>
<li>
<p>创建视图，必须具有足够的访问权限（通常由数据库管理人员授予）。</p>
</li>
<li>
<p>视图可以嵌套，但允许的嵌套层数在不同的 DBMS 中有所不同。
嵌套视图、使用多个联结和过滤创建复杂的视图都会使性能下降。在产品环境中使用之前，应该对其进行全面测试。</p>
</li>
<li>
<p>许多 DBMS 禁止在视图查询中使用 <code>ORDER BY</code> 子句。</p>
</li>
<li>
<p>有些 DBMS 要求对返回的所有列进行命名，如果列是计算字段，则需要使用别名。</p>
</li>
<li>
<p>视图不能索引，也不能有关联的触发器或默认值。</p>
</li>
<li>
<p>有些 DBMS 把视图作为只读的查询（不能将数据写回底层表，如 SQLite）。</p>
</li>
<li>
<p>有些 DBMS 禁止对视图中的行进行插入或更新后，该行不再属于该视图的操作。
默认情况下，如果删除视图中的某行的某列后，可能会导致该行不属于该视图。但是某些 DBMS 会防止这种情况发生。</p>
</li>
</ul>
<hr>
<h2 id="create-view-创建视图" data-numberify>CREATE VIEW 创建视图<a class="anchor ms-1" href="#create-view-创建视图"></a></h2>
<p>使用 <code>CREATE VIEW</code> 语句创建视图，通常包含两部分：</p>
<ul>
<li>
<p>视图名；</p>
</li>
<li>
<p><code>SELECT</code> 查询语句。</p>
</li>
</ul>
<p>视图的用途：</p>
<ol>
<li>
<p>利用视图简化复杂的联结：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">VIEW</span><span class="w"> </span><span class="n">view_name</span><span class="w"> </span><span class="k">AS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="p">,</span><span class="w"> </span><span class="n">table2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>用视图重新格式话检索出的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1, filed2, ... 指需要重命名的字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">VIEW</span><span class="w"> </span><span class="n">view_name</span><span class="w"> </span><span class="k">AS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">alias1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">alias2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>用视图过滤不想要的数据。</p>
</li>
</ol>
<p>一般创建的视图都不会绑定特定的数据，这会提高视图的可重用性。</p>
<p>从视图检索数据时如果使用了一条 <code>WHERE</code> 子句，则两组子句（一组在视图中，另一组是传递给视图的）将自动组合。</p>
<hr>
<h2 id="drop-view-删除视图" data-numberify>DROP VIEW 删除视图<a class="anchor ms-1" href="#drop-view-删除视图"></a></h2>
<p>通过 <code>DROP VIEW</code> 删除视图（仅删除视图的定义，视图中并包含真实的数据）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">VIEW</span><span class="w"> </span><span class="n">view_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="索引" data-numberify>索引<a class="anchor ms-1" href="#索引"></a></h1>
<p>索引通过排序数据以加快搜索和排序操作的速度。</p>
<ul>
<li>
<p>索引改善检索操作的性能，但降低了数据插入、修改和删除的性能。</p>
</li>
<li>
<p>索引数据可能要占用大量的存储空间。</p>
</li>
<li>
<p>用户无法看到索引。</p>
</li>
<li>
<p>并非所有数据都适合做索引。</p>
</li>
<li>
<p>索引用于数据过滤和数据排序。如果经常以某种特定的顺序排序数据，则该数据可能适合做索引。</p>
</li>
<li>
<p>可以在索引中定义多个列。这样的索引仅在以这个列组合排序时有用。</p>
</li>
</ul>
<hr>
<h2 id="create-index-创建索引" data-numberify>CREATE INDEX 创建索引<a class="anchor ms-1" href="#create-index-创建索引"></a></h2>
<p>索引使用 <code>CREATE INDEX</code> 语句创建（不同的 DBMS 创建索引的语句变化很大）。</p>
<p>创建一个允许使用重复值的索引：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">index_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ON</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><p>创建唯一索引（不允许两个行拥有相同的索引值）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">index_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ON</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><p>索引必须唯一命名。</p>
<hr>
<h2 id="drop-index-删除索引" data-numberify>DROP INDEX 删除索引<a class="anchor ms-1" href="#drop-index-删除索引"></a></h2>
<p>MySQL:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">index_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>MS Access：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">index_name</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>MS SQL Server：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">tab_name</span><span class="p">.</span><span class="n">index_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>DB2 / Oracle：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">index_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

