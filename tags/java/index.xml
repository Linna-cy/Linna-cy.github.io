<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on Linner&#39;s Blog</title>
    <link>/tags/java/</link>
    <description>Recent content in Java on Linner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>Copyright © 2020-2023 Linner. All Rights Reserved.
</copyright>
    <lastBuildDate>Fri, 04 Aug 2023 08:40:11 +0000</lastBuildDate><atom:link href="/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring AMQP</title>
      <link>/docs/spring/springcloud/communications/spring-amqp/</link>
      <pubDate>Fri, 04 Aug 2023 08:40:11 +0000</pubDate>
      
      <guid>/docs/spring/springcloud/communications/spring-amqp/</guid>
      <description><![CDATA[AMQP（Advanced Message Queuing Protocol）是用于在应用程序之间传递业务消息的开放标准。该协议与语言和平台无关，更符合微服务中独立性的要]]></description>
      <content:encoded><![CDATA[<p>AMQP（Advanced Message Queuing Protocol）是用于在应用程序之间传递业务消息的开放标准。该协议与语言和平台无关，更符合微服务中独立性的要求。</p>
<p>RabbitMQ实现了AMQP协议。<a href="https://spring.io/projects/spring-amqp" target="_blank" rel="noopener noreferrer">Spring AMQP<i class="fas fa-external-link-square-alt ms-1"></i></a>是基于AMQP协议定义的一套API规范，提供了模板来发送和接收消息。包含两部分，其中<code>spring-amqp</code>是基础抽象，<code>spring-rabbit</code>是底层的默认实现。</p>
<p>Spring AMQP的依赖如下，其中包含了RabbitMQ的依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- AMQP依赖，包含RabbitMQ --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-amqp<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在Spring中使用RabbitMQ可以使用Spring AMQP的依赖。对于RabbitMQ来说，Publisher和Consumer都是使用这个依赖，所以这个依赖坐标可以放在它们的父工程中。</p>
<p>导入依赖后，需要先编写<code>application.yml</code>，添加RabbitMQ连接信息（Publisher和Consumer都需要编写此配置）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rabbitmq</span><span class="p">:</span><span class="w">   </span><span class="c"># RabbitMQ配置信息</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">localhost  </span><span class="w"> </span><span class="c"># 主机地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">5672</span><span class="w">        </span><span class="c"># 端口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">virtual-host</span><span class="p">:</span><span class="w"> </span><span class="l">/  </span><span class="w"> </span><span class="c"># 虚拟主机</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">linner </span><span class="w"> </span><span class="c"># 用户名</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">  </span><span class="c"># 密码</span><span class="w">
</span></span></span></code></pre></div><p>RabbitMQ官方文档中给出了5个Demo，它们分别对应几种不同的用法：</p>
<ul>
<li>
<p>基本消息队列（Basic Queue）：</p>
<p><picture><img class="img-fluid " alt="Basic Queue" src="/docs/spring/springcloud/communications/spring-amqp/uTools_1691056818833.png" loading="lazy" width="286" height="158" />
</picture>

</p>
</li>
<li>
<p>工作消息队列（Work Queue）：</p>
<p><picture><img class="img-fluid " alt="Work Queue" src="/docs/spring/springcloud/communications/spring-amqp/uTools_1691056877775.png" loading="lazy" width="258" height="231" />
</picture>

</p>
</li>
<li>
<p>发布与订阅（Publish/Subscribe）。</p>
<p>根据交换机类型的不同，可分为三种：</p>
<ul>
<li>
<p>Fanout Exchange（广播）：</p>
<p><picture><img class="img-fluid " alt="Fanout Exchange" src="/docs/spring/springcloud/communications/spring-amqp/uTools_1691057092864.png" loading="lazy" width="272" height="182" />
</picture>

</p>
</li>
<li>
<p>Direct Exchange（路由，Routing）：</p>
<p><picture><img class="img-fluid " alt="Direct Exchange" src="/docs/spring/springcloud/communications/spring-amqp/uTools_1691057130360.png" loading="lazy" width="262" height="212" />
</picture>

</p>
</li>
<li>
<p>Topic Exchange（主题）：</p>
<p><picture><img class="img-fluid " alt="Topic Exchange" src="/docs/spring/springcloud/communications/spring-amqp/uTools_1691057168656.png" loading="lazy" width="276" height="209" />
</picture>

</p>
</li>
</ul>
</li>
</ul>
<p>接下来分别按照这5个模型来实现。</p>
<hr>
<h1 id="基本消息队列" data-numberify>基本消息队列<a class="anchor ms-1" href="#基本消息队列"></a></h1>
<p>基本消息队列模型只包含三种角色：</p>
<ul>
<li><strong>Publisher</strong>：消息发布者，将消息发送到队列Queue。</li>
<li><strong>Queue</strong>：消息队列，负责接受并缓存消息。</li>
<li><strong>Consumer</strong>：订阅队列，处理队列中的消息。</li>
</ul>
<p>Spring AMQP通过RabbitMQ提供的AMQP接口，整合了RabbitMQ，让RabbitMQ使用起来更加方便。</p>
<p>Spring AMQP提供了<code>RabbitTemplate</code>来给RabbitMQ发送消息，在使用之时直接<code>@Autowired</code>即可。</p>
<p>在<code>Publisher</code>模块中新建一个<code>SpringAmqpTest</code>测试类，然后使用<code>RabbitTemplate</code>发送消息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringAmqpTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSimpleQueue</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">queueName</span> <span class="o">=</span> <span class="s">&#34;simple.queue&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;Hello Spring AMQP!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;发送消息：[&#34;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>将以上代码放在业务代码中即可实现异步通讯。</p>
<p>在<code>Consumer</code>中新建一个<code>listener</code>包，并且在包中创建<code>SpringRabbitListener</code>，然后使用<code>@RabbitListener</code>定义接收消息的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringRabbitListener</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;simple.queue&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenSimpleQueue</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;收到消息：[&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>直接启动<code>Consumer</code>的启动类即可开始接收消息。</p>
<blockquote>
<p>注：<code>@RabbitListener</code>的<code>queues</code>属性没有创建消息队列的能力。如果先启动<code>Consumer</code>报错<code>Failed to declare queue: simple.queue</code>，可以创建一个<code>RabbitConfig</code>，然后在<code>RabbitConfig</code>中创建队列；或者直接在启动类中创建队列。</p>
<p>在<code>Consumer</code>中创建<code>simple.queue</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RabbitConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Queue</span> <span class="nf">getSimpleQueue</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Queue</span><span class="o">(</span><span class="s">&#34;simple.queue&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>另外还需要注意，导入的<code>Queue</code>是<code>org.springframework.amqp.core</code>包下的。</p>
</blockquote>
<hr>
<h1 id="工作队列模型" data-numberify>工作队列模型<a class="anchor ms-1" href="#工作队列模型"></a></h1>
<p>修改<code>Publisher</code>，模拟每秒钟发送50条消息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringAmqpTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testWorkQueue</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">queueName</span> <span class="o">=</span> <span class="s">&#34;work.queue&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;Hello Message__&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">message</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;发送消息：[&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>   <span class="c1">// 休眠 20ms，1s == 1000ms，所以1s最多只能发50条
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>修改<code>Consumer</code>，模拟两个消费者共同接收<code>work.queue</code>的消息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringRabbitListener</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queuesToDeclare</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@Queue</span><span class="o">(</span><span class="n">WORK_QUEUE</span><span class="o">)})</span> <span class="c1">// 声明并订阅Queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenWorkQueue1</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;消费者 1 收到消息：[&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>   <span class="c1">// 用不同的日志级别区分消费者1和消费者2，更易于阅读
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>   <span class="c1">// 处理速度约：50条/s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queuesToDeclare</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@Queue</span><span class="o">(</span><span class="n">WORK_QUEUE</span><span class="o">)})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenWorkQueue2</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;消费者 2 收到消息：[&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>  <span class="c1">// 处理速度约：5条/s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>@RabbitListener</code>的<code>queuesToDeclare</code>属性是<code>@Queue</code>类型数组。<code>queuesToDeclare</code>在指定多个队列的同时，会去声明它们，这样就能不通过创建Bean来声明它们。</p>
<p>先启动<code>Consumer</code>，然后在启动<code>Publisher</code>，发现消息被两个消费者平分处理了（一个消费者处理单数号消息，另一个处理双数号消息），并没有按照各自处理速度去分配。这是因为消费者存在消费预取。无论在规定时间内是否能处理得完，消费者都会按照配置去自动预取。所以就导致了两个消费者各取一半消息去处理。</p>
<p>要解决这个消费预取限制，让消费者能根据自己的能力预取消息，可以在<code>application.yml</code>中修改<code>spring.rebbitmq.listener.simple.prefetch</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rabbitmq</span><span class="p">:</span><span class="w">   </span><span class="c"># RabbitMQ配置信息</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##### 连接信息... #####</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">listener</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">simple</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">prefetch</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="c"># 每次只能预取 1 条消息，处理完才能获取下一条</span><span class="w">
</span></span></span></code></pre></div><p>然后按照上方，先启动（或重启）<code>Consumer</code>，然后在启动<code>Publisher</code>，观察控制台打印的日志可以发现这次处理完50条消息的时间大约为1秒。</p>
<p>工作队列模式的特点是：</p>
<ul>
<li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理。</li>
<li>通过设置Prefetch来控制消费者预取的消息数量。</li>
</ul>
<hr>
<h1 id="发布订阅模型" data-numberify>发布/订阅模型<a class="anchor ms-1" href="#发布订阅模型"></a></h1>
<p>发布/订阅模式通过Exchange（交换机）方式实现了将同一消息发送给多个消费者。</p>
<p>发布/订阅的模型如图：</p>
<p><picture><img class="img-fluid " alt="发布/订阅模型" src="/docs/spring/springcloud/communications/spring-amqp/image-20210717165309625.png" loading="lazy" width="1431" height="462" />
</picture>

</p>
<p>模型中多了Exchange角色，并且过程略有变化：</p>
<ul>
<li><strong>Publisher</strong>（生产者）：值要发送消息的程序，但是不再发送到队列中，而是发给Exchange（交换机）。</li>
<li><strong>Exchange</strong>（交换机）：一方面，接收生产者发送的消息；另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。
<ul>
<li>Topic：</li>
</ul>
</li>
<li><strong>Consumer</strong>（消费者）：订阅队列，处理队列中的消息。。</li>
<li><strong>Queue</strong>：接收消息、缓存消息。</li>
</ul>
<blockquote>
<p>注：Exchange负责消息路由，而不是存储，路由失败则消息丢失。</p>
</blockquote>
<p>常见Exchange类型包括：</p>
<ul>
<li>Fanout（扇出）：广播，将消息交给所有绑定到交换机的队列。</li>
<li>Direct（定向）：路由，把消息交给符合指定Routing Key的队列。</li>
<li>Topic（话题）：通配符，把消息交给符合Routing Pattern（路由模式）的队列。</li>
</ul>
<p>Spring AMQP提供了声明交换机、队列、绑定关系的API，声明交换机API的继承关系图如下：</p>
<p><picture><img class="img-fluid " alt="交换机API继承关系图" src="/docs/spring/springcloud/communications/spring-amqp/1691157574294.png" loading="lazy" width="1212" height="410" />
</picture>

</p>
<h2 id="fanout-exchange" data-numberify>Fanout Exchange<a class="anchor ms-1" href="#fanout-exchange"></a></h2>
<p>Fanout Exchange会将接收到的消息路由到每一个跟其绑定的Queue。声明队列、声明交换机和绑定关系都要在Consumer中完成。</p>
<p>在<code>Consumer</code>中添加新的配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FanoutConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">FANOUT_EXCHANGE</span> <span class="o">=</span> <span class="s">&#34;linner.fanout&#34;</span><span class="o">;</span>   <span class="c1">// 交换机名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">FANOUT_QUEUE_1</span> <span class="o">=</span> <span class="s">&#34;fanout.queue1&#34;</span><span class="o">;</span>    <span class="c1">// 队列1名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">FANOUT_QUEUE_2</span> <span class="o">=</span> <span class="s">&#34;fanout.queue2&#34;</span><span class="o">;</span>    <span class="c1">// 队列2名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 声明FanoutExchange交换机
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">FanoutExchange</span> <span class="nf">getFanoutExchange</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">FanoutExchange</span><span class="o">(</span><span class="n">FANOUT_EXCHANGE</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 声明第1个队列
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span><span class="o">(</span><span class="s">&#34;fanoutQueue1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Queue</span> <span class="nf">getFanoutQueue1</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Queue</span><span class="o">(</span><span class="n">FANOUT_QUEUE_1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 绑定队列1和交换机
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Binding</span> <span class="nf">bindingQueue1</span><span class="o">(</span><span class="n">Queue</span> <span class="n">fanoutQueue1</span><span class="o">,</span> <span class="n">FanoutExchange</span> <span class="n">fanoutExchange</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">BindingBuilder</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="n">fanoutQueue1</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="n">fanoutExchange</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span><span class="o">(</span><span class="s">&#34;fanoutQueue2&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Queue</span> <span class="nf">getFanoutQueue2</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Queue</span><span class="o">(</span><span class="n">FANOUT_QUEUE_2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Binding</span> <span class="nf">bindingQueue2</span><span class="o">(</span><span class="n">Queue</span> <span class="n">fanoutQueue2</span><span class="o">,</span> <span class="n">FanoutExchange</span> <span class="n">fanoutExchange</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">BindingBuilder</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="n">fanoutQueue2</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="n">fanoutExchange</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* 第3个队列以相同方式声明，并绑定... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后修改<code>Consumer</code>的<code>SpringRabbitListener</code>类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringRabbitListener</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="o">{</span><span class="n">FanoutConfig</span><span class="o">.</span><span class="na">FANOUT_QUEUE_1</span><span class="o">})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenFanoutQueue1</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;消费者收到 [&#34;</span> <span class="o">+</span> <span class="n">FanoutConfig</span><span class="o">.</span><span class="na">FANOUT_QUEUE_1</span> <span class="o">+</span> <span class="s">&#34;] 的消息: [&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="o">{</span><span class="n">FanoutConfig</span><span class="o">.</span><span class="na">FANOUT_QUEUE_2</span><span class="o">})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenFanoutQueue2</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;消费者收到 [&#34;</span> <span class="o">+</span> <span class="n">FanoutConfig</span><span class="o">.</span><span class="na">FANOUT_QUEUE_2</span> <span class="o">+</span> <span class="s">&#34;] 的消息: [&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>修改<code>Publisher</code>，添加新的测试方法模拟发送消息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringAmqpTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">FANOUT_EXCHANGE</span> <span class="o">=</span> <span class="s">&#34;linner.fanout&#34;</span><span class="o">;</span>  <span class="c1">// 交换机名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSendFanoutExchange</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;Hello everyone!&#34;</span><span class="o">;</span> <span class="c1">// 消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 发送消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">FANOUT_EXCHANGE</span><span class="o">,</span> <span class="s">&#34;&#34;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;发送消息：[&#34;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>先运行<code>Consumer</code>，然后再运行<code>Publisher</code>的<code>testSendFanoutExchange()</code>测试方法发送消息，在<code>Consumer</code>的终端可以发现，两个消费者都接收到消息了。</p>
<p><code>RabbitTemplate</code>的<code>convertAndSend()</code>方法有不同的实现，可以向队列发送消息，也可以向交换机发送。</p>
<p>Fanout Exchange的特点：</p>
<ul>
<li>可以有多个队列；</li>
<li>每个队列都要绑定到Exchange；</li>
<li>生产者发送的消息，只能发送到Exchange，由Exchange决定发给哪个队列，生产者无法决定（也不知道）；</li>
<li>交换机把消息发送给绑定过的所有队列；</li>
<li>订阅队列的消费者都能拿到消息。</li>
</ul>
<p>Fanout Exchange的作用：</p>
<ul>
<li>接收Publisher发送的消息；</li>
<li>将消息按照规则路由到与之绑定的队列，Fanout Exchange的会将消息路由到每个绑定的队列；</li>
<li>不能缓存消息，路由失败，消息丢失。</li>
</ul>
<h2 id="direct-exchange" data-numberify>Direct Exchange<a class="anchor ms-1" href="#direct-exchange"></a></h2>
<p>Direct Exchange通过Binding Key（绑定密钥）和Routing Key（路由密钥）将消息路由到不同的队列上。</p>
<p>在Direct Exchange模式下，队列在声明时可以指定一个或多个Binding Key；Publisher在向Exchange发送消息时，通过指定Routing Key，告诉Exchange要将消息发送到哪个队列上。</p>
<p>在<code>Consumer</code>中添加新的<code>listen</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringRabbitListener</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DIRECT_EXCHANGE_NAME</span> <span class="o">=</span> <span class="s">&#34;linner.direct&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DIRECT_QUEUE_1_NAME</span> <span class="o">=</span> <span class="s">&#34;direct.queue1&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DIRECT_QUEUE_2_NAME</span> <span class="o">=</span> <span class="s">&#34;direct.queue2&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">bindings</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@QueueBinding</span><span class="o">(</span>   <span class="c1">// 设置绑定关系，绑定队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">value</span> <span class="o">=</span> <span class="nd">@Queue</span><span class="o">(</span><span class="n">DIRECT_QUEUE_1_NAME</span><span class="o">),</span>    <span class="c1">// 设置绑定的队列（会自动创建队列）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">exchange</span> <span class="o">=</span> <span class="nd">@Exchange</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="n">DIRECT_EXCHANGE_NAME</span><span class="o">,</span>   <span class="c1">// 设置绑定的交换机（会自动创建交换机）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">type</span> <span class="o">=</span> <span class="n">ExchangeTypes</span><span class="o">.</span><span class="na">DIRECT</span> <span class="cm">/* 设置交换机类型，默认为Direct */</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">key</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;red&#34;</span><span class="o">,</span> <span class="s">&#34;blue&#34;</span><span class="o">}</span>   <span class="c1">// Binding Keys，可以指定多个，当
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">)})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenDirectQueue1</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;消费者收到 [&#34;</span> <span class="o">+</span> <span class="n">DIRECT_QUEUE_1_NAME</span> <span class="o">+</span> <span class="s">&#34;] 的消息: [&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">bindings</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@QueueBinding</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">value</span> <span class="o">=</span> <span class="nd">@Queue</span><span class="o">(</span><span class="n">DIRECT_QUEUE_2_NAME</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">exchange</span> <span class="o">=</span> <span class="nd">@Exchange</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="n">DIRECT_EXCHANGE_NAME</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">type</span> <span class="o">=</span> <span class="n">ExchangeTypes</span><span class="o">.</span><span class="na">DIRECT</span> <span class="cm">/* 默认 */</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">key</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;red&#34;</span><span class="o">,</span> <span class="s">&#34;yellow&#34;</span><span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">)})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenDirectQueue2</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;消费者收到 [&#34;</span> <span class="o">+</span> <span class="n">DIRECT_QUEUE_2_NAME</span> <span class="o">+</span> <span class="s">&#34;] 的消息: [&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>@RabbitListener</code>的<code>bindings</code>属性提供了简便的绑定方式。<code>bindings</code>属性是<code>@QueueBinding</code>类型数组，可以同时有多个绑定。其中的每个绑定使用<code>@QueueBinding</code>来定义。</p>
<p><code>@QueueBinding</code>通常需要设置的属性有以下三个：</p>
<ul>
<li><code>value</code>：指明绑定的队列，类型为<code>@Queue</code>。通过使用<code>@Queue</code>来声明并订阅队列。</li>
<li><code>exchange</code>：指明绑定的交换机，类型为<code>@Exchange</code>。通过使用<code>@Exchange</code>，可以指定交换机的名称和类型。交换机类型可以使用<code>ExchangeTypes</code>下的字符串常量。</li>
<li><code>key</code>：指明Binding Key(s)，是一个字符串数组类型。</li>
</ul>
<p>在<code>Publisher</code>中添加新的<code>testSend</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringAmqpTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DIRECT_EXCHANGE</span> <span class="o">=</span> <span class="s">&#34;linner.direct&#34;</span><span class="o">;</span>  <span class="c1">// 交换机名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSendDirectExchange</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">routingKey</span> <span class="o">=</span> <span class="s">&#34;red&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;Hello direct exchange &#34;</span> <span class="o">+</span> <span class="n">routingKey</span> <span class="o">+</span> <span class="s">&#34;!&#34;</span><span class="o">;</span> <span class="c1">// 消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 发送消息（发送消息时需要指定Routing Key）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">DIRECT_EXCHANGE</span><span class="o">,</span> <span class="n">routingKey</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;发送消息：[&#34;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>先启动<code>Consumer</code>，然后再启动<code>Publisher</code>的<code>testSendDirectExchange()</code>方法来进行测试。你可以通过将<code>routingKey</code>修改为<code>blue</code>或<code>yellow</code>来测试其它路由密钥。</p>
<p>Direct Exchange的规则是这样的：</p>
<ul>
<li>Queue绑定一个或多个Binding Key(s)到Exchange。</li>
<li>Publisher在给Exchange发送消息时，指定Routing Key。</li>
<li>Exchange收到消息，并且根据Publisher指定的Routing Key去匹配对应的Queue(s)。当Exchange发现有Queue(s)的Binding Keys中，有与Publisher指定的Routing Key对应的Key时，就将消息发送给对应的Queue(s)。</li>
</ul>
<blockquote>
<p>注：如果在Direct Exchange模式下使用Fanout Exchange的方式发送消息（即<code>rabbitTemplate.convertAndSend(DIRECT_EXCHANGE, &quot;&quot;, message);</code>），那么是不会有任何一个队列接收到此消息的。除非在绑定队列时，设置了这样一个Key：<code>key = {&quot;&quot;}</code>。Direct Exchange模式将<code>&quot;&quot;</code>识别为一个Key。</p>
</blockquote>
<h2 id="topic-exchange" data-numberify>Topic Exchange<a class="anchor ms-1" href="#topic-exchange"></a></h2>
<p>Topic Exchange模式与Direct Exchange模式类似，区别在于Topic Exchange下的Routing Key必须是个多个单词的列表，并且以<code>.</code>分割。</p>
<p>例如：</p>
<ul>
<li><code>china.news</code>：代表有中国的新闻消息；</li>
<li><code>china.weather</code>：代表中国的天气消息。</li>
</ul>
<p>Topic Exchange模式中，Queue与Exchange指定Binding Key时可以使用通配符：</p>
<table>
<thead>
<tr>
<th style="text-align:center">通配符</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>#</code></td>
<td style="text-align:left">代指0个或多个单词。</td>
</tr>
<tr>
<td style="text-align:center"><code>*</code></td>
<td style="text-align:left">代指1个单词。</td>
</tr>
</tbody>
</table>
<p>在<code>Consumer</code>中添加新的<code>listen</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringRabbitListener</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TOPIC_EXCHANGE_NAME</span> <span class="o">=</span> <span class="s">&#34;linner.topic&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TOPIC_QUEUE_1_NAME</span> <span class="o">=</span> <span class="s">&#34;topic.queue1&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TOPIC_QUEUE_2_NAME</span> <span class="o">=</span> <span class="s">&#34;topic.queue2&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">bindings</span> <span class="o">=</span> <span class="nd">@QueueBinding</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">value</span> <span class="o">=</span> <span class="nd">@Queue</span><span class="o">(</span><span class="n">TOPIC_QUEUE_1_NAME</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">exchange</span> <span class="o">=</span> <span class="nd">@Exchange</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">name</span> <span class="o">=</span> <span class="n">TOPIC_EXCHANGE_NAME</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">type</span> <span class="o">=</span> <span class="n">ExchangeTypes</span><span class="o">.</span><span class="na">TOPIC</span>  <span class="c1">// 设置交换机类型为Topic
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">key</span> <span class="o">=</span> <span class="s">&#34;china.#&#34;</span>                     <span class="c1">// 设置包含通配符的Binding Key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenTopicQueue1</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;消费者收到 [&#34;</span> <span class="o">+</span> <span class="n">TOPIC_QUEUE_1_NAME</span> <span class="o">+</span> <span class="s">&#34;] 的消息: [&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">bindings</span> <span class="o">=</span> <span class="nd">@QueueBinding</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">value</span> <span class="o">=</span> <span class="nd">@Queue</span><span class="o">(</span><span class="n">TOPIC_QUEUE_2_NAME</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">exchange</span> <span class="o">=</span> <span class="nd">@Exchange</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">name</span> <span class="o">=</span> <span class="n">TOPIC_EXCHANGE_NAME</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">type</span> <span class="o">=</span> <span class="n">ExchangeTypes</span><span class="o">.</span><span class="na">TOPIC</span>
</span></span><span class="line"><span class="cl">            <span class="o">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">key</span> <span class="o">=</span> <span class="s">&#34;#.news&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenTopicQueue2</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;消费者收到 [&#34;</span> <span class="o">+</span> <span class="n">TOPIC_QUEUE_2_NAME</span> <span class="o">+</span> <span class="s">&#34;] 的消息: [&#34;</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在<code>Publisher</code>中添加新的<code>testSend</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringAmqpTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TOPIC_EXCHANGE</span> <span class="o">=</span> <span class="s">&#34;linner.topic&#34;</span><span class="o">;</span>  <span class="c1">// 交换机名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSendTopicExchange</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">routingKey</span> <span class="o">=</span> <span class="s">&#34;china.news&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;Hello &#34;</span> <span class="o">+</span> <span class="n">TOPIC_EXCHANGE</span> <span class="o">+</span> <span class="s">&#34; &#34;</span> <span class="o">+</span> <span class="n">routingKey</span> <span class="o">+</span> <span class="s">&#34;!&#34;</span><span class="o">;</span> <span class="c1">// 消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 发送消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">TOPIC_EXCHANGE</span><span class="o">,</span> <span class="n">routingKey</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;发送消息：[&#34;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>同样是以先启动<code>Consumer</code>，再启动<code>Publisher</code>的方式进行测试，然后再通过修改<code>routingKey</code>来测试不同的匹配规则。</p>
<hr>
<h1 id="消息转换器" data-numberify>消息转换器<a class="anchor ms-1" href="#消息转换器"></a></h1>
<p>在Spring AMOP中，发送消息的<code>RabbitTemplate.convertAndSend()</code>方法，其实发送的是<code>Object</code>类型。在发送消息时，Spring AMOP会将发送的消息序列化为字节发送给RabbitMQ；接收消息的时候，还会把字节反序列化为Java对象。也就是说，通讯过程传输的消息可以是任意类型的对象。</p>
<h2 id="默认序列化方式" data-numberify>默认序列化方式<a class="anchor ms-1" href="#默认序列化方式"></a></h2>
<p>默认情况下Spring AMOP采用的序列化方式是JDK序列化。</p>
<p>在<code>Consumer</code>的<code>RabbitConfig</code>中，添加一个新的队列：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RabbitConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">OBJECT_QUEUE_NAME</span> <span class="o">=</span> <span class="s">&#34;object.queue&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Queue</span> <span class="nf">getObjectQueue</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Queue</span><span class="o">(</span><span class="n">OBJECT_QUEUE_NAME</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后启动<code>Consumer</code>（这是为了展示Spring AMQP默认序列化方式在RabbitMQ中的序列化结果，所以先不在<code>Consumer</code>中接收消息）。</p>
<p>接着在<code>Publisher</code>中创建<code>testSend</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringAmqpTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">OBJECT_QUEUE_NAME</span> <span class="o">=</span> <span class="s">&#34;object.queue&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSendObjectQueue</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">msg</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">msg</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="s">&#34;Linner&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">msg</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">OBJECT_QUEUE_NAME</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>  <span class="c1">// 发送一个Map对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>启动测试方法，在RabbitMQ管理页面可以看到<code>object.queue</code>中存在这样一条消息：</p>
<p><picture><img class="img-fluid " alt="Spring AMOP 默认序列化结果" src="/docs/spring/springcloud/communications/spring-amqp/uTools_1691229847478.png" loading="lazy" width="1146" height="291" />
</picture>

</p>
<p>可以发现JDK序列化存在下列问题：</p>
<ul>
<li>数据体积过大；</li>
<li>有安全漏洞；</li>
<li>可读性差。</li>
</ul>
<h2 id="自定义序列化方式" data-numberify>自定义序列化方式<a class="anchor ms-1" href="#自定义序列化方式"></a></h2>
<p>JSON是一种很好的序列化方式，我们可以将Spring AMQP默认的JDK序列化改成Jackson。</p>
<p>首先导入依赖，由于序列化后还需反序列化，所以<code>Publisher</code>和<code>Consumser</code>模块都需要导入Jackson依赖。我们可以将依赖导入它们的父工程：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--Jackson核心依赖--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.dataformat<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>jackson-dataformat-xml<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>2.9.10<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>然后分别在<code>Publisher</code>和<code>Consumser</code>中替换Spring AMQP默认序列化方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AmqpConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 自定义消息转换器
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MessageConverter</span> <span class="nf">getMessageConverter</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Jackson2JsonMessageConverter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>先运行<code>Publisher.testSendObjectQueue()</code>方法，观察Jackson是否有生效。运行结果如下：</p>
<p><picture><img class="img-fluid " alt="Jackson 序列化结果" src="/docs/spring/springcloud/communications/spring-amqp/uTools_1691230403117.png" loading="lazy" width="619" height="361" />
</picture>

</p>
<p>最后在<code>Consumser</code>中创建一个新的<code>listen</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringRabbitListener</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">OBJECT_QUEUE_NAME</span> <span class="o">=</span> <span class="s">&#34;object.queue&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queuesToDeclare</span> <span class="o">=</span> <span class="nd">@Queue</span><span class="o">(</span><span class="n">OBJECT_QUEUE_NAME</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenObjectQueue</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;消费者收到 [&#34;</span> <span class="o">+</span> <span class="n">OBJECT_QUEUE_NAME</span> <span class="o">+</span> <span class="s">&#34;] 的消息: &#34;</span> <span class="o">+</span> <span class="n">msg</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>重启<code>Consumser</code>，观察终端输出的日志，如果成功打印出Map对象，说明反序列化成功。</p>
<blockquote>
<p>注：自定义Spring AMQP序列化方式时，Publisher和Consumer配置的消息转换器都必须相同。就是说，序列化和反序列化一定要使用同个消息转换器。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>RabbitMQ</title>
      <link>/docs/spring/springcloud/communications/rabbit-mq/</link>
      <pubDate>Thu, 03 Aug 2023 08:10:45 +0000</pubDate>
      
      <guid>/docs/spring/springcloud/communications/rabbit-mq/</guid>
      <description><![CDATA[RabbitMQ官网：https://www.rabbitmq.com/。 官方文档：https://rabbitmq.com/documen]]></description>
      <content:encoded><![CDATA[<p>RabbitMQ官网：<a href="https://www.rabbitmq.com/" target="_blank" rel="noopener noreferrer">https://www.rabbitmq.com/<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p>官方文档：<a href="https://rabbitmq.com/documentation.html" target="_blank" rel="noopener noreferrer">https://rabbitmq.com/documentation.html<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p>官方Demo：<a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener noreferrer">https://www.rabbitmq.com/getstarted.html<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<hr>
<h1 id="部署-rabbitmq" data-numberify>部署 RabbitMQ<a class="anchor ms-1" href="#部署-rabbitmq"></a></h1>
<p>使用Docker来部署RabbitMQ只需要两个步骤：</p>
<ol>
<li>
<p><code>pull</code> RabbitMQ镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker pull rabbitmq:3-management
</span></span></code></pre></div><p>RabbitMQ通过插件的方式提供了一个可视化界面。在RabbitMQ官方的镜像中，带<code>management</code>版本的就是集成了该可视化插件的镜像。</p>
<p>通过Docker官方的镜像源来<code>pull</code> RabbitMQ镜像可能会有点慢，可以使用一些国内的镜像源：</p>
<p>提供方          |镜像URL
中国区官方镜像  |<code>https://registry.docker-cn.com</code>
清华源          |<code>https://docker.mirrors.ustc.edu.cn</code>
阿里源          |<code>https://cr.console.aliyun.com</code>
腾讯源          |<code>https://mirror.ccs.tencentyun.com</code>
网易源          |<code>http://hub-mirror.c.163.com</code>
道客镜像站      |<code>http://f1361db2.m.daocloud.io</code></p>
</li>
<li>
<p>启动RabbitMQ容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">RABBITMQ_DEFAULT_USER</span><span class="o">=</span>linner <span class="se">\ </span>  <span class="c1"># RabbitMQ用户名（默认为guest）</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">RABBITMQ_DEFAULT_PASS</span><span class="o">=</span><span class="m">123456</span> <span class="se">\ </span>  <span class="c1"># RabbitMQ密码（默认为guest）</span>
</span></span><span class="line"><span class="cl">    --name rabbitmq-server <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --hostname rabbitmq <span class="se">\ </span>              <span class="c1"># 域名，单机下可忽略，通常用于集群部署时</span>
</span></span><span class="line"><span class="cl">    -p 15672:15672 <span class="se">\ </span>                   <span class="c1"># 可视化管理界面端口</span>
</span></span><span class="line"><span class="cl">    -p 5672:5672 <span class="se">\ </span>                     <span class="c1"># 服务端口</span>
</span></span><span class="line"><span class="cl">    -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    rabbitmq:3-management
</span></span></code></pre></div></li>
</ol>
<p>启动容器后，进入<a href="http://localhost:15672/" target="_blank" rel="noopener noreferrer">http://localhost:15672/<i class="fas fa-external-link-square-alt ms-1"></i></a>即可进入RabbitMQ管理界面。</p>
<p>使用以下命令查看RabbitMQ日志：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker logs rabbitmq-server <span class="c1"># 替换成你容器的名称</span>
</span></span></code></pre></div><hr>
<h1 id="rabbitmq-结构" data-numberify>RabbitMQ 结构<a class="anchor ms-1" href="#rabbitmq-结构"></a></h1>
<p>RabbitMQ的基本结构如下：</p>
<p><picture><img class="img-fluid " alt="RabbitMQ的基本结构" src="/docs/spring/springcloud/communications/rabbit-mq/image-20210717162752376.png" loading="lazy" width="1401" height="610" />
</picture>

</p>
<p>在RabbitMQ中有几个概念：</p>
<ul>
<li><code>channel</code>：操作RabbitMQ的工具。</li>
<li><code>exchange</code>：路由消息到队列中。</li>
<li><code>queue</code>：缓存消息。</li>
<li><code>virtual host</code>：虚拟主机，是对<code>queue</code>、<code>exchange</code>等资源的逻辑分组。</li>
</ul>
<p>RabbitMQ中的角色主要有：</p>
<ul>
<li>Publisher：生产者。将消息发送给Queue（队列）或Exchange（交换机）。</li>
<li>Consumer：消费者。从Queue获取消息，并做响应的处理。</li>
<li>Exchange：交换机。负责消息路由，将从Publisher接受到的消息分发到不同的Queues上。</li>
<li>Queue：队列。用于从Publishers或Exchange接收消息并存储。</li>
<li>Virtual Host：虚拟主机。隔离不同用户的Exchange、Queue，消息的隔离。</li>
</ul>
<hr>
<h1 id="消息模型" data-numberify>消息模型<a class="anchor ms-1" href="#消息模型"></a></h1>
<p>RabbitMQ官方文档中给出了5个Demo，它们分别对应几种不同的用法：</p>
<ul>
<li>
<p>基本消息队列（Basic Queue）：</p>
<p><picture><img class="img-fluid " alt="Basic Queue" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691056818833.png" loading="lazy" width="286" height="158" />
</picture>

</p>
</li>
<li>
<p>工作消息队列（Work Queue）：</p>
<p><picture><img class="img-fluid " alt="Work Queue" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691056877775.png" loading="lazy" width="258" height="231" />
</picture>

</p>
</li>
<li>
<p>发布与订阅（Publish and Subscribe）。</p>
<p>根据交换机类型的不同，可分为三种：</p>
<ul>
<li>
<p>Fanout Exchange（广播）：</p>
<p><picture><img class="img-fluid " alt="Fanout Exchange" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691057092864.png" loading="lazy" width="272" height="182" />
</picture>

</p>
</li>
<li>
<p>Direct Exchange（路由）：</p>
<p><picture><img class="img-fluid " alt="Direct Exchange" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691057130360.png" loading="lazy" width="262" height="212" />
</picture>

</p>
</li>
<li>
<p>Topic Exchange（主题）：</p>
<p><picture><img class="img-fluid " alt="Topic Exchange" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691057168656.png" loading="lazy" width="276" height="209" />
</picture>

</p>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="rabbitmq-依赖" data-numberify>RabbitMQ 依赖<a class="anchor ms-1" href="#rabbitmq-依赖"></a></h1>
<p>使用RabbitMQ之前需要先导入依赖。可以导入Spring AMQP的依赖，其中包含了RabbitMQ的依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- AMQP依赖，包含RabbitMQ --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-amqp<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>对于RabbitMQ来说，Publisher和Consumer都是使用这个依赖，所以这个依赖坐标可以放在它们的父工程中。</p>
<hr>
<h1 id="基本消息队列" data-numberify>基本消息队列<a class="anchor ms-1" href="#基本消息队列"></a></h1>
<p>最基础的消息队列模型只包含三种角色：</p>
<ul>
<li><strong>Publisher</strong>：消息发布者，将消息发送到队列Queue。</li>
<li><strong>Queue</strong>：消息队列，负责接受并缓存Publisher发送的消息。</li>
<li><strong>Consumer</strong>：订阅队列，处理Queue中的消息。</li>
</ul>
<p>Queue由RabbitMQ实现，需要由我们实现的角色为Publisher和Consumer。</p>
<p>实现基本消息队列可以使用RabbitMQ的原生接口来模拟。创建两个Spring模块<code>Publisher</code>和<code>Consumer</code>来模拟消息的发送和接收：</p>
<ul>
<li>
<p>在<code>Publisher</code>模块中创建<code>PublisherTest</code>测试类来模拟消息发送：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PublisherTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSendMessage</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">TimeoutException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 建立连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ConnectionFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConnectionFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1.1. 设置连接参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setHost</span><span class="o">(</span><span class="s">&#34;localhost&#34;</span><span class="o">);</span>   <span class="c1">// 主机地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="mi">5672</span><span class="o">);</span>          <span class="c1">// 端口号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setVirtualHost</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">);</span>    <span class="c1">// 虚拟主机
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;linner&#34;</span><span class="o">);</span>  <span class="c1">// 账号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;123456&#34;</span><span class="o">);</span>  <span class="c1">// 密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 1.2. 建立连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">newConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 创建通道Channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Channel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createChannel</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 创建队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">queueName</span> <span class="o">=</span> <span class="s">&#34;simple.queue&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">channel</span><span class="o">.</span><span class="na">queueDeclare</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 4. 发送消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;Hello RabbitMQ!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">channel</span><span class="o">.</span><span class="na">basicPublish</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">,</span> <span class="n">queueName</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;发送消息成功：[&#34;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 关闭通道和连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">channel</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>Consumer</code>模块中创建<code>ConsumerTest</code>来模拟消息接收：</p>
<blockquote>
<p>注：接收消息需要在<code>main()</code>中创建回调函数。不能使用一般的测试方法。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span>  <span class="nc">ConsumerTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">TimeoutException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 创建连接工厂，建立连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ConnectionFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConnectionFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1.1. 设置连接参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setHost</span><span class="o">(</span><span class="s">&#34;localhost&#34;</span><span class="o">);</span>   <span class="c1">// 主机地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="mi">5672</span><span class="o">);</span>          <span class="c1">// 端口号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setVirtualHost</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">);</span>    <span class="c1">// 虚拟主机
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;linner&#34;</span><span class="o">);</span>  <span class="c1">// 用户名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">factory</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;123456&#34;</span><span class="o">);</span>  <span class="c1">// 密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 1.2. 建立连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">newConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 创建通道Channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Channel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createChannel</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 创建队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">queueName</span> <span class="o">=</span> <span class="s">&#34;simple.queue&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">channel</span><span class="o">.</span><span class="na">queueDeclare</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 4. 订阅消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">channel</span><span class="o">.</span><span class="na">basicConsume</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="k">new</span> <span class="n">DefaultConsumer</span><span class="o">(</span><span class="n">channel</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleDelivery</span><span class="o">(</span><span class="n">String</span> <span class="n">consumerTag</span><span class="o">,</span> <span class="n">Envelope</span> <span class="n">envelope</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">AMQP</span><span class="o">.</span><span class="na">BasicProperties</span> <span class="n">properties</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">body</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 5. 处理消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">body</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;接收到消息：[&#34;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;等待接收消息......&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>模拟过程：</p>
<ol>
<li>
<p>先给<code>testSendMessage()</code>打个断点，然后再以调试模式启动<code>PublisherTest</code>，逐条执行。可以在RabbitMQ管理界面中发现创建了对应的连接、通道和消息队列。并且，进入队列后可以发现有一条消息在准备中。</p>
<p>MQ连接：</p>
<p><picture><img class="img-fluid " alt="RabbitMQ 连接" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691073342130.png" loading="lazy" width="968" height="562" />
</picture>

</p>
<p>MQ通道：</p>
<p><picture><img class="img-fluid " alt="RabbitMQ 通道" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691073381002.png" loading="lazy" width="1430" height="436" />
</picture>

</p>
<p>消息队列（Read项为1，表示有1条准备消息）：</p>
<p><picture><img class="img-fluid " alt="消息队列" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691073449245.png" loading="lazy" width="1156" height="471" />
</picture>

</p>
<p>准备中的消息：</p>
<p><picture><img class="img-fluid " alt="准备中的消息" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691073499794.png" loading="lazy" width="547" height="524" />
</picture>

</p>
</li>
<li>
<p>此时启动<code>Consumer</code>，可以发现有一条新的连接和新的通道。并且消息队列中的准备消息变为0。</p>
<p>新的MQ连接：</p>
<p><picture><img class="img-fluid " alt="新的 RabbitMQ 连接" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691073659703.png" loading="lazy" width="917" height="141" />
</picture>

</p>
<p>新的MQ通道：</p>
<p><picture><img class="img-fluid " alt="新的 RabbitMQ 通道" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691073733155.png" loading="lazy" width="1414" height="117" />
</picture>

</p>
<p>消息队列：</p>
<p><picture><img class="img-fluid " alt="消息队列" src="/docs/spring/springcloud/communications/rabbit-mq/uTools_1691073860449.png" loading="lazy" width="1138" height="114" />
</picture>

</p>
<p>在<code>Consumer</code>的控制台中可以发现打印了一条新消息：</p>
<pre tabindex="0"><code>接收到消息：[Hello RabbitMQ!]
</code></pre></li>
<li>
<p>再次启动<code>PublisherTest</code>，<code>Consumer</code>控制台再次打印一条消息：</p>
<pre tabindex="0"><code>接收到消息：[Hello RabbitMQ!]
</code></pre></li>
</ol>
<p>在搭建基本消息队列的过程中，创建队列之前的操作对于Publisher和Consumer来说是一致的。建立连接这个过程对于Publisher和Consumer来说都是必要的，之所以它们都要创建队列，是为了防止队列不存在的情况发生。它们的流程中不同的是Publisher创建队列后是为了发送消息，Consumer创建队列后是为了接收消息。</p>
<p>创建基本消息队列的流程大致可总结为：</p>
<ol>
<li>建立连接（Connection）。
<ol>
<li>创建连接工厂；</li>
<li>设置连接参数；</li>
<li>最后再建立连接。</li>
</ol>
</li>
<li>利用Connection创建通道（Channel）。</li>
<li>利用Channel声明消息队列。</li>
<li>利用Channel在指定的消息队列中发送消息或订阅消息。
<ul>
<li>对于Publisher来说，需要在消息队列中发送消息。发送完消息后，需要按顺序关闭通道和连接。</li>
<li>对于Consumer来说，需要在消息队列中接收消息。</li>
</ul>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>通讯方式</title>
      <link>/docs/spring/springcloud/communications/introduction/</link>
      <pubDate>Thu, 03 Aug 2023 07:34:34 +0000</pubDate>
      
      <guid>/docs/spring/springcloud/communications/introduction/</guid>
      <description><![CDATA[微服务间通讯有两种方式： 同步通讯：实时响应。 异步通讯：不需要马上回复。 两种方式各有优劣，同步通讯可以立即得到响应，但是却不能跟多个服务同时通]]></description>
      <content:encoded><![CDATA[<p>微服务间通讯有两种方式：</p>
<ul>
<li>同步通讯：实时响应。</li>
<li>异步通讯：不需要马上回复。</li>
</ul>
<p>两种方式各有优劣，同步通讯可以立即得到响应，但是却不能跟多个服务同时通讯。异步通讯可以同时与多个服务通讯，但是往往响应会有所延迟。</p>
<hr>
<h1 id="同步通讯" data-numberify>同步通讯<a class="anchor ms-1" href="#同步通讯"></a></h1>
<p>Feign调用就属于同步方式，虽然调用可以实时得到结果，但存在下面的问题：</p>
<ul>
<li><strong>耦合度高</strong>：消费者与提供者之间存在直接的调用关系。在服务中每次加入新的需求，都要修改原来的代码。</li>
<li><strong>性能下降</strong>：消费者需要等待提供者响应，如果调用链过长，响应时间等于每次调用的时间之和。</li>
<li><strong>资源浪费</strong>：消费者在等待响应过程中，不能释放请求占用的资源，高并发场景下会极度浪费系统资源。</li>
<li><strong>级联失败</strong>：如果提供者出现问题，所有消费者都会跟着出问题。如同多米话骨牌一样，迅速导致整个微服务群故障。</li>
</ul>
<blockquote>
<p>还有一个导致性能下降和资源浪费的原因：消费者在给提供者发请求时，提供者在处理别的消费者的请求，无法及时响应，这也会导致该消费者等待过长时间的响应。</p>
</blockquote>
<p>同步通讯并非只有缺点没有优点，其优点为时效性较强，可以立即得到结果。</p>
<hr>
<h1 id="异步通讯" data-numberify>异步通讯<a class="anchor ms-1" href="#异步通讯"></a></h1>
<p>异步调用可以避免上述同步通讯时造成的问题。</p>
<p>在异步通讯中，使用<strong>事件</strong>（<strong>Event</strong>）和<strong>代理</strong>（<strong>Broker</strong>）处理通讯。在异步通讯中有三种角色：</p>
<ul>
<li><strong>事件发布者</strong>（<strong>Publisher</strong>）：Publisher在处理完自己的业务后，发布一个事件给Broker。</li>
<li><strong>事件代理者</strong>（<strong>Broker</strong>）：Borker在接收到Publisher的事件消息后，将该消息发送给订阅了该事件的Consumer。</li>
<li><strong>事件订阅者</strong>（<strong>Consumer</strong>）：Consumer接收到自己订阅的事件消息后，根据事件做相应的业务处理。并且Consumer可以根据自己的情况和业务处理能力来处理（就好比说能力不够就不要揽太多活，Consumer性能不够就不会同时处理太多业务）。</li>
</ul>
<p>在事件模式中，Publisher在处理完业务后，就只管发布事件给Broker。剩下的由Broker和Consumer完成。这样Publisher与Consumer并没有直接通讯，而且Publisher也无需等待响应，即可以降低耦合、减少级联失败的情况，又能提高性能、减少资源浪费。Broker在这一模式中，就像是一个数据总线，所有的服务要接收数据和发送数据都发到这个总线上；这个总线就像协议一样，让服务间的通讯变得标准和可控。</p>
<blockquote>
<p>在实际应用中，发布者与订阅者是相对的。也就是说，从整个系统来看，发布者可以是订阅者，订阅者也可以是发布者；从具体的业务逻辑线上看，才有某个服务是另外某个服务的发布者，某个服务是另外某个服务的订阅者。</p>
</blockquote>
<p>使用事件模式的异步通讯的好处：</p>
<ul>
<li><strong>吞吐量提升</strong>：发布者无需等待订阅者处理完成，响应更快速。</li>
<li><strong>故障隔离</strong>：服务没有直接调用，不存在级联失败问题。</li>
<li><strong>提高资源利用</strong>：调用间没有阻塞，不会造成无效的资源占用。</li>
<li><strong>耦合度极低</strong>：由Borker做代理，每个服务都可以灵活插拔，可替换。</li>
<li><strong>流量削峰</strong>：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件。</li>
</ul>
<p>虽然异步通讯好处多，但是也不是没有缺点：</p>
<ul>
<li>架构复杂，业务没有明显的流程线，不易于管理。</li>
<li>需要依赖于Broker的可靠、安全、性能（Broker挂了，就没人给订阅者发消息了）。</li>
</ul>
<hr>
<h1 id="mq-技术" data-numberify>MQ 技术<a class="anchor ms-1" href="#mq-技术"></a></h1>
<p>MQ（Message Queue，消息队列），就是存放消息的队列，是实现事件驱动架构中的Broker的一种方法。</p>
<p>比较常见的几种MQ实现及其对比如下：</p>
<pre><code>       | **RabbitMQ**            | **ActiveMQ**                     | **RocketMQ** | **Kafka**
</code></pre>
<p>&mdash;&mdash;&mdash;- | &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; | &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; | &mdash;&mdash;&mdash;&mdash; | &mdash;&mdash;&mdash;-
公司/社区  | Rabbit                  | Apache                           | 阿里         | Apache
开发语言   | Erlang                  | Java                             | Java         | Scala&amp;Java
协议支持   | AMQP，XMPP，SMTP，STOMP | OpenWire，STOMP，REST，XMPP，AMQP| 自定义协议   | 自定义协议
可用性     | 高                      | 一般                             | 高           | 高
单机吞吐量 | 一般                    | 差                               | 高           | 非常高
消息延迟   | 微秒级                  | 毫秒级                           | 毫秒级       | 毫秒以内
消息可靠性 | 高                      | 一般                             | 高           | 一般</p>
<p>一般按照以下方式选取：</p>
<ul>
<li>追求可用性：Kafka、 RocketMQ 、RabbitMQ。</li>
<li>追求可靠性：RabbitMQ、RocketMQ。</li>
<li>追求吞吐能力：RocketMQ、Kafka。</li>
<li>追求消息低延迟：RabbitMQ、Kafka。</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Eureka</title>
      <link>/docs/spring/springcloud/eureka/</link>
      <pubDate>Mon, 26 Jun 2023 11:46:12 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/eureka/</guid>
      <description><![CDATA[Eureka 服务注册中心 Eureka架构下将服务分为以下两个角色： 注册中心（Eureka Server，服务端）。 客户端（Eureka Client）。 E]]></description>
      <content:encoded><![CDATA[<h1 id="eureka-服务注册中心" data-numberify>Eureka 服务注册中心<a class="anchor ms-1" href="#eureka-服务注册中心"></a></h1>
<p>Eureka架构下将服务分为以下两个角色：</p>
<ul>
<li>注册中心（Eureka Server，服务端）。</li>
<li>客户端（Eureka Client）。</li>
</ul>
<p>Eureka会将客户端（即服务）的信息进行注册，让客户端可以通过Eureka注册中心获取服务信息并进行调用。</p>
<p><strong>Eureka的作用：</strong></p>
<ul>
<li><strong>注册服务信息</strong>：服务提供者启动时向Eureka注册自己的信息，Eureka保存这些服务信息到服务列表中。</li>
<li><strong>获取服务信息</strong>：服务消费者根据服务名称向Eureka拉取服务列表。</li>
<li><strong>负载均衡</strong>：有多个服务提供者时，服务消费者利用负载均衡算法，从Eureka注册的服务列表中挑选一个服务后发起远程调用。</li>
<li><strong>感知服务健康状态</strong>：
<ul>
<li>服务提供者会每隔30秒向Eureka Server发送心跳请求，报告自己的健康状态。</li>
<li>Eureka会更新记录服务信息列表，心跳不正常的服务会被剔除。</li>
</ul>
</li>
</ul>
<p>在Eureka架构中，角色有以下分工：</p>
<ul>
<li>Eureka Server：记录服务信息；进行心跳监控，剔除心跳不正常的服务。</li>
<li>Eureka Client：
<ul>
<li>Provider：注册自己的信息到Eureka Server；每隔30秒向Eureka Server发送心跳。</li>
<li>Consumer：根据服务名称从Eureka Server拉取服务列表；基于服务列表做负载均衡，选中一个服务后发起远程调用。</li>
</ul>
</li>
</ul>
<h2 id="eureka-示例" data-numberify>Eureka 示例<a class="anchor ms-1" href="#eureka-示例"></a></h2>
<p>依照上例，订单服务在获取订单信息时需要从用户服务中获取用户信息并一同发送：</p>
<ol>
<li>
<p>首先需要创建一个新的Maven模块来运行Eureka Server。</p>
<ul>
<li>
<p>Eureka Server的<code>pom.xml</code>如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>asia.linner.demo<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>cloud-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/parent&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>eureka-server<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;maven.compiler.source&gt;</span>8<span class="nt">&lt;/maven.compiler.source&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;maven.compiler.target&gt;</span>8<span class="nt">&lt;/maven.compiler.target&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--Eureka服务端--&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>其中最主要的就是导入<code>eureka-server</code>起步依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--Eureka服务端--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在Eureka中，服务端和客户端有不同的依赖，服务端的起步依赖就是<code>spring-cloud-starter-netflix-eureka-server</code>。</p>
</li>
</ul>
</li>
<li>
<p>编写<code>EurekaApplication</code>启动类，并在启动类上使用<code>@EnableEurekaServer</code>注解装配EurekaServer：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableEurekaServer</span>     <span class="c1">// EurekaServer开关，自动装配EurekaServer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EurekaApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">EurekaApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>eureka-server</code>中，添加<code>application.yml</code>并加入以下配置信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 服务端口（视具体情况进行更改）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8180</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 服务名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">eureka-server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">eureka</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">client</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">service-url</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Eureka的地址信息（如果有多个，则用逗号”,“隔开）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">defaultZone</span><span class="p">:</span><span class="w"> </span><span class="l">http://localhost:8180/eureka</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>分别在<code>order-service</code>和<code>user-service</code>中添加Eureka客户端依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Eureka客户端 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>分别在Eureka客户端的<code>application.yml</code>中添加如下配置信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">eureka</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 配置eureka-server的信息</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">client</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">service-url</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># defaultZone要与eureka-server中的defaultZone相同</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">defaultZone</span><span class="p">:</span><span class="w"> </span><span class="l">http://localhost:8180/eureka</span><span class="w">
</span></span></span></code></pre></div><p>分别在Eureka客户端的<code>application.yml</code>中添加服务名称（<code>spring.application.name</code>），如<code>order-service</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 服务名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">order-service</span><span class="w">
</span></span></span></code></pre></div><p>Eureka Server利用<code>spring.application.name</code>来找到对应模块的信息，并返回。利用<code>spring.application.name</code>也可以做负载均衡。</p>
<blockquote>
<p>由于所有模块都可能作为服务提供者被其他服务调用，所以项目中所有服务模块都应该在Eureka Server中进行注册。</p>
</blockquote>
</li>
<li>
<p>在服务消费者中，需要在注册<code>RestTemplate</code>的方法上使用注解<code>@LoadBalanced</code>来开启Eureka的负载均衡。</p>
<p>如<code>order-service</code>中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="nd">@LoadBalanced</span>   <span class="c1">// 开启Eureka负载均衡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="n">RestTemplate</span> <span class="nf">restTemplate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">RestTemplate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>服务消费者通过Eureka，使用<code>RestTemplate</code>调用其他模块。</p>
<p>如<code>order-service</code>调用<code>user-service</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">OrderMapper</span> <span class="n">orderMapper</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 注入RestTemplate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RestTemplate</span> <span class="n">restTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Order</span> <span class="nf">queryOrderById</span><span class="o">(</span><span class="n">Long</span> <span class="n">orderId</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1.查询订单
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">orderMapper</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">orderId</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2.利用RestTemplate发起HTTP请求，查询用户信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 2.1.URL路径（将服务的IP改为服务的名称）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;http://user-service/user/&#34;</span> <span class="o">+</span> <span class="n">order</span><span class="o">.</span><span class="na">getUserId</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2.2.发送HTTP（GET）请求，实现远程调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForObject</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 3.封装User到Order
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">order</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 4.返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">order</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这里面最主要的是，配置了Eureka后，使用<code>RestTemplate</code>调用其他模块时，URL中的IP可以改为服务提供者（被调模块）的服务名称，并且可以自动做负载均衡。即，原本是使用<code>localhost:8081</code>这个IP端口来调用<code>user-service</code>，但是现在可以直接使用<code>http://user-service</code>来调用<code>user-service</code>提供的接口。</p>
</li>
</ol>
<h2 id="eureka-服务注册配置总结" data-numberify>Eureka 服务注册配置总结<a class="anchor ms-1" href="#eureka-服务注册配置总结"></a></h2>
<p>按照角色配置Eureka，至少需要做如下配置：</p>
<ul>
<li>
<p>Eureka Server：</p>
<p>依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--Eureka服务端--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>配置（<code>application.yml</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Eureka服务端口（视具体情况进行更改）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8180</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 服务名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">eureka-server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">eureka</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">client</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">service-url</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Eureka的地址信息（如果有多个，则用逗号”,“隔开）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">defaultZone</span><span class="p">:</span><span class="w"> </span><span class="l">http://localhost:8180/eureka</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>Eureka Client：</p>
<p>依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Eureka客户端 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>配置（<code>application.yml</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 服务名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">clinet-1-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">eureka</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">client</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">service-url</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># defaultZone要与eureka-server中的defaultZone相同</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">defaultZone</span><span class="p">:</span><span class="w"> </span><span class="l">http://localhost:8180/eureka</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>服务消费者：</p>
<p>开启负载均衡：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="nd">@LoadBalanced</span>   <span class="c1">// 开启Eureka负载均衡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="n">RestTemplate</span> <span class="nf">restTemplate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">RestTemplate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用<code>RestTemplate</code>调用其他服务时，URL中的IP可以改为服务提供者（被调模块）的服务名称。</p>
</li>
</ul>
<hr>
<h1 id="idea-配置模块的多个实例" data-numberify>Idea 配置模块的多个实例<a class="anchor ms-1" href="#idea-配置模块的多个实例"></a></h1>
<ol>
<li>
<p>复制现有的配置：</p>
<p><picture><img class="img-fluid " alt="复制现有的配置" src="/docs/spring/springcloud/eureka/uTools_1687857604691.png" loading="lazy" width="491" height="267" />
</picture>

</p>
</li>
<li>
<p>使用VM Options修改端口，避免与原有的模块产生端口冲突：</p>
<p><picture><img class="img-fluid " alt="修改端口" src="/docs/spring/springcloud/eureka/uTools_1687857691207.png" loading="lazy" width="557" height="317" />
</picture>

</p>
</li>
</ol>
<hr>
<h1 id="ribbon-负载均衡" data-numberify>Ribbon 负载均衡<a class="anchor ms-1" href="#ribbon-负载均衡"></a></h1>
<p>Ribbon是一款负载均衡组件，而Eureka的负载均衡则是基于Ribbon实现的。如上例（<code>order-service</code>）中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="nd">@LoadBalanced</span>   <span class="c1">// 开启Eureka负载均衡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="n">RestTemplate</span> <span class="nf">restTemplate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">RestTemplate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="负载均衡流程" data-numberify>负载均衡流程<a class="anchor ms-1" href="#负载均衡流程"></a></h2>
<p>Eureka中使用注解<code>@LoadBalanced</code>标识<code>RestTemplate</code>，从而实现拦截<code>RestTemplate</code>发起的请求，并获取相应的服务信息和执行负载均衡策略。</p>
<p><code>@LoadBalanced</code>注解使用<code>LoadBalancerInterceptor</code>来执行请求的拦截。<code>LoadBalancerInterceptor</code>实现了<code>ClientHttpRequestInterceptor</code>接口。而<code>ClientHttpRequestInterceptor</code>接口主要用于拦截客户端HTTP请求。</p>
<p><code>ClientHttpRequestInterceptor</code>接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@FunctionalInterface</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ClientHttpRequestInterceptor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">ClientHttpResponse</span> <span class="nf">intercept</span><span class="o">(</span><span class="n">HttpRequest</span> <span class="n">request</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">body</span><span class="o">,</span> <span class="n">ClientHttpRequestExecution</span> <span class="n">execution</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>拦截流程：</p>
<ol>
<li>
<p>使用<code>RestTemplate</code>发送请求时，Eureka会使用<code>LoadBalancerInterceptor</code>的<code>intercept()</code>来执行拦截：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoadBalancerInterceptor</span> <span class="kd">implements</span> <span class="n">ClientHttpRequestInterceptor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">LoadBalancerClient</span> <span class="n">loadBalancer</span><span class="o">;</span>    <span class="c1">// 负载均衡客户端
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ClientHttpResponse</span> <span class="nf">intercept</span><span class="o">(</span><span class="kd">final</span> <span class="n">HttpRequest</span> <span class="n">request</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">body</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="kd">final</span> <span class="n">ClientHttpRequestExecution</span> <span class="n">execution</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">            获取请求发出的URL
</span></span></span><span class="line"><span class="cl"><span class="cm">            例如order-service中获取订单信息时，会发出[http://user-service/user/{userId}]这个请求
</span></span></span><span class="line"><span class="cl"><span class="cm">            这里的request.getURI()会获取到[http://user-service/user/{userId}]这个请求的URI
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="kd">final</span> <span class="n">URI</span> <span class="n">originalUri</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getURI</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">            通过URI获取请求的Host
</span></span></span><span class="line"><span class="cl"><span class="cm">            如：user-service
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">serviceName</span> <span class="o">=</span> <span class="n">originalUri</span><span class="o">.</span><span class="na">getHost</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Assert</span><span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="n">serviceName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;Request URI does not contain a valid hostname: &#34;</span> <span class="o">+</span> <span class="n">originalUri</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">            将Host作为Eureka客户端名称，获取相应的服务信息并执行负载均衡策略
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">loadBalancer</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">serviceName</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                <span class="k">this</span><span class="o">.</span><span class="na">requestFactory</span><span class="o">.</span><span class="na">createRequest</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">body</span><span class="o">,</span> <span class="n">execution</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>LoadBalancerClient</code>是一个客户端执行负载均衡的接口，当实际执行时，使用的是<code>RibbonLoadBalancerClient</code>这个实现类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RibbonLoadBalancerClient</span> <span class="kd">implements</span> <span class="n">LoadBalancerClient</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 实际执行的是这个方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">execute</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">serviceId</span><span class="o">,</span> <span class="c1">// 传入的是serviceName，如 user-service
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">LoadBalancerRequest</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">request</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">            <span class="n">Object</span> <span class="n">hint</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">            根据serviceId获取负载均衡器
</span></span></span><span class="line"><span class="cl"><span class="cm">            loadBalancer中有这么两个属性：
</span></span></span><span class="line"><span class="cl"><span class="cm">            - AllServerList
</span></span></span><span class="line"><span class="cl"><span class="cm">            - UpServerList
</span></span></span><span class="line"><span class="cl"><span class="cm">            它们记录了获取到的Eureka客户端信息
</span></span></span><span class="line"><span class="cl"><span class="cm">            实际执行时，loadBalancer的类型是ZoneAwareLoadBalancer
</span></span></span><span class="line"><span class="cl"><span class="cm">            ZoneAwareLoadBalancer继承了DynamicServerListLoadBalancer
</span></span></span><span class="line"><span class="cl"><span class="cm">            在loadBalancer中，使用IRule定义负载均衡策略
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="n">ILoadBalancer</span> <span class="n">loadBalancer</span> <span class="o">=</span> <span class="n">getLoadBalancer</span><span class="o">(</span><span class="n">serviceId</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">            根据LoadBalancer，执行负载均衡策略，获取Eureka客户端的真实服务地址
</span></span></span><span class="line"><span class="cl"><span class="cm">            如，获取到 localhost:8081
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="n">Server</span> <span class="n">server</span> <span class="o">=</span> <span class="n">getServer</span><span class="o">(</span><span class="n">loadBalancer</span><span class="o">,</span> <span class="n">hint</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="负载均衡策略" data-numberify>负载均衡策略<a class="anchor ms-1" href="#负载均衡策略"></a></h2>
<p>Ribbon的负载均衡策略是使用<code>IRule</code>这个接口来定义。在Eureka中给出了几个负载均衡策略的实现，它们的继承关系图如下：</p>
<p><picture><img class="img-fluid " alt="负载均衡策略继承关系图" src="/docs/spring/springcloud/eureka/uTools_1687859350530.png" loading="lazy" width="1067" height="418" />
</picture>

</p>
<p>Eureka中负载均衡默认的实现是<code>ZoneAvoidanceRule</code>，它们的含义如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>内置负载均衡规则类</strong></th>
<th><strong>规则描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>RoundRobinRule</code></td>
<td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td>
</tr>
<tr>
<td style="text-align:center"><code>AvailabilityFilteringRule</code></td>
<td>对以下两种服务器进行忽略：<ul><li>短路的服务器：<br>在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。<br>短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。</li><li>并发数过高的服务器：<br>如果一个服务器的并发连接数过高，配置了<code>AvailabilityFilteringRule</code>规则的客户端也会将其忽略。<br>并发连接数的上限，可以由客户端的<code>&lt;clientName&gt;.&lt;clientConfigNameSpace&gt;.ActiveConnectionsLimit</code>属性进行配置。</li></ol></td>
</tr>
<tr>
<td style="text-align:center"><code>WeightedResponseTimeRule</code></td>
<td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。<br>这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td>
</tr>
<tr>
<td style="text-align:center"><strong><code>ZoneAvoidanceRule</code></strong></td>
<td>以区域可用的服务器为基础进行服务器的选择。<br>使用Zone对服务器进行分类（这个Zone可以理解为一个机房、一个机架等）。而后再对Zone内的多个服务做轮询。<br>在配置服务注册时，Zone的值可以被设置（按照服务器所在的地理位置进行设置）。使用此规则，服务消费者会优先选择跟自己在同一个Zone内的服务，然后再做轮询。</td>
</tr>
<tr>
<td style="text-align:center"><code>BestAvailableRule</code></td>
<td>忽略那些短路的服务器，并选择并发数较低的服务器。</td>
</tr>
<tr>
<td style="text-align:center"><code>RandomRule</code></td>
<td>随机选择一个可用的服务器。</td>
</tr>
<tr>
<td style="text-align:center"><code>RetryRule</code></td>
<td>重试机制的选择逻辑</td>
</tr>
</tbody>
</table>
<h2 id="配置负载均衡规则" data-numberify>配置负载均衡规则<a class="anchor ms-1" href="#配置负载均衡规则"></a></h2>
<p>配置负载均衡规则有两种方式：</p>
<ul>
<li>
<p>配置<strong>全局默认</strong>的负载均衡规则：</p>
<p>在任何一个配置类或新建一个配置类，然后添加一个新的Bean。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">IRule</span> <span class="nf">getLoadBalancerRule</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 此处以RandomRule为例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="k">new</span> <span class="n">RandomRule</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用Bean的方式配置负载均衡规则，无论当前服务远程调用哪个服务提供者，都是采用这个Bean里面配置的规则。</p>
</li>
<li>
<p>为<strong>指定的服务提供者</strong>配置单独的负载均衡规则：</p>
<p>可以在<code>application.yml</code>中使用<code>serverName.ribbon.NFLoadBalancerRuleClassName</code>配置指定服务的负载均衡规则，它的值是具体规则的实现类的全类名。</p>
<p>例如在<code>order-service</code>中配置<code>user-service</code>的负载均衡规则：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">user-service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ribbon</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 负载均衡规则</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">NFLoadBalancerRuleClassName</span><span class="p">:</span><span class="w"> </span><span class="l">com.netflix.loadbalancer.RandomRule</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
<h2 id="ribbon-饥饿加载" data-numberify>Ribbon 饥饿加载<a class="anchor ms-1" href="#ribbon-饥饿加载"></a></h2>
<ul>
<li>懒加载：第一次访问时才加载。</li>
<li>饥饿加载：在项目启动时就开始加载。</li>
</ul>
<p>Ribbon默认是采用懒加载，即第一次访问时才会去创建<code>LoadBalanceClient</code>，请求时间会很长。而饥饿加载则会在项目启动时创建，降低第一次访问的耗时。</p>
<p>可以在<code>application.yml</code>中，通过下面配置开启Ribbon的饥饿加载：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">ribbon</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">eager-load</span><span class="p">:</span><span class="w"> </span><span class="c"># 饥饿加载</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># 开启饥饿加载</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">clients</span><span class="p">:</span><span class="w"> </span><span class="l">user-service</span><span class="w"> </span><span class="c"># 指定对userservice这个服务饥饿加载</span><span class="w">
</span></span></span></code></pre></div><p><code>ribbon.eager-load.clients</code>是一个集合类型，如果要对多个服务提供者开启饥饿加载，可以这样配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">ribbon</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">eager-load</span><span class="p">:</span><span class="w"> </span><span class="c"># 饥饿加载</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># 开启饥饿加载</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 对多个服务提供者开启饥饿加载</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">clients</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">clinet-1-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">clinet-2-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">clinet-3-service</span><span class="w">
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Feign</title>
      <link>/docs/spring/springcloud/feign/</link>
      <pubDate>Mon, 26 Jun 2023 11:46:12 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/feign/</guid>
      <description><![CDATA[尽管使用了注册中心来解决URL的硬编码等问题，但是如今使用RestTemplate还是存在以下问题： 代码可读性差，编程体验不统一； 参数复杂U]]></description>
      <content:encoded><![CDATA[<p>尽管使用了注册中心来解决URL的硬编码等问题，但是如今使用<code>RestTemplate</code>还是存在以下问题：</p>
<ul>
<li>代码可读性差，编程体验不统一；</li>
<li>参数复杂URL难以维护。</li>
</ul>
<p>Feign是一个声明式的HTTP客户端，作用于服务消费者，在服务消费者中为服务提供者创建一个HTTP远程调用。官方地址：<a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener noreferrer">https://github.com/OpenFeign/feign<i class="fas fa-external-link-square-alt ms-1"></i></a>。其作用就是帮助我们优雅的实现HTTP请求的发送，解决上面提到的问题。</p>
<h1 id="使用-feign" data-numberify>使用 Feign<a class="anchor ms-1" href="#使用-feign"></a></h1>
<p>使用Feign非常简单，大致分为以下步骤：</p>
<ol>
<li>
<p>在<code>pom.xml</code>中引入Feign客户端依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-openfeign<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>在项目的启动类上添加注解<code>@EnableFeignClients</code>以开启Feign的功能。例如为<code>order-service</code>（服务消费者）开启Feign：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableFeignClients</span>
</span></span><span class="line"><span class="cl"><span class="nd">@MapperScan</span><span class="o">(</span><span class="s">&#34;asia.linner.demo.order.mapper&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">OrderApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>为服务提供者编写一个<code>FeignClient</code>接口。例如在<code>order-service</code>（消费者）中为<code>user-service</code>（提供者）编写<code>FeignClient</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@FeignClient</span><span class="o">(</span><span class="s">&#34;user-service&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserClient</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/user/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">Long</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>@FeignClient</code>：标注该接口为<code>FeignClient</code>，其<code>value</code>属性指定一个客户端的服务名称。</li>
<li><code>@GetMapping</code>：为了方便使用，Feign使用的是Spring的注解，其用法和作用与Spring中的类似。</li>
</ul>
<blockquote>
<p><code>FeignClient</code>可以放在项目中的<code>clients</code>包下。</p>
</blockquote>
</li>
<li>
<p>通过<code>FeignClient</code>远程调用服务。例如在<code>order-service</code>（消费者）中通过<code>FeignClient</code>远程调用<code>user-service</code>（提供者）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">OrderMapper</span> <span class="n">orderMapper</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 注入Feign客户端
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserClient</span> <span class="n">userClient</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Order</span> <span class="nf">queryOrderById</span><span class="o">(</span><span class="n">Long</span> <span class="n">orderId</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1.查询订单
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">orderMapper</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">orderId</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2.利用Feign远程调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userClient</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getUserId</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 3.封装User到Order
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">order</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 4.返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">order</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<blockquote>
<p>注意：使用了<code>FeignClient</code>，原本声明<code>RestTemplate</code>的<code>Bean</code>可以删除掉。因为使用<code>FeignClient</code>并不需要<code>RestTemplate</code>的<code>Bean</code>。</p>
</blockquote>
<hr>
<h1 id="feignclient-配置" data-numberify>FeignClient 配置<a class="anchor ms-1" href="#feignclient-配置"></a></h1>
<p>Feign可以修改的配置如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">作用</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>feign.Logger.Level</code></td>
<td style="text-align:center">修改日志级别</td>
<td style="text-align:left">Feign包含四种不同的日志级别：<br><ul><li><code>NONE</code>：不记录任何日志。</li><li><code>BASIC</code>：基础日志级别。记录请求方法、URL以及响应状态代码和执行时间。</li><li><code>HEADERS</code>：记录基本信息以及请求和响应头信息。</li><li><code>FULL</code>：全日志级别。记录基本信息以及请求和响应头信息、请求和响应体信息。</li></ul></td>
</tr>
<tr>
<td style="text-align:center"><code>feign.codec.Decoder</code></td>
<td style="text-align:center">响应结果的解析器</td>
<td style="text-align:left">HTTP远程调用的结果做解析，例如解析JSON字符串为Java对象。</td>
</tr>
<tr>
<td style="text-align:center"><code>feign.codec.Encoder</code></td>
<td style="text-align:center">请求参数编码</td>
<td style="text-align:left">将请求参数编码，便于通过HTTP请求发送。</td>
</tr>
<tr>
<td style="text-align:center"><code>feign.Contract</code></td>
<td style="text-align:center">支持的注解格式</td>
<td style="text-align:left">默认是SpringMVC的注解。</td>
</tr>
<tr>
<td style="text-align:center"><code>feign.Retryer</code></td>
<td style="text-align:center">失败重试机制</td>
<td style="text-align:left">请求失败的重试机制，默认是没有，不过会使用Ribbon的重试。</td>
</tr>
</tbody>
</table>
<p>一般需要配置的是日志级别。有以下几种配置方式：</p>
<p>在<code>application.yml</code>中对全局进行配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">feign</span><span class="p">:</span><span class="w">          </span><span class="c"># Feign配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">client</span><span class="p">:</span><span class="w">       </span><span class="c"># 客户端配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">default</span><span class="p">:</span><span class="w">  </span><span class="c"># 默认配置（全局生效）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">logger-level</span><span class="p">:</span><span class="w"> </span><span class="l">FULL </span><span class="w"> </span><span class="c"># 日志级别</span><span class="w">
</span></span></span></code></pre></div><p>在<code>application.yml</code>中对指定的服务进行配置。例如在<code>order-service</code>中对<code>user-service</code>进行配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">feign</span><span class="p">:</span><span class="w">                </span><span class="c"># Feign配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">client</span><span class="p">:</span><span class="w">             </span><span class="c"># 客户端配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">user-service</span><span class="p">:</span><span class="w">   </span><span class="c"># 指定服务进行配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">logger-level</span><span class="p">:</span><span class="w"> </span><span class="l">HEADERS  </span><span class="w"> </span><span class="c"># 日志级别</span><span class="w">
</span></span></span></code></pre></div><p>只需要将全局默认配置中的<code>default</code>改成指定的服务名称即可。</p>
<p>另外一种方法是创建<code>FeignClient</code>配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">feign.Logger</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * FeignClient配置类
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultFeignClientConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Logger</span><span class="o">.</span><span class="na">Level</span> <span class="nf">getFeignLogLevel</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Logger</span><span class="o">.</span><span class="na">Level</span><span class="o">.</span><span class="na">BASIC</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>注意：<code>FeignClient</code>配置类中的<code>Logger</code>导入的是<code>feign</code>包下的<code>Logger</code>。并且在<code>application.yml</code>中的配置需要注释掉，否则即使开启了配置，配置类中的配置也不会生效。因为<code>application.yml</code>中的配置会将配置类中的配置覆盖掉。</p>
</blockquote>
<p>创建好了<code>FeignClient</code>配置类，这些配置并不会生效。因为<code>FeignClient</code>配置类中并没有任何信息告诉Spring这个是个配置类。所以需要对配置类进行声明。</p>
<p>有两种声明方式，一种是在项目的启动类中进行声明，告诉Spring这个是<code>FeignClient</code>的配置类。并且这种声明方式会在全局生效。声明<code>FeignClient</code>的配置类需要在启动类中使用<code>@EnableFeignClients</code>注解，并为其<code>defaultConfiguration</code>属性指定该<code>FeignClient</code>的配置类的<code>class</code>。例如为<code>order-service</code>声明该配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableFeignClients</span><span class="o">(</span><span class="n">defaultConfiguration</span> <span class="o">=</span> <span class="n">DefaultFeignClientConfig</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>  <span class="c1">// 全局默认的Feign配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@MapperScan</span><span class="o">(</span><span class="s">&#34;asia.linner.demo.order.mapper&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">OrderApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>另外一种方式是，在某个具体服务<code>FeignClient</code>的接口中进行声明。该方式使用<code>@FeignClient</code>注解，并为其<code>configuration</code>属性指定一个<code>FeignClient</code>配置类的<code>class</code>。例如在<code>order-service</code>中为<code>user-service</code>声明使用一个<code>UserFeignClientConfig</code>配置类（假设已经创建好了该配置类）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;user-service&#34;</span><span class="o">,</span> <span class="n">configuration</span> <span class="o">=</span> <span class="n">UserFeignClientConfig</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserClient</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/user/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">Long</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>记录日志会损耗一部分性能，所以除了在开发过程中使用<code>FULL</code>日志级别。在生产环境中最好使用<code>BASIC</code>或<code>NONE</code>日志级别以减少性能损耗（尽量使用<code>BASIC</code>）。</p>
</blockquote>
<hr>
<h1 id="配置连接池" data-numberify>配置连接池<a class="anchor ms-1" href="#配置连接池"></a></h1>
<p>每次HTTP请求，都需要三次握手去建立连接，完成后再断开连接。在高并发的情况下，这样往复地操作会造成的性能损耗是比较大的。引入连接池是为了减少这种性能的损耗。</p>
<p>Feign底层发起HTTP请求，依赖于其它的框架。其底层客户端实现包括：</p>
<table>
<thead>
<tr>
<th style="text-align:center">连接池</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">URLConnection</td>
<td style="text-align:left">默认实现，不支持连接池</td>
</tr>
<tr>
<td style="text-align:center">Apache HttpClient</td>
<td style="text-align:left">支持连接池</td>
</tr>
<tr>
<td style="text-align:center">OKHttp</td>
<td style="text-align:left">支持连接池</td>
</tr>
</tbody>
</table>
<blockquote>
<p>提高Feign的性能主要手段就是使用HttpClient或OKHttp连接池代替默认的URLConnection。</p>
</blockquote>
<p>这里选择使用HttpClient。首先在消费者中引入其依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--HttpClient依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>io.github.openfeign<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>feign-httpclient<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>然后在<code>application.yml</code>中修改配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">feign</span><span class="p">:</span><span class="w">                </span><span class="c"># Feign配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">httpclient</span><span class="p">:</span><span class="w"> </span><span class="c"># HttpClient配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># 如果要使用OKHttp，在feign.okhttp中做相应的配置即可</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># 支持HttpClient的开关</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="c"># 默认是true，但是没引入依赖不会生效</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max-connections</span><span class="p">:</span><span class="w"> </span><span class="m">200</span><span class="w">  </span><span class="c"># 最大连接数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max-connections-per-route</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="w"> </span><span class="c"># 单个请求路径的最大连接数</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>提高Feign的性能还可以对连接池客户端的最大连接数根据实际情况进行相应的配置调整。</p>
</blockquote>
<hr>
<h1 id="抽取api接口" data-numberify>抽取API接口<a class="anchor ms-1" href="#抽取api接口"></a></h1>
<p>由于<code>FeignClient</code>接口中编写的接口方法与其对应的提供者中的Controller的方法一致。所以可以对<code>FeignClient</code>接口和Controller做一个统一的API接口抽取，然后再通过集成的方式分别去实现<code>FeignClient</code>和Controller。但是这样的方法有以下缺点：</p>
<ul>
<li>
<p>服务提供方、服务消费方紧耦合。</p>
</li>
<li>
<p>参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解。</p>
<p>在API父接口的方法参数中使用的注解不会对Spring（也就是Controller）生效。即<code>@PathVariable</code>、<code>@RequestParam</code>这样的注解，在API父接口中声明了，在对应的Controller中也需要再次声明。</p>
</li>
</ul>
<p>以<code>user-service</code>为例：</p>
<ul>
<li>
<p>API父接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserAPI</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/user/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">Long</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>FeignClient</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@FeignClient</span><span class="o">(</span><span class="s">&#34;user-service&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserClient</span> <span class="o">{}</span>
</span></span></code></pre></div></li>
<li>
<p>Controller：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserAPI</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* 业务代码... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>这种方法的优点是简单、实现了代码共享，遵循了面向契约的编程思想。</p>
</blockquote>
<hr>
<h1 id="抽取-feign-api-模块" data-numberify>抽取 feign-api 模块<a class="anchor ms-1" href="#抽取-feign-api-模块"></a></h1>
<p>另外一种方式是将所有的提供者对应的FeignClient抽取为独立的模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，通过Maven引入依赖的方式提供给所有消费者使用。</p>
<p>假设有多个消费者都需要调用到同一个提供者。如果让消费者分别实现自己的FeignClient，不仅会有许多冗余的代码，而且也不利于维护。但是如果使用这种方式将FeignClient抽取出来，可以由实现提供者的程序员来提供对应的feign-api实现。</p>
<p>这样的方法也有一些缺点，在使用一个提供者的接口时，需要同时引入该提供者的所有接口和其它提供者的所有接口。</p>
<p>抽取<code>feign-api</code>的步骤：</p>
<ol>
<li>
<p>创建一个新的模块，命名为<code>feign-api</code>。</p>
</li>
<li>
<p>在<code>feign-api</code>中引入Feign的Stater依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Feign客户端依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-openfeign<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>如果要默认使用<code>HttpClient</code>连接池，还需要导入其坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--HttpClient依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>io.github.openfeign<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>feign-httpclient<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注：引入坐标是为了在消费者的<code>pom.xml</code>中可以不同显式地导入<code>HttpClient</code>的依赖（使用Maven的依赖传递），但是<code>HttpClient</code>的配置还是得在消费者中的<code>application.yml</code>中配置。</p>
<p>如果在<code>feign-api</code>中创建<code>application.yml</code>中并配置<code>HttpClient</code>，这样的配置是不会在消费者中生效的。因为<code>feign-api</code>没有启动类，而且消费者的启动类也不会使用<code>feign-api</code>中<code>application.yml</code>的配置。除非使用配置类编写对<code>HttpClient</code>的配置，并且在消费者中启用这个配置类。</p>
</blockquote>
</li>
<li>
<p>将所有消费者的<code>FeignClient</code>、POJO和<code>DefaultFeignClientConfig</code>都抽取到<code>feign-api</code>模块中。</p>
<blockquote>
<p>注：<code>DefaultFeignClientConfig</code>的抽取是对所有的<code>FeignClient</code>做一个默认的配置抽取。</p>
</blockquote>
</li>
<li>
<p>在消费者中引入<code>feign-api</code>依赖。</p>
</li>
<li>
<p>在消费者中使用<code>feign-api</code>提供的API接口。</p>
<blockquote>
<p>注：需要修改消费者的启动类，在消费者的启动类上使用<code>@EnableFeignClients</code>注解的<code>basePackages</code>或<code>clients</code>属性指定扫描的<code>FeignClient</code>包或具体的<code>FeignClient</code>类，让消费者的启动类能扫描到<code>feign-api</code>的<code>FeignClient</code>。</p>
</blockquote>
</li>
</ol>
<p>以<code>order-service</code>（消费者）和<code>user-service</code>（提供者）为例：</p>
<ol>
<li>
<p>创建<code>feign-api</code>，并导入Feign依赖。</p>
</li>
<li>
<p>将原本编写在<code>order-service</code>中的<code>UserClient</code>、<code>User</code>和<code>DefaultFeignClientConfig</code>抽取出来，放在<code>feign-api</code>中对应的包下。例如：</p>
<p><code>asia.linner.demo.feign</code>（<code>feign-api</code>的包名）下的包结构:</p>
<ul>
<li><code>clients</code>：
<ul>
<li><code>UserClient.java</code></li>
</ul>
</li>
<li><code>pojo</code>：
<ul>
<li><code>User.java</code></li>
</ul>
</li>
<li><code>config</code>：
<ul>
<li><code>DefaultFeignClientConfig.java</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>抽取完成后，原本在<code>order-service</code>中的<code>UserClient</code>、<code>User</code>和<code>DefaultFeignClientConfig</code>都可以删除。但是需要注意复制在<code>feign-api</code>中的<code>UserClient</code>、<code>User</code>和<code>DefaultFeignClientConfig</code>它们的包名要改成<code>feign-api</code>的包名。</p>
</blockquote>
</li>
<li>
<p>在<code>order-service</code>中导入<code>feign-api</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--引入抽取的feign-api模块--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>asia.linner.demo<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>feign-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><blockquote>
<p>在<code>order-service</code>中的Feign依赖可以删除；如果有在<code>feign-api</code>中导入并配置HttpClient，HttpClient的依赖也可以删除。需要注意引入<code>order-service</code>中的<code>UserClient</code>、<code>User</code>和<code>DefaultFeignClientConfig</code>它们的包名要改成<code>feign-api</code>的包名。</p>
</blockquote>
</li>
<li>
<p>让<code>order-service</code>的启动类扫描<code>FeignClient</code>。</p>
<p>因为<code>feign-api</code>和<code>order-service</code>的包名并不相同（如<code>asia.linner.demo.feign</code>和<code>asia.linner.demo.order</code>），所以在没有扫描包指定的情况下<code>order-service</code>的启动类并不能扫描到<code>feign-api</code>中的<code>UserClient</code>，所以会导致<code>order-service</code>中的<code>UserClient</code>注入失败。</p>
<p>Feign的<code>@EnableFeignClients</code>注解提供了两种方式来让消费者的启动类扫描到<code>FeignClient</code>：</p>
<ul>
<li>
<p><code>basePackages</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableFeignClients</span><span class="o">(</span><span class="n">defaultConfiguration</span> <span class="o">=</span> <span class="n">DefaultFeignClientConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">basePackages</span> <span class="o">=</span> <span class="s">&#34;asia.linner.demo.feign.clients&#34;</span> <span class="c1">// 扫描整个clients包
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p><code>clients</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableFeignClients</span><span class="o">(</span><span class="n">defaultConfiguration</span> <span class="o">=</span> <span class="n">DefaultFeignClientConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">clients</span> <span class="o">=</span> <span class="o">{</span><span class="n">UserClient</span><span class="o">.</span><span class="na">class</span><span class="o">}</span>    <span class="c1">// 指定需要加载的FeignClient接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">)</span>
</span></span></code></pre></div><p><code>clients</code>属性的类型是一个<code>class</code>数组，所以可以指定多个<code>FeignClient</code>。推荐使用该方式。</p>
</li>
</ul>
<p>在上述方法中选一种，然后修改<code>order-service</code>的启动类即可。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Gateway</title>
      <link>/docs/spring/springcloud/gateway/</link>
      <pubDate>Mon, 26 Jun 2023 11:46:12 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/gateway/</guid>
      <description><![CDATA[网关 网关是所有微服务的统一入口。网关的核心功能特性： 请求路由：一切请求都必须先经过网关，但网关不处理业务，而是根据某种规则，把请求转发到某个]]></description>
      <content:encoded><![CDATA[<h1 id="网关" data-numberify>网关<a class="anchor ms-1" href="#网关"></a></h1>
<p>网关是所有微服务的统一入口。网关的核心功能特性：</p>
<ul>
<li><strong>请求路由</strong>：一切请求都必须先经过网关，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当路由的目标服务有多个时，还需要做<strong>负载均衡</strong>。</li>
<li><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</li>
<li><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</li>
</ul>
<p>在SpringCloud中网关的实现包括两种：</p>
<ul>
<li>Gateway：基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</li>
<li>Zuul：基于Servlet的实现，属于阻塞式编程。</li>
</ul>
<blockquote>
<p>Spring Cloud Gateway旨在为微服务架构提供一种简单有效的统一的API路由管理方式。</p>
</blockquote>
<hr>
<h1 id="创建-gateway-服务" data-numberify>创建 Gateway 服务<a class="anchor ms-1" href="#创建-gateway-服务"></a></h1>
<p>创建一个Gateway服务的基本步骤如下：</p>
<ol>
<li>
<p>创建一个新的gateway模块。</p>
</li>
<li>
<p>导入Gateway所需依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Nacos服务注册发现依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 网关Gateway依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-gateway<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>因为Gateway属于一个服务，所以需要创建并编写<code>GatewayApplication</code>启动类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GatewayApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">GatewayApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在配置文件<code>application.yml</code>中编写Gateway相关配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">10010</span><span class="w"> </span><span class="c"># 网关端口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gateway</span><span class="w"> </span><span class="c"># 服务名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nacos</span><span class="p">:</span><span class="w">  </span><span class="c"># Nacos配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">server-addr</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:8848</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">gateway</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">routes</span><span class="p">:</span><span class="w">   </span><span class="c"># 网关路由配置（是数组类型，可以配置多个）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">user-service </span><span class="w"> </span><span class="c"># 路由ID，自定义，只要唯一即可</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># uri支持以下两种方式，推荐使用lb方式</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># uri: http://localhost:8081  # 路由的目标地址，使用http表示固定地址（不推荐使用）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://user-service </span><span class="w"> </span><span class="c"># 路由的目标地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="c"># lb是Load Balance的缩写，表示负载均衡</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="c"># 后面是服务地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">predicates</span><span class="p">:</span><span class="w"> </span><span class="c"># 路由断言，判断请求是否符合路由规则的条件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">Path=/user/**</span><span class="w"> </span><span class="c"># 路径断言，匹配&#34;/user/&#34;开头的请求</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">order-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://${spring.cloud.gateway.routes[1].id} </span><span class="w"> </span><span class="c"># 通过yaml变量设置uri</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">predicates</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">Path=/order/**</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">Before=2037-01-20T17:42:47.789-07:00[America/Denver]</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>启动<code>GatewayApplication</code>，使用<code>localhost:10010</code>来访问系统上的服务。</p>
<p>例如访问<code>user-service</code>上的<code>/user/{id}</code>请求，就可以使用<code>http://localhost:10010/user/{id}</code>访问。获取<code>id</code>为<code>1</code>的<code>user</code>就访问<a href="http://localhost:10010/user/1" target="_blank" rel="noopener noreferrer"><code>http://localhost:10010/user/1</code><i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p>如上所述，访问<code>order-service</code>上的<code>/order/{id}</code>就使用<code>http://localhost:10010/order/{id}</code>访问。</p>
</li>
</ol>
<p>使用网关就可以通过网关来访问服务中的资源，并且还能做到负载均衡和权限控制等。</p>
<hr>
<h1 id="路由配置" data-numberify>路由配置<a class="anchor ms-1" href="#路由配置"></a></h1>
<p>Gateway的路由配置如上所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">gateway</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">routes</span><span class="p">:</span><span class="w">   </span><span class="c"># 网关路由配置（是数组类型，可以配置多个）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">user-service </span><span class="w"> </span><span class="c"># 路由ID，自定义，只要唯一即可</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># uri支持以下两种方式，推荐使用lb方式</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># uri: http://localhost:8081  # 路由的目标地址，使用http表示固定地址（不推荐使用）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://user-service </span><span class="w"> </span><span class="c"># 路由的目标地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="c"># lb是Load Balance的缩写，表示负载均衡</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="c"># 后面是服务地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">predicates</span><span class="p">:</span><span class="w"> </span><span class="c"># 路由断言，判断请求是否符合路由规则的条件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">Path=/user/**</span><span class="w"> </span><span class="c"># 路径断言，匹配&#34;/user/&#34;开头的请求</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">order-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://${spring.cloud.gateway.routes[1].id} </span><span class="w"> </span><span class="c"># 通过yaml变量设置uri</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">predicates</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">Path=/order/**</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">Before=2037-01-20T17:42:47.789-07:00[America/Denver]</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>
<p><code>cloud.gateway.routes</code>：Gateway的网关路由配置，数组类型。其元素可以有<code>id</code>、<code>uri</code>和<code>predicates</code>等属性。</p>
</li>
<li>
<p><code>id</code>属性：标识一个服务的路由配置的唯一ID。可由用户自定义，但在当前Gateway网关服务中不可重复存在。</p>
</li>
<li>
<p><code>uri</code>属性：标识当前服务路由配置的目标地址。有两种配置方式：</p>
<ul>
<li>
<p><code>http</code>：使用<code>http://</code>前缀，表示当前的地址是固定地址。例如<code>http://localhost:8081</code>。</p>
</li>
<li>
<p><code>lb</code>：使用<code>lb://</code>前缀，表示当前的地址是非固定的，需要做负载均衡。例如：<code>lb://user-service</code>。</p>
<blockquote>
<p><code>lb</code>是Load Balance的缩写，表示负载均衡。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><code>predicates</code>属性：路由断言，根据Gateway提供的断言工厂，对经过网关的请求进行权限的断言（也就是判断有没有权限可以访问该服务）。<code>predicates</code>是数组属性，可以配置多个规则。</p>
</li>
</ul>
<h1 id="断言工厂" data-numberify>断言工厂<a class="anchor ms-1" href="#断言工厂"></a></h1>
<p>在配置文件中写的断言规则，会被Predicate Factory读取并处理，转变为路由判断的条件。</p>
<p>例如上方<code>Path=/user/**</code>就是按照路径匹配，断言只有<code>/user/**</code>这个请求方式才能通过网关访问到<code>user-service</code>。<code>order-service</code>中的<code>Path=/order/**</code>同理。这两条规则是由<code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来处理的。</p>
<p>在Gateway中还有以下断言工厂：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>名称</strong></th>
<th><strong>说明</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>After</code></td>
<td>是某个时间点后的请求。</td>
<td><code>After=2037-01-20T17:42:47.789-07:00[America/Denver]</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Before</code></td>
<td>是某个时间点之前的请求。</td>
<td><code>Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Between</code></td>
<td>是某两个时间点之前的请求。</td>
<td><code>Between=2037-01-20T17:42:47.789-07:00[America/Denver], 2037-01-21T17:42:47.789-07:00[America/Denver]</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Cookie</code></td>
<td>请求必须包含某些cookie。</td>
<td><code>Cookie=chocolate, ch.p</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Header</code></td>
<td>请求必须包含某些header。</td>
<td><code>Header=X-Request-Id, \d+</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Host</code></td>
<td>请求必须是访问某个host（域名）。</td>
<td><code>Host=**.somehost.org,**.anotherhost.org</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Method</code></td>
<td>请求方式必须是指定方式。</td>
<td><code>Method=GET,POST</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Path</code></td>
<td>请求路径必须符合指定规则。</td>
<td><code>Path=/red/{segment},/blue/**</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Query</code></td>
<td>请求参数必须包含指定参数。</td>
<td><code>Query=name, Jack</code>，<br>或者<code>Query=name</code></td>
</tr>
<tr>
<td style="text-align:center"><code>RemoteAddr</code></td>
<td>请求者的ip必须是指定范围。</td>
<td><code>RemoteAddr=192.168.1.1/24</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Weight</code></td>
<td>权重处理。</td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="路由过滤器" data-numberify>路由过滤器<a class="anchor ms-1" href="#路由过滤器"></a></h1>
<p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理。</p>
<p>Spring提供了31种不同的路由过滤器工厂。常用的有：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>AddRequestHeader</code></td>
<td>给当前请求添加一个请求头。</td>
</tr>
<tr>
<td><code>RemoveRequestHeader</code></td>
<td>移除请求中的一个请求头。</td>
</tr>
<tr>
<td><code>AddResponseHeader</code></td>
<td>给响应结果中添加一个响应头。</td>
</tr>
<tr>
<td><code>RemoveResponseHeader</code></td>
<td>从响应结果中移除有一个响应头。</td>
</tr>
<tr>
<td><code>RequestRateLimiter</code></td>
<td>限制请求的流量。</td>
</tr>
</tbody>
</table>
<p>GatewayFilter的使用也是在<code>application.yml</code>中配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">gateway</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">user-service </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://user-service </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">predicates</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">Path=/user/** </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filters</span><span class="p">:</span><span class="w"> </span><span class="c"># 过滤器</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">AddRequestHeader=Hello, Hello Spring Cloud Gateway!</span><span class="w"> </span><span class="c"># 添加请求头</span><span class="w">
</span></span></span></code></pre></div><h1 id="defaultfilter" data-numberify>DefaultFilter<a class="anchor ms-1" href="#defaultfilter"></a></h1>
<p>上方所示的GatewayFilter只有在访问<code>user-service</code>时才能生效。Spring Cloud Gateway还提供了全局默认的GatewayFilter配置方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">gateway</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">user-service </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://userservice </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">predicates</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">Path=/user/**</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">order-service </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://order-service </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">predicates</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">Path=/order/**</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">default-filters</span><span class="p">:</span><span class="w"> </span><span class="c"># 默认过滤项</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">AddRequestHeader=Truth, Itcast is freaking awesome! </span><span class="w">
</span></span></span></code></pre></div><p>这种方式无论访问的是<code>user-service</code>还是<code>order-service</code>都会生效。</p>
<p>在Spring Cloud Gateway的官方文档中可以查找更多路由工厂及其使用方式：</p>
<p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories" target="_blank" rel="noopener noreferrer"><picture><img class="img-fluid " alt="Spring Cloud Gateway 官方文档" src="/docs/spring/springcloud/gateway/uTools_1690728134391.png" loading="lazy" width="1897" height="949" />
</picture>

<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<h1 id="globalfilter" data-numberify>GlobalFilter<a class="anchor ms-1" href="#globalfilter"></a></h1>
<p>GlobalFilter的作用与GatewayFilter的作用一样，也是处理一切进入网关的请求和微服务响应。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现，可以自定义实现。</p>
<p><code>GlobalFilter</code>接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">GlobalFilter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * 处理当前请求，有必要的话通过{@link GatewayFilterChain}将请求交给下一个过滤器处理
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * @param exchange 请求上下文，里面可以获取Request、Responses等信息
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * @param chain 用来把请求委托给下一个过滤器（放行请求）
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * @return {@code Mono&lt;Void&gt;} 返回一个当前过滤器业务结束的标示
</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>
</span></span><span class="line"><span class="cl">	<span class="n">Mono</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">filter</span><span class="o">(</span><span class="n">ServerWebExchange</span> <span class="n">exchange</span><span class="o">,</span> <span class="n">GatewayFilterChain</span> <span class="n">chain</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>注：<code>GlobalFilter</code>是在<code>org.springframework.cloud.gateway.filter</code>包下的，是属于Spring Cloud Gateway中的一部分。</p>
</blockquote>
<p>在Filter中编写自定义逻辑，可以实现登录状态判断、权限校验、请求限流等等功能。</p>
<p>假设实现一个简单的用户权限判断，其判断逻辑如下：</p>
<ul>
<li>请求参数中是否有<code>authorization</code>；</li>
<li><code>authorization</code>参数值是否为<code>admin</code>。</li>
</ul>
<p>如果同时满足则放行，否则拦截。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 识别用户权限
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Order</span><span class="o">(-</span><span class="mi">1</span><span class="o">)</span>   <span class="c1">// 顺序注解（定义过滤器的执行顺序），值越小优先级越高
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizeFilter</span> <span class="kd">implements</span> <span class="n">GlobalFilter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Mono</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">filter</span><span class="o">(</span><span class="n">ServerWebExchange</span> <span class="n">exchange</span><span class="o">,</span> <span class="n">GatewayFilterChain</span> <span class="n">chain</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取请求参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ServerHttpRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="n">exchange</span><span class="o">.</span><span class="na">getRequest</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">MultiValueMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getQueryParams</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取参数中的 authorization
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">auth</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="na">getFirst</span><span class="o">(</span><span class="s">&#34;authorization&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 判断参数值是否等于 admin
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="s">&#34;admin&#34;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">auth</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 4. 是则放行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// chain.filter()的返回值是Mono&lt;Void&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="n">chain</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">exchange</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 否则拦截
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ServerHttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">exchange</span><span class="o">.</span><span class="na">getResponse</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 5.1. 设置状态码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// HttpStatus.UNAUTHORIZED 表示用户未认证，状态码为401
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">response</span><span class="o">.</span><span class="na">setStatusCode</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">UNAUTHORIZED</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 5.2. 拦截请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// setComplete()的返回也是Mono&lt;Void&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">setComplete</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>定义GlobalFilter的过程可总结为：</p>
<ol>
<li>
<p>继承<code>GlobalFilter</code>接口。</p>
</li>
<li>
<p>实现<code>GlobalFilter.filter()</code>方法。</p>
<p>在实现<code>GlobalFilter.filter()</code>时，可以使用<code>exchange</code>对象获取请求的<code>Request</code>、<code>Response</code>、<code>Attribute</code>、<code>Session</code>、<code>FormData</code>等信息。其中获取到的<code>Request</code>和<code>Response</code>分别是<code>ServerHttpRequest</code>和<code>ServerHttpResponse</code>对象。</p>
<blockquote>
<p>使用<code>exchange</code>获取到的对象与使用标准的ServletAPI获取到的不一样。</p>
</blockquote>
<p>放行资源使用的是<code>chain</code>对象。该对象仅有一个方法<code>filter()</code>。该方法接受一个<code>ServerWebExchange</code>对象（也就是<code>exchange</code>，相当于将<code>exchange</code>传给下一级Filter），并返回给上层Filter一个<code>Mono&lt;Void&gt;</code>对象。放行资源时标准的用法是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">return</span> <span class="n">chain</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">exchange</span><span class="o">);</span>
</span></span></code></pre></div><p>拦截资源使用的是从<code>exchange</code>中获取的<code>response</code>对象。调用<code>response</code>对象的<code>setComplete()</code>方法，返回给上层Filter一个<code>Mono&lt;Void&gt;</code>。标准用法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">setComplete</span><span class="o">();</span>
</span></span></code></pre></div><p>这样相当于直接将业务结束标示<code>Mono&lt;Void&gt;</code>返回给上层Filter。而没有调用<code>chain.filter(exchange)</code>的话，请求也就不会进入到下层Filter。</p>
</li>
<li>
<p>为实现的<code>GlobalFilter</code>使用<code>@Component</code>注解，让Spring可以将该过滤器加载为Bean。</p>
</li>
<li>
<p>为实现的<code>GlobalFilter</code>定义顺序（有两种定义方式）。</p>
<p>定义<code>GlobalFilter</code>执行的优先级顺序的一个方法就是使用如上所示的<code>@Order</code>注解。在<code>@Order</code>注解中，其<code>value</code>属性是一个<code>int</code>类型的值，默认为<code>Integer.MAX_VALUE</code>也就是<code>int</code>类型的最大值<code>2147483647</code>（即$2^{31}-1$，按32位补码计算），<code>value</code>越小优先级越高。</p>
<p>另一种方式就是继承一个<code>Ordered</code>接口，并实现其<code>getOrder()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizeFilter</span> <span class="kd">implements</span> <span class="n">GlobalFilter</span><span class="o">,</span> <span class="n">Ordered</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Mono</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">filter</span><span class="o">(</span><span class="n">ServerWebExchange</span> <span class="n">exchange</span><span class="o">,</span> <span class="n">GatewayFilterChain</span> <span class="n">chain</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* 拦截/放行逻辑... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 定义过滤器执行顺序，效果与{@code @Order}相同
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return 过滤器的执行顺序，值越小优先级越高
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getOrder</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<h1 id="过滤器链" data-numberify>过滤器链<a class="anchor ms-1" href="#过滤器链"></a></h1>
<p>请求进入网关后会遇到三类过滤器：</p>
<ul>
<li>当前路由的过滤器；</li>
<li>默认过滤器（DefaultFilter）；</li>
<li>全局过滤器（GlobalFilter）。</li>
</ul>
<p>在请求路由后，Spring Cloud Gateway会将每个路由的路由过滤器、默认过滤器和全局过滤器合并到一个过滤器链（集合）中，并进行排序。然后Spring Cloud Gateway会根据请求，按顺序执行路由对应的过滤器链。</p>
<blockquote>
<p>在CSDN上看到一个Gateway执行流程图，确实是在请求路由之后才开始组装过滤器链：</p>
<p><picture><img class="img-fluid " alt="Gateway执行流程图" src="/docs/spring/springcloud/gateway/20210405115550799.png" loading="lazy" width="1076" height="1268" />
</picture>

</p>
<p>原文链接：<a href="https://blog.csdn.net/riemann_/article/details/115440231" target="_blank" rel="noopener noreferrer">Spring Cloud Gateway 源码剖析之Filter Chain过滤器链<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
</blockquote>
<p>路由过滤器和默认过滤器的实现十分接近，它们的本质都是<code>AddRequestHeaderGatewayFilterFactory</code>，并且最后通过<code>apply()</code>方法读取配置后生成统一的过滤器对象<code>GatewayFilter</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddRequestHeaderGatewayFilterFactory</span>
</span></span><span class="line"><span class="cl">		<span class="kd">extends</span> <span class="n">AbstractNameValueGatewayFilterFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">GatewayFilter</span> <span class="nf">apply</span><span class="o">(</span><span class="n">NameValueConfig</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">GatewayFilter</span><span class="o">()</span> <span class="o">{</span>    <span class="c1">// 生成过滤器对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">			<span class="kd">public</span> <span class="n">Mono</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">filter</span><span class="o">(</span><span class="n">ServerWebExchange</span> <span class="n">exchange</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">					<span class="n">GatewayFilterChain</span> <span class="n">chain</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">			<span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>全局过滤器则是通过<code>FilteringWebHandler</code>中的私有类<code>GatewayFilterAdapter</code>（过滤器适配器）生成，使用<code>loadFilters()</code>将所有<code>GlobalFilter</code>转化为<code>GatewayFilterAdapter</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FilteringWebHandler</span> <span class="kd">implements</span> <span class="n">WebHandler</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">GatewayFilter</span><span class="o">&gt;</span> <span class="n">globalFilters</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">FilteringWebHandler</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">GlobalFilter</span><span class="o">&gt;</span> <span class="n">globalFilters</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">globalFilters</span> <span class="o">=</span> <span class="n">loadFilters</span><span class="o">(</span><span class="n">globalFilters</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 将所有GlobalFilter链转为GatewayFilter
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">GatewayFilter</span><span class="o">&gt;</span> <span class="nf">loadFilters</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">GlobalFilter</span><span class="o">&gt;</span> <span class="n">filters</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">filters</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="n">filter</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">GatewayFilterAdapter</span> <span class="n">gatewayFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GatewayFilterAdapter</span><span class="o">(</span><span class="n">filter</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">filter</span> <span class="k">instanceof</span> <span class="n">Ordered</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="kt">int</span> <span class="n">order</span> <span class="o">=</span> <span class="o">((</span><span class="n">Ordered</span><span class="o">)</span> <span class="n">filter</span><span class="o">).</span><span class="na">getOrder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="k">new</span> <span class="n">OrderedGatewayFilter</span><span class="o">(</span><span class="n">gatewayFilter</span><span class="o">,</span> <span class="n">order</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">gatewayFilter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 加载全局过滤器，与所有的路由过滤器和默认过滤器合并后更具Order排序、组织过滤器链
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Mono</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">handle</span><span class="o">(</span><span class="n">ServerWebExchange</span> <span class="n">exchange</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">Route</span> <span class="n">route</span> <span class="o">=</span> <span class="n">exchange</span><span class="o">.</span><span class="na">getRequiredAttribute</span><span class="o">(</span><span class="n">GATEWAY_ROUTE_ATTR</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 加载所有的默认过滤器和路由过滤器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 加载方式是，先加载默认过滤器链，然后根据Route（规则）加载路由过滤器链，最后合并为一个过滤器链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">List</span><span class="o">&lt;</span><span class="n">GatewayFilter</span><span class="o">&gt;</span> <span class="n">gatewayFilters</span> <span class="o">=</span> <span class="n">route</span><span class="o">.</span><span class="na">getFilters</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">List</span><span class="o">&lt;</span><span class="n">GatewayFilter</span><span class="o">&gt;</span> <span class="n">combined</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="k">this</span><span class="o">.</span><span class="na">globalFilters</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">combined</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">gatewayFilters</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// TODO: needed or cached?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">AnnotationAwareOrderComparator</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">combined</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&#34;Sorted gatewayFilterFactories: &#34;</span> <span class="o">+</span> <span class="n">combined</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="n">DefaultGatewayFilterChain</span><span class="o">(</span><span class="n">combined</span><span class="o">).</span><span class="na">filter</span><span class="o">(</span><span class="n">exchange</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">GatewayFilterAdapter</span> <span class="kd">implements</span> <span class="n">GatewayFilter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kd">final</span> <span class="n">GlobalFilter</span> <span class="n">delegate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 私有类构造方法
</span></span></span><span class="line"><span class="cl"><span class="cm">         */</span>
</span></span><span class="line"><span class="cl">        <span class="n">GatewayFilterAdapter</span><span class="o">(</span><span class="n">GlobalFilter</span> <span class="n">delegate</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">delegate</span> <span class="o">=</span> <span class="n">delegate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 实现GatewayFilter的filter()方法
</span></span></span><span class="line"><span class="cl"><span class="cm">         */</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Mono</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">filter</span><span class="o">(</span><span class="n">ServerWebExchange</span> <span class="n">exchange</span><span class="o">,</span> <span class="n">GatewayFilterChain</span> <span class="n">chain</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">delegate</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">exchange</span><span class="o">,</span> <span class="n">chain</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span> <span class="cm">/* ... */</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>综上所述，Spring Cloud Gateway加载过滤器链的过程大致如下：</p>
<ol>
<li>
<p>加载默认过滤器链。</p>
</li>
<li>
<p>加载路由过滤器链。</p>
</li>
<li>
<p>合并默认过滤器链和路由过滤器链为一条过滤器链。</p>
<p>路由过滤器和默认过滤器的<code>Order</code>由Spring指定，默认是按照声明顺序从1递增。</p>
</li>
<li>
<p>加载全局过滤器链。</p>
</li>
<li>
<p>将全局过滤器链和 默认过滤器与路由过滤器合并的链 合并。</p>
<blockquote>
<p>所有的过滤器都有一个<code>int</code>类型的<code>Order</code>值，<code>Order</code>值越小，优先级越高，执行顺序越靠前。</p>
</blockquote>
<p>当过滤器的<code>Order</code>值一样时，会按照 <strong>默认过滤器 &gt; 路由过滤器 &gt; 全局过滤器</strong> 的顺序执行。</p>
</li>
</ol>
<h1 id="跨域问题处理" data-numberify>跨域问题处理<a class="anchor ms-1" href="#跨域问题处理"></a></h1>
<p>跨域是指发送与当前服务的域名（或端口、协议）不一致的请求。</p>
<p>跨域问题的产生原因是浏览器不允许Ajax请求对域名不同或端口不同的服务发起请求。例如：</p>
<ul>
<li>域名不同： <code>www.taobao.com</code>和<code>www.taobao.org</code>，<code>www.linner.asia</code>和<code>blog.linner.asia</code>。</li>
<li>域名相同，端口不同：<code>localhost:8080</code>和<code>localhost8081</code>。</li>
</ul>
<p>解决方案之一就是CORS（JSONP只支持GET请求，不推荐）。Gateway为我们提供了使用CORS处理跨域问题的方法，只需修改<code>application.yml</code>即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">gateway</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">globalcors</span><span class="p">:</span><span class="w"> </span><span class="c"># 全局的跨域处理</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">add-to-simple-url-handler-mapping</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># 解决options请求被拦截问题</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">cors-configurations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">&#39;[/**]&#39;</span><span class="p">:</span><span class="w">  </span><span class="c"># 对所有请求进行跨域处理</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">allowedOrigins</span><span class="p">:</span><span class="w"> </span><span class="c"># 允许跨域请求的网站</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;http://localhost:5500&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;http://http://127.0.0.1:5500&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">allowedMethods</span><span class="p">:</span><span class="w"> </span><span class="c"># 允许的跨域ajax的请求方式</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;GET&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;POST&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;DELETE&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;PUT&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;OPTIONS&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">allowedHeaders</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;*&#34;</span><span class="w"> </span><span class="c"># 允许在请求中携带的头信息（这里是允许所有）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">allowCredentials</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># 是否允许携带cookie</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">maxAge</span><span class="p">:</span><span class="w"> </span><span class="m">360000</span><span class="w">  </span><span class="c"># 每次跨域检测的有效期（在有效期内浏览器不会重复询问跨域请求）</span><span class="w">
</span></span></span></code></pre></div><p>模拟一个跨域问题：</p>
<ol>
<li>
<p>编写一个简单的页面，其中用Ajax发起跨域请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Document<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>模拟跨域问题<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://unpkg.com/axios/dist/axios.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 发送请求到Gateway网关上
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&#34;http://localhost:10010/user/1?authorization=admin&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">resp</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>使用Tomcat或Nginx之类的Web服务器放置这个Html页面。</p>
<blockquote>
<p>我在模拟时使用的是VS Code的<code>Live Server</code>插件。它会想Web服务器一样在你电脑上开一个端口加载页面，让你能实时预览你的页面效果。用在这里做个简单的静态页面Web服务器也很方便。</p>
<p><picture><img class="img-fluid " alt="Live Server 插件" src="/docs/spring/springcloud/gateway/uTools_1690798301739.png" loading="lazy" width="919" height="238" />
</picture>

</p>
<p>Live Server使用的端口是<code>5500</code>，当然也有可能不同。</p>
</blockquote>
</li>
<li>
<p>在给Gateway网关配置跨域请求处理之前，通过Web服务器访问页面，可以在浏览器控制台发现类似以下的报错：</p>
<p><picture><img class="img-fluid " alt="跨域报错信息" src="/docs/spring/springcloud/gateway/uTools_1690798524991.png" loading="lazy" width="702" height="66" />
</picture>

</p>
</li>
<li>
<p>配置成功后重启Gateway网关，再次访问页面，可以发现浏览器控制台打印出了跨域请求获取到的结果。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Nacos</title>
      <link>/docs/spring/springcloud/nacos/</link>
      <pubDate>Mon, 26 Jun 2023 11:46:12 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/nacos/</guid>
      <description><![CDATA[部署 Nacos Server 安装和配置好Nacos后，在nacos的bin目录中使用脚本启动： Windows： 单机启动： startup.cmd -m standalone Linux： 单机启动： sh startup.sh -m standalone 在浏]]></description>
      <content:encoded><![CDATA[<h1 id="部署-nacos-server" data-numberify>部署 Nacos Server<a class="anchor ms-1" href="#部署-nacos-server"></a></h1>
<p>安装和配置好Nacos后，在<code>nacos</code>的<code>bin</code>目录中使用脚本启动：</p>
<ul>
<li>
<p>Windows：</p>
<p>单机启动：</p>
<pre tabindex="0"><code>startup.cmd -m standalone
</code></pre></li>
<li>
<p>Linux：</p>
<p>单机启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sh startup.sh -m standalone
</span></span></code></pre></div></li>
</ul>
<p>在浏览器中使用对应的IP和端口访问，如<code>http://localhost:8848/nacos</code>。</p>
<p>默认账号和密码均为<code>nacos</code>。</p>
<blockquote>
<p>更多Nacos的部署方式：<a href="/p/nacos-%e9%83%a8%e7%bd%b2/">Nacos 部署</a></p>
</blockquote>
<hr>
<h1 id="服务注册中心" data-numberify>服务注册中心<a class="anchor ms-1" href="#服务注册中心"></a></h1>
<h2 id="nacos-客户端依赖" data-numberify>Nacos 客户端依赖<a class="anchor ms-1" href="#nacos-客户端依赖"></a></h2>
<ul>
<li>
<p>父工程：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">    Spring Cloud Alibaba
</span></span></span><span class="line"><span class="cl"><span class="c">    包含了Nacos的版本管理
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-alibaba-dependencies<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>2.2.5.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>客户端：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Nacos 客户端 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>配置Nacos（<code>application.yml</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nacos</span><span class="p">:</span><span class="w"> </span><span class="c"># Nacos配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">server-addr</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:8848</span><span class="w"> </span><span class="c"># Nacos服务地址</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
<h2 id="服务器集群" data-numberify>服务器集群<a class="anchor ms-1" href="#服务器集群"></a></h2>
<p>在Nacos中配置服务器集群，需要在<code>application.yml</code>使用来配置<code>spring.cloud.nacos.discovery.cluster-name</code>客户端服务器的集群名称：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nacos</span><span class="p">:</span><span class="w"> </span><span class="c"># Nacos配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">server-addr</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:8848</span><span class="w"> </span><span class="c"># Nacos服务地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">discovery</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">cluster-name</span><span class="p">:</span><span class="w"> </span><span class="l">HZ </span><span class="w"> </span><span class="c"># 集群名称</span><span class="w">
</span></span></span></code></pre></div><p>使用Nacos提供的集群配置，就可以将同一机房内的实例划分为一个集群。</p>
<p><picture><img class="img-fluid " alt="服务器集群" src="/docs/spring/springcloud/nacos/uTools_1688717062670.png" loading="lazy" width="1145" height="540" />
</picture>

</p>
<h2 id="负载均衡策略" data-numberify>负载均衡策略<a class="anchor ms-1" href="#负载均衡策略"></a></h2>
<p>Nacos提供了一个负载均衡策略<code>NacosRule</code>配置它和配置其它的Ribbon负载均衡策略相同。在<code>application.yml</code>中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">service-name</span><span class="p">:</span><span class="w"> </span><span class="c"># 服务名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ribbon</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 负载均衡规则</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Nacos提供的负载均衡策略</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">NFLoadBalancerRuleClassName</span><span class="p">:</span><span class="w"> </span><span class="l">com.alibaba.cloud.nacos.ribbon.NacosRule</span><span class="w">
</span></span></span></code></pre></div><p>当然也可以使用Bean的方式配置全局的负载均衡策略：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">IRule</span> <span class="nf">getLoadBalancerRule</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">NacosRule</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>NacosRule</code>会根据当前服务所在的集群，优先挑选与当前服务相同的集群。因为在同一机房同一集群的配置下，访问本地的集群（即相同的集群）速度将会更快。如果相同的集群下无可用实例，才会选择其它示例，并且控制台会给出警告。如果在相同集群的情况下，则使用随机轮询，随机选择一个实例。</p>
<h2 id="访问权重" data-numberify>访问权重<a class="anchor ms-1" href="#访问权重"></a></h2>
<p>默认情况下使用NacosRule是在同集群内随机挑选，并不会考虑机器的性能问题。</p>
<p>为了让性能更快的服务可以被分配到更多的请求，Nacos提供了权重配置来控制访问频率。使用访问权重，可以调节服务被访问到的概率。访问权重的<u>取值为0~1</u>，<u>默认值是1</u>，<u>权重越高</u>，被访问到的<u>概率就越大</u>。如果将访问<u>权重修改为0</u>，那么该实例将<u>永远不会被访问</u>。</p>
<blockquote>
<p>将访问权重修改为0并不意味着服务器停机，只是后续的请求不会使用到这个服务器，而当前该服务器所处理的请求还会继续。</p>
</blockquote>
<p>修改访问权重可以在Nacos控制台中修改：</p>
<p>例如，修改<code>user-service</code>的权重，找到<code>user-service</code>的实例列表，点击编辑，即可修改权重：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springcloud/nacos/image-20210713235133225.png" loading="lazy" width="1229" height="357" />
</picture>

</p>
<p>在弹出的编辑窗口，修改权重：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springcloud/nacos/image-20210713235235219.png" loading="lazy" width="749" height="639" />
</picture>

</p>
<h2 id="非临时实例" data-numberify>非临时实例<a class="anchor ms-1" href="#非临时实例"></a></h2>
<p>Nacos的服务实例（服务提供者）分为两种类型：</p>
<ul>
<li><strong>临时实例</strong>：如果实例宕机超过一定时间，会从服务列表剔除，是所有实例默认的类型。</li>
<li><strong>非临时实例</strong>（永久实例）：如果实例宕机，不会将其从服务列表剔除。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nacos</span><span class="p">:</span><span class="w"> </span><span class="c"># Nacos配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">server-addr</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:8848</span><span class="w"> </span><span class="c"># Nacos服务地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">discovery</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ephemeral</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">  </span><span class="c"># 注册为非临时实例</span><span class="w">
</span></span></span></code></pre></div><h2 id="环境隔离" data-numberify>环境隔离<a class="anchor ms-1" href="#环境隔离"></a></h2>
<p>Nacos提供了<code>namespace</code>（命名空间）来实现环境隔离功能。默认情况下，所有<code>service</code>、<code>data</code>、<code>group</code>都在同一个名为<code>public</code>的<code>namespace</code>。每个<code>namespace</code>都有一个唯一的ID，并且不同<code>namespace</code>下的服务之间互不可见。<code>namespace</code>可以在Nacos控制台中创建。</p>
<p>为服务设置<code>namespace</code>，需要在<code>application.yml</code>中配置<code>spring.cloud.nacos.discovery.namespace</code>，它的值为对应命名空间的ID：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nacos</span><span class="p">:</span><span class="w"> </span><span class="c"># Nacos配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">server-addr</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:8848</span><span class="w"> </span><span class="c"># Nacos服务地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">discovery</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 命名空间，值为对应命名空间的ID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">df79820e-775d-4787-b0a8-0b6e5fabeb13</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="nacos-与-eureka-的区别" data-numberify>Nacos 与 Eureka 的区别<a class="anchor ms-1" href="#nacos-与-eureka-的区别"></a></h1>
<p><picture><img class="img-fluid " alt="Nacos远程调用流程" src="/docs/spring/springcloud/nacos/uTools_1688717257055.png" loading="lazy" width="966" height="370" />
</picture>

</p>
<p>Nacos和Eureka整体结构类似，都有服务注册、服务拉取、心跳等待等，但是也存在一些差异：</p>
<ul>
<li>共同点：
<ul>
<li>都支持服务注册和服务拉取。</li>
<li>都支持服务提供者心跳方式做健康检测。</li>
</ul>
</li>
<li>不同点：
<ul>
<li>
<p>Nacos支持服务端主动检测提供者状态：</p>
<ul>
<li>临时实例采用心跳模式；</li>
<li>非临时实例采用主动检测模式。</li>
</ul>
<p>主动检测的弊端：会给服务器造成一定的压力。一般情况下使用临时实例的心跳模式即可。</p>
</li>
<li>
<p>在Nacos中，临时实例心跳不正常会被剔除，非临时实例则不会被剔除。</p>
</li>
<li>
<p>Nacos支持服务列表变更的消息推送模式，服务列表更新更加及时。</p>
</li>
<li>
<p>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式。</p>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="配置管理" data-numberify>配置管理<a class="anchor ms-1" href="#配置管理"></a></h1>
<p>Nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</p>
<p>在Nacos中，配置获取的步骤如下：</p>
<ol>
<li>项目启动。</li>
<li>读取Nacos中的给服务定义的配置文件。</li>
<li>读取本地配置文件<code>application.yml</code>。与上一步在Nacos中读取到的配置相合并。</li>
<li>创建Spring容器。</li>
<li>加载Bean</li>
</ol>
<p>依赖<code>pom.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Nacos配置管理依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>新建配置文件<code>bootstrap.yml</code>，进行如下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">service-name</span><span class="w"> </span><span class="c"># 服务名</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">profiles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">active</span><span class="p">:</span><span class="w"> </span><span class="l">env-name</span><span class="w"> </span><span class="c"># 环境名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nacos</span><span class="p">:</span><span class="w"> </span><span class="c"># Nacos 配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">server-addr</span><span class="p">:</span><span class="w"> </span><span class="l">localhost:8848</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">file-extension</span><span class="p">:</span><span class="w"> </span><span class="l">yml</span><span class="w"> </span><span class="c"># 配置文件后缀名</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>依赖和配置在需要配置管理的服务中添加和修改。</p>
<p>在<code>bootstrap.yml</code>中已经配置过的配置，在<code>application.yml</code>中可以不用重复配置。</p>
</blockquote>
<p>在Nacos控制台中添加配置文件：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springcloud/nacos/image-20210714164742924.png" loading="lazy" width="1466" height="600" />
</picture>

</p>
<p>对新添加的配置文件进行编辑，编辑完成好后点击发布进行提交：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springcloud/nacos/uTools_1689498771620.png" loading="lazy" width="872" height="771" />
</picture>

</p>
<h2 id="多环境配置共享" data-numberify>多环境配置共享<a class="anchor ms-1" href="#多环境配置共享"></a></h2>
<p>微服务启动时会从Nacos中读取多个配置文件：</p>
<ul>
<li><code>[service-name]-[env-name].[file-extension]</code>：<strong>当前环境配置</strong>。只能在对应环境的情况下进行读取。</li>
<li><code>[service-name].[file-extension]</code>：<strong>共享环境配置</strong>。无论当前实例处于什么环境下，该文件一定会被加载。所以多环境共享配置可以写在这个文件中。</li>
</ul>
<blockquote>
<p><code>[file-extension]</code>为配置中对应的文件扩展名。</p>
</blockquote>
<h2 id="读取配置" data-numberify>读取配置<a class="anchor ms-1" href="#读取配置"></a></h2>
<ul>
<li>
<p>使用<code>@RefreshScope</code>注解进行配置自动刷新：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RefreshScope</span>   <span class="c1">// 配置自动刷新
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${pattern.dateformat}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">dateformat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 返回当前按照规定格式进行格式化的时间
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/now&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">now</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">format</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="n">dateformat</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>使用<code>@ConfigurationProperties</code>注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Data</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 读取以pattern为开头的配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">&#34;pattern&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PatternProperties</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">dateformat</span><span class="o">;</span>  <span class="c1">// 相当于 pattern.dateformat
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">PatternProperties</span> <span class="n">properties</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/now&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">now</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">format</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="n">properties</span><span class="o">.</span><span class="na">getDateformat</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用<code>@ConfigurationProperties</code>注解将配置读取到类中，在配置更改的时候，类将会自动更新，而无需使用<code>@RefreshScope</code>注解。</p>
</li>
</ul>
<h2 id="配置文件优先级" data-numberify>配置文件优先级<a class="anchor ms-1" href="#配置文件优先级"></a></h2>
<p>Nacos中多种配置文件的优先级从高到低的顺序如下：</p>
<ol>
<li><code>[service-name]-[env-name].yml</code></li>
<li><code>[service-name].yml</code></li>
<li>本地配置文件（如<code>application.yml</code>，本地配置文件也有自己的优先级）</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>RestTemplate</title>
      <link>/docs/spring/springcloud/remote-call/</link>
      <pubDate>Mon, 26 Jun 2023 11:46:12 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/remote-call/</guid>
      <description><![CDATA[微服务远程调用 在微服务架构中，不同微服务都应该有自己独立的数据库以减少服务之间的冗余。而不同的服务之间可能需要共享数据。但拆分后的服务，它们]]></description>
      <content:encoded><![CDATA[<h1 id="微服务远程调用" data-numberify>微服务远程调用<a class="anchor ms-1" href="#微服务远程调用"></a></h1>
<p>在微服务架构中，不同微服务都应该有自己独立的数据库以减少服务之间的冗余。而不同的服务之间可能需要共享数据。但拆分后的服务，它们的数据库是相互独立的，一个服务不可能去调用另一个服务的数据库，所以服务之间的信息共享成为一个问题。</p>
<p>为了解决服务之间的信息共享，微服务通过将业务暴露为接口，以供其它微服务使用。这种服务调用方式与用户调用服务的方式是相同的，都是通过URL来远程调用接口。</p>
<p>在微服务远程调用中，有一下两种角色：</p>
<ul>
<li>
<p>服务<strong>提供者</strong>（Provider）：一次业务中，被其它微服务调用的服务。</p>
<p>即提供接口给其它微服务的服务。</p>
</li>
<li>
<p>服务<strong>消费者</strong>（Consumer）：一次业务中，调用其它微服务的服务。</p>
<p>即调用其它微服务提供的接口的服务。</p>
</li>
</ul>
<p>服务的角色是相对而言的。抛开业务来讲，服务既可以是提供者也可以消费者。</p>
<hr>
<h1 id="resttemplate-远程调用" data-numberify>RestTemplate 远程调用<a class="anchor ms-1" href="#resttemplate-远程调用"></a></h1>
<p>在SpringCloud中，微服务的远程调用方式可以通过<code>RestTemplate</code>发起HTTP请求来调用。而HTTP请求做远程调用是与语言无关的调用，只要知道对方的ip、端口、接口路径、请求参数即可。</p>
<p>例如有两个服务，分别是用户服务和订单服务，订单服务在获取订单信息时需要将用户信息一同发送：</p>
<ol>
<li>
<p>使用<code>RestTemplate</code>需要先进行注册（配置）。</p>
<p>在订单服务模块（消费者）中新建一个配置并声明一个Bean：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 创建RestTemplate，并注入Spring容器
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">RestTemplate</span> <span class="nf">getRestTemplate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">RestTemplate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>OrderService</code>中注入<code>RestTemplate</code>，并通过<code>RestTemplate</code>远程调用用户服务模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">OrderMapper</span> <span class="n">orderMapper</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 注入RestTemplate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RestTemplate</span> <span class="n">restTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Order</span> <span class="nf">queryOrderById</span><span class="o">(</span><span class="n">Long</span> <span class="n">orderId</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1.查询订单
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">orderMapper</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">orderId</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2.利用RestTemplate发起HTTP请求，查询用户信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 2.1.URL路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;http://localhost:8081/user/&#34;</span> <span class="o">+</span> <span class="n">order</span><span class="o">.</span><span class="na">getUserId</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2.2.发送HTTP（GET）请求，实现远程调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForObject</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 3.封装User到Order
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">order</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 4.返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">order</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>RestTemplate.getForObject()</code>是<code>RestTemplate</code>调用HTTP-GET请求的方法，该方法接收一个字符串类型的URL参数，并可以通过<code>.class</code>来指定响应的类型。</p>
<p>用户服务模块中相应的接口如下（假设服务的端口为本地<code>8081</code>端口）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据用户ID获取用户信息
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param id 用户ID
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return 用户信息
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">queryById</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">&#34;id&#34;</span><span class="o">)</span> <span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">queryById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<p>使用<code>RestTemplate</code>存在以下问题：</p>
<ul>
<li>URL的硬编码问题。</li>
<li>服务消费者该如何获取服务提供者的地址信息。</li>
<li>如果有多个服务提供者，消费者该如何选择。</li>
<li>消费者如何得知服务提供者的健康状态。</li>
</ul>
<blockquote>
<p><code>RestTemplate</code>是Spring Cloud自带的，所以不用引入依赖。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Spring 环境和配置</title>
      <link>/docs/spring/springcloud/config/</link>
      <pubDate>Mon, 26 Jun 2023 11:46:12 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/config/</guid>
      <description><![CDATA[微服务需要根据业务模块拆分，做到单一职责，不要重复开发相同业务。 父工程 微服务是一种分布式开发，要将一个项目拆分为若干个服务，所以会有很多个服]]></description>
      <content:encoded><![CDATA[<p>微服务需要根据业务模块拆分，做到单一职责，不要重复开发相同业务。</p>
<h1 id="父工程" data-numberify>父工程<a class="anchor ms-1" href="#父工程"></a></h1>
<p>微服务是一种分布式开发，要将一个项目拆分为若干个服务，所以会有很多个服务模块。而要统一管理这些服务模块，可以创建一个父工程来管理。</p>
<p>在Maven中，用来统一管理的父工程是一个不包含实际代码，只含有<code>pom.xml</code>的模块。通过在<code>pom.xml</code>定义一些统一的信息（如依赖、依赖的版本等等），从而来管理整个工程。</p>
<p>父工程Maven依赖（<code>pom.xml</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>asia.linner.demo<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>cloud-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 声明子模块 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modules&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>user-service<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>order-service<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/modules&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 打包方式 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 父工程 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>2.3.9.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;relativePath/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/parent&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.reporting.outputEncoding&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;spring-cloud.version&gt;</span>Hoxton.SR10<span class="nt">&lt;/spring-cloud.version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mysql.version&gt;</span>5.1.47<span class="nt">&lt;/mysql.version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mybatis.version&gt;</span>2.1.1<span class="nt">&lt;/mybatis.version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 声明依赖，并不进行导入（子模块依然需要导入，但不用指定版面） --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencyManagement&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- SpringCloud依赖库 --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;artifactId&gt;</span>spring-cloud-dependencies<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;version&gt;</span>${spring-cloud.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- MySQL驱动 --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;version&gt;</span>${mysql.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- MyBatis --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;version&gt;</span>${mybatis.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencyManagement&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.projectlombok<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>lombok<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>其中主要的有：</p>
<ul>
<li>
<p>父工程：和SpringBoot一样，使用SpringCloud需要导入父工程。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 父工程 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>2.3.9.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;relativePath/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/parent&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>SpringCloud依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- SpringCloud依赖库 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-dependencies<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>${spring-cloud.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>声明在<code>&lt;dependencyManagement&gt;</code>的<code>&lt;dependencies&gt;</code>中。SpringCloud依赖库定义了SpringCloud的依赖以及它们的版本。</p>
<blockquote>
<p><code>&lt;dependencyManagement&gt;</code>是对整个项目的依赖版本的管理。在<code>&lt;dependencyManagement&gt;</code>元素中声明所依赖的jar包的版本号等信息，那么所有子项目再次引入此依赖jar包时则无需显式的列出版本号，Maven会沿着父子层级向上寻找拥有<code>&lt;dependencyManagement&gt;</code>元素的项目，然后使用它指定的版本号。</p>
<p>例如在SpringBoot中，引入了父工程<code>spring-boot-starter-parent</code>，那么引入<code>spring-boot-starter-web</code>这些在父工程中已经将版本定义好了的依赖，就无需在当前工程的<code>pom.xml</code>中指定版本。</p>
<p>在当前<code>&lt;dependencies&gt;</code>（不是<code>&lt;dependencyManagement&gt;</code>下的<code>&lt;dependencies&gt;</code>中声明的依赖，会直接被导入，并且被子子项目所继承。</p>
</blockquote>
</li>
<li>
<p><code>&lt;modules&gt;</code>：利用<code>&lt;modules&gt;</code>可以很好地进行多模块开发。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 声明模块 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;modules&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;module&gt;</span>user-service<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;module&gt;</span>order-service<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/modules&gt;</span>
</span></span></code></pre></div><p>在构建当前项目时，Maven会根据<code>&lt;modules&gt;</code>中的声明，去寻找相应的模块并自动完成构建。</p>
<p><code>&lt;modules&gt;</code>的值是对应模块的<code>&lt;artifactId&gt;</code>的值。</p>
</li>
</ul>
<h1 id="微服务拆分" data-numberify>微服务拆分<a class="anchor ms-1" href="#微服务拆分"></a></h1>
<p>子模块Maven依赖示例（<code>pom.xml</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 与父工程中所定义的相对应 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>asia.linner.demo<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>cloud-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/parent&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>user-service<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- MySQL --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- MyBatis --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;finalName&gt;</span>app<span class="nt">&lt;/finalName&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/build&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>其中，该项目的父工程为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>asia.linner.demo<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>cloud-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/parent&gt;</span>
</span></span></code></pre></div><p>模块声明的父工程对应父工程中定义的<code>&lt;groupId&gt;</code>、<code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>。当前项目会继承父工程中定义的版本号和依赖。所以<code>spring-boot-starter-web</code>、<code>mysql-connector-java</code>和<code>mybatis-spring-boot-starter</code>都无需显式地声明版本。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>微服务简介</title>
      <link>/docs/spring/springcloud/introduction/</link>
      <pubDate>Mon, 26 Jun 2023 11:46:12 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/introduction/</guid>
      <description><![CDATA[微服务架构 从前的项目是使用单体架构，单体架构是指将业务的所有功能集中在一个项目中开发，打成一个包部署。 单体架构的优点是： 架构简单； 部署成本低]]></description>
      <content:encoded><![CDATA[<h1 id="微服务架构" data-numberify>微服务架构<a class="anchor ms-1" href="#微服务架构"></a></h1>
<p>从前的项目是使用单体架构，单体架构是指<u>将业务的所有功能集中在一个项目中开发，打成一个包部署</u>。</p>
<p>单体架构的优点是：</p>
<ul>
<li>架构简单；</li>
<li>部署成本低。</li>
</ul>
<p>缺点是模块之间的耦合度高，不利于大型项目开发。</p>
<p>随着互联网行业的发展，服务架构从单体架构逐渐演变为现在流行的微服务架构（属于分布式架构的一种）。</p>
<p><picture><img class="img-fluid " alt="微服务架构" src="/docs/spring/springcloud/introduction/uTools_1687757195463.png" loading="lazy" width="624" height="544" />
</picture>

</p>
<p>分布式架构是指<u>根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务</u>。</p>
<p>分布式架构的优点：</p>
<ul>
<li>降低服务之间的耦合；</li>
<li>有利于服务升级拓展。</li>
</ul>
<p>微服务是一种经过良好架构设计的分布式架构方案。</p>
<p>微服务的架构特征：</p>
<ul>
<li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责。</li>
<li>自治：团队独立、技术独立、数据独立，独立部署和交付。</li>
<li>面向服务：服务提供统一标准的接口，与语言和技术无关。</li>
<li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题。</li>
</ul>
<p>微服务按照服务的不同将项目分为不同的项目，每个项目运行一个服务。</p>
<p>例如，将用户服务和订单服务分为两个项目。</p>
<h1 id="微服务技术栈" data-numberify>微服务技术栈<a class="anchor ms-1" href="#微服务技术栈"></a></h1>
<p>微服务技术栈包括：</p>
<ul>
<li>微服务技术</li>
<li>异步通讯技术</li>
<li>缓存技术</li>
<li>DevOps</li>
<li>搜索技术</li>
</ul>
<h1 id="微服务技术" data-numberify>微服务技术<a class="anchor ms-1" href="#微服务技术"></a></h1>
<blockquote>
<p>在国内知名的微服务落地技术有SpringCloud和阿里的Dubbo。</p>
</blockquote>
<p>常见微服务技术的对比：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><br></th>
<th style="text-align:center">Dubbo</th>
<th style="text-align:center">SpringCloud</th>
<th style="text-align:left">SpringCloudAlibaba</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">注册中心</td>
<td style="text-align:center"><code>Zookeeper</code>、<code>Redis</code></td>
<td style="text-align:center">Eureka、Consul</td>
<td style="text-align:left">Nacos、Eureka</td>
</tr>
<tr>
<td style="text-align:center">服务远程调用</td>
<td style="text-align:center">Dubbo协议</td>
<td style="text-align:center">Feign（HTTP协议）</td>
<td style="text-align:left">Dubbo、Feign</td>
</tr>
<tr>
<td style="text-align:center">配置中心</td>
<td style="text-align:center">无</td>
<td style="text-align:center">SpringCloudConfig</td>
<td style="text-align:left">SpringCloudConfig、Nacos</td>
</tr>
<tr>
<td style="text-align:center">服务网关</td>
<td style="text-align:center">无</td>
<td style="text-align:center">SpringCloudGateway、Zuul</td>
<td style="text-align:left">SpringCloudGateway、Zuul</td>
</tr>
<tr>
<td style="text-align:center">服务监控和保护</td>
<td style="text-align:center">dubbo-admin（功能弱）</td>
<td style="text-align:center">Hystix</td>
<td style="text-align:left">Sentinel</td>
</tr>
</tbody>
</table>
<blockquote>
<p><a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener noreferrer">SpringCloud 官网<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配。而SpringCloud与SpringBoot的之间的版本存在一个兼容关系，可通过官网的说明文档查看。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>瑞吉外卖项目实战</title>
      <link>/blog/2023/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</guid>
      <description><![CDATA[项目笔记 项目笔记仓库：https://gitee.com/linner_cheng/reggie_note B站视频：黑马程序员Java项目实]]></description>
      <content:encoded><![CDATA[<h1 id="项目笔记" data-numberify>项目笔记<a class="anchor ms-1" href="#项目笔记"></a></h1>
<p>项目笔记仓库：<a href="https://gitee.com/linner_cheng/reggie_note" target="_blank" rel="noopener noreferrer">https://gitee.com/linner_cheng/reggie_note<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<p>B站视频：<a href="https://www.bilibili.com/video/BV13a411q753/?p=190&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click" target="_blank" rel="noopener noreferrer">黑马程序员Java项目实战《瑞吉外卖》<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<hr>
<h1 id="项目基础功能开发" data-numberify>项目基础功能开发<a class="anchor ms-1" href="#项目基础功能开发"></a></h1>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/v1.0/" target="_blank" rel="noopener noreferrer">项目基础功能开发<i class="fas fa-external-link-square-alt ms-1"></i></a>。包含项目前台和后台功能开发还有项目部署。</p>
<hr>
<h1 id="redis" data-numberify>Redis<a class="anchor ms-1" href="#redis"></a></h1>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/redis/" target="_blank" rel="noopener noreferrer">Redis<i class="fas fa-external-link-square-alt ms-1"></i></a>。包含Jedis和Spirng data redis。</p>
<hr>
<h1 id="项目优化" data-numberify>项目优化<a class="anchor ms-1" href="#项目优化"></a></h1>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/v1.1/" target="_blank" rel="noopener noreferrer">Redis缓存<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/v1.2/" target="_blank" rel="noopener noreferrer">Sharding-JDBC读写分离<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/v1.3/" target="_blank" rel="noopener noreferrer">Swagger API文档<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>MyBatisPlus</title>
      <link>/docs/spring/springboot/mybatisplus/</link>
      <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springboot/mybatisplus/</guid>
      <description><![CDATA[简介 MybatisPlus（简称MP）是基于MyBatis框架基础上开发的增强型工具（依然可以使用MyBatis里的工具），旨在简化开发、提]]></description>
      <content:encoded><![CDATA[<h1 id="简介" data-numberify>简介<a class="anchor ms-1" href="#简介"></a></h1>
<p>MybatisPlus（简称MP）是基于MyBatis框架基础上开发的增强型工具（依然可以使用MyBatis里的工具），旨在简化开发、提供效率。更多详情请访问<a href="https://mp.baomidou.com/" target="_blank" rel="noopener noreferrer">MyBatisPlus官网<i class="fas fa-external-link-square-alt ms-1"></i></a>（官网有两个地址，<a href="https://mp.baomidou.com/" target="_blank" rel="noopener noreferrer">https://mp.baomidou.com/<i class="fas fa-external-link-square-alt ms-1"></i></a>或<a href="https://mybatis.plus" target="_blank" rel="noopener noreferrer">https://mybatis.plus<i class="fas fa-external-link-square-alt ms-1"></i></a>）。</p>
<p>基于Spring使用MybatisPlus，在构建Spring工程时需要勾选MySQL和MyBatis相关技术。由于Spring并未收录MP，所以需要手动导入坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.baomidou<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis-plus-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.4.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 可选： --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.1.16<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在<code>application.yml</code>（配置文件）中配置数据库信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">datasource</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">com.alibaba.druid.pool.DruidDataSource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">driver-class-name</span><span class="p">:</span><span class="w"> </span><span class="l">com.mysql.cj.jdbc.Driver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">jdbc:mysql://localhost:3306/mybatisplus_db?serverTimezone=Asia/Shanghai </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="dao接口" data-numberify>DAO接口<a class="anchor ms-1" href="#dao接口"></a></h1>
<p>使用MP编写DAO接口，可以直接继承<code>BaseMapper&lt;&gt;</code>（该接口内置了许多DAO方法）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Mapper</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDao</span> <span class="kd">extends</span> <span class="n">BaseMapper</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>编写引导类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MybatisplusApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">MybatisplusApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>DAO接口要想被容器扫描到，有两种方案：</p>
<ol>
<li>在DAO接口上添加<code>@Mapper</code>注解，并且确保DAO处在引导类所在包或其子包中。</li>
<li>在引导类上添加<code>@MapperScan</code>注解，其属性为所要扫描的DAO所在包：<code>@MapperScan(&quot;com.linner.dao&quot;)</code>（可以不写<code>@Mapper</code>）。</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Maven 高级</title>
      <link>/docs/spring/springboot/maven-senior/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springboot/maven-senior/</guid>
      <description><![CDATA[多模块开发 多模块开发有以下两种： 按照功能拆分。 按照模块拆分。 例如，将项目中的DAO类拆分出来作为一个独立的模块。然后使用Maven将该模块作]]></description>
      <content:encoded><![CDATA[<h1 id="多模块开发" data-numberify>多模块开发<a class="anchor ms-1" href="#多模块开发"></a></h1>
<p>多模块开发有以下两种：</p>
<ul>
<li>按照功能拆分。</li>
<li>按照模块拆分。</li>
</ul>
<p>例如，将项目中的DAO类拆分出来作为一个独立的模块。然后使用Maven将该模块作为依赖导入项目中。</p>
<p>假设现在已经将项目中的实体类拆分出来作为<code>maven-dao</code>模块。该模块也使用Maven构建，然后导入该项目所需依赖。经过测试后，将该项目的<code>&lt;groupId&gt;</code>、<code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>导入原本项目。</p>
<p><code>maven-dao</code>模块的<code>pom.xml</code>中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span> <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 将下面内容作为依赖导入到原项目中 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>springmvc-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- END --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>将上方<code>&lt;groupId&gt;</code>、<code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>导入原项目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>springmvc-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div><p>接着使用Maven的<code>install</code>命令将<code>maven-dao</code>模块安装到Maven本地仓库中，项目即可正常启动。</p>
<hr>
<h1 id="依赖管理" data-numberify>依赖管理<a class="anchor ms-1" href="#依赖管理"></a></h1>
<h2 id="依赖传递" data-numberify>依赖传递<a class="anchor ms-1" href="#依赖传递"></a></h2>
<p>Maven项目中的依赖是具有传递性的。即，依赖的依赖可以作为依赖使用。将依赖关系作为树状结构看待，那么依赖的子孙依赖，也可以作为项目的依赖。</p>
<p>依赖传递有直接依赖和间接依赖。</p>
<ul>
<li>
<p>直接依赖：</p>
<p>在<code>pom.xml</code>中编写的依赖就是该项目的直接依赖。即，依赖树中，子依赖（子节点）即为当前项目（根节点）的直接依赖。</p>
</li>
<li>
<p>间接依赖：
依赖树中，直接依赖下的所有依赖（孙子节点）即为当前项目的间接依赖。</p>
</li>
</ul>
<p>因为依赖传递的存在，会导致使用依赖的过程中出现冲突问题。例如有两个相同的依赖，它们的版本不同，就会导致依赖冲突。</p>
<p>Maven指定了一系列规则来解决依赖冲突问题。</p>
<ul>
<li>特殊优先：同级下（依赖树中同个父节点的依赖为同级，即同个<code>pom.xml</code>下），配置了相同资源的不同版本，后配置的覆盖先配置。</li>
<li>路径优先：依赖树中，层级越浅，优先级越高；层级越深，优先级越低。</li>
<li>声明优先：资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的。即，谁先声明用谁。</li>
</ul>
<blockquote>
<p>注意：依赖的优先级只对当前项目起作用。即，当前项目选择的依赖版本并不会影响到依赖中相同资源不同版本的依赖。
最终选择的依赖结果根据Idea中Mavem面板的依赖树视图。</p>
</blockquote>
<h2 id="可选依赖" data-numberify>可选依赖<a class="anchor ms-1" href="#可选依赖"></a></h2>
<p>可选依赖指对外隐藏当前所依赖的资源（不透明），隐藏后对应资源将不具有依赖传递。</p>
<p>可选依赖的开关使用<code>&lt;optional&gt;</code>。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>xxx.xxxxxx<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>xxxxx-xxxxxx<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 默认为false，设置为true为开启可选依赖 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="排除依赖" data-numberify>排除依赖<a class="anchor ms-1" href="#排除依赖"></a></h2>
<p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本（不需要）。即，在当前项目中，排除依赖中不需要的间接依赖。</p>
<p>排除依赖使用<code>&lt;exclusions&gt;</code>来指定一个排除的依赖列表。列表中使用<code>&lt;exclusion&gt;</code>来指定要排除的依赖。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>xxx.xxxxxx<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>xxxxx-xxxxxx<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;exclusions&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;exclusion&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>yyy.yyyyyy<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>yyyyy-yyyyyyy<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 排除依赖不需要指定版本 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/exclusion&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/exclusions&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="聚合工程" data-numberify>聚合工程<a class="anchor ms-1" href="#聚合工程"></a></h2>
<p>聚合即为将多个模块组织成一个整体，同时进行项目构建的过程。聚合工程通常是一个不具有业务功能的&quot;空&quot;工程（有且仅有一个pom文件）。使用聚合工程可以将多个工程编组，通过对聚合工程进行构建，实现对所包含的模块进行同步构建。当工程中某个模块发生更新（变更）时，必须保障工程中与已更新模块关联的模块同步更新，此时可以使用聚合工程来解决批量模块同步构建的问题。</p>
<p>Example：</p>
<p>创建一个空的Maven项目，并将其打包方式设置为<code>pom</code>，然后添加所要管理的项目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>maven-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 设置管理的模块名称 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modules&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- module里面的值为管理模块的相对路径 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../xxxx<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../yyyy<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../zzzz<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/modules&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>当该<code>maven-parent</code>被<code>compile</code>后，所有被其管理的项目都会被执行编译操作。</p>
<blockquote>
<p>聚合工程管理的项目在进行运行的时候，会按照项目与项目之间的依赖关系来自动决定执行的顺序和配置的顺序无关。</p>
</blockquote>
<h2 id="继承" data-numberify>继承<a class="anchor ms-1" href="#继承"></a></h2>
<p>继承是用来解决重复配置问题。继承描述的是两个工程间的关系子工程可以继承父工程中的配置信息，常见于依赖关系的继承。继承的作用：简化配置、减少版本冲突。</p>
<blockquote>
<p>一般继承和聚合都是使用同一个空项目来构建，但是这两个的功能是不一样的。</p>
</blockquote>
<p>在子工程中配置当前工程继承自parent工程：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 在project下配置 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>maven-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--设置父项目pom.xml位置路径--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;relativePath&gt;</span>../maven-parent/pom.xml<span class="nt">&lt;/relativePath&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/parent&gt;</span>
</span></span></code></pre></div><p>将子项目共同使用的依赖都抽取出来，维护在父项目的<code>pom.xml</code>中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>maven-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modules&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../xxxx<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../yyyy<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../zzzz<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/modules&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-core<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-webmvc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>3.5.6<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>1.3.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.1.47<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>1.1.16<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>3.1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>jackson-databind<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.9.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><h3 id="子项目依赖版本问题" data-numberify>子项目依赖版本问题<a class="anchor ms-1" href="#子项目依赖版本问题"></a></h3>
<p>如果把所有用到的依赖都管理在父项目的<code>pom.xml</code>，这样就会导致有很多项目引入了过多自己不需要的依赖，这样对于子项目来说也是种负担。</p>
<p>可以在父工程中使用<code>&lt;dependencyManagement&gt;</code>来定义依赖管理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 在project下配置 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependencyManagement&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>4.12<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencyManagement&gt;</span>
</span></span></code></pre></div><p><code>&lt;dependencyManagement&gt;</code>标签不真正引入jar包，而是配置可供子项目选择的jar包依赖。</p>
<p>如果子项目要想使用它所提供的这些jar包，需要自己添加依赖，并且不需要指定<code>&lt;version&gt;</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>子项目使用的jar包<code>version</code>由父项目决定。</p>
<hr>
<h1 id="属性" data-numberify>属性<a class="anchor ms-1" href="#属性"></a></h1>
<p>Maven属性的概念和变量的概念很相似。在一个地方声明，其他地方使用，当属性的声明修改后，所有使用属性的地方都会跟着修改。</p>
<p>在Maven中的属性分为:</p>
<ul>
<li>
<p>自定义属性。</p>
</li>
<li>
<p>内置属性。</p>
<p>使用<code>mvn help:system</code>命令查看。</p>
</li>
<li>
<p>Setting属性。</p>
</li>
<li>
<p>Java系统属性。</p>
</li>
<li>
<p>环境变量属性。</p>
</li>
</ul>
<h2 id="自定义属性" data-numberify>自定义属性<a class="anchor ms-1" href="#自定义属性"></a></h2>
<p>在父工程中使用<code>&lt;properties&gt;</code>定义属性：</p>
<properties>
    <spring.version>5.2.10.RELEASE</spring.version>
    <junit.version>4.12</junit.version>
    <mybatis-spring.version>1.3.0</mybatis-spring.version>
</properties>
<p>定义属性标签的名称可以自定义，如<code>&lt;spring.version&gt;</code>也可以修改为<code>&lt;spring-version&gt;</code>。</p>
<p>接着修改依赖的<code>version</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-core<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-webmvc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>使用<code>${属性名}</code>来使用属性。</p>
<h2 id="配置文件加载属性" data-numberify>配置文件加载属性<a class="anchor ms-1" href="#配置文件加载属性"></a></h2>
<p>属性也可以作用于其他配置文件中（如<code>jdbc.properties</code>）。</p>
<p>先在父工程中定义属性，并且设置Maven过滤文件范围：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;jdbc.url&gt;</span>jdbc:mysql://127.1.1.1:3306/spring_db<span class="nt">&lt;/jdbc.url&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;resources&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;resource&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 设置资源目录（相对路径） --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;directory&gt;</span>../xxxx/src/main/resources<span class="nt">&lt;/directory&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 设置是否能够解析${}，默认是false --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;filtering&gt;</span>true<span class="nt">&lt;/filtering&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/resource&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/resources&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><p>修改<code>jdbc.properties</code>（属性值的使用方式与<code>pom.xml</code>中相同）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">jdbc.driver</span><span class="o">=</span><span class="s">com.mysql.jdbc.Driver</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.url</span><span class="o">=</span><span class="s">${jdbc.url}</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.username</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.password</span><span class="o">=</span><span class="s">root</span>
</span></span></code></pre></div><p>如果需要在多个项目中解析属性值，可以使用<code>${project.basedir}</code>（Maven的内置系统属性）来简化书写：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;resources&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">			${project.basedir}: 表示当前项目所在目录
</span></span></span><span class="line"><span class="cl"><span class="c">			子项目继承了父项目，相当于所有的子项目都添加了资源目录的过滤
</span></span></span><span class="line"><span class="cl"><span class="c">		--&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;resource&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;directory&gt;</span>${project.basedir}/src/main/resources<span class="nt">&lt;/directory&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;filtering&gt;</span>true<span class="nt">&lt;/filtering&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/resource&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/resources&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">        忽略 web.xml 检查
</span></span></span><span class="line"><span class="cl"><span class="c">        或者在 src\main\webapp\WEB-INF\ 添加一个 web.xml 文件 
</span></span></span><span class="line"><span class="cl"><span class="c">    --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>maven-war-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>3.2.3<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="c">&lt;!-- 忽略 web.xml 检查 --&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;failOnMissingWebXml&gt;</span>false<span class="nt">&lt;/failOnMissingWebXml&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><blockquote>
<p>使用<code>mvn help:system</code>命令可以查看更多的内置属性。</p>
</blockquote>
<hr>
<h1 id="版本管理" data-numberify>版本管理<a class="anchor ms-1" href="#版本管理"></a></h1>
<ul>
<li><code>SNAPSHOT</code>（快照版本）：
<ul>
<li>项目开发过程中临时输出的版本，称为快照版本。</li>
<li>快照版本会随着开发的进展不断更新。</li>
</ul>
</li>
<li><code>RELEASE</code>（发布版本）：
<ul>
<li>项目开发到一定阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构件文件是稳定的。</li>
<li>即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本称为发布版本。</li>
</ul>
</li>
<li><code>alpha</code>（内测版）：Bug多、不稳定、内部版本不断添加新功能。</li>
<li><code>beta</code>（公测版）：不稳定（相对比<code>alpha</code>稳定些），Bug相对较多不断添加新功能。</li>
<li>纯数字版本。</li>
</ul>
<hr>
<h1 id="多环境开发" data-numberify>多环境开发<a class="anchor ms-1" href="#多环境开发"></a></h1>
<p>Maven提供配置多种环境的设定，帮助开发者在使用过程中快速切换环境。</p>
<p>在父工程中配置多个环境，并指定默认激活环境：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;profiles&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--开发环境--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;profile&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;id&gt;</span>dev<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;jdbc.url&gt;</span>jdbc:mysql://127.1.1.1:3306/spring_db<span class="nt">&lt;/jdbc.url&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;activation&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 设定是否为默认启动环境 --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;activeByDefault&gt;</span>true<span class="nt">&lt;/activeByDefault&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/activation&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/profile&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--生产环境--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;profile&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;id&gt;</span>pro<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;jdbc.url&gt;</span>jdbc:mysql://127.2.2.2:3306/spring_db<span class="nt">&lt;/jdbc.url&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/profile&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--测试环境--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;profile&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;id&gt;</span>test<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;jdbc.url&gt;</span>jdbc:mysql://127.3.3.3:3306/spring_db<span class="nt">&lt;/jdbc.url&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/profile&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/profiles&gt;</span>
</span></span></code></pre></div><p>动态切换配置环境可以使用Maven的<code>-P</code>参数来指定，参数值为环境<code>id</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mvn install -P <span class="nb">test</span>
</span></span></code></pre></div><hr>
<h1 id="跳过测试" data-numberify>跳过测试<a class="anchor ms-1" href="#跳过测试"></a></h1>
<p>在执行<code>install</code>指令的时候，Maven都会按照顺序从上往下依次执行，每次都会执行<code>test</code>。<code>test</code>可以确保每次打包或者安装的时候，程序的正确性。</p>
<p>但是，假如测试已经通过，在没有修改程序的前提下再次执行打包或安装命令，由于顺序执行，测试会被再次执行，就有点耗费时间了。或者，功能开发过程中有部分模块还没有开发完毕，测试无法通过，但是想要把其中某一部分进行快速打包，此时由于测试环境失败就会导致打包失败。此时就需要跳过测试：</p>
<ol>
<li>
<p>Idea工具可以实现跳过测试（Maven面板中带闪电图标的按钮）。</p>
</li>
<li>
<p>在父工程中的<code>pom.xml</code>中添加测试插件配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>maven-surefire-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.12.4<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;skipTests&gt;</span>false<span class="nt">&lt;/skipTests&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="c">&lt;!--排除掉不参与测试的内容--&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;excludes&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;exclude&gt;</span>**/BookServiceTest.java<span class="nt">&lt;/exclude&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/excludes&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><p><code>&lt;configuration&gt;</code>中有如下标签：</p>
<ul>
<li><code>skipTests</code>：如果为<code>true</code>，跳过所有测试；为<code>false</code>，不跳过测试。</li>
<li><code>excludes</code>：不参与测试的测试类，针对<code>skipTests</code>为<code>false</code>来设置的。</li>
<li><code>includes</code>：参与测试的测试类，针对<code>skipTests</code>为<code>true</code>来设置的。</li>
</ul>
</li>
<li>
<p>命令跳过测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mvn 指令 -D skipTests
</span></span></code></pre></div><blockquote>
<ul>
<li>执行的项目构建指令必须包含测试生命周期，否则无效果。</li>
<li>命令需要在<code>pom.xml</code>所在目录下进行执行。</li>
</ul>
</blockquote>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>SpringBoot 基础</title>
      <link>/docs/spring/springboot/base/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springboot/base/</guid>
      <description><![CDATA[简介 SpringBoot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化 Spring 应用的初始搭建以及开发过程。 SpringBoot开发分为如下几步： 创建新模块，选择Sp]]></description>
      <content:encoded><![CDATA[<h1 id="简介" data-numberify>简介<a class="anchor ms-1" href="#简介"></a></h1>
<p><code>SpringBoot</code> 是由 <code>Pivotal</code> 团队提供的全新框架，其设计目的是用来简化 <code>Spring</code> 应用的初始搭建以及开发过程。</p>
<p>SpringBoot开发分为如下几步：</p>
<ul>
<li>创建新模块，选择Spring初始化，并配置模块相关基础信息。</li>
<li>选择当前模块需要使用的技术集。</li>
<li>开发控制器类。</li>
<li>运行自动生成的Application类。</li>
</ul>
<p>SpringBoot有两个机制：</p>
<ul>
<li>依赖管理机制。</li>
<li>自动配置机制。</li>
</ul>
<h1 id="项目创建及配置" data-numberify>项目创建及配置<a class="anchor ms-1" href="#项目创建及配置"></a></h1>
<h2 id="创建项目" data-numberify>创建项目<a class="anchor ms-1" href="#创建项目"></a></h2>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springboot/base/1677287557076.png" loading="lazy" width="1572" height="1265" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springboot/base/1677239012598.png" loading="lazy" width="1573" height="1269" />
</picture>

</p>
<blockquote>
<p>注意：</p>
<ol>
<li>
<p>在创建好的工程中不需要创建配置类。</p>
</li>
<li>
<p>创建好的项目会自动生成其他的一些文件（这些文件目前来说没有任何作用），可以将这些文件删除。</p>
<p>可以删除的目录和文件如下：</p>
<ul>
<li><code>.mvn</code></li>
<li><code>.gitignore</code></li>
<li><code>HELP.md</code></li>
<li><code>mvnw</code></li>
<li><code>mvnw.cmd</code></li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="项目依赖" data-numberify>项目依赖<a class="anchor ms-1" href="#项目依赖"></a></h2>
<p>在项目中的<code>pom.xml</code>中有如下代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>2.4.5<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 这里的版本被修改过，按照上方创建的工程版本应该是 3.0.3 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;relativePath/&gt;</span> <span class="c">&lt;!-- lookup parent from repository --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/parent&gt;</span>
</span></span></code></pre></div><p>该代码指定了一个父工程，父工程中的东西在该工程中可以继承过来使用。</p>
<p>并且使用Spring Initializr创建的项目会自动在<code>pom.xml</code>中导入所需的起步依赖（包含<code>starter</code>的依赖）。</p>
<p>在<code>pom.xml</code>中还有如下起步依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Springboot Web 开发所需的起步依赖 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Springboot 整合Junit的起步依赖 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div><h2 id="引导类" data-numberify>引导类<a class="anchor ms-1" href="#引导类"></a></h2>
<p>创建的每个SpringBoot项目都包含一个引导类，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringbootDemoApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">SpringbootDemoApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>引导类是项目的入口，运行<code>main()</code>就可以启动项目。</p>
<blockquote>
<p>引导类默认只会扫描当前包下同级的类和包（包下的的类）。</p>
<p>如果Controller包与引导类的包同级（例如<code>com.linner.controller</code>与<code>com.linner.springbootdemo</code>），此时引导类可以正常启动，但是由于扫描不到Cotroller包，接口无法访问。有三种解决方法：</p>
<ol>
<li>
<p>将Controller包移动到引导类的包下（此处为<code>springbootdemo</code>）。</p>
</li>
<li>
<p>将引导类移动到项目组包下（此处为<code>com.linner</code>）。</p>
</li>
<li>
<p>在创建工程时，修改软件包名。</p>
<p>Spring Initializr默认软件包名为项目组名.项目名（此处为<code>com.linner.springbootdemo</code>）。此处创建的项目将其修改为项目组名（<code>com.linner</code>）。</p>
</li>
</ol>
<p><code>SpringApplication.run(...)</code> 的返回值是当前项目的<code>ApplicationContext</code>。</p>
</blockquote>
<h2 id="切换-web-服务器" data-numberify>切换 Web 服务器<a class="anchor ms-1" href="#切换-web-服务器"></a></h2>
<p>如果要使用Jetty服务器，我们需要先在<code>pom.xml</code>中使用<code>&lt;exclusion&gt;</code>标签排除默认的Tomcat服务器，然后再导入使用Jetty服务器所需的坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;exclusions&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;exclusion&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-tomcat<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/exclusion&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/exclusions&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-jetty<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="配置文件" data-numberify>配置文件<a class="anchor ms-1" href="#配置文件"></a></h2>
<p>SpringBoot有两种配置文件格式，它们都在<code>resources</code>目录下：</p>
<ul>
<li>
<p><code>properties</code>格式：</p>
<p>文件名为<code>application.properties</code>，格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1"># 端口</span>
</span></span><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">81</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 访问路径</span>
</span></span><span class="line"><span class="cl"><span class="na">server.servlet.context-path</span><span class="o">=</span><span class="s">/</span>
</span></span></code></pre></div></li>
<li>
<p><code>yaml</code>格式：</p>
<p>文件名为<code>application.yml</code>或<code>application.yaml</code>，格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 端口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">servlet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 访问路径</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">context-path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>yaml格式的键值对中，键后面的冒号后（值的前面）一定要加空格。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>SpringBoot程序的配置文件必须是<code>application</code>，只是后缀名不同。</p>
</blockquote>
<p>以上三个配置文件可以同时存在，它们的优先级从高到低为：</p>
<ol>
<li><code>application.properties</code></li>
<li><code>application.yml</code></li>
<li><code>application.yaml</code></li>
</ol>
<p>Idea可以快速地编辑配置文件：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springboot/base/1677291010274.png" loading="lazy" width="481" height="581" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springboot/base/1677291147353.png" loading="lazy" width="1651" height="389" />
</picture>

</p>
<h3 id="yaml-语法" data-numberify>yaml 语法<a class="anchor ms-1" href="#yaml-语法"></a></h3>
<ul>
<li>
<p>大小写敏感。</p>
</li>
<li>
<p>属性层级关系使用多行描述，每行结尾使用冒号结束。</p>
</li>
<li>
<p>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）。</p>
<p>空格的个数并不重要，只要保证同层级的左侧对齐即可。</p>
</li>
<li>
<p>属性值前面添加空格（属性名与属性值之间使用<code>:</code>+空格作为分隔）。</p>
</li>
<li>
<p><code>#</code> 表示注释。</p>
</li>
<li>
<p>数据前面要加空格与冒号隔开。</p>
</li>
</ul>
<p>数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">list</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">Java</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">Spring</span><span class="w">
</span></span></span></code></pre></div><h3 id="读取配置数据" data-numberify>读取配置数据<a class="anchor ms-1" href="#读取配置数据"></a></h3>
<p>使用<code>@Value(&quot;表达式&quot;)</code>可以从配置文件中读取数据，注解中用于读取属性名引用方式是：<code>${一级属性名.二级属性名……}</code>。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${server.port}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">port</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${list[0]}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">java</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/config&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">gerConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;port=&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">port</span> <span class="o">+</span> <span class="s">&#34;\n&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">java</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>SpringBoot还可以使用 <code>@Autowired</code> 注解注入 <code>Environment</code> 对象的方式读取数据。这种方式 <code>SpringBoot</code> 会将配置文件中所有的数据封装到 <code>Environment</code> 对象中，如果需要使用哪个数据只需要通过调用 <code>Environment</code> 对象的 <code>getProperty(String name)</code> 方法获取。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Environment</span> <span class="n">env</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/config&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">gerConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;port=&#34;</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;server.port&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="自定义对象" data-numberify>自定义对象<a class="anchor ms-1" href="#自定义对象"></a></h3>
<p>SpringBoot提供了将配置文件中的数据封装到我们自定义的实体类对象中的方式。具体操作如下：</p>
<ol>
<li>
<p>在实体类上添加<code>@Component</code>注解。</p>
<p>表示将实体类 <code>bean</code> 的创建交给 <code>Spring</code> 管理。</p>
</li>
<li>
<p>使用 <code>@ConfigurationProperties</code> 注解表示加载配置文件。</p>
<p>在该注解中也可以使用 <code>prefix</code> 属性指定只加载指定键的数据。</p>
</li>
<li>
<p>在Controller中进行注入。</p>
</li>
</ol>
<p>Example：</p>
<p>添加依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-configuration-processor<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在配置文件中添加：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">myconfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">SpringBoot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="m">666</span><span class="w">
</span></span></span></code></pre></div><p>实体类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">&#34;myconfig&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">port</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// getter and setter...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>Controller：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">MyConfig</span> <span class="n">myConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/myconfig&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MyConfig</span> <span class="nf">getMyConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">myConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="多环境配置" data-numberify>多环境配置<a class="anchor ms-1" href="#多环境配置"></a></h3>
<p>由于开发环境、测试环境、生产环境的配置都不相同。所以SpringBoot给开发者提供了多环境的快捷配置，需要切换环境时只需要改一个配置即可。</p>
<ul>
<li>
<p><code>yaml</code>格式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># 开发</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">activate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 配置环境名</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">on-profile</span><span class="p">:</span><span class="w"> </span><span class="l">dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># spring.profiles 配置已弃用</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 生产</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">activate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">on-profile</span><span class="p">:</span><span class="w"> </span><span class="l">pro</span><span class="w"> </span><span class="c">#给生产环境起的名字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">81</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 测试</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">activate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">on-profile</span><span class="p">:</span><span class="w"> </span><span class="l">test</span><span class="w"> </span><span class="c">#给测试环境起的名字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">82</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 设置启用的环境</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">profiles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">active</span><span class="p">:</span><span class="w"> </span><span class="l">test </span><span class="w"> </span><span class="c">#表示使用的是开发环境的配置</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><code>properties</code>格式：</p>
<p>使用多文件方式，文件名以<code>application-</code>开头。如：</p>
<ul>
<li>
<p><code>application-dev.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">80</span>
</span></span></code></pre></div></li>
<li>
<p><code>application-pro.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">81</span>
</span></span></code></pre></div></li>
<li>
<p><code>application-test.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">82</span>
</span></span></code></pre></div></li>
</ul>
<p>SpringBoot只会默认加载名为 <code>application.properties</code> 的配置文件，所以需要在 <code>application.properties</code> 配置文件中设置启用哪个配置文件。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">spring.profiles.active</span><span class="o">=</span><span class="s">pro</span>
</span></span></code></pre></div></li>
</ul>
<p>SpringBoot提供了在运行<code>jar</code>时设置开启指定的环境的方式。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">java –jar springbootdemo.jar –-spring.profiles.active<span class="o">=</span><span class="nb">test</span>
</span></span></code></pre></div><p>临时修改端口号：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">java –jar springbootdemo.jar –-server.port<span class="o">=</span><span class="m">88</span>
</span></span></code></pre></div><blockquote>
<p>命令行设置的端口号优先级高于配置文件。
<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config" target="_blank" rel="noopener noreferrer">SpringBoot官网<i class="fas fa-external-link-square-alt ms-1"></i></a>已经对配置的优先级进行了说明：
<picture><img class="img-fluid " alt="" src="/docs/spring/springboot/base/image-20210917193910191.png" loading="lazy" width="1680" height="792" />
</picture>

</p>
</blockquote>
<h3 id="配置文件分类" data-numberify>配置文件分类<a class="anchor ms-1" href="#配置文件分类"></a></h3>
<p>SpringBoot定义了配置文件不同的放置的位置。而放在不同位置的优先级是不同的。SpringBoot中4级配置文件放置位置：</p>
<ol>
<li>classpath：application.yml</li>
<li>classpath：config/application.yml</li>
<li>file：application.yml</li>
<li>file：config/application.yml</li>
</ol>
<blockquote>
<p>级别越高优先级越高。</p>
</blockquote>
<h1 id="第三方资源整合" data-numberify>第三方资源整合<a class="anchor ms-1" href="#第三方资源整合"></a></h1>
<h2 id="整合-junit" data-numberify>整合 Junit<a class="anchor ms-1" href="#整合-junit"></a></h2>
<p>SpringBoot整合了Junit并可将其作为起步依赖整合到项目中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>SpringBoot整合Junit分为三步：</p>
<ol>
<li>在测试类上添加 <code>@SpringBootTest</code> 注解。</li>
<li>使用 <code>@Autowired</code> 注入要测试的资源。</li>
<li>定义测试方法进行测试。</li>
</ol>
<p>Example：</p>
<p>编写Service：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Book save ...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试<code>BookService</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">SpringbootDemoApplicationTests</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">BookService</span> <span class="n">bookService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">bookService</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>由于引导类默认扫描当前包下的类和包，所以测试类（或者测试类的包）和引导类要在同个包下。</p>
<p>否则，可以使用<code>@SpringBootTest</code>注解的<code>classes</code>属性指定引导类的字节码对象。如：<code>@SpringBootTest(classes = {SpringbootDemoApplication.class})</code></p>
</blockquote>
<h2 id="整合-mybatis" data-numberify>整合 MyBatis<a class="anchor ms-1" href="#整合-mybatis"></a></h2>
<p>在整合MyBatis前先建一个用于测试的数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SET</span><span class="w"> </span><span class="k">NAMES</span><span class="w"> </span><span class="n">utf8mb4</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SET</span><span class="w"> </span><span class="n">FOREIGN_KEY_CHECKS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- Table structure for book_tb
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w">  </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span><span class="w"> </span><span class="nb">CHARACTER</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="n">utf8mb3</span><span class="w"> </span><span class="k">COLLATE</span><span class="w"> </span><span class="n">utf8mb3_bin</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">USING</span><span class="w"> </span><span class="n">BTREE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="n">ENGINE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">InnoDB</span><span class="w"> </span><span class="nb">CHARACTER</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">utf8mb3</span><span class="w"> </span><span class="k">COLLATE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">utf8mb3_bin</span><span class="w"> </span><span class="n">ROW_FORMAT</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">Dynamic</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- Records of book_tb
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;郑嘉伦&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;钱璐&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;黄安琪&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;龙宇宁&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;姜宇宁&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;赵嘉伦&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SET</span><span class="w"> </span><span class="n">FOREIGN_KEY_CHECKS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>
<p>导入依赖：</p>
<ol>
<li>在创建项目时，通过Spring Initializr导入依赖：
<picture><img class="img-fluid " alt="" src="/docs/spring/springboot/base/1677302021447.png" loading="lazy" width="1575" height="1466" />
</picture>

</li>
<li>在<code>pom.xml</code>中导入坐标：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.0.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mysql-connector-j<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>编写数据库配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">datasource</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">driver-class-name</span><span class="p">:</span><span class="w"> </span><span class="l">com.mysql.jdbc.Driver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">jdbc:mysql://localhost:3306/spring_db</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>SpringBoot版本低于2.4.3（不含），Mysql驱动版本大于8.0时，需要在url连接串中配置时区 <code>jdbc:mysql://localhost:3306/spring_db?serverTimezone=UTC</code>，或在MySQL数据库端配置时区解决此问题。</p>
</blockquote>
</li>
<li>
<p>定义实体类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// getter、setter and toString
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>定义DAO接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Mapper</span> <span class="c1">// SpringBoot定义DAO接口类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">BookDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Select</span><span class="o">(</span><span class="s">&#34;SELECT * FROM book_tb WHERE id = #{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Book</span> <span class="nf">getById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>定义Test类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">SpringbootMybatisApplicationTests</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">BookDao</span> <span class="n">bookDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testGetById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="n">bookDao</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">book</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="使用-druid-数据源" data-numberify>使用 Druid 数据源<a class="anchor ms-1" href="#使用-druid-数据源"></a></h3>
<p>SpringBoot有默认的数据源，但是也可以指定使用Druid数据源。</p>
<ul>
<li>
<p>导入Druid依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.1.16<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>application.yml</code>配置文件配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">datasource</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">driver-class-name</span><span class="p">:</span><span class="w"> </span><span class="l">com.mysql.cj.jdbc.Driver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">jdbc:mysql://localhost:3306/spring_db?serverTimezone=UTC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">com.alibaba.druid.pool.DruidDataSource</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>SpringMVC 基础</title>
      <link>/docs/spring/springmvc/base/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springmvc/base/</guid>
      <description><![CDATA[简介 SpringMVC是Spring下的一个用于Web表现层开发的技术。相比Servlet，SpringMVC更加高效快捷。 SpringMV]]></description>
      <content:encoded><![CDATA[<h1 id="简介" data-numberify>简介<a class="anchor ms-1" href="#简介"></a></h1>
<p>SpringMVC是Spring下的一个用于Web表现层开发的技术。相比Servlet，SpringMVC更加高效快捷。</p>
<p>SpringMVC流程如下：</p>
<ul>
<li>浏览器发送请求到Tomcat服务器；</li>
<li>Tomcat接收请求后，将请求交给SpringMVC中的<code>DispatcherServlet</code>（前端控制器）来处理。</li>
<li><code>DispatcherServlet</code>按照对应规则将请求分发到对应的<code>Bean</code>。</li>
<li><code>Bean</code>由我们自己编写来处理不同的请求。
每个<code>Bean</code>中可以处理一个或多个不同的请求
URL。</li>
</ul>
<blockquote>
<p><code>DispatcherServlet</code>和<code>Bean</code>对象都需要交给Spring容器来进行管理。</p>
</blockquote>
<p>综上，我们需要编写的内容为：</p>
<ul>
<li>
<p><code>Bean</code>对象；</p>
</li>
<li>
<p>请求URL和<code>Bean</code>对象对应关系的配置；</p>
</li>
<li>
<p>构建Spring容器。</p>
<p>将<code>DispatcherServlet</code>和<code>Bean</code>对象交给容器管理。</p>
</li>
<li>
<p>配置Tomcat服务器。</p>
<p>使Tomcat能够识别Spring容器，并将请求交给容器中的<code>DispatcherServlet</code>来分发请求。</p>
</li>
</ul>
<p>项目的基本实现步骤如下：</p>
<ol>
<li>创建Web工程（Maven结构），并在工程的<code>pom.xml</code>中添加SpringMVC和Servlet坐标。</li>
<li>创建SpringMVC控制器类（等同于Servlet功能）。</li>
<li>初始化SpringMVC环境（同Spring环境），设定SpringMVC加载对应的<code>Bean</code>。</li>
<li>初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求。</li>
</ol>
<h2 id="spring-mvc-工作流程" data-numberify>Spring MVC 工作流程<a class="anchor ms-1" href="#spring-mvc-工作流程"></a></h2>
<p>SpringMVC的使用过程共分两个阶段：</p>
<ol>
<li>
<p>启动服务器初始化过程；</p>
<ol>
<li>
<p>服务器启动，执行<code>ServletConfig</code>类，初始化Web容器。</p>
</li>
<li>
<p>根据<code>getServletConfigClasses</code>获取所需的SpringMVC配置类（这里是<code>SpringMvcConfig</code>）来初始化SpringMVC的容器。</p>
</li>
<li>
<p>加载<code>SpringMvcConfig</code>配置类。</p>
</li>
<li>
<p>执行<code>@ComponentScan</code>加载对应的<code>Bean</code>。</p>
<p>扫描指定包下所有类上的注解，将所有的Controller类（如有<code>@Controller</code>、<code>@RestController</code>等注解的类）加载到容器中。</p>
</li>
<li>
<p>加载每一个<code>Controler</code>。</p>
<p>使用<code>@RequestMapping</code>建立请求路径与<code>Controler</code>中的方法的对应关系。</p>
</li>
<li>
<p>执行<code>getServletMappings</code>方法，定义所有的请求都通过SpringMVC。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">Spring</span><span class="o">[]</span>  <span class="nf">getServletMappings</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">Spring</span><span class="o">[]{</span><span class="s">&#34;/&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>    
</span></span></code></pre></div><p><code>/</code>代表所拦截请求的路径规则，只有被拦截后才能交给SpringMVC来处理请求。</p>
</li>
</ol>
</li>
<li>
<p>单次请求过程。</p>
<ol>
<li>根据请求路径发送请求。</li>
<li>Web容器将符合设置的请求路径的请求交给SpringMVC处理。</li>
<li>解析请求路径。</li>
<li>执行匹配对应请求路径的方法。</li>
<li>将有<code>@ResponseBody</code>方法的返回值作为响应体返回给请求方。</li>
</ol>
</li>
</ol>
<hr>
<h1 id="项目环境及结构" data-numberify>项目环境及结构<a class="anchor ms-1" href="#项目环境及结构"></a></h1>
<h2 id="项目结构" data-numberify>项目结构<a class="anchor ms-1" href="#项目结构"></a></h2>
<p>使用SpringMVC开发的项目结构如下：</p>
<ul>
<li>📁<code>project-file-name</code>
<ul>
<li>📁<code>src</code>
<ul>
<li>📁<code>main</code>
<ul>
<li>📁<code>java</code>
<ul>
<li>📁<code>com.linner</code>
<ul>
<li>📁<code>config</code> —— 配置类</li>
<li>📁<code>controller</code> —— 表现层</li>
<li>📁<code>dao</code> —— 持久层</li>
<li>📁<code>domain</code> —— 实体类</li>
<li>📁<code>service</code> —— 业务层</li>
</ul>
</li>
</ul>
</li>
<li>📁<code>resourcs</code></li>
<li>📁<code>webapp</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>这种项目结构采用了SSM架构，即：</p>
<ul>
<li>表现层；</li>
<li>持久层；</li>
<li>业务层。</li>
</ul>
<p>通过IDEA创建SpringMVC项目步骤如下：</p>
<ol>
<li>
<p>创建基础的Maven-Archetype-Webapp项目。</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springmvc/base/1676947539616.png" loading="lazy" width="1599" height="589" />
</picture>

</p>
</li>
<li>
<p>补全项目结构：</p>
<ul>
<li>📁<code>src</code>
<ul>
<li>📁<code>main</code>
<ul>
<li>📁<code>java</code></li>
<li>📁<code>resourcs</code></li>
<li>📁<code>webapp</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>修改<code>pom.xml</code>文件：</p>
<p>将多余的内容删除，然后添加SpringMVC所需的依赖。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span> <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl"><span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>springmvc-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;maven.compiler.source&gt;</span>1.8<span class="nt">&lt;/maven.compiler.source&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;maven.compiler.target&gt;</span>1.8<span class="nt">&lt;/maven.compiler.target&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/build&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="基础环境" data-numberify>基础环境<a class="anchor ms-1" href="#基础环境"></a></h2>
<p>Tomcat7 Maven插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.maven<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>tomcat7-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>2.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;port&gt;</span>80<span class="nt">&lt;/port&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;path&gt;</span>/<span class="nt">&lt;/path&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;uriEncoding&gt;</span>UTF-8<span class="nt">&lt;/uriEncoding&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/plugin&gt;</span>
</span></span></code></pre></div><p>基础依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Servlet --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Servlet需要修改作用范围，否则会与Tomcat中的servlet-api包发生冲突 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- provided代表的是该包只在编译和测试的时候用 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- SpringMVC --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-webmvc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="dao-相关依赖环境" data-numberify>DAO 相关依赖环境<a class="anchor ms-1" href="#dao-相关依赖环境"></a></h2>
<p>使用SpringMVC构建Web项目，除了以上基础配置外，还需要导入其他配置。</p>
<p>DAO相关的坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Spring JDBC --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- MySQL --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>5.1.47<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- MyBatis --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>3.5.6<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- MyBatis Spring依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.3.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- Druid 数据库连接池 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.1.16<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="其它依赖环境" data-numberify>其它依赖环境<a class="anchor ms-1" href="#其它依赖环境"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Jackson --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>jackson-databind<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>2.9.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 日志 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>ch.qos.logback<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>logback-classic<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.2.3<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- Thymeleaf（不常用） --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.thymeleaf<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>thymeleaf-spring5<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>3.0.12.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 文件上传依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>commons-fileupload<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>commons-fileupload<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.3.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- Test --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- Junit 单元测试 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>3.8.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="配置" data-numberify>配置<a class="anchor ms-1" href="#配置"></a></h1>
<p>配置SpringMVC有两种方式：</p>
<ul>
<li><code>web.xml</code>配置文件</li>
<li>配置类</li>
</ul>
<h2 id="配置文件方式" data-numberify>配置文件方式<a class="anchor ms-1" href="#配置文件方式"></a></h2>
<p>在<code>web.xml</code>中注册SpringMVC的前端控制器<code>DispatcherServlet</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE web-app PUBLIC
</span></span></span><span class="line"><span class="cl"><span class="cp"> &#34;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp"> &#34;http://java.sun.com/dtd/web-app_2_3.dtd&#34; &gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;web-app&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-name&gt;</span>springMVC<span class="nt">&lt;/servlet-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 指定SpringMVC前端控制器： --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet-mapping&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-name&gt;</span>springMVC<span class="nt">&lt;/servlet-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">            配对路径
</span></span></span><span class="line"><span class="cl"><span class="c">            / 表示处理所有不包括.jsp的请求
</span></span></span><span class="line"><span class="cl"><span class="c">            因为.jsp有自己的servlet，如果在DispatcherServlet中处理.jsp，会导致找不到相应页面，从而导致渲染失败
</span></span></span><span class="line"><span class="cl"><span class="c">        --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;url-pattern&gt;</span>/<span class="nt">&lt;/url-pattern&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/webapp&gt;</span>
</span></span></code></pre></div><blockquote>
<p><code>&lt;url-pattern&gt;</code>：</p>
<ul>
<li><code>/</code>：表示匹配所有不包括<code>.jsp</code>的请求；</li>
<li><code>/*</code>：能够匹配所有请求，包括<code>.jsp</code>。</li>
</ul>
</blockquote>
<p>扩展配置：</p>
<p><code>web.xml</code>中的配置还可以定义在其它文件中，例如在<code>resourece</code>下创建新的配置文件<code>springMVC.xml</code>。然后在<code>web.xml</code>添加新配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">    配置SpringMVC的前端控制器
</span></span></span><span class="line"><span class="cl"><span class="c">    对浏览器发送的请求统一进行处理
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;webapp&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-name&gt;</span>springMVC<span class="nt">&lt;/servlet-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">            通过初始化参数指定SpringMVC配置文件的位置和名称
</span></span></span><span class="line"><span class="cl"><span class="c">         --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;init-param&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- contextConfigLocation为固定值 --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">                使用 classpath: 表示从类路径查找配置文件，例如maven工程中的src/main/resources
</span></span></span><span class="line"><span class="cl"><span class="c">             --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-value&gt;</span>classpath:springMVC.xml<span class="nt">&lt;/param-value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/init-param&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">            将启动控制DispatcherServlet的初始化时间提前到服务器启动时：
</span></span></span><span class="line"><span class="cl"><span class="c">        --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/webapp&gt;</span>
</span></span></code></pre></div><p>在<code>springMVC.xml</code>中配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xmlns:context=</span><span class="s">&#34;http://www.springframework.org/schema/context&#34;</span> <span class="na">xmlns:mvc=</span><span class="s">&#34;http://www.springframework.org/schema/mvc&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 自动扫描包 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&#34;com.linner.controller&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 配置Thymeleaf视图解析器（不常用） --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;viewResolver&#34;</span> <span class="na">class=</span><span class="s">&#34;org.thymeleaf.spring5.view.ThymeleafViewResolver&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;order&#34;</span> <span class="na">value=</span><span class="s">&#34;1&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 设置编码，将编码都转为 UTF-8 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;characterEncoding&#34;</span> <span class="na">value=</span><span class="s">&#34;UTF-8&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;templateEngine&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;org.thymeleaf.spring5.SpringTemplateEngine&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;templateResolver&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">                        <span class="c">&lt;!-- 视图前缀 --&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;prefix&#34;</span> <span class="na">value=</span><span class="s">&#34;/WEB-INF/templates/&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">                        <span class="c">&lt;!-- 视图后缀 --&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;suffix&#34;</span> <span class="na">value=</span><span class="s">&#34;.html&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;templateMode&#34;</span> <span class="na">value=</span><span class="s">&#34;HTML5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;characterEncoding&#34;</span> <span class="na">value=</span><span class="s">&#34;UTF-8&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 静态资源访问 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mvc:view-controller</span> <span class="na">path=</span><span class="s">&#34;/&#34;</span> <span class="na">view-name=</span><span class="s">&#34;index&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">        处理静态资源，例如html、js、css、jpg
</span></span></span><span class="line"><span class="cl"><span class="c">        若只设置该标签，则只能访问静态资源，其他请求则无法访问
</span></span></span><span class="line"><span class="cl"><span class="c">        此时必须设置&lt;mvc:annotation-driven/&gt;解决问题
</span></span></span><span class="line"><span class="cl"><span class="c">    --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mvc:default-servlet-handler/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 开启mvc注解驱动 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mvc:annotation-driven&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mvc:message-converters&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 处理响应中文内容乱码 --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;org.springframework.http.converter.StringHttpMessageConverter&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;defaultCharset&#34;</span> <span class="na">value=</span><span class="s">&#34;UTF-8&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;supportedMediaTypes&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;list&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;value&gt;</span>text/html<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;value&gt;</span>application/json<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;/list&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/mvc:message-converters&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/mvc:annotation-driven&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><blockquote>
<p>在视图解析器中设置了视图前缀<code>&lt;property name=&quot;prefix&quot; ...&gt;</code>和视图后缀<code>&lt;property name=&quot;suffix&quot; ...&gt;</code>，那么在Controller的方法中，想要跳转到视图时，只需返回对应的视图文件名称，并去掉其后缀。例如访问<code>hello.html</code>只需返回<code>&quot;hello&quot;</code>，但<code>hello.html</code>必须要在对应的前缀路径中。</p>
</blockquote>
<p>SpringMVC编码过滤器（必须在<code>web.xml</code>中进行注册）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;webapp&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 配置 SpringMVC 的编码过滤器 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;filter&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;filter-name&gt;</span>CharacterEncodingFilter<span class="nt">&lt;/filter-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="nt">&lt;/filter-class&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;init-param&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-name&gt;</span>encoding<span class="nt">&lt;/param-name&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-value&gt;</span>UTF-8<span class="nt">&lt;/param-value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/init-param&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;init-param&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-name&gt;</span>forceResponseEncoding<span class="nt">&lt;/param-name&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/init-param&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/filter&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;filter-mapping&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;filter-name&gt;</span>CharacterEncodingFilter<span class="nt">&lt;/filter-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/filter-mapping&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/webapp&gt;</span>
</span></span></code></pre></div><blockquote>
<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效。</p>
</blockquote>
<h2 id="配置类方式" data-numberify>配置类方式<a class="anchor ms-1" href="#配置类方式"></a></h2>
<p>使用配置类则无需在<code>webapp/WEB-INF</code>中添加<code>web.xml</code>文件（当然也可以选择添加）。</p>
<p>SpringMVC项目至少需要<code>ServletConfig</code>、<code>SpringConfig</code>和<code>SpringMvcConfig</code>这三个配置类。</p>
<ul>
<li>ServletConfig：Spring MVC项目初始化类，也是项目的入口，作用与<code>web.xml类似</code>。</li>
<li>SpringConfig：控制业务（Service）和功能（如DataSource、SqlSessionFactoryBean、 MapperScannerConfigurer等）相关的Bean。</li>
<li>SpringMvcConfig（WebConfig）：加载表现层Bean（Controller）。</li>
</ul>
<p><code>ServletConfig</code>（Web项目入口配置类）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletConfig</span> <span class="kd">extends</span> <span class="n">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 指定Spring的配置类
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getRootConfigClasses</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">SpringConfig</span><span class="o">.</span><span class="na">class</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 指定Spring MVC的配置类
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getServletConfigClasses</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">SpringMvcConfig</span><span class="o">.</span><span class="na">class</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 指定DispatcherServlet的映射路径，即url-pattern
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">getServletMappings</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&#34;/&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><code>ServletConfig</code>最重要的是继承<code>AbstractAnnotationConfigDispatcherServletInitializer</code>这个类，并反别重写它的三个方法。</p>
<p>在Servlet3.0环境中，容器会在类路径中查找实现<code>javax.servlet.ServletContainerlnitializer</code>接口的类，如果找到的话就用它来配置Servlet容器。</p>
<p>Spring提供了这个接口的实现，名为<code>SpringServletContainerlnitializer</code>，这个类反过来又会查找实现<code>WebApplicationInitializer</code>的类并将配置的任务交给它们来完成。</p>
<p>Spring3.2引l入了一个便利的<code>WebApplicationInitializer</code>基础实现，名为<code>AbstractAnnotationConfigDispatcherServletlnitializer</code>，当我们的类扩展了<code>AbstractAnnotationConfigDispatcherServletInitializer</code>，并将其部署到Servlet3.O容器的时候，容器会自动发现它，并用它来配置<code>Servlet</code>上下文。</p>
</blockquote>
<p><code>SpringConfig</code>（启动Tomcat服务器时加载Spring配置类）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.service&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">(</span><span class="s">&#34;classpath:jdbc.properties&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Import</span><span class="o">({</span><span class="n">JdbcConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">MyBatisConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span> <span class="c1">// 引入其它配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@EnableTransactionManagement</span>    <span class="c1">// 开启事务管理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>Spring需要管理的是<code>service</code>包和<code>dao</code>包。但<code>dao</code>包最终是交给<code>MapperScannerConfigurer</code>对象来进行扫描处理的。所以<code>SpringConfig</code>只需要扫描到<code>service</code>包即可。</p>
<p>演示<code>@ComponentScan</code>的另一种用法（排除<code>controller</code>包中的Bean）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">&#34;com.linner&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">excludeFilters</span><span class="o">=</span><span class="nd">@ComponentScan.Filter</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">type</span> <span class="o">=</span> <span class="n">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">classes</span> <span class="o">=</span> <span class="n">Controller</span><span class="o">.</span><span class="na">class</span> <span class="c1">// 排除@Controller定义的Bean
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span></code></pre></div><p>上面方法本质是使用<code>@ComponentScan</code>的<code>excludeFilters</code>属性设置过滤规则。</p>
<ul>
<li><code>type</code>：设置排除规则。
<ul>
<li><code>ANNOTATION</code>：按照注解排除。</li>
<li><code>ASSIGNABLE_TYPE</code>：按照指定的类型过滤。</li>
<li><code>ASPECTJ</code>：按照Aspectj表达式排除（基本上不会用）。</li>
<li><code>REGEX</code>：按照正则表达式排除。</li>
<li><code>CUSTOM</code>：按照自定义规则排除。</li>
</ul>
</li>
</ul>
<p><code>classes</code>：设置排除的具体注解类。</p>
</blockquote>
<p><code>SpringMvcConfig</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.controller&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebMvc</span>   <span class="c1">// MVC注解驱动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebConfig</span> <span class="kd">implements</span> <span class="n">WebMvcConfigurer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 相当于 default-servlet-handler
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureDefaultServletHandling</span><span class="o">(</span><span class="n">DefaultServletHandlerConfigurer</span> <span class="n">configurer</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">configurer</span><span class="o">.</span><span class="na">enable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 视图控制器 view-controller
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="n">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">&#34;/hello&#34;</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">&#34;hello&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 文件上传解析器
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MultipartResolver</span> <span class="nf">getMultipartResolver</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CommonsMultipartResolver</span> <span class="n">commonsMultipartResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CommonsMultipartResolver</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">commonsMultipartResolver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 异常处理解析器
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureHandlerExceptionResolvers</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">HandlerExceptionResolver</span><span class="o">&gt;</span> <span class="n">exceptionResolvers</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SimpleMappingExceptionResolver</span> <span class="n">exceptionResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleMappingExceptionResolver</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Properties</span> <span class="n">prop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">prop</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&#34;java.lang.ArithmeticException&#34;</span><span class="o">,</span> <span class="s">&#34;error&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">exceptionResolver</span><span class="o">.</span><span class="na">setExceptionMappings</span><span class="o">(</span><span class="n">prop</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 可以不设置，默认键即为 exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">exceptionResolver</span><span class="o">.</span><span class="na">setExceptionAttribute</span><span class="o">(</span><span class="s">&#34;exception&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">exceptionResolvers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">exceptionResolver</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 模板解析器
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ITemplateResolver</span> <span class="nf">getTemplateResolver</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取当前的 WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">WebApplicationContext</span> <span class="n">webApplicationContext</span> <span class="o">=</span> <span class="n">ContextLoader</span><span class="o">.</span><span class="na">getCurrentWebApplicationContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 使用WebApplicationContext获取ServletContext，并构造ServletContextTemplateResolver
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ServletContextTemplateResolver</span> <span class="n">templateResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServletContextTemplateResolver</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">webApplicationContext</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置视图前缀
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">templateResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">&#34;/WEB-INF/templates/&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置视图后缀
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">templateResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">&#34;.html&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">templateResolver</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">templateResolver</span><span class="o">.</span><span class="na">setTemplateMode</span><span class="o">(</span><span class="n">TemplateMode</span><span class="o">.</span><span class="na">HTML</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">templateResolver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 模板引擎
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param templateResolver 模板解析器（自动装配，@Autowired可忽略不写）
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SpringTemplateEngine</span> <span class="nf">getTemplateEngine</span><span class="o">(</span><span class="n">ITemplateResolver</span> <span class="n">templateResolver</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">SpringTemplateEngine</span> <span class="n">templateEngine</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpringTemplateEngine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">templateEngine</span><span class="o">.</span><span class="na">setTemplateResolver</span><span class="o">(</span><span class="n">templateResolver</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">templateEngine</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 设置视图解析器
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param templateEngine 模板引擎（自动装配）
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ViewResolver</span> <span class="nf">getViewResolver</span><span class="o">(</span><span class="n">SpringTemplateEngine</span> <span class="n">templateEngine</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">ThymeleafViewResolver</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThymeleafViewResolver</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setTemplateEngine</span><span class="o">(</span><span class="n">templateEngine</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>关于Spring MVC的配置类，除了扫描组件和配置模板解析器外，Spring提供了两种方式来配置，一种是实现<code>WebMvcConfigurer</code>接口，另一种是继承<code>WebMvcConfigurationSupport</code>。由于Java 8的接口中提供了<code>default</code>关键字来修饰接口方法，使得接口可以存在默认的实现，所以使用<code>WebMvcConfigurer</code>接口也不必实现所有接口。而在SpringBoot 2中使用<code>WebMvcConfigurationSupport</code>有可能会导致SpringBoot的自动配置不生效，并且在Spring MVC中使用<code>WebMvcConfigurationSupport</code>也可能导致配置类不生效，所以我个人<b><u>推荐使用<code>WebMvcConfigurer</code></u></b>。</p>
<p>如果你使用<code>WebMvcConfigurationSupport</code>后发现拦截器等配置不生效，那么可以尝试实现<code>WebMvcConfigurer</code>接口来解决问题。</p>
</blockquote>
<p>DAO相关配置类：</p>
<p><code>jdbc.properties</code>（数据库配置，放在项目中<code>resources</code>目录下）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">jdbc.driver</span><span class="o">=</span><span class="s">com.mysql.jdbc.Driver</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.url</span><span class="o">=</span><span class="s">jdbc:mysql:///spring_db?useSSL=false&amp;characterEncoding=utf-8</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.username</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.password</span><span class="o">=</span><span class="s">123456</span>
</span></span></code></pre></div><p><code>JdbcConfig</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JdbcConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.driver}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">driver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.url}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">url</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.username}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.password}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">dataSource</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="n">DruidDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DruidDataSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataSource</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="n">driver</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">PlatformTransactionManager</span> <span class="nf">transactionManager</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">DataSourceTransactionManager</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataSourceTransactionManager</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>MyBatisConfig</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyBatisConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SqlSessionFactoryBean</span> <span class="nf">sqlSessionFactory</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">SqlSessionFactoryBean</span> <span class="n">factoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">factoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">factoryBean</span><span class="o">.</span><span class="na">setTypeAliasesPackage</span><span class="o">(</span><span class="s">&#34;com.linner.domain&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">factoryBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MapperScannerConfigurer</span> <span class="nf">mapperScannerConfigurer</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="n">MapperScannerConfigurer</span> <span class="n">msc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapperScannerConfigurer</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">msc</span><span class="o">.</span><span class="na">setBasePackage</span><span class="o">(</span><span class="s">&#34;com.linner.dao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">msc</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="使用过滤器转换编码" data-numberify>使用过滤器转换编码<a class="anchor ms-1" href="#使用过滤器转换编码"></a></h1>
<p>在<code>ServletConfig</code>中重写<code>AbstractAnnotationConfigDispatcherServletInitializer</code>的<code>getServletFilters()</code>来注册过滤器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 注册过滤器
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">Filter</span><span class="o">[]</span> <span class="nf">getServletFilters</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置编码，将编码都转为 UTF-8
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">CharacterEncodingFilter</span> <span class="n">characterEncodingFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CharacterEncodingFilter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">characterEncodingFilter</span><span class="o">.</span><span class="na">setEncoding</span><span class="o">(</span><span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">characterEncodingFilter</span><span class="o">.</span><span class="na">setForceEncoding</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">HiddenHttpMethodFilter</span> <span class="n">hiddenHttpMethodFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HiddenHttpMethodFilter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">Filter</span><span class="o">[]{</span><span class="n">characterEncodingFilter</span><span class="o">,</span> <span class="n">hiddenHttpMethodFilter</span><span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="请求与响应" data-numberify>请求与响应<a class="anchor ms-1" href="#请求与响应"></a></h1>
<p>SpringMVC是Web层的框架，主要作用是接收请求、接收数据、响应结果。</p>
<p>编写Controller只需要在Controller类上使用<code>@Controller</code>注解即可。</p>
<h2 id="请求映射-requestmapping" data-numberify>请求映射 RequestMapping<a class="anchor ms-1" href="#请求映射-requestmapping"></a></h2>
<p>映射请求路径使用<code>@RequestMapping</code>注解。注解中的使用<code>value</code>属性指定映射的请求路径（由于是<code>value</code>属性，所以当注解中无需指定其它参数时，可以省略）。</p>
<p><code>@RequestMapping</code>可以分别作用在类和方法上：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/helloSpring&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">helloSpring</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Hello Spring!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/helloWorld&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">helloWorld</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Hello World!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p>方法上定义的<code>@RequestMapping</code>是具体的请求方式，包括请求路径和请求方式。</p>
<p>即，如果在方法上使用了<code>@RequestMapping</code>并且没有在类上使用<code>@RequestMapping</code>，那么该方法的请求路径即为方法上<code>@RequestMapping</code>中的值。</p>
</li>
<li>
<p>类上定义的<code>@RequestMapping</code>是请求目录。</p>
<p>即，如果在方法和类上均使用了<code>@RequestMapping</code>，那么该方法的请求路径需要加上类<code>@RequestMapping</code>注解中定义的目录。例如上方代码中的请求路径为<code>/user/helloSpring</code>和<code>/user/helloWorld</code>。</p>
</li>
</ul>
<p><code>value</code>属性是一个字符串数组，可以通过以下方式来指定多个请求路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">({</span><span class="s">&#34;hello&#34;</span><span class="o">,</span> <span class="s">&#34;helloWorld&#34;</span><span class="o">})</span>
</span></span></code></pre></div><p><code>@RequestMapping</code>除了<code>value</code>属性外，还有<code>method</code>属性。<code>method</code>属性是用来指定请求方式的，如：<code>@RequestMapping(method = RequestMethod.POST)</code>（匹配POST请求方式）。</p>
<blockquote>
<p>在客户端向服务器发送请求时，<code>DispatcherServlet</code>会首先根据<code>@RequestMapping</code>获取对应的控制器方法。</p>
</blockquote>
<h2 id="接收-query-参数" data-numberify>接收 Query 参数<a class="anchor ms-1" href="#接收-query-参数"></a></h2>
<p>Query参数，也就是拼接在请求路径后面，以<code>?</code>开始，使用<code>&amp;</code>分隔每个参数项的参数传递方式。例如：</p>
<pre tabindex="0"><code>http://localhost/user/hello?name=张三
</code></pre><p>接收Query参数，GET和POST请求的编写方式一致。</p>
<p>如果要使用不同的方式接收请求，可以修改<code>@RequestMapping</code>注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/save&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span></span></code></pre></div><h3 id="普通参数" data-numberify>普通参数<a class="anchor ms-1" href="#普通参数"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 [http://localhost/user/hello?name=张三] 访问
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 返回响应体 Hello 张三!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/hello&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Hello &#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&#34;!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 [http://localhost/user/login?name=张三&amp;password=abc] 访问
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 返回响应体 OK，终端输出 userName=张三; password=abc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">login</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">)</span> <span class="n">String</span> <span class="n">userName</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;userName=&#34;</span> <span class="o">+</span> <span class="n">userName</span> <span class="o">+</span> <span class="s">&#34;; password=&#34;</span> <span class="o">+</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p>请求参数：</p>
<p><u>定义相同的Query参数名与方法形参变量名即可接收参数。</u></p>
<p><u>如果想要形参名与Query参数名不同则可使用<code>@RequestParam</code>注解定义Query参数名。</u></p>
<p>如果有多个请求参数则定义多个方法参数。</p>
</li>
<li>
<p>返回值：</p>
<p>返回值使用<code>@ResponseBody</code>注解后直接在方法中使用<code>return</code>返回。这里注解<code>@ResponseBody</code>是指将返回值作为响应体。</p>
</li>
</ul>
<h3 id="pojo类型参数" data-numberify>POJO类型参数<a class="anchor ms-1" href="#pojo类型参数"></a></h3>
<p>使用POJO类型接收参数，只需要让请求参数名与形参对象属性名相同即可。如果有嵌套的POJO参数，请求参数名与形参对象属性名相同，然后按照对象层次结构关系即可接收。</p>
<p>定义一个POJO类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">province</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// setter、getter and toString...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// setter、getter and toString...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>Controller：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 访问 [http://localhost/user/login?id=123&amp;password=abc&amp;name=张三&amp;address.province=广东&amp;address.city=广州]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 返回响应体 OK，终端输出 Login: User{id=123, name=&#39;张三&#39;, password=&#39;abc&#39;, address=Address{province=&#39;广东&#39;, city=&#39;广州&#39;}}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">login</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Login: &#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="数组集合类型参数" data-numberify>数组、集合类型参数<a class="anchor ms-1" href="#数组集合类型参数"></a></h3>
<p>接收数组参数只需让请求参数名与形参名相同且请求参数为多个即可（形参为数组类型）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 访问 [http://localhost/user/setHobbies?id=123&amp;hobbies=唱歌,跳舞,Rap,打篮球]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 返回响应体 OK，终端输出 User 123&#39;s hobbyies: [唱歌, 跳舞, Rap, 打篮球]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/setHobbies&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">setHobbies</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">hobbies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;User &#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&#34;&#39;s hobbies: &#34;</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">hobbies</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用集合类型形参接收参数，使用方式与数组不同（会报错）。因为SpringMVC将List看做是一个POJO对象来处理，将其创建一个对象并准备把前端的数据封装到对象中，但是List是一个接口无法创建对象。</p>
<p>使用集合类型形参接收参数需要使用<code>@RequestParam</code>绑定参数关系。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 访问方式与数组形式相同，响应体与终端输出也相同
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/setHobbies&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">setHobbies</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@RequestParam</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">hobbies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;User &#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&#34;&#39;s hobbies: &#34;</span> <span class="o">+</span> <span class="n">hobbies</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="日期格式" data-numberify>日期格式<a class="anchor ms-1" href="#日期格式"></a></h3>
<p>使用<code>@DateTimeFormat</code>可以设置参数的日期格式，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// URL: http://localhost/user/setBirthday?id=123&amp;birthday=2023/1/1 18:23:40
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/setBirthday&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">setBirthday</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@DateTimeFormat</span><span class="o">(</span><span class="n">pattern</span> <span class="o">=</span> <span class="s">&#34;yyyy/MM/dd HH:mm:ss&#34;</span><span class="o">)</span> <span class="n">Date</span> <span class="n">birthday</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;User &#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&#34;&#39;s birthday is &#34;</span> <span class="o">+</span> <span class="n">birthday</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="json-数据参数" data-numberify>JSON 数据参数<a class="anchor ms-1" href="#json-数据参数"></a></h2>
<p>使用JSON传输需要添加相应依赖。SpringMVC默认使用的是<code>jackson</code>来处理json的转换：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>jackson-databind<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>2.9.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在配置类中添加<code>@EnableWebMvc</code>注解来开启JSON数据类型自动转换：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner.controller&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebMvc</span> <span class="c1">// 开启JSON数据类型自动转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用JSON传输数据只需要在形参前添加<code>@ResponseBody</code>注解来将外部传递的JSON数据映射到形参到对象中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">login</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Login: &#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/setHobbies&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">setHobbies</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@RequestBody</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="cm">/* 也可以使用 String[] */</span> <span class="n">hobbies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;User &#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&#34;&#39;s hobbies: &#34;</span> <span class="o">+</span> <span class="n">hobbies</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>login()</code>：</p>
<p>URL：<code>http://localhost/user/login</code></p>
<p>JSON：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;张三&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;password&#34;</span><span class="p">:</span> <span class="s2">&#34;123&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;address&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;province&#34;</span><span class="p">:</span> <span class="s2">&#34;广东&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;city&#34;</span><span class="p">:</span> <span class="s2">&#34;广州&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></div></li>
<li>
<p><code>setHobbies</code>：</p>
<p>URL：<code>http://localhost/user/setHobbies2?id=123</code></p>
<p>JSON：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span><span class="s2">&#34;唱歌&#34;</span><span class="p">,</span> <span class="s2">&#34;跳舞&#34;</span><span class="p">,</span> <span class="s2">&#34;Rap&#34;</span><span class="p">,</span> <span class="s2">&#34;打篮球&#34;</span><span class="p">]</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="响应-json-数据" data-numberify>响应 JSON 数据<a class="anchor ms-1" href="#响应-json-数据"></a></h2>
<p>响应JSON数据需要依赖于<code>@ResponseBody</code>（在Controller中）和<code>@EnableWebMvc</code>（在配置类中）注解。将返回值设置为实体类对象，设置返回值类型为实体类类型，即可实现返回对应对象的JSON数据：</p>
<p>实体类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// constructor、setter、getter and toString ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>Controller:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/search&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Book</span> <span class="nf">search</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Book</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;Hello SpringMVC&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/searchName&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="nf">searchName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Search the book &#34;</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span> <span class="n">books</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">books</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Book</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">name</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">i</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">books</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>searchName()</code>：</p>
<p>URL：<code>http://localhost/books/searchName?name=SpringMVC</code>
返回JOSN：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC0&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC1&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC2&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC3&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC4&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div></li>
<li>
<p><code>search()</code>：</p>
<p>URL：<code>http://localhost/books/search?id=123</code>
返回JSON：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="ant-风格路径" data-numberify>Ant 风格路径<a class="anchor ms-1" href="#ant-风格路径"></a></h2>
<p>在Ant风格中，定义了以下几种符号：</p>
<ul>
<li><code>?</code>：表示匹配请求资源目录中的<u>任意单个字符</u>。</li>
<li><code>*</code>：表示匹配请求资源目录中的<u>任意0个或多个字符</u>。</li>
<li><code>/**/</code>：表示匹配请求路径中任意一层或多层目录。例如<code>/**/user</code>可以匹配<code>/abc/user</code>、<code>/abc/def/user</code>等等。</li>
</ul>
<h2 id="rest-风格" data-numberify>REST 风格<a class="anchor ms-1" href="#rest-风格"></a></h2>
<p>REST（Representational State Transfer，表现形式状态转换），是一种软件架构风格。REST的优点有：</p>
<ul>
<li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作。</li>
<li>简化书写。</li>
</ul>
<p>按照REST风格访问资源时使用行为动作区分对资源进行了何种操作：</p>
<ul>
<li>GET：查询；</li>
<li>POST：新增。</li>
<li>PUT：修改。</li>
<li>DELETE：删除。</li>
</ul>
<p>如：</p>
<ul>
<li>
<p><code>http://localhost/users</code> —— GET：</p>
<p>查询全部用户信息（查询）。</p>
</li>
<li>
<p><code>http://localhost/users/1</code> —— GET：查询指定用户（id为1）信息（查询）。</p>
</li>
<li>
<p><code>http://localhost/users</code> —— POST：添加用户信息（新增/保存）。</p>
</li>
<li>
<p><code>http://localhost/users</code> —— PUT：修改用户信息（修改/更新）。</p>
</li>
<li>
<p><code>http://localhost/users/1</code> —— DELETE：删除用户信息（删除）。</p>
</li>
</ul>
<blockquote>
<p>描述模块的名称通常使用复数，表示此类资源，而非单个资源。</p>
</blockquote>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/users&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 添加用户
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">save</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 删除用户
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/{id}&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">DELETE</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">delete</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 修改用户
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">PUT</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">update</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据用户id查询
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/{id}&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">searchById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 查询所有用户
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">searchAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>上方Controller中每个方法的<code>@RequestMapping</code>中都使用了<code>method</code>元素来确定请求方式。并且根据需要<code>save()</code>和<code>update()</code>都接收一个JSON数据。</p>
<p><code>delete()</code>和<code>searchById()</code>都使用了路径参数（<code>value = &quot;\{id}&quot;</code>）。指定路径参数后，需要在方法参数列表中添加名称相同的参数，并且用<code>@PathVariable</code>注解（<code>public String delete(@PathVariable int id)</code>）。</p>
<p>路径参数可以定义多个，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/{id}/{name}&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">searchById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果想要路径参数名与形参名不同，需要在<code>@PathVariable</code>中注明对应关系，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/{id}&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">DELETE</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">delete</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">&#34;id&#34;</span><span class="o">)</span> <span class="kt">int</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="restful-快速开发" data-numberify>RESTful 快速开发<a class="anchor ms-1" href="#restful-快速开发"></a></h3>
<ul>
<li>
<p>使用<code>@RestController</code>注解：</p>
<p>将<code>@ResponseBody</code>注解提到类上，让所有的方法都有<code>@ResponseBody</code>的功能。
<code>@RestController</code>注解正好相当于<code>@Controller</code>加上<code>@ResponseBody</code>的功能，所以可以使用<code>@RestController</code>替代它们。</p>
</li>
<li>
<p>使用<code>@GetMapping</code>、<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>等替代<code>@RequestMapping</code>。</p>
<p>例如<code>@GetMapping</code>就相当于<code>RequestMapping(method = RequestMethod.GET)</code>。</p>
</li>
</ul>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 搜索全部书籍
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;All Books&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 搜索图书
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Get by id &#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 保存图书
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PostMapping</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">save</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">Book</span> <span class="n">book</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Save &#34;</span> <span class="o">+</span> <span class="n">book</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 修改图书
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PutMapping</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">update</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">Book</span> <span class="n">book</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Update &#34;</span> <span class="o">+</span> <span class="n">book</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 删除图书
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@DeleteMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">delete</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Delete by id&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="params-请求参数映射匹配" data-numberify>Params 请求参数映射匹配<a class="anchor ms-1" href="#params-请求参数映射匹配"></a></h2>
<p><code>params</code>是<code>@RequestMapping</code>中的一个属性，该属性通过请求的请求参数匹配请求映射。</p>
<p>用法如下：</p>
<ul>
<li>
<p><code>&quot;param&quot;</code>：请求映射所匹配的请求必须携带<code>param</code>这个请求参数。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;login&#34;</span><span class="o">},</span> <span class="n">params</span> <span class="o">=</span> <span class="s">&#34;username&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>请求路径示例：</p>
<pre tabindex="0"><code>http://localhost/login?username=zhangsan
</code></pre></li>
<li>
<p><code>&quot;!param&quot;</code>：否定匹配，请求映射所匹配的请求必须不能携带<code>param</code>请求参数。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;login&#34;</span><span class="o">},</span> <span class="n">params</span> <span class="o">=</span> <span class="s">&#34;!username&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>如果请求路径中包含参数<code>username</code>将不会匹配到该<code>@RequestMapping</code>。</p>
</li>
<li>
<p><code>&quot;param=value&quot;</code>：等值匹配，请求映射所匹配的请求必须携带<code>param</code>请求参数，且<code>param</code>参数的值必须为<code>value</code>。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;login&#34;</span><span class="o">},</span> <span class="n">params</span> <span class="o">=</span> <span class="s">&#34;username=admin&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>请求路径为：</p>
<pre tabindex="0"><code>http://localhost/login?username=admin
</code></pre></li>
<li>
<p><code>&quot;param!=value&quot;</code>：非值匹配，请求映射所匹配的请求必须携带<code>param</code>请求参数，但<code>param</code>的值不能为<code>value</code>。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;login&#34;</span><span class="o">},</span> <span class="n">params</span> <span class="o">=</span> <span class="s">&#34;username!=admin&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>如果请求路径携带参数<code>username</code>且值为<code>admin</code>则匹配失败。</p>
</li>
<li>
<p><code>{expression1[, expression2[, ...]]}</code>：</p>
<p><code>params</code>是字符串数组类型，可以指定多个参数规则，其中<code>expression</code>可以是以上任何类型的字符串表达式中的任何一种。</p>
</li>
</ul>
<p><code>params</code>只对其指定的参数有要求，没有被其指定的参数并没有任何限制。</p>
<p>如果请求的路径和方式都满足<code>@RequestMapping</code>，但是与<code>params</code>指定的规则不付，如果此时没有其它映射来匹配这个请求，服务器会返回给浏览器<code>400</code>错误。</p>
<h2 id="headers-请求头匹配" data-numberify>headers 请求头匹配<a class="anchor ms-1" href="#headers-请求头匹配"></a></h2>
<p><code>headers</code>是<code>@RequestMapping</code>的属性，它指定请求的请求头信息匹配规则。</p>
<p><code>headers</code>的字符串表达式语法与<code>params</code>十分相似：</p>
<ul>
<li>
<p><code>&quot;header&quot;</code>：请求映射所匹配的请求必须携带<code>header</code>请求头信息。</p>
</li>
<li>
<p><code>&quot;!header&quot;</code>：请求映射所匹配的请求必须不能携带<code>header</code>请求头信息。</p>
</li>
<li>
<p><code>&quot;header=value&quot;</code>：请求映射所匹配的请求必须携带<code>header</code>请求头信息且<code>header=value</code>。</p>
<p>请求头中使用的是<code>:</code>分隔开的键值对，<code>:</code>左边是键（即上述中的<code>header</code>），右边是值（即上述中的<code>value</code>）。只需要将<code>:</code>替换为<code>=</code>即是对应的<code>headers</code>字符串表达式。</p>
</li>
<li>
<p><code>&quot;header!=value&quot;</code>：要求请求映射所匹配的请求必须携带<code>header</code>请求头信息且<code>header!=value</code>。</p>
</li>
<li>
<p><code>{expression1[, expression2[, ...]]}</code>：<code>headers</code>属性同样是字符串数组类型，可以在<code>{}</code>中使用上述任何表达式。</p>
</li>
</ul>
<p>当<code>@RequestMapping</code>其它条件都满足，除了<code>headers</code>时，服务器会返回<code>404</code>错误。</p>
<hr>
<h1 id="域对象共享数据" data-numberify>域对象共享数据<a class="anchor ms-1" href="#域对象共享数据"></a></h1>
<p><code>request</code>域对象共享数据的常用方式大致有5种：</p>
<ol>
<li>通过<code>ServletAPI</code>获取（不建议使用）。即通过<code>ServletRequest</code>或<code>HttpServletRequest</code>对象获取<code>request</code>域。</li>
<li>通过<code>ModelAndView</code>获取。</li>
<li>通过<code>Model</code>获取。</li>
<li>通过<code>Map&lt;String, Object&gt;</code>获取。</li>
<li>通过<code>ModelMap</code>获取。</li>
</ol>
<h2 id="servletapi" data-numberify>ServletAPI<a class="anchor ms-1" href="#servletapi"></a></h2>
<p>获取<code>request</code>域对象共享数据的方式之一就是使用<code>ServletAPI</code>。即，在Controller对象中的映射方法中，添加一个<code>ServletRequest</code>或<code>HttpServletRequest</code>对象参数。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testServletAPI&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testServletAPI</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello ServletAPI!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testRequestScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>获取<code>response</code>也是类似的方法。在参数列表中指定一个<code>ServletResponse</code>或<code>HttpServletResponse</code>对象参数。</p>
</blockquote>
<h2 id="model" data-numberify>Model<a class="anchor ms-1" href="#model"></a></h2>
<p><code>Model</code>是SpringMVC提供的专用于共享<code>request</code>域对象数据。</p>
<p>使用<code>Model</code>的方式与使用<code>ServletAPI</code>类似，在形参列表中指定一个<code>Model</code>类型的参数即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testModel&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testModel</span><span class="o">(</span><span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Model!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testRequestScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">model</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testRequestScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testRequestScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="map-string-object" data-numberify>Map String Object<a class="anchor ms-1" href="#map-string-object"></a></h2>
<p>使用<code>Map&lt;String, Object&gt;</code>共享<code>request</code>域对象数据，使用方式也是在形参列表中定义一个<code>Map&lt;String, Object&gt;</code>类型形参。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testMap&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testMap</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Map!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testRequestScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testRequestScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testRequestScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="modelmap" data-numberify>ModelMap<a class="anchor ms-1" href="#modelmap"></a></h2>
<p><code>ModelMap</code>的用法与<code>Map</code>十分类似。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testModelMap&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testModelMap</span><span class="o">(</span><span class="n">ModelMap</span> <span class="n">modelMap</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">modelMap</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello ModelMap!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testRequestScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">modelMap</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testRequestScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testRequestScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="modelandview" data-numberify>ModelAndView<a class="anchor ms-1" href="#modelandview"></a></h2>
<p><code>ModelAndView</code>是SpringMVC提供的用于共享<code>request</code>域对象数据和视图解析跳转的API。</p>
<p>通过<code>ModelAndView</code>共享<code>request</code>域数据，无需在形参中指定该类型参数，只需在方法中<code>new</code>一个即可。但是使用<code>ModelAndView</code>需要将该类型对象作为返回值返回。</p>
<p>除了使用原生<code>ServletAPI</code>之外，使用其它方法（如上<code>Map</code>、<code>Model</code>、<code>ModelMap</code>等）共享<code>request</code>域数据，最终SpringMVC都会将模型数据和视图封装到<code>ModelAndView</code>中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testModelAndView&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ModelAndView</span> <span class="nf">testModelAndView</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ModelAndView</span> <span class="n">mav</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelAndView</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 处理模型数据，即向请求域request共享数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">mav</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello ModelAndView!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置视图名称（返回视图需要有对应的页面）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">mav</span><span class="o">.</span><span class="na">setViewName</span><span class="o">(</span><span class="s">&#34;success&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取数据（第一次写入后可能读取失败，因为只有在方法执行完毕后才能真正写入）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testRequestScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">mav</span><span class="o">.</span><span class="na">getModel</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testRequestScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">mav</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>success.html</code>（在<code>Webapp/WEB-INF/templates/</code>下创建）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Success!<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Success!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p>其实<code>ModelAndView</code>也可以作为Controller方法的参数使用。</p>
<p>需要注意的是，使用<code>ModelAndView</code>设置视图对象无论是否使用<code>@ResponseBody</code>，返回的始终是视图。</p>
</blockquote>
<h2 id="mapmodel-和-modelmap" data-numberify>Map、Model 和 ModelMap<a class="anchor ms-1" href="#mapmodel-和-modelmap"></a></h2>
<p>在使用<code>Map&lt;String, Object&gt;</code>、<code>Model</code>和<code>ModelMap</code>时SpringMVC传入的都是<code>BindingAwareModelMap</code>类型对象。</p>
<ul>
<li>
<p><code>Model</code>是一个接口，它定义了<code>addAllAttributes()</code>、<code>getAttribute()</code>等接口方法。</p>
</li>
<li>
<p><code>ModelMap</code>继承了<code>LinkedHashMap&lt;String, Object&gt;</code>，所以它也是属于<code>Map</code>的子类。<code>ModelMap</code>给出了<code>addAllAttributes()</code>、<code>getAttribute()</code>等接口的实现。</p>
</li>
<li>
<p><code>BindingAwareModelMap</code>继承自<code>ExtendedModelMap</code>类，而<code>ExtendedModelMap</code>又是<code>ModelMap</code>的子类和<code>Model</code>接口的实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExtendedModelMap</span> <span class="kd">extends</span> <span class="n">ModelMap</span> <span class="kd">implements</span> <span class="n">Model</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>BindingAwareModelMap</code>重写了<code>Map</code>的<code>put()</code>和<code>putAll()</code>，使得它能作为<code>Map</code>来读写<code>request</code>域。</p>
</li>
</ul>
<p>综上，<code>BindingAwareModelMap</code>可以作为<code>Model</code>、<code>Map&lt;String, Object&gt;</code>和<code>ModelMap</code>传入Controller方法中。</p>
<p>在浏览器发送请求后，实际上调用Controller中对应方法的是<code>DispatcherServlet</code>中的<code>doDispatch()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doDispatch</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ModelAndView</span> <span class="n">mv</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1">// Actually invoke the handler.（实际的请求处理者）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mv</span> <span class="o">=</span> <span class="n">ha</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">.</span><span class="na">getHandler</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 最后返回一个封装好的ModelAndView对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">processDispatchResult</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="n">mv</span><span class="o">,</span> <span class="n">dispatchException</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>通过断点调试最后发现，无论是<code>Map</code>、<code>Model</code>、<code>ModelMap</code>还是<code>ModelAndView</code>，它们最后都会被封装为<code>ModelAndView</code>（即使Controller方法返回的是<code>ModelAndView</code>，Controller方法中的<code>ModelAndView</code>和<code>DispatcherServlet</code>对象的<code>doDispatch()</code>中的<code>ModelAndView</code>地址也并不相同）。</p>
</blockquote>
<blockquote>
<p>在<code>processDispatchResult()</code>中调用了下方所示方法来进行视图渲染：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">render</span><span class="o">(</span><span class="n">mv</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span></code></pre></div></blockquote>
<h2 id="向-session-域共享数据" data-numberify>向 Session 域共享数据<a class="anchor ms-1" href="#向-session-域共享数据"></a></h2>
<p>使用原生<code>ServletAPI</code>共享：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testSession&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testSession</span><span class="o">(</span><span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Session!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testSessionScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testSessionScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testSessionScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Session可以从Request域中获取：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testSessionInServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testSession</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从Request域中获取Session
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HttpSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Session In Servlet!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testSessionScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testSessionScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testSessionScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="向-application-域共享数据" data-numberify>向 Application 域共享数据<a class="anchor ms-1" href="#向-application-域共享数据"></a></h2>
<p>通过Session域获取<code>ServletContext</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testApplication&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testApplication</span><span class="o">(</span><span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从Session域中获取ServletContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ServletContext</span> <span class="n">application</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">application</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Application!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testSessionScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">application</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testSessionScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testSessionScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>通过Request域获取<code>ServletContext</code>（不推荐）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testApplicationInServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testApplication</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从Request域中获取ServletContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ServletContext</span> <span class="n">application</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">application</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Application In Servlet !&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testSessionScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">application</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testSessionScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testSessionScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="请求报文转换" data-numberify>请求报文转换<a class="anchor ms-1" href="#请求报文转换"></a></h1>
<p><code>HttpMessageConverter</code>即报文信息转换器，能将请求报文转换为Java对象，或将Java对象转换为响应报文</p>
<p><code>HttpMessageConverter</code>提供了两个注解和两个类型：</p>
<ul>
<li>
<p><code>@ResponseBody</code>：即上方Controller方法中使用的将返回值（Java对象）作为响应体发送给浏览器的注解。</p>
</li>
<li>
<p><code>ResponseEntity</code>：可以作为Controller方法的返回值返回，并响应给浏览器。</p>
</li>
<li>
<p><code>@RequestBody</code>：将Controller方法形参指定为请求体，并接收从浏览器发送过来的请求体。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/testRequestBody&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testRequestBody</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">String</span> <span class="n">requestBody</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">requestBody</span> <span class="o">=</span> <span class="s">&#34;RequestBody{&#39;&#34;</span> <span class="o">+</span> <span class="n">requestBody</span> <span class="o">+</span> <span class="s">&#34;&#39;}&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">requestBody</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>RequestEntity</code>：是封装请求报文的一种类型，在Controller方法形参中使用，它获得的是<u>整个请求报文</u>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testRequestEntity&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testRequestEntity</span><span class="o">(</span><span class="n">RequestEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">requestEntity</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">requestEntity</span><span class="o">.</span><span class="na">getHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">body</span> <span class="o">=</span> <span class="n">requestEntity</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">response</span> <span class="o">=</span> <span class="s">&#34;RequestEntity{&#34;</span> <span class="o">+</span> <span class="n">headers</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;}\nRequestBody{&#39;&#34;</span> <span class="o">+</span> <span class="n">body</span> <span class="o">+</span> <span class="s">&#34;&#39;}&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>往响应体写入信息还有一个方法，就是使用原生<code>ServletAPI</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testResponse&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testResponse</span><span class="o">(</span><span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">print</span><span class="o">(</span><span class="s">&#34;Hello Response!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="文件上传下载" data-numberify>文件上传下载<a class="anchor ms-1" href="#文件上传下载"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>commons-fileupload<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>commons-fileupload<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.3.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="responseentity-实现下载" data-numberify>ResponseEntity 实现下载<a class="anchor ms-1" href="#responseentity-实现下载"></a></h2>
<p>将<code>ResponseEntity&lt;byte[]&gt;</code>作为返回值，在其中设置好对应的响应头、响应体和状态码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testDown&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[]&gt;</span> <span class="nf">testResponseEntity</span><span class="o">(</span><span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取ServletContext对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ServletContext</span> <span class="n">servletContext</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取服务器中文件的真实路径 getRealPath()如果不带参数的话获取的是服务器的部署路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">realPath</span> <span class="o">=</span> <span class="n">servletContext</span><span class="o">.</span><span class="na">getRealPath</span><span class="o">(</span><span class="s">&#34;/static/img/test.png&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;RealPath: &#34;</span> <span class="o">+</span> <span class="n">realPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建输入流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">FileInputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">realPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建字节数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">is</span><span class="o">.</span><span class="na">available</span><span class="o">()];</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将流写到字节数组中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建HttpHeaders对象设置响应头信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">MultiValueMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置下载方式以及下载文件的名字
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">headers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Content-Disposition&#34;</span><span class="o">,</span> <span class="s">&#34;attachment;filename=test.png&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置响应状态码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HttpStatus</span> <span class="n">statusCode</span> <span class="o">=</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建ResponseEntity对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[]&gt;</span> <span class="n">responseEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">bytes</span><span class="o">,</span> <span class="n">headers</span><span class="o">,</span> <span class="n">statusCode</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 关闭输入流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">is</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">responseEntity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在下载文件之前，需要通过Session获取当前要下载文件的真实路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ServletContext</span> <span class="n">servletContext</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="n">realPath</span> <span class="o">=</span> <span class="n">servletContext</span><span class="o">.</span><span class="na">getRealPath</span><span class="o">(</span><span class="s">&#34;/static/img/test.png&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p>获取了真实路径后，通过<code>FileInputStream</code>将文件读取并写入字节数组<code>byte[]</code>中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">FileInputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">realPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">is</span><span class="o">.</span><span class="na">available</span><span class="o">()];</span>
</span></span><span class="line"><span class="cl"><span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">is</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span></code></pre></div><p>下载文件时，需要在响应头中设置下载方式以及文件名：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">MultiValueMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 以附件方式下载文件，并且默认文件名为test.png
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">headers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Content-Disposition&#34;</span><span class="o">,</span> <span class="s">&#34;attachment;filename=test.png&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p>最后将字节数组作为响应体，再加上响应头和状态码等信息，创建<code>ResponseEntity</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[]&gt;</span> <span class="n">responseEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">bytes</span><span class="o">,</span> <span class="n">headers</span><span class="o">,</span> <span class="n">statusCode</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="n">responseEntity</span><span class="o">;</span>
</span></span></code></pre></div><h2 id="文件上传" data-numberify>文件上传<a class="anchor ms-1" href="#文件上传"></a></h2>
<p>文件上传依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>commons-fileupload<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>commons-fileupload<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.3.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在<code>springMVC.xml</code>中配置文件上传解析器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 配置文件上传解析器，将上传的文件封装为MultipartFile --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;multipartResolver&#34;</span> <span class="na">class=</span><span class="s">&#34;org.springframework.web.multipart.commons.CommonsMultipartResolver&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>文件上传实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/testUp&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testUp</span><span class="o">(</span><span class="n">MultipartFile</span> <span class="n">photo</span><span class="o">,</span> <span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取上传文件的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">photo</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取上传文件的后缀名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">suffixName</span> <span class="o">=</span> <span class="n">fileName</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">fileName</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="s">&#34;.&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将UUID作为文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将UUID和后缀名拼接后的结果作为最终的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">fileName</span> <span class="o">=</span> <span class="n">uuid</span> <span class="o">+</span> <span class="n">suffixName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 需要通过 ServletContext 获取服务器中 photo 目录的路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ServletContext</span> <span class="n">servletContext</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// photo 其实也可以用 photo.getName() 替代
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">photoPath</span> <span class="o">=</span> <span class="n">servletContext</span><span class="o">.</span><span class="na">getRealPath</span><span class="o">(</span><span class="s">&#34;photo&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">photoPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 判断photoPath所对应路径是否存在
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(!</span><span class="n">file</span><span class="o">.</span><span class="na">exists</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 若不存在，则创建目录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">file</span><span class="o">.</span><span class="na">mkdir</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">finalPath</span> <span class="o">=</span> <span class="n">photoPath</span> <span class="o">+</span> <span class="n">File</span><span class="o">.</span><span class="na">separator</span> <span class="o">+</span> <span class="n">fileName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">photo</span><span class="o">.</span><span class="na">transferTo</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">finalPath</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fileName</span> <span class="o">+</span> <span class="s">&#34; OK!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上传文件时，需要考虑文件之间文件名的冲突问题，可以通过将文件名改为UUID解决：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 获取上传文件的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">photo</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 获取上传文件的后缀名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">suffixName</span> <span class="o">=</span> <span class="n">fileName</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">fileName</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="s">&#34;.&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 将UUID作为文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 将UUID和后缀名拼接后的结果作为最终的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">fileName</span> <span class="o">=</span> <span class="n">uuid</span> <span class="o">+</span> <span class="n">suffixName</span><span class="o">;</span>
</span></span></code></pre></div><hr>
<h1 id="拦截器" data-numberify>拦截器<a class="anchor ms-1" href="#拦截器"></a></h1>
<p>拦截器（Interceptor）是一种动态拦截方法调用的机制，在SpringMVC中动态拦截控制器方法的执行。拦截器可以在指定的发那个发调用前后执行预先设定的代码，可以阻止原始方法的执行。拦截器和过滤器在作用和执行顺序上很相似。它们的关系如下图所示：</p>
<p><picture><img class="img-fluid " alt="拦截器和过滤器的关系" src="/docs/spring/springmvc/base/1630676903190.png" loading="lazy" width="1221" height="390" />
</picture>

</p>
<p>创建拦截器类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>  <span class="c1">// 由SpringMVC来管理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookInterceptor</span> <span class="kd">implements</span> <span class="n">HandlerInterceptor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;preHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;postHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;afterCompletion...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="拦截器配置类" data-numberify>拦截器配置类<a class="anchor ms-1" href="#拦截器配置类"></a></h2>
<p>编写拦截器配置类有两种方式：</p>
<ul>
<li>实现<code>WebMvcConfigurer</code>接口；</li>
<li>继承<code>WebMvcConfigurationSupport</code>类并重写方法。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 扫描interceptor包
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner.interceptor&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcSupport</span> <span class="kd">extends</span> <span class="n">WebMvcConfigurationSupport</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>  <span class="c1">// 自动装配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">BookInterceptor</span> <span class="n">bookInterceptor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="n">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">            添加（声明）拦截器并配置拦截规则
</span></span></span><span class="line"><span class="cl"><span class="cm">            可以同时配置多个规则
</span></span></span><span class="line"><span class="cl"><span class="cm">            如果不添加拦截规则，默认拦截所有请求
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">bookInterceptor</span><span class="o">).</span><span class="na">addPathPatterns</span><span class="o">(</span><span class="s">&#34;/books&#34;</span><span class="o">,</span> <span class="s">&#34;/books/*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>让SpringMVC扫描到拦截器的配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.controller&#34;</span><span class="o">,</span> <span class="s">&#34;com.linner.config&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebMvc</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcConfig</span> <span class="o">{}</span>
</span></span></code></pre></div><p>拦截器的配置类<code>SpingMvcSupport</code>可以书写在<code>SpringMvcConfig</code>中，以简化书写（并演示继承<code>WebMvcConfigurer</code>编写拦截器配置类）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.controller&#34;</span><span class="o">,</span> <span class="s">&#34;com.linner.interceptor&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebMvc</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcConfig</span> <span class="kd">implements</span> <span class="n">WebMvcConfigurer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">BookInterceptor</span> <span class="n">bookInterceptor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="n">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">bookInterceptor</span><span class="o">).</span><span class="na">addPathPatterns</span><span class="o">(</span><span class="s">&#34;/books&#34;</span><span class="o">,</span> <span class="s">&#34;/books/*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="拦截器执行过程" data-numberify>拦截器执行过程<a class="anchor ms-1" href="#拦截器执行过程"></a></h2>
<p>运行程序，发送<code>books</code>开头的请求（如<code>http://localhost/books</code>），终端会有如下输出：</p>
<pre tabindex="0"><code>preHandle...
getAll...
postHandle...
afterCompletion...
</code></pre><p>拦截器的执行顺序如下：</p>
<ol>
<li>执行<code>preHandle()</code>。
<ul>
<li><code>preHandle()</code>返回值为<code>true</code>：
<ol>
<li>执行请求路径相应的方法或下一个拦截器的<code>preHandle()</code>。</li>
<li>判断是否执行<code>postHandle()</code>：
<ul>
<li>Controller被执行（后续拦截器链中没有一个<code>preHandle()</code>返回值为<code>false</code>），执行<code>postHandle()</code>。</li>
<li>Controller没有被执行（后续拦截器链中存在一个<code>preHandle()</code>返回值为<code>false</code>），不执行<code>postHandle()</code>。</li>
</ul>
</li>
<li>执行<code>afterCompletion()</code>。</li>
</ol>
</li>
<li><code>preHandle()</code>返回值为<code>false</code>。</li>
</ul>
</li>
<li>结束。</li>
</ol>
<p>当配置多个拦截器时，形成拦截器链。多个<code>preHandle()</code>按照Interceptor被声明顺序执行；多个<code>postHandle()</code>按照Interceptor被声明顺序逆序执行。即，<u>拦截器链的运行顺序以拦截器添加顺序为准</u>。</p>
<p>当拦截器中出现对原始处理器的拦截，后面的拦截器均终止运行。当拦截器运行中断，仅运行配置在前面的拦截器的<code>afterCompletion()</code>操作（<code>afterCompletion()</code>代表当前拦截器执行完成，与后续拦截器链中<code>preHandle()</code>的返回值和Controller是否被执行无关）。</p>
<p>假设现在有如下两个拦截器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FirstInterceptor</span> <span class="kd">implements</span> <span class="n">HandlerInterceptor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;FirstInterceptor preHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;FirstInterceptor postHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;FirstInterceptor afterCompletion...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LaterInterceptor</span> <span class="kd">implements</span> <span class="n">HandlerInterceptor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;LaterInterceptor preHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;LaterInterceptor postHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;LaterInterceptor afterCompletion...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>它们在拦截器类中的添加顺序为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">FirstInterceptor</span> <span class="n">firstInterceptor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">LaterInterceptor</span> <span class="n">laterInterceptor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="n">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果没有配置拦截路径，则默认拦截所有请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">firstInterceptor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">regisrty</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">laterInterceptor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>访问任意资源后，终端输出：</p>
<pre tabindex="0"><code>FirstInterceptor preHandle...
LaterInterceptor preHandle...
LaterInterceptor postHandle...
FirstInterceptor postHandle...
LaterInterceptor afterCompletion...
FirstInterceptor afterCompletion...
</code></pre><p>实际上在<code>DispatcherServlet</code>的<code>doDispatch()</code>方法中，在执行<code>mv = ha.handle(...)</code>之前进行了一个条件判断：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doDispatch</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 拦截器链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HandlerExecutionChain</span> <span class="n">mappedHandler</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取拦截器链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mappedHandler</span> <span class="o">=</span> <span class="n">getHandler</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">mappedHandler</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">noHandlerFound</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 执行相应Interceptor的preHandle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(!</span><span class="n">mappedHandler</span><span class="o">.</span><span class="na">applyPreHandle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Actually invoke the handler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mv</span> <span class="o">=</span> <span class="n">ha</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">.</span><span class="na">getHandler</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 执行相应Interceptor的postHandle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mappedHandler</span><span class="o">.</span><span class="na">applyPostHandle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mv</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 处理调度结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 包含了ModelAndView的进一步处理（渲染视图、处理模型）、还有Interceptor的afterCompletion()调用等等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">processDispatchResult</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="n">mv</span><span class="o">,</span> <span class="n">dispatchException</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>即<code>HandlerExecutionChain</code>（控制器执行链）对象的<code>applyPreHandle()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * preHandle执行链
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kt">boolean</span> <span class="nf">applyPreHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取interceptorList中的interceptor，并逐个执行它们的preHandle方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取interceptor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">HandlerInterceptor</span> <span class="n">interceptor</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行interceptor.preHandle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 如果有一个interceptor返回了false，则立即执行triggerAfterCompletion()并返回false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">interceptor</span><span class="o">.</span><span class="na">preHandle</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">handler</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">triggerAfterCompletion</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 记录拦截器链中返回false的前一个拦截器下标
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">this</span><span class="o">.</span><span class="na">interceptorIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>applyPostHandle()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * postHandle执行链
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">applyPostHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">ModelAndView</span> <span class="n">mv</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 按照倒序，逐个执行interceptor.postHandle()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HandlerInterceptor</span> <span class="n">interceptor</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">interceptor</span><span class="o">.</span><span class="na">postHandle</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">handler</span><span class="o">,</span> <span class="n">mv</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>triggerAfterCompletion()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * afterCompletion执行链
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">triggerAfterCompletion</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从interceptorIndex开始，倒序执行interceptor.afterCompletion()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 即triggerAfterCompletion()只会执行那些返回true的interceptor的afterCompletion()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorIndex</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HandlerInterceptor</span> <span class="n">interceptor</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">interceptor</span><span class="o">.</span><span class="na">afterCompletion</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">handler</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">ex2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;HandlerInterceptor.afterCompletion threw exception&#34;</span><span class="o">,</span> <span class="n">ex2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在一切正常运行完成后，调用Interceptor的<code>afterCompletion()</code>的情况有点复杂（<code>DispatcherServlet</code>中的<code>processDispatchResult()</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">processDispatchResult</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Nullable</span> <span class="n">HandlerExecutionChain</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">ModelAndView</span> <span class="n">mv</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Nullable</span> <span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Did the handler return a view to render?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">mv</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mv</span><span class="o">.</span><span class="na">wasCleared</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 渲染视图
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">render</span><span class="o">(</span><span class="n">mv</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="c1">// 在处理完其它调度结果后，通过mappedHandler.triggerAfterCompletion()来调用interceptor.afterCompletion()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">mappedHandler</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Exception (if any) is already handled..
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">mappedHandler</span><span class="o">.</span><span class="na">triggerAfterCompletion</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>在<code>DispatcherServlet</code>的<code>doDispatch()</code>方法中还有许多<code>try ... catch</code>，当捕捉到异常时，<code>doDispatch()</code>也会通过<code>triggerAfterCompletion()</code>方法来调用<code>mappedHandler.triggerAfterCompletion()</code>。</p>
</blockquote>
<p>更具上述代码总结出<code>HandlerExecutionChain</code>中的执行情况：</p>
<ul>
<li>
<p><code>applyPreHandle()</code>：在执行Controller方法之前执行。</p>
</li>
<li>
<p><code>applyPostHandle()</code>：执行了Controller方法之后执行。</p>
</li>
<li>
<p><code>triggerAfterCompletion()</code>：</p>
<p>两种执行情况：</p>
<ul>
<li>执行<code>applyPreHandle()</code>时，有一个拦截器返回了<code>false</code>；</li>
<li>执行完<code>applyPostHandle()</code>之后，且无错误时执行（即<code>processDispatchResult()</code>中的<code>triggerAfterCompletion()</code>）；</li>
<li>执行<code>applyPreHandle()</code>、<code>applyPostHandle()</code>和Controller方法过程中，出现异常时执行（出现异常时是在<code>DispatcherServlet</code>的<code>triggerAfterCompletion()</code>中调用）。</li>
</ul>
</li>
</ul>
<h2 id="配置文件配置拦截器" data-numberify>配置文件配置拦截器<a class="anchor ms-1" href="#配置文件配置拦截器"></a></h2>
<p>除了使用配置类外，也可以使用配置文件的方式来配置拦截器。</p>
<p>使用<code>&lt;mvc:interceptors&gt;</code>来配置拦截器。添加拦截器的方式有两种，一种是使用<u><code>&lt;bean class=&quot;...&quot;/&gt;</code></u>，另一种是使用<u><code>&lt;ref bean=&quot;...&quot;/&gt;</code></u>，这两种方式本质上没有什么区别。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;mvc:interceptors&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;asia.linner.interceptor.FirstInterceptor&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- bean中指定的是Bean的默认id，即首字母小写的类名 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&#34;laterInterceptor&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mvc:interceptors&gt;</span>
</span></span></code></pre></div><p>在<code>&lt;mvc:interceptors&gt;</code>中可以使用<code>&lt;mvc:interceptor&gt;</code>来配置具体的拦截规则：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;mvc:interceptors&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mvc:interceptor&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- &lt;mvc:mapping&gt;: 拦截路径 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mvc:mapping</span> <span class="na">path=</span><span class="s">&#34;/**&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- &lt;mvc:exclude-mapping&gt;: 排除路径（不拦截） --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mvc:exclude-mapping</span> <span class="na">path=</span><span class="s">&#34;/users&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mvc:exclude-mapping</span> <span class="na">path=</span><span class="s">&#34;/users/**&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 假设只有users和books这两个请求 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&#34;bookInterceptor&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/mvc:interceptor&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mvc:interceptors&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="静态资源处理器" data-numberify>静态资源处理器<a class="anchor ms-1" href="#静态资源处理器"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcSupport</span> <span class="kd">extends</span> <span class="n">WebMvcConfigurationSupport</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="n">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 放行单个目录（Webapp目录下）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">&#34;/pages/**&#34;</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">&#34;/pages/&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 也可以将Webapp整个目录都添加：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// registry.addResourceHandler(&#34;/**&#34;).addResourceLocations(&#34;classpath:/&#34;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>addResourceHandler()</code>：定义访问资源路径。</li>
<li><code>addResourceLocations()</code>：定义访问路径时的静态资源目录。</li>
</ul>
<hr>
<h1 id="异常处理" data-numberify>异常处理<a class="anchor ms-1" href="#异常处理"></a></h1>
<p>Spring MVC 自带了两个异常处理器分别是<code>SimpleMappingExceptionResolver</code>和<code>DefaultHandlerExceptionResolver</code>。</p>
<p>其中<code>DefaultHandlerExceptionResolver</code>是由Spring MVC定义的默认异常处理器，它的<code>doResolveException()</code>定义了一些常见的异常处理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">ModelAndView</span> <span class="nf">doResolveException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpRequestMethodNotSupportedException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpRequestMethodNotSupported</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpRequestMethodNotSupportedException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpMediaTypeNotSupportedException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpMediaTypeNotSupported</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpMediaTypeNotSupportedException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpMediaTypeNotAcceptableException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpMediaTypeNotAcceptable</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpMediaTypeNotAcceptableException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">MissingPathVariableException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleMissingPathVariable</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">MissingPathVariableException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">MissingServletRequestParameterException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleMissingServletRequestParameter</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">MissingServletRequestParameterException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">ServletRequestBindingException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleServletRequestBindingException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">ServletRequestBindingException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">ConversionNotSupportedException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleConversionNotSupported</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">ConversionNotSupportedException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">TypeMismatchException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleTypeMismatch</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">TypeMismatchException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpMessageNotReadableException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpMessageNotReadable</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpMessageNotReadableException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpMessageNotWritableException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpMessageNotWritable</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpMessageNotWritableException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">MethodArgumentNotValidException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleMethodArgumentNotValidException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">MethodArgumentNotValidException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">MissingServletRequestPartException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleMissingServletRequestPartException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">MissingServletRequestPartException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">BindException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleBindException</span><span class="o">((</span><span class="n">BindException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">NoHandlerFoundException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleNoHandlerFoundException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">NoHandlerFoundException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">AsyncRequestTimeoutException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleAsyncRequestTimeoutException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">AsyncRequestTimeoutException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">handlerEx</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isWarnEnabled</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Failure while trying to resolve exception [&#34;</span> <span class="o">+</span> <span class="n">ex</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">,</span> <span class="n">handlerEx</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>SimpleMappingExceptionResolver</code>是Spring MVC提供的自定义异常处理器。</p>
<h2 id="基于配置的异常处理" data-numberify>基于配置的异常处理<a class="anchor ms-1" href="#基于配置的异常处理"></a></h2>
<p>在<code>springMVC.xml</code>中配置异常处理器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 配置异常处理 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;exceptionMappings&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;props&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">                    设置要处理的异常和返回的视图
</span></span></span><span class="line"><span class="cl"><span class="c">                    prop的key：表示处理器方法执行过程中出现的异常
</span></span></span><span class="line"><span class="cl"><span class="c">                    prop的值：表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面
</span></span></span><span class="line"><span class="cl"><span class="c">                 --&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;java.lang.ArithmeticException&#34;</span><span class="nt">&gt;</span>error<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/props&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">            将异常信息共享在请求域中的键
</span></span></span><span class="line"><span class="cl"><span class="c">            exceptionAttribute设置一个属性名，将出现的异常信息在请求域中进行共享
</span></span></span><span class="line"><span class="cl"><span class="c">         --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;exceptionAttribute&#34;</span> <span class="na">value=</span><span class="s">&#34;ex&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><p>在相应路径（如<code>/WEB-INF/templates/</code>）下创建异常视图（如<code>error.html</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Error<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>出现异常<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span> <span class="na">th:text</span><span class="o">=</span><span class="s">&#34;${ex}&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注：使用Thymeleaf管理Html视图，需要在<code>&lt;html&gt;</code>标签中声明<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code>。</p>
</blockquote>
<h2 id="基于注解的异常处理" data-numberify>基于注解的异常处理<a class="anchor ms-1" href="#基于注解的异常处理"></a></h2>
<p>使用<code>@ControllerAdvice</code>标注在异常处理类上，这样的异常处理类与Controller类似。在类的方法上用<code>@ExceptionHandler</code>指定要处理的异常，<code>@ExceptionHandler</code>的<code>value</code>属性接收一个Class类型的数组，意味着可以同时处理多个异常。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ControllerAdvice</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExceptionController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@ExceptionHandler</span><span class="o">({</span>
</span></span><span class="line"><span class="cl">            <span class="n">ArithmeticException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">NullPointerException</span><span class="o">.</span><span class="na">class</span>
</span></span><span class="line"><span class="cl">    <span class="o">})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">testException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">Exception</span> <span class="n">ex</span> <span class="cm">/* 当前出现的异常 */</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 用Model设置属性，将异常信息返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;exception&#34;</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;error&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在<code>ExceptionController</code>中用<code>@ExceptionHandler</code>标注的方法，在它的参数列表中定义一个<code>Exception</code>类型的参数，可用于获取当前处理的实际的异常。</p>
<hr>
<h1 id="重定向" data-numberify>重定向<a class="anchor ms-1" href="#重定向"></a></h1>
<p>Spring MVC默认的方式是<code>forward</code>（即转发），而要使用<code>redirect</code>需要在视图名称中添加<code>redirect:</code>说明。Spring MVC重定向有以下几种方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 通过返回类型为String的方法，返回一个&#34;redirect:...&#34;的字符串进行重定向
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return 重定向的路径
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/test1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;redirect:/index.html&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 通过ModelAndView设置视图名称为&#34;redirect:...&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/test2&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ModelAndView</span> <span class="nf">test2</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">ModelAndView</span><span class="o">(</span><span class="s">&#34;redirect:/test1&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 相当于：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">        ModelAndView mav = new ModelAndView();
</span></span></span><span class="line"><span class="cl"><span class="cm">        mav.setViewName(&#34;redirect:/index&#34;);
</span></span></span><span class="line"><span class="cl"><span class="cm">        return mav;
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 通过原生ServletAPI
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/test3&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test3</span><span class="o">(</span><span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">&#34;/test1&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="spring-mvc-执行流程" data-numberify>Spring MVC 执行流程<a class="anchor ms-1" href="#spring-mvc-执行流程"></a></h1>
<h2 id="常用组件" data-numberify>常用组件<a class="anchor ms-1" href="#常用组件"></a></h2>
<ul>
<li>
<p><strong>DispatcherServlet</strong>：<strong>前端控制器</strong>，由框架提供。</p>
<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求。</p>
<blockquote>
<p>Controller、Interceptor、HandlerExceptionResolver等等都由它来调用。</p>
</blockquote>
</li>
<li>
<p><strong>HandlerMapping</strong>：<strong>处理器映射器</strong>，由框架提供。</p>
<p>作用：根据请求的<code>url</code>、<code>method</code>等信息查找相应的Handler（即控制器方法）。</p>
<blockquote>
<p>就是请求中的<code>@RequestMapping</code>、<code>@GetMapping</code>、<code>@PostMapping</code>等等。将请求和控制器或控制器方法进行映射。</p>
</blockquote>
</li>
<li>
<p><strong>Handler</strong>：<strong>处理器</strong>（控制器方法），由工程师开发。</p>
<p>作用：在DispatcherServlet的控制下，Handler对具体的用户请求进行处理。</p>
</li>
<li>
<p><strong>HandlerAdapter</strong>：<strong>处理器适配器</strong>，由框架提供。</p>
<p>作用：通过HandlerAdapter执行处理器（控制器方法）。</p>
<blockquote>
<p>由HandlerMapping找到对应的Handler，接着由HandlerAdapter执行对应的Handler。</p>
</blockquote>
</li>
<li>
<p><strong>ViewResolver</strong>：<strong>视图解析器</strong>，由框架提供。</p>
<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView（例如forward，即转发时）、RedirectView（例如redirect，即重定向时）。</p>
</li>
<li>
<p><strong>Viw</strong>：<strong>视图</strong>，由框架或视图技术提供。</p>
<p>作用：将模型数据通过页面展示给用户。</p>
</li>
</ul>
<h2 id="dispatcherservlet-继承链" data-numberify>DispatcherServlet 继承链<a class="anchor ms-1" href="#dispatcherservlet-继承链"></a></h2>
<p><code>DispatcherServlet</code> $\xrightarrow{extends}$ <code>FrameworkServlet</code> $\xrightarrow{extends}$ <code>HttpServletBean</code> $\xrightarrow{extends}$ <code>HttpServlet</code> $\xrightarrow{extends}$ <code>GenericServlet</code> $\xrightarrow{implements}$ <code>Servlet</code></p>
<h2 id="dispatcherservlet-初始化过程" data-numberify>DispatcherServlet 初始化过程<a class="anchor ms-1" href="#dispatcherservlet-初始化过程"></a></h2>
<p>DispatcherServlet初始化过程需要根据它的继承链，查找每个类或接口的<code>init()</code>方法。</p>
<ul>
<li>
<p><code>Servlet.init(ServletConfig)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">;</span>
</span></span></code></pre></div></li>
<li>
<p><code>GenericServlet</code>：</p>
<p><code>GenericServlet</code>不仅实现了<code>Servlet.init(ServletConfig)</code>还给出了一个未实现的<code>init()</code>。</p>
<p><code>init(ServletConfig config)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">config</span> <span class="o">=</span> <span class="n">config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>init()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{}</span>
</span></span></code></pre></div></li>
<li>
<p><code>HttpServlet</code>：</p>
<p><code>HttpServlet</code>并没有重写<code>GenericServlet.init(ServletConfig)</code>或<code>GenericServlet.init()</code>。</p>
</li>
<li>
<p><code>HttpServletBean</code>：</p>
<p><code>HttpServletBean</code>实现了<code>GenericServlet.init()</code>并且给出了一个未实现的<code>initServletBean()</code>。</p>
<p><code>init()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Set bean properties from init parameters.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Let subclasses do whatever initialization they like.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initServletBean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>initServletBean()</code>：初始化ServletBean。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initServletBean</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{}</span>
</span></span></code></pre></div></li>
<li>
<p><code>FrameworkServlet</code>：</p>
<p><code>FrameworkServlet</code>实现了<code>HttpServletBean.initServletBean()</code>，并且给出了<code>initServletBean()</code>的实现。</p>
<p><code>initServletBean()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">initServletBean</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 初始化WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">this</span><span class="o">.</span><span class="na">webApplicationContext</span> <span class="o">=</span> <span class="n">initWebApplicationContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">initFrameworkServlet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* catch ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>initWebApplicationContext()</code>：初始化WebApplicationContext。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">WebApplicationContext</span> <span class="nf">initWebApplicationContext</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取当前的WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">WebApplicationContext</span> <span class="n">rootContext</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">            <span class="n">WebApplicationContextUtils</span><span class="o">.</span><span class="na">getWebApplicationContext</span><span class="o">(</span><span class="n">getServletContext</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">WebApplicationContext</span> <span class="n">wac</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 判断当前WebApplicationContext是否为空（第一次执行时恒为空）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">webApplicationContext</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// A context instance was injected at construction time -&gt; use it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">wac</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">webApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">wac</span> <span class="k">instanceof</span> <span class="n">ConfigurableWebApplicationContext</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ConfigurableWebApplicationContext</span> <span class="n">cwac</span> <span class="o">=</span> <span class="o">(</span><span class="n">ConfigurableWebApplicationContext</span><span class="o">)</span> <span class="n">wac</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(!</span><span class="n">cwac</span><span class="o">.</span><span class="na">isActive</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// The context has not yet been refreshed -&gt; provide services such as
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">// setting the parent context, setting the application context id, etc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="o">(</span><span class="n">cwac</span><span class="o">.</span><span class="na">getParent</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// The context instance was injected without an explicit parent -&gt; set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="c1">// the root application context (if any; may be null) as the parent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">cwac</span><span class="o">.</span><span class="na">setParent</span><span class="o">(</span><span class="n">rootContext</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 装配并刷新WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">configureAndRefreshWebApplicationContext</span><span class="o">(</span><span class="n">cwac</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">        如果wac为空则查找WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="cm">        （第一次执行完后wac还是为空，因为没有任何WebApplicationContext）
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">wac</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// No context instance was injected at construction time -&gt; see if one
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// has been registered in the servlet context. If one exists, it is assumed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// that the parent context (if any) has already been set and that the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// user has performed any initialization such as setting the context id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">wac</span> <span class="o">=</span> <span class="n">findWebApplicationContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果wac为空则创建一个WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">wac</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// No context instance is defined for this servlet -&gt; create a local one
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 创建一个WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">wac</span> <span class="o">=</span> <span class="n">createWebApplicationContext</span><span class="o">(</span><span class="n">rootContext</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 没有接收到刷新事件时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">refreshEventReceived</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Either the context is not a ConfigurableApplicationContext with refresh
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// support or the context injected at construction time had already been
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// refreshed -&gt; trigger initial onRefresh manually here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">onRefreshMonitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 刷新WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">onRefresh</span><span class="o">(</span><span class="n">wac</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">publishContext</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Publish the context as a servlet context attribute.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 将ServletContext作为属性，获取它的属性名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">attrName</span> <span class="o">=</span> <span class="n">getServletContextAttributeName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将IOC容器在应用域共享
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">getServletContext</span><span class="o">().</span><span class="na">setAttribute</span><span class="o">(</span><span class="n">attrName</span><span class="o">,</span> <span class="n">wac</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">wac</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>createWebApplicationContext(WebApplicationContext)</code>：通过WebApplicationContext创建WebApplicationContext。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">WebApplicationContext</span> <span class="nf">createWebApplicationContext</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">WebApplicationContext</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">createWebApplicationContext</span><span class="o">((</span><span class="n">ApplicationContext</span><span class="o">)</span> <span class="n">parent</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>createWebApplicationContext(ApplicationContext)</code>：通过ApplicationContext创建WebApplicationContext。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">WebApplicationContext</span> <span class="nf">createWebApplicationContext</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">ApplicationContext</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">contextClass</span> <span class="o">=</span> <span class="n">getContextClass</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(!</span><span class="n">ConfigurableWebApplicationContext</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">isAssignableFrom</span><span class="o">(</span><span class="n">contextClass</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="n">ApplicationContextException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;Fatal initialization error in servlet with name &#39;&#34;</span> <span class="o">+</span> <span class="n">getServletName</span><span class="o">()</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;&#39;: custom WebApplicationContext class [&#34;</span> <span class="o">+</span> <span class="n">contextClass</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;] is not of type ConfigurableWebApplicationContext&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Web IOC 容器对象（即SpringMVC IOC）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ConfigurableWebApplicationContext</span> <span class="n">wac</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">            <span class="o">(</span><span class="n">ConfigurableWebApplicationContext</span><span class="o">)</span> <span class="n">BeanUtils</span><span class="o">.</span><span class="na">instantiateClass</span><span class="o">(</span><span class="n">contextClass</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 配置环境
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">wac</span><span class="o">.</span><span class="na">setEnvironment</span><span class="o">(</span><span class="n">getEnvironment</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* 
</span></span></span><span class="line"><span class="cl"><span class="cm">        整合Spring和SpringMVC时，
</span></span></span><span class="line"><span class="cl"><span class="cm">        设置SpringMVC的父容器，
</span></span></span><span class="line"><span class="cl"><span class="cm">        让Spring和SpringMVC的IOC容器能无缝衔接
</span></span></span><span class="line"><span class="cl"><span class="cm">        SpringMVC IOC容器是Spring IOC容器的子容器
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="n">wac</span><span class="o">.</span><span class="na">setParent</span><span class="o">(</span><span class="n">parent</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">configLocation</span> <span class="o">=</span> <span class="n">getContextConfigLocation</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">configLocation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">wac</span><span class="o">.</span><span class="na">setConfigLocation</span><span class="o">(</span><span class="n">configLocation</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 装配并刷新WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">configureAndRefreshWebApplicationContext</span><span class="o">(</span><span class="n">wac</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">wac</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>onRefresh()</code>：刷新WebApplicationContext。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onRefresh</span><span class="o">(</span><span class="n">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// For subclasses: do nothing by default.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 由子类去实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>FrameworkServlete创建WebApplicationContext后，刷新容器，调用<code>onRefresh(wac)</code>，此方法在<code>DispatcherServlet</code>进行了重写（实现）。</p>
</blockquote>
<p><code>getServletContextAttributeName()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// FrameworkServlet的全类名.CONTEXT.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SERVLET_CONTEXT_PREFIX</span> <span class="o">=</span> <span class="n">FrameworkServlet</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;.CONTEXT.&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">getServletContextAttributeName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 前缀+Servlet友好名称（即前缀 + &lt;servlet-name&gt;）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">SERVLET_CONTEXT_PREFIX</span> <span class="o">+</span> <span class="n">getServletName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>DispatcherServlet</code>：</p>
<p>实现了<code>FrameworkServlet.onRefresh()</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onRefresh</span><span class="o">(</span><span class="n">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">initStrategies</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>initStrategies()</code>：<code>DispatcherServlet</code>初始化策略。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initStrategies</span><span class="o">(</span><span class="n">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化多个解析器，例如文件上传解析器等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initMultipartResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">initLocaleResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化模板解析器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initThemeResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化处理器映射器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initHandlerMappings</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始阿虎处理器适配器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initHandlerAdapters</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化异常处理器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initHandlerExceptionResolvers</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化转换器，将请求转换为视图名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initRequestToViewNameTranslator</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化视图解析器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initViewResolvers</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">initFlashMapManager</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="dispatcherservlet-请求处理过程" data-numberify>DispatcherServlet 请求处理过程<a class="anchor ms-1" href="#dispatcherservlet-请求处理过程"></a></h2>
<ul>
<li>
<p><code>Servlet</code>和<code>GenericServlet</code>：</p>
<p><code>Servlet</code>提供了<code>service()</code>接口，<code>GenericServlet</code>并未对其进行实现。</p>
<p><code>service(ServletRequest, ServletResponse)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">res</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
</span></span></code></pre></div></li>
<li>
<p><code>HttpServlet</code>：</p>
<p><code>service()</code>由<code>HttpServlet</code>实现。并且<code>HttpServlet</code>还提供了<code>service(HttpServletRequest, HttpServletResponse)</code>。</p>
<p><code>service(ServletRequest, ServletResponse)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">res</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">HttpServletRequest</span>  <span class="n">request</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(!(</span><span class="n">req</span> <span class="k">instanceof</span> <span class="n">HttpServletRequest</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">            <span class="n">res</span> <span class="k">instanceof</span> <span class="n">HttpServletResponse</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="n">ServletException</span><span class="o">(</span><span class="s">&#34;non-HTTP request or response&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 转换为HttpServletRequest和HttpServletResponse
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">request</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpServletRequest</span><span class="o">)</span> <span class="n">req</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">)</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">service</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><code>HttpServlet.service(ServletRequest, ServletResponse)</code>的主要作用就是将<code>ServletRequest</code>和<code>ServletResponse</code>分别转换为<code>HttpServletRequest</code>和<code>HttpServletResponse</code>，然后调用<code>HttpServlet.service(HttpServletRequest, HttpServletResponse)</code>。</p>
</blockquote>
<p><code>service(HttpServletRequest, HttpServletResponse)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取请求方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 请求的分发处理，根据请求方式调用相应方法（如调用doGet）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_GET</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">lastModified</span> <span class="o">=</span> <span class="n">getLastModified</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">lastModified</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// servlet doesn&#39;t support if-modified-since, no reason
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// to go through further expensive logic
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">long</span> <span class="n">ifModifiedSince</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getDateHeader</span><span class="o">(</span><span class="n">HEADER_IFMODSINCE</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">ifModifiedSince</span> <span class="o">&lt;</span> <span class="n">lastModified</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// If the servlet mod time is later, call doGet()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">// Round down to the nearest second for a proper compare
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">// A ifModifiedSince of -1 will always be less
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">maybeSetLastModified</span><span class="o">(</span><span class="n">resp</span><span class="o">,</span> <span class="n">lastModified</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_MODIFIED</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_HEAD</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">lastModified</span> <span class="o">=</span> <span class="n">getLastModified</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">maybeSetLastModified</span><span class="o">(</span><span class="n">resp</span><span class="o">,</span> <span class="n">lastModified</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">doHead</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_POST</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doPost</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_PUT</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doPut</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_DELETE</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doDelete</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_OPTIONS</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doOptions</span><span class="o">(</span><span class="n">req</span><span class="o">,</span><span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_TRACE</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doTrace</span><span class="o">(</span><span class="n">req</span><span class="o">,</span><span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// Note that this means NO servlet supports whatever
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// method was requested, anywhere on this server.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>HttpServletBean</code>：</p>
<p>没有对<code>HttpServlet.service()</code>和<code>HttpServlet</code>中<code>do</code>开头的处理请求分发的方法进行重写。</p>
</li>
<li>
<p><code>FrameworkServlet</code>：</p>
<p>重写了<code>HttpServlet.service(HttpServletRequest, HttpServletResponse)</code>和<code>HttpServlet</code>中<code>do</code>开头的处理请求分发的方法。</p>
<p><code>service(HttpServletRequest, HttpServletResponse)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">HttpMethod</span> <span class="n">httpMethod</span> <span class="o">=</span> <span class="n">HttpMethod</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 请求方式为PATCH或null时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">httpMethod</span> <span class="o">==</span> <span class="n">HttpMethod</span><span class="o">.</span><span class="na">PATCH</span> <span class="o">||</span> <span class="n">httpMethod</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">processRequest</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>processRequest()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">processRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行服务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">doService</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* catch ... */</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在<code>FrameworkServlet</code>中的<code>doGet()</code>、<code>doPost()</code>、<code>doPut()</code>和<code>doDelete()</code>中都是直接调用<code>processRequest()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">processRequest</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span></code></pre></div><p>在<code>doOptions()</code>和<code>doTrace()</code>中也有对<code>processRequest()</code>方法的调用。</p>
<p><code>doService()</code>：交由子类实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">doService</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">Exception</span><span class="o">;</span>
</span></span></code></pre></div></li>
<li>
<p><code>DispatcherServlet</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doService</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">logRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Keep a snapshot of the request attributes in case of an include,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// to be able to restore the original attributes after the include.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Make framework objects available to handlers and view objects.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 最终调用doDispatch()来处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">doDispatch</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!</span><span class="n">WebAsyncUtils</span><span class="o">.</span><span class="na">getAsyncManager</span><span class="o">(</span><span class="n">request</span><span class="o">).</span><span class="na">isConcurrentHandlingStarted</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Restore the original attribute snapshot, in case of an include.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">attributesSnapshot</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">restoreAttributesAfterInclude</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">attributesSnapshot</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>doDispatch()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doDispatch</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">HttpServletRequest</span> <span class="n">processedRequest</span> <span class="o">=</span> <span class="n">request</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">        执行链
</span></span></span><span class="line"><span class="cl"><span class="cm">        HandlerExecutionChain包含以下三个部分：
</span></span></span><span class="line"><span class="cl"><span class="cm">        - handler：与请求所匹配的控制器方法
</span></span></span><span class="line"><span class="cl"><span class="cm">        - interceptorList：处理控制器方法的所有拦截器集合，即拦截器链
</span></span></span><span class="line"><span class="cl"><span class="cm">        - interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="n">HandlerExecutionChain</span> <span class="n">mappedHandler</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">boolean</span> <span class="n">multipartRequestParsed</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">WebAsyncManager</span> <span class="n">asyncManager</span> <span class="o">=</span> <span class="n">WebAsyncUtils</span><span class="o">.</span><span class="na">getAsyncManager</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ModelAndView</span> <span class="n">mv</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Exception</span> <span class="n">dispatchException</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">processedRequest</span> <span class="o">=</span> <span class="n">checkMultipart</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">multipartRequestParsed</span> <span class="o">=</span> <span class="o">(</span><span class="n">processedRequest</span> <span class="o">!=</span> <span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Determine handler for the current request.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 获取当前请求的执行链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mappedHandler</span> <span class="o">=</span> <span class="n">getHandler</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">mappedHandler</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">noHandlerFound</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Determine handler adapter for the current request.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">                获取当前请求的处理器适配器
</span></span></span><span class="line"><span class="cl"><span class="cm">                通过控制器方法创建对应的处理器适配器，从而能调用所对应的控制器方法
</span></span></span><span class="line"><span class="cl"><span class="cm">             */</span>
</span></span><span class="line"><span class="cl">            <span class="n">HandlerAdapter</span> <span class="n">ha</span> <span class="o">=</span> <span class="n">getHandlerAdapter</span><span class="o">(</span><span class="n">mappedHandler</span><span class="o">.</span><span class="na">getHandler</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Process last-modified header, if supported by the handler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 执行拦截器链的 preHandle，正序执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(!</span><span class="n">mappedHandler</span><span class="o">.</span><span class="na">applyPreHandle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Actually invoke the handler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 通过HandlerAdapter来调用请求处理，最终获得ModelAndView对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mv</span> <span class="o">=</span> <span class="n">ha</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">.</span><span class="na">getHandler</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">asyncManager</span><span class="o">.</span><span class="na">isConcurrentHandlingStarted</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">applyDefaultViewName</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">mv</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 执行拦截器链的 postHandle，倒序执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mappedHandler</span><span class="o">.</span><span class="na">applyPostHandle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mv</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* catch ... */</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行完请求的后续处理，如视图渲染、异常处理等等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">processDispatchResult</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="n">mv</span><span class="o">,</span> <span class="n">dispatchException</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* catch ... */</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* finally ... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>processDispatchResult()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">processDispatchResult</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Nullable</span> <span class="n">HandlerExecutionChain</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">ModelAndView</span> <span class="n">mv</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Nullable</span> <span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">boolean</span> <span class="n">errorView</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 异常处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">exception</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">exception</span> <span class="k">instanceof</span> <span class="n">ModelAndViewDefiningException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&#34;ModelAndViewDefiningException encountered&#34;</span><span class="o">,</span> <span class="n">exception</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取异常页面的视图
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mv</span> <span class="o">=</span> <span class="o">((</span><span class="n">ModelAndViewDefiningException</span><span class="o">)</span> <span class="n">exception</span><span class="o">).</span><span class="na">getModelAndView</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Did the handler return a view to render?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">mv</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mv</span><span class="o">.</span><span class="na">wasCleared</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 视图渲染
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">render</span><span class="o">(</span><span class="n">mv</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* else ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">mappedHandler</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Exception (if any) is already handled..
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 执行拦截器链的 afterCompletion，倒序执行（此处所有的异常已经被处理完成）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">mappedHandler</span><span class="o">.</span><span class="na">triggerAfterCompletion</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="mvc-执行流程" data-numberify>MVC 执行流程<a class="anchor ms-1" href="#mvc-执行流程"></a></h2>
<ol>
<li>
<p>用户向服务器发送请求，请求被SpringMVC前端控制器<code>DispatcherServlet</code>捕获。</p>
</li>
<li>
<p><code>DispatcherServlet</code>对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p>
<ul>
<li>
<p>如果没有对应的映射：</p>
<p>判断是否配置了<code>mvc:default-servlet-handler</code>（默认处理器）。</p>
<ul>
<li>
<p>如果没配置，则控制台报映射查找不到，向客户端展示404错误。</p>
</li>
<li>
<p>如果有配置，则访问目标资源（一般为静态资源，如JS、CSS、HTML等等）。</p>
<p>如果找不到客户端也会展示404错误。</p>
</li>
</ul>
</li>
<li>
<p>如果存在对应的映射则接着执行下面的流程。</p>
</li>
</ul>
</li>
<li>
<p>根据该URI，调用<code>HandlerMapping</code>获得该<code>Handler</code>配置的所有相关的对象（包括<code>Handler</code>对象以及<code>Handler</code>对象对应的拦截器），最后以<code>HandlerExecutionChain</code>执行链对象的形式返回。</p>
</li>
<li>
<p><code>DispatcherServlet</code>根据获得的<code>Handler</code>，选择一个合适的<code>HandlerAdapter</code>。</p>
</li>
<li>
<p>如果成功获得<code>HandlerAdapter</code>，此时将开始执行拦截器的<code>preHandler()</code>方法。</p>
<p>根据拦截器链的顺序，正序执行。</p>
</li>
<li>
<p>提取<code>Request</code>中的模型数据，填充<code>Handler</code>入参，开始执行<code>Handler</code>（<code>Controller</code>)方法，处理请求。</p>
<p>在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p>
<ul>
<li>
<p><code>HttpMessageConveter</code>： 将请求消息（如JSON、XML等数据）转换成一个对象，或将对象转换为指定的响应信息。</p>
</li>
<li>
<p>数据转换：对请求消息进行数据转换。</p>
<p>如<code>String</code>转换成<code>Integer</code>、<code>Double</code>等。</p>
</li>
<li>
<p>数据格式化：对请求消息进行数据格式化。</p>
<p>如将字符串转换成格式化数字或格式化日期等。</p>
</li>
<li>
<p>数据验证：验证数据的有效性（长度、格式等），验证结果存储到<code>BindingResult</code>或<code>Error</code>中。</p>
</li>
<li>
<p><code>Handler</code>执行完成后，向<code>DispatcherServlet</code>返回一个<code>ModelAndView</code>对象。</p>
</li>
</ul>
</li>
<li>
<p>如果<code>Handler</code>被成功执行，则开始执行拦截器的<code>postHandle()</code>方法。</p>
<p>根据拦截器链的顺序，倒序执行。</p>
</li>
<li>
<p>根据返回的<code>ModelAndView</code>（此时会判断是否存在异常：如果存在异常，则执行<code>HandlerExceptionResolver</code>进行异常处理）选择一个适合的<code>ViewResolver</code>进行视图解析，根据<code>Model</code>和<code>View</code>，来渲染视图。</p>
</li>
<li>
<p>渲染视图完毕执行拦截器的<code>afterCompletion()</code>方法。</p>
<p>根据拦截器链的顺序，倒序执行。</p>
</li>
<li>
<p>将渲染结果返回给客户端。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Java 进阶</title>
      <link>/blog/2023/02/java-%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023/02/java-%E8%BF%9B%E9%98%B6/</guid>
      <description><![CDATA[反射 反射是Java中一种用于动态获取类或对象的信息以及动态调用对象方法的功能机制。在运行状态中，对于任意一个类，使用反射可以获取这个类的所有]]></description>
      <content:encoded><![CDATA[<h1 id="反射" data-numberify>反射<a class="anchor ms-1" href="#反射"></a></h1>
<p>反射是Java中一种用于动态获取类或对象的信息以及动态调用对象方法的功能机制。在运行状态中，对于任意一个类，使用反射可以获取这个类的所有属性和方法；对于任意一个对象，使用反射能够调用它的任意属性和方法。利用反射可以无视对象的修饰符，调用类里面的内容。利用反射可以跟配置文件结合起来使用，把要创建的对象信息和方法写在配置文件中。</p>
<p>使用反射包含以下步骤：</p>
<ol>
<li>获取class字节码文件对象。</li>
<li>利用反射可以操作类或对象的信息有：
<ul>
<li>构造方法（获取、创建对象）</li>
<li>成员变量（获取、赋值）</li>
<li>成员方法（获取、运行）</li>
</ul>
</li>
</ol>
<h2 id="获取字节码文件对象" data-numberify>获取字节码文件对象<a class="anchor ms-1" href="#获取字节码文件对象"></a></h2>
<p>Java中的每个类都是一个<code>Class</code>对象（字节码文件对象）。获取字节码文件对象共有以下三种方式：</p>
<ul>
<li>
<p>通过class字节码文件获取：<code>Class.forName(&quot;类的全类名&quot;)</code></p>
<p>类的全类名=类的包名.类名。</p>
<p>使用该方式，是通过<code>.java</code>源代码文件编译后生成的<code>.class</code>字节码文件获取。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.repo.Student&#34;</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p>通过Class对象的class属性获取：<code>类名.class</code></p>
<p>该方式是对象已载入内存后使用的，需要使用<code>import</code>语句将对应的类导入（<code>.class</code>文件加载到内存后产生的<code>Class</code>对象也是唯一的）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span></span></code></pre></div></li>
<li>
<p>通过对象获取：<code>对象.getClass()</code></p>
<p>通过创建对象后的<code>getClass()</code>方法来返回该对象的<code>Class</code>对象。该方法需要创建具体对象后才能使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Student</span> <span class="n">student</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Student</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">student</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<blockquote>
<p>以上三种方法获取到的<code>Class</code>对象均为同一个对象。即，使用<code>==</code>分别判断以上三种方法获取到的对象均为<code>true</code>。</p>
</blockquote>
</blockquote>
<p>获取了<code>Class</code>对象后就可以获取到该类的各种信息。</p>
<h2 id="获取构造方法" data-numberify>获取构造方法<a class="anchor ms-1" href="#获取构造方法"></a></h2>
<p>获取构造方法即为获取<code>Constructor</code>对象。</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Constructor&lt;?&gt;[] getConstructors()</code></td>
<td style="text-align:left">获得所有的公共构造方法（<code>public</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></td>
<td style="text-align:left">获得所有的构造方法（包括<code>private</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code> Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code></td>
<td style="text-align:left">获取指定的公共构造方法</td>
</tr>
<tr>
<td style="text-align:center"><code>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code></td>
<td style="text-align:left">获取指定的构造方法（包括<code>private</code>）</td>
</tr>
</tbody>
</table>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;创建了一个Student对象&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;创建了一个Student对象：&#34;</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;创建了一个Student对象：name=&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&#34;, age=&#34;</span> <span class="o">+</span> <span class="n">age</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReflectDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">NoSuchMethodException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Class对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.repo.Student&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取所有公共构造方法对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Constructor</span><span class="o">[]</span> <span class="n">constructors1</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getConstructors</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Constructor</span> <span class="n">constructor</span> <span class="o">:</span> <span class="n">constructors1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">constructor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;=======================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取所有构造方法对象（包括private）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Constructor</span><span class="o">[]</span> <span class="n">constructors2</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredConstructors</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Constructor</span> <span class="n">constructor</span> <span class="o">:</span> <span class="n">constructors2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">constructor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;=======================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取指定的构造方法对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 空参构造方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Constructor</span> <span class="n">con1</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">con1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 包含参数的构造方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Constructor</span> <span class="n">con2</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">con2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取指定的构造方法对象（包括private）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Constructor</span> <span class="n">con3</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredConstructor</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">con3</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="通过反射创建对象" data-numberify>通过反射创建对象<a class="anchor ms-1" href="#通过反射创建对象"></a></h2>
<p>使用<code>Constructor</code>对象的<code>newInstance()</code>方法可以为反射的类创建对象。</p>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReflectDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">NoSuchMethodException</span><span class="o">,</span> <span class="n">InvocationTargetException</span><span class="o">,</span> <span class="n">InstantiationException</span><span class="o">,</span> <span class="n">IllegalAccessException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Class对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.reflect.Student&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取无参的公共构造方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Constructor</span> <span class="n">con1</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 使用无参的构造方法创建对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Student</span> <span class="n">stu1</span> <span class="o">=</span> <span class="o">(</span><span class="n">Student</span><span class="o">)</span> <span class="n">con1</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stu1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取带参数的构造方法（包括private）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Constructor</span> <span class="n">con2</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredConstructor</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 暴力反射
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 如果是private修饰的构造方法，需要临时修改构造方法的访问权限（取消检查访问权限）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">con2</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 使用带参数的构造方法创建对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Student</span> <span class="n">stu2</span> <span class="o">=</span> <span class="o">(</span><span class="n">Student</span><span class="o">)</span> <span class="n">con2</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="s">&#34;zhangsan&#34;</span><span class="o">,</span> <span class="mi">23</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stu2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="获取成员变量" data-numberify>获取成员变量<a class="anchor ms-1" href="#获取成员变量"></a></h2>
<p>获取成员变量即为获取<code>Field</code>对象。</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Field[] getFields()</code></td>
<td style="text-align:left">返回所有公共成员变量对象（<code>public</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>Field[] getDeclaredFields()</code></td>
<td style="text-align:left">返回所有成员变量对象（包括<code>private</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>Field getField(String name)</code></td>
<td style="text-align:left">返回指定名称的公共成员变量对象（<code>public</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>Field getDeclaredField(String name)</code></td>
<td style="text-align:left">返回指定名称的成员变量对象（包括<code>private</code>）</td>
</tr>
</tbody>
</table>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReflectDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">NoSuchFieldException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Class对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.reflect.Student&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取所有公共成员变量对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Field</span><span class="o">[]</span> <span class="n">fields1</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getFields</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">field</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;====================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取所有成员变量（包括private）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Field</span><span class="o">[]</span> <span class="n">fields2</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredFields</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">field</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;====================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取指定名称的公共成员变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Field</span> <span class="n">nameField</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getField</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">nameField</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;====================&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取指定名称的成员变量（包括private）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Field</span> <span class="n">ageField</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ageField</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="利用反射获取和修改成员变量的值" data-numberify>利用反射获取和修改成员变量的值<a class="anchor ms-1" href="#利用反射获取和修改成员变量的值"></a></h2>
<p>可以使用以下<code>Field</code>对象方法对成员变量的值进行修改：</p>
<ul>
<li>
<p>赋值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span>
</span></span></code></pre></div><p>参数：</p>
<ul>
<li><code>obj</code>：要修改属性值的具体对象；</li>
<li><code>value</code>：具体要修改的值。</li>
</ul>
</li>
<li>
<p>获取值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span>
</span></span></code></pre></div><p>参数：</p>
<ul>
<li><code>obj</code>：要修改属性值的具体对象。</li>
</ul>
</li>
</ul>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="n">String</span> <span class="n">gender</span><span class="o">,</span> <span class="n">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReflectDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">IllegalAccessException</span><span class="o">,</span> <span class="n">NoSuchFieldException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Student</span> <span class="n">student</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Student</span><span class="o">(</span><span class="s">&#34;张三&#34;</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="s">&#34;大三&#34;</span><span class="o">,</span> <span class="s">&#34;广州&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Class对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.reflect.Student&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取并修改name的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Field</span> <span class="n">nameField</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getField</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取name的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">nameField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 修改name的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">nameField</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">student</span><span class="o">,</span> <span class="s">&#34;李四&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">name</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">nameField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;===============&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取并修改私有变量的值（暴力反射）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Field</span> <span class="n">addressField</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;address&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 临时取消访问权限（获取和修改私有变量的值都需要此操作）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">addressField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取私有变量address的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">address</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">addressField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 修改私有变量address的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">addressField</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">student</span><span class="o">,</span> <span class="s">&#34;北京&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">address</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">addressField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="获取成员方法" data-numberify>获取成员方法<a class="anchor ms-1" href="#获取成员方法"></a></h2>
<p>获取成员方法即为获取<code>Method</code>对象。</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Method[] getMethods()</code></td>
<td style="text-align:left">返回所有公共成员方法对象（<code>public</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>Method[] getDeclaredMethods()</code></td>
<td style="text-align:left">放回所有成员方法对象（包括<code>private</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>Method getMethod(String name, Class&lt;?&gt;... parameterTypes)</code></td>
<td style="text-align:left">返回指定名称和形参的公共成员方法对象（<code>public</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes</code></td>
<td style="text-align:left">返回指定名称和形参的成员方法对象（包括<code>private</code>）</td>
</tr>
</tbody>
</table>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.reflect</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="n">String</span> <span class="n">gender</span><span class="o">,</span> <span class="n">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getGender</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGender</span><span class="o">(</span><span class="n">String</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAddress</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAddress</span><span class="o">(</span><span class="n">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Student{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;name=&#39;&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, age=&#34;</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, gender=&#39;&#34;</span> <span class="o">+</span> <span class="n">gender</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, address=&#39;&#34;</span> <span class="o">+</span> <span class="n">address</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">sleep</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">+</span> <span class="s">&#34;正在睡觉&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">study</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">+</span> <span class="s">&#34;正在内卷&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">study</span><span class="o">(</span><span class="kt">int</span> <span class="n">time</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">+</span> <span class="s">&#34;已经卷了&#34;</span> <span class="o">+</span> <span class="n">time</span> <span class="o">+</span> <span class="s">&#34;分钟还在卷&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReflectDemo1</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">NoSuchMethodException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Class对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.reflect.Student&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取所有公共成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span><span class="o">[]</span> <span class="n">methods1</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getMethods</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Method</span> <span class="n">method</span> <span class="o">:</span> <span class="n">methods1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;==============&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取所有成员方法（包括private）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span><span class="o">[]</span> <span class="n">methods2</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Method</span> <span class="n">method</span> <span class="o">:</span> <span class="n">methods2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;==============&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取指定的公共成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 空参的公共成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span> <span class="n">toStringMethod</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&#34;toString&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">toStringMethod</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 带参数的公共成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span> <span class="n">setNameMethod</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&#34;setName&#34;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">setNameMethod</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;==============&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取指定的成员方法（包括private）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 空参的成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span> <span class="n">studyMethod1</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">&#34;study&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">studyMethod1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 带参数的成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span> <span class="n">studyMethod2</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">&#34;study&#34;</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">studyMethod2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="通过反射运行成员方法" data-numberify>通过反射运行成员方法<a class="anchor ms-1" href="#通过反射运行成员方法"></a></h2>
<p>使用<code>Method</code>对象的<code>invoke()</code>方法可以运行成员方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">,</span> <span class="n">Object</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span>
</span></span></code></pre></div><ul>
<li><code>obj</code>：具体调用成员方法的对象；</li>
<li><code>args</code>：调用成员方法传递的参数；</li>
<li>返回值：方法的返回值。</li>
</ul>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReflectDemo1</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">NoSuchMethodException</span><span class="o">,</span> <span class="n">InvocationTargetException</span><span class="o">,</span> <span class="n">IllegalAccessException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Student</span> <span class="n">student</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Student</span><span class="o">(</span><span class="s">&#34;张三&#34;</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="s">&#34;大三&#34;</span><span class="o">,</span> <span class="s">&#34;广州&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Class对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.reflect.Student&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 调用无参的成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span> <span class="n">toStringMethod</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&#34;toString&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">studentToString</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">toStringMethod</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">studentToString</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 调用带参的私有成员方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span> <span class="n">studyMethod</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">&#34;study&#34;</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 临时取消访问权限
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">studyMethod</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">studyMethod</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">student</span><span class="o">,</span> <span class="mi">180</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="注解" data-numberify>注解<a class="anchor ms-1" href="#注解"></a></h1>
<p>Java注解是附加在代码中的一些元信息，用于编译和运行时进行解析和使用，起到<strong>说明、配置</strong>的功能。</p>
<p>注解不会影响代码的实际逻辑（并不直接影响代码的语义），仅仅起到辅助性的作用（但是注解可以被看做是程序的工具或者类库。会反过来对正在运行的程序语义有所影响）。包含在<code>java.lang.annotation</code>包中。注解使用<code>@interface</code>来定义（类似于接口的定义）。为注解定义一个方法即为注解类型定义了一个元素，方法的声明不允许有参数或<code>throw</code>语句，返回值类型被限定为原始数据类型、<code>String</code>、<code>Class</code>、<code>enums</code>、注解类型，或前面这些类型的数组，方法可以有默认值。注解可以从源文件、class文件或者在运行时通过反射机制多种方式被读取。</p>
<p>注解的实现的原理很大的一部分是基于反射实现。</p>
<p>一般来说，注解一般分为三种类型：</p>
<ul>
<li>元注解</li>
<li>标准注解</li>
<li>自定义注解</li>
</ul>
<h2 id="元注解" data-numberify>元注解<a class="anchor ms-1" href="#元注解"></a></h2>
<p>元注解是专职负责注解其他注解，主要是标明该注解的使用范围，生效范围。元注解并不能被修改，只能被用来定义自定义注解。</p>
<p>元注解包括以下四种：</p>
<table>
<thead>
<tr>
<th style="text-align:center">注解</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>@Target</code></td>
<td style="text-align:left">定义注解的作用目标。即用来定义自定义注解具体作用在类上，方法上，还是变量上。具体值和作用对象如下：<br><code>ElementType.TYPE</code>：接口、类、枚举、注解<br><code>ElementType.FIELD</code>：字段、枚举的常量<br><code>ElementType.METHOD</code>：方法<br><code>ElementType.PARAMETER</code>：方法参数<br><code>ElementType.CONSTRUCTOR</code>：构造函数<br><code>ElementType.LOCAL_VARIABLE</code>：局部变量<br><code>ElementType.ANNOTATION_TYPE</code>：注解<br><code>ElementType.PACKAGE</code>：包</td>
</tr>
<tr>
<td style="text-align:center"><code>Retention</code></td>
<td style="text-align:left">定义注解的保留策略。该注解的值如下：<br><code>RetentionPolicy.SOURCE</code>：定义注解仅存在于源码中，在class字节码文件中不包含；<br><code>RetentionPolicy.CLASS</code>：该注解默认的保留策略，定义注解会在class字节码文件中存在，但运行时无法获得；<br><code>RetentionPolicy.RUNTIME</code>：定义注解会在class字节码文件中存在，在运行时可以通过反射获取到。</td>
</tr>
<tr>
<td style="text-align:center"><code>@Document</code></td>
<td style="text-align:left">说明该注解将被包含在javadoc中。</td>
</tr>
<tr>
<td style="text-align:center"><code>@Inherited</code></td>
<td style="text-align:left">说明子类可以继承该注解。</td>
</tr>
</tbody>
</table>
<h2 id="标准注解" data-numberify>标准注解<a class="anchor ms-1" href="#标准注解"></a></h2>
<p>Java 提供了三个标准注解，定义在<code>java.lang</code>中（这三个注解的作用更多是一种注释）。</p>
<ul>
<li>
<p><code>@Override</code>：表示当前方法覆盖了父类中的对应方法（重写方法）。</p>
</li>
<li>
<p><code>@Deprecated</code>：标记一个元素为已过期，避免或不推荐使用。</p>
<p>支持的元素类型为：<code>CONSTRUCTOR</code>, <code>FIELD</code>, <code>LOCAL_VARIABLE</code>, <code>METHOD</code>, <code>PACKAGE</code>, <code>PARAMETER</code>, <code>TYPE</code>。</p>
</li>
<li>
<p><code>@SuppressWarnings</code>：不输出对应的编译警告。</p>
</li>
</ul>
<h2 id="自定义注解" data-numberify>自定义注解<a class="anchor ms-1" href="#自定义注解"></a></h2>
<p>注解的定义类似于接口的定义，使用<code>@interface</code>来定义。定义注解类中的一个方法即为注解类型定义了一个元素，方法的声明不允许有参数或<code>throw</code>语句，返回值类型被限定为原始数据类型、字符串String、Class、enums、注解类型，或前面这些类型的数组，方法可以有默认值。</p>
<p>自定义注解一般分为以下三个步骤：</p>
<ul>
<li>
<p>定义注解。</p>
<p>如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">Type</span><span class="o">)</span>   <span class="c1">// 表明该注解加载在类上
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span> <span class="c1">// 表明运行时读取该注解
</span></span></span><span class="line"><span class="cl"><span class="c1">// 定义注解类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">MyAnnotationType</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 定义注解方法（不能有参数或throw等）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="nf">value</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>   <span class="c1">// 表明该注解加载在字段上（接口、类、枚举）。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">MyAnnotationField</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="nf">name</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用default定义默认值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="nf">length</span><span class="o">()</span> <span class="k">default</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>使用注解。</p>
<p>如（在其他类上）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@MyAnnotationType</span><span class="o">(</span><span class="s">&#34;Annotation&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 或（有多个元素时需要指定元素名）：@MyAnnotation1(value = &#34;Annotation&#34;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UsingAnnotations</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@MyAnnotationField</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;张三&#34;</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">12</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@MyAnnotationField</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;李四&#34;</span><span class="o">)</span>   <span class="c1">// length将使用默认值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="n">String</span> <span class="n">b</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>读取注解。</p>
<p>如（定义一个类来读取）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnnotationValues</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readValues</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Class</span> <span class="n">usingAnnotationsClass</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;UsingAnnotation&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 读取作用于类上的注解
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">MyAnnotationType</span> <span class="n">mat</span> <span class="o">=</span> <span class="o">(</span><span class="n">MyAnnotationType</span><span class="o">)</span> <span class="n">usingAnnotationsClass</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">MyAnnotationType</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mat</span><span class="o">.</span><span class="na">value</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 读取作用于属性上的注解
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Field</span> <span class="n">a</span> <span class="o">=</span> <span class="n">usingAnnotationsClass</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">MyAnnotationField</span> <span class="n">maf</span> <span class="o">=</span> <span class="o">(</span><span class="n">MyAnnotationField</span><span class="o">)</span> <span class="n">a</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">MyAnnotationField</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maf</span><span class="o">.</span><span class="na">name</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maf</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="使用注解模拟-junit" data-numberify>使用注解模拟 Junit<a class="anchor ms-1" href="#使用注解模拟-junit"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnnotationDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// @MyTest
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;test1...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@MyTest</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test2</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;test2...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// @MyTest
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test3</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;test3...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@MyTest</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test4</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;test4...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@MyTest</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test5</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;test5...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">AnnotationDemo</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationDemo</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Class对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.linner.annotation.AnnotationDemo&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 判断对象的所有方法上是否存在MyTest注解
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Method</span><span class="o">[]</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Method</span> <span class="n">method</span> <span class="o">:</span> <span class="n">methods</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">isAnnotationPresent</span><span class="o">(</span><span class="n">MyTest</span><span class="o">.</span><span class="na">class</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Spring Framework</title>
      <link>/docs/spring/springframework/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springframework/</guid>
      <description><![CDATA[Spring Framewor 简介 Spring5.0已经全面支持JDK8，建议JDK使用1.8版本。 Spring Framework是Spring家族中其他框架的底层基础。 Spring Framewor 架]]></description>
      <content:encoded><![CDATA[<h1 id="spring-framewor-简介" data-numberify>Spring Framewor 简介<a class="anchor ms-1" href="#spring-framewor-简介"></a></h1>
<blockquote>
<p>Spring5.0已经全面支持JDK8，建议JDK使用1.8版本。</p>
</blockquote>
<p>Spring Framework是Spring家族中其他框架的底层基础。</p>
<h2 id="spring-framewor-架构" data-numberify>Spring Framewor 架构<a class="anchor ms-1" href="#spring-framewor-架构"></a></h2>
<p>Spring Framework的发展经历了很多版本的变更，每个版本都有相应的调整。</p>
<p>Spring Framework 架构：</p>
<ol>
<li>
<p>核心层</p>
<p>Core Container：核心容器，这个模块是Spring最核心的模块，其他的都需要依赖该模块。</p>
</li>
<li>
<p>AOP层</p>
<ul>
<li>AOP：面向切面编程，它依赖核心层容器，目的是在<u>不改变原有代码</u>的前提下对其进行<u>功能增强</u>。</li>
<li>Aspects：AOP是编程思想，Aspects是对AOP思想的具体实现。</li>
</ul>
</li>
<li>
<p>数据层</p>
<ul>
<li>Data Access：数据访问，Spring全家桶中有对数据访问的具体实现技术。</li>
<li>Data Integration：数据集成，Spring支持整合其他的数据层解决方案，比如Mybatis。</li>
<li>Transactions：事务，Spring中事务管理是Spring AOP的一个具体实现。</li>
</ul>
</li>
<li>
<p>Web层</p>
</li>
<li>
<p>Test层</p>
<p>Spring主要整合了Junit来完成单元测试和集成测试。</p>
</li>
</ol>
<blockquote>
<p>从Spring Framework 5没有架构图，而最新的架构图是4版本，所以可以认为Spring Framework从4版本开始架构就已经趋于稳定，没有什么变动。</p>
</blockquote>
<h2 id="spring-核心概念" data-numberify>Spring 核心概念<a class="anchor ms-1" href="#spring-核心概念"></a></h2>
<p>在Spring核心概念主要包含：</p>
<ul>
<li>
<p><code>IOC</code></p>
<ul>
<li>IOC，Inversion of Control，即控制反转。</li>
<li>控制反转：主动<code>new</code>产生对象转换为由<u>外部</u>提供对象，此过程中对象创建控制权由程序转移到外部的一种思想。</li>
</ul>
<blockquote>
<p>例如，业务（Service）层要使用到数据（DAO）层的类对象。此时就可以使用IOC思想，由外部程序给业务层创建数据层对象。
这样可以降低业务层和数据层之间的耦合性。
如果数据层的实现更改的话，就无需在业务层中修改实现类。</p>
</blockquote>
<ul>
<li><code>IOC容器</code>
<ul>
<li>Spring提供了一个容器，称为<u>IOC容器</u>，用来充当IOC思想中的&quot;外部&quot;。</li>
<li>IOC容器负责对象的创建、初始化等一系列工作。</li>
</ul>
</li>
<li><code>Bean</code>
<ul>
<li>在IOC容器中，被创建或被管理的对象统称为<code>Bean</code>。</li>
<li>IOC容器中存放的就是一个个的Bean对象。</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>DI</code></p>
<ul>
<li>依赖注入：在容器中建立Bean与Bean之间的依赖关系的整个过程。</li>
</ul>
<blockquote>
<p>例如，业务层和数据层在IOC容器中创建Bean后，并不能直接工作，因为业务层需要依赖数据层才能正确工作。所以此时就需要使用依赖注入，在业务层和数据层之间建立依赖关系。</p>
</blockquote>
</li>
</ul>
<p>IOC和DI的最终目标就是充分解耦。在Spring Framewor中的实现依靠：</p>
<ul>
<li>使用IOC容器管理Bean（IOC）。</li>
<li>在IOC容器内将有依赖关系的Bean进行关系绑定（DI）。</li>
</ul>
<p>最终，使用对象时不仅可以直接从IOC容器中获取，并且获取到的bean已经绑定了所有的依赖关系。</p>
<hr>
<h1 id="配置文件方法使用iocdi" data-numberify>配置文件方法使用IOC/DI<a class="anchor ms-1" href="#配置文件方法使用iocdi"></a></h1>
<h2 id="使用-ioc-容器创建-beanbean-标签" data-numberify>使用 IOC 容器创建 Bean（bean 标签）<a class="anchor ms-1" href="#使用-ioc-容器创建-beanbean-标签"></a></h2>
<p>基础配置：</p>
<ol>
<li>
<p>创建Maven项目，项目基础结构如下：</p>
<ul>
<li>📁<code>project-file-name</code>
<ul>
<li>📁<code>src</code>
<ul>
<li>📁<code>main</code>
<ul>
<li>📁<code>java</code>
<ul>
<li>📁<code>com.linner</code>
<ul>
<li>📁<code>dao</code></li>
<li>📁<code>domain</code></li>
<li>📁<code>service</code></li>
</ul>
</li>
</ul>
</li>
<li>📁<code>resourcs</code></li>
</ul>
</li>
<li>📁<code>test</code>
<ul>
<li>📁<code>java</code>
<ul>
<li>📁<code>com.linner</code>
<ul>
<li>📁<code>service</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>📄<code>pom.xml</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>添加Spring Framework的依赖jar包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--springframework--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--junit--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>4.12<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>添加业务层、数据层类：</p>
<ul>
<li>
<p><code>User.java</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.domain</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;User{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, username=&#39;&#34;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, password=&#39;&#34;</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>DAO(仅测试，无需查询数据库):</p>
<p>接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>实现类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao.impl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao findAll...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao findById:&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao delete:&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao save:&#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao update:&#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>Service:</p>
<p>接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>实现类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service.impl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.impl.UserDaoImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService findAll...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService findById:&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService delete:&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService save:&#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService update:&#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ol>
<ul>
<li>
<p>测试方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.impl.UserServiceImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserServiceImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>创建Bean</p>
<ul>
<li>
<p>在📁<code>resourcs</code>目录下创建String配置文件<code>applicationContext.xml</code>，并使用<code>&lt;bean&gt;</code>标签配置Bean：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--添加UserService--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>接着在程序中使用Spring提供的方法获取IOC容器。然后从IOC容器中获取对象并调用其方法，修改Test类进行测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// private UserService userService = new UserServiceImpl();
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用IOC无需自己创建对象（对象由IOC容器分配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 这里使用静态代码块获取容器和Bean
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取IOC容器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>IOC核心容器创建方式有：</p>
<ul>
<li>
<p><code>ClassPathXmlApplicationContext</code>：类路径下的XML配置文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p><code>ClassPathXmlApplicationContext</code>的参数为XML配置文件在类路径下的相对路径。</p>
</li>
<li>
<p><code>FileSystemXmlApplicationContext</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileSystemXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;/home/linner/IdeaProjects/my-springfw-demo/src/main/resources/applicationContext.xml&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p><code>FileSystemXmlApplicationContext</code>的参数为XML配置文件在文件系统下的绝对路径。</p>
</li>
</ul>
</li>
</ul>
<p><code>UserServiceTest</code>执行成功说明配置成功。</p>
<h3 id="bean-的基础配置" data-numberify>Bean 的基础配置<a class="anchor ms-1" href="#bean-的基础配置"></a></h3>
<p><code>&lt;bean&gt;</code>标签是作为Spring配置Bean使用。其基本形式为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;&#34;</span> <span class="na">class=</span><span class="s">&#34;&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><ul>
<li><code>id</code>：Bean标签的唯一标识。在同一个上下文中(配置文件)不能重复。</li>
<li><code>class</code>：Bean的类型。包含包名和类名。</li>
</ul>
<h3 id="别名name-属性" data-numberify>别名（name 属性）<a class="anchor ms-1" href="#别名name-属性"></a></h3>
<p><code>&lt;bean&gt;</code>的<code>name</code>属性可以为<code>&lt;bean&gt;</code>指定别名，别名可以有多个，使用<code>,</code>，<code>;</code>，空格进行分隔。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">name=</span><span class="s">&#34;service userEbi&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><blockquote>
<p>说明：EBI全称Enterprise Business Interface，译为企业业务接口。</p>
</blockquote>
<h3 id="获取-bean-的方式getbean-方法" data-numberify>获取 Bean 的方式（getBean() 方法）<a class="anchor ms-1" href="#获取-bean-的方式getbean-方法"></a></h3>
<p>使用<code>getBean()</code>获取Bean的方式有三种：</p>
<ul>
<li>
<p>按照名称获取：</p>
<p>是指在<code>getBean()</code>方法中传递<code>String</code>类型的参数，参数的值为Bean的名称。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="nf">getBean</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>按照类型获取：</p>
<p>需要保证该类型在IOC容器中有且仅有一个Bean（不能包含多个同类型的Bean）。
在参数中传递该类型的<code>class</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getBean</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">aClass</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>按照名称和类型获取：</p>
<p>在参数中传入Bean的名称和类型。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getBean</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">aClass</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="作用范围scope-属性" data-numberify>作用范围（scope 属性）<a class="anchor ms-1" href="#作用范围scope-属性"></a></h3>
<p><code>&lt;bean&gt;</code>的<code>scope</code>属性可以为<code>&lt;bean&gt;</code>设置作用范围，可选值为：</p>
<ul>
<li>
<p><code>singloton</code>：默认，表示创建的对象为单例（在整个IOC容器中所有获取到的该对象都为同一个对象）。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">scope=</span><span class="s">&#34;singloton&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>或：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="nt">/&gt;</span>
</span></span></code></pre></div><blockquote>
<p>实际上，单例对象在容器被获取的时候就已经被创建了。</p>
</blockquote>
</li>
<li>
<p><code>prototype</code>：表示创建的对象为非单例（每次在IOC容器中获取到的对象都是不同的对象）。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">name=</span><span class="s">&#34;service userEbi&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">scope=</span><span class="s">&#34;prototype&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div></li>
</ul>
<p>Example：</p>
<ul>
<li>
<p>将<code>UserService</code>设为单例：</p>
<p>String配置文件<code>applicationContext.xml</code>中<code>userService</code>的<code>&lt;bean&gt;</code>（由于Spring默认创建的是单例，所以这里可以选择不添加<code>scope=&quot;singloton&quot;</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>创建新的测试类<code>TestForUserServiceScope</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestForUserServiceScope</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ApplicationContext</span> <span class="n">ctx</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>执行<code>UserServiceTest1</code>后，在输出中可以发现：每个测试方法中使用<code>getBean()</code>获取到的<code>UserService</code>都是同个对象。</p>
</li>
<li>
<p>将<code>UserService</code>设为非单例：</p>
<p>修改String配置文件<code>applicationContext.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">scope=</span><span class="s">&#34;prototype&#34;</span><span class="nt">&gt;</span>
</span></span></code></pre></div><p>再次执行<code>UserServiceTest1</code>，可以发现：每个测试方法中使用<code>getBean()</code>获取到的<code>UserService</code>都是不同的对象。</p>
</li>
</ul>
<h3 id="bean-的实例化" data-numberify>Bean 的实例化<a class="anchor ms-1" href="#bean-的实例化"></a></h3>
<p>实例化Bean分为三种方式：</p>
<ul>
<li>构造方法</li>
<li>静态工厂</li>
<li>实例工厂</li>
</ul>
<h4 id="构造方法实例化-bean默认" data-numberify>构造方法实例化 Bean（默认）<a class="anchor ms-1" href="#构造方法实例化-bean默认"></a></h4>
<p><code>&lt;bean&gt;</code>默认是使用无参的构造方法实例化Bean。并且，Spring底层用的是反射（因为即使将构造方法设置为<code>private</code>依然可以使用）。</p>
<h4 id="静态工厂实例化-beanfactory-method-属性" data-numberify>静态工厂实例化 Bean（factory-method 属性）<a class="anchor ms-1" href="#静态工厂实例化-beanfactory-method-属性"></a></h4>
<p>静态工厂实例化Bean指的是通过工厂类来创建对象。</p>
<p>一般情况下是使用如下方法静态工厂实例化对象：</p>
<ul>
<li>
<p>创建<code>com.linner.factory</code>包，并编写<code>UserDaoFactory</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.factory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.impl.UserDaoImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">UserDao</span> <span class="nf">getUserDao</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>编写<code>TestFroInstanceUserDao</code>测试类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.factory.UserDaoFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestFroInstanceUserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="n">UserDaoFactory</span><span class="o">.</span><span class="na">getUserDao</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>在IOC容器中使用静态工厂实例化：</p>
<ul>
<li>
<p>在Spring配置文件中加入<code>UserDao</code>的配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.factory.UserDaoFactory&#34;</span> <span class="na">factory-method=</span><span class="s">&#34;getUserDao&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><ul>
<li><code>class</code>：工厂类的类全名。这里指定的是创建<code>UserDao</code>的静态工厂类<code>UserDaoFactory</code>。</li>
<li><code>factory-method</code>：<code>class</code>指定的工厂类中创建对象的方法名。这里指定的是工厂类中用来创建<code>UserDao</code>的方法。</li>
</ul>
</li>
<li>
<p>修改<code>TestFroInstanceUserDao</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestFroInstanceUserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>注意：使用这种方法实例化，不能将该Bean注入到其他Bean中。</p>
</blockquote>
<h4 id="实例工厂实例化-bean" data-numberify>实例工厂实例化 Bean<a class="anchor ms-1" href="#实例工厂实例化-bean"></a></h4>
<h5 id="使用-bean-的-factory-bean-属性" data-numberify>使用 Bean 的 factory-bean 属性<a class="anchor ms-1" href="#使用-bean-的-factory-bean-属性"></a></h5>
<p>实例化工厂实例化Bean是指，为工厂类添加一个单例的Bean（为区分则称为工厂Bean），然后在要实例化的Bean中指定使用这个工厂Bean作为实例化工厂。</p>
<p>修改<code>UserDaoFactory</code>（不使用静态工厂）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">UserDao</span> <span class="nf">getUserDao</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在Spring的配置文件中添加<code>UserDaoFactory</code>的<code>&lt;bean&gt;</code>，并且修改<code>UserDao</code>的<code>&lt;bean&gt;</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDaoFactory&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.factory.UserDaoFactory&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">factory-bean=</span><span class="s">&#34;userDaoFactory&#34;</span> <span class="na">factory-method=</span><span class="s">&#34;getUserDao&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><ul>
<li>添加了一个<code>userDaoFactory</code>工厂Bean。</li>
<li><code>factory-bean</code>：工厂的实例对象，即工厂Bean的<code>id</code>或<code>name</code>。</li>
<li><code>factory-method</code>：工厂对象中具体创建对象的方法名，即<code>factory-bean</code>指定对象中创建该对象的方法名。</li>
</ul>
<p>成功执行<code>TestFroInstanceUserDao</code>即配置成功。</p>
<h5 id="使用-factorybean-接口" data-numberify>使用 FactoryBean 接口<a class="anchor ms-1" href="#使用-factorybean-接口"></a></h5>
<p>创建一个<code>UserDaoFactoryBean</code>的类，实现<code>FactoryBean</code>接口，重写接口的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.factory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.impl.UserDaoImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.FactoryBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoFactoryBean</span> <span class="kd">implements</span> <span class="n">FactoryBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getObject</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">getObjectType</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">UserDao</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSingleton</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>getObject()</code>：创建实例化对象并返回。代替原始实例工厂中创建对象的方法。</li>
<li><code>getObjectType()</code>：返回所创建类的Class对象。</li>
<li><code>isSingleton()</code>：设置对象是否为单例。默认<code>true</code>，可以不重写。</li>
</ul>
<p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.factory.UserDaoFactoryBean&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>成功执行<code>TestFroInstanceUserDao</code>即配置成功。</p>
<h3 id="bean-的生命周期" data-numberify>Bean 的生命周期<a class="anchor ms-1" href="#bean-的生命周期"></a></h3>
<p>Bean的生命周期是指Bean对象从创建到销毁的整个过程。对Bean的生命周期进行控制，可以在Bean创建后（如加载初始化需要用到资源）还有销毁前（如释放资源）执行一些操作。</p>
<h4 id="init-method-和-destroy-method-属性" data-numberify>init-method 和 destroy-method 属性<a class="anchor ms-1" href="#init-method-和-destroy-method-属性"></a></h4>
<p>Spring控制生命周期的第一个方法便是使用Spring配置文件中<code>&lt;bean&gt;</code>的 <code>init-method</code> 和 <code>destroy-method</code> 属性。</p>
<p>在<code>UserDaoImpl</code>中创建初始化方法和销毁方法（方法名任意）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 初始化方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao init...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 销毁方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao destroy...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span> <span class="na">init-method=</span><span class="s">&#34;init&#34;</span> <span class="na">destroy-method=</span><span class="s">&#34;destroy&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><ul>
<li><code>init-method</code>：<code>class</code>指定的类中的初始化方法，在创建Bean对象后执行。</li>
<li><code>destroy-method</code>：<code>class</code>指定的类中的销毁方法，在销毁Bean前执行。</li>
</ul>
<p>编写<code>TestForLifeCycle</code>测试类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestForLifeCycle</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testForLifeCycle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ClassPathXmlApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>对比之前的<code>ctx</code>对象，这里<code>ctx</code>对象使用的类型从<code>ApplicationContext</code>变成了<code>ClassPathXmlApplicationContext</code>。这是因为<code>ApplicationContext</code>中并没有<code>close()</code>方法。而想要执行Bean对象中的<code>destroy()</code>，就必须在程序退出前关闭IOC容器（调用<code>ctx.close()</code>）。</p>
<h4 id="注册钩子关闭容器" data-numberify>注册钩子关闭容器<a class="anchor ms-1" href="#注册钩子关闭容器"></a></h4>
<p>在容器未关闭之前，提前设置好回调函数，让JVM在退出之前回调此函数来关闭容器。</p>
<p>修改<code>TestForLifeCycle</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestForLifeCycle</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testForLifeCycle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ClassPathXmlApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="o">.</span><span class="na">registerShutdownHook</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>注意：<code>ApplicationContext</code>中也没有<code>registerShutdownHook()</code>。所以这里使用的是<code>ClassPathXmlApplicationC</code>对象。</p>
</blockquote>
<h4 id="initializingbean-和-disposablebean-接口" data-numberify>InitializingBean 和 DisposableBean 接口<a class="anchor ms-1" href="#initializingbean-和-disposablebean-接口"></a></h4>
<p>Spring 提供了<code>InitializingBean</code>和<code>DisposableBean</code>接口以更加方便地控制Bean生命周期。使用这两个接口则无需通过Sping配置文件中的<code>init-method</code>和<code>destroy-method</code> 属性来控制生命周期。</p>
<p>实现<code>InitializingBean</code>接口的<code>afterPropertiesSet()</code>方法和<code>DisposableBean</code>接口的<code>destroy()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.DisposableBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.InitializingBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span><span class="o">,</span> <span class="n">InitializingBean</span><span class="o">,</span> <span class="n">DisposableBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * InitializingBean接口的初始化方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterPropertiesSet</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao init by afterPropertiesSet()...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * DisposableBean接口的销毁方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao destroyed by destroy()...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在Spring配置文件中删除<code>init-method</code>和<code>destroy-method</code>属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><h3 id="使用-bean-标签的注意事项" data-numberify>使用 Bean 标签的注意事项<a class="anchor ms-1" href="#使用-bean-标签的注意事项"></a></h3>
<ul>
<li>
<p><code>class</code>属性不能使用接口。因为接口不能创建对象。</p>
</li>
<li>
<p>获取Bean无论是通过<code>id</code>还是<code>name</code>获取，如果无法获取到，将抛出异常<code>NoSuchBeanDefinitionException</code>。</p>
</li>
<li>
<p>Bean默认为单例，避免了对象的频繁创建与销毁，达到了对Bean对象的复用，性能高。</p>
</li>
<li>
<p>如果对象是有状态对象（即该对象有成员变量可以用来存储数据）。因为所有请求线程共用一个Bean对象，所以会存在线程安全问题。</p>
</li>
<li>
<p>如果对象是无状态对象（即该对象没有成员变量没有进行数据存储）。因方法中的局部变量在方法调用完成后会被销毁，所以不会存在线程安全问题。</p>
</li>
<li>
<p>适合交给容器进行管理的Bean对象：</p>
<ul>
<li>表现层对象</li>
<li>业务层对象</li>
<li>数据层对象</li>
<li>工具对象</li>
</ul>
</li>
<li>
<p>不适合交给容器进行管理的Bean对象：</p>
<p>封装实例的域对象。会引发线程安全问题。</p>
</li>
</ul>
<h2 id="di-依赖注入" data-numberify>DI 依赖注入<a class="anchor ms-1" href="#di-依赖注入"></a></h2>
<p>上面的程序，在<code>UserServiceImpl</code>中依然需要手动创建对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>当前业务层和数据层的耦合性还是很高。此时就需要使用依赖注入来降低耦合性。</p>
<p>Spring依赖注入支持<u>简单数据类型</u>、<u>引用数据类型</u>还有<u>集合注入</u>，并且提供了两种注入方式：</p>
<ul>
<li>Setter注入</li>
<li>构造器注入</li>
</ul>
<p>基础配置：</p>
<ol>
<li>创建Maven项目。</li>
<li>添加Spring Framework和Junit的依赖jar包。</li>
<li>添加业务层、数据层类：
<ul>
<li><code>User.java</code>: 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>User.java</code>。</li>
<li>DAO(仅测试，无需查询数据库): 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的DAO（<code>UserDao</code>）。</li>
<li>Service: 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的Service（<code>UserService</code>）。</li>
</ul>
</li>
</ol>
<ul>
<li>
<p>测试方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.impl.UserServiceImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="setter-注入property-标签" data-numberify>Setter 注入（property 标签）<a class="anchor ms-1" href="#setter-注入property-标签"></a></h3>
<p>Setter注入是指，在实现类中为需要注入的属性设置Setter方法，让Spring能够使用Setter方法自动给属性创建对象。</p>
<h4 id="注入引用数据类型" data-numberify>注入引用数据类型<a class="anchor ms-1" href="#注入引用数据类型"></a></h4>
<p>要在Bean中注入引用类型属性，注入的属性其实现类必须得是IOC容器中的Bean。</p>
<p>在<code>UserServiceImpl</code>中，取消手动创建对象，并为<code>userDao</code>属性提供<code>setter</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserDao</span><span class="o">(</span><span class="n">UserDao</span> <span class="n">userDao</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userDao</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件<code>applicationContext.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;userDao&#34;</span> <span class="na">ref=</span><span class="s">&#34;userDao&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--...--&gt;</span>
</span></span></code></pre></div><p>为<code>UserService</code>注入<code>UserDao</code>要在<code>UserService</code>的<code>&lt;bean&gt;</code>标签中使用<code>&lt;property&gt;</code>标签。·</p>
<p><code>&lt;property&gt;</code>表示配置当前<code>&lt;bean&gt;</code>的属性，其标签属性有：</p>
<ul>
<li><code>name</code>：<code>&lt;bean&gt;</code>所指的实现类的属性名，表示配置哪一个具体的属性。</li>
<li><code>ref</code>：要配置的属性的Bean的<code>id</code>或<code>name</code>，表示参照哪一个<code>&lt;bean&gt;</code>（该注入的Bean必须在容器中存在）。</li>
</ul>
<p>成功运行<code>ServiceBeanTest</code>说明注入成功。</p>
<p>如果要注入多个属性，则在实例类中加入多个属性，为其设置Setter并在Bean中配置多个<code>&lt;property&gt;</code>即可。</p>
<h4 id="注入简单数据类型" data-numberify>注入简单数据类型<a class="anchor ms-1" href="#注入简单数据类型"></a></h4>
<p>在Bean中注入简单类型属性，简单数据类型并不用在配置文件中为简单类型添加Bean标签配置。</p>
<p>为<code>BookDao</code>添加简单类型属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.InitializingBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span><span class="o">,</span> <span class="n">InitializingBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setConnectionNum</span><span class="o">(</span><span class="kt">int</span> <span class="n">connectionNum</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">connectionNum</span> <span class="o">=</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDatabaseName</span><span class="o">(</span><span class="n">String</span> <span class="n">databaseName</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">databaseName</span> <span class="o">=</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterPropertiesSet</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao init: DatabaseName=&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">databaseName</span>
</span></span><span class="line"><span class="cl">                        <span class="o">+</span> <span class="s">&#34;, ConnectionNum=&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">connectionNum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在Spring配置文件中为<code>UserDao</code>添加<code>&lt;property&gt;</code>标签：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;databaseName&#34;</span> <span class="na">value=</span><span class="s">&#34;mysql&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;connectionNum&#34;</span> <span class="na">value=</span><span class="s">&#34;10&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><ul>
<li><code>name</code>：含义不变，与引用注入类型用法中的含义相同。</li>
<li><code>value</code>: 要配置的属性的值，必须是简单数据类型。对于参数类型，Spring在注入的时候会自动转换，但是有可能会发生转换错误的情况。</li>
</ul>
<p>成功运行<code>ServiceBeanTest</code>说明注入成功。</p>
<h4 id="集合注入" data-numberify>集合注入<a class="anchor ms-1" href="#集合注入"></a></h4>
<p>修改<code>UserDao</code>，为其添加集合类型参数和对应Setter方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span><span class="o">,</span> <span class="n">InitializingBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Properties</span> <span class="n">properties</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...此处省略setter方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterPropertiesSet</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao init: &#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;array=&#34;</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">array</span><span class="o">)</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;, list=&#34;</span> <span class="o">+</span> <span class="n">list</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;, set=&#34;</span> <span class="o">+</span> <span class="n">set</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;, map=&#34;</span> <span class="o">+</span> <span class="n">map</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;, properties=&#34;</span> <span class="o">+</span> <span class="n">properties</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;array&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;array&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>1<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>2<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>3<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/array&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;list&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;list&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>a<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>b<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>c<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/list&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;set&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;set&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>a<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>a<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>b<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>c<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/set&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;map&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;map&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;a&#34;</span> <span class="na">value=</span><span class="s">&#34;1&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;b&#34;</span> <span class="na">value=</span><span class="s">&#34;2&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;c&#34;</span> <span class="na">value=</span><span class="s">&#34;3&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/map&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;properties&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;props&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;a&#34;</span><span class="nt">&gt;</span>1<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;b&#34;</span><span class="nt">&gt;</span>2<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;c&#34;</span><span class="nt">&gt;</span>3<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/props&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><ul>
<li>
<p><code>&lt;property&gt;</code>：Setter注入依然使用该标签。其<code>name</code>属性含义不变。</p>
<p>集合类型的值在其标签下定义。</p>
</li>
<li>
<p><code>&lt;array&gt;</code>：定义数组类型的值。</p>
<ul>
<li>数组元素中的值使用<code>&lt;value&gt;</code>标签定义。</li>
<li><code>&lt;value&gt;</code>标签中的值要与数组的类型一致。
一般形式如下：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;array&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/array&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;list&gt;</code>：定义<code>List</code>类型的值。</p>
<p>其用法与<code>&lt;array&gt;</code>类似。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;list&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/list&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;set&gt;</code>：定义<code>Set</code>类型的值。
其用法与<code>&lt;array&gt;</code>类似。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;set&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/set&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;map&gt;</code>：定义<code>Map</code>类型的值。</p>
<ul>
<li>其元素使用<code>&lt;entry&gt;</code>标签定义。并且元素的<code>key</code>使用<code>key</code>属性定义，元素的<code>value</code>使用<code>value</code>属性定义。</li>
<li><code>key</code>和<code>value</code>属性的值要和<code>Map</code>的类型对应。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;map&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span> <span class="na">value=</span><span class="s">&#34;...&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span> <span class="na">value=</span><span class="s">&#34;...&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span> <span class="na">value=</span><span class="s">&#34;...&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/map&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;props&gt;</code>：定义<code>Properties</code>的值。</p>
<p>其元素使用<code>&lt;prop&gt;</code>标签定义。<code>key</code>使用<code>key</code>属性定义，<code>value</code>在标签中定义。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;props&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/props&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>注意：</p>
<ul>
<li>List的底层也是通过数组实现的，所以<code>&lt;list&gt;</code>和<code>&lt;array&gt;</code>标签是可以混用。</li>
<li>集合中要添加引用类型，只需要把<code>&lt;value&gt;</code>标签改成<code>&lt;ref&gt;</code>标签。</li>
</ul>
</blockquote>
<h3 id="构造器注入constructor-arg-标签" data-numberify>构造器注入（constructor-arg 标签）<a class="anchor ms-1" href="#构造器注入constructor-arg-标签"></a></h3>
<p>构造器注入是指Spring通过Bean的实例类中，带参的构造方法将其他Bean进行注入。</p>
<h4 id="注入引用数据类型-1" data-numberify>注入引用数据类型<a class="anchor ms-1" href="#注入引用数据类型-1"></a></h4>
<p>在<code>UserServices</code>中删除Setter方法（此处删除Setter方法是为了证明使用的是构造器注入而非Setter注入）并添加带参的构造方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserServiceImpl</span><span class="o">(</span><span class="n">UserDao</span> <span class="n">userDao</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userDao</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&#34;userDao&#34;</span> <span class="na">ref=</span><span class="s">&#34;userDao&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p><code>&lt;constructor-arg&gt;</code>中<code>name</code>和<code>ref</code>属性的含义与<code>&lt;property&gt;</code>的含义类似。只不过<code>name</code>属性指的是Bean实例类型中构造方法的参数名（名称必须要一致）。</p>
<p>成功运行<code>ServiceBeanTest</code>说明注入成功。</p>
<p>如果要注入多个类型数据，则在构造方法中加入多个参数并在Bean中配置多个<code>&lt;constructor-arg&gt;</code>即可。</p>
<h4 id="注入简单数据类型-1" data-numberify>注入简单数据类型<a class="anchor ms-1" href="#注入简单数据类型-1"></a></h4>
<p>在<code>UserDao</code>中删除Setter方法，并为其添加带参的构造方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span><span class="o">,</span> <span class="n">InitializingBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserDaoImpl</span><span class="o">(</span><span class="n">String</span> <span class="n">databaseName</span><span class="o">,</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">databaseName</span> <span class="o">=</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">connectionNum</span> <span class="o">=</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&#34;databaseName&#34;</span> <span class="na">value=</span><span class="s">&#34;mysql&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&#34;connectionNum&#34;</span> <span class="na">value=</span><span class="s">&#34;10&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>成功运行<code>ServiceBeanTest</code>说明注入成功。</p>
<h4 id="集合注入-1" data-numberify>集合注入<a class="anchor ms-1" href="#集合注入-1"></a></h4>
<p>构造器注入集合数据类型的方式与Setter注入集合数据类型的方式类似。</p>
<p>只不构造器注入要定义相应的带参方法，并且将<code>&lt;property&gt;</code>标签改为<code>&lt;constructor-arg&gt;</code>。</p>
<h3 id="自动装配bean-标签的-autowire-属性" data-numberify>自动装配（bean 标签的 autowire 属性）<a class="anchor ms-1" href="#自动装配bean-标签的-autowire-属性"></a></h3>
<p>自动装配只适用于引用类型依赖注入，不能对简单类型进行操作。</p>
<p>自动装配的方式有：</p>
<ul>
<li>按类型（常用）</li>
<li>按名称</li>
<li>按构造方法（的参数）</li>
</ul>
<h4 id="按类型自动装配" data-numberify>按类型自动装配<a class="anchor ms-1" href="#按类型自动装配"></a></h4>
<p>为<code>UserService</code>中的属性（如<code>userDao</code>）提供Setter方法。接着在Spring中为<code>UserService</code>删除其<code>&lt;bean&gt;</code>标签下的所有<code>&lt;proerty&gt;</code>或<code>&lt;constructor-arg&gt;</code>。然后给<code>&lt;bean&gt;</code>添加<code>autowire=&quot;byType&quot;</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">autowire=</span><span class="s">&#34;byType&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注意：</p>
<ul>
<li>类中对应属性的Setter方法不能省略。</li>
<li>被注入的对象必须要被Spring的IOC容器管理。</li>
<li>按照类型自动装配如果Spring在IOC中找到多个类型相同的Bean则会报<code>NoUniqueBeanDefinitionException</code>错误。</li>
</ul>
</blockquote>
<h4 id="按名称自动装配" data-numberify>按名称自动装配<a class="anchor ms-1" href="#按名称自动装配"></a></h4>
<p>一个类型在IOC中有多个对象，还想要注入成功，这个时候就需要按照名称注入。</p>
<p>修改Spring配置文件（添加<code>autowire=&quot;byName&quot;</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">autowire=</span><span class="s">&#34;byName&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注意：</p>
<ul>
<li>按名称自动装配是根据Setter方法的名称在IOC容器中寻找名称对应的Bean（Bean的<code>id</code>或<code>name</code>）。如<code>setUserDao()</code>则需要寻找名称为<code>userDao</code>的Bean。</li>
<li>如果按照名称找不到对应的Bean，则注入<code>null</code>（不会报错！）。</li>
<li>按名称自动装配中，实例类成员变量名与配置耦合，不推荐使用。</li>
</ul>
</blockquote>
<h2 id="配置文件管理第三方-beanproperties-文件加载" data-numberify>配置文件管理第三方 Bean（properties 文件加载）<a class="anchor ms-1" href="#配置文件管理第三方-beanproperties-文件加载"></a></h2>
<h3 id="数据源对象管理dao层" data-numberify>数据源对象管理（DAO层）<a class="anchor ms-1" href="#数据源对象管理dao层"></a></h3>
<p>以Druid为例：</p>
<ul>
<li>
<p><code>pom.xml</code>依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Spring Framework--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--MySQL JDBC--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>8.0.29<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Druid--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>1.2.11<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>JDBC配置（<code>jdbc.properties</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">jdbc.driver</span><span class="o">=</span><span class="s">com.mysql.jdbc.Driver</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.url</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:33061/spring_db</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.username</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.password</span><span class="o">=</span><span class="s">n546,Lin0</span>
</span></span></code></pre></div></li>
<li>
<p>Spring配置（<code>applicationContext.xml</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--需要开启context命名空间--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:context=</span><span class="s">&#34;http://www.springframework.org/schema/context&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--加载jdbc配置文件--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;context:property-placeholder</span> <span class="na">location=</span><span class="s">&#34;classpath*:jdbc.properties&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Druid Bean--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;com.alibaba.druid.pool.DruidDataSource&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driverClassName&#34;</span> <span class="na">value=</span><span class="s">&#34;${jdbc.driver}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;${jdbc.url}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;${jdbc.username}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;${jdbc.password}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>编写<code>App.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.alibaba.druid.pool.DruidDataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">DruidDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">DruidDataSource</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果终端成功输出<code>dataSource</code>，说明配置成功。</p>
</li>
</ul>
<hr>
<h1 id="注解开发" data-numberify>注解开发<a class="anchor ms-1" href="#注解开发"></a></h1>
<p>Spring对注解支持的版本历程:</p>
<ul>
<li>2.0版开始支持注解</li>
<li>2.5版注解功能趋于完善</li>
<li>3.0版支持纯注解开发</li>
</ul>
<p>基础配置：</p>
<ol>
<li>创建Maven项目。</li>
<li>添加Spring Framework和Junit的依赖jar包。</li>
<li>添加业务层、数据层类：
<ul>
<li><code>User.java</code>: 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>User.java</code>。</li>
<li>DAO(仅测试，无需查询数据库): 同<a href="/docs/spring/springframework/#setter-%e6%b3%a8%e5%85%a5property-%e6%a0%87%e7%ad%be">Setter 注入</a>中的DAO（<code>UserDao</code>）。</li>
<li>Service: 同<a href="/docs/spring/springframework/#setter-%e6%b3%a8%e5%85%a5property-%e6%a0%87%e7%ad%be">Setter 注入</a>中的Service（<code>UserService</code>）。</li>
</ul>
</li>
</ol>
<h2 id="spring-配置文件包扫描" data-numberify>Spring 配置文件包扫描<a class="anchor ms-1" href="#spring-配置文件包扫描"></a></h2>
<p>为了能够获取到使用注解定义的Bean，需要在Spring配置文件中使用包扫描来识别出指定包下的所有Bean。</p>
<p>创建Spring配置文件。在Spring配置文件中加入包扫描：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xmlns:context=</span><span class="s">&#34;http://www.springframework.org/schema/context&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&#34;com.linner&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注意：</p>
<p>使用<code>&lt;context:component-scan&gt;</code>包扫描，需要在<code>&lt;beans&gt;</code>标签中加入属性：</p>
<pre tabindex="0"><code>xmlns:context=&#34;http://www.springframework.org/schema/context&#34;
</code></pre><p>接着在<code>&lt;context:component-scan&gt;</code>的<code>xsi:schemaLocation</code>属性中加入值：</p>
<pre tabindex="0"><code>http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
</code></pre></blockquote>
<p><code>&lt;context:component-scan&gt;</code>：</p>
<ul>
<li>
<p><code>component</code>：组件，Spring将管理的Bean视作自己的一个组件。</p>
</li>
<li>
<p><code>scan</code>：扫描。</p>
</li>
<li>
<p><code>base-package</code>：该属性指定Spring框架扫描的包路径，它会扫描指定包及其子包中的所有类上的注解。</p>
<ul>
<li>包路径越精确，如：<code>com.linner.dao.impl</code>，扫描的范围越小速度越快。</li>
<li>包路径越广泛，如：<code>com.linner</code>，扫描的范围越大速度越慢。</li>
</ul>
<blockquote>
<p>一般扫描到项目的组织名称即Maven的<code>&lt;groupId&gt;</code>下（如：<code>com.linner</code>）即可。
包扫描不仅能扫描当前包，还能扫描当前包下的子包。</p>
</blockquote>
</li>
</ul>
<h2 id="创建-bean-对象component" data-numberify>创建 Bean 对象（@Component）<a class="anchor ms-1" href="#创建-bean-对象component"></a></h2>
<p>在<code>UserDao</code>中添加<code>@Component</code>注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>编写新的测试类<code>UserDaoTest</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>@Component</code>可以传递一个<code>String</code>类型的值。用于制定Bean的名称。</p>
</li>
<li>
<p><code>@Component</code>可以直接使用而不指定名称。即，使用按类型获取Bean。但必须保证该类型在IOC中有且仅有一个Bean。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">UserDao</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>@Component</code>注解如果不起名称，会有一个默认值，就是将<u>当前类名首字母转为小写后的值</u>。所以也可以按照名称获取。</p>
</li>
<li>
<p><code>@Component</code>还有其他三个衍生注解。</p>
<ul>
<li><code>@Controller</code>：表现层</li>
<li><code>@Service</code>：业务层</li>
<li><code>@Repository</code>：数据层</li>
</ul>
<p>它们的作用和<code>@Component</code>是一样的，仅作为对表现层、业务层和数据层的类进行区分。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="纯注解开发配置类包扫描" data-numberify>纯注解开发（配置类、包扫描）<a class="anchor ms-1" href="#纯注解开发配置类包扫描"></a></h2>
<p>Spring3.0开启了纯注解开发模式，使用Java类替代配置文件。</p>
<p>删除Spring配置文件并创建配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>@Configuration</code>：设定该类为Spring配置类。</p>
</li>
<li>
<p><code>@ComponentScan</code>：包扫描，用来替换配置文件中的<code>&lt;context:component-scan&gt;</code>。在一个配置类中仅能使用一次。多个扫描路径使用数据格式，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.dao&#34;</span><span class="o">,</span> <span class="s">&#34;com.linner.service&#34;</span><span class="o">})</span>
</span></span></code></pre></div><blockquote>
<p>包扫描不仅能扫描当前包，还能扫描当前包下的子包</p>
</blockquote>
</li>
</ul>
<p>修改<code>UserDaoTest</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.config.SpringConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">SpringConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>使用Spring配置类，获取IOC容器应该使用<code>AnnotationConfigApplicationContext</code>对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;...</span> <span class="n">componentClasses</span><span class="o">)</span>
</span></span></code></pre></div><h2 id="作用范围scope" data-numberify>作用范围（@Scope）<a class="anchor ms-1" href="#作用范围scope"></a></h2>
<p>注解开发控制Bean的作用范围使用<code>@Scope</code>。它的值有两个：</p>
<ul>
<li>
<p><code>&quot;singleton&quot;</code>：默认值，将当前类设置为单例。</p>
</li>
<li>
<p><code>&quot;prototype&quot;</code>：将当前类设置为多例。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Scope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Scope</span><span class="o">(</span><span class="s">&#34;prototype&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="生命周期控制postconstruct-和-predestroy" data-numberify>生命周期控制（@PostConstruct 和 @PreDestroy）<a class="anchor ms-1" href="#生命周期控制postconstruct-和-predestroy"></a></h2>
<p>注解控制Bean生命周期使用：</p>
<ul>
<li><code>@PostConstruct</code>：初始化。</li>
<li><code>@PreDestroy</code>：销毁。</li>
</ul>
<p>给<code>UserDao</code>加入初始化和销毁方法（方法名任意）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.annotation.PostConstruct</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.annotation.PreDestroy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 初始化方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PostConstruct</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span> <span class="o">+</span> <span class="s">&#34;init...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 销毁方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PreDestroy</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span> <span class="o">+</span> <span class="s">&#34;destroy...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>与使用注解开发的情况一样，要想执行<code>destroy()</code>需要在程序执行的时候关闭容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ctx</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span></code></pre></div><p>或：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ctx</span><span class="o">.</span><span class="na">registerShutdownHook</span><span class="o">();</span>
</span></span></code></pre></div><p>注意:<code>@PostConstruct</code>和@<code>PreDestroy</code>注解如果找不到，需要导入下面的jar包。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;groupId&gt;</span>javax.annotation<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;artifactId&gt;</span>javax.annotation-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;version&gt;</span>1.3.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>原因是，从JDK9以后jdk中的<code>javax.annotation</code>包被移除了，这两个注解刚好就在这个包中。</p>
</blockquote>
<h2 id="依赖注入" data-numberify>依赖注入<a class="anchor ms-1" href="#依赖注入"></a></h2>
<p>给<code>UserService</code>配置Bean：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="按照类型注入" data-numberify>按照类型注入<a class="anchor ms-1" href="#按照类型注入"></a></h3>
<p>注解开发按照类型注入使用<code>@Autowired</code>注解。</p>
<p>给<code>UserService</code>注入<code>UserDao</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><code>@Autowired</code>可以在实例类的成员变量上使用，也可以在Setter方法上使用，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserDao</span><span class="o">(</span><span class="n">UserDao</span> <span class="n">userDao</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userDao</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在实例类的成员变量上使用<code>@Autowired</code>，即使将Setter方法注释掉依然可以注入成功。因为自动装配基于反射设计创建对象并通过暴力反射为属性进行设值（即使是私有属性也能设值）。</p>
<p>使用<code>@Autowired</code>需要保证该类型在IOC容器中有且仅有一个同类型的Bean。
如果IOC容器中有对个同类型的Bean。那么<code>@Autowired</code>就会按照变量名和Bean的名称进行匹配。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Repository</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span> <span class="cm">/*...*/</span> <span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>也能注入成功。</p>
<p>如果有多个同类型Bean，并且<code>@Autowired</code>名称匹配不上，那么会报<code>NoUniqueBeanDefinitionException</code>错误。</p>
</blockquote>
<p>使用<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>UserServiceTest</code>，成功执行说明配置成功。</p>
<h3 id="按照名称注入" data-numberify>按照名称注入<a class="anchor ms-1" href="#按照名称注入"></a></h3>
<p>注解开发名称注入使用<code>@Qualifier</code>注解来完成。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Qualifier</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在<code>@Qualifier</code>中指定Bean的名称。并且，<code>@Qualifier</code>必须和<code>@Autowired</code>一起使用才能起到按照名称注入的效果。</p>
<blockquote>
<p>经过测试单独使用<code>@Qualifier</code>（不加<code>@Autowired</code>）的效果和按照类型注入的效果一样（可能会有其他细微的区别）。</p>
</blockquote>
<h3 id="注入简单数据类型-2" data-numberify>注入简单数据类型<a class="anchor ms-1" href="#注入简单数据类型-2"></a></h3>
<p>注解开发注入简单类型数据使用<code>@Value</code>注解。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;mysql&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;10&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p><code>@Value</code>中的值使用<code>String</code>类型。如果要注入的是其他类型数据，需要按照其类型数据的格式编写。</p>
<h4 id="注解读取-properties-配置文件" data-numberify>注解读取 properties 配置文件<a class="anchor ms-1" href="#注解读取-properties-配置文件"></a></h4>
<p>使用<code>@Value</code>的意义之一在于：读取properties配置文件的信息。</p>
<p>在<code>resource</code>目录下新建<code>jdbc.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">databaseName</span><span class="o">=</span><span class="s">mysql</span>
</span></span><span class="line"><span class="cl"><span class="na">connectionNum</span><span class="o">=</span><span class="s">10</span>
</span></span></code></pre></div><p>在配置类上添加<code>@PropertySource</code>注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.PropertySource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">(</span><span class="s">&#34;jdbc.properties&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>修改<code>UserDao</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${databaseName}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${connectionNum}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p>读取多个配置文件，使用数组形式给<code>@PropertySource</code>传递字符串数组。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">({</span><span class="s">&#34;jdbc.properties&#34;</span><span class="o">,</span> <span class="s">&#34;xxx.properties&#34;</span><span class="o">})</span>
</span></span></code></pre></div></li>
<li>
<p><code>@PropertySource</code>注解属性中不支持使用通配符<code>*</code>，运行会报错。</p>
</li>
<li>
<p><code>@PropertySource</code>注解属性中可以加入<code>classpath:</code>，代表从当前项目的根路径找文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">({</span><span class="s">&#34;classpath:jdbc.properties&#34;</span><span class="o">})</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="注解管理第三方-bean" data-numberify>注解管理第三方 Bean<a class="anchor ms-1" href="#注解管理第三方-bean"></a></h2>
<p>基础配置：</p>
<ul>
<li>
<p><code>User.java</code>: 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>User.java</code>。</p>
</li>
<li>
<p><code>UserDao</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Select</span><span class="o">(</span><span class="s">&#34;SELECT * FROM user_tb&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Select</span><span class="o">((</span><span class="s">&#34;SELECT * FROM user_tb WHERE id = #{id}&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Delete</span><span class="o">(</span><span class="s">&#34;DELETE FROM user_tb WHERE id = #{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Insert</span><span class="o">(</span><span class="s">&#34;INSERT INTO user_tb(username, password) VALUES (#{username}, #{password})&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Update</span><span class="o">(</span><span class="s">&#34;UPDATE user_tb SET username = #{username}, password = #{password} WHERE id = #{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>UserService</code>：</p>
<p><code>UserService</code>接口同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>UserService.java</code>。</p>
<p><code>UserService</code>实现类<code>UserServiceImpl.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service.impl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">userDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="整合-mybatis" data-numberify>整合 Mybatis<a class="anchor ms-1" href="#整合-mybatis"></a></h3>
<ul>
<li>
<p><code>pom.xml</code>依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--Spring Framework--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MySQL JDBC--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>8.0.29<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Druid--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.2.11<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MyBatis--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.5.10<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Spring JDBC--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MyBatis Spring 整合包--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.3.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Junit 单元测试--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>4.13<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>建立User表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="o">`</span><span class="n">user_tb</span><span class="o">`</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">`</span><span class="n">user_tb</span><span class="o">`</span><span class="w">  </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="nb">int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="w"> </span><span class="k">COMMENT</span><span class="w"> </span><span class="s1">&#39;用户id&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">`</span><span class="n">username</span><span class="o">`</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">COMMENT</span><span class="w"> </span><span class="s1">&#39;用户名&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">`</span><span class="n">password</span><span class="o">`</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">COMMENT</span><span class="w"> </span><span class="s1">&#39;密码&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="nb">CHARACTER</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">utf8</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>JDBC配置文件<code>jdbc.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">jdbc.driver</span><span class="o">=</span><span class="s">com.mysql.cj.jdbc.Driver</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.url</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:3306/spring_db?useSSL=false&amp;useServerPrepStmts=true</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.username</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.password</span><span class="o">=</span><span class="s">root</span>
</span></span></code></pre></div></li>
<li>
<p>JDBC配置类<code>JdbcConfig.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.alibaba.druid.pool.DruidDataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JdbcConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 驱动信息：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.driver}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">driver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.url}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">url</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.username}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.password}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 获取DataSource对象
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">dataSource</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">DruidDataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DruidDataSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置驱动信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ds</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">driver</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">url</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>@Bean</code>：用于方法上，根据返回值类型自动产生Bean，并且方法的参数会按照类型自动装配。</li>
</ul>
</li>
<li>
<p>Mybatis配置类<code>MybatisConfig.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.mybatis.spring.SqlSessionFactoryBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.mybatis.spring.mapper.MapperScannerConfigurer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MybatisConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SqlSessionFactoryBean</span> <span class="nf">sqlSessionFactory</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SqlSessionFactoryBean</span> <span class="n">ssfb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置模型类的别名扫描
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ssfb</span><span class="o">.</span><span class="na">setTypeAliasesPackage</span><span class="o">(</span><span class="s">&#34;com.linner.domain&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置数据源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ssfb</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ssfb</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">    * 获取MapperScannerConfigurer对象
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MapperScannerConfigurer</span> <span class="nf">mapperScannerConfigurer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">MapperScannerConfigurer</span> <span class="n">msc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapperScannerConfigurer</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">msc</span><span class="o">.</span><span class="na">setBasePackage</span><span class="o">(</span><span class="s">&#34;com.linner.dao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">msc</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>SqlSessionFactoryBean</code>：用于封装<code>SqlSessionFactory</code>需要的环境信息（原先的信息是在Mybatis配置文件中定义，如今可以在Java中用代码定义）。用于产生<code>SqlSessionFactory</code>对象。
<ul>
<li><code>setTypeAliasesPackage()</code>：设置模型类的别名扫描</li>
<li><code>setDataSource()</code>：设置<code>DataSource</code>。这里设置的<code>DataSource</code>通过方法的参数和<code>@Bean</code>注解实现了自动装配。并且自动装配的对像是Druid的<code>DataSource</code>。</li>
</ul>
</li>
<li><code>MapperScannerConfigurer</code>：用于加载Dao接口，创建代理对象保存到IOC容器中。此处设置的是<code>dao</code>包下的所有接口。这些接口都会被Mybatis创建成对象并且作为Bean保存在IOC容器中。即，使用<code>ctx.getBean(UserDao.class)</code>能获取到<code>UserDao</code>。</li>
</ul>
</li>
<li>
<p>Spring配置类<code>SpringConfig.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">(</span><span class="s">&#34;classpath:jdbc.properties&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Import</span><span class="o">({</span><span class="n">JdbcConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">MybatisConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>@Import</code>：用于引入其他配置类。如果要引入多个配置类则需要使用数组形式。</li>
</ul>
</li>
<li>
<p>测试类<code>UserServiceTest</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.config.SpringConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">SpringConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">User</span> <span class="n">user</span> <span class="o">:</span> <span class="n">users</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;张三&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">21</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;张三&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="整合-junit" data-numberify>整合 Junit<a class="anchor ms-1" href="#整合-junit"></a></h3>
<ul>
<li>
<p>引入Spring与测试有关的整合包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--Spring 测试整合包--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>修改测试类<code>UserServiceTest</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 设置类运行器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 设置Spring环境对应的配置
</span></span></span><span class="line"><span class="cl"><span class="c1">// 加载配置类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="o">{</span><span class="n">SpringConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 加载配置文件
</span></span></span><span class="line"><span class="cl"><span class="c1">//@ContextConfiguration(locations={&#34;classpath:applicationContext.xml&#34;})
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 自动装配UserService，删除static静态代码块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="aop" data-numberify>AOP<a class="anchor ms-1" href="#aop"></a></h2>
<h3 id="aop-介绍" data-numberify>AOP 介绍<a class="anchor ms-1" href="#aop-介绍"></a></h3>
<p>一般常用的编程思想是OOP（面向对象编程，Object Oriented Programming）。</p>
<p>而AOP（面向切面编程，Aspect Oriented Programming），是一种编程范式，指导开发者如何组织程序结构。</p>
<p>编程思想主要的内容就是指导程序员该如何编写程序，所以AOP和OOP是两种不同的编程范式。</p>
<p>AOP的作用是在不改变原始设计的基础上为其进行功能增强。类似于Filter代理模式。</p>
<p>AOP术语：</p>
<ul>
<li>
<p>连接点（JoinPoint）：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等。</p>
<p>在SpringAOP中，理解为方法的执行。</p>
<p>例如要对项目中<code>UserDao</code>的功能在不进行任何修改的前提下实现增强。那么<code>UserDao</code>中要增强的方法即为<u>连接点</u>。</p>
</li>
<li>
<p>切入点（Pointcut）：匹配连接点的式子。</p>
<p>在SpringAOP中，一个切入点可以描述一个具体方法，也可也匹配多个方法。</p>
<blockquote>
<p>连接点范围要比切入点范围大，是切入点的方法也一定是连接点，但是是连接点的方法就不一定要被增强，所以可能不是切入点。</p>
</blockquote>
</li>
<li>
<p>通知（Advice）：在切入点处执行的操作，也就是共性功能。</p>
<p>在SpringAOP中，功能最终以方法的形式呈现。</p>
</li>
<li>
<p>通知类：定义通知的类。</p>
</li>
<li>
<p>切面（Aspect）：描述通知与切入点的对应关系。</p>
<p>通知是要增强的内容，会有多个；切入点是需要被增强的方法，也会有多个。通知和切入点的关系通过切面来描述。</p>
</li>
<li>
<p>目标对象（Target）：也叫原始对象。原始功能去掉共性功能对应的类产生的对象。即，配置AOP之前原设计的对象（要增强的对象）。</p>
</li>
<li>
<p>代理（Proxy）：通过通知类把目标对象增强后产生的对象。</p>
<p>目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现。</p>
</li>
</ul>
<h3 id="注解开发-aop" data-numberify>注解开发 AOP<a class="anchor ms-1" href="#注解开发-aop"></a></h3>
<p>基础配置：使用<a href="/docs/spring/springframework/#%e6%95%b4%e5%90%88-junit">整合 Junit</a>中的配置。</p>
<ul>
<li>
<p><code>pom.xml</code>导入坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.aspectj<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>aspectjweaver<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.9.4<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><ul>
<li><code>spring-context</code>中已经包含了<code>spring-aop</code>，所以不需要再单独导入<code>spring-aop</code>。</li>
<li>AspectJ是AOP思想的一个具体实现，AspectJ比起Spring的AOP实现来说，更加好用。</li>
</ul>
</li>
<li>
<p>创建通知类<code>UserDaoAdvice</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.aop</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.dao.UserDao.*(..))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Before</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Before...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>@Aspect</code>：设置当前类为AOP切面类。</p>
</li>
<li>
<p><code>@Pointcut</code>：设置切入点方法。切入点定义需要一个不具有实际意义的方法（无参、无返回值、空方法体）。即<code>UserDaoAdvice</code>中的<code>pt()</code>。</p>
<p><code>@Pointcut</code>中的<code>execution()</code>用来定义切入点。</p>
</li>
<li>
<p><code>@Before</code>：设置切面。即设置当前通知方法在原始切入点方法前运行。</p>
<p>切入点定义作为<code>@Before</code>的参数。</p>
</li>
</ul>
</li>
<li>
<p>在<code>SpringConfig</code>加入<code>@EnableAspectJAutoProxy</code>注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableAspectJAutoProxy</span>
</span></span><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">(</span><span class="s">&#34;classpath:jdbc.properties&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Import</span><span class="o">({</span><span class="n">JdbcConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">MybatisConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="aop-切入点表达式" data-numberify>AOP 切入点表达式<a class="anchor ms-1" href="#aop-切入点表达式"></a></h3>
<p>切入点表达式是对要进行增强的方法的描述方式。切入点表达式的一般形式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="err">动作关键字</span><span class="o">(</span><span class="err">访问修饰符</span> <span class="err">返回值类型</span> <span class="err">包名</span><span class="o">.</span><span class="err">类名</span><span class="o">.</span><span class="err">方法名</span><span class="o">(</span><span class="err">参数类型列表</span><span class="o">)</span> <span class="err">异常名</span><span class="o">)</span>
</span></span></code></pre></div><ul>
<li>由于通常都是对<code>public</code>方法进行定义，而<code>public</code>是默认的，所以可以省略。</li>
<li>切入点表达式定义的类可以是接口，也可以是其实现类。</li>
<li>AOP是在Spring中运行的，很显然切入点表达式定义的类必须存在IOC容器中。</li>
<li>如果匹配无参方法，直接省略参数。</li>
</ul>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">execution</span><span class="o">(</span><span class="kt">void</span> <span class="n">com</span><span class="o">.</span><span class="na">linner</span><span class="o">.</span><span class="na">dao</span><span class="o">.</span><span class="na">UserDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="kt">int</span><span class="o">))</span>
</span></span></code></pre></div><h4 id="切入点表达式通配符" data-numberify>切入点表达式通配符<a class="anchor ms-1" href="#切入点表达式通配符"></a></h4>
<ul>
<li>
<p><code>*</code>：匹配任意单个独立的任意符号。</p>
<p>可以独立出现，匹配任意返回值类型、单个包名（不能用做匹配完整包名）、类名、方法名或单个参数类型（即匹配单个单词）；
也可以作为前缀或者后缀的匹配符出现。</p>
<p>如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">execution</span><span class="err">（</span><span class="o">*</span> <span class="n">com</span><span class="o">.</span><span class="na">linner</span><span class="o">.*.</span><span class="na">UserService</span><span class="o">.</span><span class="na">find</span><span class="o">*(*))</span>
</span></span></code></pre></div><p>匹配<code>com.linner</code>包下的任意包中的<code>UserService</code>类或接口中，所有以<code>find</code>开头的、带有一个参数的、任意返回值类型的方法。</p>
</li>
<li>
<p><code>..</code>：匹配多个连续的任意符号。</p>
<p>可以独立出现，常用于简化包名与参数的书写。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">execution</span><span class="err">（</span><span class="o">*</span> <span class="n">com</span><span class="o">..</span><span class="na">UserService</span><span class="o">.</span><span class="na">findById</span><span class="o">(..))</span>
</span></span></code></pre></div><p>匹配<code>com</code>包下的任意包中的<code>UserService</code>类或接口中所有名称为<code>findById</code>的（参数的数量、类型任意，返回值任意）方法。</p>
</li>
</ul>
<ul>
<li>
<p><code>+</code>：专用于匹配子类类型。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">execution</span><span class="o">(*</span> <span class="o">*..*</span><span class="n">Service</span><span class="o">+.*(..))</span>
</span></span></code></pre></div><p>这个使用率较低。<code>*Service+</code>，表示所有以Service结尾的接口的子类。</p>
</li>
</ul>
<p>书写技巧（所有代码按照标准规范开发，否则以下技巧全部失效）：</p>
<ul>
<li>描述切入点通常<u>描述接口</u>，而不描述实现类，如果描述到实现类，就出现耦合了。</li>
<li>访问控制修饰符针对接口开发均采用<code>public</code>描述（简化书写）。</li>
<li>返回值类型对于<u>增删改方法使用精准类型</u>加速匹配，对于查询类使用<code>*</code>通配快速描述。</li>
<li>包名书写尽量不使用<code>..</code>匹配，效率过低，常用<code>*</code>做单个包描述匹配，或精准匹配。</li>
<li>接口名/类名书写名称与模块相关的采用<code>*</code>匹配，例如<code>UserService</code>书写成<code>*Service</code>，绑定业务层接口名。</li>
<li>方法名书写以动词进行精准匹配，名词采用<code>*</code>匹配，例如<code>getById</code>书写成<code>getBy*</code>，<code>selectAll</code>书写成<code>selectAll</code>。</li>
<li>参数规则较为复杂，根据业务方法灵活调整。</li>
<li>通常不使用异常作为匹配规则。</li>
</ul>
<h4 id="通知类型" data-numberify>通知类型<a class="anchor ms-1" href="#通知类型"></a></h4>
<p>AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置。</p>
<p>AspactJ提供了5种通知类型：</p>
<ul>
<li>前置通知</li>
<li>后置通知</li>
<li>环绕通知</li>
<li>返回后通知</li>
<li>抛出异常后通知</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 代码1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 代码2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 原始的业务操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 代码3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 代码4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 代码5
</span></span></span></code></pre></div><p>其中：</p>
<ul>
<li>前置通知：代码1和代码2</li>
<li>返回后通知：代码3</li>
<li>抛出异常后通知：代码4</li>
<li>后置通知:代码5</li>
<li>环绕通知：上述整个代码块</li>
</ul>
<p>通知方法的方法名称没有限制，只需在方法的上端使用注解定义即可。各通知类型的注解如下：</p>
<ul>
<li>前置通知：<code>@Before</code></li>
<li>后置通知：<code>@After</code></li>
<li>环绕通知：<code>@Around</code></li>
<li>返回后通知：<code>@AfterReturning</code></li>
<li>抛出异常后通知：<code>@AfterThrowing</code></li>
</ul>
<p>这些注解的使用方式都是一样的。在对应的方法上定义，并且传入切入点（函数形式）。如：<code>@Around(&quot;pt()&quot;)</code>。</p>
<h5 id="前置通知和后置通知的使用" data-numberify>前置通知和后置通知的使用<a class="anchor ms-1" href="#前置通知和后置通知的使用"></a></h5>
<p>前置通知和后置通知的使用方式一样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.dao.UserDao.*(..))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Before</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Before...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@After</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;After...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h5 id="环绕通知的使用" data-numberify>环绕通知的使用<a class="anchor ms-1" href="#环绕通知的使用"></a></h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.aspectj.lang.ProceedingJoinPoint</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.dao.UserDao.findById(int))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Around</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">around</span><span class="o">(</span><span class="n">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Before...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Object</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;After....&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>环绕通知必须传入一个<code>ProceedingJoinPoint</code>参数。使用<code>pjp.proceed()</code>才可以在环绕通知中掉用原始方法。并且<code>proceed()</code>可以获取到原始方法的返回值。</p>
<p>如果也想让代理后的方法返回跟原始方法一样的值。那么必须定义环绕方法的返回值类型，并且使用<code>proceed()</code>获取原始方法的返回值并返回。</p>
<p>环绕通知比较灵活，可以将其定义成其他类型的通知，并且可以做到其他通知做不到的事情。例如循环调用原始方法等。</p>
<p>环绕通知需要抛出异常是因为。原始方法有可能会出现异常，并且原始方法的异常并不确定。所以为了提高通用性，环绕通知默认抛出异常。</p>
<p>如果环绕方法定义的是<code>void</code>类型，并且原始方法有返回值。如果此时在环绕通知中没有返回值，那么在掉用代理后的方法后，返回的是<code>null</code>。</p>
<h5 id="返回后通知的使用" data-numberify>返回后通知的使用<a class="anchor ms-1" href="#返回后通知的使用"></a></h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.dao.UserDao.findById(int))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@AfterReturning</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterReturning</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;After Returning...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>注意：返回后通知是需要在原始方法正常执行后才会被执行，如果原始方法执行的过程中出现了异常，那么返回后通知不会被执行。</p>
<p>后置通知是不管原始方法有没有抛出异常都会被执行。</p>
</blockquote>
<h5 id="异常后通知" data-numberify>异常后通知<a class="anchor ms-1" href="#异常后通知"></a></h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.service.UserService.findAll())&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@AfterThrowing</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterThrowing</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;After Throwing...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在<code>UserServiceImpl.findAll()</code>中模拟错误即可触发。例如使用<code>int a = 1/0;</code>模拟错误。</p>
<blockquote>
<p>注意：异常后通知是需要原始方法抛出异常。如果没有抛异常，异常后通知将不会被执行。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Ajax 前后端交互</title>
      <link>/docs/spring/java-web/ajax-interaction/</link>
      <pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/ajax-interaction/</guid>
      <description><![CDATA[Ajax AJAX (Asynchronous JavaScript And XML)，其含义为异步的 JavaScript 和 XML。其中 JavaScript 表明该技术和前端相关；XML 是指以此进行数据交换。 AJAX 作用有以下两方面： 与服务器进行数据交]]></description>
      <content:encoded><![CDATA[<h1 id="ajax" data-numberify>Ajax<a class="anchor ms-1" href="#ajax"></a></h1>
<p><code>AJAX</code> (Asynchronous JavaScript And XML)，其含义为异步的 JavaScript 和 XML。其中 <code>JavaScript</code> 表明该技术和前端相关；<code>XML</code> 是指以此进行数据交换。</p>
<p>AJAX 作用有以下两方面：</p>
<ol>
<li><strong>与服务器进行数据交换</strong>：通过AJAX可以给服务器发送请求，服务器将数据直接响应回给浏览器。</li>
<li><strong>异步交互</strong>：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术，如：搜索联想、用户名是否可用校验等等。
<ul>
<li>同步：浏览器页面在发送请求给服务器，在服务器处理请求的过程中，浏览器页面不能做其他的操作。只能等到服务器响应结束后，浏览器页面才能继续做其他的操作。</li>
<li>异步：浏览器页面发送请求给服务器，在服务器处理请求的过程中，浏览器页面还可以做其他的操作。</li>
</ul>
</li>
</ol>
<h2 id="ajax-简单使用" data-numberify>Ajax 简单使用<a class="anchor ms-1" href="#ajax-简单使用"></a></h2>
<p>服务端：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.servlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/ajaxServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AjaxServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 返回给客户端响应数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="s">&#34;Hello Ajax!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>客户端：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">//1. 创建核心对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">let</span> <span class="n">xhttp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">(</span><span class="n">window</span><span class="o">.</span><span class="na">XMLHttpRequest</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">xhttp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XMLHttpRequest</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// code for IE6, IE5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">xhttp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActiveXObject</span><span class="o">(</span><span class="s">&#34;Microsoft.XMLHTTP&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//2. 发送请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">xhttp</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="s">&#34;GET&#34;</span><span class="o">,</span> <span class="s">&#34;http://localhost:8080/ajax-demo/ajaxServlet&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">xhttp</span><span class="o">.</span><span class="na">send</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//3. 获取响应
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">xhttp</span><span class="o">.</span><span class="na">onreadystatechange</span> <span class="o">=</span> <span class="n">function</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">readyState</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">==</span> <span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 处理从服务端发送过来的响应数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">alert</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">responseText</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">};</span>
</span></span></code></pre></div><hr>
<h1 id="axios" data-numberify>Axios<a class="anchor ms-1" href="#axios"></a></h1>
<p>Axios 是一个对原生的AJAX进行封装，简化书写的前端框架。</p>
<h2 id="使用-axios-进行交互" data-numberify>使用 Axios 进行交互<a class="anchor ms-1" href="#使用-axios-进行交互"></a></h2>
<p>Axios 的使用分为以下两步：</p>
<ul>
<li>
<p>引入 Axios 的 js 文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/axios.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>使用 Axios 发送请求，并获取响应结果：</p>
<ul>
<li>
<p>发送 GET 请求的基本形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;get&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 请求参数会传递给服务器，此处请求参数可以转义也可以不转义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">url</span><span class="o">:</span> <span class="s2">&#34;http://localhost:8080/axios-demo/demo?message=Hello%20World&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resp</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对响应数据进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">alert</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p>发送 POST 请求的基本形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;post&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">url</span><span class="o">:</span> <span class="s2">&#34;http://localhost:8080/axios-demo/demo&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="s2">&#34;message=Hello World&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resp</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nx">alert</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<p>其中：</p>
<ul>
<li>
<p><code>axios()</code> 是用来发送异步请求的，小括号中使用 js 对象传递请求相关的参数：</p>
<ul>
<li>
<p><code>method</code> 属性：用来设置请求方式的。</p>
<p>取值为 <code>get</code> 或者 <code>post</code>。</p>
</li>
<li>
<p><code>url</code> 属性：用来书写请求的资源路径。</p>
<p>如果是 <code>get</code> 请求，需要将请求参数拼接到路径的后面，格式为： <code>url?参数名=参数值&amp;参数名2=参数值2</code>。</p>
</li>
<li>
<p><code>data</code> 属性：作为请求体被发送的数据。</p>
<p>即，如果是 <code>post</code> 请求的话，数据需要作为 <code>data</code> 属性的值。</p>
</li>
</ul>
</li>
<li>
<p><code>then()</code> 需要传递一个匿名函数。</p>
<p><code>then()</code> 中传递的匿名函数称为回调函数，意思是该匿名函数在发送请求时不会被调用，而是在成功响应后调用的函数。</p>
<p>而该回调函数中的 <code>resp</code> 参数是对响应的数据进行封装的对象，通过 <code>resp.data</code> 可以获取到响应的数据。</p>
</li>
</ul>
<h2 id="请求方法别名" data-numberify>请求方法别名<a class="anchor ms-1" href="#请求方法别名"></a></h2>
<p>为了方便起见， Axios 已经为所有支持的请求方法提供了别名。如下：</p>
<ul>
<li>
<p><code>get</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span><span class="nx">config</span><span class="p">])</span>
</span></span></code></pre></div></li>
<li>
<p><code>delete</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span><span class="nx">config</span><span class="p">])</span>
</span></span></code></pre></div></li>
<li>
<p><code>head</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">head</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span><span class="nx">config</span><span class="p">])</span>
</span></span></code></pre></div></li>
<li>
<p><code>options</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span><span class="nx">config</span><span class="p">])</span>
</span></span></code></pre></div></li>
<li>
<p><code>post</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span><span class="nx">data</span><span class="p">[,</span><span class="nx">config</span><span class="p">])</span>
</span></span></code></pre></div></li>
<li>
<p><code>put</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span><span class="nx">data</span><span class="p">[,</span><span class="nx">config</span><span class="p">])</span>
</span></span></code></pre></div></li>
<li>
<p><code>patch</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">patch</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span><span class="nx">data</span><span class="p">[,</span><span class="nx">config</span><span class="p">])</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="this-作用域问题" data-numberify>this 作用域问题<a class="anchor ms-1" href="#this-作用域问题"></a></h3>
<p>使用请求方法别名和箭头函数可以解决this作用域问题，防止this指向错误：</p>
<ul>
<li>
<p>GET请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;http://localhost:8080/axios-demo/demo?message=Hello World&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">resp</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对响应数据进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">alert</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p>POST请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">axios</span><span class="o">.</span><span class="na">post</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;http://localhost:8080/axios-demo/demo&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message=Hello World&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">).</span><span class="na">then</span><span class="o">(</span><span class="n">resp</span> <span class="o">=&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对响应数据进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">alert</span><span class="o">(</span><span class="n">resp</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">})</span>
</span></span></code></pre></div></li>
</ul>
<h1 id="json" data-numberify>JSON<a class="anchor ms-1" href="#json"></a></h1>
<p>JSON（JavaScript Object Notation）是指 JavaScript 对象表示法。</p>
<p>JSON的优点：数据格式简单，所占的字节数少等。</p>
<h2 id="json-的格式" data-numberify>JSON 的格式<a class="anchor ms-1" href="#json-的格式"></a></h2>
<p><code>JSON</code> 本质就是一个字符串，但是该字符串内容是有一定的格式要求的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;key_1&#34;</span><span class="p">:</span> <span class="err">value_</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;key_2&#34;</span><span class="p">:</span> <span class="err">value_</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;key_3&#34;</span><span class="p">:</span> <span class="err">value_</span><span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="err">...,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;key_n&#34;</span><span class="p">:</span> <span class="err">value_n</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ul>
<li><code>JSON</code> 格式中的键要求必须使用双引号括起来。</li>
<li>Value 的数据类型分为如下：
<ul>
<li>数字（整数或浮点数）</li>
<li>字符串（使用双引号括起来）</li>
<li>逻辑值（<code>true</code>或者<code>false</code>）</li>
<li>数组（在方括号<code>{}</code>中）</li>
<li>对象（在花括号<code>[]</code>中）</li>
<li>null</li>
</ul>
</li>
</ul>
<p>在 js 中定义 json：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">变量名</span> <span class="o">=</span> <span class="sb">`{
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;key1&#34;:value1,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;key2&#34;:value2,
</span></span></span><span class="line"><span class="cl"><span class="sb">        ...
</span></span></span><span class="line"><span class="cl"><span class="sb">    }`</span><span class="p">;</span>
</span></span></code></pre></div><h2 id="在-js-中使用-josn" data-numberify>在 JS 中使用 JOSN<a class="anchor ms-1" href="#在-js-中使用-josn"></a></h2>
<p>JS 提供了一个对象 <code>JSON</code> ，该对象有如下两个方法：</p>
<ul>
<li>
<p><code>parse(str)</code>：将 JSON串转换为 js 对象。</p>
<p>使用方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">jsObject</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">jsonStr</span><span class="p">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>stringify(obj)</code>：将 js 对象转换为 JSON 串。</p>
<p>使用方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">jsonStr</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">jsObject</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="携带json发送异步请求" data-numberify>携带JSON发送异步请求<a class="anchor ms-1" href="#携带json发送异步请求"></a></h3>
<p>可以使用 <code>JSON.stringify()</code> 将js对象转换为 <code>JSON</code> 串，再将该 <code>JSON</code> 串作为 <code>axios</code> 的 <code>data</code> 属性值进行请求参数的提交。</p>
<p>但其实只需要将需要提交的参数封装成 js 对象，并将该 js 对象作为 <code>axios</code> 的 <code>data</code> 属性值。<code>axios</code> 会自动将 js 对象转换为 <code>JSON</code> 串进行提交。</p>
<blockquote>
<p>发送异步请求时，如果请求参数是 <code>JSON</code> 格式，那请求方式必须是 <code>POST</code>。因为 <code>JSON</code> 串需要放在请求体中。</p>
</blockquote>
<h2 id="fastjson" data-numberify>Fastjson<a class="anchor ms-1" href="#fastjson"></a></h2>
<p><code>Fastjson</code> 是阿里巴巴提供的一个Java语言编写的高性能功能完善的 <code>JSON</code> 库，是目前Java语言中最快的 <code>JSON</code> 库，可以实现 <code>Java</code> 对象和 <code>JSON</code> 字符串的相互转换。</p>
<p>依赖坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>fastjson<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.2.62<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>JOSN 和 Java对象的相互转换包含：</p>
<ul>
<li>
<p>请求数据（反序列化）：</p>
<p>JSON字符串转为Java对象。</p>
<p>将 json 转换为 Java 对象，只需要使用 <code>Fastjson</code> 提供的 <code>JSON</code> 类中的 <code>parseObject()</code> 静态方法即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="nf">toJSONString</span><span class="o">(</span><span class="n">Object</span> <span class="n">object</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>响应数据（序列化）：</p>
<p>Java对象转为JSON字符串。</p>
<p>将 Java 对象转换为 JSON 串，只需要使用 <code>Fastjson</code> 提供的 <code>JSON</code> 类中的 <code>toJSONString()</code> 静态方法即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">parseObject</span><span class="o">(</span><span class="n">String</span> <span class="n">jsonStr</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">clazz</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ul>
<p>Example：</p>
<ul>
<li>
<p>导入坐标。</p>
</li>
<li>
<p>编写<code>pojo</code>类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">pojo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;User{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, username=&#39;&#34;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, password=&#39;&#34;</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>编写<code>FastJsonDemo</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.servlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.alibaba.fastjson.JSON</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pojo.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FastJsonDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. Java对象转JSON字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;zhangsan&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">jsonString</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jsonString</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 输出：{&#34;id&#34;:1,&#34;password&#34;:&#34;123&#34;,&#34;username&#34;:&#34;zhangsan&#34;}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 将JSON字符串转为Java对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">User</span> <span class="n">u</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;{\&#34;id\&#34;:1,\&#34;password\&#34;:\&#34;123\&#34;,\&#34;username\&#34;:\&#34;zhangsan\&#34;}&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">u</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Filter 过滤器</title>
      <link>/docs/spring/java-web/filter/</link>
      <pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/filter/</guid>
      <description><![CDATA[Filter 概述 Filter 表示过滤器，是 JavaWeb 三大组件(Servlet、Filter、Listener)之一。 过滤器可以把对资源的请求拦截下来，从而实现一些特殊的]]></description>
      <content:encoded><![CDATA[<h1 id="filter-概述" data-numberify>Filter 概述<a class="anchor ms-1" href="#filter-概述"></a></h1>
<p>Filter 表示过滤器，是 JavaWeb 三大组件(Servlet、Filter、Listener)之一。</p>
<p>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能。设置 Filter 会在访问资源之前会先经过 Filter，将资源拦截，从而实现权限控制、统一编码处理、敏感字符处理等功能。</p>
<p>过滤器Filter是在请求进入容器后，但在进入Servlet之前进行预处理。</p>
<p>进行 <code>Filter</code> 开发分成以下三步实现：</p>
<ul>
<li>
<p>定义类，实现 Filter接口，并重写其所有方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">filter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebFilter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 拦截的路径，这里 &#34;/*&#34; 拦截了项目中所有资源请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@WebFilter</span><span class="o">(</span><span class="s">&#34;/*&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FilterDemo</span> <span class="kd">implements</span> <span class="n">Filter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Filter的初始化方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">FilterConfig</span> <span class="n">filterConfig</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Filter的操作方法，在init后执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">servletResponse</span><span class="o">,</span> <span class="n">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 销毁Filter执行的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>配置Filter拦截资源的路径：</p>
<p>在类上定义 <code>@WebFilter</code> 注解。</p>
<p>此处注解的 <code>value</code> 属性值 <code>/*</code> 表示拦截所有的资源。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">filter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// import ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 拦截的路径，这里 &#34;/*&#34; 拦截了项目中所有资源请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@WebFilter</span><span class="o">(</span><span class="s">&#34;/*&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FilterDemo</span> <span class="kd">implements</span> <span class="n">Filter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>doFilter()</code>方法中对拦截的资源进行处理，并选择是否放行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.filter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// import ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 拦截的路径，这里 &#34;/*&#34; 拦截了项目中所有资源请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@WebFilter</span><span class="o">(</span><span class="s">&#34;/*&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FilterDemo</span> <span class="kd">implements</span> <span class="n">Filter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">servletResponse</span><span class="o">,</span> <span class="n">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 放行前，对request数据进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 放行前response中没有数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 放行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">servletRequest</span><span class="o">,</span> <span class="n">servletResponse</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 调用该方法，会执行其它拦截器或访问路径中对应的Servlet或访问对应资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 如果该方法没有被调用，那么对应资源将不可被访问，且后续的其它拦截器都不会被执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 放行后，对response数据进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>项目依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;maven.compiler.source&gt;</span>8<span class="nt">&lt;/maven.compiler.source&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;maven.compiler.target&gt;</span>8<span class="nt">&lt;/maven.compiler.target&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>3.1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.maven<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>tomcat7-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;port&gt;</span>80<span class="nt">&lt;/port&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><blockquote>
<p>在<code>doFilter()</code>中，如果要使用<code>request</code>和<code>response</code>，可以将它们强转为对应的<code>HttpServletRequest</code>和<code>HttpServletResponse</code>对象来进行操作。</p>
</blockquote>
<hr>
<h1 id="filter-执行流程" data-numberify>Filter 执行流程<a class="anchor ms-1" href="#filter-执行流程"></a></h1>
<p>Filter 的执行流程如下：</p>
<ul>
<li>
<p>浏览器访问资源</p>
</li>
<li>
<p>资源被Filter拦截</p>
<p>Filter 执行放行前逻辑</p>
</li>
<li>
<p>判断是否放行</p>
<ul>
<li>
<p>放行：</p>
<p>可能会执行以下操作：</p>
<ul>
<li>如果有，则执行后续的Filter</li>
<li>如果资源没有被后续其它Filter拦截，那么访问对应资源</li>
</ul>
</li>
<li>
<p>不放行：</p>
<p>后续的其它 Filter 将不会被执行，资源也不可被访问</p>
</li>
</ul>
</li>
<li>
<p>Filter 执行放行后逻辑</p>
</li>
</ul>
<hr>
<h1 id="filter-拦截路径配置" data-numberify>Filter 拦截路径配置<a class="anchor ms-1" href="#filter-拦截路径配置"></a></h1>
<p>拦截路径表示 Filter 会对请求的哪些资源进行拦截，使用 <code>@WebFilter</code> 注解进行配置。</p>
<p>拦截路径有如下四种配置方式：</p>
<ol>
<li>拦截具体的资源：<code>/index.html</code>，只有访问<code>index.html</code>时才会被拦截</li>
<li>目录拦截：<code>/user/*</code>，访问<code>/user</code>下的所有资源，都会被拦截</li>
<li>后缀名拦截：<code>*.html</code>，访问后缀名为jsp的资源，都会被拦截</li>
<li>拦截所有：<code>/*</code>，访问项目下所有资源，都会被拦截</li>
</ol>
<hr>
<h1 id="过滤器链" data-numberify>过滤器链<a class="anchor ms-1" href="#过滤器链"></a></h1>
<p>过滤器链是指在一个Web应用，可以对同个拦截路径配置多个过滤器，这多个过滤器组成了过滤器链。</p>
<p>过滤器链基于函数回调，多个过滤器之间的优先级顺序以过滤器类名的自然顺序（A-Z 0-9）为规则进行排序。</p>
<p>例如，有<code>Filter1</code>和<code>Filter2</code>两个拦截路径相同的Filter：</p>
<ol>
<li>执行 <code>Filter1</code> 的放行前逻辑代码</li>
<li>执行 <code>Filter1</code> 的放行代码</li>
<li>执行 <code>Filter2</code> 的放行前逻辑代码</li>
<li>执行 <code>Filter2</code> 的放行代码</li>
<li>访问到资源</li>
<li>执行 <code>Filter2</code> 的放行后逻辑代码</li>
<li>执行 <code>Filter1</code> 的放行后逻辑代码</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>会话跟踪技术 Cookie 和 Session</title>
      <link>/docs/spring/java-web/cookie-session/</link>
      <pubDate>Fri, 23 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/cookie-session/</guid>
      <description><![CDATA[会话跟踪技术 会话是指一个终端用户与交互系统进行通讯的过程，例如从浏览器发出请求到服务端响应数据给前端这个过程即为一个会话。 会话跟踪指的是一种]]></description>
      <content:encoded><![CDATA[<h1 id="会话跟踪技术" data-numberify>会话跟踪技术<a class="anchor ms-1" href="#会话跟踪技术"></a></h1>
<p>会话是指一个终端用户与交互系统进行通讯的过程，例如从浏览器发出请求到服务端响应数据给前端这个过程即为一个会话。</p>
<p>会话跟踪指的是一种维护浏览器状态的方法。服务器会收到多个请求，这多个请求可能来自多个浏览器。服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。</p>
<p>浏览器和服务器不支持数据共享的原因：</p>
<ul>
<li>HTTP协议是无状态的，每次浏览器向服务器请求时，服务器都会将该请求视为新的请求。</li>
<li>HTTP协议设计成无状态的目的是让每次请求之间相互独立，互不影响。</li>
<li>请求与请求之间独立后，就无法实现多次请求之间的数据共享。</li>
</ul>
<p>实现会话跟踪技术的方式有：</p>
<ul>
<li>客户端会话跟踪技术：<code>Cookie</code>。
Cookie是存储在浏览器端。</li>
<li>服务端会话跟踪技术：<code>Session</code>。
Session是存储在服务器端。</li>
</ul>
<hr>
<h1 id="cookie" data-numberify>Cookie<a class="anchor ms-1" href="#cookie"></a></h1>
<p>Cookie是一种客户端会话技术，将数据保存到客户端，在以后的每次请求中都携带Cookie数据进行访问。</p>
<p>服务器将Cookie发送给浏览器，是通过在响应头中添加<code>Set-Cookie</code>键值对实现的，如<code>Set-Cookie: message=&quot;Hello Wrold&quot;</code>。在多个Cookie之间使用<code>;</code>分割。</p>
<p>浏览器在接收了服务器发送来的Cookie后，会将数据存储在浏览器的内存中。在接下来的每次请求中，浏览器都会将获取到的Cookie发送到服务器（同一次会话中或在Cookie存活时间内）。浏览器将Cookie发送到服务器，是通过在请求头中设置<code>Cookie</code>键值对实现的，如<code>Cookie: message=&quot;Hello Wrold&quot;</code>。同样的，在多个Cookie之间使用<code>;</code>分割。</p>
<ul>
<li>
<p>创建Cookie对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cookie</span><span class="o">(</span><span class="s">&#34;key&#34;</span><span class="o">,</span><span class="s">&#34;value&#34;</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>发送Cookie到客户端（使用Response对象）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>从客户端获取Cookie（使用Request对象）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">request</span><span class="o">.</span><span class="na">getCookies</span><span class="o">()</span>
</span></span></code></pre></div></li>
</ul>
<p><a href="https://linna-cy.github.io/Tomcat/#%E5%88%9B%E5%BB%BA-maven-web-%E9%A1%B9%E7%9B%AE" target="_blank" rel="noopener noreferrer">创建Maven web项目。<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<p>项目依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--servlet--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>3.1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;pluginManagement&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.maven<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>tomcat7-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/pluginManagement&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><h2 id="发送-cookie" data-numberify>发送 Cookie<a class="anchor ms-1" href="#发送-cookie"></a></h2>
<p>发送Cookie使用的是HttpServletResponse对象提供的<code>addCookie()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.cookie</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URLEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/cookieServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CookieServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 创建Cookie对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;Hello World&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;存储数据: &#34;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cookie</span><span class="o">(</span><span class="s">&#34;message&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置存活时间, 7天
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">cookie</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">7</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 发送Cookie, response
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在发送Cookie时，可以使用<code>setMaxAge()</code>方法设置Cookie存活的时间（单位：秒）。</p>
<p>如果要在Cookie中存储中文数据，需要将中文数据使用<code>URLEncoder.encode()</code>按照UTF-8（与前端页面的编码保持一致）编码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.cookie</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URLEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/cookieServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CookieServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 创建Cookie对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 存储中文
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;你好&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// URL编码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">value</span> <span class="o">=</span> <span class="n">URLEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// System.out.println(&#34;存储数据: &#34; + value);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cookie</span><span class="o">(</span><span class="s">&#34;message&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置存活时间, 7天
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">cookie</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">7</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 发送Cookie, response
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="获取-cookie" data-numberify>获取 Cookie<a class="anchor ms-1" href="#获取-cookie"></a></h2>
<p>从客户端获取Cookie使用的是HttpServletRequest对象提供的<code>getCookies()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">request</span><span class="o">.</span><span class="na">getCookies</span><span class="o">()</span>
</span></span></code></pre></div><p>它返回一个Cookie数组（Cookie[]）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.cookie</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.Cookie</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URLDecoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/cookieServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CookieServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取Cookie数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Cookie</span><span class="o">[]</span> <span class="n">cookies</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getCookies</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 遍历数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">:</span> <span class="n">cookies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 3. 获取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">cookie</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="s">&#34;message&#34;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">cookie</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// URL解码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">value</span> <span class="o">=</span> <span class="n">URLDecoder</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&#34;:&#34;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Cookie对象提供的<code>getName()</code>和<code>getValue()</code>可以分别获取Cookie的名称和值。</p>
<blockquote>
<p>获取Cookie后应该使用<code>URLDecoder.decode</code>进行解码，这样确保Cookie里出现中文数据时不会乱码。</p>
</blockquote>
<h2 id="cookie-常用方法" data-numberify>Cookie 常用方法<a class="anchor ms-1" href="#cookie-常用方法"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Cookie[] getCookies()</code></td>
<td style="text-align:center"><code>HttpServletRequest</code>提供的获取客户端Cookie的方法</td>
</tr>
<tr>
<td style="text-align:center"><code>void addCookie(Cookie cookie)</code></td>
<td style="text-align:center"><code>HttpServletResponse</code>提供的，将Cookie发送到客户端的方法</td>
</tr>
<tr>
<td style="text-align:center"><code>Cookie(String name, String value)</code></td>
<td style="text-align:center"><code>Cookie</code>类的构造函数，用于创建Cookie，需要指定名称<code>name</code>和值<code>value</code></td>
</tr>
<tr>
<td style="text-align:center"><code>void setMaxAge(int expiry)</code></td>
<td style="text-align:center">设置Cookie过期的时间（单位：秒）。值为<code>-1</code>（默认情况下）或其它负数，Cookie只会在当前Session会话中持续有效。值为<code>0</code>表示删除对应Cookie</td>
</tr>
<tr>
<td style="text-align:center"><code>int getMaxAge()</code></td>
<td style="text-align:center">返回Cookie的最大生存周期（单位：秒）。默认情况下（不设置过期时间），<code>-1</code> 表示 Cookie 将持续到浏览器关闭。</td>
</tr>
<tr>
<td style="text-align:center"><code>String getName()</code></td>
<td style="text-align:center">返回Cookie的名称（名称在创建后不能改变）</td>
</tr>
<tr>
<td style="text-align:center"><code>void setValue(String newValue)</code></td>
<td style="text-align:center">设置与Cookie关联的值</td>
</tr>
<tr>
<td style="text-align:center"><code>String getValue()</code></td>
<td style="text-align:center">获取与Cookie关联的值</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="session" data-numberify>Session<a class="anchor ms-1" href="#session"></a></h1>
<p>Session是一种服务端会话跟踪技术，其数据保存在服务端。Session因为是存储在服务端所以比起Cookie，Session要更加安全。但与之相对的，Session不适合长期保存数据。</p>
<p>Session是基于Cookie实现的。Session要想实现一次会话多次请求之间的数据共享，就必须要保证多次请求获取Session的对象是同一个。在第一次获取Session对象时，Session对象会有一个唯一的标识，如<code>id:123</code>。Tomcat服务器发现业务处理中使用了Session对象，就会把Session的唯一标识<code>id:123</code>当做一个Cookie，添加<code>Set-Cookie:JESSIONID=123</code>到响应头中，并响应给浏览器。所以，浏览器通过Cookie告诉服务器Session的<code>id</code>，服务器也通过Cookie获取相应的Session，从而实现一次会话多次请求之间的数据共享。</p>
<p>JavaEE中提供了HttpSession接口，来实现一次会话的多次请求之间数据共享功能：</p>
<ul>
<li>
<p>获取Session对象（使用Request对象）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">HttpSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
</span></span></code></pre></div></li>
<li>
<p>Session对象提供的功能:</p>
<ul>
<li>
<p>存储数据到 session 域中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">setAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">o</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>根据 key，获取值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="nf">getAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>根据 key，删除该键值对：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">removeAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<h2 id="存储数据" data-numberify>存储数据<a class="anchor ms-1" href="#存储数据"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.session</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/sessionServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SessionServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 存储数据到Session中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 1. 获取Session对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">HttpSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 存储数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;message&#34;</span><span class="o">,</span> <span class="s">&#34;Hello World!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>由于Session中的数据是存储在服务器，所以在Session中存储和读取中文数据不需要进行编码和解码。</p>
</blockquote>
<h2 id="获取数据" data-numberify>获取数据<a class="anchor ms-1" href="#获取数据"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">web.session</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/sessionServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SessionServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 从Session中获取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 1. 获取Session对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">HttpSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Object</span> <span class="n">message</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;message&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="session-的钝化与活化" data-numberify>Session 的钝化与活化<a class="anchor ms-1" href="#session-的钝化与活化"></a></h2>
<p>正常来说，Session是存储在内存中的，只要服务器关闭，那么所有会话的Session都会失效。但是Tomcat在正常关闭的情况下，Session并不会失效，这是因为Session的<strong>钝化</strong>：在服务器正常关闭后，Tomcat会<u>自动将Session数据写入硬盘的文件</u>中。钝化的数据路径为：<code>项目目录\target\tomcat\work\Tomcat\localhost\项目名称\SESSIONS.ser</code>。</p>
<p>再次启动服务器后，从文件中加载数据到Session中，这就是Session的<strong>活化</strong>。而数据加载到Session中后，路径中的<code>SESSIONS.ser</code>文件会被删除掉。</p>
<p>所以说只要浏览器中记录<code>SessionID</code>的Cookie还存在，那么这个对应的Session也就存在，并且唯一。</p>
<p>而Cookie的存在是与浏览器的关闭密切相关的。在无人为销毁Cookie和没有为Cookie设置存活时间的情况下，当浏览器关闭时，其记录的Cookie也会自动销毁。所以当浏览器关闭时，对应的Session可能会消失。</p>
<h2 id="session-的销毁" data-numberify>Session 的销毁<a class="anchor ms-1" href="#session-的销毁"></a></h2>
<p>默认情况下，无操作，30分钟后自动销毁Session。对于这个失效时间，是可以通过在项目的<code>web.xml</code>中配置进行修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;web-app</span> <span class="na">xmlns=</span><span class="s">&#34;http://xmlns.jcp.org/xml/ns/javaee&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">version=</span><span class="s">&#34;3.1&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;session-config&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;session-timeout&gt;</span>100<span class="nt">&lt;/session-timeout&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/session-config&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/web-app&gt;</span>
</span></span></code></pre></div><p>如果没有配置，默认是30分钟，默认值是在Tomcat的<code>web.xml</code>配置文件中写死的。通过在Tomcat的<code>web.xml</code>中搜索<code>&lt;session-timeout&gt;</code>即可找到对应设置。</p>
<p>也可以通过调用<code>HTTPSession</code>的<code>invalidate()</code>方法进行手动销毁。</p>
<h2 id="session-常用方法" data-numberify>Session 常用方法<a class="anchor ms-1" href="#session-常用方法"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>HttpSession getSession()</code></td>
<td style="text-align:center"><code>HttpServletRequest</code>提供的方法，用于获取当前会话的<code>HttpSession</code>对象</td>
</tr>
<tr>
<td style="text-align:center"><code>Object getAttribute(String name)</code></td>
<td style="text-align:center">返回在该 session 会话中具有指定名称（<code>name</code>）的对象；如果没有指定名称的对象，则返回 <code>null</code></td>
</tr>
<tr>
<td style="text-align:center"><code>void setAttribute(String name, Object value)</code></td>
<td style="text-align:center">使用指定的名称绑定一个对象到该 session 会话</td>
</tr>
<tr>
<td style="text-align:center"><code>void removeAttribute(String name)</code></td>
<td style="text-align:center">将从该 session 会话移除指定名称的对象</td>
</tr>
<tr>
<td style="text-align:center"><code>Enumeration getAttributeNames()</code></td>
<td style="text-align:center">返回 String 对象的枚举，String 对象包含所有绑定到该 session 会话的对象的名称</td>
</tr>
<tr>
<td style="text-align:center"><code>String getId()</code></td>
<td style="text-align:center">返回一个包含分配给该 session 会话的唯一标识符的字符串</td>
</tr>
<tr>
<td style="text-align:center"><code>void invalidate()</code></td>
<td style="text-align:center">销毁当前Session对象。该方法指示该 session 会话无效，并解除绑定到它上面的任何对象</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="cookie-和-session" data-numberify>Cookie 和 Session<a class="anchor ms-1" href="#cookie-和-session"></a></h1>
<p>Cookie 和 Session 的区别：</p>
<ul>
<li>存储位置：Cookie 是将数据存储在客户端，Session 将数据存储在服务端。</li>
<li>安全性：Cookie不安全，Session安全。</li>
<li>数据大小：Cookie最大3KB，Session无大小限制。</li>
<li>存储时间：Cookie可以通过setMaxAge()长期存储，Session默认30分钟。</li>
<li>服务器性能：Cookie不占服务器资源，Session占用服务器资源。</li>
</ul>
<p>Session是基于Cookie实现的。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>HttpServlet 与 Tomcat</title>
      <link>/docs/spring/java-web/http-servlet/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/http-servlet/</guid>
      <description><![CDATA[HttpServlet 简介 HttpServlet是对HTTP协议封装的Servlet实现类。 Servlet的体系结构： 在开发中，关注更多的是Servlet.se]]></description>
      <content:encoded><![CDATA[<h1 id="httpservlet-简介" data-numberify>HttpServlet 简介<a class="anchor ms-1" href="#httpservlet-简介"></a></h1>
<p>HttpServlet是对HTTP协议封装的Servlet实现类。</p>
<p>Servlet的体系结构：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/http-servlet/1627240593506.png" loading="lazy" width="970" height="294" />
</picture>

</p>
<p>在开发中，关注更多的是<code>Servlet.service()</code>方法。而每实现一个Servlet就必须实现Servlet接口，重写接口中的5个方法。</p>
<p>但其实可以通过继承HttpServlet来编写Servlet，简化Servlet的开发流程。并且，如果是开发B/S架构的Web项目，针对的都是HTTP协议。</p>
<p>使用HttpServlet的格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 需要复写以下两个方法:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Get...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Post...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p>启动Tomcat，使用浏览器访问<a href="http://localhost:8080/web-demo/demo" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/demo<i class="fas fa-external-link-square-alt ms-1"></i></a>可以在控制台看到<code>doGet()</code>方法被执行。</p>
</li>
<li>
<p>在项目的<code>webapp</code>目录下新建<code>index.html</code>，写入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>TestPost<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/web-demo/demo&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;username&#34;</span><span class="p">/&gt;&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>启动Tomcat，访问<a href="http://localhost:8080/web-demo/" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/<i class="fas fa-external-link-square-alt ms-1"></i></a>，在表单输入内容后提交。即可在控制台看到<code>doPost()</code>被执行。</p>
</li>
</ul>
<h2 id="使用servlet实现httpservlet" data-numberify>使用Servlet实现HttpServlet<a class="anchor ms-1" href="#使用servlet实现httpservlet"></a></h2>
<p>既然HttpServlet继承自Servlet，那么也可以通过编写Servlet类来实现HttpServlet：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyHttpServlet</span> <span class="kd">implements</span> <span class="n">Servlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">servletConfig</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ServletConfig</span> <span class="nf">getServletConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">servletResponse</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 根据请求方式的不同,分别进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">HttpServletRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpServletRequest</span><span class="o">)</span> <span class="n">servletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取请求方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 判断
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="s">&#34;GET&#34;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// GET 方式的处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">doGet</span><span class="o">(</span><span class="n">servletRequest</span><span class="o">,</span> <span class="n">servletResponse</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="s">&#34;POST&#34;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// POST 方式的处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">doPost</span><span class="o">(</span><span class="n">servletRequest</span><span class="o">,</span> <span class="n">servletResponse</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">servletResponse</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">servletResponse</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getServletInfo</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>翻阅<code>HttpServlet.service()</code>方法源码，可以发现HttpServlet不仅仅可以对GET和POST进行处理，还能处理其它五种请求：<code>doHead()</code>、<code>doPut()</code>、<code>doDelete()</code>、<code>doOptions()</code>和<code>doTrace()</code>。</p>
</blockquote>
<hr>
<h1 id="httpservletrequest-和-httpservletresponse" data-numberify>HttpServletRequest 和 HttpServletResponse<a class="anchor ms-1" href="#httpservletrequest-和-httpservletresponse"></a></h1>
<h2 id="request-和-response-概述" data-numberify>Request 和 Response 概述<a class="anchor ms-1" href="#request-和-response-概述"></a></h2>
<p><code>Request</code>是请求对象，<code>Response</code>是响应对象。在Servlet中也存在这样的两个对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletDemo</span> <span class="kd">implements</span> <span class="n">Servlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">servletResponse</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ......
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Request</code>作用：获取请求数据</p>
<ul>
<li>
<p>浏览器会发送HTTP请求到后台服务器（如，Tomcat）</p>
</li>
<li>
<p>HTTP的请求中会包含很多请求数据</p>
<p>如，HTTP协议请求：</p>
<ul>
<li>请求行</li>
<li>请求头</li>
<li>请求体</li>
</ul>
</li>
<li>
<p>后台服务器会对HTTP请求中的数据进行解析并把解析结果存入到一个对象中</p>
<p>所存入的对象即为<code>Request</code>对象，所以我们可以从<code>Request</code>对象中获取请求的相关参数</p>
</li>
<li>
<p>获取到数据后就可以继续后续的业务</p>
<p>如，获取用户名和密码就可以实现登录操作的相关业务</p>
</li>
</ul>
<p><code>Response</code>作用：设置响应数据</p>
<ul>
<li>业务处理完后，后台就需要给前端返回业务处理的结果（即，响应数据）</li>
<li>把响应数据封装到<code>Response</code>对象中</li>
<li>后台服务器会解析<code>Response</code>对象，按照格式（响应行+响应头+响应体）拼接结果</li>
<li>浏览器最终解析结果，把内容展示在浏览器给用户浏览</li>
</ul>
<p>而HttpServlet使用的 <code>Request</code> 和 <code>Response</code> 对象与Servlet有所不同。HttpServlet使用的是 <code>HttpServletRequest</code> 和 <code>HttpServletResponse</code>。</p>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpServletDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 使用request对象 获取请求数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">        <span class="c1">// Parameter在地址中以 ? 开始：url?name=zhangsan
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 使用response对象 设置响应数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">&#34;content-type&#34;</span><span class="o">,</span><span class="s">&#34;text/html;charset=utf-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="s">&#34;&lt;h1&gt;&#34;</span><span class="o">+</span><span class="n">name</span><span class="o">+</span><span class="s">&#34;,欢迎您！&lt;/h1&gt;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="request-和-response-继承体系" data-numberify>Request 和 Response 继承体系<a class="anchor ms-1" href="#request-和-response-继承体系"></a></h2>
<p><code>HttpServletRequest</code>和<code>ServletRequest</code>之间是继承关系，<code>HttpServletResponse</code>和<code>ServletResponse</code>是继承关系。</p>
<p><code>Request</code>之间的继承关系如下：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/http-servlet/1628740441008.png" loading="lazy" width="1183" height="398" />
</picture>

</p>
<p><code>Response</code>之间的继承关系如下：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/http-servlet/1628857761317.png" loading="lazy" width="831" height="263" />
</picture>

</p>
<hr>
<h1 id="httpservletrequest" data-numberify>HttpServletRequest<a class="anchor ms-1" href="#httpservletrequest"></a></h1>
<p>HTTP常用的请求方式为：</p>
<ul>
<li>GET</li>
<li>POST</li>
</ul>
<p>HTTP请求数据总共分为三部分内容：</p>
<ul>
<li>请求行</li>
<li>请求头</li>
<li>请求体</li>
</ul>
<p>在请求数据中，还包含着请求参数：</p>
<ul>
<li>对于GET：请求参数包含在请求头中。</li>
<li>对于POST：请求参数一般包含在请求体中。</li>
</ul>
<h2 id="获取请求行数据" data-numberify>获取请求行数据<a class="anchor ms-1" href="#获取请求行数据"></a></h2>
<p>如打开以下链接：</p>
<pre tabindex="0"><code>http://localhost:8080/HttpServlet/httpservlet.html?username=linner
</code></pre><p>其请求行大致内容如下：</p>
<pre tabindex="0"><code>GET /HttpServlet/httpservlet.html?username=linner HTTP/1.1
</code></pre><p>包含以下三部分内容：</p>
<ul>
<li>
<p><strong>请求方式</strong>：<code>GET</code></p>
</li>
<li>
<p><strong>请求资源路径</strong>：<code>/HttpServlet/httpservlet.html?username=linner</code></p>
<p>请求资源路径包含：</p>
<ul>
<li>虚拟目录（项目访问路径）：<code>/HttpServlet</code></li>
<li>URI（统一资源标识符）：<code>/HttpServlet/httpservlet.html</code></li>
<li>请求参数：<code>username=linner</code></li>
</ul>
</li>
<li>
<p><strong>HTTP协议及版本</strong>：<code>HTTP/1.1</code></p>
</li>
</ul>
<p>这三部分内容，<code>HttpServletRequest</code>对象都提供了对应的API方法来获取：</p>
<ul>
<li>
<p>获取请求方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="nf">getMethod</span><span class="o">()</span>
</span></span></code></pre></div><p>返回：<code>GET</code></p>
</li>
<li>
<p>获取虚拟目录（项目访问路径）:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="nf">getContextPath</span><span class="o">()</span>
</span></span></code></pre></div><p>返回：<code>/HttpServlet</code></p>
</li>
<li>
<p>获取URL（统一资源定位符）:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">StringBuffer</span> <span class="nf">getRequestURL</span><span class="o">()</span>
</span></span></code></pre></div><p>返回：<code>http://localhost:8080/HttpServlet/httpservlet.htm</code></p>
</li>
<li>
<p>获取URI（统一资源标识符）:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="nf">getRequestURI</span><span class="o">()</span>
</span></span></code></pre></div><p>返回：<code>/HttpServlet/httpservlet.html</code></p>
</li>
<li>
<p>获取请求参数（GET方式）:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="nf">getQueryString</span><span class="o">()</span>
</span></span></code></pre></div><p>返回：<code>username=linner</code>（多个参数也一并返回）</p>
</li>
</ul>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestHttpServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;---------------------------------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;请求行：&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;请求方式：&#34;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;虚拟目录：&#34;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getContextPath</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;URL：&#34;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;URI：&#34;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;请求参数：&#34;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;---------------------------------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="获取请求头数据" data-numberify>获取请求头数据<a class="anchor ms-1" href="#获取请求头数据"></a></h2>
<p>请求头数据由多个 <code>key: value</code> 组成，如客户端浏览器的版本信息：</p>
<pre tabindex="0"><code>User-Agent: Mozila/5.0 Chrome/105.0.0.0 Edg/105.0.1343.42
</code></pre><p><code>HttpServletRequest</code> 获取请求头的方法为：</p>
<pre tabindex="0"><code>String getHeader(String name)
</code></pre><ul>
<li><code>name</code>：是请求头中的<code>key</code>。</li>
<li>返回值：返回<code>name</code>对应<code>key</code>的<code>value</code>。</li>
</ul>
<p>使用<code>getHeader()</code>获取客户端浏览器的版本信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web.request</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo7</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">agent</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">&#34;user-agent&#34;</span><span class="o">);</span> <span class="c1">// name 不区分大小写
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">agent</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>输出：</p>
<pre tabindex="0"><code>Mozila/5.0 Chrome/105.0.0.0 Edg/105.0.1343.42
</code></pre><h2 id="获取请求体数据" data-numberify>获取请求体数据<a class="anchor ms-1" href="#获取请求体数据"></a></h2>
<p>浏览器发送的GET请求，是没有请求体的。只有在发送POST请求时才带有请求体。</p>
<p>请求体中的数据格式如：</p>
<pre tabindex="0"><code>username=linner&amp;password=123456
</code></pre><p>与资源路径中，请求参数的格式一样。</p>
<p><code>HttpServletRequest</code>提供了两种方式来获取请求体中的数据：</p>
<ul>
<li>
<p>获取字节输入流：</p>
<p>当前端发送的是字节数据，如传递的是文件数据时使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ServletInputStream</span> <span class="nf">getInputStream</span><span class="o">()</span>
</span></span></code></pre></div></li>
<li>
<p>获取字符输入流：</p>
<p>当前端发送的是纯文本数据时使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">BufferedReader</span> <span class="nf">getReader</span><span class="o">()</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>如果要在客户端浏览器发送POST请求，需要编写一个<code>&lt;form&gt;</code>表单。</p>
</blockquote>
<p>Example：</p>
<ol>
<li>
<p>在项目的<code>webapp</code>目录下添加<code>index.html</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">        action: 表单提交的请求地址
</span></span></span><span class="line"><span class="cl"><span class="c">        method: 请求方式，指定为post
</span></span></span><span class="line"><span class="cl"><span class="c">    --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/request-demo/test&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;username&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;password&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>doPost</code>方法中获取数据：</p>
<blockquote>
<p>由于<code>index.html</code>提交的是纯文本数据，所以要使用<code>getReader()</code>方法获取。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web.request</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo8</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取字符输入流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getReader</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 读取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><code>BufferedReader</code>流是通过<code>HttpServletRequest</code>对象来获取的，当请求完成后<code>HttpServletRequest</code>对象就会被销毁，<code>HttpServletRequest</code>对象被销毁后，<code>BufferedReader</code>流就会自动关闭，所以就不需要手动关闭流了。
<code>getReader()</code>获取请求参数后，还需要使用<code>readLine()</code>读取参数数据。</p>
</blockquote>
</li>
<li>
<p>通过浏览器访问：<a href="http://localhost:8080/request-demo/" target="_blank" rel="noopener noreferrer">http://localhost:8080/request-demo/<i class="fas fa-external-link-square-alt ms-1"></i></a>。在表单中输入内容，然后提交，就可以在控制台看到前端所发送的请求数据：</p>
<pre tabindex="0"><code>username=linner&amp;password=123456
</code></pre></li>
</ol>
<h2 id="获取请求参数" data-numberify>获取请求参数<a class="anchor ms-1" href="#获取请求参数"></a></h2>
<p>使用<code>getQueryString()</code>方法和<code>getReader()</code>分别获取GET和POST的请求参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getReader</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>上述代码存在的问题：</p>
<ul>
<li>
<p><code>doGet()</code>和<code>doPost</code>中出现了重复代码。</p>
<p>在实际业务中，可能会出现很多相同的业务代码。</p>
</li>
<li>
<p><code>doGet()</code>和<code>doPost</code>都必须存在。</p>
</li>
<li>
<p>GET请求和POST请求获取请求参数的方式不一样。</p>
</li>
</ul>
<ol>
<li>
<p>在<code>doPost()</code>中调用<code>doGet()</code>，然后在<code>doGet()</code>判断请求的方式，并分别做处理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取请求方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取请求参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">params</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="o">(</span><span class="s">&#34;GET&#34;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">)){</span>
</span></span><span class="line"><span class="cl">            <span class="n">params</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="s">&#34;POST&#34;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">)){</span>
</span></span><span class="line"><span class="cl">            <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getReader</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">params</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 处理请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">params</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span><span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>HttpServletRequest</code>已经对获取请求参数的方式进行了封装：</p>
<ul>
<li>
<p>获取所有参数Map集合</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">[]&gt;</span> <span class="nf">getParameterMap</span><span class="o">()</span>
</span></span></code></pre></div></li>
<li>
<p>根据名称获取参数值（返回值为数组，返回多个参数）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span><span class="o">[]</span> <span class="nf">getParameterValues</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>根据名称获取参数值（单个值）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="nf">getParameter</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ul>
<p>同样是在<code>doPost()</code>中调用<code>doGet()</code>，然后在<code>doGet()</code>处理参数，但是在获取参数时不用对请求方式进行判断。</p>
<p>Example：</p>
<ol>
<li>
<p><code>webapp/index.html</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    test:get
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/request-demo/test&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;get&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;username&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;password&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;hobby&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;1&#34;</span><span class="p">&gt;</span> get-1
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;hobby&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;2&#34;</span><span class="p">&gt;</span> get-2 <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    test:post
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/request-demo/test&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;username&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;password&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;hobby&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;1&#34;</span><span class="p">&gt;</span> post-1
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;hobby&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;2&#34;</span><span class="p">&gt;</span> post-2 <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>使用<code>getParameterValues()</code>和<code>getParameter()</code>获取请求参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo1</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;---------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 验证请求的方式：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取多个 value：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&#34;hobby: &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span><span class="o">[]</span> <span class="n">hobbies</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameterValues</span><span class="o">(</span><span class="s">&#34;hobby&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">hobby</span> <span class="o">:</span> <span class="n">hobbies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">hobby</span> <span class="o">+</span> <span class="s">&#34;, &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;\b\b  &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取单个 value：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;username: &#34;</span> <span class="o">+</span> <span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;password: &#34;</span> <span class="o">+</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>使用<code>getParameterMap()</code>一次性获取所有参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;-------------------------------------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 验证请求的方式：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取所有参数的Map集合
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">[]&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameterMap</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">key</span> <span class="o">+</span> <span class="s">&#34;:&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取key对应的所有values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">String</span><span class="o">[]</span> <span class="n">values</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">value</span> <span class="o">:</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">value</span> <span class="o">+</span> <span class="s">&#34;, &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;\b\b  &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
</li>
</ol>
<h2 id="请求转发" data-numberify>请求转发<a class="anchor ms-1" href="#请求转发"></a></h2>
<p>请求转发（forward）是一种在服务器内部的资源跳转方式。如：</p>
<ol>
<li>服务器内资源A获取请求。</li>
<li>资源A（处理一部分数据后）将请求转发给资源B去处理。</li>
<li>资源B处理完成后将将结果响应给浏览器。</li>
</ol>
<p>请求从资源A到资源B的过程即为请求转发。</p>
<p>请求转发的特点：</p>
<ul>
<li>浏览器地址栏路径不变。</li>
<li>只能转发到当前服务器的内部资源。</li>
<li>一次请求，可以在转发的资源间使用request共享数据。</li>
</ul>
<p>使用<code>request.getRequestDispatcher(&quot;/path&quot;).forward(request, response)</code>进行请求转发：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo1</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;demo1...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 存储数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;msg&#34;</span><span class="o">,</span> <span class="s">&#34;Hello&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 请求转发（资源转发到demo2）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="s">&#34;/demo2&#34;</span><span class="o">).</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo2&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo2</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;demo2...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Object</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;msg&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>通过<a href="http://localhost:8080/request-demo/demo1" target="_blank" rel="noopener noreferrer">http://localhost:8080/request-demo/demo1<i class="fas fa-external-link-square-alt ms-1"></i></a>访问。</p>
<blockquote>
<p>由于请求转发是在服务器内部的资源转发，所以<code>getRequestDispatcher()</code>中的路径不需要包含虚拟目录。</p>
</blockquote>
<p>请求转发使用<code>HttpServletRequest</code>（<code>Request</code>）对象进行资源的传递。这个用来存储资源的空间被称为Request域。</p>
<p><code>HttpServletRequest</code>对象提供了对于Request中的域属性操作的方法有：</p>
<ol>
<li>
<p>在 Request 域属性空间中放入数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">setAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">object</span><span class="o">)</span>
</span></span></code></pre></div><p>其生命周期与 Request 的生命周期相同。</p>
</li>
<li>
<p>从 Request 的域属性空间中获取指定名称的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="nf">getAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>从 Request 的域属性空间中删除指定名称的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">removeAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>创建请求转发器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">RequestDispatcher</span> <span class="nf">getRequestDispatcher</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">)</span>
</span></span></code></pre></div><p>请求转发器中有一个方法，用于完成将请求对象转发给下一个资源：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">forward</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="tomcat7-请求参数中文乱码问题" data-numberify>Tomcat7 请求参数中文乱码问题<a class="anchor ms-1" href="#tomcat7-请求参数中文乱码问题"></a></h2>
<blockquote>
<p>Tomcat8.0 之后，已经将默认编码设置为UTF-8。</p>
</blockquote>
<p>POST请求参数是通过流的方式获取数据：</p>
<ul>
<li>Tomcat在获取流的时候采用的编码是<code>ISO-8859-1</code>。</li>
<li>页面设置的编码格式一般为<code>UTF-8</code>。</li>
<li><code>ISO-8859-1</code>编码是不支持中文的，所以会出现乱码。</li>
</ul>
<p>解决方案：通过<code>HttpServletRequest</code>提供的<code>setCharacterEncoding()</code>，在Tomcat在获取流数据之前的编码设置为UTF-8。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URLDecoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo4Copy</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 设置字符输入流的编码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">request</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取请求参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getReader</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// getReader()获取的是编码后的URL，如果要显示中文，需要对URL按照UTF-8进行解码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">decode</span> <span class="o">=</span> <span class="n">URLDecoder</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;解决乱码后: &#34;</span> <span class="o">+</span> <span class="n">decode</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>GET请求参数包含在URL中：</p>
<blockquote>
<p><code>getQueryString()</code>获取的并不是字符输入流，所以<code>setCharacterEncoding()</code>并不适用。</p>
</blockquote>
<ul>
<li>
<p>浏览器在发送HTTP的过程中会根据页面<code>&lt;meta&gt;</code>标签指定的<code>charset</code>的方式（一般为UTF-8）对URL进行编码。
URL编码：</p>
<ol>
<li>将字符串按照编码方式转为二进制。</li>
<li>每个字节（8位）转为2个16进制数（一个16进制数代表4位）并在前边加上<code>%</code>。</li>
</ol>
</li>
<li>
<p>Tomcat在接收编码后的URL后，会默认按照<code>ISO-8859-1</code>进行URL解码。</p>
<p>可以使用以下两个函数可以模拟URL编码、解码的过程：</p>
<ol>
<li>
<p>编码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">URLEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">string</span><span class="o">,</span> <span class="n">charset</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>解码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">URLDecoder</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">string</span><span class="o">,</span> <span class="n">charset</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ol>
</li>
</ul>
<p>解决方案：</p>
<ol>
<li>把字符数据（URL编码）按照ISO-8859-1编码转换成字节。</li>
<li>字节按照浏览器对应的URL编码（UTF-8）转换成对应的字符。</li>
</ol>
<p>这样在转换的过程中保持编码一致，就可以解决中文乱码问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.net.URLDecoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo4Copy</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">qs</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 把字符数据（URL编码）按照ISO-8859-1编码转换成字节
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">qs</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">StandardCharsets</span><span class="o">.</span><span class="na">ISO_8859_1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 按照UTF-8编码转换成对应的字符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">bytes</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 转换后的字符是URL编码后的字符，需要再次解码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">qs</span> <span class="o">=</span> <span class="n">URLDecoder</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;解决乱码后: &#34;</span> <span class="o">+</span> <span class="n">qs</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>通用方式解决乱码问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestDemo4Copy</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取username
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 解决乱码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">username</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">username</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">StandardCharsets</span><span class="o">.</span><span class="na">ISO_8859_1</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">                            <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;解决乱码后: &#34;</span> <span class="o">+</span> <span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="httpservletresponse" data-numberify>HttpServletResponse<a class="anchor ms-1" href="#httpservletresponse"></a></h1>
<p>HTTP响应数据总共分为三部分内容，分别是：</p>
<ul>
<li>
<p>响应行</p>
<p>如，<code>HTTP/1.1 200 OK</code>，从左到右分别为：</p>
<ul>
<li>
<p>HTTP协议及版本</p>
</li>
<li>
<p>响应状态码
设置响应状态码，<code>HttpServletResponse</code>对象提供了以下方法设置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">setStatus</span><span class="o">(</span><span class="kt">int</span> <span class="n">sc</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>状态码描述</p>
</li>
</ul>
</li>
<li>
<p>响应头</p>
<p>由多个 <code>key: value</code> 组成。<code>HttpServletResponse</code>对象提供了以下方法设置键值对：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">setHeader</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">value</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>响应体</p>
<ul>
<li>
<p>获取字符输出流：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">PrintWriter</span> <span class="nf">getWriter</span><span class="o">()</span>
</span></span></code></pre></div></li>
<li>
<p>获取字节输出流：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ServletOutputStream</span> <span class="nf">getOutputStream</span><span class="o">()</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<h2 id="respones重定向" data-numberify>Respones重定向<a class="anchor ms-1" href="#respones重定向"></a></h2>
<p>Response重定向（redirect）是一种资源跳转方式。如：</p>
<ol>
<li>浏览器发送请求给服务器，服务器中对应的资源A接收到请求。</li>
<li>资源A现在无法处理该请求，就会给浏览器响应一个302的状态码和location（一个访问资源B的路径）。</li>
<li>浏览器接收到响应状态码为302就会重新发送请求到location对应的访问地址去访问资源B。</li>
</ol>
<p>重定向的特点:</p>
<ul>
<li>
<p>浏览器地址栏路径发送变化（由资源A的路径变化为资源B的路径）。</p>
<p>进行重定向访问时，由浏览器发送两次请求，所以地址发生了变化。</p>
</li>
<li>
<p>可以重定向到任意位置的资源（服务器内部、外部均可）。</p>
<p>资源由浏览器来访问，所以可以重定向到任意位置资源。</p>
</li>
<li>
<p>不能在多个资源使用Request重定向共享数据。</p>
<p>重定向是由浏览器来发送新的请求，每次请求中的Request对象都是不同的。</p>
</li>
</ul>
<p>重定向需要两个步骤：</p>
<ol>
<li>
<p>设置302状态码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="mi">302</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>设置响应头中，<code>location</code>的值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">&#34;location&#34;</span><span class="o">,</span> <span class="s">&#34;/path_b&#34;</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ol>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseDemo1</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;demo1...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 重定向
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 1. 设置相应状态码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="mi">302</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 设置相应头 Location (不区分大小写)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">&#34;Location&#34;</span><span class="o">,</span> <span class="s">&#34;/request-demo/demo2&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo2&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseDemo2</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;demo2...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>由于重定向是将重定向后的资源路径告知浏览器，所以<code>location</code>需要添加虚拟目录（如<code>/response-demo/demo2</code>）。
如果是重定向到服务器外部资源，<code>location</code>的值为外部资源的URL。</p>
</blockquote>
<p><code>HttpServletResponse</code>提供了<code>sendRedirect()</code>方法来简化重定向流程。修改<code>ResponseDemo1</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web.response</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/resp1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseDemo1</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;resp1...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 简化方式完成重定向
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 动态获取虚拟目录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">contextPath</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getContextPath</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">resp</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="n">contextPath</span> <span class="o">+</span> <span class="s">&#34;/resp2&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="响应字符数据" data-numberify>响应字符数据<a class="anchor ms-1" href="#响应字符数据"></a></h2>
<p>将字符数据写回到浏览器，需要：</p>
<ol>
<li>
<p>通过<code>HttpServletResponse</code>对象获取字符输出流：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">PrintWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">()</span>
</span></span></code></pre></div></li>
<li>
<p>通过字符输出流写数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&#34;你好&#34;</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ol>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置content-type（响应的数据格式）和字符集（编码）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&#34;text/html;charset=utf-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// content-type也可以使用setHeader()手动设置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// resp.setHeader(&#34;content-type&#34;, &#34;text/html&#34;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取字符输出流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PrintWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&#34;你好&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&#34;&lt;h1&gt;Hello World!&lt;/h1&gt;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><code>write()</code>不仅能写入文本数据，还能写入HTML数据。
<code>PrintWriter</code> 对象会在 <code>HttpServletRequest</code> 被销毁时一并销毁，无需手动关闭。</p>
</blockquote>
<h2 id="响应字节数据" data-numberify>响应字节数据<a class="anchor ms-1" href="#响应字节数据"></a></h2>
<p>将字节数据写回到浏览器，需要：</p>
<ol>
<li>
<p>通过<code>HttpServletResponse</code>对象获取字节输出流：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ServletOutputStream</span> <span class="n">os</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">()</span>
</span></span></code></pre></div></li>
<li>
<p>通过字节输出流写数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">os</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buff</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ol>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletOutputStream</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 读取文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;src/main/webapp/imgs/bg.jpg&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取response字节输出流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ServletOutputStream</span> <span class="n">os</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 完成流的copy
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">buff</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">((</span><span class="n">len</span> <span class="o">=</span> <span class="n">fis</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buff</span><span class="o">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">os</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buff</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>其中，流的copy可以使用<code>IOUtils</code>工具类的<code>copy()</code>来简化操作：</p>
<ul>
<li>
<p>导入配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>commons-io<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>commons-io<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>2.6<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>修改<code>ResponseDemo</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 1. 读取文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;src/main/webapp/imgs/reg_bg_min.jpg&#34;</span><span class="o">);</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 2. 获取response字节输出流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ServletOutputStream</span> <span class="n">os</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 3. 完成流的copy
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">IOUtils</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">fis</span><span class="o">,</span> <span class="n">os</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="总结" data-numberify>总结<a class="anchor ms-1" href="#总结"></a></h1>
<h2 id="httpservletrequest-常用方法" data-numberify>HttpServletRequest 常用方法<a class="anchor ms-1" href="#httpservletrequest-常用方法"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>String getMethod()</code></td>
<td style="text-align:center">获取请求方式</td>
</tr>
<tr>
<td style="text-align:center"><code>String getContextPath()</code></td>
<td style="text-align:center">获取虚拟目录（项目访问路径）</td>
</tr>
<tr>
<td style="text-align:center"><code>StringBuffer getRequestURL()</code></td>
<td style="text-align:center">获取URL（统一资源定位符）</td>
</tr>
<tr>
<td style="text-align:center"><code>String getRequestURI()</code></td>
<td style="text-align:center">获取URI（统一资源标识符）</td>
</tr>
<tr>
<td style="text-align:center"><code>String getQueryString()</code></td>
<td style="text-align:center">获取请求参数（GET方式）</td>
</tr>
<tr>
<td style="text-align:center"><code>String getHeader(String name)</code></td>
<td style="text-align:center">获取<code>name</code>指定<code>key</code>对应的请求头的<code>value</code></td>
</tr>
<tr>
<td style="text-align:center"><code>ServletInputStream getInputStream()</code></td>
<td style="text-align:center">获取请求体字节输入流（POST方式获取请求参数）</td>
</tr>
<tr>
<td style="text-align:center"><code>BufferedReader getReader()</code></td>
<td style="text-align:center">获取请求体字符输入流<br><code>getReader()</code>获取请求参数后，还需要使用<code>readLine()</code>读取参数数据<br>即，<br><code>BufferedReader br = request.getReader();</code><br><code>String line = br.readLine();</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Map&lt;String, String[]&gt; getParameterMap()</code></td>
<td style="text-align:center">获取所有请求参数Map集合</td>
</tr>
<tr>
<td style="text-align:center"><code>String[] getParameterValues(String name)</code></td>
<td style="text-align:center">根据名称获取请求参数值<br>返回值为数组<br>返回多个参数</td>
</tr>
<tr>
<td style="text-align:center"><code>String getParameter(String name)</code></td>
<td style="text-align:center">根据名称获取请求参数值<br>返回单个参数值</td>
</tr>
<tr>
<td style="text-align:center"><code>void setAttribute(String name, Object object)</code></td>
<td style="text-align:center">在 Request 域属性空间中放入数据</td>
</tr>
<tr>
<td style="text-align:center"><code>Object getAttribute(String name)</code></td>
<td style="text-align:center">从 Request 的域属性空间中获取指定名称的数据</td>
</tr>
<tr>
<td style="text-align:center"><code>void removeAttribute(String name)</code></td>
<td style="text-align:center">从 Request 的域属性空间中删除指定名称的数据</td>
</tr>
<tr>
<td style="text-align:center"><code>RequestDispatcher getRequestDispatcher(String path)</code></td>
<td style="text-align:center">创建请求转发器<br>请求转发器中有一个方法，用于完成将请求对象转发给下一个资源：<br><code>void forward(HttpServletRequest request, HttpServletResponse response)</code></td>
</tr>
<tr>
<td style="text-align:center"><code>void setCharacterEncoding(String charset)</code></td>
<td style="text-align:center">设置请求体字符输入流的编码</td>
</tr>
</tbody>
</table>
<h2 id="httpservletresponse-常用方法" data-numberify>HttpServletResponse 常用方法<a class="anchor ms-1" href="#httpservletresponse-常用方法"></a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>void setStatus(int sc)</code></td>
<td style="text-align:center">设置响应状态码</td>
</tr>
<tr>
<td style="text-align:center"><code>void setHeader(String name, String value)</code></td>
<td style="text-align:center">设置响应头键值对</td>
</tr>
<tr>
<td style="text-align:center"><code>PrintWriter getWriter()</code></td>
<td style="text-align:center">获取响应体字符输出流获取字符输出流后还需要使用<code>write()</code>方法来写入字符数据：<br><code>PrintWriter writer = response.getWriter();</code><br><code>writer.write(&quot;Hello World!&quot;);</code></td>
</tr>
<tr>
<td style="text-align:center"><code>ServletOutputStream getOutputStream()</code></td>
<td style="text-align:center">获取响应体字节输出流<br>获取字节输出流前需要先使用<code>FileInputStream</code>对象来读取文件<br>然后使用<code>IOUtils</code>工具类的<code>copy()</code>来copy流<br>获取字节输出流后还需要使用<code>write()</code>方法来写入字符数据<br><a href="/docs/spring/java-web/http-servlet/#%e5%93%8d%e5%ba%94%e5%ad%97%e8%8a%82%e6%95%b0%e6%8d%ae">响应字节数据</a></td>
</tr>
<tr>
<td style="text-align:center"><code>void sendRedirect(String path)</code></td>
<td style="text-align:center">Respones重定向</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    
    <item>
      <title>Servlet 与 Tomcat</title>
      <link>/docs/spring/java-web/servlet/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/servlet/</guid>
      <description><![CDATA[Servlet 简介 Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。 Servlet 基本使]]></description>
      <content:encoded><![CDATA[<h1 id="servlet-简介" data-numberify>Servlet 简介<a class="anchor ms-1" href="#servlet-简介"></a></h1>
<p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p>
<hr>
<h1 id="servlet-基本使用" data-numberify>Servlet 基本使用<a class="anchor ms-1" href="#servlet-基本使用"></a></h1>
<ol>
<li>
<p>创建Maven Web项目后，导入Servlet依赖坐标和Tomcat插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Servlet依赖 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>3.1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">   	<span class="c">&lt;!-- Tomcat插件 --&gt;</span>
</span></span><span class="line"><span class="cl">       <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">           <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.maven<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">           <span class="nt">&lt;artifactId&gt;</span>tomcat7-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">           <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">       <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><blockquote>
<p>使用<code>&lt;scope&gt;provided&lt;/scope&gt;</code>的原因：
<code>provided</code>指的是在编译和测试过程中有效，最后生成的<code>war</code>包时不会加入。
因为Tomcat的lib目录中已经有servlet-api这个jar包，如果在生成war包的时候生效就会和Tomcat中的jar包冲突，导致报错。</p>
</blockquote>
</li>
<li>
<p>创建Servlet类，实现Servlet接口，并重写接口中所有方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/demo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletDemo</span> <span class="kd">implements</span> <span class="n">Servlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">servletRequest</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">servletResponse</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello Servlet!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getServletInfo</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">servletConfig</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ServletConfig</span> <span class="nf">getServletConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>使用<code>@WebServlet</code>注解配置该Servlet的访问路径：<code>@WebServlet(&quot;/demo&quot;)</code></li>
</ul>
</li>
<li>
<p>启动Tomcat，根据自己项目和Tomcat的配置访问，如：<a href="http://localhost:8080/web-demo/demo" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/demo<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<p>访问成功后可以看到在控制台输出<code>service()</code>方法中的内容。</p>
</li>
</ol>
<hr>
<h1 id="servlet-执行流程" data-numberify>Servlet 执行流程<a class="anchor ms-1" href="#servlet-执行流程"></a></h1>
<p>运行Tomcat时并没有显式创建Servlet对象，也没有显式调用其中的方法。可控制台依然输出了<code>ServletDemo.service()</code>中的内容。</p>
<p>访问该Tomcat项目时，浏览器发出<a href="http://localhost:8080/web-demo/demo" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/demo<i class="fas fa-external-link-square-alt ms-1"></i></a>请求，从请求中可以解析出三部分内容：</p>
<ul>
<li>根据<code>localhost:8080</code>可以找到要访问的Tomcat Web服务器</li>
<li>根据<code>web-demo</code>可以找到部署在Tomcat服务器上的web-demo项目</li>
<li>根据<code>demo</code>可以找到要访问的是项目中的哪个Servlet类，根据@WebServlet后面的值进行匹配</li>
</ul>
<p>找到<code>ServletDemo</code>这个类后，Tomcat Web服务器就会为<code>ServletDemo</code>这个类创建一个对象，然后调用对象中的<code>service()</code>方法。</p>
<p>而Tomcat则是根据<code>@WebServlet</code>注解或<code>web.xml</code>配置文件等信息来创建对应的Servlet对象。</p>
<hr>
<h1 id="servlet-生命周期" data-numberify>Servlet 生命周期<a class="anchor ms-1" href="#servlet-生命周期"></a></h1>
<p>生命周期是指对象的生命周期指一个对象从被创建到被销毁的整个过程。</p>
<p>Servlet运行在Servlet容器（web服务器）中，其生命周期由容器来管理，分为4个阶段：</p>
<ol>
<li>
<p><strong>加载和实例化</strong>：默认情况下，Servlet会在第一次访问时被容器创建</p>
</li>
<li>
<p><strong>初始化</strong>：在Servlet实例化之后，容器将调用Servlet的<code>init()</code>方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作</p>
<p><code>init()</code>方法仅会被调用一次</p>
</li>
<li>
<p><strong>请求处理</strong>：每次请求Servlet时，Servlet容器都会调用Servlet的<code>service()</code>方法对请求进行处理</p>
</li>
<li>
<p><strong>服务终止</strong>：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的<code>destroy()</code>方法完成资源的释放</p>
<p>在<code>destroy()</code>方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收</p>
</li>
</ol>
<p>可以把Servlet的创建放到服务器启动的时候来创建（修改<code>@WebServlet</code>注解）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">&#34;/demo1&#34;</span><span class="o">,</span> <span class="n">loadOnStartup</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span>
</span></span></code></pre></div><p><code>loadOnstartup</code>的取值有两类情况：</p>
<ol>
<li>负整数：第一次访问时创建Servlet对象</li>
<li>非负整数：服务器启动时创建Servlet对象，数字越小优先级越高（<code>0</code>的优先级最高）</li>
</ol>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">&#34;/demo&#34;</span><span class="o">,</span> <span class="n">loadOnStartup</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletDemo</span> <span class="kd">implements</span> <span class="n">Servlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 初始化方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     * - 在Servlet被第一次访问或者服务器启动时被调用一次
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;init...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 提供服务
</span></span></span><span class="line"><span class="cl"><span class="cm">     * - 每一次Servlet被访问时被调用
</span></span></span><span class="line"><span class="cl"><span class="cm">     * - 可被调用多次
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">res</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello Servlet!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 销毁方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     * - 调用时机：内存释放或者服务器关闭的时候被调用一次
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;destroy...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ServletConfig</span> <span class="nf">getServletConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getServletInfo</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>注意：若要在关闭Tomcat时调用<code>destroy()</code>，需要在正常关闭Tomcat的情况下，<code>destroy()</code>才能被执行。</p>
</blockquote>
<hr>
<h1 id="servlet-方法" data-numberify>Servlet 方法<a class="anchor ms-1" href="#servlet-方法"></a></h1>
<p>剩下两个Servlet方法的作用是：</p>
<ul>
<li>
<p>获取Servlet信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">getServletInfo</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>获取ServletConfig对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">getServletInfo</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>ServletConfig对象，Tomcat Web服务器在创建Servlet对象的时候会通过<code>init()</code>方法将其作为参数传入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span>
</span></span></code></pre></div><p>在<code>getServletInfo()</code>中仅需将服务器传过来的ServletConfig进行返回即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">ServletConfig</span> <span class="n">servletConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取服务器传入的ServletConfig
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="o">.</span><span class="na">servletConfig</span> <span class="o">=</span> <span class="n">config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;init...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ServletConfig</span> <span class="nf">getServletConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将服务器传入的ServletConfig返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">servletConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="urlpattern-配置" data-numberify>urlPattern 配置<a class="anchor ms-1" href="#urlpattern-配置"></a></h1>
<h2 id="urlpatterns-多路径访问" data-numberify>urlPatterns 多路径访问<a class="anchor ms-1" href="#urlpatterns-多路径访问"></a></h2>
<p>一个Servlet，可以配置多个访问路径（<code>urlPattern</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">urlPatterns</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;/path1&#34;</span><span class="o">,</span> <span class="s">&#34;/path2&#34;</span><span class="o">,</span> <span class="o">....})</span>
</span></span></code></pre></div><h2 id="精确匹配" data-numberify>精确匹配<a class="anchor ms-1" href="#精确匹配"></a></h2>
<ul>
<li>
<p>配置路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/path/servlet&#34;</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>访问路径：<a href="http://localhost:8080/web-demo/path/servlet" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/path/servlet<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</li>
</ul>
<h2 id="目录匹配" data-numberify>目录匹配<a class="anchor ms-1" href="#目录匹配"></a></h2>
<ul>
<li>
<p>配置路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/path/*&#34;</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>访问路径：</p>
<ul>
<li><a href="http://localhost:8080/web-demo/path/abc" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/path/abc<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="http://localhost:8080/web-demo/path/def" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/path/def<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="http://localhost:8080/web-demo/path/" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/path/<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="http://localhost:8080/web-demo/path/anypath" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/path/anypath<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<blockquote>
<p>精确匹配优先级要高于目录匹配</p>
</blockquote>
<h2 id="扩展名匹配" data-numberify>扩展名匹配<a class="anchor ms-1" href="#扩展名匹配"></a></h2>
<ul>
<li>
<p>配置路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;*.html&#34;</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>访问路径：</p>
<ul>
<li><a href="http://localhost:8080/web-demo/index.html" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/index.html<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="http://localhost:8080/web-demo/login.html" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/login.html<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="http://localhost:8080/web-demo/any_name.html" target="_blank" rel="noopener noreferrer">http://localhost:8080/web-demo/any_name.html<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<blockquote>
<p>注意：</p>
<ol>
<li>如果路径配置的不是扩展名，那么在路径的前面就必须要加<code>/</code>否则会报错</li>
<li>如果路径配置的是<code>*.html</code>，那么在<code>*.html</code>的前面不能加<code>/</code>，否则会报错</li>
</ol>
</blockquote>
<h2 id="任意匹配" data-numberify>任意匹配<a class="anchor ms-1" href="#任意匹配"></a></h2>
<ul>
<li>
<p>配置路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>或</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&#34;/*&#34;</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>访问路径：</p>
<p>任何以 <code>http://localhost:8080/web-demo/</code> 开头的路径</p>
</li>
</ul>
<blockquote>
<p><code>/</code>和<code>/*</code>的区别：</p>
<ol>
<li>当项目中的Servlet配置了<code>@WebServlet(&quot;/&quot;)</code>，会覆盖掉Tomcat中的<code>DefaultServlet</code>，当其他的urlPattern都匹配不上时都会走这个Servlet。</li>
<li>当项目中配置了<code>@WebServlet(&quot;/&quot;)</code>，意味着匹配任意访问路径。</li>
<li><code>DefaultServlet</code>是用来处理静态资源，如果使用<code>@WebServlet(&quot;/&quot;)</code>将其覆盖掉。当请求静态资源的时候则是使用了自定义的Servlet类，最终会导致静态资源不能被访问。</li>
</ol>
</blockquote>
<hr>
<h1 id="xml配置servlet不推荐" data-numberify>XML配置Servlet（不推荐）<a class="anchor ms-1" href="#xml配置servlet不推荐"></a></h1>
<p>Servlet从3.0版本后才开始支持注解配置，而3.0版本前只支持XML配置文件的配置方法。</p>
<ul>
<li>
<p>编写Servlet类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.web</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletDemo</span> <span class="kd">implements</span> <span class="n">Servlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>web.xml</code>中配置该Servlet：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;web-app</span> <span class="na">xmlns=</span><span class="s">&#34;http://xmlns.jcp.org/xml/ns/javaee&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">version=</span><span class="s">&#34;4.0&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Servlet 全类名 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- Servlet的名称，名字任意 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-name&gt;</span>demo<span class="nt">&lt;/servlet-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- Servlet的类全名 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-class&gt;</span>com.linner.web.ServletDemo<span class="nt">&lt;/servlet-class&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Servlet 访问路径 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet-mapping&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- Servlet的名称，要和上面的名称一致 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-name&gt;</span>demo<span class="nt">&lt;/servlet-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- Servlet的访问路径 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;url-pattern&gt;</span>/demo<span class="nt">&lt;/url-pattern&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/web-app&gt;</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="servletrequest-和-servletresponse" data-numberify>ServletRequest 和 ServletResponse<a class="anchor ms-1" href="#servletrequest-和-servletresponse"></a></h1>
<p>在 <code>Servlet.service()</code> 中有这样两个参数，它们的类型是 <code>ServletRequest</code> 和 <code>ServletResponse</code>。这两个参数就是Servlet的 <code>Request</code> 和 <code>Response</code> 对象。</p>
<p><code>Request</code>是请求对象，作用是将客户端的请求数据从客户端发送到服务端；<code>Response</code>是响应对象，作用是将服务端的响应数据从服务端发送到客户端。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Tomcat</title>
      <link>/docs/spring/java-web/tomcat-base/</link>
      <pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/tomcat-base/</guid>
      <description><![CDATA[Tomcat基本使用 Tomcat安装 访问Tomcat官网下载。Tomcat是绿色版，直接解压即可。 启动Tomcat 以Windows系统为例，]]></description>
      <content:encoded><![CDATA[<h1 id="tomcat基本使用" data-numberify>Tomcat基本使用<a class="anchor ms-1" href="#tomcat基本使用"></a></h1>
<h2 id="tomcat安装" data-numberify>Tomcat安装<a class="anchor ms-1" href="#tomcat安装"></a></h2>
<p>访问<a href="https://tomcat.apache.org/" target="_blank" rel="noopener noreferrer">Tomcat官网<i class="fas fa-external-link-square-alt ms-1"></i></a>下载。Tomcat是绿色版，直接解压即可。</p>
<h2 id="启动tomcat" data-numberify>启动Tomcat<a class="anchor ms-1" href="#启动tomcat"></a></h2>
<p>以Windows系统为例，运行Tomcat目录下 <code>bin\startup.bat</code> 启动脚本即可完成启动。</p>
<p>启动后，通过浏览器访问 <code>http://localhost:8080</code>能看到Apache Tomcat的内容就说明Tomcat已经启动成功。</p>
<p>Windows系统下启动的过程中，如果控制台有中文乱码，需要修改<code>conf/logging.prooperties</code>。</p>
<p>将</p>
<pre tabindex="0"><code>java.util.logging.ConsoleHandler.encoding = UTF-8
</code></pre><p>修改为</p>
<pre tabindex="0"><code>java.util.logging.ConsoleHandler.encoding = GBK
</code></pre><h2 id="关闭tomcat" data-numberify>关闭Tomcat<a class="anchor ms-1" href="#关闭tomcat"></a></h2>
<p>关闭Tomcat不应该直接关闭运行窗口来强制关闭。应该运行<code>bin\shutdown.bat</code>或<code>ctrl+c</code>来正常关闭。</p>
<h2 id="修改端口" data-numberify>修改端口<a class="anchor ms-1" href="#修改端口"></a></h2>
<p>Tomcat默认的端口是8080，通过修改 <code>conf/server.xml</code> 来修改端口号：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;Connector</span> <span class="na">port=</span><span class="s">&#34;8080&#34;</span> <span class="na">protocol=</span><span class="s">&#34;HTTP/1.1&#34;</span> <span class="na">connectionTimeout=</span><span class="s">&#34;20000&#34;</span> <span class="na">redirectPort=</span><span class="s">&#34;8443&#34;</span><span class="nt">&gt;</span>
</span></span></code></pre></div><h2 id="部署" data-numberify>部署<a class="anchor ms-1" href="#部署"></a></h2>
<p>Tomcat部署项目： 将项目放置到<code>webapps</code>目录下，即部署完成。</p>
<p>一般JavaWeb项目会被打包称<code>wa</code>r包，然后将<code>war</code>包放到<code>webapps</code>目录下，Tomcat会自动解压缩。</p>
<hr>
<h1 id="maven-创建-web-项目" data-numberify>Maven 创建 Web 项目<a class="anchor ms-1" href="#maven-创建-web-项目"></a></h1>
<p>使用Maven工具能更加简单快捷的创建Web项目。</p>
<h2 id="maven-web-项目结构" data-numberify>Maven Web 项目结构<a class="anchor ms-1" href="#maven-web-项目结构"></a></h2>
<ul>
<li>📁<code>project_name</code> &mdash; 项目主目录
<ul>
<li>📁<code>src</code> &mdash; 源代码和测试代码文件目录
<ul>
<li>📁<code>main</code> &mdash; 源代码文件目录
<ul>
<li>📁<code>java</code> &mdash; 源代码Java文件目录</li>
<li>📁<code>resourcs</code> &mdash; 源代码配置文件目录</li>
<li>❗📁<code>webapp</code> 或 <code>web</code> &mdash; Web项目核心目录
存放web配置文件和web项目代码 (<code>html</code>, <code>css</code>, <code>javascript</code>等)
<ul>
<li>❗📁<code>WEB-INF</code> &mdash; Web项目核心目录
<ul>
<li>📄<code>web.xml</code> &mdash; Web项目配置文件</li>
</ul>
</li>
<li>其它目录或文件，如 <code>index.html</code>、<code>html</code>、<code>css</code>、<code>js</code>等</li>
</ul>
</li>
</ul>
</li>
<li>📁<code>test</code> &mdash; 测试代码文件目录
<ul>
<li>📁<code>java</code> &mdash; 测试代码Java文件目录</li>
<li>📁<code>resource</code> &mdash; 测试代码配置</li>
</ul>
</li>
<li>📄<code>pom.xml</code> &mdash; 项目核心配置文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>开发完成部署的 Maven Web 项目结构：</p>
<ul>
<li>📁<code>project_name</code> &mdash; 项目访问路径（虚拟目录）
<ul>
<li>❗📁<code>WEB-INF</code> &mdash; Web项目核心目录
<ul>
<li>📁<code>classes</code> &mdash; Java字节码文件
编译后的Java字节码文件和<code>resources</code>的资源文件，会被放到该目录下
包括<code>pom.xml</code>中依赖坐标对应的jar包</li>
<li>📁<code>lib</code> &mdash; 项目所需jar包</li>
<li>📄<code>web.xml</code> &mdash; Web项目配置文件</li>
<li>其它目录或文件，如 <code>index.html</code>、<code>html</code>、<code>css</code>、<code>js</code>等</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="创建-maven-web-项目" data-numberify>创建 Maven Web 项目<a class="anchor ms-1" href="#创建-maven-web-项目"></a></h2>
<p>创建方式有两种：使用骨架和不使用骨架</p>
<p>使用骨架大致步骤如下：</p>
<ol>
<li>创建Maven项目</li>
<li><mark>选择使用Web项目骨架</mark></li>
</ol>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627227650406.png" loading="lazy" width="998" height="789" />
</picture>

</p>
<ol start="3">
<li>
<p>输入Maven项目坐标创建项目</p>
</li>
<li>
<p>确认Maven相关的配置信息后，完成项目创建</p>
</li>
<li>
<p><mark>删除pom.xml中多余内容</mark>
<picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627228584625.png" loading="lazy" width="1255" height="550" />
</picture>

</p>
</li>
<li>
<p>补齐Maven Web项目缺失的目录结构</p>
<p>最终目录结构如下：</p>
<ul>
<li>📁<code>project_name</code>
<ul>
<li>📁<code>src</code>
<ul>
<li>📁<code>main</code>
<ul>
<li>📁<code>java</code></li>
<li>📁<code>resourcs</code></li>
<li>📁<code>webapp</code>
<ul>
<li>📁<code>WEB-INF</code>
<ul>
<li>📄<code>web.xml</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>📄<code>pom.xml</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627204022604.png" loading="lazy" width="1603" height="556" />
</picture>

</p>
<p>不使用骨架大致步骤如下：</p>
<ol>
<li>创建Maven项目</li>
<li>选择<mark>不使用Web项目骨架</mark></li>
</ol>
<p>按照正常的方式创建，不勾选<code>Create from archetype</code></p>
<ol start="3">
<li>
<p>输入Maven项目坐标创建项目</p>
</li>
<li>
<p><mark>在pom.xml设置打包方式为war</mark></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;project&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- ...... --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>......<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>.......<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;vesion&gt;</span>.......<span class="nt">&lt;/vesion&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- ...... --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><mark>补齐Maven Web项目缺失webapp的目录结构</mark></p>
</li>
</ol>
<p>文件&ndash;&gt;项目结构&ndash;&gt;Facet中按<code>+</code>然后选择<code>Web</code>，选择当前项目</p>
<p>修改webapp目录，并补齐Maven Web项目缺失<code>WEB-INF/web.xml</code>的目录结构，即可完成构建</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627204076090.png" loading="lazy" width="1686" height="533" />
</picture>

</p>
<hr>
<h1 id="在idea中使用tomcat" data-numberify>在IDEA中使用Tomcat<a class="anchor ms-1" href="#在idea中使用tomcat"></a></h1>
<p>在IDEA中集成使用Tomcat有两种方式，分别是集成本地Tomcat和Tomcat Maven插件。</p>
<h2 id="集成本地tomcat" data-numberify>集成本地Tomcat<a class="anchor ms-1" href="#集成本地tomcat"></a></h2>
<ol>
<li>右上角 编辑运行/调试配置 对话框&ndash;&gt;编辑配置&ndash;&gt;<code>+</code>&ndash;&gt;Tomcat服务器&ndash;&gt;<code>本地</code></li>
</ol>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627229992900.png" loading="lazy" width="1115" height="686" />
</picture>

</p>
<ol start="2">
<li>指定本地Tomcat的具体路径</li>
</ol>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627230313062.png" loading="lazy" width="1347" height="866" />
</picture>

</p>
<ol start="3">
<li>将开发项目部署项目到Tomcat中</li>
</ol>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627230913259.png" loading="lazy" width="877" height="775" />
</picture>

</p>
<blockquote>
<p><code>xxx.war</code> 和 <code>xxx.war exploded</code> 这两种部署项目模式的区别：</p>
<ul>
<li>war模式是将WEB工程打成war包，把war包发布到Tomcat服务器上</li>
<li>war exploded模式是将WEB工程以当前文件夹的位置关系发布到Tomcat服务器上</li>
</ul>
<p>war模式部署成功后，Tomcat的webapps目录下会有部署的项目内容</p>
<p>war exploded模式部署成功后，Tomcat的webapps目录下没有，而使用的是项目的target目录下的内容进行部署</p>
<p>建议选war模式进行部署，更符合项目部署的实际情况</p>
</blockquote>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/tomcat-base/1627205657117.png" loading="lazy" width="1591" height="625" />
</picture>

</p>
<h2 id="tomcat-maven插件" data-numberify>Tomcat Maven插件<a class="anchor ms-1" href="#tomcat-maven插件"></a></h2>
<ol>
<li>
<p>在<code>pom.xml</code>中添加Tomcat插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">    	<span class="c">&lt;!--Tomcat插件 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.maven<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>tomcat7-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>使用Maven Helper插件快速启动项目，选中项目，右键 &ndash;&gt;Run Maven &ndash;&gt; tomcat7:run</p>
</li>
</ol>
<blockquote>
<p>安装Maven Helper插件：File &ndash;&gt; Settings &ndash;&gt; Plugins &ndash;&gt; Maven Helper &mdash;&gt; Install，重启IDEA</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>MyBatis</title>
      <link>/docs/spring/java-web/mybatis-base/</link>
      <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/mybatis-base/</guid>
      <description><![CDATA[MyBatis 介绍 MyBatis 是一款优秀的持久层框架，用于简化 JDBC 开发。 持久层： 是负责将数据到保存到数据库的那一层代码。即，操作数据库的Java代码为持久层。 而My]]></description>
      <content:encoded><![CDATA[<h1 id="mybatis-介绍" data-numberify>MyBatis 介绍<a class="anchor ms-1" href="#mybatis-介绍"></a></h1>
<p>MyBatis 是一款优秀的持久层框架，用于简化 JDBC 开发。</p>
<blockquote>
<p><strong>持久层：</strong></p>
<ul>
<li>
<p>是负责将数据到保存到数据库的那一层代码。即，操作数据库的Java代码为持久层。</p>
<p>而Mybatis就是对JDBC代码进行了封装。</p>
</li>
<li>
<p>持久层是JavaEE三层架构中的一层。</p>
<p>JavaEE三层架构：表现层、业务层、持久层。</p>
</li>
</ul>
<p><strong>框架：</strong></p>
<ul>
<li>框架就是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。</li>
<li>使用框架的好处：在框架的基础之上构建软件编写更加高效、规范、通用、可扩展。</li>
</ul>
</blockquote>
<p>使用JDBC存在以下问题:</p>
<ul>
<li>
<p>硬编码</p>
<p>手动注册驱动、获取连接、SQL语句等。</p>
</li>
<li>
<p>操作繁琐</p>
<p>手动设置参数、封装结果集等。</p>
</li>
</ul>
<p>使用Mybatis：</p>
<ul>
<li>硬编码可以配置到配置文件。</li>
<li>操作繁琐的地方Mybatis都自动完成。</li>
</ul>
<hr>
<h1 id="配置-mybatis" data-numberify>配置 Mybatis<a class="anchor ms-1" href="#配置-mybatis"></a></h1>
<p>使用Maven导入Mybatis。</p>
<ol>
<li>
<p>在 <code>pom.xml</code> 配置文件中导入坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--mybatis 依赖--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>3.5.5<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--mysql 驱动--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>5.1.46<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>编写 <code>mybatis-config.xml</code> 文件：</p>
<p>在模块下的 <code>resources</code> 目录下创建Mybatis的配置文件 <code>mybatis-config.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE configuration
</span></span></span><span class="line"><span class="cl"><span class="cp">        PUBLIC &#34;-//mybatis.org//DTD Config 3.0//EN&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">        &#34;http://mybatis.org/dtd/mybatis-3-config.dtd&#34;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 需要注意配置标签的前后顺序(按照MyBatis官方文档目录中的顺序去定义) --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 别名或包扫描 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;typeAliases&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- name属性的值是实体类所在包 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 包扫描后,别名默认为类名(不区分大小写) --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 使用别名可以简化映射配置文件中 resultType 属性值的编写 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;package</span> <span class="na">name=</span><span class="s">&#34;package.name.pojo&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/typeAliases&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">    environments:配置数据库的连接环境信息,
</span></span></span><span class="line"><span class="cl"><span class="c">      可以配置多个environment信息,
</span></span></span><span class="line"><span class="cl"><span class="c">      通过对应的default属性切换不同的environment
</span></span></span><span class="line"><span class="cl"><span class="c">  --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;environments</span> <span class="na">default=</span><span class="s">&#34;development&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 可以配置多个&lt;environment&gt; --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 使用 id 给每段环境起名 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 在 &lt;environments&gt; 中使用 default=&#39;environment-id&#39; 来指定使用哪儿段配置 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;environment</span> <span class="na">id=</span><span class="s">&#34;development&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;transactionManager</span> <span class="na">type=</span><span class="s">&#34;JDBC&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dataSource</span> <span class="na">type=</span><span class="s">&#34;POOLED&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">          数据库连接信息
</span></span></span><span class="line"><span class="cl"><span class="c">          注意url、username和password
</span></span></span><span class="line"><span class="cl"><span class="c">        --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driver&#34;</span> <span class="na">value=</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;jdbc:mysql:///mybatis1?useSSL=false&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;root&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;1234&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dataSource&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/environment&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;environment</span> <span class="na">id=</span><span class="s">&#34;test&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;transactionManager</span> <span class="na">type=</span><span class="s">&#34;JDBC&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dataSource</span> <span class="na">type=</span><span class="s">&#34;POOLED&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 数据库连接信息 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driver&#34;</span> <span class="na">value=</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;jdbc:mysql:///mybatis2?useSSL=false&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;root&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;1234&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dataSource&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/environment&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/environments&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;mappers&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 加载映射文件 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ...... --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 在下节中讲解 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/mappers&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/configuration&gt;</span>
</span></span></code></pre></div></li>
</ol>
<blockquote>
<p>更多MyBatis配置请查看官方文档：<a href="https://mybatis.net.cn/configuration.html" target="_blank" rel="noopener noreferrer">MyBatis文档——配置<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<hr>
<h1 id="使用-mybatis" data-numberify>使用 Mybatis<a class="anchor ms-1" href="#使用-mybatis"></a></h1>
<ul>
<li>
<p>编写 <code>Mapper</code>类</p>
<p>在 <code>java</code> 目录下创建与 <code>pojo</code> 对应的 <code>Mapper</code>接口 <code>ClassNameMapper.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ClassNameMapper</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>编写 SQL 映射文件</p>
<p>在模块的 <code>resources</code> 目录下创建与 <code>pojo</code> 对应的映射配置文件 <code>ClassNameMapper.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE mapper PUBLIC &#34;-//mybatis.org//DTD Mapper 3.0//EN&#34; &#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&#34;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- namespace:名称空间 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">&#34;package.name.mapper&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 相应的SQL语句（XML映射） --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mapper&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>在Myb
atis的配置文件 <code>mybatis-config.xml</code> 中加载映射文件：</p>
<ol>
<li>直接加载映射文件：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;mappers&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;mapper</span> <span class="na">resource=</span><span class="s">&#34;com/abc/mapper/ClassNameMapper.xml&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mappers&gt;</span>
</span></span></code></pre></div><p>使用这种方式加载映射文件，多个映射文件需要定义多个 <code>&lt;mapper&gt;</code>，过于繁琐。</p>
<ol start="2">
<li>Mapper代理方式（推荐）：</li>
</ol>
<p>如果 <code>Mapper</code>接口名称和SQL映射文件名称相同，并在同一目录下，则可以使用包扫描的方式简化SQL映射文件的加载。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;mappers&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;package</span> <span class="na">name=</span><span class="s">&#34;com.abc.mapper&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mappers&gt;</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>注意：使用Mapper代理方式加载映射文件，<code>Mapper</code>接口与其对应的配置文件，它们的路径（包名）要相同。</p>
<p>即，在java目录下的 <code>Mapper</code>接口的包名，要和映射配置文件在 <code>resources</code>下的路径要一致。</p>
<p>如 <code>Mapper</code>接口的包名为 <code>com.abc.mapper</code>，那么其映射配置文件的路径则为 <code>com/abc/mapper</code>。</p>
<p>了解 <code>Maven</code>项目结构，请查看：<a href="https://linna-cy.github.io/Maven/#maven%E6%A0%87%E5%87%86%E5%8C%96%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84" target="_blank" rel="noopener noreferrer">Maven标准化项目结构<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<h2 id="实例" data-numberify>实例<a class="anchor ms-1" href="#实例"></a></h2>
<p>在 Mapper 接口中定义方法，方法名就是SQL映射文件中SQL语句的id，并保持参数类型和返回值类型一致。</p>
<p>例如，为 <code>User</code>对象定义 <code>selectAll()</code>和 <code>selectById()</code>方法：</p>
<ul>
<li>
<p>创建 <code>User</code>表:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="n">mybatis</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">USE</span><span class="w"> </span><span class="n">mybatis</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">tb_user</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">username</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">password</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">gender</span><span class="w"> </span><span class="nb">CHAR</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">addr</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;zhangsan&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;123&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;男&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;北京&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;李四&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;234&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;女&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;天津&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;王五&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;11&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;男&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;西安&#39;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><code>pojo</code>包下定义 <code>User</code>实体类:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.pojo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">addr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getGender</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGender</span><span class="o">(</span><span class="n">String</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAddr</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">addr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAddr</span><span class="o">(</span><span class="n">String</span> <span class="n">addr</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">addr</span> <span class="o">=</span> <span class="n">addr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;User{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, username=&#39;&#34;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, password=&#39;&#34;</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, gender=&#39;&#34;</span> <span class="o">+</span> <span class="n">gender</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, addr=&#39;&#34;</span> <span class="o">+</span> <span class="n">addr</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>mapper</code>包下定义 <code>UserMapper</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.pojo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.pojo.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.Select</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">selectAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">selectById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 更多操作接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在 <code>resources</code>目录下创建与 <code>UserMapper</code>包名对应的路径，并添加 <code>UserMapper.xml</code>映射配置文件:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE mapper
</span></span></span><span class="line"><span class="cl"><span class="cp">        PUBLIC &#34;-//mybatis.org//DTD Mapper 3.0//EN&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">        &#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&#34;&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">&#34;com.linner.mapper.UserMapper&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">      select语句使用&lt;select&gt;
</span></span></span><span class="line"><span class="cl"><span class="c">        id          为对应Mapper类中的方法名
</span></span></span><span class="line"><span class="cl"><span class="c">        resultType  为对应的实体类, 使用了&lt;typeAliases&gt;包扫描, 省略了包名
</span></span></span><span class="line"><span class="cl"><span class="c">     --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectAll&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        SELECT *
</span></span><span class="line"><span class="cl">        FROM tb_user;
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/select&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectById&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        SELECT *
</span></span><span class="line"><span class="cl">        FROM tb_user
</span></span><span class="line"><span class="cl">        WHERE id = #{id};
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/select&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 更多XML映射 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mapper&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>resources</code>目录下，配置 <code>mybatis-config.xml</code>文件:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE configuration
</span></span></span><span class="line"><span class="cl"><span class="cp">        PUBLIC &#34;-//mybatis.org//DTD Config 3.0//EN&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">        &#34;http://mybatis.org/dtd/mybatis-3-config.dtd&#34;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 别名或包扫描 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 使用别名可以简化映射配置文件中 resultType 属性值的编写 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;typeAliases&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;package</span> <span class="na">name=</span><span class="s">&#34;com.linner.pojo&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/typeAliases&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;environments</span> <span class="na">default=</span><span class="s">&#34;development&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;environment</span> <span class="na">id=</span><span class="s">&#34;development&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;transactionManager</span> <span class="na">type=</span><span class="s">&#34;JDBC&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;dataSource</span> <span class="na">type=</span><span class="s">&#34;POOLED&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="c">&lt;!-- 数据库连接信息 --&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driver&#34;</span> <span class="na">value=</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;jdbc:mysql:///mybatis?useSSL=false&amp;useServerPerpStmts=true&amp;characterEncoding=UTF-8&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;root&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;1234&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/dataSource&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/environment&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/environments&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mappers&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- Mapper代理方式--&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;package</span> <span class="na">name=</span><span class="s">&#34;com.linner.mapper&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/mappers&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/configuration&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>编写测试类:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.mapper.UserMapper</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.pojo.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.io.Resources</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSession</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSessionFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSessionFactoryBuilder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserMapperTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSelectAll</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 加载mybatis的核心配置文件,获取SqlSessionFactory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">resource</span> <span class="o">=</span> <span class="s">&#34;./mybatis-config.xml&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">Resources</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">SqlSessionFactory</span> <span class="n">sqlSessionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取SqlSession对象,用它来执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">SqlSession</span> <span class="n">sqlSession</span> <span class="o">=</span> <span class="n">sqlSessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 执行sql语句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 3.1 方式一:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// List&lt;User&gt; users = sqlSession.selectList(&#34;com.linner.mapper.UserMapper.selectAll&#34;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 3.2 方式二:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 3.2.1 获取UserMapper接口的代理对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">UserMapper</span> <span class="n">userMapper</span> <span class="o">=</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">getMapper</span><span class="o">(</span><span class="n">UserMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 3.2.2 执行对应Mapper对象的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">selectAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 4. 处理数据(模拟)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">users</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 释放资源(仅需释放SqlSession对象)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sqlSession</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSelectById</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 模拟接收参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取sqlSessionFactory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">resource</span> <span class="o">=</span> <span class="s">&#34;./mybatis-config.xml&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">Resources</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">SqlSessionFactory</span> <span class="n">sqlSessionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取SqlSession对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">SqlSession</span> <span class="n">sqlSession</span> <span class="o">=</span> <span class="n">sqlSessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取Mapper接口的代理对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">UserMapper</span> <span class="n">userMapper</span> <span class="o">=</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">getMapper</span><span class="o">(</span><span class="n">UserMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 4. 执行方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">selectById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 处理数据(模拟)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sqlSession</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="xml-映射器" data-numberify>XML 映射器<a class="anchor ms-1" href="#xml-映射器"></a></h1>
<p>通过在 <code>XxxMapper.xml</code> 中使用元素来定义各种CRUD操作。</p>
<p>常用的元素如下（按照定义的顺序给出）：</p>
<ul>
<li><code>&lt;sql&gt;</code> – 可被其它语句引用的可重用语句块。</li>
<li><code>&lt;insert&gt;</code> – 映射插入语句。</li>
<li><code>&lt;update&gt;</code> – 映射更新语句。</li>
<li><code>&lt;delete&gt;</code> – 映射删除语句。</li>
<li><code>&lt;select&gt;</code> – 映射查询语句。</li>
</ul>
<h2 id="select" data-numberify>Select<a class="anchor ms-1" href="#select"></a></h2>
<h3 id="查询所有数据" data-numberify>查询所有数据<a class="anchor ms-1" href="#查询所有数据"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectAll&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT *
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">selectAll</span><span class="o">();</span>
</span></span></code></pre></div><ul>
<li><code>id</code>：相应 <code>Mapper</code> 接口中的方法名。</li>
<li><code>resultType</code>：相应 <code>Mapper</code> 接口中的返回值类型（可自动封装为对象，不区分大小写）。</li>
<li><code>Mapper</code> 接口返回值：返回一个<code>List&lt;User&gt;</code>。这个返回值可以是<code>User</code>、<code>List&lt;User&gt;</code>或<code>ArrayList&lt;User&gt;</code>等，MyBatis会根据返回值自动封装。</li>
</ul>
<h3 id="根据id字段查询" data-numberify>根据id字段查询<a class="anchor ms-1" href="#根据id字段查询"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectById&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT * FROM tb_user WHERE id = #{id};
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">User</span> <span class="nf">selectById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span></code></pre></div><p><code>&lt;select&gt;</code>中，<code>#{id}</code>为相应 <code>Mapper</code> 接口中的参数 <code>id</code>。<code>#{id}</code>被称为参数占位符，相当于JDBC中的<code>?</code>占位符。</p>
<h3 id="多条件动态查询" data-numberify>多条件动态查询<a class="anchor ms-1" href="#多条件动态查询"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectByCondition&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT *
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;where&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;username != null and username != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            username = #{username}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;password != null and password != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            AND password = #{password}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;gender != null and gender != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            AND gender = #{gender}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;addr != null and addr != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            AND addr = #{addr}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/where&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><p>多条件查询使用了动态SQL<code>&lt;where&gt;</code>和<code>&lt;if&gt;</code>。如果仅需查询某部分字段，仅仅使用SQL语句在实现上有难度。而Mybatis就提供了<u>动态SQL</u>方便了我们的实现。</p>
<ul>
<li>
<p><code>&lt;if&gt;</code>：能根据<code>User</code>对象的值来决定是否在SQL语句中加入其包含的语句。</p>
</li>
<li>
<p><code>&lt;where&gt;</code>：只会在子元素返回任何内容的情况下才插入<code>WHERE</code>子句。</p>
<p>而且，若子句的开头为<code>AND</code>或<code>OR</code>，<code>&lt;where&gt;</code>元素也会将它们去除。</p>
</li>
</ul>
<h3 id="单条件动态查询" data-numberify>单条件动态查询<a class="anchor ms-1" href="#单条件动态查询"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectByConditionSingle&#34;</span> <span class="na">resultMap=</span><span class="s">&#34;brandResultMap&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT *
</span></span><span class="line"><span class="cl">    FROM tb_brand
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;where&gt;</span><span class="c">&lt;!--使用where标签确保不会出错--&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;choose&gt;</span><span class="c">&lt;!--相当于switch--&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;when</span> <span class="na">test=</span><span class="s">&#34;status != null&#34;</span><span class="nt">&gt;</span><span class="c">&lt;!--相当于case--&gt;</span>
</span></span><span class="line"><span class="cl">                status = #{status}
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/when&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;when</span> <span class="na">test=</span><span class="s">&#34;companyName != null and companyName != &#39;&#39; &#34;</span><span class="nt">&gt;</span><span class="c">&lt;!--相当于case--&gt;</span>
</span></span><span class="line"><span class="cl">                company_name like #{companyName}
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/when&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;when</span> <span class="na">test=</span><span class="s">&#34;brandName != null and brandName != &#39;&#39; &#34;</span><span class="nt">&gt;</span><span class="c">&lt;!--相当于case--&gt;</span>
</span></span><span class="line"><span class="cl">                brand_name like #{brandName}
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/when&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!--没有条件输入很可能会报错,使用&lt;otherwise&gt;保底--&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!--如果没有使用&lt;where&gt;，则必须使用&lt;otherwise&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!--&lt;otherwise&gt;
</span></span></span><span class="line"><span class="cl"><span class="c">                1 = 1
</span></span></span><span class="line"><span class="cl"><span class="c">            &lt;/otherwise&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/choose&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/where&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><p>单条件动态查询使用了<code>&lt;where&gt;</code>、<code>&lt;choose&gt;</code>、<code>&lt;when&gt;</code>和<code>&lt;otherwise&gt;</code>，它们都是MyBatis提供的动态SQL元素。</p>
<p><code>&lt;choose&gt;</code>与<code>&lt;when&gt;</code>（必须）和<code>&lt;otherwise&gt;</code>元素配合使用。它会根据子元素<code>&lt;when&gt;</code>的<code>test</code>属性来判断要选择哪个<code>&lt;when&gt;</code>或<code>&lt;otherwise&gt;</code>元素。</p>
<p>如果<code>&lt;choose&gt;</code>外没有被<code>&lt;where&gt;</code>包裹则必须使用<code>&lt;otherwise&gt;</code>来包裹一个永真的条件SQL语句，以确保SQL语句不会出错。如果被<code>&lt;where&gt;</code>包裹了，<code>&lt;where&gt;</code>会根据需要判断是否要添加<code>WHERE</code>子句。</p>
<p><code>&lt;choose&gt;</code>、<code>&lt;when&gt;</code>和<code>&lt;otherwise&gt;</code>与<code>switch</code>语句的作用十分相似。</p>
<h2 id="insert" data-numberify>Insert<a class="anchor ms-1" href="#insert"></a></h2>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">&#34;add&#34;</span> <span class="na">useGeneratedKeys=</span><span class="s">&#34;true&#34;</span> <span class="na">keyProperty=</span><span class="s">&#34;id&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    INSERT INTO tb_user (username, password, ordered, gender,
</span></span><span class="line"><span class="cl">                          addr)
</span></span><span class="line"><span class="cl">    VALUES (#{username}, #{password}, #{ordered}, #{gender},
</span></span><span class="line"><span class="cl">            #{addr});
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/insert&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span></code></pre></div><p>接口方法直接传入对象即可，对象成员要与 <code>VALUES</code> 子句中的参数一一对应（参数符号中的名称要与对象的成员名称相同）。</p>
<blockquote>
<p>如果XML映射中只有一个参数，那么这个参数的名称不必与接口的参数名称相同。</p>
</blockquote>
<ul>
<li>
<p><code>id</code>：含义与 <code>&lt;insert&gt;</code> 的含义相同，为相应 <code>Mapper</code> 接口中的方法名（以下 <code>id</code>均为此含义，省略）。</p>
</li>
<li>
<p><code>useGeneratedKeys</code>：</p>
<ul>
<li>值为 <code>true</code> 时，Mybatis 会使用 JDBC 的 <code>getGeneratedKeys</code> 方法来取出由数据库内部生成的主键（如自增的主键）。</li>
<li>默认为 <code>false</code>。</li>
</ul>
</li>
<li>
<p><code>keyProperty</code>：<code>getGeneratedKeys</code> 获取到的主键值所要赋予的对象成员名。MyBatis 会使用 <code>getGeneratedKeys</code> 的返回值来设置它的值。</p>
<p>如，<code>keyProperty=&quot;id&quot;</code>——直接将获取到的主键值赋值给 <code>user.id</code>。</p>
<p>如果生成列不止一个，可以用逗号分隔多个属性名称。</p>
</li>
<li>
<p><code>Mapper</code> 接口返回值：<code>boolean</code>，插入成功返回 <code>true</code>，插入失败返回 <code>false</code>。</p>
<p>返回值也可以选择忽略，将<code>add()</code>接口的返回值设置为<code>void</code>即可。</p>
</li>
</ul>
<h2 id="update" data-numberify>Update<a class="anchor ms-1" href="#update"></a></h2>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;update</span> <span class="na">id=</span><span class="s">&#34;update&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    UPDATE tb_user
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;set&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;username != null and username != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            username = #{username},
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;password != null and password != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            password = #{password},
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;ordered != null&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            ordered = #{ordered},
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;gender != null and (gender == &#39;男&#39; or gender == &#39;女&#39;)&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            gender = #{gender},
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;addr != null and addr != &#39;&#39;&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            addr = #{addr}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/set&gt;</span>
</span></span><span class="line"><span class="cl">    WHERE id = #{id};
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/update&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span></code></pre></div><p>在 <code>&lt;update&gt;</code> 中有一些用 <code>&lt;set&gt;</code> 包裹起来的 <code>&lt;if&gt;</code>。这是因为需要使用 <code>&lt;set&gt;</code> 动态包含需要更新的列，忽略其它不更新的列。从而能根据<code>User</code>对象的值来决定要更新哪些数据，并且动态地改变SQL语句。</p>
<p>Update的Mapper接口返回值是<code>int</code>类型，返回更新的行数。同样可以将接口的返回值设置为<code>void</code>来忽略它。</p>
<h2 id="delete" data-numberify>Delete<a class="anchor ms-1" href="#delete"></a></h2>
<h3 id="删除单行数据" data-numberify>删除单行数据<a class="anchor ms-1" href="#删除单行数据"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;delete</span> <span class="na">id=</span><span class="s">&#34;deleteById&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    DELETE
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl">    WHERE id = #{id};
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/delete&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span></code></pre></div><h3 id="删除多行数据" data-numberify>删除多行数据<a class="anchor ms-1" href="#删除多行数据"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;delete</span> <span class="na">id=</span><span class="s">&#34;deleteByIds&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    DELETE
</span></span><span class="line"><span class="cl">    FROM tb_brand
</span></span><span class="line"><span class="cl">    WHERE id
</span></span><span class="line"><span class="cl">    IN
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">        &lt;foreach&gt;参数:
</span></span></span><span class="line"><span class="cl"><span class="c">            - item: 代表数组参数中的每个元素
</span></span></span><span class="line"><span class="cl"><span class="c">            - separator: 分隔符
</span></span></span><span class="line"><span class="cl"><span class="c">            - open: 插入开始符
</span></span></span><span class="line"><span class="cl"><span class="c">            - close: 插入结束符
</span></span></span><span class="line"><span class="cl"><span class="c">    --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;foreach</span> <span class="na">collection=</span><span class="s">&#34;ids&#34;</span> <span class="na">item=</span><span class="s">&#34;id&#34;</span> <span class="na">separator=</span><span class="s">&#34;,&#34;</span> <span class="na">open=</span><span class="s">&#34;(&#34;</span> <span class="na">close=</span><span class="s">&#34;)&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        #{id}
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/foreach&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/delete&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">deleteByIds</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">&#34;ids&#34;</span><span class="o">)</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">ids</span><span class="o">);</span>
</span></span></code></pre></div><p>Mybatis提供了 <code>&lt;foreach&gt;</code> 标签遍历数组，拼接SQL语句。<code>&lt;foreach&gt;</code> 同样也是<u>动态SQL</u>。</p>
<blockquote>
<p>更多XML映射器请查看官方文档：<a href="https://mybatis.net.cn/sqlmap-xml.html" target="_blank" rel="noopener noreferrer">MyBatis文档——XML映射器<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<h2 id="结果映射" data-numberify>结果映射<a class="anchor ms-1" href="#结果映射"></a></h2>
<h3 id="resultmap" data-numberify>resultMap<a class="anchor ms-1" href="#resultmap"></a></h3>
<p>假设SQL表中的字段与实体类的成员变量名无法一一对应，会导致SQL语句的传参出现问题。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_id</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_name</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_password</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_gender</span><span class="w"> </span><span class="nb">CHAR</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_addr</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">addr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// setter 和 getter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>那么可以使用<code>&lt;resultMap&gt;</code>元素来对表字段和成员名做一个映射（结果映射）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">    &lt;resultMap&gt;:
</span></span></span><span class="line"><span class="cl"><span class="c">        - id: 唯一标识
</span></span></span><span class="line"><span class="cl"><span class="c">        - type: 映射的类型,支持别名
</span></span></span><span class="line"><span class="cl"><span class="c">--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;resultMap</span> <span class="na">id=</span><span class="s">&#34;userResultMap&#34;</span> <span class="na">type=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">        两种标签:
</span></span></span><span class="line"><span class="cl"><span class="c">            - &lt;id&gt;: 完成主键字段的映射
</span></span></span><span class="line"><span class="cl"><span class="c">                - column: 表的列名
</span></span></span><span class="line"><span class="cl"><span class="c">                - property: 实体类的属性名
</span></span></span><span class="line"><span class="cl"><span class="c">            - &lt;result&gt;: 完成一般字段的映射
</span></span></span><span class="line"><span class="cl"><span class="c">                - column: 表的列名
</span></span></span><span class="line"><span class="cl"><span class="c">                - property: 实体类的属性名
</span></span></span><span class="line"><span class="cl"><span class="c">    --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;id</span> <span class="na">column=</span><span class="s">&#34;user_id&#34;</span> <span class="na">property=</span><span class="s">&#34;id&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&#34;user_name&#34;</span> <span class="na">property=</span><span class="s">&#34;userame&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&#34;user_password&#34;</span> <span class="na">property=</span><span class="s">&#34;password&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&#34;user_gender&#34;</span> <span class="na">property=</span><span class="s">&#34;gender&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&#34;user_addr&#34;</span> <span class="na">property=</span><span class="s">&#34;addr&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/resultMap&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectAll&#34;</span> <span class="na">resultMap=</span><span class="s">&#34;userResultMap&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT *
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><blockquote>
<p>要使用结果映射，需要把<code>&lt;select&gt;</code>中的<code>resultType</code>属性替换为<code>resultMap</code>，并且其属性值为<code>&lt;resultMap&gt;</code>的<code>id</code>值。</p>
</blockquote>
<h3 id="自动映射" data-numberify>自动映射<a class="anchor ms-1" href="#自动映射"></a></h3>
<p>当自动映射查询结果时，MyBatis 会获取结果中返回的列名并在 Java 类中查找相同名字的属性（忽略大小写）。</p>
<p>接上节例子，使用SQL语句的 <code>AS</code> 来实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectAll&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT 
</span></span><span class="line"><span class="cl">        user_id AS &#34;id&#34;,
</span></span><span class="line"><span class="cl">        user_name AS &#34;username&#34;,
</span></span><span class="line"><span class="cl">        user_password AS &#34;password&#34;,
</span></span><span class="line"><span class="cl">        user_gender AS gender,
</span></span><span class="line"><span class="cl">        user_addr AS &#34;addr&#34;
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><blockquote>
<ul>
<li>
<p>通常数据库列使用大写字母组成的单词命名，单词间用下划线分隔；而 Java 属性一般遵循驼峰命名法约定。为了在这两种命名方式之间启用自动映射，需要将 <code>mapUnderscoreToCamelCase</code> 设置为 <code>true</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 配置mybatis自动转换为驼峰式命名 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;settings&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&#34;mapUnderscoreToCamelCase&#34;</span> <span class="na">value=</span><span class="s">&#34;true&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/settings&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;resultMap&gt;</code>和自动映射可以混用。</p>
</li>
</ul>
</blockquote>
<h2 id="参数" data-numberify>参数<a class="anchor ms-1" href="#参数"></a></h2>
<p>MyBatis有两种参数：</p>
<ul>
<li><code>#{p}</code> —— 会自动转义。</li>
<li><code>${p}</code> —— 不会自动转义。</li>
</ul>
<blockquote>
<p>官方文档：<a href="https://mybatis.net.cn/sqlmap-xml.html#Parameters" target="_blank" rel="noopener noreferrer">MyBatis——XML映射器参数<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<p><strong>MyBatis 参数封装</strong>:</p>
<ul>
<li>
<p>单个参数:</p>
<ol>
<li>
<p>POJO类型: 直接使用,保证 <strong>属性名</strong> 和 <strong>参数占位符名称</strong> 一致</p>
</li>
<li>
<p>Map类型: 直接使用,保证 <strong>键名</strong> 和 <strong>参数占位符名称</strong> 一致</p>
</li>
<li>
<p>Collection: 封装为Map集合</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg0&#34;</span><span class="o">,</span> <span class="n">collection</span><span class="err">集合</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;collection&#34;</span><span class="o">,</span> <span class="n">collection</span><span class="err">集合</span><span class="o">)</span>
</span></span></code></pre></div><ul>
<li>使用<code>@Param</code>注解，替换Map集合中默认的arg键名</li>
</ul>
</li>
<li>
<p>List: 封装为Map集合</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg0&#34;</span><span class="o">,</span> <span class="n">list</span><span class="err">集合</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;collection&#34;</span><span class="o">,</span> <span class="n">list</span><span class="err">集合</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;list&#34;</span><span class="o">,</span> <span class="n">list</span><span class="err">集合</span><span class="o">)</span>
</span></span></code></pre></div><ul>
<li>使用<code>@Param</code>注解,替换Map集合中默认的arg键名</li>
</ul>
</li>
<li>
<p>Array: 封装为Map集合</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg0&#34;</span><span class="o">,</span> <span class="err">数组</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;array&#34;</span><span class="o">,</span> <span class="err">数组</span><span class="o">)</span>
</span></span></code></pre></div><ul>
<li>使用<code>@Param</code>注解,替换Map集合中默认的arg键名</li>
</ul>
</li>
<li>
<p>其他类型: 直接使用,且占位符名称和参数名称可以不相同</p>
</li>
</ol>
</li>
<li>
<p>多个参数: 封装为Map集合</p>
<ul>
<li>
<p>每个参数有两个键:</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg0&#34;</span><span class="o">,</span> <span class="err">参数值</span><span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;param1&#34;</span><span class="o">,</span> <span class="err">参数值</span><span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg1&#34;</span><span class="o">,</span> <span class="err">参数值</span><span class="mi">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;param2&#34;</span><span class="o">,</span> <span class="err">参数值</span><span class="mi">2</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>使用<code>@Param</code>注解,替换Map集合中默认的arg键名:</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Param</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">)</span> <span class="err">参数类型</span> <span class="err">参数名</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">,</span> <span class="err">参数值</span><span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;param1&#34;</span><span class="o">,</span> <span class="err">参数值</span><span class="mi">1</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<p>示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">selectById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">selectByCondition</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="nd">@Param</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">)</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="nd">@Param</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">)</span> <span class="n">String</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="注解实现crud" data-numberify>注解实现CRUD<a class="anchor ms-1" href="#注解实现crud"></a></h2>
<p>对于简单的SQL语句来说，使用注解开发会比配置文件开发更加方便。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Select</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;SELECT * FROM tb_user WHERE id = #{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">User</span> <span class="nf">selectById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span></code></pre></div><blockquote>
<p>注意：注解是用来替换映射配置文件方式配置的，所以使用了注解，就不需要再映射配置文件中书写对应的 <code>statement</code>。</p>
</blockquote>
<p>Mybatis 针对 CURD 操作都提供了对应的注解：</p>
<ul>
<li>查询 ：<code>@Select</code></li>
<li>添加 ：<code>@Insert</code></li>
<li>修改 ：<code>@Update</code></li>
<li>删除 ：<code>@Delete</code></li>
</ul>
<p>注解适合用于完成简单功能，而使用配置文件来完成复杂功能。如果使用注解来完成动态SQL之类的复杂功能，就需要使用到MyBatis提供的SQL构建器来完成。详情请阅读官方SQL构建器文档：<a href="https://mybatis.net.cn/statement-builders.html" target="_blank" rel="noopener noreferrer">MyBatis文档——SQL语句构建器<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<hr>
<h1 id="动态sql" data-numberify>动态SQL<a class="anchor ms-1" href="#动态sql"></a></h1>
<p>动态 SQL 是 MyBatis 的强大特性之一。</p>
<p>MyBatis提供的动态SQL元素有：</p>
<ul>
<li><code>&lt;if&gt;</code></li>
<li><code>&lt;choose&gt;</code> (<code>&lt;when&gt;</code>, <code>&lt;otherwise&gt;</code>)</li>
<li><code>&lt;trim&gt;</code> (<code>&lt;where&gt;</code>, <code>&lt;set&gt;</code>)</li>
<li><code>&lt;foreach&gt;</code></li>
</ul>
<blockquote>
<p>更多与动态SQL请查看官方文档：<a href="https://mybatis.net.cn/dynamic-sql.html" target="_blank" rel="noopener noreferrer">MyBatis文档——动态SQL<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<hr>
<h1 id="sqlsessionfactory工具类抽取" data-numberify>SqlSessionFactory工具类抽取<a class="anchor ms-1" href="#sqlsessionfactory工具类抽取"></a></h1>
<p>MyBatis重复代码会造成一些问题:</p>
<ul>
<li>不利于后期的维护。</li>
<li>SqlSessionFactory工厂类进行重复创建。</li>
</ul>
<p>对于Mybatis的基础操作出现的重复代码，可以使用一个静态代码块来自动加载：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SqlSessionFactoryUtils</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">SqlSessionFactory</span> <span class="n">sqlSessionFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 静态代码块会随着类的加载而自动执行，且只执行一次
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">resource</span> <span class="o">=</span> <span class="s">&#34;mybatis-config.xml&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">Resources</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">sqlSessionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">SqlSessionFactory</span> <span class="nf">getSqlSessionFactory</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">sqlSessionFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>工具类抽取以后，以后在对Mybatis的SqlSession进行操作的时候，就可以直接使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">SqlSessionFactory</span> <span class="n">sf</span> <span class="o">=</span> <span class="n">SqlSessionFactoryUtils</span><span class="o">.</span><span class="na">getSqlSessionFactory</span><span class="o">();</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Druid 数据库连接池</title>
      <link>/docs/spring/java-web/druid/</link>
      <pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/druid/</guid>
      <description><![CDATA[数据库连接池 数据库连接池是个容器, 负责分配, 管理数据库连接 (Connection). 数据库连接池允许应用程序重复使用一个现有的数据库连接, 而不是再重新建立一个. 从而]]></description>
      <content:encoded><![CDATA[<h1 id="数据库连接池" data-numberify>数据库连接池<a class="anchor ms-1" href="#数据库连接池"></a></h1>
<p>数据库连接池是个容器, 负责分配, 管理数据库连接 (Connection).</p>
<p>数据库连接池允许应用程序重复使用一个现有的数据库连接, 而不是再重新建立一个. 从而减少资源浪费.</p>
<p>数据库连接池会自动释放超过最大空闲时间的数据库连接 (强制释放), 来避免因为没有释放数据库连接而引起的数据库连接遗漏.</p>
<p>使用数据库连接池的好处:</p>
<ul>
<li>资源可以重用</li>
<li>提升系统响应速度</li>
<li>避免数据库连接遗漏</li>
</ul>
<p>在通常情况下使用JDBC, 有可能会反复地创建和销毁 <code>Connection</code>对象. 这样重复创建销毁的过程特别耗费计算机的性能和时间.</p>
<p>而数据库使用了数据库连接池后，就能达到Connection对象的复用.</p>
<p>连接池是在一开始就创建好了一些连接 (Connection) 对象存储起来. 用户需要连接数据库时, 不需要自己创建连接, 而只需要从连接池中获取一个连接进行使用, 使用完毕后再将连接对象归还给连接池; 这样就可以起到资源重用, 也节省了频繁创建连接销毁连接所花费的时间, 从而提升了系统响应的速度.</p>
<p>常见的数据库连接池有:</p>
<ul>
<li>DBCP</li>
<li>C3P0</li>
<li>Druid</li>
</ul>
<hr>
<h1 id="druid" data-numberify>Druid<a class="anchor ms-1" href="#druid"></a></h1>
<h2 id="配置-druid" data-numberify>配置 Druid<a class="anchor ms-1" href="#配置-druid"></a></h2>
<ul>
<li>
<p><a href="https://repo1.maven.org/maven2/com/alibaba/druid/" target="_blank" rel="noopener noreferrer">下载Druid jar包<i class="fas fa-external-link-square-alt ms-1"></i></a>, 并导入:</p>
<p>在项目中, 将下载好的jar包放入项目的 <code>lib</code>目录中.</p>
<ul>
<li>然后点击鼠标右键&ndash;&gt;Add as Library (添加为库).</li>
<li>在添加为库文件的时候，有如下三个选项:
<ul>
<li>
<p>Global Library: 全局有效</p>
</li>
<li>
<p>Project Library: 项目有效</p>
</li>
<li>
<p>Module Library: 模块有效</p>
<p>选择Module Library.</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>在项目目录下定义Druid配置文件 <code>druid.properties</code>:</p>
<pre tabindex="0"><code>driverClassName=com.mysql.jdbc.Driver
url=jdbc:mysql:///db1?useSSL=false&amp;useServerPrepStmts=true
username=root
password=1234
# 初始化连接数量
initialSize=5
# 最大连接数
maxActive=10
# 最大等待时间
maxWait=3000
</code></pre></li>
<li>
<p>加载配置文件:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Properties</span> <span class="n">prop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">prop</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;demo/src/druid.properties&#34;</span><span class="o">));</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="使用-druid" data-numberify>使用 Druid<a class="anchor ms-1" href="#使用-druid"></a></h2>
<p>Java中从数据库连接池获取连接对象, 使用的是官方提供的数据库连接池标准接口, 由第三方组织实现此接口. 该接口提供了获取连接的功能:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Connection</span> <span class="nf">getConnection</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                  <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>因此, 使用Druid获取数据库连接还需要以下两步:</p>
<ul>
<li>
<p>获取数据库连接池对象:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"> <span class="n">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="n">DruidDataSourceFactory</span><span class="o">.</span><span class="na">createDataSource</span><span class="o">(</span><span class="n">prop</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p>从数据库连接池中获取连接 (<code>Connection</code>):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="操作实例" data-numberify>操作实例<a class="anchor ms-1" href="#操作实例"></a></h1>
<h2 id="需求分析" data-numberify>需求分析<a class="anchor ms-1" href="#需求分析"></a></h2>
<p>完成商品品牌数据的增删改查操作</p>
<ul>
<li>查询：查询所有数据</li>
<li>添加：添加品牌</li>
<li>修改：根据id修改</li>
<li>删除：根据id删除</li>
</ul>
<h2 id="环境准备" data-numberify>环境准备<a class="anchor ms-1" href="#环境准备"></a></h2>
<ol>
<li>
<p>创建数据库表:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 删除tb_brand表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">tb_brand</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 创建tb_brand表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tb_brand</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="p">,</span><span class="w"> </span><span class="c1">-- id 主键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">brand_name</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w"> </span><span class="c1">-- 品牌名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">company_name</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w"> </span><span class="c1">-- 企业名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">ordered</span><span class="w"> </span><span class="nb">INT</span><span class="p">,</span><span class="w"> </span><span class="c1">-- 排序字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">description</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span><span class="w"> </span><span class="c1">-- 描述信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="c1">-- 状态：0：禁用  1：启用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 添加数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_brand</span><span class="w"> </span><span class="p">(</span><span class="n">brand_name</span><span class="p">,</span><span class="w"> </span><span class="n">company_name</span><span class="p">,</span><span class="w"> </span><span class="n">ordered</span><span class="p">,</span><span class="w"> </span><span class="n">description</span><span class="p">,</span><span class="w"> </span><span class="n">status</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;三只松鼠&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;三只松鼠股份有限公司&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;好吃不上火&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="s1">&#39;华为&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;华为技术有限公司&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="s1">&#39;小米&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;小米科技有限公司&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">50</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;are you ok&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>创建 <code>pojo</code>包, 并在包中添加 <code>Brand</code>实体类:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">pojo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">* 品牌
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Brand</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span> <span class="c1">// id 主键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">brandName</span><span class="o">;</span> <span class="c1">// 品牌名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">companyName</span><span class="o">;</span> <span class="c1">// 企业名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">ordered</span><span class="o">;</span> <span class="c1">// 排序字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">description</span><span class="o">;</span> <span class="c1">// 描述信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">status</span><span class="o">;</span> <span class="c1">// 状态：0：禁用  1：启用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getBrandName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">brandName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBrandName</span><span class="o">(</span><span class="n">String</span> <span class="n">brandName</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">brandName</span> <span class="o">=</span> <span class="n">brandName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCompanyName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">companyName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCompanyName</span><span class="o">(</span><span class="n">String</span> <span class="n">companyName</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">companyName</span> <span class="o">=</span> <span class="n">companyName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getOrdered</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ordered</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setOrdered</span><span class="o">(</span><span class="n">Integer</span> <span class="n">ordered</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">ordered</span> <span class="o">=</span> <span class="n">ordered</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">description</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDescription</span><span class="o">(</span><span class="n">String</span> <span class="n">description</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">description</span> <span class="o">=</span> <span class="n">description</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getStatus</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">status</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStatus</span><span class="o">(</span><span class="n">Integer</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">status</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Brand{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, brandName=&#39;&#34;</span> <span class="o">+</span> <span class="n">brandName</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, companyName=&#39;&#34;</span> <span class="o">+</span> <span class="n">companyName</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, ordered=&#34;</span> <span class="o">+</span> <span class="n">ordered</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, description=&#39;&#34;</span> <span class="o">+</span> <span class="n">description</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, status=&#34;</span> <span class="o">+</span> <span class="n">status</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="实现操作" data-numberify>实现操作<a class="anchor ms-1" href="#实现操作"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pojo.Brand</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.alibaba.druid.pool.DruidDataSourceFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.sql.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Properties</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 品牌数据的增删改查操作
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BrandDAO</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取Connection:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// - 导入jar包 &amp; 定义配置文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// - 加载配置文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Properties</span> <span class="n">prop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">prop</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;demo/src/druid.properties&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// - 获取连接池对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">dataSource</span> <span class="o">=</span> <span class="n">DruidDataSourceFactory</span><span class="o">.</span><span class="na">createDataSource</span><span class="o">(</span><span class="n">prop</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 查询所有
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 1. SQL: SELECT * FROM tb_brand
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 2. 参数: 不需要
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 3. 结果: ArrayList&lt;Brand&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Brand</span><span class="o">&gt;</span> <span class="nf">selectAll</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取数据库连接Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *2. 定义SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT * FROM tb_brand&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取pstmt对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">        <span class="c1">// *4. 设置参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *6. 处理结果: ArrayList&lt;Brand&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Brand</span> <span class="n">brand</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Brand</span><span class="o">&gt;</span> <span class="n">brands</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// - 遍历结果集
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 1. 获取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&#34;id&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">brandName</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;brand_name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">companyName</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;company_name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">ordered</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&#34;ordered&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">description</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;description&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">status</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&#34;status&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 2. 封装Brand对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">brand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Brand</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setCompanyName</span><span class="o">(</span><span class="n">companyName</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setOrdered</span><span class="o">(</span><span class="n">ordered</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setDescription</span><span class="o">(</span><span class="n">description</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 3. 装载ArrayList集合
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">brands</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">brand</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 7. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 8. 返回结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">brands</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 添加
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 1. SQL:
</span></span></span><span class="line"><span class="cl"><span class="cm">         INSERT INTO tb_brand(
</span></span></span><span class="line"><span class="cl"><span class="cm">            brand_name,
</span></span></span><span class="line"><span class="cl"><span class="cm">            company_name,
</span></span></span><span class="line"><span class="cl"><span class="cm">            ordered,
</span></span></span><span class="line"><span class="cl"><span class="cm">            description,
</span></span></span><span class="line"><span class="cl"><span class="cm">            status)
</span></span></span><span class="line"><span class="cl"><span class="cm">         VALUES(?,?,?,?,?)
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 2. 参数: 除了id之外的所有参数信息
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 3. 结果: boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">Brand</span> <span class="n">brand</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取数据库连接Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *2. 定义SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">                INSERT INTO tb_brand(
</span></span></span><span class="line"><span class="cl"><span class="s">                    brand_name,
</span></span></span><span class="line"><span class="cl"><span class="s">                    company_name,
</span></span></span><span class="line"><span class="cl"><span class="s">                    ordered,
</span></span></span><span class="line"><span class="cl"><span class="s">                    description,
</span></span></span><span class="line"><span class="cl"><span class="s">                    status)
</span></span></span><span class="line"><span class="cl"><span class="s">                VALUES(?,?,?,?,?)&#34;&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取pstmt对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *4. 设置参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getBrandName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getCompanyName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getOrdered</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getStatus</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span> <span class="c1">// 返回影响的行数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 7. 返回结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 修改
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 1. SQL:
</span></span></span><span class="line"><span class="cl"><span class="cm">         UPDATE tb_brand
</span></span></span><span class="line"><span class="cl"><span class="cm">         SET brand_name=?,
</span></span></span><span class="line"><span class="cl"><span class="cm">            company_name=?,
</span></span></span><span class="line"><span class="cl"><span class="cm">            ordered=?,
</span></span></span><span class="line"><span class="cl"><span class="cm">            description=?,
</span></span></span><span class="line"><span class="cl"><span class="cm">            status=?
</span></span></span><span class="line"><span class="cl"><span class="cm">         WHERE id=?
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 2. 参数: 所有
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 3. 结果: boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">update</span><span class="o">(</span><span class="n">Brand</span> <span class="n">brand</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取数据库连接Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *2. 定义SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">                UPDATE tb_brand
</span></span></span><span class="line"><span class="cl"><span class="s">                SET brand_name=?,
</span></span></span><span class="line"><span class="cl"><span class="s">                    company_name=?,
</span></span></span><span class="line"><span class="cl"><span class="s">                    ordered=?,
</span></span></span><span class="line"><span class="cl"><span class="s">                    description=?,
</span></span></span><span class="line"><span class="cl"><span class="s">                    status=?
</span></span></span><span class="line"><span class="cl"><span class="s">                WHERE id=?&#34;&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取pstmt对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *4. 设置参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getBrandName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getCompanyName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getOrdered</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getStatus</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">6</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span> <span class="c1">// 返回影响的行数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 8. 返回结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 删除
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 1. SQL:DELETE FROM tb_brand WHERE id=?
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 2. 参数: id
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 3. 结果: boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">deleteById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取数据库连接Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *2. 定义SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;DELETE FROM tb_brand WHERE id=?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取pstmt对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *4. 设置参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span> <span class="c1">// 返回影响的行数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 7. 返回结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Maven 基础</title>
      <link>/docs/spring/java-web/maven-base/</link>
      <pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/maven-base/</guid>
      <description><![CDATA[Maven 简介 Apache Maven是专门用于管理和构建Java项目的工具, 它基于项目对象模型 (POM) 的概念, 通过一小段描述信息来管理项目的构建, 报告和文档. Mav]]></description>
      <content:encoded><![CDATA[<h1 id="maven-简介" data-numberify>Maven 简介<a class="anchor ms-1" href="#maven-简介"></a></h1>
<p>Apache Maven是专门用于管理和构建Java项目的工具, 它基于项目对象模型 (POM) 的概念, 通过一小段描述信息来管理项目的构建, 报告和文档.</p>
<p>Maven的主要功能有:</p>
<ul>
<li>提供了一套标准化的项目结构.</li>
<li>提供了一套标准化的构建流程 (编译, 测试, 打包, 发布&hellip;).</li>
<li>提供了一套依赖管理机制.</li>
</ul>
<h2 id="maven-模型" data-numberify>Maven 模型<a class="anchor ms-1" href="#maven-模型"></a></h2>
<p>Maven模型包含:</p>
<ul>
<li>项目对象模型 (Project Object Model)</li>
<li>依赖管理模型 (Dependency)</li>
<li>插件 (Plugin)</li>
</ul>
<p>Maven模型图示:</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/maven-base/1662167147568.png" loading="lazy" width="740" height="333" />
</picture>

</p>
<p>其中紫色框框起来的部分, 就是用来完成标准化构建流程.</p>
<h2 id="仓库" data-numberify>仓库<a class="anchor ms-1" href="#仓库"></a></h2>
<p>Maven仓库是项目中依赖的第三方库, 这个库所在的位置叫做仓库 (在Maven的术语中，仓库是一个位置, place).</p>
<p>Maven中, 任何一个依赖、插件或者项目构建的输出，都可以称之为构件.
Maven仓库能帮助我们管理构件 (主要是JAR), 它就是放置所有JAR文件 (WAR, ZIP, POM等等) 的地方.</p>
<p>仓库有三种类型:</p>
<ul>
<li>本地 (local)</li>
<li>中央 (central)</li>
<li>远程 (remote)</li>
</ul>
<p>在项目中使用坐标引入对应依赖jar包后, Maven会按照本地仓库 &ndash;&gt; 远程仓库&ndash;&gt; 中央仓库的顺序去查找相应的jar包. 只要jar包存在, 如果是在本地仓库则直接使用, 而如果在远程仓库或中央仓库, Maven则将jar包自动下载到本地仓库.</p>
<h3 id="本地仓库" data-numberify>本地仓库<a class="anchor ms-1" href="#本地仓库"></a></h3>
<p>本地仓库在第一次执行maven命令的时候才被创建.</p>
<p>运行 Maven 的时候, Maven 所需要的任何构件都是直接从本地仓库获取的. 如果本地仓库没有, 它会首先尝试从远程仓库下载构件至本地仓库, 然后再使用本地仓库的构件.</p>
<p>Maven 本地仓库默认为用户主目录 (USER HOME) 中的 <code>.m2/repository</code>.</p>
<h3 id="中央仓库" data-numberify>中央仓库<a class="anchor ms-1" href="#中央仓库"></a></h3>
<p>Maven 中央仓库是由 Maven 社区提供的仓库, 其中包含了大量常用的库.</p>
<p>中央仓库包含了绝大多数流行的开源Java构件, 以及源码、作者信息、SCM、信息、许可证信息等. 一般来说，简单的Java项目依赖的构件都可以在这里下载到.</p>
<p>Maven 社区提供了一个 URL: <a href="http://search.maven.org/#browse" target="_blank" rel="noopener noreferrer">search.maven.org/#browse<i class="fas fa-external-link-square-alt ms-1"></i></a>, 来浏览中央仓库的内容.</p>
<h3 id="远程仓库" data-numberify>远程仓库<a class="anchor ms-1" href="#远程仓库"></a></h3>
<p>远程仓库是开发人员自己定制的仓库, 包含了所需要的代码库或者其他工程中用到的 jar 文件. 一般是由公司团队搭建的私有仓库.</p>
<hr>
<h1 id="maven标准化项目结构" data-numberify>Maven标准化项目结构<a class="anchor ms-1" href="#maven标准化项目结构"></a></h1>
<p>Maven提供了一套标准化的项目结构, 所有的IDE使用Maven构建的项目完全一样. 所以, 使用Maven创建的项目在所有IDE中可以通用.</p>
<p>使用Maven构建的项目结构示例:</p>
<ul>
<li>📁<code>project_name</code> &mdash; 项目主目录
<ul>
<li>📁<code>src</code> &mdash; 源代码和测试代码文件目录
<ul>
<li>📁<code>main</code> &mdash; 源代码文件目录
<ul>
<li>📁<code>java</code> &mdash; 源代码Java文件目录</li>
<li>📁<code>resourcs</code> &mdash; 源代码配置文件目录</li>
</ul>
</li>
<li>📁<code>test</code> &mdash; 测试代码文件目录
<ul>
<li>📁<code>java</code> &mdash; 测试代码Java文件目录</li>
<li>📁<code>resource</code> &mdash; 测试代码配置</li>
</ul>
</li>
<li>📄<code>pom.xml</code> &mdash; 项目核心配置文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="项目核心配置文件-pomxml" data-numberify>项目核心配置文件 pom.xml<a class="anchor ms-1" href="#项目核心配置文件-pomxml"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0
</span></span></span><span class="line"><span class="cl"><span class="s">                      http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 模型版本 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- The Basics --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 公司或者组织的唯一标志 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>...<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 当前项目唯一ID --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>...<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 本项目目前所处的版本号 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>...<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 打包的机制 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;packaging&gt;</span>...<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 项目依赖关系 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependencies&gt;</span>...<span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;parent&gt;</span>...<span class="nt">&lt;/parent&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependencyManagement&gt;</span>...<span class="nt">&lt;/dependencyManagement&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;modules&gt;</span>...<span class="nt">&lt;/modules&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- pom常量 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;properties&gt;</span>...<span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- Build Settings --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;build&gt;</span>...<span class="nt">&lt;/build&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;reporting&gt;</span>...<span class="nt">&lt;/reporting&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- More Project Information --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 项目的名称 --&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;name&gt;</span>...<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 项目的详细描述 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;description&gt;</span>...<span class="nt">&lt;/description&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 项目主页的URL --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;url&gt;</span>...<span class="nt">&lt;/url&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;inceptionYear&gt;</span>...<span class="nt">&lt;/inceptionYear&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;licenses&gt;</span>...<span class="nt">&lt;/licenses&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;organization&gt;</span>...<span class="nt">&lt;/organization&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;developers&gt;</span>...<span class="nt">&lt;/developers&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;contributors&gt;</span>...<span class="nt">&lt;/contributors&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- Environment Settings --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;issueManagement&gt;</span>...<span class="nt">&lt;/issueManagement&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;ciManagement&gt;</span>...<span class="nt">&lt;/ciManagement&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;mailingLists&gt;</span>...<span class="nt">&lt;/mailingLists&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;scm&gt;</span>...<span class="nt">&lt;/scm&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;prerequisites&gt;</span>...<span class="nt">&lt;/prerequisites&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 发现依赖和扩展的远程仓库列表 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;repositories&gt;</span>...<span class="nt">&lt;/repositories&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;pluginRepositories&gt;</span>...<span class="nt">&lt;/pluginRepositories&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;distributionManagement&gt;</span>...<span class="nt">&lt;/distributionManagement&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;profiles&gt;</span>...<span class="nt">&lt;/profiles&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>pom.xml中描述符的根为<code>&lt;project&gt;</code>.</p>
<h2 id="maven坐标" data-numberify>Maven坐标<a class="anchor ms-1" href="#maven坐标"></a></h2>
<ul>
<li>Maven 中的坐标是资源的唯一标识.</li>
<li>使用坐标来<u>定义项目</u>或<u>引入项目中需要的依赖</u>.</li>
</ul>
<p>Maven坐标的主要组成 (在pom.xml文件中):</p>
<ul>
<li><code>&lt;groupId&gt;</code>: 公司或者组织的唯一标志. 配置时生成的路径也是由此生成. 如<code>com.linner.blog</code> (通常是域名反写), Maven会将该项目打成的jar包放本地路径：<code>/com/linner/blog</code>.</li>
<li><code>&lt;artifactId&gt;</code>: 当前项目的唯一ID (通常是模块名称). 一个groupId下面可能多个项目, 就是靠<code>&lt;artifactId&gt;</code>来区分.</li>
<li><code>&lt;version&gt;</code>: 本项目目前所处的版本号.</li>
</ul>
<p>Maven 中, 根据 <code>groupId</code>、<code>artifactId</code>、<code>version</code> 组合成 <code>groupId:artifactId:version</code> 来唯一识别一个 jar 包. 这三个标签构成了Maven坐标.</p>
<h2 id="其他基本配置" data-numberify>其他基本配置<a class="anchor ms-1" href="#其他基本配置"></a></h2>
<ul>
<li><code>&lt;modelVersion&gt;</code>: 指定pom.xml符合哪个版本的描述符. Maven2和3只能为<code>4.0.0</code>.</li>
<li><code>&lt;packaging&gt;</code>: 打包的机制. 有以下几种:
<ul>
<li>pom</li>
<li>jar &mdash; 默认值</li>
<li>maven-plugin</li>
<li>ejb</li>
<li>war</li>
<li>ear</li>
<li>rar</li>
<li>par</li>
</ul>
</li>
<li><code>&lt;dependencies&gt;</code>: 定义本项目的依赖关系.</li>
</ul>
<hr>
<h1 id="maven依赖管理" data-numberify>Maven依赖管理<a class="anchor ms-1" href="#maven依赖管理"></a></h1>
<p>依赖管理是指管理项目中所依赖的第三方资源 (jar包, 插件). 而Maven使用标准的<mark>坐标</mark>配置来管理各种依赖, 只需要简单的配置就可以完成依赖管理.</p>
<p>Maven的依赖资源是在pom.xml配置文件中的<code>&lt;dependencies&gt;</code>描述的. 其结构如下:</p>
<ul>
<li><code>&lt;project&gt;</code>
<ul>
<li>&hellip;</li>
<li><code>&lt;dependencies&gt;</code>
<ul>
<li><code>&lt;dependency&gt;</code>: 一个<code>&lt;dependency&gt;</code>代表一个依赖项.
<code>&lt;groupId&gt;</code>, <code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>的含义与<code>&lt;project&gt;</code>的子标签<code>&lt;groupId&gt;</code>, <code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>的含义相同.
<ul>
<li><code>&lt;groupId&gt;</code></li>
<li><code>&lt;artifactId&gt;</code></li>
<li><code>&lt;version&gt;</code></li>
<li><code>&lt;type&gt;</code>: 依赖的打包机制. 对应<code>&lt;packaging&gt;</code>的类型, 有pom, jar(默认), maven-plugin, ejb, war, ear, rar, par.</li>
<li><code>&lt;scope&gt;</code>: 任务的类路径 (编译和运行时, 测试等) 以及如何限制依赖关系的传递性.
<table>
<thead>
<tr>
<th style="text-align:center">scope取值</th>
<th style="text-align:center">有效范围(compile, runtime, test)</th>
<th style="text-align:center">依赖传递</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>compile</code></td>
<td style="text-align:center">all</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>provided</code></td>
<td style="text-align:center">compile, test</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center"><code>runtime</code></td>
<td style="text-align:center">runtime, test</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>test</code></td>
<td style="text-align:center">test</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center"><code>system</code></td>
<td style="text-align:center">compile, test</td>
<td style="text-align:center">是</td>
</tr>
</tbody>
</table>
</li>
<li><code>&lt;optional&gt;</code></li>
<li><code>&lt;exclusions&gt;</code>
<ul>
<li><code>&lt;exclusion&gt;</code>
<ul>
<li><code>&lt;groupId&gt;</code></li>
<li><code>&lt;artifactId&gt;</code></li>
</ul>
</li>
<li><code>&lt;exclusion&gt;</code>
<ul>
<li>&hellip;</li>
</ul>
</li>
<li>多个<code>&lt;exclusion&gt;</code>&hellip;</li>
</ul>
</li>
</ul>
</li>
<li>多个<code>&lt;dependency&gt;</code>&hellip;</li>
</ul>
</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<p><code>&lt;scope&gt;</code>取值说明:</p>
<hr>
<h1 id="maven常用命令" data-numberify>Maven常用命令<a class="anchor ms-1" href="#maven常用命令"></a></h1>
<ul>
<li><code>compile</code>: 编译</li>
<li><code>clean</code>: 清理</li>
<li><code>test</code>: 测试</li>
<li><code>package</code>: 打包</li>
<li><code>install</code>: 安装</li>
</ul>
<p>使用Maven命令需要先配置PATH, 然后在项目目录下执行.</p>
<p>例如项目路径为<code>~/project</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~/project
</span></span></code></pre></div><h2 id="编译" data-numberify>编译<a class="anchor ms-1" href="#编译"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn compile
</span></span></code></pre></div><p>第一次执行该命令, Maven会自动从仓库 (中央仓库或远程仓库, 介绍常用命令时, 如无特别指出, 仓库均指中央仓库或远程仓库) 下载编译所需的jar插件包. 然后在项目下会生成一个 <code>target</code> 目录. 编译后的字节码文件就放在该目录下.</p>
<h2 id="清理" data-numberify>清理<a class="anchor ms-1" href="#清理"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn clean
</span></span></code></pre></div><p>第一次执行该命令, Maven会从仓库下载清理所需要的jar插件包. 接着便使用插件清除项目下的<code>target</code>目录.</p>
<h2 id="打包" data-numberify>打包<a class="anchor ms-1" href="#打包"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn package
</span></span></code></pre></div><p>第一次执行该命令, Maven会从仓库下载打包所需要的jar插件包. 然后在项目的 <code>terget</code> 目录下生成一个jar包 (将当前项目打成的jar包).</p>
<h2 id="测试" data-numberify>测试<a class="anchor ms-1" href="#测试"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn <span class="nb">test</span>
</span></span></code></pre></div><p>该命令会执行所有的测试代码, 即<code>project/scr/text</code>下的代码.</p>
<h2 id="安装" data-numberify>安装<a class="anchor ms-1" href="#安装"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn install
</span></span></code></pre></div><p>该命令会将当前项目打成jar包, 并安装到本地仓库. 执行完上述命令后可以到本地仓库查看结果. 仓库中的路径为pom.xml文件中<code>&lt;groupId&gt;</code>相应的路径, 生成的jar包名为<code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>组成的内容.</p>
<hr>
<h1 id="maven生命周期" data-numberify>Maven生命周期<a class="anchor ms-1" href="#maven生命周期"></a></h1>
<p>Maven 构建项目生命周期描述的是一次构建过程经历经历了多少个事件.</p>
<p>Maven对项目构建的生命周期划分为3套:</p>
<ul>
<li>clean: 清理工作.</li>
<li>default: 核心工作, 例如编译, 测试, 打包, 安装等.</li>
<li>site:  产生报告, 发布站点等. 这套声明周期一般不会使用.</li>
</ul>
<p>同一套生命周期内, 执行后边的命令, 前面的所有命令会自动执行.</p>
<p>default 生命周期如下:</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/maven-base/1662167229604.png" loading="lazy" width="388" height="83" />
</picture>

</p>
<p>如执行<code>install</code>命令, maven会按照上图中从左到右的顺序先执行<code>compile</code>, 再执行<code>test</code>, <code>package</code>, 最后执行<code>install</code>; 如果执行<code>package</code>, 除了<code>install</code>命令, 其它命令按照上图左到右顺序执行.</p>
<blockquote>
<p>默认的生命周期其实有对应的很多命令, 上图中只展示了常用的.</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>JDBC</title>
      <link>/docs/spring/java-web/jdbc/</link>
      <pubDate>Fri, 12 Aug 2022 14:46:53 +0000</pubDate>
      
      <guid>/docs/spring/java-web/jdbc/</guid>
      <description><![CDATA[JDBC 简介 JDBC (Java DataBase Connectivity, Java 数据库连接) 是使用Java语言操作关系型数据库的一套 API. JDBC其实是SUN公司制订的一套操作数据库的标准接口. JDBC中定义]]></description>
      <content:encoded><![CDATA[<h1 id="jdbc-简介" data-numberify>JDBC 简介<a class="anchor ms-1" href="#jdbc-简介"></a></h1>
<p>JDBC (Java DataBase Connectivity, Java 数据库连接) 是使用Java语言操作关系型数据库的一套 API.</p>
<p>JDBC其实是SUN公司制订的一套操作数据库的标准接口. JDBC中定义了所有操作关系型数据库的规则. 由各自的数据库厂商给出实现类 (驱动jar包).</p>
<p>Java, JDBC和各种数据库的关系如下图:</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/jdbc/1662106467207.png" loading="lazy" width="756" height="421" />
</picture>

</p>
<p>使用JDBC的好处:</p>
<ul>
<li>不需要针对不同数据库分别开发.</li>
<li>可随时替换底层数据库, 访问数据库的Java代码基本不变.</li>
</ul>
<hr>
<h1 id="jdbc-使用的基本步骤" data-numberify>JDBC 使用的基本步骤<a class="anchor ms-1" href="#jdbc-使用的基本步骤"></a></h1>
<ol>
<li>
<p>导入JDBC驱动jar包:</p>
<ul>
<li>
<p>下载MySQL jar驱动包, <a href="https://www.runoob.com/java/java-mysql-connect.html#:~:text=Java%20%E8%BF%9E%E6%8E%A5%20MySQL%20%E9%9C%80%E8%A6%81%E9%A9%B1%E5%8A%A8%E5%8C%85%EF%BC%8C%E6%9C%80%E6%96%B0%E7%89%88%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E4%B8%BA%EF%BC%9A%20http%3A%2F%2Fdev.mysql.com%2Fdownloads%2Fconnector%2Fj%2F%20%EF%BC%8C%E8%A7%A3%E5%8E%8B%E5%90%8E%E5%BE%97%E5%88%B0%20jar%20%E5%BA%93%E6%96%87%E4%BB%B6%EF%BC%8C%E7%84%B6%E5%90%8E%E5%9C%A8%E5%AF%B9%E5%BA%94%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AF%BC%E5%85%A5%E8%AF%A5%E5%BA%93%E6%96%87%E4%BB%B6%E3%80%82,%E4%BD%A0%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%E6%9C%AC%E7%AB%99%E6%8F%90%E4%BE%9B%E7%9A%84%20jar%20%E5%8C%85%EF%BC%9A%20mysql-connector-java-5.1.39-bin.jar%20%E6%9C%AC%E5%AE%9E%E4%BE%8B%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF%20Eclipse%EF%BC%8C%E5%AF%BC%E5%85%A5%20jar%20%E5%8C%85%EF%BC%9A" target="_blank" rel="noopener noreferrer">菜鸟教程 Java MySQL 连接<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
</li>
<li>
<p>在项目中, 将下载好的jar包放入项目的 <code>lib</code>目录中.</p>
</li>
<li>
<p>然后点击鼠标右键&ndash;&gt;Add as Library (添加为库).</p>
</li>
<li>
<p>在添加为库文件的时候，有如下三个选项:</p>
<ul>
<li>
<p>Global Library: 全局有效</p>
</li>
<li>
<p>Project Library: 项目有效</p>
</li>
<li>
<p>Module Library: 模块有效</p>
<p>选择Global Library.</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>注册驱动:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="o">);</span>
</span></span></code></pre></div><blockquote>
<p>MySQL提供的 <code>Driver</code>的静态代码块会自动执行 <code>DriverManager.registerDriver()</code> 方法来注册驱动. 所以我们只需加载 <code>Driver</code>即可.
MySQL5之后的驱动包, 可以省略注册驱动的步骤.</p>
</blockquote>
</li>
<li>
<p>获取数据库连接:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span></code></pre></div><ul>
<li>
<p>其中, <code>url</code>, <code>username</code>和 <code>password</code>都是 <code>String</code>类型.</p>
</li>
<li>
<p><code>url</code>格式:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">jdbc:数据库软件名称://ip地址或域名:端口/数据库名称?参数键值对1&amp;参数键值对2...
</span></span></code></pre></div><p>例如, 连接本地mysql中名为test的数据库:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">jdbc:mysql://127.0.0.1:3306/test
</span></span></code></pre></div><p>本地mysql, 且端口为3306, url可简写为:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">jdbc:mysql:///数据库名称?参数键值对
</span></span></code></pre></div><p>常用的参数键值对有:</p>
<pre tabindex="0"><code>useSSL=false            // 禁用安全连接方式, 解决警告提示
useServerPrepStmts=true // 开启预编译(默认为false)
serverTimezone=GMT%2B8  // 设置时区, 东八区(即GMT+8)
serverTimezone=Asia/Shanghai    // 设置时区东八区
useUnicode=true&amp;characterEncoding=UTF-8 // 设置字符集为UTF-8
</code></pre></li>
</ul>
</li>
<li>
<p>获取执行SQL对象:</p>
<p>执行SQL语句需要SQL执行对象 (<code>Statement</code>对象):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Statement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
</span></span></code></pre></div><p><code>Statement</code>对象存在安全问题 (SQL注入等问题), 而使用 <code>PreparedStatement</code>不仅可以提升查询速度, 而且还能防止SQL注入问题.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;...SQL语句...&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p>执行SQL语句:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div><p>用于执行DML, DDL语句.</p>
<p>或者:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div><p>用于执行DQL语句.</p>
</li>
<li>
<p>处理返回结果</p>
</li>
<li>
<p>释放资源:</p>
<p><code>ResultSet</code>、<code>Statement</code>和 <code>Connection</code>对象都要 <code>&lt;i&gt;</code>按照顺序 <code>&lt;/i&gt;</code>释放资源.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">stmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span></code></pre></div></li>
</ol>
<p>大致代码如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.sql.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JDBCDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 接收用户输入的用户名和密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;...&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">pwd</span> <span class="o">=</span> <span class="s">&#34;...&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 注册驱动（装载类，并实例化）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;jdbc:mysql://127.0.0.1:3306/test&#34;</span> <span class="o">+</span> 
</span></span><span class="line"><span class="cl">                <span class="s">&#34;?useServerPrepStmts=true&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">&#34;root&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">&#34;1234&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 定义SQL语句 (用?作占位符)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 4. 获取执行SQL的PreparedStatement对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置参数（?）的值 pstmt.setXxx(index, value)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">pwd</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 处理结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">                ...
</span></span></span><span class="line"><span class="cl"><span class="cm">            */</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 7. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="preparedstatement-对象" data-numberify>PreparedStatement 对象<a class="anchor ms-1" href="#preparedstatement-对象"></a></h1>
<p>PreparedStatement 对象可以:</p>
<ul>
<li>预编译SQL语句并执行</li>
<li>预防SQL注入问题</li>
</ul>
<p>获取 <code>PreparedStatement</code>需要先传入SQL语句:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// SQL语句中的参数值,使用 ? 占位符替代
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 通过Connection对象获取PreparedStatement, 并传入对应的SQL语句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div><p>接着我们需要设置SQL对象中的参数值:</p>
<p>使用 <code>pstmt.setXxx(index, value)</code>, 给 <code>?</code> 赋值. 其中, <code>index</code>的值从 <code>1</code>开始, <code>value</code>的类型为 <code>Xxx</code>或 <code>xxx</code>.</p>
<p>例如, 给 <code>int</code>类型的 <code>value</code>赋值使用 <code>setInt()</code>, <code>String</code>类型使用 <code>setString()</code>. 除此之外还有 <code>setFloat()</code>, <code>setDouble()</code>, <code>setArray()</code>, <code>setByte()</code>等.</p>
<p>如果 <code>prepareStatement()</code>方法传入的是DML, DDL语句, 则使用 <code>executeUpdate()</code> 方法:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">executeUpdate</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>如果该方法执行的是DML语句 (<code>INSERT</code>, <code>UPDATE</code>和 <code>DELETE</code>), 则返回DML语句操作的行数; 如果是DDL语句则返回 0.</p>
<blockquote>
<p>需要注意, 在开发中很少使用java代码操作DDL语句.</p>
</blockquote>
<p>如果 <code>prepareStatement()</code>方法传入的是DQL语句 (<code>SELECT</code>), 使用的是 <code>executeQuery()</code> 方法:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ResultSet</span> <span class="nf">executeQuery</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>该方法返回的是DQL语句查询后的结果集.</p>
<p>在使用 <code>PreparedStatement</code>对象后, 需要使用 <code>close()</code>方法释放资源.</p>
<h2 id="statement-和-preparedstatement" data-numberify>Statement 和 PreparedStatement<a class="anchor ms-1" href="#statement-和-preparedstatement"></a></h2>
<p><code>Statement</code> 对象的一般用法如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;UPDATE tb_user SET password = \&#34;abc\&#34; WHERE id = 1&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Statement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">stmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div><p><code>Statement</code>的SQL语句是作为 <code>executeUpdate()</code>和 <code>executeQuery()</code>的参数传入, 而 <code>PreparedStatement</code>则是在创建对象就已经作为 <code>prepareStatement()</code>方法的参数传入.</p>
<p>这是因为 <code>PreparedStatement</code>需要预先传入SQL语句, 来起到预编译SQL语句和预防SQL注入问题.</p>
<h2 id="预编译" data-numberify>预编译<a class="anchor ms-1" href="#预编译"></a></h2>
<p>一般情况下, java执行SQL语句的过程如下:</p>
<p>java程序请求数据库执行SQL语句后:</p>
<ul>
<li>检查: 数据库接收指令, 检查SQL语法</li>
<li>编译: 如果SQL语句无语法错误, 则将该语句编译成可执行的函数</li>
<li>执行: 编译完成后执行SQL语句</li>
</ul>
<p>而检查SQL和编译SQL花费的时间比执行SQL的时间还要长, 如果需要一次性执行多条SQL语句, 那会浪费大量时间和资源. 所以, <code>PreparedStatement</code>的出现解决了这个问题.</p>
<p>通过使用 <code>PreparedStatement</code>对象, 并且在连接数据库的 <code>url</code>中添加 <code>useServerPrepStmts=true</code>参数来开启SQL语句预编译功能. 预编译功能会将我们设置的SQL语句 (如 <code>&quot;SELECT id,username,password FROM tb_user WHERE username = ? AND password = ?&quot;</code>) 预先传给数据库, 让其先完成检查和编译的工作 (先完成耗时的工作), 然后再一次性执行所有SQL语句 (这些SQL语句都是相同的, 只是占位符处设置的值不同).</p>
<h2 id="sql注入" data-numberify>SQL注入<a class="anchor ms-1" href="#sql注入"></a></h2>
<p>SQL注入是指通过把SQL命令插入到Web表单提交, 或输入域名或页面请求的查询字符串, 最终达到欺骗服务器执行恶意的SQL命令.</p>
<p>而 <code>PreparedStatement</code>通过在SQL语句中使用 <code>?</code>占位符, 并且使用相应的 <code>setXxx()</code>方法来设置值 (设置的值如果含有特殊字符, 如 <code>&quot;</code> 和 <code>'</code> 等, 则会进行转义), 防止了SQL注入的发生.</p>
<p>下面代码说明了 <code>PreparedStatement</code>如何防止SQL注入:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// useServerPrepStmts=true开启预编译
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;jdbc:mysql:///test?useSSL=false&amp;useServerPrepStmts=true&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">&#34;root&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">&#34;n546,Lin0&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 接收用户输入的用户名和密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;zhangsan&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">pwd</span> <span class="o">=</span> <span class="s">&#34;&#39; OR &#39;1&#39; = &#39;1&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 定义SQL（用?作占位符）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 获取PreparedStatement对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   - 预编译SQL，性能更高
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//     默认关闭，在url加上参数useServerPrepStmts=true开启
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   - 防止SQL注入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 设置参数（?）的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   - 防注入原理：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//     字符串参数在setString中会被转义，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//     即整个参数被当成sql里面的字符串，而不是java的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 从mysql日志文件可以发现：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// &#39; OR &#39;1&#39; = &#39;1 转义成了 \&#39; OR \&#39;1\&#39; = \&#39;1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">pwd</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 判读登录是否成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;登录成功！&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;登陆失败！&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>下面代码演示了把SQL代码片段插入到SQL命令, 来进行免密登录:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">LoginInject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;jdbc:mysql:///test&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">&#34;root&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">&#34;1234&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 接收用户输入的用户名和密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;abcdefg&#34;</span><span class="o">;</span> <span class="c1">// 用户名随意
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">pwd</span> <span class="o">=</span> <span class="s">&#34;&#39; OR &#39;1&#39; = &#39;1&#34;</span><span class="o">;</span> <span class="c1">// 密码传入SQL代码片段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = &#39;&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;&#39; AND password = &#39;&#34;</span><span class="o">+</span> <span class="n">pwd</span> <span class="o">+</span> <span class="s">&#34;&#39;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将sql语句where部分展开：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// WHERE username = &#39;abcdefg&#39; AND password = &#39;&#39; OR &#39;1&#39; = &#39;1&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 发现where语句条件始终为真
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Statement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">stmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 判读登录是否成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;登录成功！&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;登陆失败！&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 返回的是登录成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">stmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="resultset-对象" data-numberify>ResultSet 对象<a class="anchor ms-1" href="#resultset-对象"></a></h1>
<p><code>ResultSet</code> (结果集对象) 作用: 封装了SQL查询语句的结果, 是 <code>executeQuery()</code>方法的返回值类型.</p>
<p><code>ResultSet</code>对象有三个方法:</p>
<ul>
<li>
<p><code>next()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">boolean</span> <span class="nf">next</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>每次执行时, 将光标从当前位置向前移动一行 (光标从第0行开始), 并且判断当前行是否为有效行 (返回 <code>true</code>则代表为有效行)。</p>
</li>
<li>
<p><code>getXxx()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">xxx</span> <span class="nf">getXxx</span><span class="o">(</span><span class="n">arg</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>arg类型:</p>
<ul>
<li><code>int</code>: 代表列的编号 (按照 <code>SELECT</code>语句中的查询顺序), 从1开始</li>
<li><code>String</code>: 列的名称</li>
</ul>
</li>
<li>
<p><code>close()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">close</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>释放 <code>ResultSet</code>对象.</p>
</li>
</ul>
<p>下面演示了 <code>ResultSet</code>的使用:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password FROM tb_user&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Statement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// - 处理结果，遍历rs中的所有数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   - rs.next()：光标向下移动一行，并判断当前行是否有效
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// - 获取数据 getXxx()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// getXxx()方法可以使用列索引（从1开始）也可以使用列名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">String</span> <span class="n">usrname</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">passwd</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;id: &#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;username: &#34;</span> <span class="o">+</span> <span class="n">usrname</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;passwd: &#34;</span> <span class="o">+</span> <span class="n">passwd</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;-----------------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// - 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// ResultSet、Statement和Connection都要按照顺序释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 先释放ResultSet, 再释放Statement, 最后是Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">stmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="操作实例" data-numberify>操作实例<a class="anchor ms-1" href="#操作实例"></a></h1>
<p>用户账号密码增删改操作.</p>
<p>在编写JDBC代码之前需要先完成创建数据库, 创建 <code>pojo</code>包并编写 <code>User</code>实体类的工作:</p>
<ol>
<li>
<p>创建数据库并运行下方SQL代码:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1">-- 删除tb_user表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">tb_user</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 创建tb_user表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="nf">tb_user</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="kt">INT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="kp">AUTO_INCREMENT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">username</span><span class="w"> </span><span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">password</span><span class="w"> </span><span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 添加数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="k">VALUES</span><span class="p">(</span><span class="no">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;zhangsan&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;123&#39;</span><span class="p">),</span><span class="w"> </span><span class="p">(</span><span class="no">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;lisi&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;234&#39;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>创建 <code>pojo</code>包, 并在包中添加 <code>User</code>实体类:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">pojo</span><span class="o">;</span> <span class="c1">// pojo包存放实体类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Account{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, username=&#39;&#34;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, password=&#39;&#34;</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="增删改操作" data-numberify>增删改操作<a class="anchor ms-1" href="#增删改操作"></a></h2>
<p>JDBC数据访问层的代码放在 <code>DAO</code>包下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pojo.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.sql.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDAO</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">URL</span> <span class="o">=</span> <span class="s">&#34;jdbc:mysql:///test&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;?useSSL=false&amp;useServerPrepStmts=true&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">USERNAME</span> <span class="o">=</span> <span class="s">&#34;root&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">PASSWORD</span> <span class="o">=</span> <span class="s">&#34;1234&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据用户名和密码查询
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param username
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param password
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return User
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @throws SQLException
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">select</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 参数有null值时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">username</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">password</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 连接数据库
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">URL</span><span class="o">,</span> <span class="n">USERNAME</span><span class="o">,</span> <span class="n">PASSWORD</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取PreparedStatement对象, 并设置SQL语句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id, username, password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取ResultSet
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">Integer</span> <span class="n">id</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&#34;id&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">pw</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">pw</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据用户名和密码添加数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param username
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param password
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @throws SQLException
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">URL</span><span class="o">,</span> <span class="n">USERNAME</span><span class="o">,</span> <span class="n">PASSWORD</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;INSERT INTO tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; VALUE(null, ?, ?)&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据用户名和密码删除数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param username
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param password
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @throws SQLException
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">URL</span><span class="o">,</span> <span class="n">USERNAME</span><span class="o">,</span> <span class="n">PASSWORD</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;DELETE FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>

