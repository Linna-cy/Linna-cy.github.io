<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Spring on Linner&#39;s Blog</title>
    <link>/tags/spring/</link>
    <description>Recent content in Spring on Linner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>Copyright © 2020-2023 Linner. All Rights Reserved.
</copyright>
    <lastBuildDate>Mon, 24 Jul 2023 02:58:36 +0800</lastBuildDate><atom:link href="/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nacos 部署</title>
      <link>/docs/spring/springcloud/nacos-deploy/</link>
      <pubDate>Mon, 24 Jul 2023 02:58:36 +0800</pubDate>
      
      <guid>/docs/spring/springcloud/nacos-deploy/</guid>
      <description><![CDATA[本地部署 Nacos是一个开源项目，已经在Github上开源。在本地搭建Nacos需要访问Nacos项目仓库，你可以选择将该项目clone到本]]></description>
      <content:encoded><![CDATA[<h1 id="本地部署" data-numberify>本地部署<a class="anchor ms-1" href="#本地部署"></a></h1>
<p>Nacos是一个开源项目，已经在Github上开源。在本地搭建Nacos需要访问<a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener noreferrer">Nacos项目仓库<i class="fas fa-external-link-square-alt ms-1"></i></a>，你可以选择将该项目<code>clone</code>到本地自己打包后部署，也可以选择直接访问<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener noreferrer">Nacos的Releases页面<i class="fas fa-external-link-square-alt ms-1"></i></a>下载已经打包好的项目压缩文件进行部署。你也可以访问<a href="https://nacos.io/zh-cn/" target="_blank" rel="noopener noreferrer">Nacos官网<i class="fas fa-external-link-square-alt ms-1"></i></a>查看如何部署。</p>
<ul>
<li>
<p><code>clone</code>到本地：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git clone https://github.com/alibaba/nacos
</span></span></code></pre></div></li>
<li>
<p>访问<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener noreferrer">Nacos的Releases页面<i class="fas fa-external-link-square-alt ms-1"></i></a>：</p>
<p><picture><img class="img-fluid " alt="Nacos的Releases页面" src="/docs/spring/springcloud/nacos-deploy/uTools_1690139609912.png" loading="lazy" width="1715" height="946" />
</picture>

</p>
<p>选择自己想要的版本（如<code>2.2.3</code>）进行下载：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springcloud/nacos-deploy/uTools_1690139697680.png" loading="lazy" width="1021" height="252" />
</picture>

</p>
<p>无论是选择下载<code>.zip</code>还是<code>.tar.gz</code>后缀的压缩包都可以。但是在Linux环境下选择下载<code>.tar.gz</code>为佳。</p>
<p>Linux中解压<code>.tar.gz</code>的命令如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">tar -zxvf 压缩包文件名.tar.gz
</span></span></code></pre></div></li>
</ul>
<p>将下载好的压缩包解压到任意非中文目录下。解压好的目录结构大致如下：</p>
<p><picture><img class="img-fluid " alt="Nacos目录结构" src="/docs/spring/springcloud/nacos-deploy/uTools_1690140191883.png" loading="lazy" width="116" height="198" />
</picture>

</p>
<ul>
<li>
<p><code>target</code>：存放Nacos<code>jar</code>包的目录。</p>
</li>
<li>
<p><code>logs</code>：存放日志文件。</p>
</li>
<li>
<p><code>conf</code>：存放项目的配置文件（如<code>application.properties</code>等）以及搭建存放Nacos配置信息的数据库的<code>.sql</code>脚本文件（如<code>nacos-mysql.sql</code>等）。</p>
</li>
<li>
<p><code>bin</code>：存放启动和关闭Nacos Server的脚本文件以及一些其它的文件。</p>
<p>在Windows系统中启动和关闭Nacos使用的是<code>.cmd</code>文件，即<code>startup.cmd</code>和<code>shutdown.cmd</code>，分别对应启动和关闭。在Linux系统中使用的是<code>.sh</code>文件，<code>startup.sh</code>启动，<code>shutdown.sh</code>关闭。</p>
<p>使用<code>startup.cmd</code>或<code>startup.sh</code>默认为集群模式，可以添加参数<code>-m standalone</code>使用单机模式启动。</p>
<p>Windows系统：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl"><span class="k">cd</span> Nacos的路径\bin
</span></span><span class="line"><span class="cl">.\startup.cmd -m standalone
</span></span></code></pre></div><p>Linux系统：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">cd</span> Nacos的路径/bin
</span></span><span class="line"><span class="cl">./startup.sh -m standalone
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>在Windows系统和Linux系统上进行本地简单地部署Nacos并没有区别，这里不再分别进行赘述。</p>
</blockquote>
<p>访问<a href="http://localhsot:8848/nacos" target="_blank" rel="noopener noreferrer">http://localhsot:8848/nacos<i class="fas fa-external-link-square-alt ms-1"></i></a>即可。默认的用户名和密码均为<code>nacos</code>。</p>
<p>启动成功后的Nacos大概长这样子：</p>
<p><picture><img class="img-fluid " alt="Nacos 页面" src="/docs/spring/springcloud/nacos-deploy/uTools_1690143487422.png" loading="lazy" width="1919" height="682" />
</picture>

</p>
<hr>
<h1 id="基于-mysql-数据库部署" data-numberify>基于 MySQL 数据库部署<a class="anchor ms-1" href="#基于-mysql-数据库部署"></a></h1>
<p>Nacos可以使用MySQL数据库存放配置信息。首先需要确保你的电脑上有MySQL。</p>
<blockquote>
<p>注意：使用MySQL搭建Nacos的数据库，推荐使用MySQL 5，因为Nacos的MySQL驱动版本可以不支持MySQL 8。如果非要使用MySQL 8，可以在Nacos中升级MySQL的驱动。</p>
</blockquote>
<p>首先在MySQL中新建一个数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="n">nacos</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">USE</span><span class="w"> </span><span class="n">nacos</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">source</span><span class="w"> </span><span class="s2">&#34;Nacos的路径/bin/mysql-schema.sql&#34;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>创建成功后的Nacos数据库如下：</p>
<p><picture><img class="img-fluid " alt="Nacos数据库的表" src="/docs/spring/springcloud/nacos-deploy/uTools_1690142171755.png" loading="lazy" width="184" height="290" />
</picture>

</p>
<p>接着修改在<code>conf</code>目录里的<code>application.properties</code>文件（如果没有，就将<code>application.properties.example</code>文件复制一份，改名为<code>application.properties</code>）。需要修改的配置如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1"># 数据源</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.platform</span><span class="o">=</span><span class="s">mysql</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库数量</span>
</span></span><span class="line"><span class="cl"><span class="na">db.num</span><span class="o">=</span><span class="s">1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 连接第1个数据库的url（替换成自己的）</span>
</span></span><span class="line"><span class="cl"><span class="na">db.url.0</span><span class="o">=</span><span class="s">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 连接第1个数据库的用户和密码（替换成自己的）</span>
</span></span><span class="line"><span class="cl"><span class="na">db.user.0</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">db.password.0</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库驱动（如果其它配置正确，但无法启动时，修改该配置）</span>
</span></span><span class="line"><span class="cl"><span class="c1"># db.driver-class-name=com.mysql.cj.jdbc.Driver</span>
</span></span></code></pre></div><p>接下来重启Nacos即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">./shutdown.sh <span class="c1"># 也可以直接 CTRL+C 结束</span>
</span></span><span class="line"><span class="cl">./startup.sh -m standalone
</span></span></code></pre></div><hr>
<h1 id="部署-nacos-集群" data-numberify>部署 Nacos 集群<a class="anchor ms-1" href="#部署-nacos-集群"></a></h1>
<p>在本地部署Nacos集群首先将Nacos整个应用目录复制，要在集群中部署几个Nacos就复制几份。接着再分别修改它们的配置文件<code>application.properties</code>。</p>
<p>例如要部署两个Nacos，做负载均衡：</p>
<p>第一个Nacos的配置文件可以如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1"># 服务端口</span>
</span></span><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">8841</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库配置</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.platform</span><span class="o">=</span><span class="s">mysql</span>
</span></span><span class="line"><span class="cl"><span class="na">db.num</span><span class="o">=</span><span class="s">1</span>
</span></span><span class="line"><span class="cl"><span class="na">db.url.0</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span>
</span></span><span class="line"><span class="cl"><span class="na">db.user.0</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">db.password.0</span><span class="o">=</span><span class="s">root</span>
</span></span></code></pre></div><p>第二个Nacos的配置文件可以如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1"># 服务端口</span>
</span></span><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">8842</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库配置</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.platform</span><span class="o">=</span><span class="s">mysql</span>
</span></span><span class="line"><span class="cl"><span class="na">db.num</span><span class="o">=</span><span class="s">1</span>
</span></span><span class="line"><span class="cl"><span class="na">db.url.0</span><span class="o">=</span><span class="s">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span>
</span></span><span class="line"><span class="cl"><span class="na">db.user.0</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">db.password.0</span><span class="o">=</span><span class="s">root</span>
</span></span></code></pre></div><blockquote>
<p>因为是部署在本地（即一台机器上），所以两个Nacos的端口不能相同（否则会发生冲突）。</p>
</blockquote>
<p>接着使用<code>startup.cmd</code>或<code>startup.sh</code>分别启动这两个Nacos（这里要使用集群模式启动，Nacos默认使用集群模式启动，所以不能加上<code>-m standalone</code>参数）。</p>
<p>此时分别访问这两个服务（例如使用<a href="http://localhost:8841/nacos" target="_blank" rel="noopener noreferrer">http://localhost:8841/nacos<i class="fas fa-external-link-square-alt ms-1"></i></a>和<a href="http://localhost:8842/nacos" target="_blank" rel="noopener noreferrer">http://localhost:8842/nacos<i class="fas fa-external-link-square-alt ms-1"></i></a>访问），都能正常使用。</p>
<p>最后需要给这个Nacos集群加个路由（例如使用Nginx）。Nginx的配置如下：</p>
<pre tabindex="0"><code># Nacos 集群
upstream nacos-cluster {
    server nacos-cluster-test-1:8848;
    server nacos-cluster-test-2:8848;
}

# Nacos 服务
server {
    listen 8849;

    server_name localhost;

    location /nacos {
        proxy_pass http://nacos-cluster;
    }
}
</code></pre><p>添加完配置后重启Nginx即可，这里不做赘述。</p>
<p>配置完后访问<a href="http://localhsot:8848/nacos" target="_blank" rel="noopener noreferrer">http://localhsot:8849/nacos<i class="fas fa-external-link-square-alt ms-1"></i></a>即可。</p>
<hr>
<h1 id="基于-docker-部署" data-numberify>基于 Docker 部署<a class="anchor ms-1" href="#基于-docker-部署"></a></h1>
<p>使用Docker部署，首先需要下载Nacos的镜像。Nacos官方提供了对应的镜像<code>nacos/nacos-server</code>。使用下方命令下载该容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker pull nacos/nacos-server
</span></span></code></pre></div><blockquote>
<p>上方的命令拉取（下载）的是版本为<code>latest</code>。要拉取对应版本的镜像，可以查看Docker官方提供的网站<a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">hub.docker.com<i class="fas fa-external-link-square-alt ms-1"></i></a>，在其中搜索<code>nacos-server</code>并点击<code>tags</code>查找对应的版本（<a href="https://hub.docker.com/r/nacos/nacos-server/tags" target="_blank" rel="noopener noreferrer">点击快速查找Nacos Server版本<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p>例如拉取<code>v1.4.6</code>版本的<code>nacos/nacos-server</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker pull nacos/nacos-server:v1.4.6
</span></span></code></pre></div></blockquote>
<p><code>nacos/nacos-server</code>拉取完成后就可以创建对应容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name nacos-server <span class="se">\ </span><span class="c1"># 容器名称</span>
</span></span><span class="line"><span class="cl">    -p 8848:8848 <span class="se">\ </span><span class="c1"># 端口映射，分号左边为本地端口，分号右边为容器的内部端口</span>
</span></span><span class="line"><span class="cl">    --privileged<span class="o">=</span><span class="nb">true</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">MODE</span><span class="o">=</span>standalone <span class="se">\ </span><span class="c1"># 指定为单机模式（使用Docker创建的Docker容器默认也为集群模式，所以需要指定单机模式）</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">PREFER_HOST_MODE</span><span class="o">=</span>hostname <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/nacos/nacos-server/logs:/home/nacos/logs <span class="se">\ </span><span class="c1"># 文件挂载，分号左边为本地目录，分号右边为容器内部的目录，这里是进行日志文件目录映射</span>
</span></span><span class="line"><span class="cl">    -v /home/nacos/nacos-server/conf/:/home/nacos/conf/ <span class="se">\ </span><span class="c1"># 配置文件映射</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">JVM_XMS</span><span class="o">=</span>256m -e <span class="nv">JVM_XMX</span><span class="o">=</span>256m <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    nacos/nacos-server <span class="se">\ </span><span class="c1"># 创建容器所使用的镜像</span>
</span></span><span class="line"><span class="cl">    /usr/sbin/init
</span></span></code></pre></div><p>访问<a href="http://localhsot:8848/nacos" target="_blank" rel="noopener noreferrer">http://localhsot:8848/nacos<i class="fas fa-external-link-square-alt ms-1"></i></a>即可。默认的用户名和密码均为<code>nacos</code>。</p>
<p>如果是在Windows中使用Docker Desktop部署，目录映射的路径应该这样写：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl">docker run -d \
</span></span><span class="line"><span class="cl">    --name nacos-server \
</span></span><span class="line"><span class="cl">    -p 8848:8848 \
</span></span><span class="line"><span class="cl">    --privileged=true \
</span></span><span class="line"><span class="cl">    -e MODE=standalone \
</span></span><span class="line"><span class="cl">    -e PREFER_HOST_MODE=hostname \
</span></span><span class="line"><span class="cl">    -v /d/docker-volume/nacos/nacos-server/logs:/home/nacos/logs \
</span></span><span class="line"><span class="cl">    -v /d/docker-volume/nacos/nacos-server/conf/:/home/nacos/conf/ \
</span></span><span class="line"><span class="cl">    -e JVM_XMS=256m -e JVM_XMX=256m \
</span></span><span class="line"><span class="cl">    nacos/nacos-server \
</span></span><span class="line"><span class="cl">    /usr/sbin/init
</span></span></code></pre></div><hr>
<h1 id="基于-docker-使用-mysql-部署" data-numberify>基于 Docker 使用 MySQL 部署<a class="anchor ms-1" href="#基于-docker-使用-mysql-部署"></a></h1>
<p>根据如上方法创建Nacos容器，然后修改映射到本地的配置文件。例如修改<code>/home/nacos/nacos-server/conf</code>下的<code>application.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1"># 数据库配置（根据你的配置环境修改）</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.platform</span><span class="o">=</span><span class="s">mysql</span>
</span></span><span class="line"><span class="cl"><span class="na">db.num</span><span class="o">=</span><span class="s">1</span>
</span></span><span class="line"><span class="cl"><span class="na">db.url.0</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span>
</span></span><span class="line"><span class="cl"><span class="na">db.user.0</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">db.password.0</span><span class="o">=</span><span class="s">root</span>
</span></span></code></pre></div><blockquote>
<p>注：这个MySQL需要使用<code>mysql-schema.sql</code>创建<code>nacos</code>数据库。</p>
</blockquote>
<p>如果MySQL也是使用Docker创建的，可以给Nacos容器和MySQL容器添加一个Docker Network，并将它们都加入这个Network中：</p>
<ol>
<li>
<p>创建Docker Network：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker network create nacos-network
</span></span></code></pre></div></li>
<li>
<p>分别将Nacos容器和MySQL容器加入Docker Network（假设MySQL的容器名为<code>mysql</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker network connect nacos-network nacos-server
</span></span><span class="line"><span class="cl">docker network connect nacos-network mysql
</span></span></code></pre></div></li>
</ol>
<p>之后在加入这个Network的容器中，可以将它们的容器名当作IP地址来使用。所以在<code>nacos-server</code>中可以将<code>db.url</code>修改为如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">db.url.0</span><span class="o">=</span><span class="s">jdbc:mysql://mysql:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span>
</span></span></code></pre></div><p>其实使用Docker部署并使用MySQL数据库还有一个简便的方法（按照上述方法直接修改配置文件可能不生效），可以在创建容器的Docker命令中通过<code>nacos-server</code>提供的环境变量直接指定MySQL服务的配置信息（<code>nacos-server</code>容器在创建时会自动生成对应的配置文件）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name nacos-server <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 8848:8848 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network nacos-network<span class="se">\ </span><span class="c1"># 在创建容器时指定Network</span>
</span></span><span class="line"><span class="cl">    --privileged<span class="o">=</span><span class="nb">true</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">SPRING_DATASOURCE_PLATFORM</span><span class="o">=</span>mysql <span class="se">\ </span><span class="c1"># 指定数据源类型为MySQL</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">MYSQL_SERVICE_HOST</span><span class="o">=</span>mysql <span class="se">\ </span><span class="c1"># MySQL服务器的地址（这里加入了Network所以可以直接使用容器名称来当Host）</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">MYSQL_SERVICE_PORT</span><span class="o">=</span><span class="m">3306</span> <span class="se">\ </span><span class="c1"># MySQL服务端口</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">MYSQL_SERVICE_USER</span><span class="o">=</span>root <span class="se">\ </span><span class="c1"># MySQL用户名</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">MYSQL_SERVICE_PASSWORD</span><span class="o">=</span>root <span class="se">\ </span><span class="c1"># MySQL密码</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">MYSQL_SERVICE_DB_NAME</span><span class="o">=</span>nacos <span class="se">\ </span><span class="c1"># MySQL的数据库名称</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">PREFER_HOST_MODE</span><span class="o">=</span>hostname <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /d/27120/docker-volume/nacos/%name%/logs:/home/nacos/logs <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /d/27120/docker-volume/nacos/%name%/conf/:/home/nacos/conf/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">JVM_XMS</span><span class="o">=</span>256m -e <span class="nv">JVM_XMX</span><span class="o">=</span>256m <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    nacos/nacos-server <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    /usr/sbin/init
</span></span></code></pre></div><blockquote>
<p>使用Docker创建的MySQL容器同样需要创建<code>nacos</code>数据库。可以通过其它文件传输方式传输到容器中（这种方式适用于你有一个已经在运行的MySQL容器）。</p>
<p>在容器中创建数据库可以在本机输入命令（假设<code>mysql-schema.sql</code>导入到了容器的<code>root</code>目录中）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker <span class="nb">exec</span> mysql mysql -uroot -proot -e <span class="s2">&#34;CREATE DATABASE nacos; USE nacos; SOURCE /root/mysql-schema.sql;&#34;</span>
</span></span></code></pre></div><p>上方命令第一个<code>mysql</code>是指容器名称，第二个是指容器中的<code>mysql</code>命令。</p>
<p>或者是在本地使用Docker登录MySQL后进行操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker <span class="nb">exec</span> mysql mysql -uroot -p
</span></span><span class="line"><span class="cl"><span class="c1"># 然后输入你的密码，回车</span>
</span></span><span class="line"><span class="cl">mysql&gt; CREATE DATABASE nacos<span class="p">;</span>
</span></span><span class="line"><span class="cl">mysql&gt; USE nacos<span class="p">;</span>
</span></span><span class="line"><span class="cl">mysql&gt; SOURCE /root/mysql-schema.sql<span class="p">;</span>
</span></span></code></pre></div></blockquote>
<p>推荐使用Dockerfile方式创建一个包含<code>nacos</code>数据库的MySQL容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> mysql:5.7</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">TZ</span><span class="o">=</span>Asia/Shanghai<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span><span class="m">123456</span>
</span></span><span class="line"><span class="cl"><span class="k">ENV</span> <span class="nv">LANG</span><span class="o">=</span>C.UTF-8<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./mysql-schema.sql /docker-entrypoint-initdb.d<span class="err">
</span></span></span></code></pre></div><p>这是利用MySQL镜像的机制。MySQL容器在创建时会自动执行<code>/docker-entrypoint-initdb.d</code>目录下的<code>.sh</code>、<code>.sql</code>等文件。因为Nacos官方提供的<code>mysql-schema.sql</code>中并没有创建数据库和使用数据库的SQL语句，所以在创建容器之前还需要对<code>mysql-schema.sql</code>稍加修改。在<code>mysql-schema.sql</code>里面最上方添加这么两句：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w"> </span><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">nacos</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">USE</span><span class="w"> </span><span class="n">nacos</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>需要注意的是这里的数据库名称要和创建<code>nacos-server</code>时配置的一致。</p>
<p>然后将<code>mysql-schema.sql</code>复制到与Dockerfile同级的目录中（或者你也可以在Dockerfile将<code>mysql-schema.sql</code>的路径修改到你想要的位置）。接着使用<code>docker build</code>命令构建镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker build -f .<span class="se">\D</span>ockerfile . -t linner/mysql-nacos
</span></span></code></pre></div><p>最后使用<code>docker run</code>运行容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -id --name mysql-nacos -p 3306:3306 linner/nacos-mysql
</span></span></code></pre></div><blockquote>
<p>因为一些配置在Dockerfile提前设置过了，所以这条构建MySQL容器的命令十分简洁。</p>
</blockquote>
<hr>
<h1 id="基于-docker-搭建-nacos-集群" data-numberify>基于 Docker 搭建 Nacos 集群<a class="anchor ms-1" href="#基于-docker-搭建-nacos-集群"></a></h1>
<p>基于Docker搭建Nacos集群，首先可以创建一个用于创建集群模式Nacos的脚本<code>create_nacos.sh</code>（使用MySQL）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">name</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl"><span class="nv">port</span><span class="o">=</span><span class="nv">$2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name <span class="nv">$name</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p <span class="nv">$port</span>:8848 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network nacos-network <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --privileged<span class="o">=</span><span class="nb">true</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">SPRING_DATASOURCE_PLATFORM</span><span class="o">=</span>mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">MYSQL_SERVICE_HOST</span><span class="o">=</span>mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">MYSQL_SERVICE_PORT</span><span class="o">=</span><span class="m">3306</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">MYSQL_SERVICE_USER</span><span class="o">=</span>root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">MYSQL_SERVICE_PASSWORD</span><span class="o">=</span><span class="m">123456</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">MYSQL_SERVICE_DB_NAME</span><span class="o">=</span>nacos_config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">PREFER_HOST_MODE</span><span class="o">=</span>hostname <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/nacos/<span class="nv">$name</span>/logs:/home/nacos/logs <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/nacos/<span class="nv">$name</span>/conf/:/home/nacos/conf/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">JVM_XMS</span><span class="o">=</span>256m -e <span class="nv">JVM_XMX</span><span class="o">=</span>256m <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    nacos/nacos-server <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    /usr/sbin/init
</span></span></code></pre></div><p>例如创建两个Nacos容器（在本地创建两个容器，端口不能重复）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">./create_nacos.sh nacos1 <span class="m">8841</span>
</span></span><span class="line"><span class="cl">./create_nacos.sh nacos2 <span class="m">8842</span>
</span></span></code></pre></div><p>接着将它们加入<code>nacos-network</code>后重启（如果这两个Nacos容器没有停止运行的话，可以忽略）：</p>
<pre tabindex="0"><code>docker restart nacos1
docker restart nacos2
</code></pre><p>接着配置Nginx的方法和之前描述的方式类似。如果Nginx是使用Docker创建的，也可以将该Nginx容器加入<code>nacos-network</code>，然后直接使用容器的名称作为Host即可。</p>
<p>最后访问Nginx即可。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>瑞吉外卖项目实战</title>
      <link>/blog/2023/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</guid>
      <description><![CDATA[项目笔记 项目笔记仓库：https://gitee.com/linner_cheng/reggie_note B站视频：黑马程序员Java项目实]]></description>
      <content:encoded><![CDATA[<h1 id="项目笔记" data-numberify>项目笔记<a class="anchor ms-1" href="#项目笔记"></a></h1>
<p>项目笔记仓库：<a href="https://gitee.com/linner_cheng/reggie_note" target="_blank" rel="noopener noreferrer">https://gitee.com/linner_cheng/reggie_note<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<p>B站视频：<a href="https://www.bilibili.com/video/BV13a411q753/?p=190&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click" target="_blank" rel="noopener noreferrer">黑马程序员Java项目实战《瑞吉外卖》<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<hr>
<h1 id="项目基础功能开发" data-numberify>项目基础功能开发<a class="anchor ms-1" href="#项目基础功能开发"></a></h1>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/v1.0/" target="_blank" rel="noopener noreferrer">项目基础功能开发<i class="fas fa-external-link-square-alt ms-1"></i></a>。包含项目前台和后台功能开发还有项目部署。</p>
<hr>
<h1 id="redis" data-numberify>Redis<a class="anchor ms-1" href="#redis"></a></h1>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/redis/" target="_blank" rel="noopener noreferrer">Redis<i class="fas fa-external-link-square-alt ms-1"></i></a>。包含Jedis和Spirng data redis。</p>
<hr>
<h1 id="项目优化" data-numberify>项目优化<a class="anchor ms-1" href="#项目优化"></a></h1>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/v1.1/" target="_blank" rel="noopener noreferrer">Redis缓存<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/v1.2/" target="_blank" rel="noopener noreferrer">Sharding-JDBC读写分离<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<p><a href="https://gitee.com/linner_cheng/reggie_note/tree/v1.3/" target="_blank" rel="noopener noreferrer">Swagger API文档<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>SpringBoot 基础</title>
      <link>/docs/spring/springboot/springboot-base/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springboot/springboot-base/</guid>
      <description><![CDATA[简介 SpringBoot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化 Spring 应用的初始搭建以及开发过程。 SpringBoot开发分为如下几步： 创建新模块，选择Sp]]></description>
      <content:encoded><![CDATA[<h1 id="简介" data-numberify>简介<a class="anchor ms-1" href="#简介"></a></h1>
<p><code>SpringBoot</code> 是由 <code>Pivotal</code> 团队提供的全新框架，其设计目的是用来简化 <code>Spring</code> 应用的初始搭建以及开发过程。</p>
<p>SpringBoot开发分为如下几步：</p>
<ul>
<li>创建新模块，选择Spring初始化，并配置模块相关基础信息。</li>
<li>选择当前模块需要使用的技术集。</li>
<li>开发控制器类。</li>
<li>运行自动生成的Application类。</li>
</ul>
<p>SpringBoot有两个机制：</p>
<ul>
<li>依赖管理机制。</li>
<li>自动配置机制。</li>
</ul>
<h1 id="项目创建及配置" data-numberify>项目创建及配置<a class="anchor ms-1" href="#项目创建及配置"></a></h1>
<h2 id="创建项目" data-numberify>创建项目<a class="anchor ms-1" href="#创建项目"></a></h2>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springboot/springboot-base/1677287557076.png" loading="lazy" width="1572" height="1265" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springboot/springboot-base/1677239012598.png" loading="lazy" width="1573" height="1269" />
</picture>

</p>
<blockquote>
<p>注意：</p>
<ol>
<li>
<p>在创建好的工程中不需要创建配置类。</p>
</li>
<li>
<p>创建好的项目会自动生成其他的一些文件（这些文件目前来说没有任何作用），可以将这些文件删除。</p>
<p>可以删除的目录和文件如下：</p>
<ul>
<li><code>.mvn</code></li>
<li><code>.gitignore</code></li>
<li><code>HELP.md</code></li>
<li><code>mvnw</code></li>
<li><code>mvnw.cmd</code></li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="项目依赖" data-numberify>项目依赖<a class="anchor ms-1" href="#项目依赖"></a></h2>
<p>在项目中的<code>pom.xml</code>中有如下代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>2.4.5<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 这里的版本被修改过，按照上方创建的工程版本应该是 3.0.3 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;relativePath/&gt;</span> <span class="c">&lt;!-- lookup parent from repository --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/parent&gt;</span>
</span></span></code></pre></div><p>该代码指定了一个父工程，父工程中的东西在该工程中可以继承过来使用。</p>
<p>并且使用Spring Initializr创建的项目会自动在<code>pom.xml</code>中导入所需的起步依赖（包含<code>starter</code>的依赖）。</p>
<p>在<code>pom.xml</code>中还有如下起步依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Springboot Web 开发所需的起步依赖 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Springboot 整合Junit的起步依赖 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div><h2 id="引导类" data-numberify>引导类<a class="anchor ms-1" href="#引导类"></a></h2>
<p>创建的每个SpringBoot项目都包含一个引导类，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringbootDemoApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">SpringbootDemoApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>引导类是项目的入口，运行<code>main()</code>就可以启动项目。</p>
<blockquote>
<p>引导类默认只会扫描当前包下同级的类和包（包下的的类）。</p>
<p>如果Controller包与引导类的包同级（例如<code>com.linner.controller</code>与<code>com.linner.springbootdemo</code>），此时引导类可以正常启动，但是由于扫描不到Cotroller包，接口无法访问。有三种解决方法：</p>
<ol>
<li>
<p>将Controller包移动到引导类的包下（此处为<code>springbootdemo</code>）。</p>
</li>
<li>
<p>将引导类移动到项目组包下（此处为<code>com.linner</code>）。</p>
</li>
<li>
<p>在创建工程时，修改软件包名。</p>
<p>Spring Initializr默认软件包名为项目组名.项目名（此处为<code>com.linner.springbootdemo</code>）。此处创建的项目将其修改为项目组名（<code>com.linner</code>）。</p>
</li>
</ol>
<p><code>SpringApplication.run(...)</code> 的返回值是当前项目的<code>ApplicationContext</code>。</p>
</blockquote>
<h2 id="切换-web-服务器" data-numberify>切换 Web 服务器<a class="anchor ms-1" href="#切换-web-服务器"></a></h2>
<p>如果要使用Jetty服务器，我们需要先在<code>pom.xml</code>中使用<code>&lt;exclusion&gt;</code>标签排除默认的Tomcat服务器，然后再导入使用Jetty服务器所需的坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;exclusions&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;exclusion&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-tomcat<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/exclusion&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/exclusions&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-jetty<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="配置文件" data-numberify>配置文件<a class="anchor ms-1" href="#配置文件"></a></h2>
<p>SpringBoot有两种配置文件格式，它们都在<code>resources</code>目录下：</p>
<ul>
<li>
<p><code>properties</code>格式：</p>
<p>文件名为<code>application.properties</code>，格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1"># 端口</span>
</span></span><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">81</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 访问路径</span>
</span></span><span class="line"><span class="cl"><span class="na">server.servlet.context-path</span><span class="o">=</span><span class="s">/</span>
</span></span></code></pre></div></li>
<li>
<p><code>yaml</code>格式：</p>
<p>文件名为<code>application.yml</code>或<code>application.yaml</code>，格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 端口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">servlet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 访问路径</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">context-path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>yaml格式的键值对中，键后面的冒号后（值的前面）一定要加空格。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>SpringBoot程序的配置文件必须是<code>application</code>，只是后缀名不同。</p>
</blockquote>
<p>以上三个配置文件可以同时存在，它们的优先级从高到低为：</p>
<ol>
<li><code>application.properties</code></li>
<li><code>application.yml</code></li>
<li><code>application.yaml</code></li>
</ol>
<p>Idea可以快速地编辑配置文件：</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springboot/springboot-base/1677291010274.png" loading="lazy" width="481" height="581" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springboot/springboot-base/1677291147353.png" loading="lazy" width="1651" height="389" />
</picture>

</p>
<h3 id="yaml-语法" data-numberify>yaml 语法<a class="anchor ms-1" href="#yaml-语法"></a></h3>
<ul>
<li>
<p>大小写敏感。</p>
</li>
<li>
<p>属性层级关系使用多行描述，每行结尾使用冒号结束。</p>
</li>
<li>
<p>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）。</p>
<p>空格的个数并不重要，只要保证同层级的左侧对齐即可。</p>
</li>
<li>
<p>属性值前面添加空格（属性名与属性值之间使用<code>:</code>+空格作为分隔）。</p>
</li>
<li>
<p><code>#</code> 表示注释。</p>
</li>
<li>
<p>数据前面要加空格与冒号隔开。</p>
</li>
</ul>
<p>数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">list</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">Java</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">Spring</span><span class="w">
</span></span></span></code></pre></div><h3 id="读取配置数据" data-numberify>读取配置数据<a class="anchor ms-1" href="#读取配置数据"></a></h3>
<p>使用<code>@Value(&quot;表达式&quot;)</code>可以从配置文件中读取数据，注解中用于读取属性名引用方式是：<code>${一级属性名.二级属性名……}</code>。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${server.port}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">port</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${list[0]}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">java</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/config&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">gerConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;port=&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">port</span> <span class="o">+</span> <span class="s">&#34;\n&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">java</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>SpringBoot还可以使用 <code>@Autowired</code> 注解注入 <code>Environment</code> 对象的方式读取数据。这种方式 <code>SpringBoot</code> 会将配置文件中所有的数据封装到 <code>Environment</code> 对象中，如果需要使用哪个数据只需要通过调用 <code>Environment</code> 对象的 <code>getProperty(String name)</code> 方法获取。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Environment</span> <span class="n">env</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/config&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">gerConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;port=&#34;</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;server.port&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="自定义对象" data-numberify>自定义对象<a class="anchor ms-1" href="#自定义对象"></a></h3>
<p>SpringBoot提供了将配置文件中的数据封装到我们自定义的实体类对象中的方式。具体操作如下：</p>
<ol>
<li>
<p>在实体类上添加<code>@Component</code>注解。</p>
<p>表示将实体类 <code>bean</code> 的创建交给 <code>Spring</code> 管理。</p>
</li>
<li>
<p>使用 <code>@ConfigurationProperties</code> 注解表示加载配置文件。</p>
<p>在该注解中也可以使用 <code>prefix</code> 属性指定只加载指定键的数据。</p>
</li>
<li>
<p>在Controller中进行注入。</p>
</li>
</ol>
<p>Example：</p>
<p>添加依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-configuration-processor<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在配置文件中添加：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">myconfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">SpringBoot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="m">666</span><span class="w">
</span></span></span></code></pre></div><p>实体类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">&#34;myconfig&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">port</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// getter and setter...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>Controller：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">MyConfig</span> <span class="n">myConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/myconfig&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MyConfig</span> <span class="nf">getMyConfig</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">myConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="多环境配置" data-numberify>多环境配置<a class="anchor ms-1" href="#多环境配置"></a></h3>
<p>由于开发环境、测试环境、生产环境的配置都不相同。所以SpringBoot给开发者提供了多环境的快捷配置，需要切换环境时只需要改一个配置即可。</p>
<ul>
<li>
<p><code>yaml</code>格式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># 开发</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">activate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 配置环境名</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">on-profile</span><span class="p">:</span><span class="w"> </span><span class="l">dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># spring.profiles 配置已弃用</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 生产</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">activate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">on-profile</span><span class="p">:</span><span class="w"> </span><span class="l">pro</span><span class="w"> </span><span class="c">#给生产环境起的名字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">81</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 测试</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">activate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">on-profile</span><span class="p">:</span><span class="w"> </span><span class="l">test</span><span class="w"> </span><span class="c">#给测试环境起的名字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">82</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 设置启用的环境</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">profiles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">active</span><span class="p">:</span><span class="w"> </span><span class="l">test </span><span class="w"> </span><span class="c">#表示使用的是开发环境的配置</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><code>properties</code>格式：</p>
<p>使用多文件方式，文件名以<code>application-</code>开头。如：</p>
<ul>
<li>
<p><code>application-dev.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">80</span>
</span></span></code></pre></div></li>
<li>
<p><code>application-pro.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">81</span>
</span></span></code></pre></div></li>
<li>
<p><code>application-test.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">82</span>
</span></span></code></pre></div></li>
</ul>
<p>SpringBoot只会默认加载名为 <code>application.properties</code> 的配置文件，所以需要在 <code>application.properties</code> 配置文件中设置启用哪个配置文件。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">spring.profiles.active</span><span class="o">=</span><span class="s">pro</span>
</span></span></code></pre></div></li>
</ul>
<p>SpringBoot提供了在运行<code>jar</code>时设置开启指定的环境的方式。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">java –jar springbootdemo.jar –-spring.profiles.active<span class="o">=</span><span class="nb">test</span>
</span></span></code></pre></div><p>临时修改端口号：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">java –jar springbootdemo.jar –-server.port<span class="o">=</span><span class="m">88</span>
</span></span></code></pre></div><blockquote>
<p>命令行设置的端口号优先级高于配置文件。
<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config" target="_blank" rel="noopener noreferrer">SpringBoot官网<i class="fas fa-external-link-square-alt ms-1"></i></a>已经对配置的优先级进行了说明：
<picture><img class="img-fluid " alt="" src="/docs/spring/springboot/springboot-base/image-20210917193910191.png" loading="lazy" width="1680" height="792" />
</picture>

</p>
</blockquote>
<h3 id="配置文件分类" data-numberify>配置文件分类<a class="anchor ms-1" href="#配置文件分类"></a></h3>
<p>SpringBoot定义了配置文件不同的放置的位置。而放在不同位置的优先级是不同的。SpringBoot中4级配置文件放置位置：</p>
<ol>
<li>classpath：application.yml</li>
<li>classpath：config/application.yml</li>
<li>file：application.yml</li>
<li>file：config/application.yml</li>
</ol>
<blockquote>
<p>级别越高优先级越高。</p>
</blockquote>
<h1 id="第三方资源整合" data-numberify>第三方资源整合<a class="anchor ms-1" href="#第三方资源整合"></a></h1>
<h2 id="整合-junit" data-numberify>整合 Junit<a class="anchor ms-1" href="#整合-junit"></a></h2>
<p>SpringBoot整合了Junit并可将其作为起步依赖整合到项目中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>SpringBoot整合Junit分为三步：</p>
<ol>
<li>在测试类上添加 <code>@SpringBootTest</code> 注解。</li>
<li>使用 <code>@Autowired</code> 注入要测试的资源。</li>
<li>定义测试方法进行测试。</li>
</ol>
<p>Example：</p>
<p>编写Service：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Book save ...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试<code>BookService</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">SpringbootDemoApplicationTests</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">BookService</span> <span class="n">bookService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">bookService</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>由于引导类默认扫描当前包下的类和包，所以测试类（或者测试类的包）和引导类要在同个包下。</p>
<p>否则，可以使用<code>@SpringBootTest</code>注解的<code>classes</code>属性指定引导类的字节码对象。如：<code>@SpringBootTest(classes = {SpringbootDemoApplication.class})</code></p>
</blockquote>
<h2 id="整合-mybatis" data-numberify>整合 MyBatis<a class="anchor ms-1" href="#整合-mybatis"></a></h2>
<p>在整合MyBatis前先建一个用于测试的数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SET</span><span class="w"> </span><span class="k">NAMES</span><span class="w"> </span><span class="n">utf8mb4</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SET</span><span class="w"> </span><span class="n">FOREIGN_KEY_CHECKS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- Table structure for book_tb
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w">  </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span><span class="w"> </span><span class="nb">CHARACTER</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="n">utf8mb3</span><span class="w"> </span><span class="k">COLLATE</span><span class="w"> </span><span class="n">utf8mb3_bin</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">USING</span><span class="w"> </span><span class="n">BTREE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="n">ENGINE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">InnoDB</span><span class="w"> </span><span class="nb">CHARACTER</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">utf8mb3</span><span class="w"> </span><span class="k">COLLATE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">utf8mb3_bin</span><span class="w"> </span><span class="n">ROW_FORMAT</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">Dynamic</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- Records of book_tb
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;郑嘉伦&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;钱璐&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;黄安琪&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;龙宇宁&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;姜宇宁&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="n">book_tb</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;赵嘉伦&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SET</span><span class="w"> </span><span class="n">FOREIGN_KEY_CHECKS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>
<p>导入依赖：</p>
<ol>
<li>在创建项目时，通过Spring Initializr导入依赖：
<picture><img class="img-fluid " alt="" src="/docs/spring/springboot/springboot-base/1677302021447.png" loading="lazy" width="1575" height="1466" />
</picture>

</li>
<li>在<code>pom.xml</code>中导入坐标：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.0.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mysql-connector-j<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>编写数据库配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">datasource</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">driver-class-name</span><span class="p">:</span><span class="w"> </span><span class="l">com.mysql.jdbc.Driver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">jdbc:mysql://localhost:3306/spring_db</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>SpringBoot版本低于2.4.3（不含），Mysql驱动版本大于8.0时，需要在url连接串中配置时区 <code>jdbc:mysql://localhost:3306/spring_db?serverTimezone=UTC</code>，或在MySQL数据库端配置时区解决此问题。</p>
</blockquote>
</li>
<li>
<p>定义实体类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// getter、setter and toString
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>定义DAO接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Mapper</span> <span class="c1">// SpringBoot定义DAO接口类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">BookDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Select</span><span class="o">(</span><span class="s">&#34;SELECT * FROM book_tb WHERE id = #{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Book</span> <span class="nf">getById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>定义Test类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">SpringbootMybatisApplicationTests</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">BookDao</span> <span class="n">bookDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testGetById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="n">bookDao</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">book</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="使用-druid-数据源" data-numberify>使用 Druid 数据源<a class="anchor ms-1" href="#使用-druid-数据源"></a></h3>
<p>SpringBoot有默认的数据源，但是也可以指定使用Druid数据源。</p>
<ul>
<li>
<p>导入Druid依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.1.16<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>在<code>application.yml</code>配置文件配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">datasource</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">driver-class-name</span><span class="p">:</span><span class="w"> </span><span class="l">com.mysql.cj.jdbc.Driver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">jdbc:mysql://localhost:3306/spring_db?serverTimezone=UTC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">com.alibaba.druid.pool.DruidDataSource</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>SpringMVC 基础</title>
      <link>/docs/spring/springmvc/springmvc-base/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springmvc/springmvc-base/</guid>
      <description><![CDATA[简介 SpringMVC是Spring下的一个用于Web表现层开发的技术。相比Servlet，SpringMVC更加高效快捷。 SpringMV]]></description>
      <content:encoded><![CDATA[<h1 id="简介" data-numberify>简介<a class="anchor ms-1" href="#简介"></a></h1>
<p>SpringMVC是Spring下的一个用于Web表现层开发的技术。相比Servlet，SpringMVC更加高效快捷。</p>
<p>SpringMVC流程如下：</p>
<ul>
<li>浏览器发送请求到Tomcat服务器；</li>
<li>Tomcat接收请求后，将请求交给SpringMVC中的<code>DispatcherServlet</code>（前端控制器）来处理。</li>
<li><code>DispatcherServlet</code>按照对应规则将请求分发到对应的<code>Bean</code>。</li>
<li><code>Bean</code>由我们自己编写来处理不同的请求。
每个<code>Bean</code>中可以处理一个或多个不同的请求
URL。</li>
</ul>
<blockquote>
<p><code>DispatcherServlet</code>和<code>Bean</code>对象都需要交给Spring容器来进行管理。</p>
</blockquote>
<p>综上，我们需要编写的内容为：</p>
<ul>
<li>
<p><code>Bean</code>对象；</p>
</li>
<li>
<p>请求URL和<code>Bean</code>对象对应关系的配置；</p>
</li>
<li>
<p>构建Spring容器。</p>
<p>将<code>DispatcherServlet</code>和<code>Bean</code>对象交给容器管理。</p>
</li>
<li>
<p>配置Tomcat服务器。</p>
<p>使Tomcat能够识别Spring容器，并将请求交给容器中的<code>DispatcherServlet</code>来分发请求。</p>
</li>
</ul>
<p>项目的基本实现步骤如下：</p>
<ol>
<li>创建Web工程（Maven结构），并在工程的<code>pom.xml</code>中添加SpringMVC和Servlet坐标。</li>
<li>创建SpringMVC控制器类（等同于Servlet功能）。</li>
<li>初始化SpringMVC环境（同Spring环境），设定SpringMVC加载对应的<code>Bean</code>。</li>
<li>初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求。</li>
</ol>
<h2 id="spring-mvc-工作流程" data-numberify>Spring MVC 工作流程<a class="anchor ms-1" href="#spring-mvc-工作流程"></a></h2>
<p>SpringMVC的使用过程共分两个阶段：</p>
<ol>
<li>
<p>启动服务器初始化过程；</p>
<ol>
<li>
<p>服务器启动，执行<code>ServletConfig</code>类，初始化Web容器。</p>
</li>
<li>
<p>根据<code>getServletConfigClasses</code>获取所需的SpringMVC配置类（这里是<code>SpringMvcConfig</code>）来初始化SpringMVC的容器。</p>
</li>
<li>
<p>加载<code>SpringMvcConfig</code>配置类。</p>
</li>
<li>
<p>执行<code>@ComponentScan</code>加载对应的<code>Bean</code>。</p>
<p>扫描指定包下所有类上的注解，将所有的Controller类（如有<code>@Controller</code>、<code>@RestController</code>等注解的类）加载到容器中。</p>
</li>
<li>
<p>加载每一个<code>Controler</code>。</p>
<p>使用<code>@RequestMapping</code>建立请求路径与<code>Controler</code>中的方法的对应关系。</p>
</li>
<li>
<p>执行<code>getServletMappings</code>方法，定义所有的请求都通过SpringMVC。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">Spring</span><span class="o">[]</span>  <span class="nf">getServletMappings</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">Spring</span><span class="o">[]{</span><span class="s">&#34;/&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>    
</span></span></code></pre></div><p><code>/</code>代表所拦截请求的路径规则，只有被拦截后才能交给SpringMVC来处理请求。</p>
</li>
</ol>
</li>
<li>
<p>单次请求过程。</p>
<ol>
<li>根据请求路径发送请求。</li>
<li>Web容器将符合设置的请求路径的请求交给SpringMVC处理。</li>
<li>解析请求路径。</li>
<li>执行匹配对应请求路径的方法。</li>
<li>将有<code>@ResponseBody</code>方法的返回值作为响应体返回给请求方。</li>
</ol>
</li>
</ol>
<hr>
<h1 id="项目环境及结构" data-numberify>项目环境及结构<a class="anchor ms-1" href="#项目环境及结构"></a></h1>
<h2 id="项目结构" data-numberify>项目结构<a class="anchor ms-1" href="#项目结构"></a></h2>
<p>使用SpringMVC开发的项目结构如下：</p>
<ul>
<li>📁<code>project-file-name</code>
<ul>
<li>📁<code>src</code>
<ul>
<li>📁<code>main</code>
<ul>
<li>📁<code>java</code>
<ul>
<li>📁<code>com.linner</code>
<ul>
<li>📁<code>config</code> —— 配置类</li>
<li>📁<code>controller</code> —— 表现层</li>
<li>📁<code>dao</code> —— 持久层</li>
<li>📁<code>domain</code> —— 实体类</li>
<li>📁<code>service</code> —— 业务层</li>
</ul>
</li>
</ul>
</li>
<li>📁<code>resourcs</code></li>
<li>📁<code>webapp</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>这种项目结构采用了SSM架构，即：</p>
<ul>
<li>表现层；</li>
<li>持久层；</li>
<li>业务层。</li>
</ul>
<p>通过IDEA创建SpringMVC项目步骤如下：</p>
<ol>
<li>
<p>创建基础的Maven-Archetype-Webapp项目。</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/springmvc/springmvc-base/1676947539616.png" loading="lazy" width="1599" height="589" />
</picture>

</p>
</li>
<li>
<p>补全项目结构：</p>
<ul>
<li>📁<code>src</code>
<ul>
<li>📁<code>main</code>
<ul>
<li>📁<code>java</code></li>
<li>📁<code>resourcs</code></li>
<li>📁<code>webapp</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>修改<code>pom.xml</code>文件：</p>
<p>将多余的内容删除，然后添加SpringMVC所需的依赖。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span> <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl"><span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>springmvc-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;maven.compiler.source&gt;</span>1.8<span class="nt">&lt;/maven.compiler.source&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;maven.compiler.target&gt;</span>1.8<span class="nt">&lt;/maven.compiler.target&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/build&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="基础环境" data-numberify>基础环境<a class="anchor ms-1" href="#基础环境"></a></h2>
<p>Tomcat7 Maven插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.maven<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>tomcat7-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>2.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;port&gt;</span>80<span class="nt">&lt;/port&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;path&gt;</span>/<span class="nt">&lt;/path&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;uriEncoding&gt;</span>UTF-8<span class="nt">&lt;/uriEncoding&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/plugin&gt;</span>
</span></span></code></pre></div><p>基础依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Servlet --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Servlet需要修改作用范围，否则会与Tomcat中的servlet-api包发生冲突 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- provided代表的是该包只在编译和测试的时候用 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- SpringMVC --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-webmvc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="dao-相关依赖环境" data-numberify>DAO 相关依赖环境<a class="anchor ms-1" href="#dao-相关依赖环境"></a></h2>
<p>使用SpringMVC构建Web项目，除了以上基础配置外，还需要导入其他配置。</p>
<p>DAO相关的坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Spring JDBC --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- MySQL --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>5.1.47<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- MyBatis --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>3.5.6<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- MyBatis Spring依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.3.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- Druid 数据库连接池 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.1.16<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="其它依赖环境" data-numberify>其它依赖环境<a class="anchor ms-1" href="#其它依赖环境"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Jackson --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>jackson-databind<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>2.9.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 日志 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>ch.qos.logback<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>logback-classic<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.2.3<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- Thymeleaf（不常用） --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.thymeleaf<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>thymeleaf-spring5<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>3.0.12.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 文件上传依赖 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>commons-fileupload<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>commons-fileupload<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.3.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- Test --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- Junit 单元测试 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>3.8.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="配置" data-numberify>配置<a class="anchor ms-1" href="#配置"></a></h1>
<p>配置SpringMVC有两种方式：</p>
<ul>
<li><code>web.xml</code>配置文件</li>
<li>配置类</li>
</ul>
<h2 id="配置文件方式" data-numberify>配置文件方式<a class="anchor ms-1" href="#配置文件方式"></a></h2>
<p>在<code>web.xml</code>中注册SpringMVC的前端控制器<code>DispatcherServlet</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE web-app PUBLIC
</span></span></span><span class="line"><span class="cl"><span class="cp"> &#34;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp"> &#34;http://java.sun.com/dtd/web-app_2_3.dtd&#34; &gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;web-app&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-name&gt;</span>springMVC<span class="nt">&lt;/servlet-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 指定SpringMVC前端控制器： --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet-mapping&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-name&gt;</span>springMVC<span class="nt">&lt;/servlet-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">            配对路径
</span></span></span><span class="line"><span class="cl"><span class="c">            / 表示处理所有不包括.jsp的请求
</span></span></span><span class="line"><span class="cl"><span class="c">            因为.jsp有自己的servlet，如果在DispatcherServlet中处理.jsp，会导致找不到相应页面，从而导致渲染失败
</span></span></span><span class="line"><span class="cl"><span class="c">        --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;url-pattern&gt;</span>/<span class="nt">&lt;/url-pattern&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/webapp&gt;</span>
</span></span></code></pre></div><blockquote>
<p><code>&lt;url-pattern&gt;</code>：</p>
<ul>
<li><code>/</code>：表示匹配所有不包括<code>.jsp</code>的请求；</li>
<li><code>/*</code>：能够匹配所有请求，包括<code>.jsp</code>。</li>
</ul>
</blockquote>
<p>扩展配置：</p>
<p><code>web.xml</code>中的配置还可以定义在其它文件中，例如在<code>resourece</code>下创建新的配置文件<code>springMVC.xml</code>。然后在<code>web.xml</code>添加新配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">    配置SpringMVC的前端控制器
</span></span></span><span class="line"><span class="cl"><span class="c">    对浏览器发送的请求统一进行处理
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;webapp&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-name&gt;</span>springMVC<span class="nt">&lt;/servlet-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">            通过初始化参数指定SpringMVC配置文件的位置和名称
</span></span></span><span class="line"><span class="cl"><span class="c">         --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;init-param&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- contextConfigLocation为固定值 --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">                使用 classpath: 表示从类路径查找配置文件，例如maven工程中的src/main/resources
</span></span></span><span class="line"><span class="cl"><span class="c">             --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-value&gt;</span>classpath:springMVC.xml<span class="nt">&lt;/param-value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/init-param&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">            将启动控制DispatcherServlet的初始化时间提前到服务器启动时：
</span></span></span><span class="line"><span class="cl"><span class="c">        --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/webapp&gt;</span>
</span></span></code></pre></div><p>在<code>springMVC.xml</code>中配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xmlns:context=</span><span class="s">&#34;http://www.springframework.org/schema/context&#34;</span> <span class="na">xmlns:mvc=</span><span class="s">&#34;http://www.springframework.org/schema/mvc&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 自动扫描包 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&#34;com.linner.controller&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 配置Thymeleaf视图解析器（不常用） --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;viewResolver&#34;</span> <span class="na">class=</span><span class="s">&#34;org.thymeleaf.spring5.view.ThymeleafViewResolver&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;order&#34;</span> <span class="na">value=</span><span class="s">&#34;1&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 设置编码，将编码都转为 UTF-8 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;characterEncoding&#34;</span> <span class="na">value=</span><span class="s">&#34;UTF-8&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;templateEngine&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;org.thymeleaf.spring5.SpringTemplateEngine&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;templateResolver&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">                        <span class="c">&lt;!-- 视图前缀 --&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;prefix&#34;</span> <span class="na">value=</span><span class="s">&#34;/WEB-INF/templates/&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">                        <span class="c">&lt;!-- 视图后缀 --&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;suffix&#34;</span> <span class="na">value=</span><span class="s">&#34;.html&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;templateMode&#34;</span> <span class="na">value=</span><span class="s">&#34;HTML5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;characterEncoding&#34;</span> <span class="na">value=</span><span class="s">&#34;UTF-8&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 静态资源访问 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mvc:view-controller</span> <span class="na">path=</span><span class="s">&#34;/&#34;</span> <span class="na">view-name=</span><span class="s">&#34;index&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">        处理静态资源，例如html、js、css、jpg
</span></span></span><span class="line"><span class="cl"><span class="c">        若只设置该标签，则只能访问静态资源，其他请求则无法访问
</span></span></span><span class="line"><span class="cl"><span class="c">        此时必须设置&lt;mvc:annotation-driven/&gt;解决问题
</span></span></span><span class="line"><span class="cl"><span class="c">    --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mvc:default-servlet-handler/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 开启mvc注解驱动 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mvc:annotation-driven&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mvc:message-converters&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 处理响应中文内容乱码 --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;org.springframework.http.converter.StringHttpMessageConverter&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;defaultCharset&#34;</span> <span class="na">value=</span><span class="s">&#34;UTF-8&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;supportedMediaTypes&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;list&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;value&gt;</span>text/html<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;value&gt;</span>application/json<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;/list&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/mvc:message-converters&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/mvc:annotation-driven&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><blockquote>
<p>在视图解析器中设置了视图前缀<code>&lt;property name=&quot;prefix&quot; ...&gt;</code>和视图后缀<code>&lt;property name=&quot;suffix&quot; ...&gt;</code>，那么在Controller的方法中，想要跳转到视图时，只需返回对应的视图文件名称，并去掉其后缀。例如访问<code>hello.html</code>只需返回<code>&quot;hello&quot;</code>，但<code>hello.html</code>必须要在对应的前缀路径中。</p>
</blockquote>
<p>SpringMVC编码过滤器（必须在<code>web.xml</code>中进行注册）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;webapp&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 配置 SpringMVC 的编码过滤器 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;filter&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;filter-name&gt;</span>CharacterEncodingFilter<span class="nt">&lt;/filter-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="nt">&lt;/filter-class&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;init-param&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-name&gt;</span>encoding<span class="nt">&lt;/param-name&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-value&gt;</span>UTF-8<span class="nt">&lt;/param-value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/init-param&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;init-param&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-name&gt;</span>forceResponseEncoding<span class="nt">&lt;/param-name&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/init-param&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/filter&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;filter-mapping&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;filter-name&gt;</span>CharacterEncodingFilter<span class="nt">&lt;/filter-name&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/filter-mapping&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;servlet&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/servlet&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/webapp&gt;</span>
</span></span></code></pre></div><blockquote>
<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效。</p>
</blockquote>
<h2 id="配置类方式" data-numberify>配置类方式<a class="anchor ms-1" href="#配置类方式"></a></h2>
<p>使用配置类则无需在<code>webapp/WEB-INF</code>中添加<code>web.xml</code>文件（当然也可以选择添加）。</p>
<p>SpringMVC项目至少需要<code>ServletConfig</code>、<code>SpringConfig</code>和<code>SpringMvcConfig</code>这三个配置类。</p>
<ul>
<li>ServletConfig：Spring MVC项目初始化类，也是项目的入口，作用与<code>web.xml类似</code>。</li>
<li>SpringConfig：控制业务（Service）和功能（如DataSource、SqlSessionFactoryBean、 MapperScannerConfigurer等）相关的Bean。</li>
<li>SpringMvcConfig（WebConfig）：加载表现层Bean（Controller）。</li>
</ul>
<p><code>ServletConfig</code>（Web项目入口配置类）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletConfig</span> <span class="kd">extends</span> <span class="n">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 指定Spring的配置类
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getRootConfigClasses</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">SpringConfig</span><span class="o">.</span><span class="na">class</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 指定Spring MVC的配置类
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getServletConfigClasses</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">SpringMvcConfig</span><span class="o">.</span><span class="na">class</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 指定DispatcherServlet的映射路径，即url-pattern
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">getServletMappings</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&#34;/&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><code>ServletConfig</code>最重要的是继承<code>AbstractAnnotationConfigDispatcherServletInitializer</code>这个类，并反别重写它的三个方法。</p>
<p>在Servlet3.0环境中，容器会在类路径中查找实现<code>javax.servlet.ServletContainerlnitializer</code>接口的类，如果找到的话就用它来配置Servlet容器。</p>
<p>Spring提供了这个接口的实现，名为<code>SpringServletContainerlnitializer</code>，这个类反过来又会查找实现<code>WebApplicationInitializer</code>的类并将配置的任务交给它们来完成。</p>
<p>Spring3.2引l入了一个便利的<code>WebApplicationInitializer</code>基础实现，名为<code>AbstractAnnotationConfigDispatcherServletlnitializer</code>，当我们的类扩展了<code>AbstractAnnotationConfigDispatcherServletInitializer</code>，并将其部署到Servlet3.O容器的时候，容器会自动发现它，并用它来配置<code>Servlet</code>上下文。</p>
</blockquote>
<p><code>SpringConfig</code>（启动Tomcat服务器时加载Spring配置类）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.service&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">(</span><span class="s">&#34;classpath:jdbc.properties&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Import</span><span class="o">({</span><span class="n">JdbcConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">MyBatisConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span> <span class="c1">// 引入其它配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@EnableTransactionManagement</span>    <span class="c1">// 开启事务管理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>Spring需要管理的是<code>service</code>包和<code>dao</code>包。但<code>dao</code>包最终是交给<code>MapperScannerConfigurer</code>对象来进行扫描处理的。所以<code>SpringConfig</code>只需要扫描到<code>service</code>包即可。</p>
<p>演示<code>@ComponentScan</code>的另一种用法（排除<code>controller</code>包中的Bean）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">&#34;com.linner&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">excludeFilters</span><span class="o">=</span><span class="nd">@ComponentScan.Filter</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">type</span> <span class="o">=</span> <span class="n">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">classes</span> <span class="o">=</span> <span class="n">Controller</span><span class="o">.</span><span class="na">class</span> <span class="c1">// 排除@Controller定义的Bean
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span></code></pre></div><p>上面方法本质是使用<code>@ComponentScan</code>的<code>excludeFilters</code>属性设置过滤规则。</p>
<ul>
<li><code>type</code>：设置排除规则。
<ul>
<li><code>ANNOTATION</code>：按照注解排除。</li>
<li><code>ASSIGNABLE_TYPE</code>：按照指定的类型过滤。</li>
<li><code>ASPECTJ</code>：按照Aspectj表达式排除（基本上不会用）。</li>
<li><code>REGEX</code>：按照正则表达式排除。</li>
<li><code>CUSTOM</code>：按照自定义规则排除。</li>
</ul>
</li>
</ul>
<p><code>classes</code>：设置排除的具体注解类。</p>
</blockquote>
<p><code>SpringMvcConfig</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.controller&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebMvc</span>   <span class="c1">// MVC注解驱动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebConfig</span> <span class="kd">implements</span> <span class="n">WebMvcConfigurer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 相当于 default-servlet-handler
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureDefaultServletHandling</span><span class="o">(</span><span class="n">DefaultServletHandlerConfigurer</span> <span class="n">configurer</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">configurer</span><span class="o">.</span><span class="na">enable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 视图控制器 view-controller
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="n">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">&#34;/hello&#34;</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">&#34;hello&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 文件上传解析器
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MultipartResolver</span> <span class="nf">getMultipartResolver</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CommonsMultipartResolver</span> <span class="n">commonsMultipartResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CommonsMultipartResolver</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">commonsMultipartResolver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 异常处理解析器
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureHandlerExceptionResolvers</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">HandlerExceptionResolver</span><span class="o">&gt;</span> <span class="n">exceptionResolvers</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SimpleMappingExceptionResolver</span> <span class="n">exceptionResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleMappingExceptionResolver</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Properties</span> <span class="n">prop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">prop</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&#34;java.lang.ArithmeticException&#34;</span><span class="o">,</span> <span class="s">&#34;error&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">exceptionResolver</span><span class="o">.</span><span class="na">setExceptionMappings</span><span class="o">(</span><span class="n">prop</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 可以不设置，默认键即为 exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">exceptionResolver</span><span class="o">.</span><span class="na">setExceptionAttribute</span><span class="o">(</span><span class="s">&#34;exception&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">exceptionResolvers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">exceptionResolver</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 模板解析器
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ITemplateResolver</span> <span class="nf">getTemplateResolver</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取当前的 WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">WebApplicationContext</span> <span class="n">webApplicationContext</span> <span class="o">=</span> <span class="n">ContextLoader</span><span class="o">.</span><span class="na">getCurrentWebApplicationContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 使用WebApplicationContext获取ServletContext，并构造ServletContextTemplateResolver
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ServletContextTemplateResolver</span> <span class="n">templateResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServletContextTemplateResolver</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">webApplicationContext</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置视图前缀
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">templateResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">&#34;/WEB-INF/templates/&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置视图后缀
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">templateResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">&#34;.html&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">templateResolver</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">templateResolver</span><span class="o">.</span><span class="na">setTemplateMode</span><span class="o">(</span><span class="n">TemplateMode</span><span class="o">.</span><span class="na">HTML</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">templateResolver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 模板引擎
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param templateResolver 模板解析器（自动装配，@Autowired可忽略不写）
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SpringTemplateEngine</span> <span class="nf">getTemplateEngine</span><span class="o">(</span><span class="n">ITemplateResolver</span> <span class="n">templateResolver</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">SpringTemplateEngine</span> <span class="n">templateEngine</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpringTemplateEngine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">templateEngine</span><span class="o">.</span><span class="na">setTemplateResolver</span><span class="o">(</span><span class="n">templateResolver</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">templateEngine</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 设置视图解析器
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param templateEngine 模板引擎（自动装配）
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ViewResolver</span> <span class="nf">getViewResolver</span><span class="o">(</span><span class="n">SpringTemplateEngine</span> <span class="n">templateEngine</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">ThymeleafViewResolver</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThymeleafViewResolver</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setTemplateEngine</span><span class="o">(</span><span class="n">templateEngine</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>关于Spring MVC的配置类，除了扫描组件和配置模板解析器外，Spring提供了两种方式来配置，一种是实现<code>WebMvcConfigurer</code>接口，另一种是继承<code>WebMvcConfigurationSupport</code>。由于Java 8的接口中提供了<code>default</code>关键字来修饰接口方法，使得接口可以存在默认的实现，所以使用<code>WebMvcConfigurer</code>接口也不必实现所有接口。而在SpringBoot 2中使用<code>WebMvcConfigurationSupport</code>有可能会导致SpringBoot的自动配置不生效，并且在Spring MVC中使用<code>WebMvcConfigurationSupport</code>也可能导致配置类不生效，所以我个人<b><u>推荐使用<code>WebMvcConfigurer</code></u></b>。</p>
<p>如果你使用<code>WebMvcConfigurationSupport</code>后发现拦截器等配置不生效，那么可以尝试实现<code>WebMvcConfigurer</code>接口来解决问题。</p>
</blockquote>
<p>DAO相关配置类：</p>
<p><code>jdbc.properties</code>（数据库配置，放在项目中<code>resources</code>目录下）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">jdbc.driver</span><span class="o">=</span><span class="s">com.mysql.jdbc.Driver</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.url</span><span class="o">=</span><span class="s">jdbc:mysql:///spring_db?useSSL=false&amp;characterEncoding=utf-8</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.username</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.password</span><span class="o">=</span><span class="s">123456</span>
</span></span></code></pre></div><p><code>JdbcConfig</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JdbcConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.driver}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">driver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.url}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">url</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.username}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.password}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">dataSource</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="n">DruidDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DruidDataSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataSource</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="n">driver</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">PlatformTransactionManager</span> <span class="nf">transactionManager</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">DataSourceTransactionManager</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataSourceTransactionManager</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>MyBatisConfig</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyBatisConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SqlSessionFactoryBean</span> <span class="nf">sqlSessionFactory</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">SqlSessionFactoryBean</span> <span class="n">factoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">factoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">factoryBean</span><span class="o">.</span><span class="na">setTypeAliasesPackage</span><span class="o">(</span><span class="s">&#34;com.linner.domain&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">factoryBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MapperScannerConfigurer</span> <span class="nf">mapperScannerConfigurer</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="n">MapperScannerConfigurer</span> <span class="n">msc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapperScannerConfigurer</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">msc</span><span class="o">.</span><span class="na">setBasePackage</span><span class="o">(</span><span class="s">&#34;com.linner.dao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">msc</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="使用过滤器转换编码" data-numberify>使用过滤器转换编码<a class="anchor ms-1" href="#使用过滤器转换编码"></a></h1>
<p>在<code>ServletConfig</code>中重写<code>AbstractAnnotationConfigDispatcherServletInitializer</code>的<code>getServletFilters()</code>来注册过滤器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 注册过滤器
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">Filter</span><span class="o">[]</span> <span class="nf">getServletFilters</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置编码，将编码都转为 UTF-8
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">CharacterEncodingFilter</span> <span class="n">characterEncodingFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CharacterEncodingFilter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">characterEncodingFilter</span><span class="o">.</span><span class="na">setEncoding</span><span class="o">(</span><span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">characterEncodingFilter</span><span class="o">.</span><span class="na">setForceEncoding</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">HiddenHttpMethodFilter</span> <span class="n">hiddenHttpMethodFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HiddenHttpMethodFilter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">Filter</span><span class="o">[]{</span><span class="n">characterEncodingFilter</span><span class="o">,</span> <span class="n">hiddenHttpMethodFilter</span><span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="请求与响应" data-numberify>请求与响应<a class="anchor ms-1" href="#请求与响应"></a></h1>
<p>SpringMVC是Web层的框架，主要作用是接收请求、接收数据、响应结果。</p>
<p>编写Controller只需要在Controller类上使用<code>@Controller</code>注解即可。</p>
<h2 id="请求映射-requestmapping" data-numberify>请求映射 RequestMapping<a class="anchor ms-1" href="#请求映射-requestmapping"></a></h2>
<p>映射请求路径使用<code>@RequestMapping</code>注解。注解中的使用<code>value</code>属性指定映射的请求路径（由于是<code>value</code>属性，所以当注解中无需指定其它参数时，可以省略）。</p>
<p><code>@RequestMapping</code>可以分别作用在类和方法上：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/helloSpring&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">helloSpring</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Hello Spring!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/helloWorld&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">helloWorld</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Hello World!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p>方法上定义的<code>@RequestMapping</code>是具体的请求方式，包括请求路径和请求方式。</p>
<p>即，如果在方法上使用了<code>@RequestMapping</code>并且没有在类上使用<code>@RequestMapping</code>，那么该方法的请求路径即为方法上<code>@RequestMapping</code>中的值。</p>
</li>
<li>
<p>类上定义的<code>@RequestMapping</code>是请求目录。</p>
<p>即，如果在方法和类上均使用了<code>@RequestMapping</code>，那么该方法的请求路径需要加上类<code>@RequestMapping</code>注解中定义的目录。例如上方代码中的请求路径为<code>/user/helloSpring</code>和<code>/user/helloWorld</code>。</p>
</li>
</ul>
<p><code>value</code>属性是一个字符串数组，可以通过以下方式来指定多个请求路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">({</span><span class="s">&#34;hello&#34;</span><span class="o">,</span> <span class="s">&#34;helloWorld&#34;</span><span class="o">})</span>
</span></span></code></pre></div><p><code>@RequestMapping</code>除了<code>value</code>属性外，还有<code>method</code>属性。<code>method</code>属性是用来指定请求方式的，如：<code>@RequestMapping(method = RequestMethod.POST)</code>（匹配POST请求方式）。</p>
<blockquote>
<p>在客户端向服务器发送请求时，<code>DispatcherServlet</code>会首先根据<code>@RequestMapping</code>获取对应的控制器方法。</p>
</blockquote>
<h2 id="接收-url-参数" data-numberify>接收 URL 参数<a class="anchor ms-1" href="#接收-url-参数"></a></h2>
<blockquote>
<p>接收URL参数，GET和POST请求的编写方式一致。</p>
<p>如果要使用不同的方式接收请求，可以修改<code>@RequestMapping</code>注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/save&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span></span></code></pre></div></blockquote>
<h3 id="普通参数" data-numberify>普通参数<a class="anchor ms-1" href="#普通参数"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 [http://localhost/user/hello?name=张三] 访问
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 返回响应体 Hello 张三!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/hello&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Hello &#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&#34;!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 [http://localhost/user/login?name=张三&amp;password=abc] 访问
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 返回响应体 OK，终端输出 userName=张三; password=abc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">login</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">)</span> <span class="n">String</span> <span class="n">userName</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;userName=&#34;</span> <span class="o">+</span> <span class="n">userName</span> <span class="o">+</span> <span class="s">&#34;; password=&#34;</span> <span class="o">+</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p>请求参数：</p>
<p>普通参数即URL地址传参。</p>
<p><u>定义相同的地址参数名与方法形参变量名即可接收参数。</u></p>
<p><u>如果想要形参名与地址参数名不同则可使用<code>@RequestParam</code>注解定义地址参数名。</u></p>
<p>如果有多个请求参数则定义多个方法参数。</p>
</li>
<li>
<p>返回值：</p>
<p>返回值使用<code>@ResponseBody</code>注解后直接在方法中使用<code>return</code>返回。这里注解<code>@ResponseBody</code>是指将返回值作为响应体。</p>
</li>
</ul>
<h3 id="pojo类型参数" data-numberify>POJO类型参数<a class="anchor ms-1" href="#pojo类型参数"></a></h3>
<p>使用POJO类型接收参数，只需要让请求参数名与形参对象属性名相同即可。如果有嵌套的POJO参数，请求参数名与形参对象属性名相同，然后按照对象层次结构关系即可接收。</p>
<p>定义一个POJO类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">province</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// setter、getter and toString...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// setter、getter and toString...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>Controller：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 访问 [http://localhost/user/login?id=123&amp;password=abc&amp;name=张三&amp;address.province=广东&amp;address.city=广州]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 返回响应体 OK，终端输出 Login: User{id=123, name=&#39;张三&#39;, password=&#39;abc&#39;, address=Address{province=&#39;广东&#39;, city=&#39;广州&#39;}}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">login</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Login: &#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="数组集合类型参数" data-numberify>数组、集合类型参数<a class="anchor ms-1" href="#数组集合类型参数"></a></h3>
<p>接收数组参数只需让请求参数名与形参名相同且请求参数为多个即可（形参为数组类型）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 访问 [http://localhost/user/setHobbies?id=123&amp;hobbies=唱歌,跳舞,Rap,打篮球]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 返回响应体 OK，终端输出 User 123&#39;s hobbyies: [唱歌, 跳舞, Rap, 打篮球]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/setHobbies&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">setHobbies</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">hobbies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;User &#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&#34;&#39;s hobbies: &#34;</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">hobbies</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用集合类型形参接收参数，使用方式与数组不同（会报错）。因为SpringMVC将List看做是一个POJO对象来处理，将其创建一个对象并准备把前端的数据封装到对象中，但是List是一个接口无法创建对象。</p>
<p>使用集合类型形参接收参数需要使用<code>@RequestParam</code>绑定参数关系。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 访问方式与数组形式相同，响应体与终端输出也相同
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/setHobbies&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">setHobbies</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@RequestParam</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">hobbies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;User &#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&#34;&#39;s hobbies: &#34;</span> <span class="o">+</span> <span class="n">hobbies</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="日期格式" data-numberify>日期格式<a class="anchor ms-1" href="#日期格式"></a></h3>
<p>使用<code>@DateTimeFormat</code>可以设置参数的日期格式，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// URL: http://localhost/user/setBirthday?id=123&amp;birthday=2023/1/1 18:23:40
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/setBirthday&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">setBirthday</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@DateTimeFormat</span><span class="o">(</span><span class="n">pattern</span> <span class="o">=</span> <span class="s">&#34;yyyy/MM/dd HH:mm:ss&#34;</span><span class="o">)</span> <span class="n">Date</span> <span class="n">birthday</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;User &#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&#34;&#39;s birthday is &#34;</span> <span class="o">+</span> <span class="n">birthday</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="json-数据参数" data-numberify>JSON 数据参数<a class="anchor ms-1" href="#json-数据参数"></a></h2>
<p>使用JSON传输需要添加相应依赖。SpringMVC默认使用的是jackson来处理json的转换：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>jackson-databind<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>2.9.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在配置类中添加<code>@EnableWebMvc</code>注解来开启JSON数据类型自动转换：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner.controller&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebMvc</span> <span class="c1">// 开启JSON数据类型自动转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用JSON传输数据只需要在形参前添加<code>@ResponseBody</code>注解来将外部传递的JSON数据映射到形参到对象中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">login</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Login: &#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/setHobbies&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">setHobbies</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@RequestBody</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="cm">/* 也可以使用 String[] */</span> <span class="n">hobbies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;User &#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&#34;&#39;s hobbies: &#34;</span> <span class="o">+</span> <span class="n">hobbies</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>login()</code>：</p>
<p>URL：<code>http://localhost/user/login</code></p>
<p>JSON：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;张三&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;password&#34;</span><span class="p">:</span> <span class="s2">&#34;123&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;address&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;province&#34;</span><span class="p">:</span> <span class="s2">&#34;广东&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;city&#34;</span><span class="p">:</span> <span class="s2">&#34;广州&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></div></li>
<li>
<p><code>setHobbies</code>：</p>
<p>URL：<code>http://localhost/user/setHobbies2?id=123</code></p>
<p>JSON：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span><span class="s2">&#34;唱歌&#34;</span><span class="p">,</span> <span class="s2">&#34;跳舞&#34;</span><span class="p">,</span> <span class="s2">&#34;Rap&#34;</span><span class="p">,</span> <span class="s2">&#34;打篮球&#34;</span><span class="p">]</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="响应-json-数据" data-numberify>响应 JSON 数据<a class="anchor ms-1" href="#响应-json-数据"></a></h2>
<p>响应JSON数据需要依赖于<code>@ResponseBody</code>（在Controller中）和<code>@EnableWebMvc</code>（在配置类中）注解。将返回值设置为实体类对象，设置返回值类型为实体类类型，即可实现返回对应对象的JSON数据：</p>
<p>实体类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// constructor、setter、getter and toString ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>Controller:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/search&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Book</span> <span class="nf">search</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Book</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;Hello SpringMVC&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/searchName&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="nf">searchName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Search the book &#34;</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span> <span class="n">books</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">books</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Book</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">name</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">i</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">books</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>searchName()</code>：</p>
<p>URL：<code>http://localhost/books/searchName?name=SpringMVC</code>
返回JOSN：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC0&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC1&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC2&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC3&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC4&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div></li>
<li>
<p><code>search()</code>：</p>
<p>URL：<code>http://localhost/books/search?id=123</code>
返回JSON：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;SpringMVC&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="ant-风格路径" data-numberify>Ant 风格路径<a class="anchor ms-1" href="#ant-风格路径"></a></h2>
<p>在Ant风格中，定义了以下几种符号：</p>
<ul>
<li><code>?</code>：表示匹配请求资源目录中的<u>任意单个字符</u>。</li>
<li><code>*</code>：表示匹配请求资源目录中的<u>任意0个或多个字符</u>。</li>
<li><code>/**/</code>：表示匹配请求路径中任意一层或多层目录。例如<code>/**/user</code>可以匹配<code>/abc/user</code>、<code>/abc/def/user</code>等等。</li>
</ul>
<h2 id="rest-风格" data-numberify>REST 风格<a class="anchor ms-1" href="#rest-风格"></a></h2>
<p>REST（Representational State Transfer，表现形式状态转换），是一种软件架构风格。REST的优点有：</p>
<ul>
<li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作。</li>
<li>简化书写。</li>
</ul>
<p>按照REST风格访问资源时使用行为动作区分对资源进行了何种操作：</p>
<ul>
<li>GET：查询；</li>
<li>POST：新增。</li>
<li>PUT：修改。</li>
<li>DELETE：删除。</li>
</ul>
<p>如：</p>
<ul>
<li>
<p><code>http://localhost/users</code> —— GET：</p>
<p>查询全部用户信息（查询）。</p>
</li>
<li>
<p><code>http://localhost/users/1</code> —— GET：查询指定用户（id为1）信息（查询）。</p>
</li>
<li>
<p><code>http://localhost/users</code> —— POST：添加用户信息（新增/保存）。</p>
</li>
<li>
<p><code>http://localhost/users</code> —— PUT：修改用户信息（修改/更新）。</p>
</li>
<li>
<p><code>http://localhost/users/1</code> —— DELETE：删除用户信息（删除）。</p>
</li>
</ul>
<blockquote>
<p>描述模块的名称通常使用复数，表示此类资源，而非单个资源。</p>
</blockquote>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/users&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 添加用户
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">save</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 删除用户
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/{id}&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">DELETE</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">delete</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 修改用户
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">PUT</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">update</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据用户id查询
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/{id}&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">searchById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 查询所有用户
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">searchAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>上方Controller中每个方法的<code>@RequestMapping</code>中都使用了<code>method</code>元素来确定请求方式。并且根据需要<code>save()</code>和<code>update()</code>都接收一个JSON数据。</p>
<p><code>delete()</code>和<code>searchById()</code>都使用了路径参数（<code>value = &quot;\{id}&quot;</code>）。指定路径参数后，需要在方法参数列表中添加名称相同的参数，并且用<code>@PathVariable</code>注解（<code>public String delete(@PathVariable int id)</code>）。</p>
<p>路径参数可以定义多个，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/{id}/{name}&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">searchById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果想要路径参数名与形参名不同，需要在<code>@PathVariable</code>中注明对应关系，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/{id}&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">DELETE</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">delete</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">&#34;id&#34;</span><span class="o">)</span> <span class="kt">int</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;OK&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="restful-快速开发" data-numberify>RESTful 快速开发<a class="anchor ms-1" href="#restful-快速开发"></a></h3>
<ul>
<li>
<p>使用<code>@RestController</code>注解：</p>
<p>将<code>@ResponseBody</code>注解提到类上，让所有的方法都有<code>@ResponseBody</code>的功能。
<code>@RestController</code>注解正好相当于<code>@Controller</code>加上<code>@ResponseBody</code>的功能，所以可以使用<code>@RestController</code>替代它们。</p>
</li>
<li>
<p>使用<code>@GetMapping</code>、<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>等替代<code>@RequestMapping</code>。</p>
<p>例如<code>@GetMapping</code>就相当于<code>RequestMapping(method = RequestMethod.GET)</code>。</p>
</li>
</ul>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 搜索全部书籍
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;All Books&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 搜索图书
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Get by id &#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 保存图书
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PostMapping</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">save</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">Book</span> <span class="n">book</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Save &#34;</span> <span class="o">+</span> <span class="n">book</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 修改图书
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PutMapping</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">update</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">Book</span> <span class="n">book</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Update &#34;</span> <span class="o">+</span> <span class="n">book</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 删除图书
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@DeleteMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">delete</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Delete by id&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="params-请求参数映射匹配" data-numberify>params 请求参数映射匹配<a class="anchor ms-1" href="#params-请求参数映射匹配"></a></h2>
<p><code>params</code>是<code>@RequestMapping</code>中的一个属性，该属性通过请求的请求参数匹配请求映射。</p>
<p>用法如下：</p>
<ul>
<li>
<p><code>&quot;param&quot;</code>：请求映射所匹配的请求必须携带<code>param</code>这个请求参数。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;login&#34;</span><span class="o">},</span> <span class="n">params</span> <span class="o">=</span> <span class="s">&#34;username&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>请求路径示例：</p>
<pre tabindex="0"><code>http://localhost/login?username=zhangsan
</code></pre></li>
<li>
<p><code>&quot;!param&quot;</code>：否定匹配，请求映射所匹配的请求必须不能携带<code>param</code>请求参数。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;login&#34;</span><span class="o">},</span> <span class="n">params</span> <span class="o">=</span> <span class="s">&#34;!username&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>如果请求路径中包含参数<code>username</code>将不会匹配到该<code>@RequestMapping</code>。</p>
</li>
<li>
<p><code>&quot;param=value&quot;</code>：等值匹配，请求映射所匹配的请求必须携带<code>param</code>请求参数，且<code>param</code>参数的值必须为<code>value</code>。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;login&#34;</span><span class="o">},</span> <span class="n">params</span> <span class="o">=</span> <span class="s">&#34;username=admin&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>请求路径为：</p>
<pre tabindex="0"><code>http://localhost/login?username=admin
</code></pre></li>
<li>
<p><code>&quot;param!=value&quot;</code>：非值匹配，请求映射所匹配的请求必须携带<code>param</code>请求参数，但<code>param</code>的值不能为<code>value</code>。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;login&#34;</span><span class="o">},</span> <span class="n">params</span> <span class="o">=</span> <span class="s">&#34;username!=admin&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>如果请求路径携带参数<code>username</code>且值为<code>admin</code>则匹配失败。</p>
</li>
<li>
<p><code>{expression1[, expression2[, ...]]}</code>：</p>
<p><code>params</code>是字符串数组类型，可以指定多个参数规则，其中<code>expression</code>可以是以上任何类型的字符串表达式中的任何一种。</p>
</li>
</ul>
<p><code>params</code>只对其指定的参数有要求，没有被其指定的参数并没有任何限制。</p>
<p>如果请求的路径和方式都满足<code>@RequestMapping</code>，但是与<code>params</code>指定的规则不付，如果此时没有其它映射来匹配这个请求，服务器会返回给浏览器<code>400</code>错误。</p>
<h2 id="headers-请求头匹配" data-numberify>headers 请求头匹配<a class="anchor ms-1" href="#headers-请求头匹配"></a></h2>
<p><code>headers</code>是<code>@RequestMapping</code>的属性，它指定请求的请求头信息匹配规则。</p>
<p><code>headers</code>的字符串表达式语法与<code>params</code>十分相似：</p>
<ul>
<li>
<p><code>&quot;header&quot;</code>：请求映射所匹配的请求必须携带<code>header</code>请求头信息。</p>
</li>
<li>
<p><code>&quot;!header&quot;</code>：请求映射所匹配的请求必须不能携带<code>header</code>请求头信息。</p>
</li>
<li>
<p><code>&quot;header=value&quot;</code>：请求映射所匹配的请求必须携带<code>header</code>请求头信息且<code>header=value</code>。</p>
<p>请求头中使用的是<code>:</code>分隔开的键值对，<code>:</code>左边是键（即上述中的<code>header</code>），右边是值（即上述中的<code>value</code>）。只需要将<code>:</code>替换为<code>=</code>即是对应的<code>headers</code>字符串表达式。</p>
</li>
<li>
<p><code>&quot;header!=value&quot;</code>：要求请求映射所匹配的请求必须携带<code>header</code>请求头信息且<code>header!=value</code>。</p>
</li>
<li>
<p><code>{expression1[, expression2[, ...]]}</code>：<code>headers</code>属性同样是字符串数组类型，可以在<code>{}</code>中使用上述任何表达式。</p>
</li>
</ul>
<p>当<code>@RequestMapping</code>其它条件都满足，除了<code>headers</code>时，服务器会返回<code>404</code>错误。</p>
<hr>
<h1 id="域对象共享数据" data-numberify>域对象共享数据<a class="anchor ms-1" href="#域对象共享数据"></a></h1>
<p><code>request</code>域对象共享数据的常用方式大致有5种：</p>
<ol>
<li>通过<code>ServletAPI</code>获取（不建议使用）。即通过<code>ServletRequest</code>或<code>HttpServletRequest</code>对象获取<code>request</code>域。</li>
<li>通过<code>ModelAndView</code>获取。</li>
<li>通过<code>Model</code>获取。</li>
<li>通过<code>Map&lt;String, Object&gt;</code>获取。</li>
<li>通过<code>ModelMap</code>获取。</li>
</ol>
<h2 id="servletapi" data-numberify>ServletAPI<a class="anchor ms-1" href="#servletapi"></a></h2>
<p>获取<code>request</code>域对象共享数据的方式之一就是使用<code>ServletAPI</code>。即，在Controller对象中的映射方法中，添加一个<code>ServletRequest</code>或<code>HttpServletRequest</code>对象参数。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testServletAPI&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testServletAPI</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello ServletAPI!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testRequestScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>获取<code>response</code>也是类似的方法。在参数列表中指定一个<code>ServletResponse</code>或<code>HttpServletResponse</code>对象参数。</p>
</blockquote>
<h2 id="model" data-numberify>Model<a class="anchor ms-1" href="#model"></a></h2>
<p><code>Model</code>是SpringMVC提供的专用于共享<code>request</code>域对象数据。</p>
<p>使用<code>Model</code>的方式与使用<code>ServletAPI</code>类似，在形参列表中指定一个<code>Model</code>类型的参数即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testModel&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testModel</span><span class="o">(</span><span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Model!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testRequestScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">model</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testRequestScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testRequestScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="map-string-object" data-numberify>Map String Object<a class="anchor ms-1" href="#map-string-object"></a></h2>
<p>使用<code>Map&lt;String, Object&gt;</code>共享<code>request</code>域对象数据，使用方式也是在形参列表中定义一个<code>Map&lt;String, Object&gt;</code>类型形参。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testMap&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testMap</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Map!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testRequestScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testRequestScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testRequestScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="modelmap" data-numberify>ModelMap<a class="anchor ms-1" href="#modelmap"></a></h2>
<p><code>ModelMap</code>的用法与<code>Map</code>十分类似。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testModelMap&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testModelMap</span><span class="o">(</span><span class="n">ModelMap</span> <span class="n">modelMap</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">modelMap</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello ModelMap!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testRequestScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">modelMap</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testRequestScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testRequestScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="modelandview" data-numberify>ModelAndView<a class="anchor ms-1" href="#modelandview"></a></h2>
<p><code>ModelAndView</code>是SpringMVC提供的用于共享<code>request</code>域对象数据和视图解析跳转的API。</p>
<p>通过<code>ModelAndView</code>共享<code>request</code>域数据，无需在形参中指定该类型参数，只需在方法中<code>new</code>一个即可。但是使用<code>ModelAndView</code>需要将该类型对象作为返回值返回。</p>
<p>除了使用原生<code>ServletAPI</code>之外，使用其它方法（如上<code>Map</code>、<code>Model</code>、<code>ModelMap</code>等）共享<code>request</code>域数据，最终SpringMVC都会将模型数据和视图封装到<code>ModelAndView</code>中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testModelAndView&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ModelAndView</span> <span class="nf">testModelAndView</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ModelAndView</span> <span class="n">mav</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelAndView</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 处理模型数据，即向请求域request共享数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">mav</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello ModelAndView!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置视图名称（返回视图需要有对应的页面）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">mav</span><span class="o">.</span><span class="na">setViewName</span><span class="o">(</span><span class="s">&#34;success&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取数据（第一次写入后可能读取失败，因为只有在方法执行完毕后才能真正写入）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testRequestScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">mav</span><span class="o">.</span><span class="na">getModel</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;testRequestScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testRequestScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">mav</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>success.html</code>（在<code>Webapp/WEB-INF/templates/</code>下创建）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Success!<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Success!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p>其实<code>ModelAndView</code>也可以作为Controller方法的参数使用。</p>
<p>需要注意的是，使用<code>ModelAndView</code>设置视图对象无论是否使用<code>@ResponseBody</code>，返回的始终是视图。</p>
</blockquote>
<h2 id="mapmodel-和-modelmap" data-numberify>Map、Model 和 ModelMap<a class="anchor ms-1" href="#mapmodel-和-modelmap"></a></h2>
<p>在使用<code>Map&lt;String, Object&gt;</code>、<code>Model</code>和<code>ModelMap</code>时SpringMVC传入的都是<code>BindingAwareModelMap</code>类型对象。</p>
<ul>
<li>
<p><code>Model</code>是一个接口，它定义了<code>addAllAttributes()</code>、<code>getAttribute()</code>等接口方法。</p>
</li>
<li>
<p><code>ModelMap</code>继承了<code>LinkedHashMap&lt;String, Object&gt;</code>，所以它也是属于<code>Map</code>的子类。<code>ModelMap</code>给出了<code>addAllAttributes()</code>、<code>getAttribute()</code>等接口的实现。</p>
</li>
<li>
<p><code>BindingAwareModelMap</code>继承自<code>ExtendedModelMap</code>类，而<code>ExtendedModelMap</code>又是<code>ModelMap</code>的子类和<code>Model</code>接口的实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExtendedModelMap</span> <span class="kd">extends</span> <span class="n">ModelMap</span> <span class="kd">implements</span> <span class="n">Model</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>BindingAwareModelMap</code>重写了<code>Map</code>的<code>put()</code>和<code>putAll()</code>，使得它能作为<code>Map</code>来读写<code>request</code>域。</p>
</li>
</ul>
<p>综上，<code>BindingAwareModelMap</code>可以作为<code>Model</code>、<code>Map&lt;String, Object&gt;</code>和<code>ModelMap</code>传入Controller方法中。</p>
<p>在浏览器发送请求后，实际上调用Controller中对应方法的是<code>DispatcherServlet</code>中的<code>doDispatch()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doDispatch</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ModelAndView</span> <span class="n">mv</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1">// Actually invoke the handler.（实际的请求处理者）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mv</span> <span class="o">=</span> <span class="n">ha</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">.</span><span class="na">getHandler</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 最后返回一个封装好的ModelAndView对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">processDispatchResult</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="n">mv</span><span class="o">,</span> <span class="n">dispatchException</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>通过断点调试最后发现，无论是<code>Map</code>、<code>Model</code>、<code>ModelMap</code>还是<code>ModelAndView</code>，它们最后都会被封装为<code>ModelAndView</code>（即使Controller方法返回的是<code>ModelAndView</code>，Controller方法中的<code>ModelAndView</code>和<code>DispatcherServlet</code>对象的<code>doDispatch()</code>中的<code>ModelAndView</code>地址也并不相同）。</p>
</blockquote>
<blockquote>
<p>在<code>processDispatchResult()</code>中调用了下方所示方法来进行视图渲染：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">render</span><span class="o">(</span><span class="n">mv</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span></code></pre></div></blockquote>
<h2 id="向-session-域共享数据" data-numberify>向 Session 域共享数据<a class="anchor ms-1" href="#向-session-域共享数据"></a></h2>
<p>使用原生<code>ServletAPI</code>共享：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testSession&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testSession</span><span class="o">(</span><span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Session!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testSessionScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testSessionScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testSessionScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Session可以从Request域中获取：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testSessionInServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testSession</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从Request域中获取Session
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HttpSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Session In Servlet!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testSessionScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testSessionScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testSessionScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="向-application-域共享数据" data-numberify>向 Application 域共享数据<a class="anchor ms-1" href="#向-application-域共享数据"></a></h2>
<p>通过Session域获取<code>ServletContext</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testApplication&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testApplication</span><span class="o">(</span><span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从Session域中获取ServletContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ServletContext</span> <span class="n">application</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">application</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Application!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testSessionScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">application</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testSessionScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testSessionScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>通过Request域获取<code>ServletContext</code>（不推荐）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testApplicationInServlet&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testApplication</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从Request域中获取ServletContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ServletContext</span> <span class="n">application</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">application</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">,</span> <span class="s">&#34;Hello Application In Servlet !&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">testSessionScope</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">application</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;testSessionScope&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testSessionScope</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">testSessionScope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="请求报文转换" data-numberify>请求报文转换<a class="anchor ms-1" href="#请求报文转换"></a></h1>
<p><code>HttpMessageConverter</code>即报文信息转换器，能将请求报文转换为Java对象，或将Java对象转换为响应报文</p>
<p><code>HttpMessageConverter</code>提供了两个注解和两个类型：</p>
<ul>
<li>
<p><code>@ResponseBody</code>：即上方Controller方法中使用的将返回值（Java对象）作为响应体发送给浏览器的注解。</p>
</li>
<li>
<p><code>ResponseEntity</code>：可以作为Controller方法的返回值返回，并响应给浏览器。</p>
</li>
<li>
<p><code>@RequestBody</code>：将Controller方法形参指定为请求体，并接收从浏览器发送过来的请求体。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/testRequestBody&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testRequestBody</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">String</span> <span class="n">requestBody</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">requestBody</span> <span class="o">=</span> <span class="s">&#34;RequestBody{&#39;&#34;</span> <span class="o">+</span> <span class="n">requestBody</span> <span class="o">+</span> <span class="s">&#34;&#39;}&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">requestBody</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>RequestEntity</code>：是封装请求报文的一种类型，在Controller方法形参中使用，它获得的是<u>整个请求报文</u>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testRequestEntity&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testRequestEntity</span><span class="o">(</span><span class="n">RequestEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">requestEntity</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">requestEntity</span><span class="o">.</span><span class="na">getHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">body</span> <span class="o">=</span> <span class="n">requestEntity</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">response</span> <span class="o">=</span> <span class="s">&#34;RequestEntity{&#34;</span> <span class="o">+</span> <span class="n">headers</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;}\nRequestBody{&#39;&#34;</span> <span class="o">+</span> <span class="n">body</span> <span class="o">+</span> <span class="s">&#34;&#39;}&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>往响应体写入信息还有一个方法，就是使用原生<code>ServletAPI</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testResponse&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testResponse</span><span class="o">(</span><span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">print</span><span class="o">(</span><span class="s">&#34;Hello Response!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="文件上传下载" data-numberify>文件上传下载<a class="anchor ms-1" href="#文件上传下载"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>commons-fileupload<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>commons-fileupload<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.3.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="responseentity-实现下载" data-numberify>ResponseEntity 实现下载<a class="anchor ms-1" href="#responseentity-实现下载"></a></h2>
<p>将<code>ResponseEntity&lt;byte[]&gt;</code>作为返回值，在其中设置好对应的响应头、响应体和状态码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/testDown&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[]&gt;</span> <span class="nf">testResponseEntity</span><span class="o">(</span><span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取ServletContext对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ServletContext</span> <span class="n">servletContext</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取服务器中文件的真实路径 getRealPath()如果不带参数的话获取的是服务器的部署路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">realPath</span> <span class="o">=</span> <span class="n">servletContext</span><span class="o">.</span><span class="na">getRealPath</span><span class="o">(</span><span class="s">&#34;/static/img/test.png&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;RealPath: &#34;</span> <span class="o">+</span> <span class="n">realPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建输入流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">FileInputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">realPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建字节数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">is</span><span class="o">.</span><span class="na">available</span><span class="o">()];</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将流写到字节数组中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建HttpHeaders对象设置响应头信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">MultiValueMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置下载方式以及下载文件的名字
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">headers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Content-Disposition&#34;</span><span class="o">,</span> <span class="s">&#34;attachment;filename=test.png&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置响应状态码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HttpStatus</span> <span class="n">statusCode</span> <span class="o">=</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建ResponseEntity对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[]&gt;</span> <span class="n">responseEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">bytes</span><span class="o">,</span> <span class="n">headers</span><span class="o">,</span> <span class="n">statusCode</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 关闭输入流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">is</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">responseEntity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在下载文件之前，需要通过Session获取当前要下载文件的真实路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ServletContext</span> <span class="n">servletContext</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="n">realPath</span> <span class="o">=</span> <span class="n">servletContext</span><span class="o">.</span><span class="na">getRealPath</span><span class="o">(</span><span class="s">&#34;/static/img/test.png&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p>获取了真实路径后，通过<code>FileInputStream</code>将文件读取并写入字节数组<code>byte[]</code>中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">FileInputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">realPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">is</span><span class="o">.</span><span class="na">available</span><span class="o">()];</span>
</span></span><span class="line"><span class="cl"><span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">is</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span></code></pre></div><p>下载文件时，需要在响应头中设置下载方式以及文件名：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">MultiValueMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 以附件方式下载文件，并且默认文件名为test.png
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">headers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Content-Disposition&#34;</span><span class="o">,</span> <span class="s">&#34;attachment;filename=test.png&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p>最后将字节数组作为响应体，再加上响应头和状态码等信息，创建<code>ResponseEntity</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[]&gt;</span> <span class="n">responseEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">bytes</span><span class="o">,</span> <span class="n">headers</span><span class="o">,</span> <span class="n">statusCode</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="n">responseEntity</span><span class="o">;</span>
</span></span></code></pre></div><h2 id="文件上传" data-numberify>文件上传<a class="anchor ms-1" href="#文件上传"></a></h2>
<p>文件上传依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>commons-fileupload<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>commons-fileupload<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.3.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在<code>springMVC.xml</code>中配置文件上传解析器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 配置文件上传解析器，将上传的文件封装为MultipartFile --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;multipartResolver&#34;</span> <span class="na">class=</span><span class="s">&#34;org.springframework.web.multipart.commons.CommonsMultipartResolver&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>文件上传实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/testUp&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ResponseBody</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">testUp</span><span class="o">(</span><span class="n">MultipartFile</span> <span class="n">photo</span><span class="o">,</span> <span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取上传文件的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">photo</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取上传文件的后缀名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">suffixName</span> <span class="o">=</span> <span class="n">fileName</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">fileName</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="s">&#34;.&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将UUID作为文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将UUID和后缀名拼接后的结果作为最终的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">fileName</span> <span class="o">=</span> <span class="n">uuid</span> <span class="o">+</span> <span class="n">suffixName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 需要通过 ServletContext 获取服务器中 photo 目录的路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ServletContext</span> <span class="n">servletContext</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// photo 其实也可以用 photo.getName() 替代
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">photoPath</span> <span class="o">=</span> <span class="n">servletContext</span><span class="o">.</span><span class="na">getRealPath</span><span class="o">(</span><span class="s">&#34;photo&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">photoPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 判断photoPath所对应路径是否存在
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(!</span><span class="n">file</span><span class="o">.</span><span class="na">exists</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 若不存在，则创建目录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">file</span><span class="o">.</span><span class="na">mkdir</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">finalPath</span> <span class="o">=</span> <span class="n">photoPath</span> <span class="o">+</span> <span class="n">File</span><span class="o">.</span><span class="na">separator</span> <span class="o">+</span> <span class="n">fileName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">photo</span><span class="o">.</span><span class="na">transferTo</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">finalPath</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fileName</span> <span class="o">+</span> <span class="s">&#34; OK!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上传文件时，需要考虑文件之间文件名的冲突问题，可以通过将文件名改为UUID解决：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 获取上传文件的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">photo</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 获取上传文件的后缀名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">suffixName</span> <span class="o">=</span> <span class="n">fileName</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">fileName</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="s">&#34;.&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 将UUID作为文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 将UUID和后缀名拼接后的结果作为最终的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">fileName</span> <span class="o">=</span> <span class="n">uuid</span> <span class="o">+</span> <span class="n">suffixName</span><span class="o">;</span>
</span></span></code></pre></div><hr>
<h1 id="拦截器" data-numberify>拦截器<a class="anchor ms-1" href="#拦截器"></a></h1>
<p>拦截器（Interceptor）是一种动态拦截方法调用的机制，在SpringMVC中动态拦截控制器方法的执行。拦截器可以在指定的发那个发调用前后执行预先设定的代码，可以阻止原始方法的执行。拦截器和过滤器在作用和执行顺序上很相似。它们的关系如下图所示：</p>
<p><picture><img class="img-fluid " alt="拦截器和过滤器的关系" src="/docs/spring/springmvc/springmvc-base/1630676903190.png" loading="lazy" width="1221" height="390" />
</picture>

</p>
<p>创建拦截器类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>  <span class="c1">// 由SpringMVC来管理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookInterceptor</span> <span class="kd">implements</span> <span class="n">HandlerInterceptor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;preHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;postHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;afterCompletion...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="拦截器配置类" data-numberify>拦截器配置类<a class="anchor ms-1" href="#拦截器配置类"></a></h2>
<p>编写拦截器配置类有两种方式：</p>
<ul>
<li>实现<code>WebMvcConfigurer</code>接口；</li>
<li>继承<code>WebMvcConfigurationSupport</code>类并重写方法。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 扫描interceptor包
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner.interceptor&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcSupport</span> <span class="kd">extends</span> <span class="n">WebMvcConfigurationSupport</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>  <span class="c1">// 自动装配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">BookInterceptor</span> <span class="n">bookInterceptor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="n">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">            添加（声明）拦截器并配置拦截规则
</span></span></span><span class="line"><span class="cl"><span class="cm">            可以同时配置多个规则
</span></span></span><span class="line"><span class="cl"><span class="cm">            如果不添加拦截规则，默认拦截所有请求
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">bookInterceptor</span><span class="o">).</span><span class="na">addPathPatterns</span><span class="o">(</span><span class="s">&#34;/books&#34;</span><span class="o">,</span> <span class="s">&#34;/books/*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>让SpringMVC扫描到拦截器的配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.controller&#34;</span><span class="o">,</span> <span class="s">&#34;com.linner.config&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebMvc</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcConfig</span> <span class="o">{}</span>
</span></span></code></pre></div><p>拦截器的配置类<code>SpingMvcSupport</code>可以书写在<code>SpringMvcConfig</code>中，以简化书写（并演示继承<code>WebMvcConfigurer</code>编写拦截器配置类）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.controller&#34;</span><span class="o">,</span> <span class="s">&#34;com.linner.interceptor&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebMvc</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcConfig</span> <span class="kd">implements</span> <span class="n">WebMvcConfigurer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">BookInterceptor</span> <span class="n">bookInterceptor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="n">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">bookInterceptor</span><span class="o">).</span><span class="na">addPathPatterns</span><span class="o">(</span><span class="s">&#34;/books&#34;</span><span class="o">,</span> <span class="s">&#34;/books/*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="拦截器执行过程" data-numberify>拦截器执行过程<a class="anchor ms-1" href="#拦截器执行过程"></a></h2>
<p>运行程序，发送<code>books</code>开头的请求（如<code>http://localhost/books</code>），终端会有如下输出：</p>
<pre tabindex="0"><code>preHandle...
getAll...
postHandle...
afterCompletion...
</code></pre><p>拦截器的执行顺序如下：</p>
<ol>
<li>执行<code>preHandle()</code>。
<ul>
<li><code>preHandle()</code>返回值为<code>true</code>：
<ol>
<li>执行请求路径相应的方法或下一个拦截器的<code>preHandle()</code>。</li>
<li>判断是否执行<code>postHandle()</code>：
<ul>
<li>Controller被执行（后续拦截器链中没有一个<code>preHandle()</code>返回值为<code>false</code>），执行<code>postHandle()</code>。</li>
<li>Controller没有被执行（后续拦截器链中存在一个<code>preHandle()</code>返回值为<code>false</code>），不执行<code>postHandle()</code>。</li>
</ul>
</li>
<li>执行<code>afterCompletion()</code>。</li>
</ol>
</li>
<li><code>preHandle()</code>返回值为<code>false</code>。</li>
</ul>
</li>
<li>结束。</li>
</ol>
<p>当配置多个拦截器时，形成拦截器链。多个<code>preHandle()</code>按照Interceptor被声明顺序执行；多个<code>postHandle()</code>按照Interceptor被声明顺序逆序执行。即，<u>拦截器链的运行顺序以拦截器添加顺序为准</u>。</p>
<p>当拦截器中出现对原始处理器的拦截，后面的拦截器均终止运行。当拦截器运行中断，仅运行配置在前面的拦截器的<code>afterCompletion()</code>操作（<code>afterCompletion()</code>代表当前拦截器执行完成，与后续拦截器链中<code>preHandle()</code>的返回值和Controller是否被执行无关）。</p>
<p>假设现在有如下两个拦截器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FirstInterceptor</span> <span class="kd">implements</span> <span class="n">HandlerInterceptor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;FirstInterceptor preHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;FirstInterceptor postHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;FirstInterceptor afterCompletion...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LaterInterceptor</span> <span class="kd">implements</span> <span class="n">HandlerInterceptor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;LaterInterceptor preHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;LaterInterceptor postHandle...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;LaterInterceptor afterCompletion...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>它们在拦截器类中的添加顺序为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">FirstInterceptor</span> <span class="n">firstInterceptor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">LaterInterceptor</span> <span class="n">laterInterceptor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="n">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果没有配置拦截路径，则默认拦截所有请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">firstInterceptor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">regisrty</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">laterInterceptor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>访问任意资源后，终端输出：</p>
<pre tabindex="0"><code>FirstInterceptor preHandle...
LaterInterceptor preHandle...
LaterInterceptor postHandle...
FirstInterceptor postHandle...
LaterInterceptor afterCompletion...
FirstInterceptor afterCompletion...
</code></pre><p>实际上在<code>DispatcherServlet</code>的<code>doDispatch()</code>方法中，在执行<code>mv = ha.handle(...)</code>之前进行了一个条件判断：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doDispatch</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 拦截器链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HandlerExecutionChain</span> <span class="n">mappedHandler</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取拦截器链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mappedHandler</span> <span class="o">=</span> <span class="n">getHandler</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">mappedHandler</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">noHandlerFound</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 执行相应Interceptor的preHandle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(!</span><span class="n">mappedHandler</span><span class="o">.</span><span class="na">applyPreHandle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Actually invoke the handler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mv</span> <span class="o">=</span> <span class="n">ha</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">.</span><span class="na">getHandler</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 执行相应Interceptor的postHandle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mappedHandler</span><span class="o">.</span><span class="na">applyPostHandle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mv</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 处理调度结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 包含了ModelAndView的进一步处理（渲染视图、处理模型）、还有Interceptor的afterCompletion()调用等等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">processDispatchResult</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="n">mv</span><span class="o">,</span> <span class="n">dispatchException</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>即<code>HandlerExecutionChain</code>（控制器执行链）对象的<code>applyPreHandle()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * preHandle执行链
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kt">boolean</span> <span class="nf">applyPreHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取interceptorList中的interceptor，并逐个执行它们的preHandle方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取interceptor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">HandlerInterceptor</span> <span class="n">interceptor</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行interceptor.preHandle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 如果有一个interceptor返回了false，则立即执行triggerAfterCompletion()并返回false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">interceptor</span><span class="o">.</span><span class="na">preHandle</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">handler</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">triggerAfterCompletion</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 记录拦截器链中返回false的前一个拦截器下标
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">this</span><span class="o">.</span><span class="na">interceptorIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>applyPostHandle()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * postHandle执行链
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">applyPostHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">ModelAndView</span> <span class="n">mv</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 按照倒序，逐个执行interceptor.postHandle()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HandlerInterceptor</span> <span class="n">interceptor</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">interceptor</span><span class="o">.</span><span class="na">postHandle</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">handler</span><span class="o">,</span> <span class="n">mv</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>triggerAfterCompletion()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * afterCompletion执行链
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">triggerAfterCompletion</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从interceptorIndex开始，倒序执行interceptor.afterCompletion()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 即triggerAfterCompletion()只会执行那些返回true的interceptor的afterCompletion()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorIndex</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HandlerInterceptor</span> <span class="n">interceptor</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">interceptorList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">interceptor</span><span class="o">.</span><span class="na">afterCompletion</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">handler</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">ex2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;HandlerInterceptor.afterCompletion threw exception&#34;</span><span class="o">,</span> <span class="n">ex2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在一切正常运行完成后，调用Interceptor的<code>afterCompletion()</code>的情况有点复杂（<code>DispatcherServlet</code>中的<code>processDispatchResult()</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">processDispatchResult</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Nullable</span> <span class="n">HandlerExecutionChain</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">ModelAndView</span> <span class="n">mv</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Nullable</span> <span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Did the handler return a view to render?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">mv</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mv</span><span class="o">.</span><span class="na">wasCleared</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 渲染视图
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">render</span><span class="o">(</span><span class="n">mv</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="c1">// 在处理完其它调度结果后，通过mappedHandler.triggerAfterCompletion()来调用interceptor.afterCompletion()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">mappedHandler</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Exception (if any) is already handled..
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">mappedHandler</span><span class="o">.</span><span class="na">triggerAfterCompletion</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>在<code>DispatcherServlet</code>的<code>doDispatch()</code>方法中还有许多<code>try ... catch</code>，当捕捉到异常时，<code>doDispatch()</code>也会通过<code>triggerAfterCompletion()</code>方法来调用<code>mappedHandler.triggerAfterCompletion()</code>。</p>
</blockquote>
<p>更具上述代码总结出<code>HandlerExecutionChain</code>中的执行情况：</p>
<ul>
<li>
<p><code>applyPreHandle()</code>：在执行Controller方法之前执行。</p>
</li>
<li>
<p><code>applyPostHandle()</code>：执行了Controller方法之后执行。</p>
</li>
<li>
<p><code>triggerAfterCompletion()</code>：</p>
<p>两种执行情况：</p>
<ul>
<li>执行<code>applyPreHandle()</code>时，有一个拦截器返回了<code>false</code>；</li>
<li>执行完<code>applyPostHandle()</code>之后，且无错误时执行（即<code>processDispatchResult()</code>中的<code>triggerAfterCompletion()</code>）；</li>
<li>执行<code>applyPreHandle()</code>、<code>applyPostHandle()</code>和Controller方法过程中，出现异常时执行（出现异常时是在<code>DispatcherServlet</code>的<code>triggerAfterCompletion()</code>中调用）。</li>
</ul>
</li>
</ul>
<h2 id="配置文件配置拦截器" data-numberify>配置文件配置拦截器<a class="anchor ms-1" href="#配置文件配置拦截器"></a></h2>
<p>除了使用配置类外，也可以使用配置文件的方式来配置拦截器。</p>
<p>使用<code>&lt;mvc:interceptors&gt;</code>来配置拦截器。添加拦截器的方式有两种，一种是使用<u><code>&lt;bean class=&quot;...&quot;/&gt;</code></u>，另一种是使用<u><code>&lt;ref bean=&quot;...&quot;/&gt;</code></u>，这两种方式本质上没有什么区别。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;mvc:interceptors&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;asia.linner.interceptor.FirstInterceptor&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- bean中指定的是Bean的默认id，即首字母小写的类名 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&#34;laterInterceptor&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mvc:interceptors&gt;</span>
</span></span></code></pre></div><p>在<code>&lt;mvc:interceptors&gt;</code>中可以使用<code>&lt;mvc:interceptor&gt;</code>来配置具体的拦截规则：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;mvc:interceptors&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mvc:interceptor&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- &lt;mvc:mapping&gt;: 拦截路径 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mvc:mapping</span> <span class="na">path=</span><span class="s">&#34;/**&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- &lt;mvc:exclude-mapping&gt;: 排除路径（不拦截） --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mvc:exclude-mapping</span> <span class="na">path=</span><span class="s">&#34;/users&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mvc:exclude-mapping</span> <span class="na">path=</span><span class="s">&#34;/users/**&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 假设只有users和books这两个请求 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&#34;bookInterceptor&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/mvc:interceptor&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mvc:interceptors&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="静态资源处理器" data-numberify>静态资源处理器<a class="anchor ms-1" href="#静态资源处理器"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcSupport</span> <span class="kd">extends</span> <span class="n">WebMvcConfigurationSupport</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="n">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 放行单个目录（Webapp目录下）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">&#34;/pages/**&#34;</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">&#34;/pages/&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 也可以将Webapp整个目录都添加：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// registry.addResourceHandler(&#34;/**&#34;).addResourceLocations(&#34;classpath:/&#34;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>addResourceHandler()</code>：定义访问资源路径。</li>
<li><code>addResourceLocations()</code>：定义访问路径时的静态资源目录。</li>
</ul>
<hr>
<h1 id="异常处理" data-numberify>异常处理<a class="anchor ms-1" href="#异常处理"></a></h1>
<p>Spring MVC 自带了两个异常处理器分别是<code>SimpleMappingExceptionResolver</code>和<code>DefaultHandlerExceptionResolver</code>。</p>
<p>其中<code>DefaultHandlerExceptionResolver</code>是由Spring MVC定义的默认异常处理器，它的<code>doResolveException()</code>定义了一些常见的异常处理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">ModelAndView</span> <span class="nf">doResolveException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpRequestMethodNotSupportedException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpRequestMethodNotSupported</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpRequestMethodNotSupportedException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpMediaTypeNotSupportedException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpMediaTypeNotSupported</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpMediaTypeNotSupportedException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpMediaTypeNotAcceptableException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpMediaTypeNotAcceptable</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpMediaTypeNotAcceptableException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">MissingPathVariableException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleMissingPathVariable</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">MissingPathVariableException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">MissingServletRequestParameterException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleMissingServletRequestParameter</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">MissingServletRequestParameterException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">ServletRequestBindingException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleServletRequestBindingException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">ServletRequestBindingException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">ConversionNotSupportedException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleConversionNotSupported</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">ConversionNotSupportedException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">TypeMismatchException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleTypeMismatch</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">TypeMismatchException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpMessageNotReadableException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpMessageNotReadable</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpMessageNotReadableException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">HttpMessageNotWritableException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleHttpMessageNotWritable</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">HttpMessageNotWritableException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">MethodArgumentNotValidException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleMethodArgumentNotValidException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">MethodArgumentNotValidException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">MissingServletRequestPartException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleMissingServletRequestPartException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">MissingServletRequestPartException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">BindException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleBindException</span><span class="o">((</span><span class="n">BindException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">NoHandlerFoundException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleNoHandlerFoundException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">NoHandlerFoundException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="k">instanceof</span> <span class="n">AsyncRequestTimeoutException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">handleAsyncRequestTimeoutException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="o">(</span><span class="n">AsyncRequestTimeoutException</span><span class="o">)</span> <span class="n">ex</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">handlerEx</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isWarnEnabled</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Failure while trying to resolve exception [&#34;</span> <span class="o">+</span> <span class="n">ex</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="o">,</span> <span class="n">handlerEx</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>SimpleMappingExceptionResolver</code>是Spring MVC提供的自定义异常处理器。</p>
<h2 id="基于配置的异常处理" data-numberify>基于配置的异常处理<a class="anchor ms-1" href="#基于配置的异常处理"></a></h2>
<p>在<code>springMVC.xml</code>中配置异常处理器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 配置异常处理 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;exceptionMappings&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;props&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">                    设置要处理的异常和返回的视图
</span></span></span><span class="line"><span class="cl"><span class="c">                    prop的key：表示处理器方法执行过程中出现的异常
</span></span></span><span class="line"><span class="cl"><span class="c">                    prop的值：表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面
</span></span></span><span class="line"><span class="cl"><span class="c">                 --&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;java.lang.ArithmeticException&#34;</span><span class="nt">&gt;</span>error<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/props&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">            将异常信息共享在请求域中的键
</span></span></span><span class="line"><span class="cl"><span class="c">            exceptionAttribute设置一个属性名，将出现的异常信息在请求域中进行共享
</span></span></span><span class="line"><span class="cl"><span class="c">         --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;exceptionAttribute&#34;</span> <span class="na">value=</span><span class="s">&#34;ex&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><p>在相应路径（如<code>/WEB-INF/templates/</code>）下创建异常视图（如<code>error.html</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Error<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>出现异常<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span> <span class="na">th:text</span><span class="o">=</span><span class="s">&#34;${ex}&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注：使用Thymeleaf管理Html视图，需要在<code>&lt;html&gt;</code>标签中声明<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code>。</p>
</blockquote>
<h2 id="基于注解的异常处理" data-numberify>基于注解的异常处理<a class="anchor ms-1" href="#基于注解的异常处理"></a></h2>
<p>使用<code>@ControllerAdvice</code>标注在异常处理类上，这样的异常处理类与Controller类似。在类的方法上用<code>@ExceptionHandler</code>指定要处理的异常，<code>@ExceptionHandler</code>的<code>value</code>属性接收一个Class类型的数组，意味着可以同时处理多个异常。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ControllerAdvice</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExceptionController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@ExceptionHandler</span><span class="o">({</span>
</span></span><span class="line"><span class="cl">            <span class="n">ArithmeticException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">NullPointerException</span><span class="o">.</span><span class="na">class</span>
</span></span><span class="line"><span class="cl">    <span class="o">})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">testException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">Exception</span> <span class="n">ex</span> <span class="cm">/* 当前出现的异常 */</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 用Model设置属性，将异常信息返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;exception&#34;</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;error&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在<code>ExceptionController</code>中用<code>@ExceptionHandler</code>标注的方法，在它的参数列表中定义一个<code>Exception</code>类型的参数，可用于获取当前处理的实际的异常。</p>
<hr>
<h1 id="重定向" data-numberify>重定向<a class="anchor ms-1" href="#重定向"></a></h1>
<p>Spring MVC默认的方式是<code>forward</code>（即转发），而要使用<code>redirect</code>需要在视图名称中添加<code>redirect:</code>说明。Spring MVC重定向有以下几种方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 通过返回类型为String的方法，返回一个&#34;redirect:...&#34;的字符串进行重定向
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return 重定向的路径
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/test1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;redirect:/index.html&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 通过ModelAndView设置视图名称为&#34;redirect:...&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/test2&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ModelAndView</span> <span class="nf">test2</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">ModelAndView</span><span class="o">(</span><span class="s">&#34;redirect:/test1&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 相当于：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">        ModelAndView mav = new ModelAndView();
</span></span></span><span class="line"><span class="cl"><span class="cm">        mav.setViewName(&#34;redirect:/index&#34;);
</span></span></span><span class="line"><span class="cl"><span class="cm">        return mav;
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 通过原生ServletAPI
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/test3&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test3</span><span class="o">(</span><span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">&#34;/test1&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="spring-mvc-执行流程" data-numberify>Spring MVC 执行流程<a class="anchor ms-1" href="#spring-mvc-执行流程"></a></h1>
<h2 id="常用组件" data-numberify>常用组件<a class="anchor ms-1" href="#常用组件"></a></h2>
<ul>
<li>
<p><strong>DispatcherServlet</strong>：<strong>前端控制器</strong>，由框架提供。</p>
<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求。</p>
<blockquote>
<p>Controller、Interceptor、HandlerExceptionResolver等等都由它来调用。</p>
</blockquote>
</li>
<li>
<p><strong>HandlerMapping</strong>：<strong>处理器映射器</strong>，由框架提供。</p>
<p>作用：根据请求的<code>url</code>、<code>method</code>等信息查找相应的Handler（即控制器方法）。</p>
<blockquote>
<p>就是请求中的<code>@RequestMapping</code>、<code>@GetMapping</code>、<code>@PostMapping</code>等等。将请求和控制器或控制器方法进行映射。</p>
</blockquote>
</li>
<li>
<p><strong>Handler</strong>：<strong>处理器</strong>（控制器方法），由工程师开发。</p>
<p>作用：在DispatcherServlet的控制下，Handler对具体的用户请求进行处理。</p>
</li>
<li>
<p><strong>HandlerAdapter</strong>：<strong>处理器适配器</strong>，由框架提供。</p>
<p>作用：通过HandlerAdapter执行处理器（控制器方法）。</p>
<blockquote>
<p>由HandlerMapping找到对应的Handler，接着由HandlerAdapter执行对应的Handler。</p>
</blockquote>
</li>
<li>
<p><strong>ViewResolver</strong>：<strong>视图解析器</strong>，由框架提供。</p>
<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView（例如forward，即转发时）、RedirectView（例如redirect，即重定向时）。</p>
</li>
<li>
<p><strong>Viw</strong>：<strong>视图</strong>，由框架或视图技术提供。</p>
<p>作用：将模型数据通过页面展示给用户。</p>
</li>
</ul>
<h2 id="dispatcherservlet-继承链" data-numberify>DispatcherServlet 继承链<a class="anchor ms-1" href="#dispatcherservlet-继承链"></a></h2>
<p><code>DispatcherServlet</code> $\xrightarrow{extends}$ <code>FrameworkServlet</code> $\xrightarrow{extends}$ <code>HttpServletBean</code> $\xrightarrow{extends}$ <code>HttpServlet</code> $\xrightarrow{extends}$ <code>GenericServlet</code> $\xrightarrow{implements}$ <code>Servlet</code></p>
<h2 id="dispatcherservlet-初始化过程" data-numberify>DispatcherServlet 初始化过程<a class="anchor ms-1" href="#dispatcherservlet-初始化过程"></a></h2>
<p>DispatcherServlet初始化过程需要根据它的继承链，查找每个类或接口的<code>init()</code>方法。</p>
<ul>
<li>
<p><code>Servlet.init(ServletConfig)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">;</span>
</span></span></code></pre></div></li>
<li>
<p><code>GenericServlet</code>：</p>
<p><code>GenericServlet</code>不仅实现了<code>Servlet.init(ServletConfig)</code>还给出了一个未实现的<code>init()</code>。</p>
<p><code>init(ServletConfig config)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ServletConfig</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">config</span> <span class="o">=</span> <span class="n">config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>init()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{}</span>
</span></span></code></pre></div></li>
<li>
<p><code>HttpServlet</code>：</p>
<p><code>HttpServlet</code>并没有重写<code>GenericServlet.init(ServletConfig)</code>或<code>GenericServlet.init()</code>。</p>
</li>
<li>
<p><code>HttpServletBean</code>：</p>
<p><code>HttpServletBean</code>实现了<code>GenericServlet.init()</code>并且给出了一个未实现的<code>initServletBean()</code>。</p>
<p><code>init()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Set bean properties from init parameters.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Let subclasses do whatever initialization they like.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initServletBean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>initServletBean()</code>：初始化ServletBean。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initServletBean</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{}</span>
</span></span></code></pre></div></li>
<li>
<p><code>FrameworkServlet</code>：</p>
<p><code>FrameworkServlet</code>实现了<code>HttpServletBean.initServletBean()</code>，并且给出了<code>initServletBean()</code>的实现。</p>
<p><code>initServletBean()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">initServletBean</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 初始化WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">this</span><span class="o">.</span><span class="na">webApplicationContext</span> <span class="o">=</span> <span class="n">initWebApplicationContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">initFrameworkServlet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* catch ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>initWebApplicationContext()</code>：初始化WebApplicationContext。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">WebApplicationContext</span> <span class="nf">initWebApplicationContext</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取当前的WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">WebApplicationContext</span> <span class="n">rootContext</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">            <span class="n">WebApplicationContextUtils</span><span class="o">.</span><span class="na">getWebApplicationContext</span><span class="o">(</span><span class="n">getServletContext</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">WebApplicationContext</span> <span class="n">wac</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 判断当前WebApplicationContext是否为空（第一次执行时恒为空）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">webApplicationContext</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// A context instance was injected at construction time -&gt; use it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">wac</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">webApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">wac</span> <span class="k">instanceof</span> <span class="n">ConfigurableWebApplicationContext</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ConfigurableWebApplicationContext</span> <span class="n">cwac</span> <span class="o">=</span> <span class="o">(</span><span class="n">ConfigurableWebApplicationContext</span><span class="o">)</span> <span class="n">wac</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(!</span><span class="n">cwac</span><span class="o">.</span><span class="na">isActive</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// The context has not yet been refreshed -&gt; provide services such as
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">// setting the parent context, setting the application context id, etc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="o">(</span><span class="n">cwac</span><span class="o">.</span><span class="na">getParent</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// The context instance was injected without an explicit parent -&gt; set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="c1">// the root application context (if any; may be null) as the parent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">cwac</span><span class="o">.</span><span class="na">setParent</span><span class="o">(</span><span class="n">rootContext</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 装配并刷新WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">configureAndRefreshWebApplicationContext</span><span class="o">(</span><span class="n">cwac</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">        如果wac为空则查找WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="cm">        （第一次执行完后wac还是为空，因为没有任何WebApplicationContext）
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">wac</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// No context instance was injected at construction time -&gt; see if one
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// has been registered in the servlet context. If one exists, it is assumed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// that the parent context (if any) has already been set and that the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// user has performed any initialization such as setting the context id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">wac</span> <span class="o">=</span> <span class="n">findWebApplicationContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果wac为空则创建一个WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">wac</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// No context instance is defined for this servlet -&gt; create a local one
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 创建一个WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">wac</span> <span class="o">=</span> <span class="n">createWebApplicationContext</span><span class="o">(</span><span class="n">rootContext</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 没有接收到刷新事件时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">refreshEventReceived</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Either the context is not a ConfigurableApplicationContext with refresh
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// support or the context injected at construction time had already been
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// refreshed -&gt; trigger initial onRefresh manually here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">onRefreshMonitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 刷新WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">onRefresh</span><span class="o">(</span><span class="n">wac</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">publishContext</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Publish the context as a servlet context attribute.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 将ServletContext作为属性，获取它的属性名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">attrName</span> <span class="o">=</span> <span class="n">getServletContextAttributeName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将IOC容器在应用域共享
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">getServletContext</span><span class="o">().</span><span class="na">setAttribute</span><span class="o">(</span><span class="n">attrName</span><span class="o">,</span> <span class="n">wac</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">wac</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>createWebApplicationContext(WebApplicationContext)</code>：通过WebApplicationContext创建WebApplicationContext。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">WebApplicationContext</span> <span class="nf">createWebApplicationContext</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">WebApplicationContext</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">createWebApplicationContext</span><span class="o">((</span><span class="n">ApplicationContext</span><span class="o">)</span> <span class="n">parent</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>createWebApplicationContext(ApplicationContext)</code>：通过ApplicationContext创建WebApplicationContext。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="n">WebApplicationContext</span> <span class="nf">createWebApplicationContext</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">ApplicationContext</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">contextClass</span> <span class="o">=</span> <span class="n">getContextClass</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(!</span><span class="n">ConfigurableWebApplicationContext</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">isAssignableFrom</span><span class="o">(</span><span class="n">contextClass</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="n">ApplicationContextException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;Fatal initialization error in servlet with name &#39;&#34;</span> <span class="o">+</span> <span class="n">getServletName</span><span class="o">()</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;&#39;: custom WebApplicationContext class [&#34;</span> <span class="o">+</span> <span class="n">contextClass</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;] is not of type ConfigurableWebApplicationContext&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Web IOC 容器对象（即SpringMVC IOC）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ConfigurableWebApplicationContext</span> <span class="n">wac</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">            <span class="o">(</span><span class="n">ConfigurableWebApplicationContext</span><span class="o">)</span> <span class="n">BeanUtils</span><span class="o">.</span><span class="na">instantiateClass</span><span class="o">(</span><span class="n">contextClass</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 配置环境
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">wac</span><span class="o">.</span><span class="na">setEnvironment</span><span class="o">(</span><span class="n">getEnvironment</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* 
</span></span></span><span class="line"><span class="cl"><span class="cm">        整合Spring和SpringMVC时，
</span></span></span><span class="line"><span class="cl"><span class="cm">        设置SpringMVC的父容器，
</span></span></span><span class="line"><span class="cl"><span class="cm">        让Spring和SpringMVC的IOC容器能无缝衔接
</span></span></span><span class="line"><span class="cl"><span class="cm">        SpringMVC IOC容器是Spring IOC容器的子容器
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="n">wac</span><span class="o">.</span><span class="na">setParent</span><span class="o">(</span><span class="n">parent</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">configLocation</span> <span class="o">=</span> <span class="n">getContextConfigLocation</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">configLocation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">wac</span><span class="o">.</span><span class="na">setConfigLocation</span><span class="o">(</span><span class="n">configLocation</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 装配并刷新WebApplicationContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">configureAndRefreshWebApplicationContext</span><span class="o">(</span><span class="n">wac</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">wac</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>onRefresh()</code>：刷新WebApplicationContext。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onRefresh</span><span class="o">(</span><span class="n">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// For subclasses: do nothing by default.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 由子类去实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>FrameworkServlete创建WebApplicationContext后，刷新容器，调用<code>onRefresh(wac)</code>，此方法在<code>DispatcherServlet</code>进行了重写（实现）。</p>
</blockquote>
<p><code>getServletContextAttributeName()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// FrameworkServlet的全类名.CONTEXT.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SERVLET_CONTEXT_PREFIX</span> <span class="o">=</span> <span class="n">FrameworkServlet</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;.CONTEXT.&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">getServletContextAttributeName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 前缀+Servlet友好名称（即前缀 + &lt;servlet-name&gt;）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">SERVLET_CONTEXT_PREFIX</span> <span class="o">+</span> <span class="n">getServletName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>DispatcherServlet</code>：</p>
<p>实现了<code>FrameworkServlet.onRefresh()</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onRefresh</span><span class="o">(</span><span class="n">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">initStrategies</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>initStrategies()</code>：<code>DispatcherServlet</code>初始化策略。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initStrategies</span><span class="o">(</span><span class="n">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化多个解析器，例如文件上传解析器等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initMultipartResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">initLocaleResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化模板解析器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initThemeResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化处理器映射器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initHandlerMappings</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始阿虎处理器适配器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initHandlerAdapters</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化异常处理器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initHandlerExceptionResolvers</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化转换器，将请求转换为视图名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initRequestToViewNameTranslator</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化视图解析器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">initViewResolvers</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">initFlashMapManager</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="dispatcherservlet-请求处理过程" data-numberify>DispatcherServlet 请求处理过程<a class="anchor ms-1" href="#dispatcherservlet-请求处理过程"></a></h2>
<ul>
<li>
<p><code>Servlet</code>和<code>GenericServlet</code>：</p>
<p><code>Servlet</code>提供了<code>service()</code>接口，<code>GenericServlet</code>并未对其进行实现。</p>
<p><code>service(ServletRequest, ServletResponse)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">res</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
</span></span></code></pre></div></li>
<li>
<p><code>HttpServlet</code>：</p>
<p><code>service()</code>由<code>HttpServlet</code>实现。并且<code>HttpServlet</code>还提供了<code>service(HttpServletRequest, HttpServletResponse)</code>。</p>
<p><code>service(ServletRequest, ServletResponse)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">res</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">HttpServletRequest</span>  <span class="n">request</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(!(</span><span class="n">req</span> <span class="k">instanceof</span> <span class="n">HttpServletRequest</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">            <span class="n">res</span> <span class="k">instanceof</span> <span class="n">HttpServletResponse</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="n">ServletException</span><span class="o">(</span><span class="s">&#34;non-HTTP request or response&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 转换为HttpServletRequest和HttpServletResponse
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">request</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpServletRequest</span><span class="o">)</span> <span class="n">req</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">)</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">service</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><code>HttpServlet.service(ServletRequest, ServletResponse)</code>的主要作用就是将<code>ServletRequest</code>和<code>ServletResponse</code>分别转换为<code>HttpServletRequest</code>和<code>HttpServletResponse</code>，然后调用<code>HttpServlet.service(HttpServletRequest, HttpServletResponse)</code>。</p>
</blockquote>
<p><code>service(HttpServletRequest, HttpServletResponse)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取请求方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 请求的分发处理，根据请求方式调用相应方法（如调用doGet）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_GET</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">lastModified</span> <span class="o">=</span> <span class="n">getLastModified</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">lastModified</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// servlet doesn&#39;t support if-modified-since, no reason
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// to go through further expensive logic
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">long</span> <span class="n">ifModifiedSince</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getDateHeader</span><span class="o">(</span><span class="n">HEADER_IFMODSINCE</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">ifModifiedSince</span> <span class="o">&lt;</span> <span class="n">lastModified</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// If the servlet mod time is later, call doGet()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">// Round down to the nearest second for a proper compare
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">// A ifModifiedSince of -1 will always be less
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">maybeSetLastModified</span><span class="o">(</span><span class="n">resp</span><span class="o">,</span> <span class="n">lastModified</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">doGet</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_MODIFIED</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_HEAD</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">lastModified</span> <span class="o">=</span> <span class="n">getLastModified</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">maybeSetLastModified</span><span class="o">(</span><span class="n">resp</span><span class="o">,</span> <span class="n">lastModified</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">doHead</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_POST</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doPost</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_PUT</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doPut</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_DELETE</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doDelete</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_OPTIONS</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doOptions</span><span class="o">(</span><span class="n">req</span><span class="o">,</span><span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">METHOD_TRACE</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">doTrace</span><span class="o">(</span><span class="n">req</span><span class="o">,</span><span class="n">resp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// Note that this means NO servlet supports whatever
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// method was requested, anywhere on this server.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>HttpServletBean</code>：</p>
<p>没有对<code>HttpServlet.service()</code>和<code>HttpServlet</code>中<code>do</code>开头的处理请求分发的方法进行重写。</p>
</li>
<li>
<p><code>FrameworkServlet</code>：</p>
<p>重写了<code>HttpServlet.service(HttpServletRequest, HttpServletResponse)</code>和<code>HttpServlet</code>中<code>do</code>开头的处理请求分发的方法。</p>
<p><code>service(HttpServletRequest, HttpServletResponse)</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">HttpMethod</span> <span class="n">httpMethod</span> <span class="o">=</span> <span class="n">HttpMethod</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 请求方式为PATCH或null时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">httpMethod</span> <span class="o">==</span> <span class="n">HttpMethod</span><span class="o">.</span><span class="na">PATCH</span> <span class="o">||</span> <span class="n">httpMethod</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">processRequest</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>processRequest()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">processRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行服务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">doService</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* catch ... */</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在<code>FrameworkServlet</code>中的<code>doGet()</code>、<code>doPost()</code>、<code>doPut()</code>和<code>doDelete()</code>中都是直接调用<code>processRequest()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">processRequest</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span></code></pre></div><p>在<code>doOptions()</code>和<code>doTrace()</code>中也有对<code>processRequest()</code>方法的调用。</p>
<p><code>doService()</code>：交由子类实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">doService</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">Exception</span><span class="o">;</span>
</span></span></code></pre></div></li>
<li>
<p><code>DispatcherServlet</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doService</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">logRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Keep a snapshot of the request attributes in case of an include,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// to be able to restore the original attributes after the include.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Make framework objects available to handlers and view objects.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 最终调用doDispatch()来处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">doDispatch</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!</span><span class="n">WebAsyncUtils</span><span class="o">.</span><span class="na">getAsyncManager</span><span class="o">(</span><span class="n">request</span><span class="o">).</span><span class="na">isConcurrentHandlingStarted</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Restore the original attribute snapshot, in case of an include.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">attributesSnapshot</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">restoreAttributesAfterInclude</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">attributesSnapshot</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>doDispatch()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doDispatch</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">HttpServletRequest</span> <span class="n">processedRequest</span> <span class="o">=</span> <span class="n">request</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">        执行链
</span></span></span><span class="line"><span class="cl"><span class="cm">        HandlerExecutionChain包含以下三个部分：
</span></span></span><span class="line"><span class="cl"><span class="cm">        - handler：与请求所匹配的控制器方法
</span></span></span><span class="line"><span class="cl"><span class="cm">        - interceptorList：处理控制器方法的所有拦截器集合，即拦截器链
</span></span></span><span class="line"><span class="cl"><span class="cm">        - interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="n">HandlerExecutionChain</span> <span class="n">mappedHandler</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">boolean</span> <span class="n">multipartRequestParsed</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">WebAsyncManager</span> <span class="n">asyncManager</span> <span class="o">=</span> <span class="n">WebAsyncUtils</span><span class="o">.</span><span class="na">getAsyncManager</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ModelAndView</span> <span class="n">mv</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Exception</span> <span class="n">dispatchException</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">processedRequest</span> <span class="o">=</span> <span class="n">checkMultipart</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">multipartRequestParsed</span> <span class="o">=</span> <span class="o">(</span><span class="n">processedRequest</span> <span class="o">!=</span> <span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Determine handler for the current request.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 获取当前请求的执行链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mappedHandler</span> <span class="o">=</span> <span class="n">getHandler</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">mappedHandler</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">noHandlerFound</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Determine handler adapter for the current request.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">                获取当前请求的处理器适配器
</span></span></span><span class="line"><span class="cl"><span class="cm">                通过控制器方法创建对应的处理器适配器，从而能调用所对应的控制器方法
</span></span></span><span class="line"><span class="cl"><span class="cm">             */</span>
</span></span><span class="line"><span class="cl">            <span class="n">HandlerAdapter</span> <span class="n">ha</span> <span class="o">=</span> <span class="n">getHandlerAdapter</span><span class="o">(</span><span class="n">mappedHandler</span><span class="o">.</span><span class="na">getHandler</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Process last-modified header, if supported by the handler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 执行拦截器链的 preHandle，正序执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(!</span><span class="n">mappedHandler</span><span class="o">.</span><span class="na">applyPreHandle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Actually invoke the handler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 通过HandlerAdapter来调用请求处理，最终获得ModelAndView对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mv</span> <span class="o">=</span> <span class="n">ha</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">.</span><span class="na">getHandler</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">asyncManager</span><span class="o">.</span><span class="na">isConcurrentHandlingStarted</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">applyDefaultViewName</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">mv</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 执行拦截器链的 postHandle，倒序执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mappedHandler</span><span class="o">.</span><span class="na">applyPostHandle</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mv</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* catch ... */</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行完请求的后续处理，如视图渲染、异常处理等等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">processDispatchResult</span><span class="o">(</span><span class="n">processedRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="n">mv</span><span class="o">,</span> <span class="n">dispatchException</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* catch ... */</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* finally ... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>processDispatchResult()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">processDispatchResult</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Nullable</span> <span class="n">HandlerExecutionChain</span> <span class="n">mappedHandler</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">ModelAndView</span> <span class="n">mv</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Nullable</span> <span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">boolean</span> <span class="n">errorView</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 异常处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">exception</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">exception</span> <span class="k">instanceof</span> <span class="n">ModelAndViewDefiningException</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&#34;ModelAndViewDefiningException encountered&#34;</span><span class="o">,</span> <span class="n">exception</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取异常页面的视图
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">mv</span> <span class="o">=</span> <span class="o">((</span><span class="n">ModelAndViewDefiningException</span><span class="o">)</span> <span class="n">exception</span><span class="o">).</span><span class="na">getModelAndView</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Did the handler return a view to render?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">mv</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mv</span><span class="o">.</span><span class="na">wasCleared</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 视图渲染
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">render</span><span class="o">(</span><span class="n">mv</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* else ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">mappedHandler</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Exception (if any) is already handled..
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 执行拦截器链的 afterCompletion，倒序执行（此处所有的异常已经被处理完成）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">mappedHandler</span><span class="o">.</span><span class="na">triggerAfterCompletion</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="mvc-执行流程" data-numberify>MVC 执行流程<a class="anchor ms-1" href="#mvc-执行流程"></a></h2>
<ol>
<li>
<p>用户向服务器发送请求，请求被SpringMVC前端控制器<code>DispatcherServlet</code>捕获。</p>
</li>
<li>
<p><code>DispatcherServlet</code>对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p>
<ul>
<li>
<p>如果没有对应的映射：</p>
<p>判断是否配置了<code>mvc:default-servlet-handler</code>（默认处理器）。</p>
<ul>
<li>
<p>如果没配置，则控制台报映射查找不到，向客户端展示404错误。</p>
</li>
<li>
<p>如果有配置，则访问目标资源（一般为静态资源，如JS、CSS、HTML等等）。</p>
<p>如果找不到客户端也会展示404错误。</p>
</li>
</ul>
</li>
<li>
<p>如果存在对应的映射则接着执行下面的流程。</p>
</li>
</ul>
</li>
<li>
<p>根据该URI，调用<code>HandlerMapping</code>获得该<code>Handler</code>配置的所有相关的对象（包括<code>Handler</code>对象以及<code>Handler</code>对象对应的拦截器），最后以<code>HandlerExecutionChain</code>执行链对象的形式返回。</p>
</li>
<li>
<p><code>DispatcherServlet</code>根据获得的<code>Handler</code>，选择一个合适的<code>HandlerAdapter</code>。</p>
</li>
<li>
<p>如果成功获得<code>HandlerAdapter</code>，此时将开始执行拦截器的<code>preHandler()</code>方法。</p>
<p>根据拦截器链的顺序，正序执行。</p>
</li>
<li>
<p>提取<code>Request</code>中的模型数据，填充<code>Handler</code>入参，开始执行<code>Handler</code>（<code>Controller</code>)方法，处理请求。</p>
<p>在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p>
<ul>
<li>
<p><code>HttpMessageConveter</code>： 将请求消息（如JSON、XML等数据）转换成一个对象，或将对象转换为指定的响应信息。</p>
</li>
<li>
<p>数据转换：对请求消息进行数据转换。</p>
<p>如<code>String</code>转换成<code>Integer</code>、<code>Double</code>等。</p>
</li>
<li>
<p>数据格式化：对请求消息进行数据格式化。</p>
<p>如将字符串转换成格式化数字或格式化日期等。</p>
</li>
<li>
<p>数据验证：验证数据的有效性（长度、格式等），验证结果存储到<code>BindingResult</code>或<code>Error</code>中。</p>
</li>
<li>
<p><code>Handler</code>执行完成后，向<code>DispatcherServlet</code>返回一个<code>ModelAndView</code>对象。</p>
</li>
</ul>
</li>
<li>
<p>如果<code>Handler</code>被成功执行，则开始执行拦截器的<code>postHandle()</code>方法。</p>
<p>根据拦截器链的顺序，倒序执行。</p>
</li>
<li>
<p>根据返回的<code>ModelAndView</code>（此时会判断是否存在异常：如果存在异常，则执行<code>HandlerExceptionResolver</code>进行异常处理）选择一个适合的<code>ViewResolver</code>进行视图解析，根据<code>Model</code>和<code>View</code>，来渲染视图。</p>
</li>
<li>
<p>渲染视图完毕执行拦截器的<code>afterCompletion()</code>方法。</p>
<p>根据拦截器链的顺序，倒序执行。</p>
</li>
<li>
<p>将渲染结果返回给客户端。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Spring Framework</title>
      <link>/docs/spring/springframework/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springframework/</guid>
      <description><![CDATA[Spring Framewor 简介 Spring5.0已经全面支持JDK8，建议JDK使用1.8版本。 Spring Framework是Spring家族中其他框架的底层基础。 Spring Framewor 架]]></description>
      <content:encoded><![CDATA[<h1 id="spring-framewor-简介" data-numberify>Spring Framewor 简介<a class="anchor ms-1" href="#spring-framewor-简介"></a></h1>
<blockquote>
<p>Spring5.0已经全面支持JDK8，建议JDK使用1.8版本。</p>
</blockquote>
<p>Spring Framework是Spring家族中其他框架的底层基础。</p>
<h2 id="spring-framewor-架构" data-numberify>Spring Framewor 架构<a class="anchor ms-1" href="#spring-framewor-架构"></a></h2>
<p>Spring Framework的发展经历了很多版本的变更，每个版本都有相应的调整。</p>
<p>Spring Framework 架构：</p>
<ol>
<li>
<p>核心层</p>
<p>Core Container：核心容器，这个模块是Spring最核心的模块，其他的都需要依赖该模块。</p>
</li>
<li>
<p>AOP层</p>
<ul>
<li>AOP：面向切面编程，它依赖核心层容器，目的是在<u>不改变原有代码</u>的前提下对其进行<u>功能增强</u>。</li>
<li>Aspects：AOP是编程思想，Aspects是对AOP思想的具体实现。</li>
</ul>
</li>
<li>
<p>数据层</p>
<ul>
<li>Data Access：数据访问，Spring全家桶中有对数据访问的具体实现技术。</li>
<li>Data Integration：数据集成，Spring支持整合其他的数据层解决方案，比如Mybatis。</li>
<li>Transactions：事务，Spring中事务管理是Spring AOP的一个具体实现。</li>
</ul>
</li>
<li>
<p>Web层</p>
</li>
<li>
<p>Test层</p>
<p>Spring主要整合了Junit来完成单元测试和集成测试。</p>
</li>
</ol>
<blockquote>
<p>从Spring Framework 5没有架构图，而最新的架构图是4版本，所以可以认为Spring Framework从4版本开始架构就已经趋于稳定，没有什么变动。</p>
</blockquote>
<h2 id="spring-核心概念" data-numberify>Spring 核心概念<a class="anchor ms-1" href="#spring-核心概念"></a></h2>
<p>在Spring核心概念主要包含：</p>
<ul>
<li>
<p><code>IOC</code></p>
<ul>
<li>IOC，Inversion of Control，即控制反转。</li>
<li>控制反转：主动<code>new</code>产生对象转换为由<u>外部</u>提供对象，此过程中对象创建控制权由程序转移到外部的一种思想。</li>
</ul>
<blockquote>
<p>例如，业务（Service）层要使用到数据（DAO）层的类对象。此时就可以使用IOC思想，由外部程序给业务层创建数据层对象。
这样可以降低业务层和数据层之间的耦合性。
如果数据层的实现更改的话，就无需在业务层中修改实现类。</p>
</blockquote>
<ul>
<li><code>IOC容器</code>
<ul>
<li>Spring提供了一个容器，称为<u>IOC容器</u>，用来充当IOC思想中的&quot;外部&quot;。</li>
<li>IOC容器负责对象的创建、初始化等一系列工作。</li>
</ul>
</li>
<li><code>Bean</code>
<ul>
<li>在IOC容器中，被创建或被管理的对象统称为<code>Bean</code>。</li>
<li>IOC容器中存放的就是一个个的Bean对象。</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>DI</code></p>
<ul>
<li>依赖注入：在容器中建立Bean与Bean之间的依赖关系的整个过程。</li>
</ul>
<blockquote>
<p>例如，业务层和数据层在IOC容器中创建Bean后，并不能直接工作，因为业务层需要依赖数据层才能正确工作。所以此时就需要使用依赖注入，在业务层和数据层之间建立依赖关系。</p>
</blockquote>
</li>
</ul>
<p>IOC和DI的最终目标就是充分解耦。在Spring Framewor中的实现依靠：</p>
<ul>
<li>使用IOC容器管理Bean（IOC）。</li>
<li>在IOC容器内将有依赖关系的Bean进行关系绑定（DI）。</li>
</ul>
<p>最终，使用对象时不仅可以直接从IOC容器中获取，并且获取到的bean已经绑定了所有的依赖关系。</p>
<hr>
<h1 id="配置文件方法使用iocdi" data-numberify>配置文件方法使用IOC/DI<a class="anchor ms-1" href="#配置文件方法使用iocdi"></a></h1>
<h2 id="使用-ioc-容器创建-beanbean-标签" data-numberify>使用 IOC 容器创建 Bean（bean 标签）<a class="anchor ms-1" href="#使用-ioc-容器创建-beanbean-标签"></a></h2>
<p>基础配置：</p>
<ol>
<li>
<p>创建Maven项目，项目基础结构如下：</p>
<ul>
<li>📁<code>project-file-name</code>
<ul>
<li>📁<code>src</code>
<ul>
<li>📁<code>main</code>
<ul>
<li>📁<code>java</code>
<ul>
<li>📁<code>com.linner</code>
<ul>
<li>📁<code>dao</code></li>
<li>📁<code>domain</code></li>
<li>📁<code>service</code></li>
</ul>
</li>
</ul>
</li>
<li>📁<code>resourcs</code></li>
</ul>
</li>
<li>📁<code>test</code>
<ul>
<li>📁<code>java</code>
<ul>
<li>📁<code>com.linner</code>
<ul>
<li>📁<code>service</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>📄<code>pom.xml</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>添加Spring Framework的依赖jar包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--springframework--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--junit--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>4.12<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>添加业务层、数据层类：</p>
<ul>
<li>
<p><code>User.java</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.domain</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;User{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, username=&#39;&#34;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, password=&#39;&#34;</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>DAO(仅测试，无需查询数据库):</p>
<p>接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>实现类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao.impl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao findAll...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao findById:&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao delete:&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao save:&#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao update:&#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>Service:</p>
<p>接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>实现类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service.impl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.impl.UserDaoImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService findAll...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService findById:&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService delete:&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService save:&#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserService update:&#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ol>
<ul>
<li>
<p>测试方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.impl.UserServiceImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserServiceImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>创建Bean</p>
<ul>
<li>
<p>在📁<code>resourcs</code>目录下创建String配置文件<code>applicationContext.xml</code>，并使用<code>&lt;bean&gt;</code>标签配置Bean：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--添加UserService--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>接着在程序中使用Spring提供的方法获取IOC容器。然后从IOC容器中获取对象并调用其方法，修改Test类进行测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// private UserService userService = new UserServiceImpl();
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用IOC无需自己创建对象（对象由IOC容器分配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 这里使用静态代码块获取容器和Bean
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取IOC容器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>IOC核心容器创建方式有：</p>
<ul>
<li>
<p><code>ClassPathXmlApplicationContext</code>：类路径下的XML配置文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p><code>ClassPathXmlApplicationContext</code>的参数为XML配置文件在类路径下的相对路径。</p>
</li>
<li>
<p><code>FileSystemXmlApplicationContext</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileSystemXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;/home/linner/IdeaProjects/my-springfw-demo/src/main/resources/applicationContext.xml&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p><code>FileSystemXmlApplicationContext</code>的参数为XML配置文件在文件系统下的绝对路径。</p>
</li>
</ul>
</li>
</ul>
<p><code>UserServiceTest</code>执行成功说明配置成功。</p>
<h3 id="bean-的基础配置" data-numberify>Bean 的基础配置<a class="anchor ms-1" href="#bean-的基础配置"></a></h3>
<p><code>&lt;bean&gt;</code>标签是作为Spring配置Bean使用。其基本形式为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;&#34;</span> <span class="na">class=</span><span class="s">&#34;&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><ul>
<li><code>id</code>：Bean标签的唯一标识。在同一个上下文中(配置文件)不能重复。</li>
<li><code>class</code>：Bean的类型。包含包名和类名。</li>
</ul>
<h3 id="别名name-属性" data-numberify>别名（name 属性）<a class="anchor ms-1" href="#别名name-属性"></a></h3>
<p><code>&lt;bean&gt;</code>的<code>name</code>属性可以为<code>&lt;bean&gt;</code>指定别名，别名可以有多个，使用<code>,</code>，<code>;</code>，空格进行分隔。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">name=</span><span class="s">&#34;service userEbi&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><blockquote>
<p>说明：EBI全称Enterprise Business Interface，译为企业业务接口。</p>
</blockquote>
<h3 id="获取-bean-的方式getbean-方法" data-numberify>获取 Bean 的方式（getBean() 方法）<a class="anchor ms-1" href="#获取-bean-的方式getbean-方法"></a></h3>
<p>使用<code>getBean()</code>获取Bean的方式有三种：</p>
<ul>
<li>
<p>按照名称获取：</p>
<p>是指在<code>getBean()</code>方法中传递<code>String</code>类型的参数，参数的值为Bean的名称。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="nf">getBean</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>按照类型获取：</p>
<p>需要保证该类型在IOC容器中有且仅有一个Bean（不能包含多个同类型的Bean）。
在参数中传递该类型的<code>class</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getBean</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">aClass</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>按照名称和类型获取：</p>
<p>在参数中传入Bean的名称和类型。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getBean</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">aClass</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="作用范围scope-属性" data-numberify>作用范围（scope 属性）<a class="anchor ms-1" href="#作用范围scope-属性"></a></h3>
<p><code>&lt;bean&gt;</code>的<code>scope</code>属性可以为<code>&lt;bean&gt;</code>设置作用范围，可选值为：</p>
<ul>
<li>
<p><code>singloton</code>：默认，表示创建的对象为单例（在整个IOC容器中所有获取到的该对象都为同一个对象）。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">scope=</span><span class="s">&#34;singloton&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>或：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="nt">/&gt;</span>
</span></span></code></pre></div><blockquote>
<p>实际上，单例对象在容器被获取的时候就已经被创建了。</p>
</blockquote>
</li>
<li>
<p><code>prototype</code>：表示创建的对象为非单例（每次在IOC容器中获取到的对象都是不同的对象）。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">name=</span><span class="s">&#34;service userEbi&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">scope=</span><span class="s">&#34;prototype&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div></li>
</ul>
<p>Example：</p>
<ul>
<li>
<p>将<code>UserService</code>设为单例：</p>
<p>String配置文件<code>applicationContext.xml</code>中<code>userService</code>的<code>&lt;bean&gt;</code>（由于Spring默认创建的是单例，所以这里可以选择不添加<code>scope=&quot;singloton&quot;</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>创建新的测试类<code>TestForUserServiceScope</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestForUserServiceScope</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ApplicationContext</span> <span class="n">ctx</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>执行<code>UserServiceTest1</code>后，在输出中可以发现：每个测试方法中使用<code>getBean()</code>获取到的<code>UserService</code>都是同个对象。</p>
</li>
<li>
<p>将<code>UserService</code>设为非单例：</p>
<p>修改String配置文件<code>applicationContext.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">scope=</span><span class="s">&#34;prototype&#34;</span><span class="nt">&gt;</span>
</span></span></code></pre></div><p>再次执行<code>UserServiceTest1</code>，可以发现：每个测试方法中使用<code>getBean()</code>获取到的<code>UserService</code>都是不同的对象。</p>
</li>
</ul>
<h3 id="bean-的实例化" data-numberify>Bean 的实例化<a class="anchor ms-1" href="#bean-的实例化"></a></h3>
<p>实例化Bean分为三种方式：</p>
<ul>
<li>构造方法</li>
<li>静态工厂</li>
<li>实例工厂</li>
</ul>
<h4 id="构造方法实例化-bean默认" data-numberify>构造方法实例化 Bean（默认）<a class="anchor ms-1" href="#构造方法实例化-bean默认"></a></h4>
<p><code>&lt;bean&gt;</code>默认是使用无参的构造方法实例化Bean。并且，Spring底层用的是反射（因为即使将构造方法设置为<code>private</code>依然可以使用）。</p>
<h4 id="静态工厂实例化-beanfactory-method-属性" data-numberify>静态工厂实例化 Bean（factory-method 属性）<a class="anchor ms-1" href="#静态工厂实例化-beanfactory-method-属性"></a></h4>
<p>静态工厂实例化Bean指的是通过工厂类来创建对象。</p>
<p>一般情况下是使用如下方法静态工厂实例化对象：</p>
<ul>
<li>
<p>创建<code>com.linner.factory</code>包，并编写<code>UserDaoFactory</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.factory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.impl.UserDaoImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">UserDao</span> <span class="nf">getUserDao</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>编写<code>TestFroInstanceUserDao</code>测试类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.factory.UserDaoFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestFroInstanceUserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="n">UserDaoFactory</span><span class="o">.</span><span class="na">getUserDao</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>在IOC容器中使用静态工厂实例化：</p>
<ul>
<li>
<p>在Spring配置文件中加入<code>UserDao</code>的配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.factory.UserDaoFactory&#34;</span> <span class="na">factory-method=</span><span class="s">&#34;getUserDao&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><ul>
<li><code>class</code>：工厂类的类全名。这里指定的是创建<code>UserDao</code>的静态工厂类<code>UserDaoFactory</code>。</li>
<li><code>factory-method</code>：<code>class</code>指定的工厂类中创建对象的方法名。这里指定的是工厂类中用来创建<code>UserDao</code>的方法。</li>
</ul>
</li>
<li>
<p>修改<code>TestFroInstanceUserDao</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestFroInstanceUserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>注意：使用这种方法实例化，不能将该Bean注入到其他Bean中。</p>
</blockquote>
<h4 id="实例工厂实例化-bean" data-numberify>实例工厂实例化 Bean<a class="anchor ms-1" href="#实例工厂实例化-bean"></a></h4>
<h5 id="使用-bean-的-factory-bean-属性" data-numberify>使用 Bean 的 factory-bean 属性<a class="anchor ms-1" href="#使用-bean-的-factory-bean-属性"></a></h5>
<p>实例化工厂实例化Bean是指，为工厂类添加一个单例的Bean（为区分则称为工厂Bean），然后在要实例化的Bean中指定使用这个工厂Bean作为实例化工厂。</p>
<p>修改<code>UserDaoFactory</code>（不使用静态工厂）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">UserDao</span> <span class="nf">getUserDao</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在Spring的配置文件中添加<code>UserDaoFactory</code>的<code>&lt;bean&gt;</code>，并且修改<code>UserDao</code>的<code>&lt;bean&gt;</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDaoFactory&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.factory.UserDaoFactory&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">factory-bean=</span><span class="s">&#34;userDaoFactory&#34;</span> <span class="na">factory-method=</span><span class="s">&#34;getUserDao&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><ul>
<li>添加了一个<code>userDaoFactory</code>工厂Bean。</li>
<li><code>factory-bean</code>：工厂的实例对象，即工厂Bean的<code>id</code>或<code>name</code>。</li>
<li><code>factory-method</code>：工厂对象中具体创建对象的方法名，即<code>factory-bean</code>指定对象中创建该对象的方法名。</li>
</ul>
<p>成功执行<code>TestFroInstanceUserDao</code>即配置成功。</p>
<h5 id="使用-factorybean-接口" data-numberify>使用 FactoryBean 接口<a class="anchor ms-1" href="#使用-factorybean-接口"></a></h5>
<p>创建一个<code>UserDaoFactoryBean</code>的类，实现<code>FactoryBean</code>接口，重写接口的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.factory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.impl.UserDaoImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.FactoryBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoFactoryBean</span> <span class="kd">implements</span> <span class="n">FactoryBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getObject</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">getObjectType</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">UserDao</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSingleton</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>getObject()</code>：创建实例化对象并返回。代替原始实例工厂中创建对象的方法。</li>
<li><code>getObjectType()</code>：返回所创建类的Class对象。</li>
<li><code>isSingleton()</code>：设置对象是否为单例。默认<code>true</code>，可以不重写。</li>
</ul>
<p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.factory.UserDaoFactoryBean&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>成功执行<code>TestFroInstanceUserDao</code>即配置成功。</p>
<h3 id="bean-的生命周期" data-numberify>Bean 的生命周期<a class="anchor ms-1" href="#bean-的生命周期"></a></h3>
<p>Bean的生命周期是指Bean对象从创建到销毁的整个过程。对Bean的生命周期进行控制，可以在Bean创建后（如加载初始化需要用到资源）还有销毁前（如释放资源）执行一些操作。</p>
<h4 id="init-method-和-destroy-method-属性" data-numberify>init-method 和 destroy-method 属性<a class="anchor ms-1" href="#init-method-和-destroy-method-属性"></a></h4>
<p>Spring控制生命周期的第一个方法便是使用Spring配置文件中<code>&lt;bean&gt;</code>的 <code>init-method</code> 和 <code>destroy-method</code> 属性。</p>
<p>在<code>UserDaoImpl</code>中创建初始化方法和销毁方法（方法名任意）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 初始化方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao init...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 销毁方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao destroy...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span> <span class="na">init-method=</span><span class="s">&#34;init&#34;</span> <span class="na">destroy-method=</span><span class="s">&#34;destroy&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><ul>
<li><code>init-method</code>：<code>class</code>指定的类中的初始化方法，在创建Bean对象后执行。</li>
<li><code>destroy-method</code>：<code>class</code>指定的类中的销毁方法，在销毁Bean前执行。</li>
</ul>
<p>编写<code>TestForLifeCycle</code>测试类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestForLifeCycle</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testForLifeCycle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ClassPathXmlApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>对比之前的<code>ctx</code>对象，这里<code>ctx</code>对象使用的类型从<code>ApplicationContext</code>变成了<code>ClassPathXmlApplicationContext</code>。这是因为<code>ApplicationContext</code>中并没有<code>close()</code>方法。而想要执行Bean对象中的<code>destroy()</code>，就必须在程序退出前关闭IOC容器（调用<code>ctx.close()</code>）。</p>
<h4 id="注册钩子关闭容器" data-numberify>注册钩子关闭容器<a class="anchor ms-1" href="#注册钩子关闭容器"></a></h4>
<p>在容器未关闭之前，提前设置好回调函数，让JVM在退出之前回调此函数来关闭容器。</p>
<p>修改<code>TestForLifeCycle</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestForLifeCycle</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testForLifeCycle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ClassPathXmlApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="o">.</span><span class="na">registerShutdownHook</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>注意：<code>ApplicationContext</code>中也没有<code>registerShutdownHook()</code>。所以这里使用的是<code>ClassPathXmlApplicationC</code>对象。</p>
</blockquote>
<h4 id="initializingbean-和-disposablebean-接口" data-numberify>InitializingBean 和 DisposableBean 接口<a class="anchor ms-1" href="#initializingbean-和-disposablebean-接口"></a></h4>
<p>Spring 提供了<code>InitializingBean</code>和<code>DisposableBean</code>接口以更加方便地控制Bean生命周期。使用这两个接口则无需通过Sping配置文件中的<code>init-method</code>和<code>destroy-method</code> 属性来控制生命周期。</p>
<p>实现<code>InitializingBean</code>接口的<code>afterPropertiesSet()</code>方法和<code>DisposableBean</code>接口的<code>destroy()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.DisposableBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.InitializingBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span><span class="o">,</span> <span class="n">InitializingBean</span><span class="o">,</span> <span class="n">DisposableBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * InitializingBean接口的初始化方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterPropertiesSet</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao init by afterPropertiesSet()...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * DisposableBean接口的销毁方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao destroyed by destroy()...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在Spring配置文件中删除<code>init-method</code>和<code>destroy-method</code>属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><h3 id="使用-bean-标签的注意事项" data-numberify>使用 Bean 标签的注意事项<a class="anchor ms-1" href="#使用-bean-标签的注意事项"></a></h3>
<ul>
<li>
<p><code>class</code>属性不能使用接口。因为接口不能创建对象。</p>
</li>
<li>
<p>获取Bean无论是通过<code>id</code>还是<code>name</code>获取，如果无法获取到，将抛出异常<code>NoSuchBeanDefinitionException</code>。</p>
</li>
<li>
<p>Bean默认为单例，避免了对象的频繁创建与销毁，达到了对Bean对象的复用，性能高。</p>
</li>
<li>
<p>如果对象是有状态对象（即该对象有成员变量可以用来存储数据）。因为所有请求线程共用一个Bean对象，所以会存在线程安全问题。</p>
</li>
<li>
<p>如果对象是无状态对象（即该对象没有成员变量没有进行数据存储）。因方法中的局部变量在方法调用完成后会被销毁，所以不会存在线程安全问题。</p>
</li>
<li>
<p>适合交给容器进行管理的Bean对象：</p>
<ul>
<li>表现层对象</li>
<li>业务层对象</li>
<li>数据层对象</li>
<li>工具对象</li>
</ul>
</li>
<li>
<p>不适合交给容器进行管理的Bean对象：</p>
<p>封装实例的域对象。会引发线程安全问题。</p>
</li>
</ul>
<h2 id="di-依赖注入" data-numberify>DI 依赖注入<a class="anchor ms-1" href="#di-依赖注入"></a></h2>
<p>上面的程序，在<code>UserServiceImpl</code>中依然需要手动创建对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserDaoImpl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>当前业务层和数据层的耦合性还是很高。此时就需要使用依赖注入来降低耦合性。</p>
<p>Spring依赖注入支持<u>简单数据类型</u>、<u>引用数据类型</u>还有<u>集合注入</u>，并且提供了两种注入方式：</p>
<ul>
<li>Setter注入</li>
<li>构造器注入</li>
</ul>
<p>基础配置：</p>
<ol>
<li>创建Maven项目。</li>
<li>添加Spring Framework和Junit的依赖jar包。</li>
<li>添加业务层、数据层类：
<ul>
<li><code>User.java</code>: 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>User.java</code>。</li>
<li>DAO(仅测试，无需查询数据库): 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的DAO（<code>UserDao</code>）。</li>
<li>Service: 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的Service（<code>UserService</code>）。</li>
</ul>
</li>
</ol>
<ul>
<li>
<p>测试方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.impl.UserServiceImpl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userService&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="setter-注入property-标签" data-numberify>Setter 注入（property 标签）<a class="anchor ms-1" href="#setter-注入property-标签"></a></h3>
<p>Setter注入是指，在实现类中为需要注入的属性设置Setter方法，让Spring能够使用Setter方法自动给属性创建对象。</p>
<h4 id="注入引用数据类型" data-numberify>注入引用数据类型<a class="anchor ms-1" href="#注入引用数据类型"></a></h4>
<p>要在Bean中注入引用类型属性，注入的属性其实现类必须得是IOC容器中的Bean。</p>
<p>在<code>UserServiceImpl</code>中，取消手动创建对象，并为<code>userDao</code>属性提供<code>setter</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserDao</span><span class="o">(</span><span class="n">UserDao</span> <span class="n">userDao</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userDao</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件<code>applicationContext.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;userDao&#34;</span> <span class="na">ref=</span><span class="s">&#34;userDao&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--...--&gt;</span>
</span></span></code></pre></div><p>为<code>UserService</code>注入<code>UserDao</code>要在<code>UserService</code>的<code>&lt;bean&gt;</code>标签中使用<code>&lt;property&gt;</code>标签。·</p>
<p><code>&lt;property&gt;</code>表示配置当前<code>&lt;bean&gt;</code>的属性，其标签属性有：</p>
<ul>
<li><code>name</code>：<code>&lt;bean&gt;</code>所指的实现类的属性名，表示配置哪一个具体的属性。</li>
<li><code>ref</code>：要配置的属性的Bean的<code>id</code>或<code>name</code>，表示参照哪一个<code>&lt;bean&gt;</code>（该注入的Bean必须在容器中存在）。</li>
</ul>
<p>成功运行<code>ServiceBeanTest</code>说明注入成功。</p>
<p>如果要注入多个属性，则在实例类中加入多个属性，为其设置Setter并在Bean中配置多个<code>&lt;property&gt;</code>即可。</p>
<h4 id="注入简单数据类型" data-numberify>注入简单数据类型<a class="anchor ms-1" href="#注入简单数据类型"></a></h4>
<p>在Bean中注入简单类型属性，简单数据类型并不用在配置文件中为简单类型添加Bean标签配置。</p>
<p>为<code>BookDao</code>添加简单类型属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.InitializingBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span><span class="o">,</span> <span class="n">InitializingBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setConnectionNum</span><span class="o">(</span><span class="kt">int</span> <span class="n">connectionNum</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">connectionNum</span> <span class="o">=</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDatabaseName</span><span class="o">(</span><span class="n">String</span> <span class="n">databaseName</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">databaseName</span> <span class="o">=</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterPropertiesSet</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao init: DatabaseName=&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">databaseName</span>
</span></span><span class="line"><span class="cl">                        <span class="o">+</span> <span class="s">&#34;, ConnectionNum=&#34;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">connectionNum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在Spring配置文件中为<code>UserDao</code>添加<code>&lt;property&gt;</code>标签：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;databaseName&#34;</span> <span class="na">value=</span><span class="s">&#34;mysql&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;connectionNum&#34;</span> <span class="na">value=</span><span class="s">&#34;10&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><ul>
<li><code>name</code>：含义不变，与引用注入类型用法中的含义相同。</li>
<li><code>value</code>: 要配置的属性的值，必须是简单数据类型。对于参数类型，Spring在注入的时候会自动转换，但是有可能会发生转换错误的情况。</li>
</ul>
<p>成功运行<code>ServiceBeanTest</code>说明注入成功。</p>
<h4 id="集合注入" data-numberify>集合注入<a class="anchor ms-1" href="#集合注入"></a></h4>
<p>修改<code>UserDao</code>，为其添加集合类型参数和对应Setter方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span><span class="o">,</span> <span class="n">InitializingBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Properties</span> <span class="n">properties</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...此处省略setter方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterPropertiesSet</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;UserDao init: &#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;array=&#34;</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">array</span><span class="o">)</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;, list=&#34;</span> <span class="o">+</span> <span class="n">list</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;, set=&#34;</span> <span class="o">+</span> <span class="n">set</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;, map=&#34;</span> <span class="o">+</span> <span class="n">map</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;, properties=&#34;</span> <span class="o">+</span> <span class="n">properties</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;array&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;array&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>1<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>2<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>3<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/array&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;list&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;list&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>a<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>b<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>c<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/list&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;set&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;set&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>a<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>a<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>b<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>c<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/set&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;map&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;map&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;a&#34;</span> <span class="na">value=</span><span class="s">&#34;1&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;b&#34;</span> <span class="na">value=</span><span class="s">&#34;2&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;c&#34;</span> <span class="na">value=</span><span class="s">&#34;3&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/map&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;properties&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;props&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;a&#34;</span><span class="nt">&gt;</span>1<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;b&#34;</span><span class="nt">&gt;</span>2<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;c&#34;</span><span class="nt">&gt;</span>3<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/props&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><ul>
<li>
<p><code>&lt;property&gt;</code>：Setter注入依然使用该标签。其<code>name</code>属性含义不变。</p>
<p>集合类型的值在其标签下定义。</p>
</li>
<li>
<p><code>&lt;array&gt;</code>：定义数组类型的值。</p>
<ul>
<li>数组元素中的值使用<code>&lt;value&gt;</code>标签定义。</li>
<li><code>&lt;value&gt;</code>标签中的值要与数组的类型一致。
一般形式如下：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;array&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/array&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;list&gt;</code>：定义<code>List</code>类型的值。</p>
<p>其用法与<code>&lt;array&gt;</code>类似。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;list&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/list&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;set&gt;</code>：定义<code>Set</code>类型的值。
其用法与<code>&lt;array&gt;</code>类似。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;set&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;value&gt;</span>...<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/set&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;map&gt;</code>：定义<code>Map</code>类型的值。</p>
<ul>
<li>其元素使用<code>&lt;entry&gt;</code>标签定义。并且元素的<code>key</code>使用<code>key</code>属性定义，元素的<code>value</code>使用<code>value</code>属性定义。</li>
<li><code>key</code>和<code>value</code>属性的值要和<code>Map</code>的类型对应。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;map&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span> <span class="na">value=</span><span class="s">&#34;...&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span> <span class="na">value=</span><span class="s">&#34;...&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span> <span class="na">value=</span><span class="s">&#34;...&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/map&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;props&gt;</code>：定义<code>Properties</code>的值。</p>
<p>其元素使用<code>&lt;prop&gt;</code>标签定义。<code>key</code>使用<code>key</code>属性定义，<code>value</code>在标签中定义。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;props&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;...&#34;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/prop&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--...--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/props&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>注意：</p>
<ul>
<li>List的底层也是通过数组实现的，所以<code>&lt;list&gt;</code>和<code>&lt;array&gt;</code>标签是可以混用。</li>
<li>集合中要添加引用类型，只需要把<code>&lt;value&gt;</code>标签改成<code>&lt;ref&gt;</code>标签。</li>
</ul>
</blockquote>
<h3 id="构造器注入constructor-arg-标签" data-numberify>构造器注入（constructor-arg 标签）<a class="anchor ms-1" href="#构造器注入constructor-arg-标签"></a></h3>
<p>构造器注入是指Spring通过Bean的实例类中，带参的构造方法将其他Bean进行注入。</p>
<h4 id="注入引用数据类型-1" data-numberify>注入引用数据类型<a class="anchor ms-1" href="#注入引用数据类型-1"></a></h4>
<p>在<code>UserServices</code>中删除Setter方法（此处删除Setter方法是为了证明使用的是构造器注入而非Setter注入）并添加带参的构造方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserServiceImpl</span><span class="o">(</span><span class="n">UserDao</span> <span class="n">userDao</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userDao</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&#34;userDao&#34;</span> <span class="na">ref=</span><span class="s">&#34;userDao&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p><code>&lt;constructor-arg&gt;</code>中<code>name</code>和<code>ref</code>属性的含义与<code>&lt;property&gt;</code>的含义类似。只不过<code>name</code>属性指的是Bean实例类型中构造方法的参数名（名称必须要一致）。</p>
<p>成功运行<code>ServiceBeanTest</code>说明注入成功。</p>
<p>如果要注入多个类型数据，则在构造方法中加入多个参数并在Bean中配置多个<code>&lt;constructor-arg&gt;</code>即可。</p>
<h4 id="注入简单数据类型-1" data-numberify>注入简单数据类型<a class="anchor ms-1" href="#注入简单数据类型-1"></a></h4>
<p>在<code>UserDao</code>中删除Setter方法，并为其添加带参的构造方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span><span class="o">,</span> <span class="n">InitializingBean</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserDaoImpl</span><span class="o">(</span><span class="n">String</span> <span class="n">databaseName</span><span class="o">,</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">databaseName</span> <span class="o">=</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">connectionNum</span> <span class="o">=</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>修改Spring配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userDao&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.dao.impl.UserDaoImpl&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&#34;databaseName&#34;</span> <span class="na">value=</span><span class="s">&#34;mysql&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&#34;connectionNum&#34;</span> <span class="na">value=</span><span class="s">&#34;10&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span></code></pre></div><p>成功运行<code>ServiceBeanTest</code>说明注入成功。</p>
<h4 id="集合注入-1" data-numberify>集合注入<a class="anchor ms-1" href="#集合注入-1"></a></h4>
<p>构造器注入集合数据类型的方式与Setter注入集合数据类型的方式类似。</p>
<p>只不构造器注入要定义相应的带参方法，并且将<code>&lt;property&gt;</code>标签改为<code>&lt;constructor-arg&gt;</code>。</p>
<h3 id="自动装配bean-标签的-autowire-属性" data-numberify>自动装配（bean 标签的 autowire 属性）<a class="anchor ms-1" href="#自动装配bean-标签的-autowire-属性"></a></h3>
<p>自动装配只适用于引用类型依赖注入，不能对简单类型进行操作。</p>
<p>自动装配的方式有：</p>
<ul>
<li>按类型（常用）</li>
<li>按名称</li>
<li>按构造方法（的参数）</li>
</ul>
<h4 id="按类型自动装配" data-numberify>按类型自动装配<a class="anchor ms-1" href="#按类型自动装配"></a></h4>
<p>为<code>UserService</code>中的属性（如<code>userDao</code>）提供Setter方法。接着在Spring中为<code>UserService</code>删除其<code>&lt;bean&gt;</code>标签下的所有<code>&lt;proerty&gt;</code>或<code>&lt;constructor-arg&gt;</code>。然后给<code>&lt;bean&gt;</code>添加<code>autowire=&quot;byType&quot;</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">autowire=</span><span class="s">&#34;byType&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注意：</p>
<ul>
<li>类中对应属性的Setter方法不能省略。</li>
<li>被注入的对象必须要被Spring的IOC容器管理。</li>
<li>按照类型自动装配如果Spring在IOC中找到多个类型相同的Bean则会报<code>NoUniqueBeanDefinitionException</code>错误。</li>
</ul>
</blockquote>
<h4 id="按名称自动装配" data-numberify>按名称自动装配<a class="anchor ms-1" href="#按名称自动装配"></a></h4>
<p>一个类型在IOC中有多个对象，还想要注入成功，这个时候就需要按照名称注入。</p>
<p>修改Spring配置文件（添加<code>autowire=&quot;byName&quot;</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.linner.service.impl.UserServiceImpl&#34;</span> <span class="na">autowire=</span><span class="s">&#34;byName&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注意：</p>
<ul>
<li>按名称自动装配是根据Setter方法的名称在IOC容器中寻找名称对应的Bean（Bean的<code>id</code>或<code>name</code>）。如<code>setUserDao()</code>则需要寻找名称为<code>userDao</code>的Bean。</li>
<li>如果按照名称找不到对应的Bean，则注入<code>null</code>（不会报错！）。</li>
<li>按名称自动装配中，实例类成员变量名与配置耦合，不推荐使用。</li>
</ul>
</blockquote>
<h2 id="配置文件管理第三方-beanproperties-文件加载" data-numberify>配置文件管理第三方 Bean（properties 文件加载）<a class="anchor ms-1" href="#配置文件管理第三方-beanproperties-文件加载"></a></h2>
<h3 id="数据源对象管理dao层" data-numberify>数据源对象管理（DAO层）<a class="anchor ms-1" href="#数据源对象管理dao层"></a></h3>
<p>以Druid为例：</p>
<ul>
<li>
<p><code>pom.xml</code>依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Spring Framework--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--MySQL JDBC--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>8.0.29<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Druid--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>1.2.11<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>JDBC配置（<code>jdbc.properties</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">jdbc.driver</span><span class="o">=</span><span class="s">com.mysql.jdbc.Driver</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.url</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:33061/spring_db</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.username</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.password</span><span class="o">=</span><span class="s">n546,Lin0</span>
</span></span></code></pre></div></li>
<li>
<p>Spring配置（<code>applicationContext.xml</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--需要开启context命名空间--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:context=</span><span class="s">&#34;http://www.springframework.org/schema/context&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--加载jdbc配置文件--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;context:property-placeholder</span> <span class="na">location=</span><span class="s">&#34;classpath*:jdbc.properties&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Druid Bean--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&#34;com.alibaba.druid.pool.DruidDataSource&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driverClassName&#34;</span> <span class="na">value=</span><span class="s">&#34;${jdbc.driver}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;${jdbc.url}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;${jdbc.username}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;${jdbc.password}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>编写<code>App.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.alibaba.druid.pool.DruidDataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">DruidDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">DruidDataSource</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果终端成功输出<code>dataSource</code>，说明配置成功。</p>
</li>
</ul>
<hr>
<h1 id="注解开发" data-numberify>注解开发<a class="anchor ms-1" href="#注解开发"></a></h1>
<p>Spring对注解支持的版本历程:</p>
<ul>
<li>2.0版开始支持注解</li>
<li>2.5版注解功能趋于完善</li>
<li>3.0版支持纯注解开发</li>
</ul>
<p>基础配置：</p>
<ol>
<li>创建Maven项目。</li>
<li>添加Spring Framework和Junit的依赖jar包。</li>
<li>添加业务层、数据层类：
<ul>
<li><code>User.java</code>: 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>User.java</code>。</li>
<li>DAO(仅测试，无需查询数据库): 同<a href="/docs/spring/springframework/#setter-%e6%b3%a8%e5%85%a5property-%e6%a0%87%e7%ad%be">Setter 注入</a>中的DAO（<code>UserDao</code>）。</li>
<li>Service: 同<a href="/docs/spring/springframework/#setter-%e6%b3%a8%e5%85%a5property-%e6%a0%87%e7%ad%be">Setter 注入</a>中的Service（<code>UserService</code>）。</li>
</ul>
</li>
</ol>
<h2 id="spring-配置文件包扫描" data-numberify>Spring 配置文件包扫描<a class="anchor ms-1" href="#spring-配置文件包扫描"></a></h2>
<p>为了能够获取到使用注解定义的Bean，需要在Spring配置文件中使用包扫描来识别出指定包下的所有Bean。</p>
<p>创建Spring配置文件。在Spring配置文件中加入包扫描：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xmlns:context=</span><span class="s">&#34;http://www.springframework.org/schema/context&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&#34;com.linner&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/beans&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注意：</p>
<p>使用<code>&lt;context:component-scan&gt;</code>包扫描，需要在<code>&lt;beans&gt;</code>标签中加入属性：</p>
<pre tabindex="0"><code>xmlns:context=&#34;http://www.springframework.org/schema/context&#34;
</code></pre><p>接着在<code>&lt;context:component-scan&gt;</code>的<code>xsi:schemaLocation</code>属性中加入值：</p>
<pre tabindex="0"><code>http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
</code></pre></blockquote>
<p><code>&lt;context:component-scan&gt;</code>：</p>
<ul>
<li>
<p><code>component</code>：组件，Spring将管理的Bean视作自己的一个组件。</p>
</li>
<li>
<p><code>scan</code>：扫描。</p>
</li>
<li>
<p><code>base-package</code>：该属性指定Spring框架扫描的包路径，它会扫描指定包及其子包中的所有类上的注解。</p>
<ul>
<li>包路径越精确，如：<code>com.linner.dao.impl</code>，扫描的范围越小速度越快。</li>
<li>包路径越广泛，如：<code>com.linner</code>，扫描的范围越大速度越慢。</li>
</ul>
<blockquote>
<p>一般扫描到项目的组织名称即Maven的<code>&lt;groupId&gt;</code>下（如：<code>com.linner</code>）即可。
包扫描不仅能扫描当前包，还能扫描当前包下的子包。</p>
</blockquote>
</li>
</ul>
<h2 id="创建-bean-对象component" data-numberify>创建 Bean 对象（@Component）<a class="anchor ms-1" href="#创建-bean-对象component"></a></h2>
<p>在<code>UserDao</code>中添加<code>@Component</code>注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>编写新的测试类<code>UserDaoTest</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;applicationContext.xml&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc123&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>@Component</code>可以传递一个<code>String</code>类型的值。用于制定Bean的名称。</p>
</li>
<li>
<p><code>@Component</code>可以直接使用而不指定名称。即，使用按类型获取Bean。但必须保证该类型在IOC中有且仅有一个Bean。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">UserDao</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>@Component</code>注解如果不起名称，会有一个默认值，就是将<u>当前类名首字母转为小写后的值</u>。所以也可以按照名称获取。</p>
</li>
<li>
<p><code>@Component</code>还有其他三个衍生注解。</p>
<ul>
<li><code>@Controller</code>：表现层</li>
<li><code>@Service</code>：业务层</li>
<li><code>@Repository</code>：数据层</li>
</ul>
<p>它们的作用和<code>@Component</code>是一样的，仅作为对表现层、业务层和数据层的类进行区分。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="纯注解开发配置类包扫描" data-numberify>纯注解开发（配置类、包扫描）<a class="anchor ms-1" href="#纯注解开发配置类包扫描"></a></h2>
<p>Spring3.0开启了纯注解开发模式，使用Java类替代配置文件。</p>
<p>删除Spring配置文件并创建配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>@Configuration</code>：设定该类为Spring配置类。</p>
</li>
<li>
<p><code>@ComponentScan</code>：包扫描，用来替换配置文件中的<code>&lt;context:component-scan&gt;</code>。在一个配置类中仅能使用一次。多个扫描路径使用数据格式，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">({</span><span class="s">&#34;com.linner.dao&#34;</span><span class="o">,</span> <span class="s">&#34;com.linner.service&#34;</span><span class="o">})</span>
</span></span></code></pre></div><blockquote>
<p>包扫描不仅能扫描当前包，还能扫描当前包下的子包</p>
</blockquote>
</li>
</ul>
<p>修改<code>UserDaoTest</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.config.SpringConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">SpringConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserDao</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>使用Spring配置类，获取IOC容器应该使用<code>AnnotationConfigApplicationContext</code>对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;...</span> <span class="n">componentClasses</span><span class="o">)</span>
</span></span></code></pre></div><h2 id="作用范围scope" data-numberify>作用范围（@Scope）<a class="anchor ms-1" href="#作用范围scope"></a></h2>
<p>注解开发控制Bean的作用范围使用<code>@Scope</code>。它的值有两个：</p>
<ul>
<li>
<p><code>&quot;singleton&quot;</code>：默认值，将当前类设置为单例。</p>
</li>
<li>
<p><code>&quot;prototype&quot;</code>：将当前类设置为多例。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Scope</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Scope</span><span class="o">(</span><span class="s">&#34;prototype&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="生命周期控制postconstruct-和-predestroy" data-numberify>生命周期控制（@PostConstruct 和 @PreDestroy）<a class="anchor ms-1" href="#生命周期控制postconstruct-和-predestroy"></a></h2>
<p>注解控制Bean生命周期使用：</p>
<ul>
<li><code>@PostConstruct</code>：初始化。</li>
<li><code>@PreDestroy</code>：销毁。</li>
</ul>
<p>给<code>UserDao</code>加入初始化和销毁方法（方法名任意）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.annotation.PostConstruct</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.annotation.PreDestroy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 初始化方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PostConstruct</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span> <span class="o">+</span> <span class="s">&#34;init...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 销毁方法
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PreDestroy</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span> <span class="o">+</span> <span class="s">&#34;destroy...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>与使用注解开发的情况一样，要想执行<code>destroy()</code>需要在程序执行的时候关闭容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ctx</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span></code></pre></div><p>或：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ctx</span><span class="o">.</span><span class="na">registerShutdownHook</span><span class="o">();</span>
</span></span></code></pre></div><p>注意:<code>@PostConstruct</code>和@<code>PreDestroy</code>注解如果找不到，需要导入下面的jar包。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;groupId&gt;</span>javax.annotation<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;artifactId&gt;</span>javax.annotation-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;version&gt;</span>1.3.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>原因是，从JDK9以后jdk中的<code>javax.annotation</code>包被移除了，这两个注解刚好就在这个包中。</p>
</blockquote>
<h2 id="依赖注入" data-numberify>依赖注入<a class="anchor ms-1" href="#依赖注入"></a></h2>
<p>给<code>UserService</code>配置Bean：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="按照类型注入" data-numberify>按照类型注入<a class="anchor ms-1" href="#按照类型注入"></a></h3>
<p>注解开发按照类型注入使用<code>@Autowired</code>注解。</p>
<p>给<code>UserService</code>注入<code>UserDao</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><code>@Autowired</code>可以在实例类的成员变量上使用，也可以在Setter方法上使用，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserDao</span><span class="o">(</span><span class="n">UserDao</span> <span class="n">userDao</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userDao</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在实例类的成员变量上使用<code>@Autowired</code>，即使将Setter方法注释掉依然可以注入成功。因为自动装配基于反射设计创建对象并通过暴力反射为属性进行设值（即使是私有属性也能设值）。</p>
<p>使用<code>@Autowired</code>需要保证该类型在IOC容器中有且仅有一个同类型的Bean。
如果IOC容器中有对个同类型的Bean。那么<code>@Autowired</code>就会按照变量名和Bean的名称进行匹配。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Repository</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span> <span class="cm">/*...*/</span> <span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>也能注入成功。</p>
<p>如果有多个同类型Bean，并且<code>@Autowired</code>名称匹配不上，那么会报<code>NoUniqueBeanDefinitionException</code>错误。</p>
</blockquote>
<p>使用<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>UserServiceTest</code>，成功执行说明配置成功。</p>
<h3 id="按照名称注入" data-numberify>按照名称注入<a class="anchor ms-1" href="#按照名称注入"></a></h3>
<p>注解开发名称注入使用<code>@Qualifier</code>注解来完成。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Qualifier</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">&#34;userDao&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在<code>@Qualifier</code>中指定Bean的名称。并且，<code>@Qualifier</code>必须和<code>@Autowired</code>一起使用才能起到按照名称注入的效果。</p>
<blockquote>
<p>经过测试单独使用<code>@Qualifier</code>（不加<code>@Autowired</code>）的效果和按照类型注入的效果一样（可能会有其他细微的区别）。</p>
</blockquote>
<h3 id="注入简单数据类型-2" data-numberify>注入简单数据类型<a class="anchor ms-1" href="#注入简单数据类型-2"></a></h3>
<p>注解开发注入简单类型数据使用<code>@Value</code>注解。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;mysql&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;10&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p><code>@Value</code>中的值使用<code>String</code>类型。如果要注入的是其他类型数据，需要按照其类型数据的格式编写。</p>
<h4 id="注解读取-properties-配置文件" data-numberify>注解读取 properties 配置文件<a class="anchor ms-1" href="#注解读取-properties-配置文件"></a></h4>
<p>使用<code>@Value</code>的意义之一在于：读取properties配置文件的信息。</p>
<p>在<code>resource</code>目录下新建<code>jdbc.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">databaseName</span><span class="o">=</span><span class="s">mysql</span>
</span></span><span class="line"><span class="cl"><span class="na">connectionNum</span><span class="o">=</span><span class="s">10</span>
</span></span></code></pre></div><p>在配置类上添加<code>@PropertySource</code>注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.PropertySource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">(</span><span class="s">&#34;jdbc.properties&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>修改<code>UserDao</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${databaseName}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">databaseName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${connectionNum}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">connectionNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p>读取多个配置文件，使用数组形式给<code>@PropertySource</code>传递字符串数组。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">({</span><span class="s">&#34;jdbc.properties&#34;</span><span class="o">,</span> <span class="s">&#34;xxx.properties&#34;</span><span class="o">})</span>
</span></span></code></pre></div></li>
<li>
<p><code>@PropertySource</code>注解属性中不支持使用通配符<code>*</code>，运行会报错。</p>
</li>
<li>
<p><code>@PropertySource</code>注解属性中可以加入<code>classpath:</code>，代表从当前项目的根路径找文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">({</span><span class="s">&#34;classpath:jdbc.properties&#34;</span><span class="o">})</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="注解管理第三方-bean" data-numberify>注解管理第三方 Bean<a class="anchor ms-1" href="#注解管理第三方-bean"></a></h2>
<p>基础配置：</p>
<ul>
<li>
<p><code>User.java</code>: 同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>User.java</code>。</p>
</li>
<li>
<p><code>UserDao</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDao</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Select</span><span class="o">(</span><span class="s">&#34;SELECT * FROM user_tb&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Select</span><span class="o">((</span><span class="s">&#34;SELECT * FROM user_tb WHERE id = #{id}&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Delete</span><span class="o">(</span><span class="s">&#34;DELETE FROM user_tb WHERE id = #{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Insert</span><span class="o">(</span><span class="s">&#34;INSERT INTO user_tb(username, password) VALUES (#{username}, #{password})&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Update</span><span class="o">(</span><span class="s">&#34;UPDATE user_tb SET username = #{username}, password = #{password} WHERE id = #{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>UserService</code>：</p>
<p><code>UserService</code>接口同<a href="/docs/spring/springframework/#%e4%bd%bf%e7%94%a8-ioc-%e5%ae%b9%e5%99%a8%e5%88%9b%e5%bb%ba-beanbean-%e6%a0%87%e7%ad%be">使用IOC容器创建Bean</a>中的<code>UserService.java</code>。</p>
<p><code>UserService</code>实现类<code>UserServiceImpl.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.service.impl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.dao.UserDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">userDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">userDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">userDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="整合-mybatis" data-numberify>整合 Mybatis<a class="anchor ms-1" href="#整合-mybatis"></a></h3>
<ul>
<li>
<p><code>pom.xml</code>依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--Spring Framework--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MySQL JDBC--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>8.0.29<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Druid--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.2.11<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MyBatis--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.5.10<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Spring JDBC--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MyBatis Spring 整合包--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.3.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Junit 单元测试--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>4.13<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>建立User表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="o">`</span><span class="n">user_tb</span><span class="o">`</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">`</span><span class="n">user_tb</span><span class="o">`</span><span class="w">  </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="nb">int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="w"> </span><span class="k">COMMENT</span><span class="w"> </span><span class="s1">&#39;用户id&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">`</span><span class="n">username</span><span class="o">`</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">COMMENT</span><span class="w"> </span><span class="s1">&#39;用户名&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">`</span><span class="n">password</span><span class="o">`</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">COMMENT</span><span class="w"> </span><span class="s1">&#39;密码&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="nb">CHARACTER</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">utf8</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>JDBC配置文件<code>jdbc.properties</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">jdbc.driver</span><span class="o">=</span><span class="s">com.mysql.cj.jdbc.Driver</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.url</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:3306/spring_db?useSSL=false&amp;useServerPrepStmts=true</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.username</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">jdbc.password</span><span class="o">=</span><span class="s">root</span>
</span></span></code></pre></div></li>
<li>
<p>JDBC配置类<code>JdbcConfig.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.alibaba.druid.pool.DruidDataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JdbcConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 驱动信息：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.driver}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">driver</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.url}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">url</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.username}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jdbc.password}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 获取DataSource对象
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">dataSource</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">DruidDataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DruidDataSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置驱动信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ds</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">driver</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">url</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>@Bean</code>：用于方法上，根据返回值类型自动产生Bean，并且方法的参数会按照类型自动装配。</li>
</ul>
</li>
<li>
<p>Mybatis配置类<code>MybatisConfig.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.mybatis.spring.SqlSessionFactoryBean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.mybatis.spring.mapper.MapperScannerConfigurer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MybatisConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SqlSessionFactoryBean</span> <span class="nf">sqlSessionFactory</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SqlSessionFactoryBean</span> <span class="n">ssfb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置模型类的别名扫描
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ssfb</span><span class="o">.</span><span class="na">setTypeAliasesPackage</span><span class="o">(</span><span class="s">&#34;com.linner.domain&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置数据源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ssfb</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ssfb</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">    * 获取MapperScannerConfigurer对象
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MapperScannerConfigurer</span> <span class="nf">mapperScannerConfigurer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">MapperScannerConfigurer</span> <span class="n">msc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapperScannerConfigurer</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">msc</span><span class="o">.</span><span class="na">setBasePackage</span><span class="o">(</span><span class="s">&#34;com.linner.dao&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">msc</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>SqlSessionFactoryBean</code>：用于封装<code>SqlSessionFactory</code>需要的环境信息（原先的信息是在Mybatis配置文件中定义，如今可以在Java中用代码定义）。用于产生<code>SqlSessionFactory</code>对象。
<ul>
<li><code>setTypeAliasesPackage()</code>：设置模型类的别名扫描</li>
<li><code>setDataSource()</code>：设置<code>DataSource</code>。这里设置的<code>DataSource</code>通过方法的参数和<code>@Bean</code>注解实现了自动装配。并且自动装配的对像是Druid的<code>DataSource</code>。</li>
</ul>
</li>
<li><code>MapperScannerConfigurer</code>：用于加载Dao接口，创建代理对象保存到IOC容器中。此处设置的是<code>dao</code>包下的所有接口。这些接口都会被Mybatis创建成对象并且作为Bean保存在IOC容器中。即，使用<code>ctx.getBean(UserDao.class)</code>能获取到<code>UserDao</code>。</li>
</ul>
</li>
<li>
<p>Spring配置类<code>SpringConfig.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">(</span><span class="s">&#34;classpath:jdbc.properties&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Import</span><span class="o">({</span><span class="n">JdbcConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">MybatisConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><code>@Import</code>：用于引入其他配置类。如果要引入多个配置类则需要使用数组形式。</li>
</ul>
</li>
<li>
<p>测试类<code>UserServiceTest</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.config.SpringConfig</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.domain.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.service.UserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">SpringConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindAll</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">User</span> <span class="n">user</span> <span class="o">:</span> <span class="n">users</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindById</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSave</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;张三&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">21</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;张三&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">userService</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="整合-junit" data-numberify>整合 Junit<a class="anchor ms-1" href="#整合-junit"></a></h3>
<ul>
<li>
<p>引入Spring与测试有关的整合包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--Spring 测试整合包--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>修改测试类<code>UserServiceTest</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 设置类运行器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 设置Spring环境对应的配置
</span></span></span><span class="line"><span class="cl"><span class="c1">// 加载配置类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="o">{</span><span class="n">SpringConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 加载配置文件
</span></span></span><span class="line"><span class="cl"><span class="c1">//@ContextConfiguration(locations={&#34;classpath:applicationContext.xml&#34;})
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 自动装配UserService，删除static静态代码块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="aop" data-numberify>AOP<a class="anchor ms-1" href="#aop"></a></h2>
<h3 id="aop-介绍" data-numberify>AOP 介绍<a class="anchor ms-1" href="#aop-介绍"></a></h3>
<p>一般常用的编程思想是OOP（面向对象编程，Object Oriented Programming）。</p>
<p>而AOP（面向切面编程，Aspect Oriented Programming），是一种编程范式，指导开发者如何组织程序结构。</p>
<p>编程思想主要的内容就是指导程序员该如何编写程序，所以AOP和OOP是两种不同的编程范式。</p>
<p>AOP的作用是在不改变原始设计的基础上为其进行功能增强。类似于Filter代理模式。</p>
<p>AOP术语：</p>
<ul>
<li>
<p>连接点（JoinPoint）：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等。</p>
<p>在SpringAOP中，理解为方法的执行。</p>
<p>例如要对项目中<code>UserDao</code>的功能在不进行任何修改的前提下实现增强。那么<code>UserDao</code>中要增强的方法即为<u>连接点</u>。</p>
</li>
<li>
<p>切入点（Pointcut）：匹配连接点的式子。</p>
<p>在SpringAOP中，一个切入点可以描述一个具体方法，也可也匹配多个方法。</p>
<blockquote>
<p>连接点范围要比切入点范围大，是切入点的方法也一定是连接点，但是是连接点的方法就不一定要被增强，所以可能不是切入点。</p>
</blockquote>
</li>
<li>
<p>通知（Advice）：在切入点处执行的操作，也就是共性功能。</p>
<p>在SpringAOP中，功能最终以方法的形式呈现。</p>
</li>
<li>
<p>通知类：定义通知的类。</p>
</li>
<li>
<p>切面（Aspect）：描述通知与切入点的对应关系。</p>
<p>通知是要增强的内容，会有多个；切入点是需要被增强的方法，也会有多个。通知和切入点的关系通过切面来描述。</p>
</li>
<li>
<p>目标对象（Target）：也叫原始对象。原始功能去掉共性功能对应的类产生的对象。即，配置AOP之前原设计的对象（要增强的对象）。</p>
</li>
<li>
<p>代理（Proxy）：通过通知类把目标对象增强后产生的对象。</p>
<p>目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现。</p>
</li>
</ul>
<h3 id="注解开发-aop" data-numberify>注解开发 AOP<a class="anchor ms-1" href="#注解开发-aop"></a></h3>
<p>基础配置：使用<a href="/docs/spring/springframework/#%e6%95%b4%e5%90%88-junit">整合 Junit</a>中的配置。</p>
<ul>
<li>
<p><code>pom.xml</code>导入坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.aspectj<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>aspectjweaver<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.9.4<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><ul>
<li><code>spring-context</code>中已经包含了<code>spring-aop</code>，所以不需要再单独导入<code>spring-aop</code>。</li>
<li>AspectJ是AOP思想的一个具体实现，AspectJ比起Spring的AOP实现来说，更加好用。</li>
</ul>
</li>
<li>
<p>创建通知类<code>UserDaoAdvice</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.aop</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.dao.UserDao.*(..))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Before</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Before...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><code>@Aspect</code>：设置当前类为AOP切面类。</p>
</li>
<li>
<p><code>@Pointcut</code>：设置切入点方法。切入点定义需要一个不具有实际意义的方法（无参、无返回值、空方法体）。即<code>UserDaoAdvice</code>中的<code>pt()</code>。</p>
<p><code>@Pointcut</code>中的<code>execution()</code>用来定义切入点。</p>
</li>
<li>
<p><code>@Before</code>：设置切面。即设置当前通知方法在原始切入点方法前运行。</p>
<p>切入点定义作为<code>@Before</code>的参数。</p>
</li>
</ul>
</li>
<li>
<p>在<code>SpringConfig</code>加入<code>@EnableAspectJAutoProxy</code>注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;com.linner&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableAspectJAutoProxy</span>
</span></span><span class="line"><span class="cl"><span class="nd">@PropertySource</span><span class="o">(</span><span class="s">&#34;classpath:jdbc.properties&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Import</span><span class="o">({</span><span class="n">JdbcConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">MybatisConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="aop-切入点表达式" data-numberify>AOP 切入点表达式<a class="anchor ms-1" href="#aop-切入点表达式"></a></h3>
<p>切入点表达式是对要进行增强的方法的描述方式。切入点表达式的一般形式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="err">动作关键字</span><span class="o">(</span><span class="err">访问修饰符</span> <span class="err">返回值类型</span> <span class="err">包名</span><span class="o">.</span><span class="err">类名</span><span class="o">.</span><span class="err">方法名</span><span class="o">(</span><span class="err">参数类型列表</span><span class="o">)</span> <span class="err">异常名</span><span class="o">)</span>
</span></span></code></pre></div><ul>
<li>由于通常都是对<code>public</code>方法进行定义，而<code>public</code>是默认的，所以可以省略。</li>
<li>切入点表达式定义的类可以是接口，也可以是其实现类。</li>
<li>AOP是在Spring中运行的，很显然切入点表达式定义的类必须存在IOC容器中。</li>
<li>如果匹配无参方法，直接省略参数。</li>
</ul>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">execution</span><span class="o">(</span><span class="kt">void</span> <span class="n">com</span><span class="o">.</span><span class="na">linner</span><span class="o">.</span><span class="na">dao</span><span class="o">.</span><span class="na">UserDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="kt">int</span><span class="o">))</span>
</span></span></code></pre></div><h4 id="切入点表达式通配符" data-numberify>切入点表达式通配符<a class="anchor ms-1" href="#切入点表达式通配符"></a></h4>
<ul>
<li>
<p><code>*</code>：匹配任意单个独立的任意符号。</p>
<p>可以独立出现，匹配任意返回值类型、单个包名（不能用做匹配完整包名）、类名、方法名或单个参数类型（即匹配单个单词）；
也可以作为前缀或者后缀的匹配符出现。</p>
<p>如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">execution</span><span class="err">（</span><span class="o">*</span> <span class="n">com</span><span class="o">.</span><span class="na">linner</span><span class="o">.*.</span><span class="na">UserService</span><span class="o">.</span><span class="na">find</span><span class="o">*(*))</span>
</span></span></code></pre></div><p>匹配<code>com.linner</code>包下的任意包中的<code>UserService</code>类或接口中，所有以<code>find</code>开头的、带有一个参数的、任意返回值类型的方法。</p>
</li>
<li>
<p><code>..</code>：匹配多个连续的任意符号。</p>
<p>可以独立出现，常用于简化包名与参数的书写。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">execution</span><span class="err">（</span><span class="o">*</span> <span class="n">com</span><span class="o">..</span><span class="na">UserService</span><span class="o">.</span><span class="na">findById</span><span class="o">(..))</span>
</span></span></code></pre></div><p>匹配<code>com</code>包下的任意包中的<code>UserService</code>类或接口中所有名称为<code>findById</code>的（参数的数量、类型任意，返回值任意）方法。</p>
</li>
</ul>
<ul>
<li>
<p><code>+</code>：专用于匹配子类类型。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">execution</span><span class="o">(*</span> <span class="o">*..*</span><span class="n">Service</span><span class="o">+.*(..))</span>
</span></span></code></pre></div><p>这个使用率较低。<code>*Service+</code>，表示所有以Service结尾的接口的子类。</p>
</li>
</ul>
<p>书写技巧（所有代码按照标准规范开发，否则以下技巧全部失效）：</p>
<ul>
<li>描述切入点通常<u>描述接口</u>，而不描述实现类，如果描述到实现类，就出现耦合了。</li>
<li>访问控制修饰符针对接口开发均采用<code>public</code>描述（简化书写）。</li>
<li>返回值类型对于<u>增删改方法使用精准类型</u>加速匹配，对于查询类使用<code>*</code>通配快速描述。</li>
<li>包名书写尽量不使用<code>..</code>匹配，效率过低，常用<code>*</code>做单个包描述匹配，或精准匹配。</li>
<li>接口名/类名书写名称与模块相关的采用<code>*</code>匹配，例如<code>UserService</code>书写成<code>*Service</code>，绑定业务层接口名。</li>
<li>方法名书写以动词进行精准匹配，名词采用<code>*</code>匹配，例如<code>getById</code>书写成<code>getBy*</code>，<code>selectAll</code>书写成<code>selectAll</code>。</li>
<li>参数规则较为复杂，根据业务方法灵活调整。</li>
<li>通常不使用异常作为匹配规则。</li>
</ul>
<h4 id="通知类型" data-numberify>通知类型<a class="anchor ms-1" href="#通知类型"></a></h4>
<p>AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置。</p>
<p>AspactJ提供了5种通知类型：</p>
<ul>
<li>前置通知</li>
<li>后置通知</li>
<li>环绕通知</li>
<li>返回后通知</li>
<li>抛出异常后通知</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 代码1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 代码2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 原始的业务操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 代码3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 代码4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 代码5
</span></span></span></code></pre></div><p>其中：</p>
<ul>
<li>前置通知：代码1和代码2</li>
<li>返回后通知：代码3</li>
<li>抛出异常后通知：代码4</li>
<li>后置通知:代码5</li>
<li>环绕通知：上述整个代码块</li>
</ul>
<p>通知方法的方法名称没有限制，只需在方法的上端使用注解定义即可。各通知类型的注解如下：</p>
<ul>
<li>前置通知：<code>@Before</code></li>
<li>后置通知：<code>@After</code></li>
<li>环绕通知：<code>@Around</code></li>
<li>返回后通知：<code>@AfterReturning</code></li>
<li>抛出异常后通知：<code>@AfterThrowing</code></li>
</ul>
<p>这些注解的使用方式都是一样的。在对应的方法上定义，并且传入切入点（函数形式）。如：<code>@Around(&quot;pt()&quot;)</code>。</p>
<h5 id="前置通知和后置通知的使用" data-numberify>前置通知和后置通知的使用<a class="anchor ms-1" href="#前置通知和后置通知的使用"></a></h5>
<p>前置通知和后置通知的使用方式一样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.dao.UserDao.*(..))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Before</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Before...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@After</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;After...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h5 id="环绕通知的使用" data-numberify>环绕通知的使用<a class="anchor ms-1" href="#环绕通知的使用"></a></h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.aspectj.lang.ProceedingJoinPoint</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.dao.UserDao.findById(int))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Around</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">around</span><span class="o">(</span><span class="n">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Before...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Object</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;After....&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>环绕通知必须传入一个<code>ProceedingJoinPoint</code>参数。使用<code>pjp.proceed()</code>才可以在环绕通知中掉用原始方法。并且<code>proceed()</code>可以获取到原始方法的返回值。</p>
<p>如果也想让代理后的方法返回跟原始方法一样的值。那么必须定义环绕方法的返回值类型，并且使用<code>proceed()</code>获取原始方法的返回值并返回。</p>
<p>环绕通知比较灵活，可以将其定义成其他类型的通知，并且可以做到其他通知做不到的事情。例如循环调用原始方法等。</p>
<p>环绕通知需要抛出异常是因为。原始方法有可能会出现异常，并且原始方法的异常并不确定。所以为了提高通用性，环绕通知默认抛出异常。</p>
<p>如果环绕方法定义的是<code>void</code>类型，并且原始方法有返回值。如果此时在环绕通知中没有返回值，那么在掉用代理后的方法后，返回的是<code>null</code>。</p>
<h5 id="返回后通知的使用" data-numberify>返回后通知的使用<a class="anchor ms-1" href="#返回后通知的使用"></a></h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.dao.UserDao.findById(int))&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@AfterReturning</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterReturning</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;After Returning...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>注意：返回后通知是需要在原始方法正常执行后才会被执行，如果原始方法执行的过程中出现了异常，那么返回后通知不会被执行。</p>
<p>后置通知是不管原始方法有没有抛出异常都会被执行。</p>
</blockquote>
<h5 id="异常后通知" data-numberify>异常后通知<a class="anchor ms-1" href="#异常后通知"></a></h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Aspect</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoAdvice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">&#34;execution(* com.linner.service.UserService.findAll())&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pt</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@AfterThrowing</span><span class="o">(</span><span class="s">&#34;pt()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterThrowing</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;After Throwing...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在<code>UserServiceImpl.findAll()</code>中模拟错误即可触发。例如使用<code>int a = 1/0;</code>模拟错误。</p>
<blockquote>
<p>注意：异常后通知是需要原始方法抛出异常。如果没有抛异常，异常后通知将不会被执行。</p>
</blockquote>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

