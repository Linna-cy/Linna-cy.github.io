<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>项目管理 on Linner&#39;s Blog</title>
    <link>/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</link>
    <description>Recent content in 项目管理 on Linner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020-2024 Linner. All Rights Reserved.
</copyright>
    <lastBuildDate>Mon, 27 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Maven 高级</title>
      <link>/docs/spring/springboot/maven-senior/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springboot/maven-senior/</guid>
      <description><![CDATA[多模块开发 多模块开发有以下两种： 按照功能拆分。 按照模块拆分。 例如，将项目中的DAO类拆分出来作为一个独立的模块。然后使用Maven将该模块作]]></description>
      <content:encoded><![CDATA[<h1 id="多模块开发" data-numberify>多模块开发<a class="anchor ms-1" href="#多模块开发"></a></h1>
<p>多模块开发有以下两种：</p>
<ul>
<li>按照功能拆分。</li>
<li>按照模块拆分。</li>
</ul>
<p>例如，将项目中的DAO类拆分出来作为一个独立的模块。然后使用Maven将该模块作为依赖导入项目中。</p>
<p>假设现在已经将项目中的实体类拆分出来作为<code>maven-dao</code>模块。该模块也使用Maven构建，然后导入该项目所需依赖。经过测试后，将该项目的<code>&lt;groupId&gt;</code>、<code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>导入原本项目。</p>
<p><code>maven-dao</code>模块的<code>pom.xml</code>中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span> <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 将下面内容作为依赖导入到原项目中 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>springmvc-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- END --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>将上方<code>&lt;groupId&gt;</code>、<code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>导入原项目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>springmvc-demo<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div><p>接着使用Maven的<code>install</code>命令将<code>maven-dao</code>模块安装到Maven本地仓库中，项目即可正常启动。</p>
<hr>
<h1 id="依赖管理" data-numberify>依赖管理<a class="anchor ms-1" href="#依赖管理"></a></h1>
<h2 id="依赖传递" data-numberify>依赖传递<a class="anchor ms-1" href="#依赖传递"></a></h2>
<p>Maven项目中的依赖是具有传递性的。即，依赖的依赖可以作为依赖使用。将依赖关系作为树状结构看待，那么依赖的子孙依赖，也可以作为项目的依赖。</p>
<p>依赖传递有直接依赖和间接依赖。</p>
<ul>
<li>
<p>直接依赖：</p>
<p>在<code>pom.xml</code>中编写的依赖就是该项目的直接依赖。即，依赖树中，子依赖（子节点）即为当前项目（根节点）的直接依赖。</p>
</li>
<li>
<p>间接依赖：
依赖树中，直接依赖下的所有依赖（孙子节点）即为当前项目的间接依赖。</p>
</li>
</ul>
<p>因为依赖传递的存在，会导致使用依赖的过程中出现冲突问题。例如有两个相同的依赖，它们的版本不同，就会导致依赖冲突。</p>
<p>Maven指定了一系列规则来解决依赖冲突问题。</p>
<ul>
<li>特殊优先：同级下（依赖树中同个父节点的依赖为同级，即同个<code>pom.xml</code>下），配置了相同资源的不同版本，后配置的覆盖先配置。</li>
<li>路径优先：依赖树中，层级越浅，优先级越高；层级越深，优先级越低。</li>
<li>声明优先：资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的。即，谁先声明用谁。</li>
</ul>
<blockquote>
<p>注意：依赖的优先级只对当前项目起作用。即，当前项目选择的依赖版本并不会影响到依赖中相同资源不同版本的依赖。
最终选择的依赖结果根据Idea中Mavem面板的依赖树视图。</p>
</blockquote>
<h2 id="可选依赖" data-numberify>可选依赖<a class="anchor ms-1" href="#可选依赖"></a></h2>
<p>可选依赖指对外隐藏当前所依赖的资源（不透明），隐藏后对应资源将不具有依赖传递。</p>
<p>可选依赖的开关使用<code>&lt;optional&gt;</code>。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>xxx.xxxxxx<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>xxxxx-xxxxxx<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 默认为false，设置为true为开启可选依赖 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="排除依赖" data-numberify>排除依赖<a class="anchor ms-1" href="#排除依赖"></a></h2>
<p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本（不需要）。即，在当前项目中，排除依赖中不需要的间接依赖。</p>
<p>排除依赖使用<code>&lt;exclusions&gt;</code>来指定一个排除的依赖列表。列表中使用<code>&lt;exclusion&gt;</code>来指定要排除的依赖。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>xxx.xxxxxx<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>xxxxx-xxxxxx<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;exclusions&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;exclusion&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>yyy.yyyyyy<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>yyyyy-yyyyyyy<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 排除依赖不需要指定版本 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/exclusion&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/exclusions&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="聚合工程" data-numberify>聚合工程<a class="anchor ms-1" href="#聚合工程"></a></h2>
<p>聚合即为将多个模块组织成一个整体，同时进行项目构建的过程。聚合工程通常是一个不具有业务功能的&quot;空&quot;工程（有且仅有一个pom文件）。使用聚合工程可以将多个工程编组，通过对聚合工程进行构建，实现对所包含的模块进行同步构建。当工程中某个模块发生更新（变更）时，必须保障工程中与已更新模块关联的模块同步更新，此时可以使用聚合工程来解决批量模块同步构建的问题。</p>
<p>Example：</p>
<p>创建一个空的Maven项目，并将其打包方式设置为<code>pom</code>，然后添加所要管理的项目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>maven-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 设置管理的模块名称 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modules&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- module里面的值为管理模块的相对路径 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../xxxx<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../yyyy<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../zzzz<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/modules&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>当该<code>maven-parent</code>被<code>compile</code>后，所有被其管理的项目都会被执行编译操作。</p>
<blockquote>
<p>聚合工程管理的项目在进行运行的时候，会按照项目与项目之间的依赖关系来自动决定执行的顺序和配置的顺序无关。</p>
</blockquote>
<h2 id="继承" data-numberify>继承<a class="anchor ms-1" href="#继承"></a></h2>
<p>继承是用来解决重复配置问题。继承描述的是两个工程间的关系子工程可以继承父工程中的配置信息，常见于依赖关系的继承。继承的作用：简化配置、减少版本冲突。</p>
<blockquote>
<p>一般继承和聚合都是使用同一个空项目来构建，但是这两个的功能是不一样的。</p>
</blockquote>
<p>在子工程中配置当前工程继承自parent工程：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 在project下配置 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>maven-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--设置父项目pom.xml位置路径--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;relativePath&gt;</span>../maven-parent/pom.xml<span class="nt">&lt;/relativePath&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/parent&gt;</span>
</span></span></code></pre></div><p>将子项目共同使用的依赖都抽取出来，维护在父项目的<code>pom.xml</code>中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.linner<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>maven-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>x.x.x<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modules&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../xxxx<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../yyyy<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;module&gt;</span>../zzzz<span class="nt">&lt;/module&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/modules&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-core<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-webmvc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.2.10.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>3.5.6<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>1.3.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>5.1.47<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>1.1.16<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>3.1.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>jackson-databind<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.9.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><h3 id="子项目依赖版本问题" data-numberify>子项目依赖版本问题<a class="anchor ms-1" href="#子项目依赖版本问题"></a></h3>
<p>如果把所有用到的依赖都管理在父项目的<code>pom.xml</code>，这样就会导致有很多项目引入了过多自己不需要的依赖，这样对于子项目来说也是种负担。</p>
<p>可以在父工程中使用<code>&lt;dependencyManagement&gt;</code>来定义依赖管理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 在project下配置 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependencyManagement&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>4.12<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencyManagement&gt;</span>
</span></span></code></pre></div><p><code>&lt;dependencyManagement&gt;</code>标签不真正引入jar包，而是配置可供子项目选择的jar包依赖。</p>
<p>如果子项目要想使用它所提供的这些jar包，需要自己添加依赖，并且不需要指定<code>&lt;version&gt;</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>子项目使用的jar包<code>version</code>由父项目决定。</p>
<hr>
<h1 id="属性" data-numberify>属性<a class="anchor ms-1" href="#属性"></a></h1>
<p>Maven属性的概念和变量的概念很相似。在一个地方声明，其他地方使用，当属性的声明修改后，所有使用属性的地方都会跟着修改。</p>
<p>在Maven中的属性分为:</p>
<ul>
<li>
<p>自定义属性。</p>
</li>
<li>
<p>内置属性。</p>
<p>使用<code>mvn help:system</code>命令查看。</p>
</li>
<li>
<p>Setting属性。</p>
</li>
<li>
<p>Java系统属性。</p>
</li>
<li>
<p>环境变量属性。</p>
</li>
</ul>
<h2 id="自定义属性" data-numberify>自定义属性<a class="anchor ms-1" href="#自定义属性"></a></h2>
<p>在父工程中使用<code>&lt;properties&gt;</code>定义属性：</p>
<properties>
    <spring.version>5.2.10.RELEASE</spring.version>
    <junit.version>4.12</junit.version>
    <mybatis-spring.version>1.3.0</mybatis-spring.version>
</properties>
<p>定义属性标签的名称可以自定义，如<code>&lt;spring.version&gt;</code>也可以修改为<code>&lt;spring-version&gt;</code>。</p>
<p>接着修改依赖的<code>version</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-core<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-webmvc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>使用<code>${属性名}</code>来使用属性。</p>
<h2 id="配置文件加载属性" data-numberify>配置文件加载属性<a class="anchor ms-1" href="#配置文件加载属性"></a></h2>
<p>属性也可以作用于其他配置文件中（如<code>jdbc.properties</code>）。</p>
<p>先在父工程中定义属性，并且设置Maven过滤文件范围：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;jdbc.url&gt;</span>jdbc:mysql://127.1.1.1:3306/spring_db<span class="nt">&lt;/jdbc.url&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;resources&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;resource&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 设置资源目录（相对路径） --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;directory&gt;</span>../xxxx/src/main/resources<span class="nt">&lt;/directory&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 设置是否能够解析${}，默认是false --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;filtering&gt;</span>true<span class="nt">&lt;/filtering&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/resource&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/resources&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><p>修改<code>jdbc.properties</code>（属性值的使用方式与<code>pom.xml</code>中相同）：</p>
<pre tabindex="0"><code class="language-properties" data-lang="properties">jdbc.driver=com.mysql.jdbc.Driver
jdbc.url=${jdbc.url}
jdbc.username=root
jdbc.password=root
</code></pre><p>如果需要在多个项目中解析属性值，可以使用<code>${project.basedir}</code>（Maven的内置系统属性）来简化书写：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;resources&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">			${project.basedir}: 表示当前项目所在目录
</span></span></span><span class="line"><span class="cl"><span class="c">			子项目继承了父项目，相当于所有的子项目都添加了资源目录的过滤
</span></span></span><span class="line"><span class="cl"><span class="c">		--&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;resource&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;directory&gt;</span>${project.basedir}/src/main/resources<span class="nt">&lt;/directory&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;filtering&gt;</span>true<span class="nt">&lt;/filtering&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/resource&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/resources&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">        忽略 web.xml 检查
</span></span></span><span class="line"><span class="cl"><span class="c">        或者在 src\main\webapp\WEB-INF\ 添加一个 web.xml 文件 
</span></span></span><span class="line"><span class="cl"><span class="c">    --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>maven-war-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>3.2.3<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="c">&lt;!-- 忽略 web.xml 检查 --&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;failOnMissingWebXml&gt;</span>false<span class="nt">&lt;/failOnMissingWebXml&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><blockquote>
<p>使用<code>mvn help:system</code>命令可以查看更多的内置属性。</p>
</blockquote>
<hr>
<h1 id="版本管理" data-numberify>版本管理<a class="anchor ms-1" href="#版本管理"></a></h1>
<ul>
<li><code>SNAPSHOT</code>（快照版本）：
<ul>
<li>项目开发过程中临时输出的版本，称为快照版本。</li>
<li>快照版本会随着开发的进展不断更新。</li>
</ul>
</li>
<li><code>RELEASE</code>（发布版本）：
<ul>
<li>项目开发到一定阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构件文件是稳定的。</li>
<li>即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本称为发布版本。</li>
</ul>
</li>
<li><code>alpha</code>（内测版）：Bug多、不稳定、内部版本不断添加新功能。</li>
<li><code>beta</code>（公测版）：不稳定（相对比<code>alpha</code>稳定些），Bug相对较多不断添加新功能。</li>
<li>纯数字版本。</li>
</ul>
<hr>
<h1 id="多环境开发" data-numberify>多环境开发<a class="anchor ms-1" href="#多环境开发"></a></h1>
<p>Maven提供配置多种环境的设定，帮助开发者在使用过程中快速切换环境。</p>
<p>在父工程中配置多个环境，并指定默认激活环境：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;profiles&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--开发环境--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;profile&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;id&gt;</span>dev<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;jdbc.url&gt;</span>jdbc:mysql://127.1.1.1:3306/spring_db<span class="nt">&lt;/jdbc.url&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;activation&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- 设定是否为默认启动环境 --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;activeByDefault&gt;</span>true<span class="nt">&lt;/activeByDefault&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/activation&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/profile&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--生产环境--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;profile&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;id&gt;</span>pro<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;jdbc.url&gt;</span>jdbc:mysql://127.2.2.2:3306/spring_db<span class="nt">&lt;/jdbc.url&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/profile&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--测试环境--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;profile&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;id&gt;</span>test<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;jdbc.url&gt;</span>jdbc:mysql://127.3.3.3:3306/spring_db<span class="nt">&lt;/jdbc.url&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/profile&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/profiles&gt;</span>
</span></span></code></pre></div><p>动态切换配置环境可以使用Maven的<code>-P</code>参数来指定，参数值为环境<code>id</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mvn install -P <span class="nb">test</span>
</span></span></code></pre></div><hr>
<h1 id="跳过测试" data-numberify>跳过测试<a class="anchor ms-1" href="#跳过测试"></a></h1>
<p>在执行<code>install</code>指令的时候，Maven都会按照顺序从上往下依次执行，每次都会执行<code>test</code>。<code>test</code>可以确保每次打包或者安装的时候，程序的正确性。</p>
<p>但是，假如测试已经通过，在没有修改程序的前提下再次执行打包或安装命令，由于顺序执行，测试会被再次执行，就有点耗费时间了。或者，功能开发过程中有部分模块还没有开发完毕，测试无法通过，但是想要把其中某一部分进行快速打包，此时由于测试环境失败就会导致打包失败。此时就需要跳过测试：</p>
<ol>
<li>
<p>Idea工具可以实现跳过测试（Maven面板中带闪电图标的按钮）。</p>
</li>
<li>
<p>在父工程中的<code>pom.xml</code>中添加测试插件配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>maven-surefire-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.12.4<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;skipTests&gt;</span>false<span class="nt">&lt;/skipTests&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="c">&lt;!--排除掉不参与测试的内容--&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;excludes&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;exclude&gt;</span>**/BookServiceTest.java<span class="nt">&lt;/exclude&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/excludes&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><p><code>&lt;configuration&gt;</code>中有如下标签：</p>
<ul>
<li><code>skipTests</code>：如果为<code>true</code>，跳过所有测试；为<code>false</code>，不跳过测试。</li>
<li><code>excludes</code>：不参与测试的测试类，针对<code>skipTests</code>为<code>false</code>来设置的。</li>
<li><code>includes</code>：参与测试的测试类，针对<code>skipTests</code>为<code>true</code>来设置的。</li>
</ul>
</li>
<li>
<p>命令跳过测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mvn 指令 -D skipTests
</span></span></code></pre></div><blockquote>
<ul>
<li>执行的项目构建指令必须包含测试生命周期，否则无效果。</li>
<li>命令需要在<code>pom.xml</code>所在目录下进行执行。</li>
</ul>
</blockquote>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Maven 基础</title>
      <link>/docs/spring/java-web/maven-base/</link>
      <pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/maven-base/</guid>
      <description><![CDATA[Maven 简介 Apache Maven是专门用于管理和构建Java项目的工具, 它基于项目对象模型 (POM) 的概念, 通过一小段描述信息来管理项目的构建, 报告和文档. Mav]]></description>
      <content:encoded><![CDATA[<h1 id="maven-简介" data-numberify>Maven 简介<a class="anchor ms-1" href="#maven-简介"></a></h1>
<p>Apache Maven是专门用于管理和构建Java项目的工具, 它基于项目对象模型 (POM) 的概念, 通过一小段描述信息来管理项目的构建, 报告和文档.</p>
<p>Maven的主要功能有:</p>
<ul>
<li>提供了一套标准化的项目结构.</li>
<li>提供了一套标准化的构建流程 (编译, 测试, 打包, 发布&hellip;).</li>
<li>提供了一套依赖管理机制.</li>
</ul>
<h2 id="maven-模型" data-numberify>Maven 模型<a class="anchor ms-1" href="#maven-模型"></a></h2>
<p>Maven模型包含:</p>
<ul>
<li>项目对象模型 (Project Object Model)</li>
<li>依赖管理模型 (Dependency)</li>
<li>插件 (Plugin)</li>
</ul>
<p>Maven模型图示:</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/maven-base/1662167147568.png" loading="lazy" width="740" height="333" />
</picture>

</p>
<p>其中紫色框框起来的部分, 就是用来完成标准化构建流程.</p>
<h2 id="仓库" data-numberify>仓库<a class="anchor ms-1" href="#仓库"></a></h2>
<p>Maven仓库是项目中依赖的第三方库, 这个库所在的位置叫做仓库 (在Maven的术语中，仓库是一个位置, place).</p>
<p>Maven中, 任何一个依赖、插件或者项目构建的输出，都可以称之为构件.
Maven仓库能帮助我们管理构件 (主要是JAR), 它就是放置所有JAR文件 (WAR, ZIP, POM等等) 的地方.</p>
<p>仓库有三种类型:</p>
<ul>
<li>本地 (local)</li>
<li>中央 (central)</li>
<li>远程 (remote)</li>
</ul>
<p>在项目中使用坐标引入对应依赖jar包后, Maven会按照本地仓库 &ndash;&gt; 远程仓库&ndash;&gt; 中央仓库的顺序去查找相应的jar包. 只要jar包存在, 如果是在本地仓库则直接使用, 而如果在远程仓库或中央仓库, Maven则将jar包自动下载到本地仓库.</p>
<h3 id="本地仓库" data-numberify>本地仓库<a class="anchor ms-1" href="#本地仓库"></a></h3>
<p>本地仓库在第一次执行maven命令的时候才被创建.</p>
<p>运行 Maven 的时候, Maven 所需要的任何构件都是直接从本地仓库获取的. 如果本地仓库没有, 它会首先尝试从远程仓库下载构件至本地仓库, 然后再使用本地仓库的构件.</p>
<p>Maven 本地仓库默认为用户主目录 (USER HOME) 中的 <code>.m2/repository</code>.</p>
<h3 id="中央仓库" data-numberify>中央仓库<a class="anchor ms-1" href="#中央仓库"></a></h3>
<p>Maven 中央仓库是由 Maven 社区提供的仓库, 其中包含了大量常用的库.</p>
<p>中央仓库包含了绝大多数流行的开源Java构件, 以及源码、作者信息、SCM、信息、许可证信息等. 一般来说，简单的Java项目依赖的构件都可以在这里下载到.</p>
<p>Maven 社区提供了一个 URL: <a href="http://search.maven.org/#browse" target="_blank" rel="noopener noreferrer">search.maven.org/#browse<i class="fas fa-external-link-square-alt ms-1"></i></a>, 来浏览中央仓库的内容.</p>
<h3 id="远程仓库" data-numberify>远程仓库<a class="anchor ms-1" href="#远程仓库"></a></h3>
<p>远程仓库是开发人员自己定制的仓库, 包含了所需要的代码库或者其他工程中用到的 jar 文件. 一般是由公司团队搭建的私有仓库.</p>
<hr>
<h1 id="maven标准化项目结构" data-numberify>Maven标准化项目结构<a class="anchor ms-1" href="#maven标准化项目结构"></a></h1>
<p>Maven提供了一套标准化的项目结构, 所有的IDE使用Maven构建的项目完全一样. 所以, 使用Maven创建的项目在所有IDE中可以通用.</p>
<p>使用Maven构建的项目结构示例:</p>
<ul>
<li>📁<code>project_name</code> &mdash; 项目主目录
<ul>
<li>📁<code>src</code> &mdash; 源代码和测试代码文件目录
<ul>
<li>📁<code>main</code> &mdash; 源代码文件目录
<ul>
<li>📁<code>java</code> &mdash; 源代码Java文件目录</li>
<li>📁<code>resourcs</code> &mdash; 源代码配置文件目录</li>
</ul>
</li>
<li>📁<code>test</code> &mdash; 测试代码文件目录
<ul>
<li>📁<code>java</code> &mdash; 测试代码Java文件目录</li>
<li>📁<code>resource</code> &mdash; 测试代码配置</li>
</ul>
</li>
<li>📄<code>pom.xml</code> &mdash; 项目核心配置文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="项目核心配置文件-pomxml" data-numberify>项目核心配置文件 pom.xml<a class="anchor ms-1" href="#项目核心配置文件-pomxml"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0
</span></span></span><span class="line"><span class="cl"><span class="s">                      http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 模型版本 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- The Basics --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 公司或者组织的唯一标志 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>...<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 当前项目唯一ID --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>...<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 本项目目前所处的版本号 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>...<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 打包的机制 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;packaging&gt;</span>...<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 项目依赖关系 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependencies&gt;</span>...<span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;parent&gt;</span>...<span class="nt">&lt;/parent&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependencyManagement&gt;</span>...<span class="nt">&lt;/dependencyManagement&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;modules&gt;</span>...<span class="nt">&lt;/modules&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- pom常量 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;properties&gt;</span>...<span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- Build Settings --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;build&gt;</span>...<span class="nt">&lt;/build&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;reporting&gt;</span>...<span class="nt">&lt;/reporting&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- More Project Information --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 项目的名称 --&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;name&gt;</span>...<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 项目的详细描述 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;description&gt;</span>...<span class="nt">&lt;/description&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 项目主页的URL --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;url&gt;</span>...<span class="nt">&lt;/url&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;inceptionYear&gt;</span>...<span class="nt">&lt;/inceptionYear&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;licenses&gt;</span>...<span class="nt">&lt;/licenses&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;organization&gt;</span>...<span class="nt">&lt;/organization&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;developers&gt;</span>...<span class="nt">&lt;/developers&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;contributors&gt;</span>...<span class="nt">&lt;/contributors&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- Environment Settings --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;issueManagement&gt;</span>...<span class="nt">&lt;/issueManagement&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;ciManagement&gt;</span>...<span class="nt">&lt;/ciManagement&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;mailingLists&gt;</span>...<span class="nt">&lt;/mailingLists&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;scm&gt;</span>...<span class="nt">&lt;/scm&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;prerequisites&gt;</span>...<span class="nt">&lt;/prerequisites&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 发现依赖和扩展的远程仓库列表 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;repositories&gt;</span>...<span class="nt">&lt;/repositories&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;pluginRepositories&gt;</span>...<span class="nt">&lt;/pluginRepositories&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;distributionManagement&gt;</span>...<span class="nt">&lt;/distributionManagement&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;profiles&gt;</span>...<span class="nt">&lt;/profiles&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>pom.xml中描述符的根为<code>&lt;project&gt;</code>.</p>
<h2 id="maven坐标" data-numberify>Maven坐标<a class="anchor ms-1" href="#maven坐标"></a></h2>
<ul>
<li>Maven 中的坐标是资源的唯一标识.</li>
<li>使用坐标来<u>定义项目</u>或<u>引入项目中需要的依赖</u>.</li>
</ul>
<p>Maven坐标的主要组成 (在pom.xml文件中):</p>
<ul>
<li><code>&lt;groupId&gt;</code>: 公司或者组织的唯一标志. 配置时生成的路径也是由此生成. 如<code>com.linner.blog</code> (通常是域名反写), Maven会将该项目打成的jar包放本地路径：<code>/com/linner/blog</code>.</li>
<li><code>&lt;artifactId&gt;</code>: 当前项目的唯一ID (通常是模块名称). 一个groupId下面可能多个项目, 就是靠<code>&lt;artifactId&gt;</code>来区分.</li>
<li><code>&lt;version&gt;</code>: 本项目目前所处的版本号.</li>
</ul>
<p>Maven 中, 根据 <code>groupId</code>、<code>artifactId</code>、<code>version</code> 组合成 <code>groupId:artifactId:version</code> 来唯一识别一个 jar 包. 这三个标签构成了Maven坐标.</p>
<h2 id="其他基本配置" data-numberify>其他基本配置<a class="anchor ms-1" href="#其他基本配置"></a></h2>
<ul>
<li><code>&lt;modelVersion&gt;</code>: 指定pom.xml符合哪个版本的描述符. Maven2和3只能为<code>4.0.0</code>.</li>
<li><code>&lt;packaging&gt;</code>: 打包的机制. 有以下几种:
<ul>
<li>pom</li>
<li>jar &mdash; 默认值</li>
<li>maven-plugin</li>
<li>ejb</li>
<li>war</li>
<li>ear</li>
<li>rar</li>
<li>par</li>
</ul>
</li>
<li><code>&lt;dependencies&gt;</code>: 定义本项目的依赖关系.</li>
</ul>
<hr>
<h1 id="maven依赖管理" data-numberify>Maven依赖管理<a class="anchor ms-1" href="#maven依赖管理"></a></h1>
<p>依赖管理是指管理项目中所依赖的第三方资源 (jar包, 插件). 而Maven使用标准的<mark>坐标</mark>配置来管理各种依赖, 只需要简单的配置就可以完成依赖管理.</p>
<p>Maven的依赖资源是在pom.xml配置文件中的<code>&lt;dependencies&gt;</code>描述的. 其结构如下:</p>
<ul>
<li><code>&lt;project&gt;</code>
<ul>
<li>&hellip;</li>
<li><code>&lt;dependencies&gt;</code>
<ul>
<li><code>&lt;dependency&gt;</code>: 一个<code>&lt;dependency&gt;</code>代表一个依赖项.
<code>&lt;groupId&gt;</code>, <code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>的含义与<code>&lt;project&gt;</code>的子标签<code>&lt;groupId&gt;</code>, <code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>的含义相同.
<ul>
<li><code>&lt;groupId&gt;</code></li>
<li><code>&lt;artifactId&gt;</code></li>
<li><code>&lt;version&gt;</code></li>
<li><code>&lt;type&gt;</code>: 依赖的打包机制. 对应<code>&lt;packaging&gt;</code>的类型, 有pom, jar(默认), maven-plugin, ejb, war, ear, rar, par.</li>
<li><code>&lt;scope&gt;</code>: 任务的类路径 (编译和运行时, 测试等) 以及如何限制依赖关系的传递性.
<table>
<thead>
<tr>
<th style="text-align:center">scope取值</th>
<th style="text-align:center">有效范围(compile, runtime, test)</th>
<th style="text-align:center">依赖传递</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>compile</code></td>
<td style="text-align:center">all</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>provided</code></td>
<td style="text-align:center">compile, test</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center"><code>runtime</code></td>
<td style="text-align:center">runtime, test</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>test</code></td>
<td style="text-align:center">test</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center"><code>system</code></td>
<td style="text-align:center">compile, test</td>
<td style="text-align:center">是</td>
</tr>
</tbody>
</table>
</li>
<li><code>&lt;optional&gt;</code></li>
<li><code>&lt;exclusions&gt;</code>
<ul>
<li><code>&lt;exclusion&gt;</code>
<ul>
<li><code>&lt;groupId&gt;</code></li>
<li><code>&lt;artifactId&gt;</code></li>
</ul>
</li>
<li><code>&lt;exclusion&gt;</code>
<ul>
<li>&hellip;</li>
</ul>
</li>
<li>多个<code>&lt;exclusion&gt;</code>&hellip;</li>
</ul>
</li>
</ul>
</li>
<li>多个<code>&lt;dependency&gt;</code>&hellip;</li>
</ul>
</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<p><code>&lt;scope&gt;</code>取值说明:</p>
<hr>
<h1 id="maven常用命令" data-numberify>Maven常用命令<a class="anchor ms-1" href="#maven常用命令"></a></h1>
<ul>
<li><code>compile</code>: 编译</li>
<li><code>clean</code>: 清理</li>
<li><code>test</code>: 测试</li>
<li><code>package</code>: 打包</li>
<li><code>install</code>: 安装</li>
</ul>
<p>使用Maven命令需要先配置PATH, 然后在项目目录下执行.</p>
<p>例如项目路径为<code>~/project</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~/project
</span></span></code></pre></div><h2 id="编译" data-numberify>编译<a class="anchor ms-1" href="#编译"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn compile
</span></span></code></pre></div><p>第一次执行该命令, Maven会自动从仓库 (中央仓库或远程仓库, 介绍常用命令时, 如无特别指出, 仓库均指中央仓库或远程仓库) 下载编译所需的jar插件包. 然后在项目下会生成一个 <code>target</code> 目录. 编译后的字节码文件就放在该目录下.</p>
<h2 id="清理" data-numberify>清理<a class="anchor ms-1" href="#清理"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn clean
</span></span></code></pre></div><p>第一次执行该命令, Maven会从仓库下载清理所需要的jar插件包. 接着便使用插件清除项目下的<code>target</code>目录.</p>
<h2 id="打包" data-numberify>打包<a class="anchor ms-1" href="#打包"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn package
</span></span></code></pre></div><p>第一次执行该命令, Maven会从仓库下载打包所需要的jar插件包. 然后在项目的 <code>terget</code> 目录下生成一个jar包 (将当前项目打成的jar包).</p>
<h2 id="测试" data-numberify>测试<a class="anchor ms-1" href="#测试"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn <span class="nb">test</span>
</span></span></code></pre></div><p>该命令会执行所有的测试代码, 即<code>project/scr/text</code>下的代码.</p>
<h2 id="安装" data-numberify>安装<a class="anchor ms-1" href="#安装"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn install
</span></span></code></pre></div><p>该命令会将当前项目打成jar包, 并安装到本地仓库. 执行完上述命令后可以到本地仓库查看结果. 仓库中的路径为pom.xml文件中<code>&lt;groupId&gt;</code>相应的路径, 生成的jar包名为<code>&lt;artifactId&gt;</code>和<code>&lt;version&gt;</code>组成的内容.</p>
<hr>
<h1 id="maven生命周期" data-numberify>Maven生命周期<a class="anchor ms-1" href="#maven生命周期"></a></h1>
<p>Maven 构建项目生命周期描述的是一次构建过程经历经历了多少个事件.</p>
<p>Maven对项目构建的生命周期划分为3套:</p>
<ul>
<li>clean: 清理工作.</li>
<li>default: 核心工作, 例如编译, 测试, 打包, 安装等.</li>
<li>site:  产生报告, 发布站点等. 这套声明周期一般不会使用.</li>
</ul>
<p>同一套生命周期内, 执行后边的命令, 前面的所有命令会自动执行.</p>
<p>default 生命周期如下:</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/maven-base/1662167229604.png" loading="lazy" width="388" height="83" />
</picture>

</p>
<p>如执行<code>install</code>命令, maven会按照上图中从左到右的顺序先执行<code>compile</code>, 再执行<code>test</code>, <code>package</code>, 最后执行<code>install</code>; 如果执行<code>package</code>, 除了<code>install</code>命令, 其它命令按照上图左到右顺序执行.</p>
<blockquote>
<p>默认的生命周期其实有对应的很多命令, 上图中只展示了常用的.</p>
</blockquote>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

