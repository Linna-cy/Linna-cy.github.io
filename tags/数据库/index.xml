<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>数据库 on Linner&#39;s Blog</title>
    <link>/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on Linner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020-2023 Linner. All Rights Reserved.
</copyright>
    <lastBuildDate>Fri, 28 Jul 2023 07:20:31 +0000</lastBuildDate><atom:link href="/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL 分库搭建</title>
      <link>/docs/spring/springboot/mysql-sharding/</link>
      <pubDate>Fri, 28 Jul 2023 07:20:31 +0000</pubDate>
      
      <guid>/docs/spring/springboot/mysql-sharding/</guid>
      <description><![CDATA[搭建MySQL主从数据库，首先需要满足以下条件： 至少两台以上服务器（可用虚拟机模拟）； 两台服务器中MySQL的版本一致。 最好是使用刚安装的M]]></description>
      <content:encoded><![CDATA[<p>搭建MySQL主从数据库，首先需要满足以下条件：</p>
<ul>
<li>至少两台以上服务器（可用虚拟机模拟）；</li>
<li>两台服务器中MySQL的版本一致。</li>
</ul>
<blockquote>
<p>最好是使用刚安装的MySQL并且没有任何修改。</p>
<p>如果要配置从库的MySQL服务器中有数据库存在（或者是要给主库配置新的从库），还需要将该服务器中数据库的结构及其数据导出，并且导入到从库服务器中，保持主库和从库的状态一致（非常重要！！！）。</p>
</blockquote>
<hr>
<h1 id="修改数据库配置" data-numberify>修改数据库配置<a class="anchor ms-1" href="#修改数据库配置"></a></h1>
<p>假设你已经满足了以上条件，准备开始配置主库。</p>
<p>修改主库的配置文件<code>/etc/my.cnf</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vim /etc/my.cnf
</span></span></code></pre></div><p>增加（修改）以下内容：</p>
<pre tabindex="0"><code>[mysqld]
# 主库Master
log-bin=mysql-bin   # [必须] 启用二进制日志
server-id=100       # [必须] 服务器唯一ID（默认是1，一般取IP最后一段）
</code></pre><p>接着修改从库配置文件<code>/etc/my.cnf</code>（方法与上类似）：</p>
<pre tabindex="0"><code>[mysqld]
# 从库Slave
log-bin=mysql-bin   # [可选] 启用二进制日志
server-id=101       # [必须] 服务器唯一ID
</code></pre><p>分别重启两台服务器的MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">service mysqld restart<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 或</span>
</span></span><span class="line"><span class="cl">systemctl restart mysql<span class="p">;</span>
</span></span></code></pre></div><hr>
<h1 id="授权" data-numberify>授权<a class="anchor ms-1" href="#授权"></a></h1>
<p>在主服务器上建立帐户并给从库授权：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mysql -uroot -p
</span></span><span class="line"><span class="cl"><span class="c1"># 登录你的主服务器MySQL</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">GRANT</span><span class="w"> </span><span class="n">REPLICATION</span><span class="w"> </span><span class="n">SLAVE</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="o">*</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s1">&#39;mysync&#39;</span><span class="o">@</span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="n">IDENTIFIED</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="s1">&#39;123456&#39;</span><span class="p">;</span><span class="w">  </span><span class="c1">-- 一般不用root账号进行授权
</span></span></span></code></pre></div><ul>
<li><code>%</code>：表示所有客户端都可连接，只要账号、密码正确即可。可以使用具体的IP地址代替以加强安全。</li>
<li><code>mysync</code>：表示使用客户端上<code>mysync</code>这个账号进行登录。</li>
<li><code>IDENTIFIED BY '123456'</code>：表示使用<code>123456</code>作为密码登录。</li>
</ul>
<p>授权成功后，使用以下命令查询Master的状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SHOW</span><span class="w"> </span><span class="n">MASTER</span><span class="w"> </span><span class="n">STATUS</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>会返回如下信息：</p>
<pre tabindex="0"><code>+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.000013 |      157 |              |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)
</code></pre><blockquote>
<p>注：执行完成后不要再操作主服务器MySQL，防止主服务器状态值变化。</p>
</blockquote>
<p>配置从服务器Slave：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mysql -uroot -p
</span></span><span class="line"><span class="cl"><span class="c1"># 登录你的从服务器MySQL</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">CHANGE</span><span class="w"> </span><span class="n">MASTER</span><span class="w"> </span><span class="k">TO</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">master_host</span><span class="o">=</span><span class="s1">&#39;192.168.145.100&#39;</span><span class="p">,</span><span class="w">      </span><span class="c1">-- 主库IP地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">master_port</span><span class="o">=</span><span class="mi">3306</span><span class="p">,</span><span class="w">                   </span><span class="c1">-- 主库MySQL端口号（默认就是3306，可以移除）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">master_user</span><span class="o">=</span><span class="s1">&#39;mysync&#39;</span><span class="p">,</span><span class="w">               </span><span class="c1">-- 使用主库的mysync用户登录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">master_password</span><span class="o">=</span><span class="s1">&#39;123456&#39;</span><span class="p">,</span><span class="w">           </span><span class="c1">-- 使用123456作为登录密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">master_log_file</span><span class="o">=</span><span class="s1">&#39;mysql-bin.000013&#39;</span><span class="p">,</span><span class="w"> </span><span class="c1">-- 主库的日志文件（与上方查询的结果要一致）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">master_log_pos</span><span class="o">=</span><span class="mi">157</span><span class="p">;</span><span class="w">                 </span><span class="c1">-- 主库的Position（与上方查询的结果要一致）
</span></span></span></code></pre></div><p>查询从库复制功能状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SHOW</span><span class="w"> </span><span class="n">SLAVE</span><span class="w"> </span><span class="n">STATUS</span><span class="err">\</span><span class="k">G</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>注：查询从库复制功能状态时，不要直接使用<code>SHOW SLAVE STATUS;</code>查询。这样查询的结果是一张用字符组织起来的表（十分冗长）。使用<code>SHOW SLAVE STATUS\G</code>输出更加易读。</p>
</blockquote>
<p>如果查询结果中有以下内容，说明配置成功：</p>
<pre tabindex="0"><code>Slave_IO_Running: Yes
Slave_SQL_Running: Yes
</code></pre><hr>
<h1 id="使用-docker-搭建" data-numberify>使用 Docker 搭建<a class="anchor ms-1" href="#使用-docker-搭建"></a></h1>
<p>如果想要在一台主机上模拟MySQL分库。可以使用Docker。</p>
<p>拉取MySQL镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker pull mysql
</span></span></code></pre></div><blockquote>
<p>可以根据你的需要指定MySQL镜像的版本，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker pull mysql:5.7
</span></span></code></pre></div></blockquote>
<p>在Docker中，两个镜像相互连接需要使用Docker Network，我们可以创建一个让MySQL可以互相访问的Network：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker network create mysql-network
</span></span></code></pre></div><p>首先创建一个MySQL容器，用于获取它的配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ docker run -id --name mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">TZ</span><span class="o">=</span>Asia/Shanghai <span class="se">\ </span>                  <span class="c1"># 设置时区</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span><span class="m">123456</span> <span class="se">\ </span>        <span class="c1"># 设置root用户的密码</span>
</span></span><span class="line"><span class="cl">    mysql <span class="se">\ </span>                                <span class="c1"># 创建时使用的镜像</span>
</span></span><span class="line"><span class="cl">    --character-set-server<span class="o">=</span>utf8mb4 <span class="se">\ </span>       <span class="c1"># 设置字符集</span>
</span></span><span class="line"><span class="cl">    --collation-server<span class="o">=</span>utf8mb4_general_ci
</span></span><span class="line"><span class="cl">$ docker cp mysql:/etc/my.cnf /home/mysql/my.cnf <span class="c1"># 将mysql容器中的/etc/my.cnf复制到本地</span>
</span></span><span class="line"><span class="cl">$ mkdir /home/mysql/master
</span></span><span class="line"><span class="cl">$ mkdir /home/mysql/slave_1
</span></span><span class="line"><span class="cl">$ cp /home/mysql/my.cnf /home/mysql/master
</span></span><span class="line"><span class="cl">$ cp /home/mysql/my.cnf /home/mysql/slave_1
</span></span></code></pre></div><p>创建Master容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -id --name mysql-master <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 3306:3306 <span class="se">\ </span>                         <span class="c1"># 端口映射</span>
</span></span><span class="line"><span class="cl">    -v /home/mysql/master/data:/var/lib/mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/mysql/master/conf:/etc/mysql/conf.d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/mysql/master/log:/var/log/mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/mysql/master/my.cnf:/etc/my.cnf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network mysql-network <span class="se">\ </span>              <span class="c1"># 指定Network</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">TZ</span><span class="o">=</span>Asia/Shanghai <span class="se">\ </span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span><span class="m">123456</span> <span class="se">\ </span>
</span></span><span class="line"><span class="cl">    mysql <span class="se">\ </span>
</span></span><span class="line"><span class="cl">    --character-set-server<span class="o">=</span>utf8mb4 <span class="se">\ </span>
</span></span><span class="line"><span class="cl">    --collation-server<span class="o">=</span>utf8mb4_general_ci
</span></span></code></pre></div><blockquote>
<p>注：上方命令在创建容器时，将容器中的<code>/etc/my.cnf</code>挂载到本地的<code>/home/mysql/master/my.cnf</code>文件上。在创建容器前需确保<code>/home/mysql/master</code>目录中有<code>my.cnf</code>这个文件。在挂载成功后，可以直接修改本地的<code>my.cnf</code>文件。</p>
</blockquote>
<p>测试连接Master：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker <span class="nb">exec</span> -ti mysql-master mysql -uroot -p123456
</span></span></code></pre></div><p>创建Slave容器的步骤与Master类似：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ docker run -id --name mysql-slave-1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 3316:3306 <span class="se">\ </span>                         <span class="c1"># 端口映射（注意不要端口冲突）</span>
</span></span><span class="line"><span class="cl">    -v /home/mysql/slave_1/data:/var/lib/mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/mysql/slave_1/conf:/etc/mysql/conf.d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/mysql/slave_1/log:/var/log/mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/mysql/slave_1/my.cnf:/etc/my.cnf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network mysql-network <span class="se">\ </span>              <span class="c1"># 指定Network</span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">TZ</span><span class="o">=</span>Asia/Shanghai <span class="se">\ </span>
</span></span><span class="line"><span class="cl">    -e <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span><span class="m">123456</span> <span class="se">\ </span>
</span></span><span class="line"><span class="cl">    mysql <span class="se">\ </span>
</span></span><span class="line"><span class="cl">    --character-set-server<span class="o">=</span>utf8mb4 <span class="se">\ </span>
</span></span><span class="line"><span class="cl">    --collation-server<span class="o">=</span>utf8mb4_general_ci
</span></span><span class="line"><span class="cl">$ docker <span class="nb">exec</span> -ti mysql-slave-1 mysql -uroot -p123456
</span></span></code></pre></div><p>最后按照上方配置和授权的步骤即可搭建成功。</p>
<hr>
<h1 id="读写分离" data-numberify>读写分离<a class="anchor ms-1" href="#读写分离"></a></h1>
<p>在一般的生产环境中，使用一台数据服务器进行写操作（一般很少进行写操作，所以一台就够了）。这台进行写操作的服务器就是主库。进行读操作则可以根据网站的浏览量配置对应数量的专门用于读取数据的数据服务器。这些进行读操作的服务器就是从库，所以需要配置多台从服务器。</p>
<hr>
<h1 id="使用过程中的一些问题" data-numberify>使用过程中的一些问题<a class="anchor ms-1" href="#使用过程中的一些问题"></a></h1>
<p>查询从库的状态，从库忽然<code>Slave_SQL_Running: No</code>。这是运行过程中的同步故障。出现该问题原因可能有：</p>
<ul>
<li>程序可能在Slave上进行了写操作（应该极力避免此种情况发生）。</li>
<li>可能是Slave机器重起后，事务回滚造成的（一般是这种情况）。</li>
</ul>
<p>解决事务回滚造成的<code>Slave_SQL_Running: No</code>，进入MySQL，运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="n">STOP</span><span class="w"> </span><span class="n">SLAVE</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SET</span><span class="w"> </span><span class="k">GLOBAL</span><span class="w"> </span><span class="n">SQL_SLAVE_SKIP_COUNTER</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">START</span><span class="w"> </span><span class="n">SLAVE</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>如果还是<code>Slave_SQL_Running: No</code>，有可能是<code>CHANGE MASTER</code>时信息出现错误。可以回到主服务器中运行<code>SHOW MASTER STATUS;</code>查看日志文件和Position是否与从库的一致。然后再在从库中重新<code>CHANGE MASTER</code>。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>软考图类汇总篇</title>
      <link>/docs/ruan-she/all-graphs/</link>
      <pubDate>Sat, 20 May 2023 13:29:14 +0800</pubDate>
      
      <guid>/docs/ruan-she/all-graphs/</guid>
      <description><![CDATA[数据流图（DFD） 数据流图是在逻辑上描述系统的功能、输入、输出和数据存储等。 数据流图中的基本图形元素包括： 基本元素 图形表示 数据流 加工 数据存储]]></description>
      <content:encoded><![CDATA[<h1 id="数据流图dfd" data-numberify>数据流图（DFD）<a class="anchor ms-1" href="#数据流图dfd"></a></h1>
<p>数据流图是在逻辑上描述系统的功能、输入、输出和数据存储等。</p>
<p>数据流图中的基本图形元素包括：</p>
<table>
<thead>
<tr>
<th style="text-align:center">基本元素</th>
<th style="text-align:center">图形表示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">数据流</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="数据流" src="/docs/ruan-she/all-graphs/uTools_1683518468182.png" loading="lazy" width="193" height="71" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">加工</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="加工" src="/docs/ruan-she/all-graphs/1683518239889.png" loading="lazy" width="282" height="105" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">数据存储</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="数据存储" src="/docs/ruan-she/all-graphs/uTools_1683517944926.png" loading="lazy" width="350" height="79" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">外部实体</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="外部实体" src="/docs/ruan-she/all-graphs/uTools_1683517896893.png" loading="lazy" width="118" height="79" />
</picture>

</td>
</tr>
</tbody>
</table>
<p>软件系统内部的<strong>数据处理模型</strong>，使用<u>数据流</u>、<u>加工</u>和<u>数据存储</u>构建。</p>
<ul>
<li>
<p><strong>数据流</strong>（Data Flow）：由一组固定成分的数据组成，表示数据的流向。</p>
<p><picture><img class="img-fluid " alt="数据流" src="/docs/ruan-she/all-graphs/uTools_1683518468182.png" loading="lazy" width="193" height="71" />
</picture>

</p>
<p>在DFD种，数据流的流向由以下几种：</p>
<ul>
<li>从<u>加工</u>流向另一个<u>加工</u>；</li>
<li>从<u>加工</u>流向<u>数据存储</u>（写）；</li>
<li>从<u>数据存储</u>流向<u>加工</u>（读）；</li>
<li>从<u>外部实体</u>流向<u>加工</u>（输入）；</li>
<li>从<u>加工</u>流向<u>外部实体</u>（输出）。</li>
</ul>
<p>即数据流的<u>起点或终点必须至少有一个是加工</u>。</p>
<p>除了与数据存储有关的数据流（流向数据存储或从数据存储流出），DFD中的每个数据流都必须用一个定义明确的名字表示。</p>
</li>
<li>
<p><strong>加工</strong>（Process）：加工描述了输入数据流到输出数据流之间的变换，也就是<u>输入数据流经过什么处理后变成了输出数据流</u>。</p>
<p><picture><img class="img-fluid " alt="加工" src="/docs/ruan-she/all-graphs/1683518239889.png" loading="lazy" width="282" height="105" />
</picture>

</p>
<p>每个加工都有一个名字和编号。</p>
<p>一个加工可以有多个输入数据流和多个输出数据流，但<u>至少有一个输入数据流和一个输出数据流</u>。</p>
<p>数据流图中常见的3种错误如下所示：</p>
<ul>
<li>
<p><strong>黑洞</strong>：加工只有输入，没有输出。</p>
<p>如下图加工1。</p>
</li>
<li>
<p><strong>白洞</strong>：加工只有输出但没有输入。</p>
<p>如下图加工2。</p>
</li>
<li>
<p><strong>灰洞</strong>：加工中输入数据不足以产生输出数据。</p>
<p>有几种可能的原因：</p>
<ul>
<li>一个错误的命名过程；</li>
<li>错误命名的输入或输出；</li>
<li>不完全的事实。</li>
</ul>
<p>如下图加工3。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="数据流图中常见错误" src="/docs/ruan-she/all-graphs/1683528176745.png" loading="lazy" width="793" height="542" />
</picture>

</p>
</li>
<li>
<p><strong>数据存储</strong>（Data Store）：存储和提供数据。</p>
<p><picture><img class="img-fluid " alt="数据存储" src="/docs/ruan-she/all-graphs/uTools_1683517944926.png" loading="lazy" width="350" height="79" />
</picture>

</p>
<p>每个数据存储都有一个定义明确的名字标识。</p>
<p>数据存储可以：</p>
<ul>
<li>存储加工的输出数据：数据流流入数据存储，表示数据的写入操作；</li>
<li>提供加工的输入数据：数据流从数据存储流出，表示数据的读操作。</li>
<li>双向箭头的数据流指向数据存储，表示对数据的修改。</li>
</ul>
<p>DFD中的数据存储在具体实现时可以用以下方式实现：</p>
<ul>
<li>文件系统实现；</li>
<li>数据库系统实现。</li>
</ul>
<p>数据存储的存储介质可以是：</p>
<ul>
<li>磁盘、</li>
<li>磁带、</li>
<li>其他存储介质。</li>
</ul>
</li>
<li>
<p><strong>外部实体</strong>（External Agent，外部主体）：指<u>存在于软件系统之外的人员、组织、物体或外部系统</u>，它指出系统所需数据的<u>发源地（源）</u>和<u>系统所产生的数据的归宿地（宿）</u>。</p>
<p><picture><img class="img-fluid " alt="外部实体" src="/docs/ruan-she/all-graphs/uTools_1683517896893.png" loading="lazy" width="118" height="79" />
</picture>

</p>
<p>例如：</p>
<ul>
<li>人员：学生、老师、员工、主观、医生、客户……</li>
<li>组织：供应商、采购部门……</li>
<li>物体：传感器、控制器、单车、车辆……</li>
<li>外部系统：支付系统、车辆交易系统、库存管理系统、道闸控制系统……</li>
</ul>
<p>在许多系统中，某个源和某个宿可以是同一个人员、组织、物体或外部系统，此时，在DFD中可以用同一个符号表示：</p>
<ul>
<li>当数据流从该符号流出时，表示它是源；</li>
<li>当数据流流向该符号时，表示它是宿；</li>
<li>当两者皆有时，表示它既是源又是宿。</li>
</ul>
<p>外部实体表示存在于系统之外的对象，用来帮助用户理解系统数据的来源和去向。</p>
</li>
</ul>
<p>数据流图必须确保：</p>
<ul>
<li>数据流的起点或终点必须至少有一个是加工。</li>
<li>加工至少有一个输入数据流和一个输出数据流。</li>
</ul>
<p>分层数据流图：</p>
<ol>
<li>
<p>顶层图：描述系统的输入和输出。</p>
<p>即描述系统从哪些外部实体接受数据流，以及系统发送数据流到哪些外部实体。</p>
<ul>
<li>顶层图只有一个加工，即待开发的软件系统。</li>
<li>顶层图中的数据流就是系统的输入/输出信息。</li>
<li>顶层图中通常没有数据存储。</li>
</ul>
</li>
<li>
<p>0层图：分解顶层图的加工。</p>
</li>
<li>
<p>再分解：将DFD中某些比较复杂的加工再次分解成一张DFD子图。</p>
</li>
</ol>
<hr>
<h1 id="实体联系图e-r-图erd" data-numberify>实体联系图（E-R 图，ERD）<a class="anchor ms-1" href="#实体联系图e-r-图erd"></a></h1>
<p>E-R图有以下几个成分（包含扩充的E-R模型成分）：</p>
<p><picture><img class="img-fluid " alt="E-R图中的主要构件" src="/docs/ruan-she/all-graphs/uTools_1682508598814.png" loading="lazy" width="1035" height="391" />
</picture>

</p>
<ul>
<li>
<p><strong>实体</strong>：用<strong>矩形</strong>表示。</p>
<ul>
<li>
<p><strong>弱实体</strong>：使用<strong>双线矩形框</strong>表示。将需要依赖其他实体存在的实体。</p>
<p>实体间的所有（Ownership，拥有）关系代表一个实体对另一些实体具有很强的依赖关系，即一个实体的存在必须以另一个实体为前提。</p>
<p>例如职工与家属的联系，家属总是属于某职工的（在关系模式中需要依赖职工而存在），所以家属是弱实体。</p>
</li>
<li>
<p><strong>特殊化</strong>：将一个实体集<u>按照某些特性区分为几个<strong>子实体</strong></u>。这种从普遍到特殊的过程即为特殊化。</p>
<p>子实体的图形表示如下：</p>
<p><picture><img class="img-fluid " alt="子实体" src="/docs/ruan-she/all-graphs/uTools_1684564987147.png" loading="lazy" width="256" height="145" />
</picture>

</p>
<p>子实体由称为子类，它会有一个超类，并且能继承超类的属性，超类的属性是实体集中所有子实体的相同属性。</p>
</li>
</ul>
</li>
<li>
<p><strong>联系</strong>：用<strong>棱形</strong>表示，并用无向边分别与有关实体连接起来，同时在无向边标注联系的类型。</p>
<p>联系的类型有两种：</p>
<ul>
<li>
<p>两个实体间的联系：</p>
<ul>
<li>$1:1$：一对一联系；</li>
<li>$1:n$：一对多联系；</li>
<li>$m:n$：多对多联系。</li>
</ul>
</li>
<li>
<p>两个以上实体间的联系：</p>
<p>例如3个实体间的联系有：</p>
<ul>
<li>$1:1:1$</li>
<li>$1:1:n$</li>
<li>$1ⓜ️n$</li>
<li>$rⓜ️n$</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>属性</strong>：用<strong>椭圆形</strong>表示，并用无向边将其与相应的实体连接起来</p>
<p>E-R模型中的属性有以下分类：</p>
<ul>
<li>简单属性：是原子的、不可再分的。</li>
<li>复合属性：可以细分为更小的部分。</li>
<li>单值属性：一个属性对应一个值。</li>
<li>多值属性：一个属性对应一组值。</li>
<li>NULL属性：实体在某个属性上没有值或属性值未知时，使用NULL值表示。</li>
<li>派生属性：派生属性可以从其他属性得来（通过运算等方式求出）。</li>
</ul>
</li>
</ul>
<h2 id="概念结构模型合并分-e-r-图" data-numberify>概念结构模型（合并分 E-R 图）<a class="anchor ms-1" href="#概念结构模型合并分-e-r-图"></a></h2>
<p>建立概念结构模型的步骤如下：</p>
<ol>
<li>
<p>选择局部应用：选择适当层次的数据流图，让这一层的每一部分对应一个局部应用，实现某一项功能。</p>
</li>
<li>
<p>逐一设计分E-R图。</p>
</li>
<li>
<p>E-R图合并：</p>
<p>合并时需要考虑各分E-R图之间的冲突：</p>
<ul>
<li><strong>属性冲突</strong>：同一属性在不同的分E-R图上的属性类型、取值范围和数据单位等可能会不一致。</li>
<li><strong>命名冲突</strong>：相同意义的属性在不同的分E-R图上可能会有不同的命名。</li>
<li><strong>结构冲突</strong>：同一实体在不同的分E-R图中可能会有不同的属性；同一对象在某一分E-R图中被抽象为实体，而在另一分E-R图中又可能被抽象为属性，反之亦然。</li>
</ul>
</li>
</ol>
<h2 id="转换关系模式" data-numberify>转换关系模式<a class="anchor ms-1" href="#转换关系模式"></a></h2>
<ol>
<li>
<p>实体向关系模式的转换：</p>
<p>将E-R图中的实体逐一转换成为一个关系模式：</p>
<ul>
<li>实体名：对应关系模式的名称；</li>
<li>实体的属性：转换成关系模式的属性；</li>
<li>实体标识符：关系的码（键）。</li>
</ul>
<p>超类和子类的转换：超类和子类定义为两个关系模式，将超类的主键加到子类中。</p>
</li>
<li>
<p>联系向关系模式的转换：</p>
<ul>
<li>
<p>一对一联系的转换：</p>
<p>有两种方式：</p>
<ul>
<li>
<p>方式1：将联系转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性包括该联系所关联的两个实体的码及联系的属性，关系的码取自任一方实体的码。</p>
<p>那么一个一对一联系需要转换成三个关系模式。</p>
</li>
<li>
<p>方式2（一般使用该方式）：将联系归并到关联的两个实体的任一方，给待归并的一方实体属性集中增加另一方实体的码和该联系的属性即可，归并后的实体码保持不变。</p>
<p>一个一对一联系仅需转换成两个关系模式。</p>
</li>
</ul>
<p>例如：</p>
<p><picture><img class="img-fluid " alt="联系向关系模式的转换示例" src="/docs/ruan-she/all-graphs/uTools_1682562445900.png" loading="lazy" width="304" height="358" />
</picture>

</p>
<ul>
<li>
<p>方式1：</p>
<p>厂长（<strong>姓名</strong>，性别，年龄）</p>
<p>工厂（<strong>厂号</strong>，厂名，地点）</p>
<p>管理（（厂长）<strong>姓名</strong>，厂号，任期）</p>
<blockquote>
<p>粗体代表该关系模式的码。管理的码可以为姓名或厂号。</p>
</blockquote>
</li>
<li>
<p>方式2：</p>
<p>厂长（姓名，性别，年龄）</p>
<p>工厂（厂号，厂名，地点，（厂长）姓名，任期）</p>
</li>
</ul>
</li>
<li>
<p>一对多联系的转换：</p>
<p>两种方式：</p>
<ul>
<li>方式1：将联系转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性取该联系所关联的两个实体的码及联系的属性，<u>关系的码是多方实体的码</u>；</li>
<li>方式2（一般使用该方式）：将联系<u>归并到关联的两个实体的多方</u>，给待归并的多方实体属性集中增加一方实体的码和该联系的属性即可，归并后的多方实体码保持不变。</li>
</ul>
<p>例如：</p>
<p><picture><img class="img-fluid " alt="一对多联系转换的例子" src="/docs/ruan-she/all-graphs/uTools_1682563544291.png" loading="lazy" width="315" height="361" />
</picture>

</p>
<ul>
<li>
<p>方式1:</p>
<p>仓库（<strong>仓库号</strong>，地点，面积）</p>
<p>商品（<strong>货号</strong>，商品名，价格）</p>
<p>仓储（<strong>货号</strong>，仓库号，数量）</p>
</li>
<li>
<p>方式2：</p>
<p>仓库（<strong>仓库号</strong>，地点，面积）</p>
<p>商品（<strong>货号</strong>，商品名，价格，仓库号，数量）</p>
</li>
</ul>
</li>
<li>
<p>多对多联系的转换：</p>
<p>多对多联系只能转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性取该联系所关联的两个多方实体的码及联系的属性，关系的码是多方实体的码构成的属性组。</p>
<p>例如：</p>
<p><picture><img class="img-fluid " alt="多对多联系转换的示例" src="/docs/ruan-she/all-graphs/uTools_1682564018777.png" loading="lazy" width="327" height="373" />
</picture>

</p>
<p>转换成：</p>
<p>学生（<strong>学号</strong>，姓名，性别，年龄）</p>
<p>课程（<strong>课程号</strong>，课程名，学时）</p>
<p>选修（<strong>（学号，课程号）</strong>，成绩）</p>
</li>
</ul>
</li>
</ol>
<hr>
<h1 id="uml" data-numberify>UML<a class="anchor ms-1" href="#uml"></a></h1>
<p>UML（Unified Modeling Language，统一建模语言）是面向对象软件的标准化建模语言。</p>
<p>UML中包含3种基本构造块：</p>
<ul>
<li>事物；</li>
<li>关系；</li>
<li>图。</li>
</ul>
<h2 id="事物" data-numberify>事物<a class="anchor ms-1" href="#事物"></a></h2>
<p>UML中有4种事物：</p>
<ul>
<li>
<p><strong>结构事物</strong>（Structural Thing）：模型的<u>静态部分</u>。</p>
<p><picture><img class="img-fluid " alt="结构事物的图形表示" src="/docs/ruan-she/all-graphs/uTools_1682055522161.png" loading="lazy" width="708" height="294" />
</picture>

</p>
</li>
<li>
<p><strong>行为事物</strong>（Behavior Thing）：模型的<u>动态部分</u>。</p>
<p><picture><img class="img-fluid " alt="行为事物的图形表示" src="/docs/ruan-she/all-graphs/uTools_1682055712246.png" loading="lazy" width="621" height="133" />
</picture>

</p>
</li>
<li>
<p>分组事物（Grouping Thing）：模型的<u>组织部分</u>。</p>
</li>
<li>
<p>注释事物（Annotational Thing）：模型的<u>解释部分</u>。</p>
</li>
</ul>
<h2 id="关系" data-numberify>关系<a class="anchor ms-1" href="#关系"></a></h2>
<p>UML中有4种关系，这4种关系是UML模型中可以包含的基本关系事物：</p>
<ul>
<li>
<p><strong>依赖</strong>（Dependency）：是<u>两个事物间的语义关系，其中一个事物（<strong>独立事物</strong>）发生变化会影响另一个事物（<strong>依赖事物</strong>）的语义</u>。</p>
<p>在图形上，把一个依赖画成一条<u>可能有方向的虚线</u>，如图：</p>
<p><picture><img class="img-fluid " alt="依赖的图形表示" src="/docs/ruan-she/all-graphs/uTools_1682057108089.png" loading="lazy" width="200" height="48" />
</picture>

</p>
<p>依赖有偶然性和临时性，即需要的时候依赖，不需要的时候不依赖。</p>
</li>
<li>
<p><strong>关联</strong>（Association）：是一种<u>结构关系</u>，它描述了一组链，<u>链是对象之间的连接</u>。</p>
<p>关联使用<u>实线</u>表示，在关联上可以标注重复度（Multiplicity）和角色（Role）。</p>
<p>描述了<u>整体和部分</u>间的结构关系的特殊类型的关联：</p>
<ul>
<li>
<p><strong>聚集</strong>（Aggregation，聚合）：<u>部分和整体的生命周期不一致</u>，整体消失了，部分仍然存在，<u>部分可以脱离整体存在</u>。</p>
<p>使用一端带<u>空心菱形</u>的实线表示。</p>
</li>
<li>
<p><strong>组合</strong>：<u>部分和整体的生命周期一致</u>，整体消失了，部分也消失了，<u>部分不可以脱离整体而存在</u>。</p>
<p>使用一端带<u>实心菱形</u>的实线表示。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="关联和聚集的图形化表示" src="/docs/ruan-she/all-graphs/1682057458153.png" loading="lazy" width="408" height="101" />
</picture>

</p>
<blockquote>
<p>聚合和组合中，带菱形的一端指向整体，另一端指向部分。</p>
<p>关联的关系强度比依赖的关系强度要强一点。</p>
</blockquote>
<ul>
<li>
<p>单向关联：用<u>带箭头实线</u>表示。</p>
</li>
<li>
<p>多重度：</p>
<p>进行面向对象设计时，类图中可以展现类之间的关联关系，还可以在类图中图示<u>关联中的数量关系</u>，即多重度。表示数量关系时，<u>用多重度说明数量或数量范围</u>，<u>表示有多少个实例（对象）能被连接起来</u>，即<u>一个类的实例能够与另一个类的多少个实例相关联</u>。</p>
</li>
<li>
<p>关联类：</p>
<p>当两个类之间的关联的重复度是多对多时，需要借助额外的属性来帮助表达它们之间的关系，而这个属性就需要定义在一个新的关联类中。关联类记录了这两个类之间的关联信息。关联中这些额外的属性用一条<u>垂直于关联的实线</u>表示，实线的一段连接接到关联的实线上，另一端指向这些属性。</p>
</li>
</ul>
</li>
<li>
<p><strong>泛化</strong>（Generalization）：是一种特殊/一般关系，<u>特殊元素（子元素）的对象可替代一般元素（父元素）的对象</u>。用这种方法，<u>子元素共享了父元素的结构和行为</u>。</p>
<p>在图形上，把一个泛化关系画成一条<u>带有空心箭头的实线</u>，它指向父元素：</p>
<p><picture><img class="img-fluid " alt="泛化的图形表示" src="/docs/ruan-she/all-graphs/uTools_1682057764410.png" loading="lazy" width="162" height="53" />
</picture>

</p>
</li>
<li>
<p><strong>实现</strong>（Realization）：是<u>类元之间的语义关系，其中一个类元指定了由另一个类元保证执行的契约</u>。</p>
<p>在图形上，把一个实现关系画成一条<u>带有空心箭头的虚线</u>，箭头指向模板类，另一端于实现类连接。</p>
<p><picture><img class="img-fluid " alt="实现的图形化表示" src="/docs/ruan-she/all-graphs/uTools_1682058026631.png" loading="lazy" width="167" height="61" />
</picture>

</p>
</li>
</ul>
<h2 id="uml图" data-numberify>UML图<a class="anchor ms-1" href="#uml图"></a></h2>
<h3 id="类图" data-numberify>类图<a class="anchor ms-1" href="#类图"></a></h3>
<p>类图（Class Diagram）<u>展现了一组对象、接口、协作和它们之间的关系</u>。在面向对象系统的建模中<u>最常见的图就是类图</u>。类图给出<u>系统的静态设计视图</u>。</p>
<p>类图中通常包括下述内容：</p>
<ul>
<li>
<p>类：</p>
<p><picture><img class="img-fluid " alt="类的图形表示" src="/docs/ruan-she/all-graphs/uTools_1684650129674.png" loading="lazy" width="142" height="139" />
</picture>

</p>
<p>类中的方法和属性前面有以下三种修饰符：</p>
<table>
<thead>
<tr>
<th style="text-align:center">修饰符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>+</code></td>
<td style="text-align:center"><code>public</code> 公有的</td>
</tr>
<tr>
<td style="text-align:center"><code>-</code></td>
<td style="text-align:center"><code>private</code> 私有的</td>
</tr>
<tr>
<td style="text-align:center"><code>#</code></td>
<td style="text-align:center"><code>protected</code> 受保护的</td>
</tr>
<tr>
<td style="text-align:center"><code>~</code></td>
<td style="text-align:center"><code>package</code> 包的</td>
</tr>
</tbody>
</table>
<p>例如：</p>
  <table style="width: 200px; margin: auto;">
      <tr><th>Student</th></tr>
      <tr>
      <td>
      <p>
          <code>- id&nbsp;&nbsp;&nbsp;:&nbsp;int</code>
          <br>
          <code>+ name&nbsp;:&nbsp;String</code>
          <br>
          <code>+ age&nbsp;&nbsp;:&nbsp;int</code>
      </p>
      </td>
      </tr>
      <tr>
      <td>
      <p>
          <code>+ getId()&nbsp;:&nbsp;int</code>
      </p>
      </td>
      </tr>
  </table>
</li>
<li>
<p>接口：</p>
<p><picture><img class="img-fluid " alt="接口的图形表示" src="/docs/ruan-she/all-graphs/uTools_1684570786524.png" loading="lazy" width="135" height="74" />
</picture>

</p>
</li>
<li>
<p>协作：</p>
<p><picture><img class="img-fluid " alt="协作的图形表示" src="/docs/ruan-she/all-graphs/uTools_1684570820946.png" loading="lazy" width="107" height="67" />
</picture>

</p>
</li>
<li>
<p>关系：</p>
<p><picture><img class="img-fluid " alt="依赖的图形表示" src="/docs/ruan-she/all-graphs/uTools_1682057108089.png" loading="lazy" width="200" height="48" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="关联图形化表示" src="/docs/ruan-she/all-graphs/1682057458153.png" loading="lazy" width="408" height="101" />
</picture>

</p>
<p><picture><img class="img-fluid " alt="泛化的图形表示" src="/docs/ruan-she/all-graphs/uTools_1682057764410.png" loading="lazy" width="162" height="53" />
</picture>

</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="类图示例" src="/docs/ruan-she/all-graphs/uTools_1682061210921.png" loading="lazy" width="619" height="467" />
</picture>

</p>
<h3 id="对象图" data-numberify>对象图<a class="anchor ms-1" href="#对象图"></a></h3>
<p>对象图（Object Diagram）展现了<u>某一时刻一组对象以及它们之间的关系</u>，<u>描述了在类图中所建立的事物的实例的静态快照</u>。</p>
<p>对象图一般包括对象和链，如图：</p>
<p><picture><img class="img-fluid " alt="对象图示例" src="/docs/ruan-she/all-graphs/uTools_1682061786263.png" loading="lazy" width="713" height="312" />
</picture>

</p>
<p>对象：对象图中的对象包含了类名、对象名和属性。</p>
<p>其图形化如下：</p>
<table style="width: 150px; text-align: center;">
    <tr>
    <th style="text-align: center;">
        对象名 : 类名
    </th>
    </tr>
    <tr>
    <td style="text-align: center;">
    <p>
        <code>属性1 = 值1</code>
        <br>
        <code>属性2 = 值2</code>
        <br>
        ......
    </p>
    </td>
    </tr>
</table>
<p>匿名对象（没有对象名）：</p>
<table style="width: 150px;">
    <tr>
    <th style="text-align: center;">
        : 类名
    </th>
    </tr>
    <tr>
    <td style="text-align: center;">
    <p>
        <code>属性1 = 值1</code>
        <br>
        <code>属性2 = 值2</code>
        <br>
        ......
    </p>
    </td>
    </tr>
</table>
<p>和类图一样，对象图给出<u>系统的静态设计视图</u>或<u>静态进程视图</u>，但它们是<u>从真实的或原型实例的角度建立的</u>。</p>
<h3 id="用例图" data-numberify>用例图<a class="anchor ms-1" href="#用例图"></a></h3>
<p>用例图（Use Case Diagram）通常包括以下内容：</p>
<ul>
<li>
<p>用例：是从<strong>用户角度</strong>描述<strong>系统的行为</strong>，它将<strong>系统的一个功能</strong>描述成一系列的事件，这些事件最终对操作者产生有价值的观测结果。</p>
<p>用例是一个类，它代表<strong>一类功能</strong>而不是使用该功能的某一具体实例。</p>
<p><picture><img class="img-fluid " alt="用例的图形表示" src="/docs/ruan-she/all-graphs/uTools_1684574449513.png" loading="lazy" width="114" height="73" />
</picture>

</p>
</li>
<li>
<p>参与者：是与系统交互的<strong>外部实体</strong>。</p>
<p>参与者用一个<u>人形图标</u>表示。</p>
</li>
<li>
<p>关系：</p>
<ul>
<li>
<p>用例之间的关系：</p>
<ul>
<li>
<p>包含关系：用带<code>&lt;&lt;include&gt;&gt;</code>的虚线箭头表示，如：</p>
<p><picture><img class="img-fluid " alt="包含关系" src="/docs/ruan-she/all-graphs/uTools_1684578078948.png" loading="lazy" width="613" height="182" />
</picture>

</p>
</li>
<li>
<p>扩展关系：用带<code>&lt;&lt;extend&gt;&gt;</code>的虚线箭头表示，如：</p>
<p><picture><img class="img-fluid " alt="扩展关系" src="/docs/ruan-she/all-graphs/uTools_1684578542547.png" loading="lazy" width="607" height="136" />
</picture>

</p>
<p>扩展用例是指，一个用例中，符合某些特定情况才会触发的另一个用例。</p>
<p>即一个用例执行的时候，可能会发生一些特殊情况或可选情况，这种情况就是这个用例的扩展用例。</p>
</li>
</ul>
</li>
<li>
<p>参与者和用例之间的关联关系。</p>
</li>
<li>
<p>用例与用例以及参与者与参与者之间的泛化关系。</p>
</li>
</ul>
</li>
</ul>
<p><picture><img class="img-fluid " alt="用例图示例" src="/docs/ruan-she/all-graphs/uTools_1682062071630.png" loading="lazy" width="756" height="382" />
</picture>

</p>
<h3 id="序列图" data-numberify>序列图<a class="anchor ms-1" href="#序列图"></a></h3>
<p>序列图（Sequence Diagram，<strong>顺序图</strong>）<u>描述了以时间顺序组织的对象之间的交互活动</u>，<u>强调消息时间顺序</u>。</p>
<p>序列图的组成：</p>
<ol>
<li>
<p>把参加交互的对象放在图的上方，沿水平方向排列。</p>
<p>通常把发起交互的对象放在左边，下级对象依次放在右边。</p>
</li>
<li>
<p>把这些对象发送和接收的消息，沿垂直方向，按时间顺序从上到下放置。</p>
</li>
</ol>
<p><picture><img class="img-fluid " alt="序列图示例" src="/docs/ruan-she/all-graphs/uTools_1682064874751.png" loading="lazy" width="691" height="471" />
</picture>

</p>
<p>序列图的组成部分：</p>
<ul>
<li>
<p>对象：用方框框起来的<code>对象名:类名</code>，没有属性和方法等成分。</p>
</li>
<li>
<p><strong>对象生命线</strong>：表示<u>一个对象存在的时间段</u>。</p>
<p>如上图中对象下方垂直的虚线。</p>
<ul>
<li>对象可以在交互过程中创建：生命线从接收到构造型<code>create</code>消息开始；</li>
<li>也可以在交互过程中撤销：生命线从接收到构造型<code>destroy</code>消息结束，并且给出一个大$\times$的标记表明生命线的结束。</li>
</ul>
</li>
<li>
<p><strong>控制焦点</strong>：控制焦点表示<u>一个对象执行一个动作所经历的时间段</u>。</p>
<p>如上图中对象下方的空表矩形条框。</p>
</li>
<li>
<p><strong>消息</strong>：</p>
<p>普通的消息用<u>带箭头的实线</u>表示。所有消息的箭头都是指向接收对象。</p>
<ul>
<li>返回消息：用<u>带箭头的虚线</u>表示。</li>
<li>同步消息（调用消息）：指消息发送给接收对象后，需要等待接收对象返回后才可进行下一步操作。</li>
<li>异步消息：指消息发送给接收对象后，无需等待接收对象返回即可进行下一步操作。</li>
</ul>
</li>
</ul>
<p>序列图有两个不同于通信图的特性：</p>
<ul>
<li>序列图有对象生命线；</li>
<li>序列图有控制焦点。</li>
</ul>
<h3 id="通信图" data-numberify>通信图<a class="anchor ms-1" href="#通信图"></a></h3>
<p><u>通信图</u>（Communication Diagram，<strong>协作图</strong>）<u>强调收发消息的对象的结构组织</u>。通信图<u>强调参加交互的对象的组织</u>。</p>
<p>通信图的组成：</p>
<ol>
<li>将参加交互的<u>对象</u>作为图的<u>顶点</u>；</li>
<li>把连接这些对象的<u>链</u>表示为图的<u>弧</u>；</li>
<li>用对象发送和接收的<u>消息</u>来<u>修饰这些链</u>。</li>
</ol>
<p><picture><img class="img-fluid " alt="通信图" src="/docs/ruan-she/all-graphs/uTools_1682065157645.png" loading="lazy" width="719" height="314" />
</picture>

</p>
<p>通信图有以下成分：</p>
<ul>
<li>
<p>对象：与序列图一样，是用一个方框框起来的<code>对象名:类名</code>。</p>
</li>
<li>
<p>路径（链接）：用实线表示，可以在链的末端附上一个路径构造型。</p>
<p>通常仅需显式地表示以下几种链的路径：</p>
<table>
<thead>
<tr>
<th style="text-align:center">构造型</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;&lt;local&gt;&gt;</code></td>
<td style="text-align:center">局部</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;&lt;parameter&gt;&gt;</code></td>
<td style="text-align:center">参数</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;&lt;global&gt;&gt;</code></td>
<td style="text-align:center">全局</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;&lt;self&gt;&gt;</code></td>
<td style="text-align:center">自身</td>
</tr>
</tbody>
</table>
<p>不必表示<code>association</code>（关联）。</p>
</li>
<li>
<p>序号：用来表示消息的时间顺序。是消息前的一个数字前缀，可使用带小数点的号码表示嵌套消息，嵌套可为任意深度。</p>
<p>如2表示第2个消息，2.1表示嵌套在消息2中的第1个消息。</p>
</li>
<li>
<p>消息：沿同一个链可以显示许多消息（可能发自不同方向），并且每个消息都有唯一的序号。</p>
</li>
</ul>
<p>通信图有两个不同于序列图的特性：</p>
<ul>
<li>通信图有路径；</li>
<li>通信图有序号。</li>
</ul>
<h3 id="状态图" data-numberify>状态图<a class="anchor ms-1" href="#状态图"></a></h3>
<p>状态图（State Diagram，状态转换图）关注<u>系统的动态视图</u>，<u>强调对象行为的事件顺序</u>。</p>
<p>状态图由以下组成：</p>
<ul>
<li>
<p><strong>状态</strong>：指对象的生命周期中某个条件或者状态，是<u>任何可以被观察到的系统行为模式</u>，<u>一个状态代表系统的一种行为模式</u>。</p>
<p>状态规定了系统内对事件的响应方式。</p>
<p>系统对事件的响应：</p>
<ul>
<li>可以是<u>做一个（或一系列）动作</u>；</li>
<li>可以是仅仅<u>改变系统本身的状态</u>；</li>
<li>可以是<u>即改变状态，又做动作</u>。</li>
</ul>
<p>状态转换图中定义的状态主要有：</p>
<ul>
<li><strong>初态</strong>（初始状态）：用一个<u>实心圆点</u>表示。一张状态图<u>只能有一个初态</u>。</li>
<li><strong>终态</strong>（最终状态）：用一个<u>实心圆点外加一个圆圈</u>表示。一张状态图<u>可以没有终态，也可以有多个</u>。</li>
<li><strong>中间状态</strong>。</li>
</ul>
<p>状态图中的状态用一个<u>圆角矩形</u>表示，可以用两条水平横线将其分为上中下3个部分：</p>
<ol>
<li>上面部分（必须）：状态的名称；</li>
<li>中间部分（可选）：状态变量的名称和值；</li>
<li>下面部分（可选）：活动表。</li>
</ol>
<p>状态还可分为：</p>
<ul>
<li>
<p>简单状态。</p>
</li>
<li>
<p>组合状态：含有子状态的状态，这个状态也称为其子状态的超状态。</p>
<p>子状态：嵌套在另外一个状态中的状态。</p>
</li>
</ul>
</li>
<li>
<p><strong>转换</strong>（迁移）：是两个状态之间的一种关系，表示对象将在源状态中执行一定的动作，并在某个特定事件发生，而且某个特定的警界（监护）条件满足时进入目标状态。</p>
<p>状态转换用一条<u>带箭头的实线</u>表示。</p>
</li>
<li>
<p><strong>事件</strong>：是在某个特定时刻发生的事情，<u>它是对引起系统做动作或（和）从一个状态转换到另个状态的外界事件的抽象</u>。</p>
<ul>
<li>
<p><u>事件触发</u>状态转换：<u>状态变迁通常是由事件触发的。</u>状态之间带箭头实线上的事件发生时，状态转换开始（还可称之为状态“点火”或状态被“触发”）。</p>
<p>这种情况下应在表达状态转换的箭头线上标出触发转换的<u>事件表达式</u>：</p>
<pre tabindex="0"><code>事件说明 [守卫条件] / 动作表达式
</code></pre><p>事件说明的语法为：</p>
<pre tabindex="0"><code>事件名 (参数表)
</code></pre><p>守卫条件（监护条件）：一个布尔表达式。</p>
<ul>
<li>当且仅当事件发生且守卫条件为真时，状态转换才发生；</li>
<li>只有守卫条件没有事件说明时，只要守卫条件为真，状态转换就发生。</li>
</ul>
<p>动作表达式是一个过程表达式，当状态转换（事件）开始时执行。</p>
</li>
<li>
<p><u>自动触发</u>状态转换：如果箭头线上未标明事件，则表示<u>在源状态的内部活动执行完之后自动触发转换</u>。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="状态图中的事件和转换" src="/docs/ruan-she/all-graphs/uTools_1684587930655.png" loading="lazy" width="717" height="135" />
</picture>

</p>
</li>
<li>
<p><strong>活动</strong>：指状态中的活动表中的活动。</p>
<p>语法如下：</p>
<pre tabindex="0"><code>事件名 (参数表) /动作表达式
</code></pre><p>事件名：可以是任何事件的名称。</p>
<p>在活动表中经常使用以下3中标准事件：</p>
<table>
<thead>
<tr>
<th style="text-align:center">事件名</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>entry</code></td>
<td style="text-align:left"><u>入口动作</u>，指定<u>进入该状态</u>的动作，立即执行</td>
</tr>
<tr>
<td style="text-align:center"><code>exit</code></td>
<td style="text-align:left"><u>出口动作</u>，指定<u>退出该状态</u>的动作，立即执行</td>
</tr>
<tr>
<td style="text-align:center"><code>do</code></td>
<td style="text-align:left"><u>内部活动</u>，指定<u>在该状态下</u>的动作，占有有限时间，并可中断地工作</td>
</tr>
</tbody>
</table>
<p>活动（动作）可以在状态内执行，也可以在状态转换（迁移）时执行。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="状态图示例" src="/docs/ruan-she/all-graphs/uTools_1682066287326.png" loading="lazy" width="831" height="431" />
</picture>

</p>
<p>当状态图对系统、类或用例的动态方面建模时，通常是对反应型对象建模。</p>
<h3 id="活动图" data-numberify>活动图<a class="anchor ms-1" href="#活动图"></a></h3>
<p>活动图（Activity Diagram）是一种特殊的状态图，它<u>展现了在系统内从一个活动到另一个活动的流程</u>。活动图<u>专注于系统的动态视图</u>，<u>强调对象间的控制流程</u>。</p>
<p><picture><img class="img-fluid " alt="活动图示例" src="/docs/ruan-she/all-graphs/1682067363114.png" loading="lazy" width="654" height="744" />
</picture>

</p>
<p>活动图一般包括：</p>
<ul>
<li>
<p>状态：</p>
<p>活动图的状态也包含初态和终态。其余的状态还可分为：</p>
<ul>
<li>动作状态：不能被分解，动作不能被中断。</li>
<li>活动状态：能够被进一步分解，可以被中断，其活动由其它的活动图来表示。</li>
</ul>
</li>
<li>
<p>流（转换）。</p>
</li>
<li>
<p>对象。</p>
</li>
</ul>
<p>活动图可以表示：</p>
<ul>
<li>分支（判断）：分支的流上用<code>[]</code>标记的是监护表达式；</li>
<li>（并发）分岔：将一个流分为多个可并发执行的流；</li>
<li>（并发）汇合：将分岔出去的多个流合并为同一个流。</li>
</ul>
<p>当对一个系统的动态方面建模时，有以下几种使用活动图的方式：</p>
<ul>
<li>对工作流建模；</li>
<li>对操作建模；</li>
<li>对业务的复杂流程建模。</li>
</ul>
<h3 id="构件图" data-numberify>构件图<a class="anchor ms-1" href="#构件图"></a></h3>
<p>构件图（Component Diagram，<strong>组件图</strong>）展现了<u>一组构件之间的组织和依赖</u>。构件图<u>专注于系统的静态实现视图</u>，它<u>与类图相关，通常把构件映射为一个或多个类、接口或协作</u>。</p>
<p><picture><img class="img-fluid " alt="构件图示例" src="/docs/ruan-she/all-graphs/uTools_1682068370459.png" loading="lazy" width="638" height="332" />
</picture>

</p>
<p>构件图的成分有：</p>
<ul>
<li>构件：用<u>矩形</u>表示，在矩形<u>右上方有一个小标记</u>。</li>
<li>供接口：用一个<u><strong>圆圈</strong>和连接到构件上的实线</u>表示。构件提供接口给其它构件使用。</li>
<li>需接口：用一个<u><strong>半圆</strong>和连接到构件上的实线</u>表示。构件使用需接口表示需要调用其它构件提供接口。</li>
<li>依赖：将供接口（圆圈）和虚接口（半圆）连接到一起，表示两个构件通过这个接口相依赖。</li>
</ul>
<h3 id="部署图" data-numberify>部署图<a class="anchor ms-1" href="#部署图"></a></h3>
<p>部署图（Deployment Diagram）是用来<u>对面向对象系统的<strong>物理方面</strong>建模</u>的方法，展现了运行时处理结点以及其中构件（制品）的配置。部署图<u>对系统的静态部署视图进行建模</u>，它与构件图相关。</p>
<p>部署图<u>展现了系统的软件和硬件之间的关系，在实施阶段使用</u>。</p>
<p><picture><img class="img-fluid " alt="部署图示例" src="/docs/ruan-she/all-graphs/uTools_1682073176388.png" loading="lazy" width="491" height="327" />
</picture>

</p>
<blockquote>
<p><code>&lt;&lt;artifact&gt;&gt;</code>表示制品。</p>
</blockquote>
<h3 id="总结" data-numberify>总结<a class="anchor ms-1" href="#总结"></a></h3>
<p>UML图分类：</p>
<table>
<thead>
<tr>
<th style="text-align:center">UML图</th>
<th style="text-align:center">静态建模</th>
<th style="text-align:center">动态建模</th>
<th style="text-align:center">物理建模</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">对象图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">用例图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">构件图（组件图)</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
</tr>
<tr>
<td style="text-align:center">部署图</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
</tr>
<tr>
<td style="text-align:center">序列图（顺序图，时序图）</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">通信图（协作图）</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">状态图</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">活动图</td>
<td style="text-align:center">$\times$</td>
<td style="text-align:center">$\checkmark$</td>
<td style="text-align:center">$\times$</td>
</tr>
</tbody>
</table>
<p>类图成分总结：</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">图示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="类图中的类的图形表示" src="/docs/ruan-she/all-graphs/uTools_1684650129674.png" loading="lazy" width="142" height="139" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">接口</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="类图接口的图形表示" src="/docs/ruan-she/all-graphs/uTools_1684570786524.png" loading="lazy" width="135" height="74" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">协作</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="协作的图形表示" src="/docs/ruan-she/all-graphs/uTools_1684570820946.png" loading="lazy" width="107" height="67" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">依赖</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="依赖的图形表示" src="/docs/ruan-she/all-graphs/uTools_1682057108089.png" loading="lazy" width="200" height="48" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">泛化</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="泛化的图形表示" src="/docs/ruan-she/all-graphs/uTools_1682057764410.png" loading="lazy" width="162" height="53" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">关联</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="关联图形化表示" src="/docs/ruan-she/all-graphs/1682057458153.png" loading="lazy" width="408" height="101" />
</picture>

</td>
</tr>
</tbody>
</table>
<p>用例图成分总结：</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">图示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">用例</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="用例的图形表示" src="/docs/ruan-she/all-graphs/uTools_1684574449513.png" loading="lazy" width="114" height="73" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">包含关系</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="用例之间的包含关系" src="/docs/ruan-she/all-graphs/uTools_1684578078948.png" loading="lazy" width="613" height="182" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">扩展关系</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="用例之间的扩展关系" src="/docs/ruan-she/all-graphs/uTools_1684578542547.png" loading="lazy" width="607" height="136" />
</picture>

</td>
</tr>
<tr>
<td style="text-align:center">泛化关系</td>
<td style="text-align:center"><picture><img class="img-fluid " alt="用例与用例以及参与者与参与者之间的泛化关系" src="/docs/ruan-she/all-graphs/uTools_1682057764410.png" loading="lazy" width="162" height="53" />
</picture>

</td>
</tr>
</tbody>
</table>
<p>交互图中，顺序图和通信图是同构的，它们之间可以相互转换。它们的差异如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">差异</th>
<th style="text-align:left"><center>序列图</center></th>
<th style="text-align:left"><center>通信图</center></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>强调</strong></td>
<td style="text-align:left"><center>消息时间顺序</center></td>
<td style="text-align:left"><center>收发消息的对象的结构组织</center></td>
</tr>
<tr>
<td style="text-align:center"><strong>不同的特性</strong></td>
<td style="text-align:left"><ul><li>有对象生命线：对象存在的时间段</li><li>有控制焦点：对象执行动作所经历的时间段</li></ul></td>
<td style="text-align:left"><ul><li>有路径：表示对象之间有交互</li><li>有序号：表示消息的时间顺序，可嵌套表示</li></ul></td>
</tr>
</tbody>
</table>
<p>活动图是一种特殊的状态图，它们的差异如下：</p>
<ul>
<li>相同点：状态中都有初态和终态。</li>
<li>主要差异：
<ul>
<li>活动图的转换称为流；</li>
<li>活动图有分支、并发分岔和并发汇合。</li>
</ul>
</li>
</ul>
<p>以下是UML图的总结：</p>
<ul>
<li>
<p><strong>类图</strong>：展现一组<u>对象（类）</u>、<u>接口</u>、<u>协作</u>和它们之间的<u>关系</u></p>
<p><picture><img class="img-fluid " alt="类图示例" src="/docs/ruan-she/all-graphs/uTools_1682061210921.png" loading="lazy" width="619" height="467" />
</picture>

</p>
</li>
<li>
<p><strong>对象图</strong>：展现某一时刻的一组<u>对象</u>以及它们之间的<u>关系</u>，描述了在类图中所建立事物的实例的静态快照</p>
<p><picture><img class="img-fluid " alt="对象图示例" src="/docs/ruan-she/all-graphs/uTools_1682061786263.png" loading="lazy" width="713" height="312" />
</picture>

</p>
</li>
<li>
<p><strong>用例图</strong>：展现了一组<u>用例</u>、<u>参与者</u>以及它们之间的<u>关系（包含、扩展、关联和泛化）</u></p>
<p><picture><img class="img-fluid " alt="用例图示例" src="/docs/ruan-she/all-graphs/uTools_1682062071630.png" loading="lazy" width="756" height="382" />
</picture>

</p>
</li>
<li>
<p><strong>序列图（顺序图，时序图）</strong>：描述了以<u>时间顺序</u>组织的<u>对象</u>之间的<u>交互活动</u>，强调<u>消息时间顺序</u></p>
<p><picture><img class="img-fluid " alt="序列图示例" src="/docs/ruan-she/all-graphs/uTools_1682064874751.png" loading="lazy" width="691" height="471" />
</picture>

</p>
</li>
<li>
<p><strong>通信图（协作图）</strong>：强调<u>收发消息的对象的结构组织</u></p>
<p><picture><img class="img-fluid " alt="通信图" src="/docs/ruan-she/all-graphs/uTools_1682065157645.png" loading="lazy" width="719" height="314" />
</picture>

</p>
</li>
<li>
<p><strong>状态图（状态转换图）</strong>：展现了一个状态机，强调<u>对象行为的事件顺序</u></p>
<p><picture><img class="img-fluid " alt="状态图示例" src="/docs/ruan-she/all-graphs/uTools_1682066287326.png" loading="lazy" width="831" height="431" />
</picture>

</p>
</li>
<li>
<p><strong>活动图</strong>：一种特殊的状态图，展现了在<u>系统内从一个活动到另一个活动的流程</u>，强调<u>对象间的控制流程</u></p>
<p><picture><img class="img-fluid " alt="活动图示例" src="/docs/ruan-she/all-graphs/1682067363114.png" loading="lazy" width="654" height="744" />
</picture>

</p>
</li>
<li>
<p><strong>构件图（组件图)</strong>：展现了一组<u>构件之间的组织和依赖</u>，将构件映射为类、接口或协作</p>
<p><picture><img class="img-fluid " alt="构件图示例" src="/docs/ruan-she/all-graphs/uTools_1682068370459.png" loading="lazy" width="638" height="332" />
</picture>

</p>
</li>
<li>
<p><strong>部署图</strong>：对物理建模，展现了<u>运行时处理结点以及其中构件（制品）的配置</u></p>
<p><picture><img class="img-fluid " alt="部署图示例" src="/docs/ruan-she/all-graphs/uTools_1682073176388.png" loading="lazy" width="491" height="327" />
</picture>

</p>
</li>
</ul>
<hr>
<h1 id="软件工程" data-numberify>软件工程<a class="anchor ms-1" href="#软件工程"></a></h1>
<h2 id="沟通路径" data-numberify>沟通路径<a class="anchor ms-1" href="#沟通路径"></a></h2>
<p>沟通图是指项目中人员或部门之间的沟通用一条无向边连接起来，所构成图即为沟通图。沟通图中的路径称为沟通路径。</p>
<p>软件项目中沟通路径$m$的计算公式：</p>
<ul>
<li>
<p>沟通图中无主程序员时：</p>
<p>$$
m = \sum_{i=1}^{n} i-1 = \cfrac{(n-1)n}{2}
$$</p>
</li>
<li>
<p>沟通图中有主程序员时：</p>
<p>$$
m = n - 1
$$</p>
</li>
</ul>
<h2 id="gantt图" data-numberify>Gantt图<a class="anchor ms-1" href="#gantt图"></a></h2>
<p>Gantt图：一种<u>简单的水平条形图</u>，它<u>以日历为基准</u>描述项目任务。</p>
<ul>
<li>
<p>垂直轴：表示<u>多个不同的任务</u>，每个任务按照左侧任务名称垂直排列。</p>
</li>
<li>
<p>水平轴：表示<u>日历时间线</u>（如时、天、周、月和年等）。</p>
<p>每个水平条表示一个任务：</p>
<ul>
<li>每一水平条的<u>起点</u>：表示该任务的<u>开始时间</u>；</li>
<li>每一水平条的<u>终点</u>：表示该任务的<u>结束时间</u>；</li>
<li>每一水平条的<u>长度</u>：表示<u>完成该任务的持续时间</u>。</li>
</ul>
<p>当日历中同一时段存在多个水平条时，表示任务之间的并发。</p>
</li>
</ul>
<p>如图：</p>
<p><picture><img class="img-fluid " alt="Gantt图示例" src="/docs/ruan-she/all-graphs/uTools_1683683731050.png" loading="lazy" width="795" height="282" />
</picture>

</p>
<ul>
<li>
<p>Gantt图优点：</p>
<p>能清晰地描述：</p>
<ul>
<li>每个任务的开始时间；</li>
<li>每个任务的结束时间；</li>
<li>任务的进展情况；</li>
<li>各个任务之间的并行性。</li>
</ul>
</li>
<li>
<p>Gantt图缺点：</p>
<ul>
<li>不能清晰地反映各任务之间的<u>依赖关系</u>；</li>
<li>难以确定<u>整个项目的关键所在</u>，即不能清晰地确定影响进度的<u>关键任务</u>；</li>
<li>不能反映<u>计划中有潜力的部分</u>。</li>
</ul>
</li>
</ul>
<h2 id="pert图" data-numberify>PERT图<a class="anchor ms-1" href="#pert图"></a></h2>
<p>PERT图是一个<u>有向图</u>：</p>
<ul>
<li>
<p><strong>弧</strong>：表示<strong>任务</strong>。</p>
<p>任务包含以下成分：</p>
<ul>
<li>
<p><u>完成该任务所需的时间</u>（任务持续时间）。</p>
</li>
<li>
<p><u>松弛时间</u>（Slack Time）：表示在<u>不影响整个工期的前提下完成该任务有多少机动余地</u>。</p>
<p>即松弛时间指当前任务的工期可以推迟的时间。</p>
</li>
</ul>
<p>空任务：用虚线箭头表示，表示任务间的关系所添加。完成空任务的所需时间为0。</p>
</li>
<li>
<p><strong>结点</strong>：表示<strong>事件</strong>。</p>
<p>事件是流入结点的任务的结束，或流出结点的任务的开始。事件<u>表示某个时间点</u>，本身不消耗时间和资源。</p>
<p>事件包含以下成分：</p>
<ul>
<li>事件号。</li>
<li>出现该事件的<strong>最早时刻</strong>：表示在此时刻之前从该事件出发的任务不可能开始。</li>
<li>出现该事件的<strong>最迟时刻</strong>：表示从该事件出发的任务最迟在此时刻开始，否则整个工程就不能如期完成。</li>
</ul>
<p><u>只有当流入该结点的所有任务都结束时，结点所表示的事件才出现，流出结点的任务才可以开始。</u></p>
<p>特殊的事件：</p>
<ul>
<li>开始事件：没有任何任务流向该事件；</li>
<li>结束事件：没有任务任务从该事件流出。</li>
</ul>
<p>一个项目是从开始事件开始到结束事件结束。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="PERT图示例" src="/docs/ruan-she/all-graphs/uTools_1683684995281.png" loading="lazy" width="850" height="490" />
</picture>

</p>
<p>设：</p>
<ul>
<li>$T(e)$：完成任务$e$的所需时间；</li>
<li>$T_s(e)$：完成任务$e$的松弛时间；</li>
<li>$T_e(v)$：事件$v$的最早时刻；</li>
<li>$T_l(v)$：事件$v$的最迟时刻。</li>
</ul>
<p>PERT图各成分取值（不一定需要满足下面的关系，但是可以用下面的式子推出）：</p>
<ul>
<li>
<p>事件$V_{in}$的<u>最早时刻</u>$T_e(V_{in})$：</p>
<ul>
<li>
<p>只有一个任务流入时，设该任务的流出事件为$V_{out}$，则该任务为$&lt;V_{out}, V_{in}&gt;$：</p>
<p>$$
T_e(V_{in}) = T_e(V_{out}) + T
$$</p>
<blockquote>
<p>这里将$T(&lt;V_{out}, V_{in}&gt;)$简写为了$T$。</p>
</blockquote>
<p>即：<u>该流入任务的流出事件的最早时刻</u> + <u>完成该流入任务的所需时间</u>。</p>
</li>
<li>
<p>多个任务流入时，设与每个任务相对应的流出事件为$V_{out}[ \ i \ ]$，则这些任务为$&lt;V_{out}[ \ i \ ], V_{in}&gt;$：</p>
<p>$$
T_e(V_{in}) = Max(T_e(V_{out}[ \ i \ ]) + T_i)
$$</p>
<blockquote>
<p>这里将$T(&lt;V_{out}[ \ i \ ], V_{in}&gt;)$简写为了$T_i$。</p>
</blockquote>
<p>即<u>流入该事件的每个任务计算出的最早时刻的最大值</u>。</p>
</li>
<li>
<p>开始事件$V_{start}$：</p>
<p>$$
T_e(V_{start}) = 0
$$</p>
</li>
</ul>
</li>
<li>
<p>事件$V_{out}$的<u>最迟时刻</u>$T_l(V_{out})$：</p>
<ul>
<li>
<p>只有一个任务流出时，设该任务的流入事件为$V_{in}$，则该任务为$&lt;V_{out}, V_{in}&gt;$：</p>
<p>$$
T_l(V_{out}) = T_l(V_{in}) - (T + T_s)
$$</p>
<blockquote>
<p>这里将$T_s(&lt;V_{out}, V_{in}&gt;)$简写为$T_s$。</p>
</blockquote>
<p>即：<u>该流出任务的流入事件的最迟时刻</u> -（<u>该流出任务的所需时间</u> + <u>松弛时间</u>）。</p>
<p>如果松弛时间未知或为0：</p>
<p>$$
T_l(V_{out}) = T_l(V_{in}) - T
$$</p>
</li>
<li>
<p>多个任务流出时，设与每个任务相对应的流入事件为$V_{in}[ \ i \ ]$，则这些任务为$&lt;V_{out}, V_{in}[ \ i \ ]&gt;$：</p>
<p>$$
T_l(V_{out}) = Min(T_l(V_{in}[ \ i \ ]) - (T_i + S_i))
$$</p>
<blockquote>
<p>这里把$T(&lt;V_{out}, V_{in}[ \ i \ ]&gt;)$简写为$T_i$，把$T_s(&lt;V_{out}, V_{in}[ \ i \ ]&gt;)$简写为$S_i$。</p>
</blockquote>
<p>即<u>流出该事件的每个任务计算出的最晚时刻的最大值</u>。</p>
<p>如果松弛时间未知或为0：</p>
<p>$$
T_l(V_{out}) = Min(T_l(V_{in}[ \ i \ ]) - T_i)
$$</p>
</li>
<li>
<p>结束事件$V_{end}$：</p>
<p>$$
T_l(V_{end}) = T_e(V_{end})
$$</p>
<p>即<u>结束事件的最早时刻与最迟时刻相等</u>。</p>
</li>
</ul>
</li>
<li>
<p>设某任务的流入事件为$V_{in}$，流出事件为$V_{out}$，则该任务$&lt;V_{out}, V_{in}&gt;$的<u>松弛时间</u>$T_s(&lt;V_{out}, V_{in}&gt;)$。</p>
<p>$$
T_s = T_l(V_{in}) - T - T_e(V_{out})
$$</p>
<p>即，该任务的流入事件的最迟时刻 - 该任务的所需时间 - 该任务的流出事件的最早时刻</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="PERT图公式参照图" src="/docs/ruan-she/all-graphs/uTools_1683719224977.png" loading="lazy" width="931" height="341" />
</picture>

</p>
<p>PERT图的路径：从开始事件到结束事件的一条通路。</p>
<p>PERT图的<strong>关键路径</strong>：指<u>所有的任务的松弛时间都为0的路径</u>。</p>
<p>关键路径的长度：指结束事件的最早（或最晚）时刻。</p>
<p><picture><img class="img-fluid " alt="PERT图的关键路径示例" src="/docs/ruan-she/all-graphs/uTools_1683706944555.png" loading="lazy" width="785" height="457" />
</picture>

</p>
<p>关键路径的特点：</p>
<ul>
<li>
<p>所有任务的松弛时间都为0。</p>
</li>
<li>
<p>每个事件的最早时刻和最迟时刻都是相等的。</p>
</li>
<li>
<p>所有任务持续时间的和，是PERT图所有路径中最大的，并且与结束事件的最早时刻（或最晚时刻）相等。</p>
<p>设关键路径中所有事件为$V_i$（$i = 1, 2, \cdots, n$），且该路径下的任务为$&lt;V_j, V_{j+1}&gt;$（$1 \le j \le n-1$）（表示$V_1$是开始事件，$V_2$是$V_1$往下的一个事件，以此类推，$V_n$是结束事件），那么该关键路径结束事件的最早时刻（或最晚时刻）为：</p>
<p>$$
T_e(V_n) = \sum_{i = 1}^{n-1} T_i
$$</p>
<blockquote>
<p>这里$T_i$代表$T(&lt;V_i, V_{i+1}&gt;)$。</p>
</blockquote>
</li>
</ul>
<p>最迟时刻的另一种求法（PERT图存在关键路径的情况下）：</p>
<p>已知某PERT图结束事件的最晚时刻（最早时刻），该PERT图中某一条路径（假设该路径没有分支）中所有事件为$V_j$（$j = 1, 2, \cdots, n$），且该路径下的任务为$&lt;V_k, V_{k+1}&gt;$（$1 \le k \le n-1$），该路径下任务的持续时间$T(&lt;V_{k-1}, V_k&gt;)$已知，（即$V_1$是开始事件，按照次序往下，$V_n$是结束事件），计算某一事件的最迟时刻$T_l(V_i)$（$1 \le i &lt; n$）：</p>
<p>$$
T_l(V_i) = T_l(V_n) - \sum_{j = i}^{n - 1} T_j
$$</p>
<blockquote>
<p>这里$T_j$代表$T(&lt;V_j, V_{j + 1}&gt;)$。</p>
</blockquote>
<p>即：<u>结束事件的最晚时刻</u> - <u>该事件到结束事件之间所有的任务的持续时间总和</u>。</p>
<blockquote>
<p>注意：如果事件$V_i$到结束事件之间存在多条路径，应该选择那条任务持续时间总和最大的路径。</p>
</blockquote>
<p>PERT图的优点：</p>
<ul>
<li>给出了每个任务的开始时间、结束时间和完成该任务所需的时间；</li>
<li>给出了任务之间的关系（依赖关系）。即任务之间的执行顺序。</li>
</ul>
<p>PERT图不能清晰地描述任务之间的并行情况。</p>
<h2 id="项目活动图" data-numberify>项目活动图<a class="anchor ms-1" href="#项目活动图"></a></h2>
<p>项目活动图是一种有向图（与PERT图十分类似）：</p>
<ul>
<li>
<p>弧：表示活动。弧的权值表示活动的持续时间。</p>
</li>
<li>
<p>顶点：表示项目里程碑。</p>
<p>特殊的里程碑：</p>
<ul>
<li>开始里程碑：没有任何活动指向该里程碑；</li>
<li>结束里程碑：没有任何活动从该里程碑指出。</li>
</ul>
</li>
</ul>
<p>项目活动图的关键路径：按照PERT图的方法求出松弛时间为0的、从开始里程碑到结束里程碑的路径。</p>
<p>关键路径的长度：为结束里程碑的最早时刻（或最晚时刻）。它可以用来表示项目完成的最少时间。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据库篇</title>
      <link>/docs/ruan-she/data-base/</link>
      <pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/ruan-she/data-base/</guid>
      <description><![CDATA[数据库体系结构 数据描述有两种形式： 逻辑描述：指程序员或用户用以操作的数据形式，是抽象的概念化数据。 物理描述：指数据在存储设备上的存储方式，物]]></description>
      <content:encoded><![CDATA[<h1 id="数据库体系结构" data-numberify>数据库体系结构<a class="anchor ms-1" href="#数据库体系结构"></a></h1>
<p>数据描述有两种形式：</p>
<ul>
<li>逻辑描述：指程序员或用户用以操作的数据形式，是抽象的概念化数据。</li>
<li>物理描述：指数据在存储设备上的存储方式，物理数据是实际存放在存储设备上的数据。</li>
</ul>
<h2 id="三级模式结构" data-numberify>三级模式结构<a class="anchor ms-1" href="#三级模式结构"></a></h2>
<p>实际上有许多不同的数据库产品，但它们的体系结构基本上都具有相同的特征，采用“三级模式和两级映像”：</p>
<p><picture><img class="img-fluid " alt="三级模式两级映像" src="/docs/ruan-she/data-base/uTools_1681373319410.png" loading="lazy" width="486" height="377" />
</picture>

</p>
<p>三级结构有3类数据模型：</p>
<ul>
<li><strong>外模型</strong>：用户使用的<strong>数据视图</strong>，是一种局部的逻辑数据视图，表示用户所理解的实体、实体属性和实体关系。</li>
<li><strong>概念模型</strong>：全局的<strong>逻辑数据视图</strong>，是数据库管理员所看到的实体、实体属性和实体之间的联系。</li>
<li><strong>内模型</strong>：数据的物理<strong>存储模型</strong>。</li>
</ul>
<p>三个物理模型分别对应数据库系统的3层结构：</p>
<ul>
<li>
<p><strong>外模式（子模式、用户模式）</strong>：数据库用户的数据视图，是与某一应用程序有关的数据的逻辑表示。</p>
<p>外模式用DBMS的外模式描述语言（外模式DDL)来定义。</p>
</li>
<li>
<p><strong>概念模式（模式）</strong>：所有用户的公共数据视图，与具体的应用程序和应用程序开发工具无关。</p>
<p>概念模式用DBMS的模式描述语言（模式DDL)来定义。</p>
</li>
<li>
<p><strong>内模式（物理模式、存储模式）</strong>：是数据在数据库内部的表示方式。</p>
<p>内模式由DBMS的内模式描述语言（内模式DDL)来描述，由设备介质语言来定义。</p>
<p>定义<u>所有的<strong>内部记录类型</strong>、<strong>索引</strong>和<strong>文件</strong>的组织方式</u>。</p>
</li>
</ul>
<h2 id="两级模式映象" data-numberify>两级模式映象<a class="anchor ms-1" href="#两级模式映象"></a></h2>
<p>数据库系统在三级模式之间提供了两级映像：</p>
<ul>
<li>模式——内模式映像存在于<u>概念级和内部级</u>之间，实现<u>概念模式和内模式</u>间的相互转换。</li>
<li>外模式——模式映像：存在于<u>外部级和概念级</u>之间，实现了<u>外模式和概念模式</u>之间的相互转换。</li>
</ul>
<p>数据的独立性（指数据与程序独立）是由DBMS的二级映像功能来保证的。数据的独立性包括：</p>
<ul>
<li>
<p><strong>物理独立性</strong>：指当数据库的<u>内模式发生改变时，数据的逻辑结构不变</u>。</p>
<p>物理独立性可以保证，当数据的物理结构改变时，应用程序不用改变。</p>
<p>但是，为了保证应用程序能够正确执行，<u>需要修改概念模式和内模式之间的映像</u>。</p>
</li>
<li>
<p><strong>逻辑独立性</strong>：指用户的<u>应用程序与数据库的逻辑结构是相互独立的</u>。</p>
<p>数据的逻辑结构发生变化后，用户程序也可以不修改。</p>
<p>但是，为了保证应用程序能够正确执行，<u>需要修改外模式和概念模式之间的映像</u>。</p>
</li>
</ul>
<hr>
<h1 id="数据模型" data-numberify>数据模型<a class="anchor ms-1" href="#数据模型"></a></h1>
<p>在数据库技术中，表示实体类型及实体类型间联系的模型称为数据模型。</p>
<p>数据模型有以下类型：</p>
<ul>
<li>概念数据模型：从信息世界中抽象的数据模型；</li>
<li>结构数据模型：从计算机世界中抽象出的DBMS支持的数据模型。</li>
</ul>
<h2 id="概念数据模型" data-numberify>概念数据模型<a class="anchor ms-1" href="#概念数据模型"></a></h2>
<p>概念数据模型用于信息世界建模，一般采用实体-联系方法（E-R方法）。概念数据模型的常用术语有：</p>
<ul>
<li>
<p><strong>实体</strong>：客观存在并可以相互区别的事物称为实体。</p>
<p>如一个单位、一个职工、一个部门或一个项目等。</p>
</li>
<li>
<p><strong>属性</strong>：描述实体的特性称为属性，一个实体可以由若干个属性来刻画。</p>
<p>属性的具体取值称为属性值，用以表示一个具体实体。</p>
</li>
<li>
<p><strong>码</strong>：<u>唯一标识</u>实体的属性集称为码。</p>
</li>
<li>
<p><strong>域</strong>：属性的<u>取值范围</u>称为该属性的域。</p>
</li>
<li>
<p><strong>实体型</strong>：具有相同属性的实体必然具有共同的特征和性质，用实体名及其属性名集合来抽象和刻画同类实体，称为实体型。</p>
<p>例如，学生（学号，姓名，性别，班号）就是一个实体型。</p>
</li>
<li>
<p><strong>实体集</strong>：同型实体的集合称为实体集。</p>
<p>例如，全体学生就是一个实体集。</p>
</li>
<li>
<p><strong>联系</strong>：实体（型）之间的对应关系称为联系。联系分为两种：</p>
<ul>
<li>实体内部各属性之间的联系；</li>
<li>实体之间的联系。</li>
</ul>
<p>两个实体型之间的联系有3种类型：</p>
<ul>
<li>一对一联系(1:1)；</li>
<li>一对多联系(1:n)；</li>
<li>多对多联系(m:n)。</li>
</ul>
</li>
</ul>
<p>实体-联系方法表示的概念数据模型称为E-R图。E-R图是抽象和描述现实世界的有力工具：</p>
<ul>
<li><strong>实体型</strong>：用<strong>矩形</strong>表示，矩形框内写明实体名；</li>
<li><strong>属性</strong>：用<strong>椭圆形</strong>表示，并用无向边将其与相应的实体连接起来；</li>
<li><strong>联系</strong>：用<strong>菱形</strong>表示，菱形框内写明联系名，并用无向边将其分别与有关实体连接起来，同时在无向边旁标上联系的类型。</li>
</ul>
<p><picture><img class="img-fluid " alt="E-R图示例" src="/docs/ruan-she/data-base/uTools_1681289395117.png" loading="lazy" width="240" height="242" />
</picture>

</p>
<h2 id="结构数据模型" data-numberify>结构数据模型<a class="anchor ms-1" href="#结构数据模型"></a></h2>
<p>结构数据模型是直接面向数据库的逻辑结构。这类模型涉及到计算机系统和数据库管理系统，所以称为结构数据模型。任何一个DBMS都以某个结构数据模型为基础，或者说支持某个结构数据模型。</p>
<p>常用术语：</p>
<ul>
<li>
<p><strong>数据项</strong>：又称<strong>字段</strong>，是数据库中可以命名的最小逻辑数据单位。可以是一个数或个字符串，用它描述属性的数据。</p>
</li>
<li>
<p><strong>记录</strong>：是数据项的有序集，即一个记录是由若干个数据项或字段组成，用它描述实体。</p>
<p>一般来说，数据只有被组成记录的形式才有实际意义。</p>
</li>
<li>
<p><strong>文件</strong>：文件是一个具有符号名的一组同类记录的集合。文件包含记录的结构和记录的值。</p>
</li>
</ul>
<p>结构数据模型主要包括：层次、网状、关系和面向对象模型。</p>
<p>关系模型是一种用二维表格结构快表示实体以及实体之间联系的数据模型。每个二维表由行、列组成，又可称为关系，关系模式是对关系的描述。因此可以说，关系模型是由关系模式组成的集合。</p>
<blockquote>
<p>目前大多数数据库管理系统都是关系型的。</p>
</blockquote>
<hr>
<h1 id="关系模型" data-numberify>关系模型<a class="anchor ms-1" href="#关系模型"></a></h1>
<h2 id="术语" data-numberify>术语<a class="anchor ms-1" href="#术语"></a></h2>
<p>有关关系模型的术语：</p>
<ul>
<li>
<p><strong>关系</strong>：一个关系就是一张<strong>二维表</strong>，每个关系有一个关系名</p>
</li>
<li>
<p><strong>元组</strong>：表中的一行即为一个<strong>元组</strong>，对应存储文件中的一个<strong>记录值</strong>。</p>
</li>
<li>
<p><strong>属性</strong>：表中的<strong>列</strong>称为属性，每一列有一个属性名。</p>
<p>属性值相当于记录中的数据项或者字段值。</p>
</li>
<li>
<p><strong>域</strong>：属性的<strong>取值范围</strong>。</p>
</li>
<li>
<p><strong>关系模式</strong>：对关系的<strong>描述</strong>称为关系模式，由关系名和其属性集合构成，关系模式的格式为：关系名（属性名1，属性名2，…，属性名n）</p>
</li>
<li>
<p><strong>候选码</strong>（候选健）：属性或属性组合其值能够<strong>唯一地标识</strong>一个元组。</p>
</li>
<li>
<p><strong>主码</strong>（主键）：在一个关系中可能有<u>多个候选码，从中选择一个</u>作为主码。</p>
</li>
<li>
<p><strong>主属性</strong>：所有候选键都称为主属性，其他的属性都称为<strong>非码属性</strong>。</p>
</li>
<li>
<p><strong>外码</strong>（或外键）：如果一个关系中的属性或属性组并非该关系（二维表）的码，但它们是<u>另外一个关系（二维表）的码</u>，则称其为该关系的外码。</p>
</li>
<li>
<p><strong>全码</strong>：关系模式的<u>所有属性组是这个关系模式的候选码</u>，称为全码。</p>
</li>
<li>
<p><strong>超码</strong>（超键）：一个<u>包含码的属性集称为超码</u>。</p>
<p>例如学号是码，则（学号，姓名）就是一个超码。</p>
</li>
</ul>
<h2 id="完整性约束" data-numberify>完整性约束<a class="anchor ms-1" href="#完整性约束"></a></h2>
<p>完整性规则保证用户对数据库做修改时不会破坏数据的一致性。</p>
<ul>
<li>
<p><strong>实体完整性</strong>（Entity Integrity，引用完整性）：规定基本关系R的主属性A不能取空值。</p>
<p>即<u>主属性不能为空</u>。</p>
</li>
<li>
<p><strong>参照完整性</strong>（Referential Integrity）：若F是基本关系R的外码，它与基本关系S的主码K<sub>s</sub>相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值可以取：</p>
<ul>
<li>空值（F的每个属性值均为空值）；</li>
<li>S中某个元组的主码值。</li>
</ul>
<p>即实体之间的关联可以变现为：关系R用外码F与关系S关联，外码F的值可以为空也可以为关系S中某个元组（记录）的主码值。</p>
</li>
<li>
<p><strong>用户定义完整性</strong>（User Defined Integrity）：针对某一具体的关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求，由应用的环境决定。</p>
<p>例如，银行的用户账户规定必须大于等于100000、小于999999。</p>
</li>
</ul>
<h2 id="关系代数运算符" data-numberify>关系代数运算符<a class="anchor ms-1" href="#关系代数运算符"></a></h2>
<p>关系操作的特点是操作对象和操作结果都是集合，而非关系数据模型的数据操作方式则为一次一个记录的方式。</p>
<p>关系数据语言分为三类：</p>
<ul>
<li>关系代数语言；</li>
<li>关系演算语言；</li>
<li>具有关系代数和关系演算双重特点的语言。</li>
</ul>
<p>关系演算语言包含：</p>
<ul>
<li>元组关系演算语言；</li>
<li>域关系演算语言。</li>
</ul>
<p>关系代数运算符有4类：</p>
<p><picture><img class="img-fluid " alt="关系代数运算符" src="/docs/ruan-she/data-base/uTools_1681431891302.png" loading="lazy" width="735" height="301" />
</picture>

</p>
<p>基本关系代数运算是对两个具有<u>相同的关系模式</u>的关系进行运算。关系$R$与$S$具有<u>相同的关系模式</u>，即$R$与$S$的元数相同（结构相同）。</p>
<p>基本关系代数运算包含：</p>
<ul>
<li>
<p><strong>并</strong>（Union）：关系$R$与$S$的并是由属于$R$或属于$S$的元组构成的集合，记作$R \cup S$，其形式定义如下：</p>
<p>$$
R \cup S = \{ t | (t \in R) \vee (t \in S) \}
$$</p>
<blockquote>
<p>式中$t$为元组变量。</p>
</blockquote>
</li>
<li>
<p><strong>差</strong>（Difference）：关系$R$与$S$的差是由<u>属于$R$但不属于$S$</u>的元组构成的集合，记作$R-S$，其形式定义如下：</p>
<p>$$
R-S = \{ t| (t \in R) \wedge (t \not\in S) \}
$$</p>
</li>
<li>
<p><strong>交</strong>（Intersection）：关系$R$与$S$的交是由属于$R$同时又属于$S$的元组构成的集合，记作$R \cap S$,其形式定义如下：</p>
<p>$$
R \cap S = \{ t| (t \in R) \wedge (t \in S) \}
$$</p>
<blockquote>
<p>$R \cap S = R-(R-S)$，或者$R \cap S = S-(S-R)$。</p>
</blockquote>
</li>
</ul>
<p>扩展的关系代数运算可以从基本的关系运算中导出，包括：</p>
<ul>
<li>
<p><strong>广义笛卡儿积</strong>（Extended Cartesian Product）：两个元组分别为$n$目和$m$目的关系$R$和$S$的广义笛卡儿积是一个$(n+m)$列的元组的集合。</p>
<p>元组的前$n$列是关系$R$的一个元组，后$m$列是关系$S$的一个元组，记作$R \times S$，其形式定义如下：</p>
<p>$$
R \times S = \{ t| (t \ = \ &lt;t^n, t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \}
$$</p>
<p>如果$R$和$S$中有相同的属性名，可在属性名前加关系名作为限定，以示区别。若$R$有$K_1$,个元组，$S$有$K_2$个元组，则$R$和$S$的广义笛卡儿积有$K_1 \times K2$个元组。</p>
<blockquote>
<p>$&lt;t^n, t^m&gt;$是一个元组$t^n$和$t^m$拼接成的一个元组。</p>
</blockquote>
</li>
<li>
<p><strong>投影</strong>（Projection）：投影运算是从关系的<u>垂直方向</u>进行运算，在关系$R$中选出若干属性列$A$组成新的关系，记作$\pi_A (R)$，其形式定义如下：</p>
<p>$$
\pi_A (R) = \{ t[A]|t \in R \}
$$</p>
</li>
<li>
<p><strong>选择</strong>（Selection）：选择运算是从关系的<u>水平方向</u>进行运算，是从关系$R$中选择满足给定条件的诸元组，记作$\sigma_F (R)$其形式定义如下：</p>
<p>$$
\sigma_A (R) = \{ t| (t \in R) \wedge F(t) = True \}
$$</p>
<p>其中，$F(t)$中的运算对象可以是：</p>
<ul>
<li>属性名（或列的序号）；</li>
<li>常数；</li>
<li>运算符；</li>
<li>算术比较符（$&lt;, \le, &gt;, \ge, \neq$）；</li>
<li>逻辑运算符（$\wedge, \vee, \neg$）。</li>
</ul>
</li>
<li>
<p><strong>连接</strong>（Join）：连接运算是从两个关系$R$和$S$的笛卡儿积中选取满足条件的元组。</p>
<blockquote>
<p>可以认为笛卡儿积是无条件连接，其他的连接操作认为是有条件连接。</p>
</blockquote>
<ul>
<li>
<p><strong>$\theta$连接</strong>：从$R$与$S$的笛卡儿积中选取属性间满足一定条件的元组。记作：</p>
<p>$$
R \mathop{\Join}\limits_{X \theta Y} S = \{ t| (t=&lt;t^n,t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[X] \ \theta \ t^m[Y]) \}
$$</p>
<p>其中：</p>
<ul>
<li>$X \theta Y$：连接的条件；</li>
<li>$\theta$：比较运算符；</li>
<li>$X$和$Y$分别为$R$和$S$上度数相等且可比的属性组；</li>
<li>$t^n\left[ X \right]$表示$R$中$t^n$元组的对应于属性$X$的一个分量；</li>
<li>$t^m[Y]$表示$S$中$t^m$元组的对应于属性$Y$的一个分量。</li>
</ul>
<p>$\theta$连接也可以表示为：</p>
<p>$$
R \mathop{\Join}\limits_{i \theta j} S = \{ t| (t=&lt;t^n,t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[i] \ \theta \ t^m[j]) \}
$$</p>
<p>其中，</p>
<ul>
<li>
<p>$i=1,2,3,\cdots,n$；</p>
</li>
<li>
<p>$j=1,2,3,\cdots,m$；</p>
</li>
<li>
<p>$i \theta j$：</p>
<p>从两个关系$R$和$S$中选取$R$的第$i$列和$S$的第$j$列之间满足$\theta$运算的元组进行连接。</p>
</li>
</ul>
<p>$\theta$连接可以由基本的关系运算笛卡儿积和选取运算导出。因此，$\theta$连接可表示为：</p>
<p>$$
R \mathop{\Join}\limits_{X \theta Y} S = \sigma_{X \theta Y}(R \times S)
$$</p>
<p>或：</p>
<p>$$
R \mathop{\Join}\limits_{i \theta j} S = \sigma_{i \theta j}(R \times S)
$$</p>
</li>
<li>
<p><strong>等值连接</strong>：当$\theta$为“=”时，称之为等值连接，记为$R \mathop{\Join}\limits_{i = j} S$，其形式定义如下：</p>
<p>$$
R \mathop{\Join}\limits_{i = j} S = \{ t| (t=&lt;t^n,t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (t^n[i] = t^m[j]) \}
$$</p>
</li>
<li>
<p>$F$连接：从关系$R$和$S$的笛卡尔积中选取属性值满足某一公式$F$的元组，记为$\mathop{\Join}\limits_{F}$。</p>
<p>$F$是形为$F_1 \wedge F_2 \wedge \cdots \wedge F_n$的公式，每个$F_p$是形为$i \theta j$的式子。</p>
</li>
<li>
<p><strong>自然连接</strong>：自然连接是一种特殊的等值连接，它要求两个关系中<u>进行比较的分量必须是相同的属性组</u>，并且在结果集中<u>将重复属性列去掉</u>。</p>
<p>若：</p>
<ul>
<li>
<p>$t^n \in R$，$t^m \in S$；</p>
</li>
<li>
<p>$R$和$S$具有相同的属性组$B$，且$B=(B_1,B_2,,B_k)$；</p>
</li>
<li>
<p>假定$R$关系的属性：</p>
<p>$$
A_1,A_2,\cdots,A_{n-k},B_1,B_2,\cdots,B_k
$$</p>
</li>
<li>
<p>$S$关系的属性：</p>
<p>$$
B_1,B2,\cdots,B_k,B_{k+1},B_{k+2},\cdots,B_m
$$</p>
</li>
</ul>
<p>自然连接可以记为$R \Join S$,其形式定义如下：</p>
<p>$$
R \Join S = \{ t| (t = &lt;t^n, t^m&gt;) \wedge (t^n \in R) \wedge (t^m \in S) \wedge (R.B_1 = S.B_1) \wedge (R.B_2 = S.B_2) \wedge \cdots \wedge (R.B_k = S.B_k) \}
$$</p>
<blockquote>
<p>一般连接是从关系的水平方向运算，而自然连接<u>不仅要从关系的水平方向运算，而且要从关系的垂直方向运算</u>（去掉重复属性）。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><strong>外连接</strong>（Outer Jion）：外连接运算是连接运算的扩展，可以处理由于连接运算而缺失的信息。</p>
<p>外连接运算有3种：</p>
<ul>
<li>
<p><strong>左外连接</strong>（Left Outer Jion，⟕）：取出左侧关系中所有与右侧关系中任一元组都不匹配的元组，用空值$null$充填所有来自右侧关系的属性，构成新的元组，将其加入自然连接的结果中。</p>
</li>
<li>
<p><strong>右外连接</strong>（Right Outer Jion，⟖）：取出右侧关系中所有与左侧关系中任一元组都不匹配的元组，用空值$null$填充所有来自左侧关系的属性，构成新的元组，将其加入自然连接的结果中。</p>
</li>
<li>
<p><strong>全外连接</strong>（Full Outer Jion，⟗）。完成左外连接和右外连接的操作。即填充左侧关系中所有与右侧关系中任一元组都不匹配的元组，并填充右侧关系中所有与左侧关系中任一元组都不匹配的元组，将产生的新元组加入自然连接的结果中。</p>
</li>
</ul>
<p><picture><img class="img-fluid " alt="" src="/docs/ruan-she/data-base/uTools_1681454087063.png" loading="lazy" width="762" height="575" />
</picture>

</p>
</li>
<li>
<p><strong>除</strong>（Division）：给定关系$R(X,Y)$和$S(Y,Z)$，$X、Y、Z$为属性组。$R \div S$应当满足元组在$X$上的分量值$x$的象集$Y_x$包含关系$S$在属性组$Y$上投影的集合。其形式定义如下：</p>
<p>$$
R \div S = \{ t^n[X] | (t^n \in R) \wedge (\pi_y (S) \subseteq Y_x) \}
$$</p>
<p>其中，$Y_x$为$x$在$R$中的象集，$x=t^n[X]$，且$R \div S$的结果集的属性组为$X$。</p>
<blockquote>
<p>除运算是同时从关系的水平方向和垂直方向进行运算。</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="sql-语句" data-numberify>SQL 语句<a class="anchor ms-1" href="#sql-语句"></a></h1>
<p><strong>SQL</strong>（<strong>Structured Query Language</strong>，发音为 sequal）是一种专门用来与数据库沟通的语言。通过 SQL，用户可以对数据库进行各种操作。</p>
<blockquote>
<p>标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSISQL。</p>
<p>查看更多 <a href="../sql-%e8%af%ad%e5%8f%a5">SQL语句</a> 相关内容。</p>
</blockquote>
<h2 id="分类" data-numberify>分类<a class="anchor ms-1" href="#分类"></a></h2>
<ol>
<li>
<p><strong>DDL</strong>（<strong>Data Definition Language</strong>，<strong>数据定义语言</strong>）：用来定义数据库对象：数据库，表，列等。</p>
<p>关键字：<code>CREATE</code>、<code>DROP</code>、<code>ALTER</code> 等。</p>
</li>
<li>
<p><strong>DML</strong>（<strong>Data Manipulation Language</strong>，<strong>数据操作语言</strong>）：用来对数据库中表的数据进行增删改。</p>
<p>关键字：<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code> 等。</p>
</li>
<li>
<p><strong>DQL</strong>（<strong>Data Query Language</strong>，<strong>数据查询语言</strong>）：用来查询数据库中表的记录。</p>
<p>关键字：<code>SELECT</code>等。</p>
</li>
<li>
<p><strong>DCL</strong>（<strong>Data Control Language</strong>，<strong>数据控制语言</strong>）：用来定义数据库的访问权限和安全级别，及创建用户。</p>
</li>
</ol>
<h2 id="数据定义语言ddl" data-numberify>数据定义语言（DDL）<a class="anchor ms-1" href="#数据定义语言ddl"></a></h2>
<p><code>CREATE</code>——创建：</p>
<ul>
<li>
<p>建立数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="err">数据库名</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>建立基本表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="err">列名</span><span class="w">    </span><span class="err">数据类型</span><span class="w"> </span><span class="p">[</span><span class="err">列级完整性约束条件</span><span class="p">],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="err">表级完整性约束条件</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>完整性约束有3种子句：</p>
<ul>
<li><code>PRIMARY KEY</code>：主键约束；</li>
<li><code>CHECK</code>：检查约束；</li>
<li><code>FOREIGN KEY</code>：外键约束；</li>
<li><code>NOT NULL</code>：非空约束；</li>
<li><code>UNIQUE</code>：唯一约束；</li>
<li><code>DEFAULT</code>：默认约束。</li>
</ul>
<p>定义列时使用的基本数据类型如下：</p>
<ul>
<li><code>NTEGER</code>：整数（也可写成<code>INT</code>）。</li>
<li><code>FLOAT(n)</code>：浮点数，精度至少为n位数字。</li>
<li><code>NUMERIC(p,d)</code>：定点数，由p位数字（不包括符号、小数点）组成，小数点后面有d位数字（也可写成<code>DECIMAL(p,d)</code>或<code>DEC(p,d)</code>）。</li>
<li><code>CHAR(n)</code>：长度为n的定长字符串。</li>
<li><code>DATETIME</code>：日期时间型。</li>
</ul>
</li>
</ul>
<p><code>ALTER TABLE</code>——修改表结构：</p>
<ul>
<li>
<p>增加新列：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="err">表名</span><span class="w"> </span><span class="k">ADD</span><span class="w"> </span><span class="err">列名</span><span class="w"> </span><span class="err">类型</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>修改列的定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="err">表名</span><span class="w"> </span><span class="k">ALTER</span><span class="w"> </span><span class="k">COLUMN</span><span class="w"> </span><span class="err">列名</span><span class="w"> </span><span class="err">新类型</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>删除列：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="err">表名</span><span class="w"> </span><span class="k">DROP</span><span class="w"> </span><span class="k">COLUMN</span><span class="w"> </span><span class="err">列名</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
<p><code>DROP TABLE</code>——删除基本表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="err">表名</span><span class="w">
</span></span></span></code></pre></div><h2 id="数据操纵语言dml" data-numberify>数据操纵语言（DML）<a class="anchor ms-1" href="#数据操纵语言dml"></a></h2>
<p><code>INSERT INTO</code>——插入：</p>
<ul>
<li>
<p>直接插入元组值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="err">表名（列名序列）</span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="err">元组值</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><p>或者：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="err">表名</span><span class="w"> </span><span class="p">(</span><span class="err">列名</span><span class="w"> </span><span class="err">序列</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="k">TABLE</span><span class="w"> </span><span class="p">(</span><span class="err">元组值</span><span class="p">),</span><span class="w"> </span><span class="p">(</span><span class="err">元组值</span><span class="p">),</span><span class="w"> </span><span class="p">...)</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>插入一个查询的结果值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="err">表名</span><span class="w"> </span><span class="p">(</span><span class="err">列名序列</span><span class="p">)</span><span class="w"> </span><span class="k">SELECT</span><span class="w"> </span><span class="err">查询语句</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
<p><code>DELETE FROM</code>——删除：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="err">表名</span><span class="w"> </span><span class="p">[</span><span class="k">WHERE</span><span class="w"> </span><span class="err">条件表达式</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><p><code>UPDATE</code>——修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">UPDATE</span><span class="w"> </span><span class="err">表名</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SET</span><span class="w"> </span><span class="err">列名</span><span class="o">=</span><span class="err">值表达式</span><span class="p">[,</span><span class="w"> </span><span class="err">列名</span><span class="o">=</span><span class="err">值表达式</span><span class="p">...]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="n">WHERE条件表达式</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><h2 id="数据查询语言dql" data-numberify>数据查询语言（DQL）<a class="anchor ms-1" href="#数据查询语言dql"></a></h2>
<p><code>SELECT</code>——查询：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="err">目标表的列名或列表达式序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="err">关系名表序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">WHERE</span><span class="w"> </span><span class="err">行条件表达式</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="err">列名序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">HAVING</span><span class="w"> </span><span class="err">组条件表达式</span><span class="p">]]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="err">列名</span><span class="p">[</span><span class="k">ASC</span><span class="o">|</span><span class="k">DESC</span><span class="p">]...]</span><span class="w">
</span></span></span></code></pre></div><h3 id="where-条件查询" data-numberify>WHERE 条件查询<a class="anchor ms-1" href="#where-条件查询"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="err">目标表的列名或列表达式序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="err">关系名表序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="err">行条件表达式</span><span class="w">
</span></span></span></code></pre></div><p>运算符：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>说明</strong></th>
<th><strong>运算符</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>=</code></td>
<td>等于</td>
<td><code>&gt;</code></td>
<td>大于</td>
</tr>
<tr>
<td><code>&lt;&gt;</code> 或 <code>!=</code></td>
<td>不等于</td>
<td><code>&gt;=</code></td>
<td>大于等于</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>小于</td>
<td><code>!&gt;</code></td>
<td>不大于</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>小于等于</td>
<td><code>BETWEEN</code></td>
<td>范围在指定的两个值之间</td>
</tr>
<tr>
<td><code>!&lt;</code></td>
<td>不小于</td>
<td><code>IS NULL</code></td>
<td>为 NULL 的值</td>
</tr>
<tr>
<td><code>IS NOT NULL</code></td>
<td>不为 NULL 的值</td>
<td><code>AND</code></td>
<td>逻辑与</td>
</tr>
<tr>
<td><code>OR</code></td>
<td>逻辑或</td>
<td><code>NOT</code>逻辑非</td>
<td></td>
</tr>
<tr>
<td><code>IN</code></td>
<td>匹配包含在集合中的值</td>
<td><code>NOT IN</code></td>
<td>指定不包含在集合中的值</td>
</tr>
<tr>
<td><code>LIKE</code></td>
<td>字符模糊配对</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><code>LIKE</code>字符模糊配对包含以下通配符：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="err">目标表的列名或列表达式序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="err">关系名表序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">WHRER</span><span class="w"> </span><span class="err">列名</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;_ABC%&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><ul>
<li><code>%</code>：表示任何字符出现任意次数。</li>
<li><code>_</code>：表示匹配单个任意字符。</li>
</ul>
<h3 id="order-by-排序数据" data-numberify>ORDER BY 排序数据<a class="anchor ms-1" href="#order-by-排序数据"></a></h3>
<p><code>ORDER BY</code>可以指定多个列来排序，排序规则有：</p>
<table>
<thead>
<tr>
<th style="text-align:center">关键字</th>
<th style="text-align:center">规则说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>ASC</code></td>
<td style="text-align:center">升序排序</td>
</tr>
<tr>
<td style="text-align:center"><code>DESC</code></td>
<td style="text-align:center">降序排序</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="err">目标表的列名或列表达式序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="err">关系名表序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[...]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="err">列名</span><span class="w"> </span><span class="p">[</span><span class="k">ASC</span><span class="o">|</span><span class="k">DESC</span><span class="p">]</span><span class="w"> </span><span class="p">...]</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>ORDER BY子句必须是SELECT命令中的最后一个子句。</p>
</blockquote>
<h3 id="group-by-分组数据" data-numberify>GROUP BY 分组数据<a class="anchor ms-1" href="#group-by-分组数据"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="err">目标表的列名或列表达式序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="err">关系名表序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="err">列名序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">HAVING</span><span class="w"> </span><span class="err">组条件表达式</span><span class="p">]]</span><span class="w">
</span></span></span></code></pre></div><ul>
<li><code>HAVING</code>是<code>GROUP BY</code>的分组条件控制语句。</li>
<li><code>HAVING</code>的操作符和<code>WHERE</code>相同。</li>
<li>被<code>WHERE</code>过滤掉的记录并不会出现在分组中。</li>
</ul>
<h3 id="聚合函数" data-numberify>聚合函数<a class="anchor ms-1" href="#聚合函数"></a></h3>
<p>聚合函数实现数据统计等功能。</p>
<p>函数名|功能
<code>AVG</code>|计算一个数值型表达式的平均值
<code>COUNT</code>|计算指定表达式中选择的项数，<code>COUNT(*)</code>统计查询输出的行数
<code>MIN</code>|计算指定表达式中的最小值
<code>MAX</code>|计算指定表达式中的最大值
<code>SUM</code>|计算指定表达式中的数值总和
<code>STDEV</code>|计算指定表达式中所有数据的标准差
<code>STDEVP</code>|计算总体标准差</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="err">目标表的列名或列表达式序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="err">关系名表序列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="err">使用了聚合函数的条件判断</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><p>或：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="err">聚合函数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="err">关系名表序列</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>聚合函数可以使用算数运算符。</p>
<p>聚合函数常与<code>GROUP BY</code>子句一起使用。</p>
</blockquote>
<h3 id="连接" data-numberify>连接<a class="anchor ms-1" href="#连接"></a></h3>
<table>
<thead>
<tr>
<th style="text-align:center">连接符号</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>INNER JOIN</code></td>
<td style="text-align:center">内连接（默认）。<br>内连接又包括等值连接、非等值连接和自连接。</td>
</tr>
<tr>
<td style="text-align:center"><code>OUTER JOIN</code></td>
<td style="text-align:center">外连接。<br>又包括：<br><code>LEFT OUTER JOIN</code>（左外连接）；<br><code>RIGHT OUTER JOIN</code>（右外连接）；<br><code>FULL OUTER JOIN</code>（全外连接）</td>
</tr>
</tbody>
</table>
<h3 id="子查询" data-numberify>子查询<a class="anchor ms-1" href="#子查询"></a></h3>
<p>子查询是指将<code>SELECT</code>作为其它语句的子句使用。例如在<code>WHERE</code>、<code>FROM</code>中使用<code>SELECT</code>。</p>
<h2 id="数据控制语言dcl" data-numberify>数据控制语言（DCL）<a class="anchor ms-1" href="#数据控制语言dcl"></a></h2>
<p>数据控制控制的是<strong>用户对数据的存储访问权力</strong>，是由DBA决定的。但是，某个用户对某类数据具有何种权利，是个<strong>政策问题</strong>而不是技术问题。</p>
<p>授权语句格式（<code>GRANT</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">GRANT</span><span class="w"> </span><span class="o">&lt;</span><span class="err">权限</span><span class="o">&gt;</span><span class="p">[,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">权限</span><span class="o">&gt;</span><span class="p">]</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">ON</span><span class="w"> </span><span class="o">&lt;</span><span class="err">对象类型</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">对象名</span><span class="o">&gt;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">TO</span><span class="o">&lt;</span><span class="err">用户</span><span class="o">&gt;</span><span class="p">[,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">用户</span><span class="o">&gt;</span><span class="p">]...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">WITH</span><span class="w"> </span><span class="k">GRANT</span><span class="w"> </span><span class="k">OPTION</span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><p>不同类型的操作对象有不同的操作权限，常见的操作权限如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">对象</th>
<th style="text-align:center">对象类型</th>
<th style="text-align:left">操作权限</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">属性列</td>
<td style="text-align:center"><code>TABLE</code></td>
<td style="text-align:left"><code>SELECT</code>、<br><code>INSERT</code>、<br><code>UPDATE</code>、<br><code>DELETE</code>、<br><code>ALL PRIVILEGES</code></td>
</tr>
<tr>
<td style="text-align:center">视图</td>
<td style="text-align:center"><code>TABLE</code></td>
<td style="text-align:left"><code>SELECT</code>、<br><code>INSERT</code>、<br><code>UPDATE</code>、<br><code>DELETE</code>、<br><code>ALL PRIVILEGES</code></td>
</tr>
<tr>
<td style="text-align:center">基本表</td>
<td style="text-align:center"><code>TABLE</code></td>
<td style="text-align:left"><code>SELECT</code>、<br><code>INSERT</code>、<br><code>UPDATE</code>、<br><code>DELETE</code>、<br><code>ALTER</code>、<br><code>INDEX</code>、<br><code>ALL PRIVILEGES</code></td>
</tr>
<tr>
<td style="text-align:center">数据库</td>
<td style="text-align:center"><code>DATABASE</code></td>
<td style="text-align:left"><code>CREATETAB</code></td>
</tr>
</tbody>
</table>
<ul>
<li>建立表的权限，可由DBA授予普通用户；</li>
<li><code>WITH GRANT OPTION</code>：表示获得了这些权限的用户还可以将权限赋给其他用户。</li>
</ul>
<p>收回权限语句格式（<code>REVOKE</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">REVOKE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">权限</span><span class="o">&gt;</span><span class="p">[,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">权限</span><span class="o">&gt;</span><span class="p">]...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">ON</span><span class="w"> </span><span class="o">&lt;</span><span class="err">对象类型</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">对象名</span><span class="o">&gt;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="o">&lt;</span><span class="err">用户</span><span class="o">&gt;</span><span class="p">[,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">用户</span><span class="o">&gt;</span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><h2 id="视图" data-numberify>视图<a class="anchor ms-1" href="#视图"></a></h2>
<p>视图是从一个或者多个基本表或视图中导出的虚拟表。</p>
<p>创建视图：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">VIEW</span><span class="w"> </span><span class="err">视图名</span><span class="w"> </span><span class="p">(</span><span class="err">列表名</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="err">查询子句</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="k">WITH</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="k">OPTION</span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>子查询可以是任意复杂的<code>SELECT</code>语句，但通常不允许含有<code>ORDER BY</code>子句和<code>DISTINCT</code>短语。</li>
<li><code>WITH CHECK OPTION</code>：表示对<code>UPDATE</code>、<code>INSERT</code>、<code>DELETE</code>操作时保证更新、插入或删除的行满足视图定义中的谓词条件（即子查询中的条件表达式）。</li>
<li>组成视图的属性列名或者全部省略或者全部指定。如果省略属性列名，则隐含该视图由<code>SELECT</code>子查询目标列的主属性组成。</li>
<li>对视图进行的增改操作实际上是对基本表进行操作。</li>
</ul>
<p>删除视图：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">VIEW</span><span class="w"> </span><span class="err">视图名</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h2 id="索引" data-numberify>索引<a class="anchor ms-1" href="#索引"></a></h2>
<p>数据库中的索引是<u>某个表中一列或者若干列值的集合</u>和<u>相应的指向表中物理标识这些值的数据页的逻辑指针清单</u>。</p>
<p>索引分为：</p>
<ul>
<li>聚集索引：指索引表中索引项的顺序与表中记录的物理顺序一致的索引；</li>
<li>非聚集索引。</li>
</ul>
<blockquote>
<p>对数据库表创建和删除索引，修改的是数据库的内模式。</p>
</blockquote>
<hr>
<h1 id="关系数据库的规范化" data-numberify>关系数据库的规范化<a class="anchor ms-1" href="#关系数据库的规范化"></a></h1>
<h2 id="关系模式" data-numberify>关系模式<a class="anchor ms-1" href="#关系模式"></a></h2>
<p>一个关系模式应当是一个五元组（含关系名）：$R&lt;U,D,dom,F&gt;$。</p>
<p>其中：</p>
<ul>
<li>$R$：<u>关系名，是符号化的元祖语义；</u></li>
<li>$U$：<u>一组属性名；</u></li>
<li>$D$：属性组$U$中的属性来自域$D$；</li>
<li>$dom$：属性到域的映射；</li>
<li>$F$：<u>属性组$U$上的一组数据依赖（函数依赖）。</u></li>
</ul>
<p>$D$和$dom$对模式设计关系不大，通常将关系模式看作是一个三元组：$R&lt;U,F&gt;$。</p>
<p>当且仅当$U$上的一个关系$r$满足$F$时，称$r$为关系模式$R&lt;U,F&gt;$的一个关系。</p>
<h2 id="函数依赖" data-numberify>函数依赖<a class="anchor ms-1" href="#函数依赖"></a></h2>
<p>数据依赖是<u>通过一个关系中属性间值的相等与否</u>体现出来的<u>数据间的相互关系</u>。</p>
<ul>
<li>
<p><strong>函数依赖</strong>：设$R(U)$是属性集U上的关系模式，<u>$X$、$Y$是$U$的子集</u>。若对$R(U)$的任何一个可能的关系$r$，$r$中不可能存在两个元组在$X$上的属性值相等，而在$Y$上的属性值不等（即，<u>在关系$r$中，元组在$X$上的属性值相等，那么在$Y$上的属性值也相等</u>），则称<strong>X函数决定Y</strong>或<strong>Y函数依赖于X</strong>，记作$X \rightarrow Y$。</p>
<p>如，学生表中，$学号 \rightarrow 姓名$。</p>
<p>属性之间有3种关系，但并不是每一种都存在函数依赖。如果$X$和$Y$之间的对应关系是：</p>
<ul>
<li>$1-1$：存在函数依赖$X \rightarrow Y$和$Y \rightarrow Y$；</li>
<li>$n:1$：存在函数依赖$X \rightarrow Y$；</li>
<li>$n:m$：不存在函数依赖。</li>
</ul>
</li>
<li>
<p><strong>非平凡的函数依赖</strong>：$X \rightarrow Y$，但$Y \not\subseteq X$，则称$X \rightarrow Y$是非平凡的函数依赖。</p>
<p>例如，$姓名 \not\subseteq 学号$，则$学号 \rightarrow 姓名$是一个非平凡的函数依赖。</p>
</li>
<li>
<p><strong>平凡的函数依赖</strong>：如果$X \rightarrow Y$，但$Y \subseteq X$，则称$X \rightarrow Y$是平凡的函数依赖。</p>
<p>例如，$学号 \subset (学号,课程号)$，则$(学号,课程号) \rightarrow 学号$是一个平凡的函数依赖。</p>
</li>
<li>
<p><strong>完全函数依赖</strong>：在R(U)中，如果$X \rightarrow Y$，并且对于X的任何一个真子集$X&rsquo;$都有**$X&rsquo;$不能决定$Y$**，则称$Y$对$X$完全函数依赖，记作$X \stackrel{f}{\longrightarrow} Y$。</p>
<p>即需要由$X$的所有属性才能决定$Y$的，才能称为完全函数依赖。</p>
<p>如，$(学号,课程号) \rightarrow 成绩$。</p>
<p>如果$X$仅包含一个属性，那么此时必为完全函数依赖。</p>
</li>
<li>
<p><strong>部分函数依赖</strong>：如果$X \rightarrow Y$，但<strong>Y不完全函数依赖于X</strong>，则称Y对X部分函数依赖，记作$X \stackrel{P}{\longrightarrow} Y$。部分函数依赖也称为局部函数依赖。</p>
<p>如，（学号，班级代号） $\rightarrow$ 姓名，因为学号 $\rightarrow$ 姓名，所以（学号，班级代号） $\stackrel{P}{\longrightarrow}$ 姓名。</p>
</li>
<li>
<p><strong>传递依赖</strong>：在$R(U,F)$中（F是U上的一组函数依赖），如果$X \rightarrow Y,\ Y \not\subseteq X,\ Y \rightarrow Z$，则称<strong>Z对X传递依赖</strong>（$X \rightarrow Z$）。</p>
<p>即$X \stackrel{f}{\longrightarrow} Y$，且$Y \rightarrow Z$，则$X \rightarrow Z$。</p>
</li>
<li>
<p><strong>码</strong>：设$K$为$R(U,F)$中属性的组合，若$K \rightarrow U$，且对于$K$的任何一个真子集$K&rsquo;$都有$K&rsquo;$不能决定$U$，则$K$为$R$的候选码。</p>
<p>即$K \stackrel{f}{\rightarrow} U$，那么K是R的候选码。</p>
<p>若有多个候选码，则选一个作为主码（主键，主关键字）。候选码通常也称为<strong>候选关键字</strong>（候选键，键）。</p>
</li>
<li>
<p><strong>主属性</strong>和<strong>非主属性</strong>：<strong>包含在任何一个候选码中</strong>的属性称为主属性，否则称为非主属性。</p>
</li>
<li>
<p><strong>外码</strong>：若$R(U)$中的属性或属性组<u>$X$非$R$的码，但$X$是另一个关系的码</u>，则称$X$为外码。</p>
</li>
</ul>
<p><strong>函数依赖的公理系统</strong>（Armstrong公理系统）：</p>
<p>设关系模式$R(U,F)$，其中$U$为属性集，$F是$U$上的一组函数依赖，那么有以下推理规则：</p>
<ul>
<li>
<p><strong>自反律</strong>（A1）：若$Y \subseteq X \subseteq U$，则$X \rightarrow Y$为$F$所蕴涵（蕴含）。</p>
<p>如，（学号，姓名） $\rightarrow$ 姓名是函数依赖所蕴涵的。</p>
</li>
<li>
<p><strong>增广律</strong>（A2）：若$X \rightarrow Y$为F所蕴涵，且$Z \subseteq U$,则$XZ \rightarrow YZ$为$F$所蕴涵。</p>
<p>如，学号 $\rightarrow$ 姓名，班级 $\subseteq$ 学生表，那么（学号，班级） $\rightarrow$ （姓名，班级）是函数依赖所蕴涵的。</p>
</li>
<li>
<p><strong>传递律</strong>（A3）：若$X \rightarrow Y,\ Y \rightarrow Z$为$F$所蕴涵，则$X \rightarrow Z$为$F$所蕴涵。</p>
</li>
</ul>
<p>根据上述3条推理规则又可推出下述3条推理规则：</p>
<ul>
<li><strong>合并规则</strong>：若$X \rightarrow Y,\ X \rightarrow Z$，则$X \rightarrow YZ$为F所蕴涵。</li>
<li><strong>伪传递律</strong>：若$X \rightarrow Y,\ WY \rightarrow Z$，则$XW \rightarrow Z$为F所蕴涵。</li>
<li><strong>分解规则</strong>：若$X \rightarrow Y,\ Z \subseteq Y$，则$X \rightarrow Z$为F所蕴涵。</li>
</ul>
<blockquote>
<p>合并规则和分解规则是两个互逆的规则。即$X \rightarrow Y,\ X \rightarrow Z$，可得$X \rightarrow YZ$；那么$X \rightarrow YZ$，也可得$X \rightarrow Y,\ X \rightarrow Z$（因为$Y,Z \sub YZ$）。</p>
</blockquote>
<p>总结：</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:left">条件</th>
<th style="text-align:left">结论</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">函数依赖</td>
<td style="text-align:left">元组在$X$上的属性值相等，那么在$Y$上的属性值也相等</td>
<td style="text-align:left">$X$函数决定$Y$或$Y$函数依赖于$X$，记作$X \rightarrow Y$</td>
</tr>
<tr>
<td style="text-align:center">非平凡的函数依赖</td>
<td style="text-align:left">$X \rightarrow Y$，$Y \not\subseteq X$</td>
<td style="text-align:left">$X \rightarrow Y$是非平凡的函数依赖</td>
</tr>
<tr>
<td style="text-align:center">平凡的函数依赖</td>
<td style="text-align:left">$X \rightarrow Y$，$Y \subseteq X$</td>
<td style="text-align:left">$X \rightarrow Y$是平凡的函数依赖</td>
</tr>
<tr>
<td style="text-align:center">完全函数依赖</td>
<td style="text-align:left">$X \rightarrow Y$，$X&rsquo; \subset X$，$X&rsquo; \not\rightarrow Y$</td>
<td style="text-align:left">$Y$对$X$完全函数依赖，记作$X \stackrel{f}{\longrightarrow} Y$</td>
</tr>
<tr>
<td style="text-align:center">部分函数依赖（局部函数依赖）</td>
<td style="text-align:left">$X \rightarrow Y$，$X \stackrel{f}{\not\longrightarrow} Y$</td>
<td style="text-align:left">$Y$对$X$部分函数依赖，记作$X \stackrel{P}{\longrightarrow} Y$</td>
</tr>
<tr>
<td style="text-align:center">传递依赖</td>
<td style="text-align:left">$X \rightarrow Y$，$Y \not\subseteq X$，$Y \rightarrow Z$</td>
<td style="text-align:left">$Z$对$X$传递依赖</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:left">定义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">码（候选码，候选关键字）</td>
<td style="text-align:left">若$K \stackrel{f}{\rightarrow} U$，则$K$为$R$的候选码</td>
</tr>
<tr>
<td style="text-align:center">主属性</td>
<td style="text-align:left">包含在任何一个候选码中的属性</td>
</tr>
<tr>
<td style="text-align:center">非主属性</td>
<td style="text-align:left">不包含在任何一个候选码中的属性</td>
</tr>
<tr>
<td style="text-align:center">外码</td>
<td style="text-align:left">$X$非$R$的码，但$X$是另一个关系的码，则称$X$为外码</td>
</tr>
</tbody>
</table>
<p>Armstrong公理系统：</p>
<table>
<thead>
<tr>
<th style="text-align:center">定律</th>
<th style="text-align:left">条件</th>
<th style="text-align:left">F蕴含</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">自反律</td>
<td style="text-align:left">$Y \subseteq X \subseteq U$</td>
<td style="text-align:left">$X \rightarrow Y$</td>
</tr>
<tr>
<td style="text-align:center">增广律</td>
<td style="text-align:left">$X \rightarrow Y$，$Z \subseteq U$</td>
<td style="text-align:left">$XZ \rightarrow XZ$</td>
</tr>
<tr>
<td style="text-align:center">传递律</td>
<td style="text-align:left">$X \rightarrow Y,\ Y \rightarrow Z$</td>
<td style="text-align:left">$X \rightarrow Z$</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">规则</th>
<th style="text-align:left">条件</th>
<th style="text-align:left">F蕴含</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">合并规则</td>
<td style="text-align:left">$X \rightarrow Y,\ X \rightarrow Z$</td>
<td style="text-align:left">$X \rightarrow YZ$</td>
</tr>
<tr>
<td style="text-align:center">伪传递律</td>
<td style="text-align:left">$X \rightarrow Y,\ WY \rightarrow Z$</td>
<td style="text-align:left">$XW \rightarrow Z$</td>
</tr>
<tr>
<td style="text-align:center">分解规则</td>
<td style="text-align:left">$X \rightarrow Y,\ Z \subseteq Y$</td>
<td style="text-align:left">$X \rightarrow Z$</td>
</tr>
</tbody>
</table>
<h2 id="闭包计算" data-numberify>闭包计算<a class="anchor ms-1" href="#闭包计算"></a></h2>
<p>设关系模式$R&lt;U,F&gt;$，其中$U$为属性集，$F$是$U$上的一组函数依赖。称所有用Armstrong公理从F推出的函数依赖$X \rightarrow A_i$中，$A_i(X,A_i \subseteq U)$的属性集合为$X$的属性闭包，记为$X^{+}_{F}$或$X^{+}$。</p>
<p>定理：</p>
<p>设关系模式$R&lt;U,F&gt;$，其中$F$为函数依赖集，$X,Y \subseteq U$，则从$F$推出$X \rightarrow Y$的充要条件是$Y \subseteq X^{+}$。</p>
<blockquote>
<p>属性的闭包计算用于求主键。</p>
</blockquote>
<p>例如，给定关系$R(U,F)$，其中$U={A,B,C,D,E,H}$，$F={A \rightarrow B, B \rightarrow DH, A \rightarrow H, C \rightarrow E }$。</p>
<p>先根据$F$选取仅在$\rightarrow$左边出现的属性集（例如，$A$、$C$和$AC$）。根据选取的属性集进行闭包运算（先对$A$进行运算）：</p>
<p>$$
(A)^{+} \rightarrow (A \ BH)^{+} \rightarrow (AB \ D \ H)^{+} \rightarrow (ABDH)
$$</p>
<p>此时，$(ABDH)^{+}$无论再怎么推，结果都是$(ABDH)$，说明对$A$的闭包计算已经结束了，结果就是$(ABDH)$。</p>
<p>而$(ABDH) \neq U$，说明$A$并不是关系$R$的主键。</p>
<p>而对于$C$的函数依赖仅有$C \rightarrow E$，所以此时应该对$(AC)$进行闭包运算：</p>
<p>$$
(AC)^{+} \rightarrow (ABDH \ CE)^{+} \rightarrow (ABCDEH)
$$</p>
<p>此时对$(AC)$的闭包计算结果$(ABCDEH) = U$，说明$(AC)$是关系$R$的主键。</p>
<h2 id="关系模式的分解" data-numberify>关系模式的分解<a class="anchor ms-1" href="#关系模式的分解"></a></h2>
<p>对存在<strong>数据冗余</strong>、<strong>插入异常</strong>、<strong>删除异常</strong>问题的关系模式，应采取<u>将一个关系模式分解为多个关系模式的方法进行处理</u>（原来存储在一个二维表内的数据就要分散到多个二维表中）。要求是分解后的二维表不能丢失分解前二维表的信息。</p>
<p>为使分解后的模式保持原模式所满足的特性，其基本要求是模式分解具有：</p>
<ul>
<li>无损连接性；</li>
<li>保持函数依赖性。</li>
</ul>
<h3 id="无损连接" data-numberify>无损连接<a class="anchor ms-1" href="#无损连接"></a></h3>
<p>无损连接性指的是对关系模式分解时，原关系模式下，任一合法的关系实例，在<u>分解之后应能通过<strong>自然连接</strong>运算恢复</u>起来。</p>
<p>设$\rho = \{ R_1&lt;U_1,F_1&gt;,\ R_2&lt;U_2,F_2&gt;,\ \cdots,\ R_k&lt;U_k,F_k&gt; \}$是关系模式$R&lt;U,F&gt;$的一个分解，如果对于$R$的任一满足$F$的关系$r$都有：</p>
<p>$$
r = \pi_{R1}(r) \Join \pi_{R2}(r) \Join \cdots \Join \pi_{Rk}(r)
$$</p>
<p>则称这个分解$\rho$是满足依赖集$F$的无损连接。</p>
<blockquote>
<ul>
<li>
<p>$\pi()$运算是投影运算。</p>
</li>
<li>
<p>$\Join$运算是自然连接运算。</p>
</li>
</ul>
<p>个人理解：</p>
<p>无损连接性就是指，关系模式拆分后（分成若干个小的关系模式，即$\rho$），$\rho$中的关系模式从总体上看，保持着与$R$一致的连接。$\rho$中的关系模式通过自然连接保持着原本的关系模式。<u>重要的是$rho$中的关系模式可以通过<strong>自然连接</strong>恢复到原关系模式。</u></p>
</blockquote>
<p>验证无损连接的充要条件：</p>
<p>如果$R$的分解为$\rho = \{R_1,R_2\}$，$F$为$R$所满足的函数依赖集合，则分解$\rho$具有无损连接性的充分必要条件为：</p>
<p>$$
R_1 \cap R_2 \rightarrow (R_1 - R_2) \\
或 \\
R_1 \cap R_2 \rightarrow (R_2 - R_1)
$$</p>
<p>无损连接的判定算法：</p>
<ol>
<li>
<p>构造一个$k$行$n$列的表：</p>
<ul>
<li>每一列对应一个属性$A_j$；</li>
<li>每一行对应分解$rho$中的一个关系模式$R_i&lt;U_i, F_i&gt;$。</li>
</ul>
<p>若属性$A_j$属于$U_i$，则在第$i$行第$j$列上放符号$a_j$，否则放符号$b_{ij}$。</p>
</li>
<li>
<p>逐个检查$F$中的每一个函数依赖$FD_i$，并修改表中的元素：</p>
<p>取$F$中一个函数依赖$X_i \rightarrow A_j$（$X_i$要属于$rho$中的任一关系），考虑这些行中第$j$列元素：</p>
<ul>
<li>若其中有$a_j$，则全部改为$a_j$；</li>
<li>否则全部改为$b_{mj}$，$m$为这些行的行号最小值。</li>
</ul>
<p>若某一行变成了$(a_1, a_2, \cdots, a_n)$，则分解$rho$具有无损连接性，算法终止。</p>
</li>
<li>
<p>比较扫描前后，表有无变化。</p>
<ul>
<li>如有变化，则返回第2步；</li>
<li>否则算法终止，分解$rho$是有损连接。</li>
</ul>
</li>
</ol>
<p>例如，关系模式$R&lt;U,F&gt;$，其中，$U = \{ A, B, C \}$，$F = \{ A \rightarrow B, C \rightarrow B \}$。</p>
<p>判断$\rho = \{ AC, BC \}$是否具有无损连接性：</p>
<ol>
<li>
<p>构造初始表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$R_i$</th>
<th style="text-align:center">$A$</th>
<th style="text-align:center">$B$</th>
<th style="text-align:center">$C$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AC</td>
<td style="text-align:center">$a_1$</td>
<td style="text-align:center">$b_{12}$</td>
<td style="text-align:center">$a_3</td>
</tr>
<tr>
<td style="text-align:center">BC</td>
<td style="text-align:center">$b_{21}$</td>
<td style="text-align:center">$a_2$</td>
<td style="text-align:center">$a_3$</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>考察$A \rightarrow B$，将$AC$行的$B$列改为$a_2$：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$R_i$</th>
<th style="text-align:center">$A$</th>
<th style="text-align:center">$B$</th>
<th style="text-align:center">$C$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AC</td>
<td style="text-align:center">$a_1$</td>
<td style="text-align:center">$a_2$</td>
<td style="text-align:center">$a_3</td>
</tr>
<tr>
<td style="text-align:center">BC</td>
<td style="text-align:center">$b_{21}$</td>
<td style="text-align:center">$a_2$</td>
<td style="text-align:center">$a_3$</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>从上表中看出$AC$行为${a_1, a_2, a_3}$，所以判断该关系模式具有无损连接性。</p>
</li>
</ol>
<h3 id="保持函数依赖" data-numberify>保持函数依赖<a class="anchor ms-1" href="#保持函数依赖"></a></h3>
<p>设有关系模式$R$，$F$是$R$的函数依赖集，$Z$是$R$的一个属性集合，则称$Z$所涉及到的$F^+$中所有函数依赖为$F$在$Z$上的投影，即为$\pi_Z(F)$，有：</p>
<p>$$
\pi_Z(F) = \{ x \rightarrow y | (x \rightarrow y) \in F^+ 且 xy \subseteq z \}
$$</p>
<p>设关系模式$R$的一个分解$\rho = \{ R_1&lt;U_1,F_1&gt;,\ R_2&lt;U_2,F_2&gt;,\ \cdots,\ R_k&lt;U_k,F_k&gt; \}$，$F$是$R$的依赖集，如果$F$等价于$\pi_{R1}(F) \cup \pi_{R2}(F) \cup \cdots \cup \pi_{Rk}(F)$，则称分解$\rho$具有依赖保持性。</p>
<blockquote>
<p>该定义中的&quot;等价&quot;并不代表相等，而是$F$中所包含的函数依赖在分解的函数依赖中也被包含，或者在分解的函数依赖中能被推出。</p>
</blockquote>
<ul>
<li>一个无损连接分解不一定具有依赖保持性；</li>
<li>一个依赖保持性分解不一定具有无损连接性。</li>
</ul>
<h2 id="范式" data-numberify>范式<a class="anchor ms-1" href="#范式"></a></h2>
<p>关系数据库中的<u>关系必须满足一定的规范化要求</u>，对于不同的规范化程度可用范式来衡量。</p>
<p><u>范式是符合某一种级别的关系模式的集合</u>，是衡量关系模式规范化程度的标准，达到范式的关系才是规范化的。</p>
<p>一个低一级范式的关系模式，通过模式分解可以转换为若干个高一级范式的关系模式的集合，这个过程称为规范化。</p>
<p>主要有6种范式，高一级范式是在低一级范式的基础上进一步满足一些要求，按要求从低到高分为：</p>
<ol>
<li>
<p>第一范式（1NF）：若关系模式R的<u>每一个分量是不可再分的数据项</u>，则关系模式R属于第一范式。</p>
<p>如，关系模式$R&lt;U,F&gt;$：</p>
<p>$$
U = \{ 学号,姓名,学院,院长,课程号,课程名,成绩 \} \\
F = \{ 学号 \rightarrow 姓名,学号 \rightarrow 学院,学院 \rightarrow 院长,课程号 \rightarrow 课程名,(学号,课程号) \rightarrow 成绩 \}
$$</p>
<p>1NF可能存在的问题：</p>
<ul>
<li>
<p><strong>数据冗余</strong>：数据的冗余度大，R中可能出现多个元组在多个属性集中值相同；</p>
</li>
<li>
<p><strong>修改异常</strong>：引起修改操作的不一致性，修改一条记录可能需要修改其他多条记录才能保持数据一致性（由数据冗余引起）；</p>
</li>
<li>
<p><strong>插入异常</strong>：主码不能取空值或部分空值，会出现插入异常；</p>
</li>
<li>
<p><strong>删除异常</strong>：本该删除但又客观存在的元组，会出现删除异常。</p>
<p>即，删除掉的数据可能包含着其他本不该被删除的属性。</p>
</li>
</ul>
<p>问题的原因是1NF中可能存在<u>部分函数依赖</u>。</p>
</li>
<li>
<p>第二范式（2NF）：若关系模式$R \in 1NF$，且<u>每一个非主属性完全依赖于码</u>，则关系模式$R \in 2NF$。</p>
<p>即当<u>1NF消除了对主键的部分函数依赖后就能满足2NF</u>。</p>
<p>例如，$学号 \rightarrow 学院$，即$(学号,课程号) \stackrel{P}{\rightarrow} 学院$（部分依赖于码），所以$R \not\in 2NF$。</p>
<p><u>模式的分解需要保持函数依赖。</u>根据$F$，将$R$分解为：</p>
<ul>
<li>
<p>$R_1&lt;U_1,F_1&gt;$：</p>
<p>$$
U_1 = \{ 学号,姓名,学院,院长 \} \\
F_1 = \{ 学号 \rightarrow 姓名,学号 \rightarrow 学院,学院 \rightarrow 院长 \}
$$</p>
</li>
<li>
<p>$R_2&lt;U_2,F_2&gt;$：</p>
<p>$$
U_2 = \{ 课程号,课程名 \} \\
F_2 = \{ 课程号 \rightarrow 课程名 \}
$$</p>
</li>
<li>
<p>$R_3&lt;U_3,F_3&gt;$：</p>
<p>$$
U_3 = \{ 学号,课程号,成绩 \} \\
F_3 = \{ (学号,课程号) \rightarrow 成绩 \}</p>
</li>
</ul>
<p>则，$R1 \in 2NF$，$R2 \in 2NF$，$R3 \in 2NF$。</p>
<blockquote>
<p>2NF可能依然会存在数据冗余、修改异常、插入异常删除异常等问题。</p>
</blockquote>
</li>
<li>
<p>第三范式（3NF）：若关系模式$R(R \in 2NF)$中<u>任何一个非主属性都不传递函数依赖于码</u>。</p>
<p>若关系模式$R&lt;U,F&gt;$（$U$为关系集，$F$为函数依赖集）中不存在这样的码$X$，使得：</p>
<ul>
<li>$X \rightarrow Y(Y \not\rightarrow X)$，</li>
<li>$Y \rightarrow Z$，</li>
</ul>
<p>则关系模式$R \in 3NF$，其中：</p>
<ul>
<li>$Y$为属性组，</li>
<li>$Z(Z \not\subseteq Y)$为非主属性。</li>
</ul>
<p>即当<u>2NF消除了非主属性对主键的传递函数依赖</u>，则称为3NF。</p>
<p>如，$R_1$中有$学号 \rightarrow 学院$，$学院 \rightarrow 院长$（非主属性&quot;院长&quot;传递依赖于主键&quot;学号&quot;）。可将$R_1$分解为：</p>
<ul>
<li>
<p>$R_{11}&lt;U_{11},F_{11}&gt;$：</p>
<p>$$
U_{11} = \{ 学号,姓名,学院 \} \\
F_{11} = \{ 学号 \rightarrow 姓名, 学号 \rightarrow 学院 \}
$$</p>
</li>
<li>
<p>$R_{12}&lt;U_{12},F_{12}&gt;$：</p>
<p>$$
U_{12} = \{ 学院,院长 \} \\
F_{12} = \{ 学院 \rightarrow 院长 \}
$$</p>
</li>
</ul>
</li>
<li>
<p>BC范式（BCNF）：关系模式$R&lt;U,F&gt;$属于BCNF（$R$首先得满足3NF），当且仅当其$F$中<u>每个依赖的决定因素必定包含R的某个候选码</u>。</p>
<p>由BCNF的定义可以得到结论，一个满足BCNF的关系模式有：</p>
<ul>
<li>
<p>满足3NF。</p>
</li>
<li>
<p>所有<u>非主属性</u>对每一个<u>码</u>都是<u>完全函数依赖</u>。</p>
<p>$$
码 \stackrel{f}{\longrightarrow} 非主属性
$$</p>
</li>
<li>
<p>所有的<u>主属性对每一个</u>不包含它的码</u>，也是<u>完全函数依赖</u>。</p>
</li>
<li>
<p>没有任何属性完全函数依赖于非码的任何一组属性。</p>
</li>
</ul>
<p>一个满足BCNF的关系模式R己<u>消除了<strong>插入</strong>和<strong>删除异常</strong></u>。</p>
</li>
<li>
<p>第四范式（4NF）：</p>
<p>多值依赖：</p>
<p>给定的关系模式$R(U,F)$：</p>
<ul>
<li>$X,Y,Z \subseteq U$，</li>
<li>$Z=U-X-Y$（$Z$是$X \cup Y$的差集）。</li>
</ul>
<p>当且仅当对$R$的任一关系$r$，给定的一对$(x,z)$值，有一组$Y$的值，这组值仅仅决定于$x$值而与$z$值无关。则关系模式$R$中的多值依赖$X \rightarrow\rightarrow Y$成立。</p>
<p>平凡的多值依赖：</p>
<ul>
<li>$X \rightarrow\rightarrow Y$成立，</li>
<li>$Z = \Phi$，</li>
</ul>
<p>则$X \rightarrow\rightarrow Y$为平凡的多值依赖。</p>
<p>例如，课程$\rightarrow\rightarrow$任课老师，课程$\rightarrow\rightarrow$参考书。</p>
<p><picture><img class="img-fluid " alt="多值依赖表示例" src="/docs/ruan-she/data-base/uTools_1681986736869.png" loading="lazy" width="401" height="168" />
</picture>

</p>
<p>4NF定义：</p>
<p>设有一关系模式$R(U,F)$是1NF，如果对于$R$的每个<u>非平凡多值依赖</u>$X \rightarrow\rightarrow Y(Y \not\subseteq X)$，<u>$X$都包含了$R$的一个候选码</u>，则称$R$是第四范式，记为4NF。</p>
<p>例如，课程$\rightarrow\rightarrow$任课老师，课程$\rightarrow\rightarrow$参考书都是非平凡多值依赖，而课程不是码，所以不属于4NF。</p>
</li>
<li>
<p>第五范式（5NF）。</p>
</li>
</ol>
<p>范式之间的关系：</p>
<p>$$
5NF \sub 4NF \sub BCNF \sub 3NF \sub 2NF \sub 1NF
$$</p>
<p><picture><img class="img-fluid " alt="规范化范式的包含关系" src="/docs/ruan-she/data-base/uTools_1681894653450.png" loading="lazy" width="564" height="309" />
</picture>

</p>
<p>3NF和BCNE它们是进行规范化的主要目标。</p>
<p>1NF到4NF之间的转换关系：</p>
<table>
<thead>
<tr>
<th style="text-align:center">范式</th>
<th style="text-align:left">转换关系</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1NF</td>
<td style="text-align:left">每一个分量是不可再分的数据项</td>
</tr>
<tr>
<td style="text-align:center">2NF</td>
<td style="text-align:left">1NF消除了部分函数依赖后满足2NF</td>
</tr>
<tr>
<td style="text-align:center">3NF</td>
<td style="text-align:left">2NF消除了非主属性对码的传递函数依赖后满足3NF</td>
</tr>
<tr>
<td style="text-align:center">BCNF</td>
<td style="text-align:left">3NF消除了主属性对码的部分和传递函数依赖后满足BCNF</td>
</tr>
<tr>
<td style="text-align:center">4NF</td>
<td style="text-align:left">BCNF消除非平凡且非函数依赖的多值依赖后满足4NF</td>
</tr>
</tbody>
</table>
<p><picture><img class="img-fluid " alt="规范化步骤" src="/docs/ruan-she/data-base/uTools_1681988070233.png" loading="lazy" width="288" height="303" />
</picture>

</p>
<p>几种范式及其分解的性质：</p>
<table>
<thead>
<tr>
<th style="text-align:left">性质</th>
<th style="text-align:center">3NF</th>
<th style="text-align:center">BCNF</th>
<th style="text-align:center">4NF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">消除函数依赖带来冗余</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:left">消除多值函数依赖带来冗余</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:left">保持函数依赖</td>
<td style="text-align:center">是</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:left">保持多值函数依赖</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="数据库设计" data-numberify>数据库设计<a class="anchor ms-1" href="#数据库设计"></a></h1>
<p>新奥尔良（New Orleans）法式目前公认的数据库设计方法，它将数据库设计分为以下几个阶段：</p>
<ol>
<li>用户需求分析</li>
<li>概念结构设计</li>
<li>逻辑结构设计</li>
<li>物理结构设计</li>
</ol>
<p>这几个阶段之后是与数据库建立和运行有关的阶段：</p>
<ol>
<li>数据库实施</li>
<li>数据库运行和维护</li>
</ol>
<p><picture><img class="img-fluid " alt="数据库设计步骤" src="/docs/ruan-she/data-base/uTools_1682505975157.png" loading="lazy" width="382" height="711" />
</picture>

</p>
<h2 id="需求分析" data-numberify>需求分析<a class="anchor ms-1" href="#需求分析"></a></h2>
<p>需求分析是项目确定后，对数据库应用系统所要设计的<u>内容（数据）</u>和<u>功能（行为）</u>的整理和描述，是以用户的角度来认识系统。</p>
<p>需求分析是后面几个阶段，<u>逻辑结构设计</u>、<u>物理结构设计</u>以及<u>应用程序设计</u>的依据。</p>
<p>需求分析将收集到的零碎的、局部的数据分析整理后，建立<u>需求说明文档</u>、<u>数据字典</u>和<u>数据流程图</u>。</p>
<p>需求分析还包含：</p>
<ul>
<li>
<p>数据流分析：是对事务处理所需的原始数据的收集，及经过处理后所得数据及其流向。</p>
<p>使用数据流图（DFD）表示。DFD能指出数据的流向和需要进行的事物处理（不涉及如何处理）。</p>
</li>
<li>
<p>数据字典：是关于数据库中数据的描述，即元数据（不是数据本身）。</p>
<p>数据字典包括5个部分：</p>
<ul>
<li>数据项；</li>
<li>数据结构；</li>
<li>数据流；</li>
<li>数据存储；</li>
<li>加工。</li>
</ul>
</li>
</ul>
<p><u>系统需求说明书是需求分析阶段的成果</u>，主要包括<u>数据流图</u>、<u>数据字典</u>、<u>各种说明性表格</u>、<u>统计输出表和系统功能结构图</u>等。</p>
<p>需求分析阶段的工作：</p>
<p><picture><img class="img-fluid " alt="需求分析阶段的工作步骤" src="/docs/ruan-she/data-base/uTools_1682560887456.png" loading="lazy" width="646" height="291" />
</picture>

</p>
<h2 id="概念结构设计" data-numberify>概念结构设计<a class="anchor ms-1" href="#概念结构设计"></a></h2>
<p>概念设计阶段的目标是产生整体数据库概念结构，即概念模型，它是与DBMS无关的。</p>
<p>概念结构设计的方法：</p>
<ul>
<li>自顶向下</li>
<li>自底向上</li>
<li>逐步扩张</li>
<li>混合策略（自顶向下和自底向上相结合）</li>
</ul>
<p>概念结构是对现实世界的一种抽象，从数据库设计角度看，主要是数据抽象，一般有如下3种数据抽象：</p>
<ul>
<li>分类</li>
<li>聚集</li>
<li>概括</li>
</ul>
<p>局部视图设计就是对某个局部应用设计其分一R图，也称局部E-R图。其基本步骤如下：</p>
<p><picture><img class="img-fluid " alt="概念结构设计的工作步骤" src="/docs/ruan-she/data-base/uTools_1682560993863.png" loading="lazy" width="717" height="341" />
</picture>

</p>
<ol>
<li>确定局部结构范围；</li>
<li>定义实体；</li>
<li>联系定义；</li>
<li>属性分配。</li>
</ol>
<p>概念模型的建立采用E-R模型。</p>
<h3 id="e-r-模型" data-numberify>E-R 模型<a class="anchor ms-1" href="#e-r-模型"></a></h3>
<p>E-R模型用E-R图（ERD）表示，E-R图有以下几个成分：</p>
<ul>
<li>
<p><strong>实体</strong>：用<strong>矩形</strong>表示。</p>
</li>
<li>
<p><strong>联系</strong>：用<strong>棱形</strong>表示，并用无向边分别与有关实体连接起来，同时在无向边标注联系的类型（$1:1$，$1:n$ 或 $m:n$）。</p>
</li>
<li>
<p><strong>属性</strong>：用<strong>椭圆形</strong>表示，并用无向边将其与相应的实体连接起来</p>
<p>E-R模型中的属性有以下分类：</p>
<ul>
<li>
<p>简单属性和复合属性：</p>
<ul>
<li>简单属性是原子的、不可再分的；</li>
<li>复合属性可以细分为更小的部分。</li>
</ul>
</li>
<li>
<p>单值属性和多值属性：</p>
<ul>
<li>单值属性是一个属性对应一个值；</li>
<li>多值属性是一个属性对应一组值。</li>
</ul>
</li>
<li>
<p>NULL属性：实体在某个属性上没有值或属性值未知时，使用NULL值表示。</p>
</li>
<li>
<p>派生属性：派生属性可以从其他属性得来（通过运算等方式求出）。</p>
</li>
</ul>
</li>
</ul>
<p>扩充的E-R模型（用来表达更多具有特殊语义的成分）有以下成分：</p>
<ul>
<li>
<p><strong>弱实体</strong>：使用<strong>双线矩形框</strong>表示。将需要依赖其他实体存在的实体。</p>
<p>实体间的所有（Ownership，拥有）关系代表一个实体对另一些实体具有很强的依赖关系，即一个实体的存在必须以另一个实体为前提。</p>
<p>例如职工与家属的联系，家属总是属于某职工的（在关系模式中需要依赖职工而存在），所以家属是弱实体。</p>
</li>
<li>
<p><strong>特殊化</strong>：将一个实体集<u>按照某些特性区分为几个<strong>子实体</strong></u>。这种从普遍到特殊的过程即为特殊化。</p>
<p>子实体的图形表示如下：</p>
<p><picture><img class="img-fluid " alt="子实体" src="/docs/ruan-she/data-base/uTools_1684564987147.png" loading="lazy" width="256" height="145" />
</picture>

</p>
<p>子实体由称为子类，它会有一个超类，并且能继承超类的属性，超类的属性是实体集中所有子实体的相同属性。</p>
</li>
</ul>
<p>E-R图中的主要构件（包含扩充的E-R模型成分）：</p>
<p><picture><img class="img-fluid " alt="E-R图中的主要构件" src="/docs/ruan-she/data-base/uTools_1682508598814.png" loading="lazy" width="1035" height="391" />
</picture>

</p>
<h3 id="建立概念结构模型" data-numberify>建立概念结构模型<a class="anchor ms-1" href="#建立概念结构模型"></a></h3>
<p>建立概念结构模型的步骤如下：</p>
<ol>
<li>
<p>选择局部应用：</p>
<p>需求分析阶段得到的大量数据分散杂乱，许多数据会应用于不同的处理，数据与数据之间关联关系也较为复杂。要最终<u>确定实体、属性和联系，必须根据数据流图这一线索理清数据</u>。</p>
<p>数据流图是对业务处理过程从高层到底层的一级抽象：</p>
<ul>
<li>高层抽象流图一般反映系统的概貌，对数据的引用较为笼统；</li>
<li>底层又可能过于细致，不能体现数据的关联关系。</li>
</ul>
<p>因此要<u>选择适当层次的数据流图，让这一层的每一部分对应一个局部应用，实现某一项功能。从这一层入手，就能很好地设计<strong>分E-R图</strong></u>。</p>
</li>
<li>
<p>逐一设计分E-R图。</p>
</li>
<li>
<p>E-R图合并：</p>
<p>根据局部应用设计好各局部E-R图之后，就可以对各分E-R图进行合并。</p>
<p>合并的目的在于，在合并过程中解决分E-R图中相互存在的冲突。</p>
</li>
</ol>
<p>分E-R图之间的冲突主要有：</p>
<ul>
<li><strong>属性冲突</strong>：同一属性在不同的分E-R图上的属性类型、取值范围和数据单位等可能会不一致。</li>
<li><strong>命名冲突</strong>：相同意义的属性在不同的分E-R图上可能会有不同的命名。</li>
<li><strong>结构冲突</strong>：同一实体在不同的分E-R图中可能会有不同的属性；同一对象在某一分E-R图中被抽象为实体，而在另一分E-R图中又可能被抽象为属性，反之亦然。</li>
</ul>
<h2 id="逻辑结构设计" data-numberify>逻辑结构设计<a class="anchor ms-1" href="#逻辑结构设计"></a></h2>
<p>逻辑结构设计就是在概念结构设计的基础上进行数据模型设计，可以是层次模型、网状模型和关系模型。</p>
<p>通常是把概念模型转换成为<u>某个具体的数据库管理系统所支持的结构数据模型</u>（与DBMS有关）。即，将概念结构设计所得的E-R模型转换成关系模式。</p>
<p>逻辑结构设计的工作步骤：</p>
<p><picture><img class="img-fluid " alt="逻辑结构设计的工作步骤" src="/docs/ruan-she/data-base/uTools_1682577339219.png" loading="lazy" width="581" height="296" />
</picture>

</p>
<h3 id="e-r-模型转换关系模式" data-numberify>E-R 模型转换关系模式<a class="anchor ms-1" href="#e-r-模型转换关系模式"></a></h3>
<ol>
<li>
<p>实体向关系模式的转换：</p>
<p>将E-R图中的实体逐一转换成为一个关系模式：</p>
<ul>
<li>实体名：对应关系模式的名称；</li>
<li>实体的属性：转换成关系模式的属性；</li>
<li>实体标识符：关系的码（键）。</li>
</ul>
<p>超类和子类的转换：超类和子类定义为两个关系模式，将超类的主键加到子类中。</p>
</li>
<li>
<p>联系向关系模式的转换：</p>
<ul>
<li>
<p>一对一联系的转换：</p>
<p>有两种方式：</p>
<ul>
<li>
<p>方式1：将联系转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性包括该联系所关联的两个实体的码及联系的属性，关系的码取自任一方实体的码。</p>
<p>那么一个一对一联系需要转换成三个关系模式。</p>
</li>
<li>
<p>方式2（一般使用该方式）：将联系归并到关联的两个实体的任一方，给待归并的一方实体属性集中增加另一方实体的码和该联系的属性即可，归并后的实体码保持不变。</p>
<p>一个一对一联系仅需转换成两个关系模式。</p>
</li>
</ul>
<p>例如：</p>
<p><picture><img class="img-fluid " alt="联系向关系模式的转换示例" src="/docs/ruan-she/data-base/uTools_1682562445900.png" loading="lazy" width="304" height="358" />
</picture>

</p>
<ul>
<li>
<p>方式1：</p>
<p>厂长（<strong>姓名</strong>，性别，年龄）</p>
<p>工厂（<strong>厂号</strong>，厂名，地点）</p>
<p>管理（（厂长）<strong>姓名</strong>，厂号，任期）</p>
<blockquote>
<p>粗体代表该关系模式的码。管理的码可以为姓名或厂号。</p>
</blockquote>
</li>
<li>
<p>方式2：</p>
<p>厂长（姓名，性别，年龄）</p>
<p>工厂（厂号，厂名，地点，（厂长）姓名，任期）</p>
</li>
</ul>
</li>
<li>
<p>一对多联系的转换：</p>
<p>两种方式：</p>
<ul>
<li>方式1：将联系转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性取该联系所关联的两个实体的码及联系的属性，<u>关系的码是多方实体的码</u>；</li>
<li>方式2（一般使用该方式）：将联系<u>归并到关联的两个实体的多方</u>，给待归并的多方实体属性集中增加一方实体的码和该联系的属性即可，归并后的多方实体码保持不变。</li>
</ul>
<p>例如：</p>
<p><picture><img class="img-fluid " alt="一对多联系转换的例子" src="/docs/ruan-she/data-base/uTools_1682563544291.png" loading="lazy" width="315" height="361" />
</picture>

</p>
<ul>
<li>
<p>方式1:</p>
<p>仓库（<strong>仓库号</strong>，地点，面积）</p>
<p>商品（<strong>货号</strong>，商品名，价格）</p>
<p>仓储（<strong>货号</strong>，仓库号，数量）</p>
</li>
<li>
<p>方式2：</p>
<p>仓库（<strong>仓库号</strong>，地点，面积）</p>
<p>商品（<strong>货号</strong>，商品名，价格，仓库号，数量）</p>
</li>
</ul>
</li>
<li>
<p>多对多联系的转换：</p>
<p>多对多联系只能转换成一个独立的关系模式，关系模式的名称取联系的名称，关系模式的属性取该联系所关联的两个多方实体的码及联系的属性，关系的码是多方实体的码构成的属性组。</p>
<p>例如：</p>
<p><picture><img class="img-fluid " alt="多对多联系转换的示例" src="/docs/ruan-she/data-base/uTools_1682564018777.png" loading="lazy" width="327" height="373" />
</picture>

</p>
<p>转换成：</p>
<p>学生（<strong>学号</strong>，姓名，性别，年龄）</p>
<p>课程（<strong>课程号</strong>，课程名，学时）</p>
<p>选修（<strong>（学号，课程号）</strong>，成绩）</p>
</li>
</ul>
</li>
</ol>
<h3 id="关系模式的规范化" data-numberify>关系模式的规范化<a class="anchor ms-1" href="#关系模式的规范化"></a></h3>
<p>转换后的关系模式可能存在数据冗余、更新异常等问题，所以需要进一步的规范化处理。</p>
<ol>
<li>
<p>根据语义确定各关系模式的数据依赖（函数依赖）。</p>
</li>
<li>
<p>根据数据依赖确定关系模式的范式。判定关系模式是否达到了3NF或4NF。</p>
</li>
<li>
<p>如果关系模式不符合要求，要根据关系模式的分解算法对其进行分解，达到3NF、BCNF或4NF。</p>
</li>
<li>
<p>关系模式的评价及修正。</p>
<p>根据规范化理论对关系模式分解之后，就可以在理论上消除冗余和更新异常。但根据处理要求，可能还需要增加部分冗余以满足处理要求，这就需要做部分关系模式的处理，分解、合并或增加冗余属性，提高存储效率和处理效率。</p>
</li>
</ol>
<hr>
<h1 id="事务管理" data-numberify>事务管理<a class="anchor ms-1" href="#事务管理"></a></h1>
<p>事务是一个操作序列，这些操作“要么都做，要么都不做”。</p>
<p>事务和程序是两个不同的概念，一般一个程序可包含多个事务。</p>
<p>在SQL语言中，事务定义的语句有以下三条。</p>
<ul>
<li>
<p><code>BEGIN TRANSACTION</code>：事务开始。</p>
</li>
<li>
<p><code>COMMIT</code>：事务提交。</p>
<p>该操作表示事务成功地结束，它将通知事务管理器该事务的<u>所有更新操作现在可以被提交或永久地保留</u>。</p>
</li>
<li>
<p><code>ROLLBACK</code>：事务回滚。</p>
<p>该操作表示事务非成功地结束，它将通知事务管理器<u>出故障</u>了，数据库可能处于不一致状态，该事务的<u>所有更新操作必须回滚或撤销</u>。</p>
</li>
</ul>
<p>事务的ACID性质：</p>
<ul>
<li>
<p><strong>原子性</strong>（Atomicity）：事务是原子的，要么都做，要么都不做。</p>
</li>
<li>
<p><strong>一致性</strong>（Consistency）：事务执行的结果必须保证数据库从一个一致性状态变到另一个一致性状态。</p>
<p>因此，当数据库只包含成功事务提交的结果时，称数据库处于一致性状态。</p>
</li>
<li>
<p><strong>隔离性</strong>（Isolation）：事务相互隔离。</p>
<p>当多个事务并发执行时，任一事务的更新操作直到其成功提交的整个过程，对其他事务都是不可见的</p>
</li>
<li>
<p><strong>持久性</strong>（Durability）：一旦事务成功提交，即使数据库崩溃，其对数据库的更新操作也将永久有效。</p>
</li>
</ul>
<hr>
<h1 id="数据库故障" data-numberify>数据库故障<a class="anchor ms-1" href="#数据库故障"></a></h1>
<p>在数据库的运行过程中，难免会出现计算机系统的软、硬件故障，这些故障会影响数据库中数据的正确性，甚至破坏数据库，使数据库中的全部或部分数据丢失。因此，数据库的关键技术在于建立冗余数据，即备份数据。如何在系统出现故障后能够及时地使数据库恢复到故障前的正确状态，就是数据库恢复技术。</p>
<p>故障类型：</p>
<ul>
<li><strong>事务内部故障</strong>：有的可以通过事务程序本身发现；有的是非预期的，不能由事务程序处理。</li>
<li><strong>系统故障</strong>（软故障）：是指造成系统停止运行的任何事件，使得系统要重新启动，例如CPU故障、操作系统故障和突然停电等。</li>
<li><strong>介质故障</strong>（硬故障）：如磁盘损坏、磁头碰撞和瞬时强磁干扰。此类故障发生的几率小，但破坏性最大。</li>
<li><strong>计算机病毒</strong>：计算机病毒是一种人为的故障和破坏，是在计算机程序中插入的破坏，计算机功能或者数据可以繁殖和传播的一组计算机指令或程序代码。</li>
</ul>
<h2 id="备份方法" data-numberify>备份方法<a class="anchor ms-1" href="#备份方法"></a></h2>
<p>恢复的基本原理是“建立数据冗余”（重复存储）。建立冗余数据的方法是进行<u>数据转储</u>和<u>登记日志文件</u>，分为：</p>
<ul>
<li>
<p>静态转储和动态转储：</p>
<ul>
<li>
<p><strong>静态转储</strong>：在转储期间不允许对数据库进行任何存取、修改操作；</p>
</li>
<li>
<p><strong>动态转储</strong>：在转储期间允许对数据库进行存取、修改操作。</p>
<p>动态转储和用户事务可并发执行。</p>
</li>
</ul>
</li>
<li>
<p>海量转储和增量转储：</p>
<ul>
<li><strong>海量转储</strong>：指每次转储全部数据；</li>
<li><strong>增量转储</strong>：指每次只转储上次转储后更新过的数据。</li>
</ul>
</li>
<li>
<p><strong>日志文件</strong>：</p>
<p>在事务处理的过程中，DBMS把以下操作写入日志文件：</p>
<ul>
<li>事务开始、事务结束；</li>
<li>对数据库的插入、删除和修改。</li>
</ul>
<p>一旦发生故障，DBMS的恢复子系统利用日志文件撤销事务对数据库的改变，回退到事务的初始状态。因此，DBMS利用日志文件来进行事务故障恢复和系统故障恢复，并可协助后备副本进行介质故障恢复。</p>
</li>
</ul>
<h2 id="恢复" data-numberify>恢复<a class="anchor ms-1" href="#恢复"></a></h2>
<p>事务恢复有以下3个步骤：</p>
<ol>
<li>反向扫描文件日志（即从最后向前扫描日志文件），查找该事务的更新操作。</li>
<li>对事务的更新操作执行逆操作。</li>
<li>继续反向扫描日志文件，查找该事务的其他更新操作，并做同样的处理，直到事务的开始标志。</li>
</ol>
<hr>
<h1 id="并发控制" data-numberify>并发控制<a class="anchor ms-1" href="#并发控制"></a></h1>
<p>所谓并发操作，是指在多用户共享的系统中许多用户可能同时对同一数据进行操作。并发操作带来的问题是数据的不一致性，主要有三类：</p>
<ul>
<li><strong>丢失更新</strong></li>
<li><strong>不可重复读</strong></li>
<li><strong>读脏数据</strong></li>
</ul>
<p>其主要原因是事务的并发操作破坏了事务的隔离性。DBMS的并发控制子系统负责协调并发事务的执行，保证数据库的完整性不受破坏，避免用户得到不正确的数据。</p>
<h2 id="封锁" data-numberify>封锁<a class="anchor ms-1" href="#封锁"></a></h2>
<p>并发控制的主要技术是封锁。基本封锁的类型有：</p>
<ul>
<li>
<p>排它锁（X锁或写锁）：若事务T对数据对象A加上X锁，则<u>只允许T读取和修改A，其他事务都不能再对A加任何类型的锁</u>，直到T释放A上的锁。</p>
</li>
<li>
<p>共享锁（S锁或读锁）：若事务T对数据对象A加上S锁，则<u>只允许T读取A，但不能修改A，其他事务只能再对A加S锁</u>，直到T释放A上的S锁。</p>
<p>这就保证了其他事务可以读A，但在T释放A上的S锁之前不能对A进行任何修改。</p>
</li>
</ul>
<hr>
<h1 id="分布式数据库" data-numberify>分布式数据库<a class="anchor ms-1" href="#分布式数据库"></a></h1>
<p>分布式数据库系统是指数据存放在计算机网络的不同场地的计算机中，每一场地都有自治处理能力并能完成局部应用；而每一场地也参与（至少一种）全局应用程序的执行，全局应用程序可通过网络通信访问系统中多个场地的数据。其定义强调分布性和逻辑整体性两点。</p>
<p>分布式数据库中有以下基本概念：</p>
<ul>
<li><strong>分片透明</strong>：指用户或应用程序不需要知道逻辑上访问的表具体是怎么分块存储的。</li>
<li><strong>复制透明</strong>：指采用复制技术的分布方法，用户不需要知道数据是复制到哪些节点，如何复制的。</li>
<li><strong>位置透明</strong>：指用户无须知道数据存放的物理位置。</li>
<li><strong>逻辑透明</strong>：指用户或应用程序无需知道局部场地使用的是哪种数据模型。</li>
</ul>
<p>具有以下性质：</p>
<ul>
<li><strong>共享性</strong>：数据存储在不同的结点数据共享。</li>
<li><strong>自治性</strong>：指每结点对本地数据都能独立管理。</li>
<li><strong>可用性</strong>：指当某一场地故障时，系统可以使用其他场地上的副本而不至于使整个系统瘫痪。</li>
<li><strong>分布性</strong>：指数据在不同场地上的存储。</li>
</ul>
<hr>
<h1 id="存储过程" data-numberify>存储过程<a class="anchor ms-1" href="#存储过程"></a></h1>
<p>存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL语句集，它存储在数据库中，一次编译后永久有效，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。</p>
<p>存储过程是数据库所提供的一种数据库对象，通过存储过程定义一段代码，提供给应用程序调用来执行。从安全性的角度考虑，更新数据时，通过提供存储过程正第三方调用，将需要更新的数据传入存储过程，而在存储过程内部用代码分别对需要的多个表进行更新，从而避免了向第三方提供系统的表结构，保证了系统的数据安全。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Sharding Jdbc</title>
      <link>/docs/spring/springboot/sharding-jdbc/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springboot/sharding-jdbc/</guid>
      <description><![CDATA[介绍 Sharding Jdbc是一个用于实现数据库读写分离的框架。 依赖 Sharding Jdbc依赖坐标： &lt;dependency&gt; &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt; &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;4.0.0-RC1&lt;/version&gt; &lt;/dependency&gt; 配置 配置application.yaml： spring:sharding-sphere:# 旧版为 shardingspheredatasource:# 数据]]></description>
      <content:encoded><![CDATA[<h1 id="介绍" data-numberify>介绍<a class="anchor ms-1" href="#介绍"></a></h1>
<p>Sharding Jdbc是一个用于实现数据库读写分离的框架。</p>
<hr>
<h1 id="依赖" data-numberify>依赖<a class="anchor ms-1" href="#依赖"></a></h1>
<p>Sharding Jdbc依赖坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.apache.shardingsphere<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>sharding-jdbc-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>4.0.0-RC1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="配置" data-numberify>配置<a class="anchor ms-1" href="#配置"></a></h1>
<p>配置<code>application.yaml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sharding-sphere</span><span class="p">:</span><span class="w">  </span><span class="c"># 旧版为 shardingsphere</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">datasource</span><span class="p">:</span><span class="w">     </span><span class="c"># 数据源有多个，用名称来进行区分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">names</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">master,slave </span><span class="w"> </span><span class="c"># 名称可以自定义，多个名称用&#39;,&#39;分隔</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 主数据源</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">master</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">com.alibaba.druid.pool.DruidDataSource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">driver-class-name</span><span class="p">:</span><span class="w"> </span><span class="l">com.mysql.cj.jdbc.Driver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">jdbc:mysql://localhost:3316/reggie?characterEncoding=utf-8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 从数据源</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">slave</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">com.alibaba.druid.pool.DruidDataSource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">driver-class-name</span><span class="p">:</span><span class="w"> </span><span class="l">com.mysql.cj.jdbc.Driver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">jdbc:mysql://localhost:3326/reggie?characterEncoding=utf-8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">masters-lave</span><span class="p">:</span><span class="w"> </span><span class="c"># 课程中为 masterslave</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 读写分离配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">load-balance-algorithm-type</span><span class="p">:</span><span class="w"> </span><span class="l">round_robin </span><span class="w"> </span><span class="c"># 定义从库负载均衡策略策略，round_robin为轮询</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 最终的数据源名称（即Bean的名称）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">dataSource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 主库数据源名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">master-data-source-name</span><span class="p">:</span><span class="w"> </span><span class="l">master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 从库数据源名称列表，多个用&#39;,&#39;分隔</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">slave-data-source-names</span><span class="p">:</span><span class="w"> </span><span class="l">slave</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">props</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">sql</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">show</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># 开启SQL显示，默认false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">main</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 允许Bean定义覆盖，否则会与其他数据源的Bean发生冲突（如Druid）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">allow-bean-definition-overriding</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Redis基础</title>
      <link>/docs/spring/springboot/redis-base/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springboot/redis-base/</guid>
      <description><![CDATA[数据类型 Redis存储的是key-value结构的数据，其中key是字符串类型，value有5种常用的数据类型： 字符串 —— string 哈希 —— hash 适合存]]></description>
      <content:encoded><![CDATA[<h1 id="数据类型" data-numberify>数据类型<a class="anchor ms-1" href="#数据类型"></a></h1>
<p>Redis存储的是key-value结构的数据，其中key是字符串类型，value有5种常用的数据类型：</p>
<ul>
<li>
<p>字符串 —— <code>string</code></p>
</li>
<li>
<p>哈希 —— <code>hash</code></p>
<p>适合存储对象。</p>
</li>
<li>
<p>列表 —— <code>list</code></p>
<p>按照插入顺序排序，可以有重复元素。可以用来做任务队列。</p>
</li>
<li>
<p>集合 —— <code>set</code></p>
<p>无序集合，没有重复元素（后插入的元素会覆盖已有的相同元素）。</p>
</li>
<li>
<p>有序集合 —— <code>sorted set</code></p>
<p>有序集合（使用分值进行排序），没有重复元素。</p>
</li>
</ul>
<hr>
<h1 id="常用命令" data-numberify>常用命令<a class="anchor ms-1" href="#常用命令"></a></h1>
<blockquote>
<p>Redis命令符不区分大小写，但是<code>key</code>是区分大小写的。
更多命令请参考<a href="https://www.redis.net.cn" target="_blank" rel="noopener noreferrer">Redis中文网<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
</blockquote>
<h2 id="字符串操作命令" data-numberify>字符串操作命令<a class="anchor ms-1" href="#字符串操作命令"></a></h2>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SET key value
</code></pre><ul>
<li>设置指定<code>key</code>的值。</li>
<li><code>key</code>相同的情况下，后设的值会覆盖前面的值。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">GET key
</code></pre><ul>
<li>获取指<code>key</code>的值。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SETEX key seconds value
</code></pre><ul>
<li>设置指定<code>key</code>的值，并将<code>key</code>的过期时间设为<code>seconds</code>秒。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SETNX key value
</code></pre><ul>
<li>
<p>只有在<code>key</code>不存在时设置<code>key</code>的值。</p>
</li>
<li>
<p>如：</p>
<pre tabindex="0"><code class="language-redis" data-lang="redis">&gt; SETNX key1 value1
1
&gt; SETNX key1 value2
0
&gt; GET key1
value1
</code></pre></li>
</ul>
<h2 id="哈希操作命令" data-numberify>哈希操作命令<a class="anchor ms-1" href="#哈希操作命令"></a></h2>
<p>Redis hash 是一个<code>string</code>类型的<code>field</code>和<code>value</code>的映射表，hash特别适合用于存储对象。</p>
<pre tabindex="0"><code class="language-redis" data-lang="redis">HSET key field value
</code></pre><ul>
<li>将哈希表key种的字段field的值设为value。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">HGET key field
</code></pre><ul>
<li>获取存储在哈希表中指定字段的值。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">HDEL key field
</code></pre><ul>
<li>删除存储在哈希表中的指定字段。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">HKEYS key
</code></pre><ul>
<li>获取哈希表中所有字段。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">HVALS key
</code></pre><ul>
<li>获取哈希表中所有值。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">HGETALL key
</code></pre><ul>
<li>获取在哈希表中指定key的所有字段和值。</li>
</ul>
<h2 id="列表操作命令" data-numberify>列表操作命令<a class="anchor ms-1" href="#列表操作命令"></a></h2>
<pre tabindex="0"><code class="language-redis" data-lang="redis">LPUSH key value1 [value2 ...]
</code></pre><ul>
<li>将一个或多个值插入到列表头部。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">LRANGE key start stop
</code></pre><ul>
<li>获取列表指定范围内的元素（<code>start</code>到<code>stop</code>，索引从<code>0</code>开始）。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">RPOP key
</code></pre><ul>
<li>移除并获取列表最后一个元素。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">LLEN key
</code></pre><ul>
<li>获取列表长度。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">BRPOP key1 [key2 ...] timeout
</code></pre><ul>
<li>移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时（<code>timeout</code>秒）或（在指定的key中）发现可弹出元素为止。</li>
</ul>
<h2 id="集合操作命令" data-numberify>集合操作命令<a class="anchor ms-1" href="#集合操作命令"></a></h2>
<p>Redis set是string类型的无序集合，集合成员是唯一的。</p>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SADD key member1 [member2 ...]
</code></pre><ul>
<li>向集合添加一个或多个成员。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SMEMBERS key
</code></pre><ul>
<li>返回集合中的所有成员。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SCARD key
</code></pre><ul>
<li>获取集合的成员数。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SINTER key1 [key2 ...]
</code></pre><ul>
<li>返回给定所有集合的交集。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SUNION key1 [key2 ...]
</code></pre><ul>
<li>返回所有给定集合的并集。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SDIFF key1 [key2 ...]
</code></pre><ul>
<li>返回给定所有集合的差集（左差集，即key1集合中在其他集合没有的元素集合）。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SREM key member1 [member2 ...]
</code></pre><ul>
<li>移除集合中一个或多个成员。</li>
</ul>
<h2 id="有序集合操作命令" data-numberify>有序集合操作命令<a class="anchor ms-1" href="#有序集合操作命令"></a></h2>
<p>Redis sorted set 是string类型元素的集合，且不允许重复的成员。每个元素都会关联一个<code>double</code>类型的分数（score）。Redis通过分数来为集合中的成员进行从小到大排序，有序集合的成员是唯一的，但分数却可以重复。</p>
<pre tabindex="0"><code class="language-redis" data-lang="redis">ZADD key score1 member1 [score2 member2 ...]
</code></pre><ul>
<li>向有序集合添加一个或多个成员，或者更新已存在成员的分数。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">ZRANGE key start stop [WITHSCOES]
</code></pre><ul>
<li>通过索引区间返回有序集合中指定区间内的成员。使用<code>WITHSCOES</code>可以返回成员的分数。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">ZINCRBY key increment member
</code></pre><ul>
<li>有序集合中对指定成员的分数加上增量<code>increment</code>。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">ZREM key member [member ...]
</code></pre><ul>
<li>移除有序集合中的一个或多个成员。</li>
</ul>
<h2 id="通用命令" data-numberify>通用命令<a class="anchor ms-1" href="#通用命令"></a></h2>
<pre tabindex="0"><code class="language-redis" data-lang="redis">KEYS pattren
</code></pre><ul>
<li>查找所有符合给定模式（pattern）的key。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">EXISTS key
</code></pre><ul>
<li>检查给定key是否存在。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">TYPE key
</code></pre><ul>
<li>返回key所存储的值的类型。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">TTL key
</code></pre><ul>
<li>返回给定key的剩余生存时间（TTL，time to live），以秒为单位。</li>
</ul>
<pre tabindex="0"><code class="language-redis" data-lang="redis">DEL key1 [key2 ...]
</code></pre><ul>
<li>
<p>该命令用于在key存在时删除key。</p>
</li>
<li>
<p>如：</p>
<pre tabindex="0"><code class="language-redis" data-lang="redis">&gt; TTL key
-1
</code></pre><p>返回<code>-1</code>表示永久存活。</p>
</li>
</ul>
<h2 id="切换数据库" data-numberify>切换数据库<a class="anchor ms-1" href="#切换数据库"></a></h2>
<p>Redis 默认是在<code>0</code>号数据库中执行操作。如果想要切换数据库，可以使用：</p>
<pre tabindex="0"><code class="language-redis" data-lang="redis">SELECT number
</code></pre><p>如：</p>
<pre tabindex="0"><code class="language-redis" data-lang="redis">127.0.0.1:6379&gt; SELECT 1
OK
127.0.0.1:6379[1]&gt;
</code></pre><p>Redis 默认提供了16个数据库。</p>
<p>要修改该配置可以在<code>redis.conf</code>中修改<code>databases</code>的数量。</p>
<pre tabindex="0"><code>databash 16
</code></pre><hr>
<h1 id="spring-data-redis" data-numberify>Spring Data Redis<a class="anchor ms-1" href="#spring-data-redis"></a></h1>
<h2 id="依赖" data-numberify>依赖<a class="anchor ms-1" href="#依赖"></a></h2>
<p>Spring Data Redis的依赖坐标为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- Spring Date Redis --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-redis<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- version在spring-boot-starter-parent中定义 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h2 id="配置" data-numberify>配置<a class="anchor ms-1" href="#配置"></a></h2>
<p><code>application.yml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">application</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">springdataredis-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Redis相关配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">redis</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">localhost</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">6379</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">database</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">       </span><span class="c"># 操作0号数据库</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">jedis</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Redis连接池配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pool</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">max-active</span><span class="p">:</span><span class="w"> </span><span class="m">8</span><span class="w"> </span><span class="c"># 最大连接数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">max-wait</span><span class="p">:</span><span class="w"> </span><span class="l">1ms</span><span class="w"> </span><span class="c"># 连接池最大阻塞等待时间</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">max-idle</span><span class="p">:</span><span class="w"> </span><span class="m">4</span><span class="w">   </span><span class="c"># 连接池中的最大空闲连接</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">min-idle</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">   </span><span class="c"># 连接池中的最小空闲连接</span><span class="w">
</span></span></span></code></pre></div><p>配置类（修改默认序列化器，防止因序列化在Redis上产生乱码，但并不妨碍读值。因为读取时会自动反序列化）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfig</span> <span class="kd">extends</span> <span class="n">CachingConfigurerSupport</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">RedisTemplate</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">redisTemplate</span><span class="o">(</span><span class="n">RedisConnectionFactory</span> <span class="n">connectionFactory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">RedisTemplate</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RedisTemplate</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 默认的Key序列化器为：JdkSerializationRedisSerializer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="n">StringRedisSerializer</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setHashKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="n">StringRedisSerializer</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="测试" data-numberify>测试<a class="anchor ms-1" href="#测试"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringDataRedisTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">RedisTemplate</span> <span class="n">redisTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 操作字符串类型数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获得String类型数据操作对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ValueOperations</span> <span class="n">valueOperations</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForValue</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">valueOperations</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&#34;city&#34;</span><span class="o">,</span> <span class="s">&#34;guangzhou&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">city</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">valueOperations</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;city&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置超时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">valueOperations</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&#34;key1&#34;</span><span class="o">,</span> <span class="s">&#34;value1&#34;</span><span class="o">,</span> <span class="n">10L</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 不存在才设置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Boolean</span> <span class="n">setIfAbsent1</span> <span class="o">=</span> <span class="n">valueOperations</span><span class="o">.</span><span class="na">setIfAbsent</span><span class="o">(</span><span class="s">&#34;city&#34;</span><span class="o">,</span> <span class="s">&#34;foshang&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Boolean</span><span class="o">.</span><span class="na">TRUE</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">setIfAbsent1</span><span class="o">)</span> <span class="o">?</span> <span class="s">&#34;city设置成功&#34;</span> <span class="o">:</span> <span class="s">&#34;city已存在&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Boolean</span> <span class="n">setIfAbsent2</span> <span class="o">=</span> <span class="n">valueOperations</span><span class="o">.</span><span class="na">setIfAbsent</span><span class="o">(</span><span class="s">&#34;city_name&#34;</span><span class="o">,</span> <span class="s">&#34;foshang&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                                                   <span class="n">10L</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Object</span> <span class="n">cityName</span> <span class="o">=</span> <span class="n">valueOperations</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;city_name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">setIfAbsent2</span> <span class="o">?</span> <span class="s">&#34;city_name设置成功:&#34;</span> <span class="o">+</span> <span class="n">cityName</span>
</span></span><span class="line"><span class="cl">                                        <span class="o">:</span> <span class="s">&#34;city_name已存在&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 操作哈希类型数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHash</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HashOperations</span> <span class="n">hashOperations</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForHash</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="s">&#34;002&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 存值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">hashOperations</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="s">&#34;xiaoming&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">hashOperations</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;age&#34;</span><span class="o">,</span> <span class="s">&#34;20&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">hashOperations</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;address&#34;</span><span class="o">,</span> <span class="s">&#34;guangzhou&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">hashOperations</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">age</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">hashOperations</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;age&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">address</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">hashOperations</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;address&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;name:&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&#34;,age:&#34;</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span> <span class="s">&#34;,address:&#34;</span> <span class="o">+</span> <span class="n">address</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取hash结构中的所有字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Set</span> <span class="n">keys</span> <span class="o">=</span> <span class="n">hashOperations</span><span class="o">.</span><span class="na">keys</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">key</span> <span class="o">:</span> <span class="n">keys</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//hashOperations.delete(keys, &#34;address&#34;, &#34;age&#34;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获得hash结构中的所有值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="n">hashOperations</span><span class="o">.</span><span class="na">values</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">value</span> <span class="o">:</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 操作列表类型数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testList</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ListOperations</span> <span class="n">listOperations</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForList</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&#34;mylist&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 存储
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">listOperations</span><span class="o">.</span><span class="na">leftPush</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;a&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">listOperations</span><span class="o">.</span><span class="na">leftPushAll</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">,</span> <span class="s">&#34;d&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;入队：&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">myList</span> <span class="o">=</span> <span class="n">listOperations</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="o">-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">myList</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&#34; &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获得列表长度 llen
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">listOperations</span><span class="o">.</span><span class="na">size</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">intValue</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;出队：&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 出队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">String</span> <span class="n">element</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">listOperations</span><span class="o">.</span><span class="na">rightPop</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="n">element</span> <span class="o">+</span> <span class="s">&#34; &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 操作集合类型数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSet</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SetOperations</span> <span class="n">setOperations</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForSet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&#34;myset&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 存值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">setOperations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">,</span> <span class="s">&#34;d&#34;</span><span class="o">,</span> <span class="s">&#34;a&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">myset</span> <span class="o">=</span> <span class="n">setOperations</span><span class="o">.</span><span class="na">members</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">myset</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&#34; &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 删除成员
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">setOperations</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">myset</span> <span class="o">=</span> <span class="n">setOperations</span><span class="o">.</span><span class="na">members</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">myset</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&#34; &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 操作有序集合类型数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testZset</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ZSetOperations</span> <span class="n">zSetOperations</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForZSet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&#34;myZset&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 存储
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">zSetOperations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="n">10</span><span class="o">.);</span>
</span></span><span class="line"><span class="cl">        <span class="n">zSetOperations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="n">11</span><span class="o">.);</span>
</span></span><span class="line"><span class="cl">        <span class="n">zSetOperations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">,</span> <span class="n">12</span><span class="o">.);</span>
</span></span><span class="line"><span class="cl">        <span class="n">zSetOperations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;d&#34;</span><span class="o">,</span> <span class="n">13</span><span class="o">.);</span>
</span></span><span class="line"><span class="cl">        <span class="n">zSetOperations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="n">14</span><span class="o">.);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">range</span> <span class="o">=</span> <span class="n">zSetOperations</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="o">-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">range</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&#34; &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 修改分数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">zSetOperations</span><span class="o">.</span><span class="na">incrementScore</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="n">20</span><span class="o">.);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 删除成员
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">zSetOperations</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">range</span> <span class="o">=</span> <span class="n">zSetOperations</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="o">-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">range</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&#34; &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 通用操作
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCommon</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取Redis中所有key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">keys</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">keys</span><span class="o">(</span><span class="s">&#34;*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">keys</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 判断m某个key是否存在
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Boolean</span> <span class="n">hasKey</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">hasKey</span><span class="o">(</span><span class="s">&#34;linner&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hasKey</span> <span class="o">?</span> <span class="s">&#34;linner存在&#34;</span> <span class="o">:</span> <span class="s">&#34;linner不存在&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 删除指定key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">&#34;myZset&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取指定key对应的value的数据类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">DataType</span> <span class="n">dataType</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">type</span><span class="o">(</span><span class="s">&#34;myset&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dataType</span><span class="o">.</span><span class="na">name</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>MyBatisPlus</title>
      <link>/docs/spring/springboot/mybatisplus/</link>
      <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/springboot/mybatisplus/</guid>
      <description><![CDATA[简介 MybatisPlus（简称MP）是基于MyBatis框架基础上开发的增强型工具（依然可以使用MyBatis里的工具），旨在简化开发、提]]></description>
      <content:encoded><![CDATA[<h1 id="简介" data-numberify>简介<a class="anchor ms-1" href="#简介"></a></h1>
<p>MybatisPlus（简称MP）是基于MyBatis框架基础上开发的增强型工具（依然可以使用MyBatis里的工具），旨在简化开发、提供效率。更多详情请访问<a href="https://mp.baomidou.com/" target="_blank" rel="noopener noreferrer">MyBatisPlus官网<i class="fas fa-external-link-square-alt ms-1"></i></a>（官网有两个地址，<a href="https://mp.baomidou.com/" target="_blank" rel="noopener noreferrer">https://mp.baomidou.com/<i class="fas fa-external-link-square-alt ms-1"></i></a>或<a href="https://mybatis.plus" target="_blank" rel="noopener noreferrer">https://mybatis.plus<i class="fas fa-external-link-square-alt ms-1"></i></a>）。</p>
<p>基于Spring使用MybatisPlus，在构建Spring工程时需要勾选MySQL和MyBatis相关技术。由于Spring并未收录MP，所以需要手动导入坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.baomidou<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>mybatis-plus-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>3.4.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 可选： --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.1.16<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>在<code>application.yml</code>（配置文件）中配置数据库信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">datasource</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">com.alibaba.druid.pool.DruidDataSource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">driver-class-name</span><span class="p">:</span><span class="w"> </span><span class="l">com.mysql.cj.jdbc.Driver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">jdbc:mysql://localhost:3306/mybatisplus_db?serverTimezone=Asia/Shanghai </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="dao接口" data-numberify>DAO接口<a class="anchor ms-1" href="#dao接口"></a></h1>
<p>使用MP编写DAO接口，可以直接继承<code>BaseMapper&lt;&gt;</code>（该接口内置了许多DAO方法）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Mapper</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDao</span> <span class="kd">extends</span> <span class="n">BaseMapper</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>编写引导类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MybatisplusApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">MybatisplusApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>DAO接口要想被容器扫描到，有两种方案：</p>
<ol>
<li>在DAO接口上添加<code>@Mapper</code>注解，并且确保DAO处在引导类所在包或其子包中。</li>
<li>在引导类上添加<code>@MapperScan</code>注解，其属性为所要扫描的DAO所在包：<code>@MapperScan(&quot;com.linner.dao&quot;)</code>（可以不写<code>@Mapper</code>）。</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>MyBatis</title>
      <link>/docs/spring/java-web/mybatis-base/</link>
      <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/mybatis-base/</guid>
      <description><![CDATA[MyBatis 介绍 MyBatis 是一款优秀的持久层框架，用于简化 JDBC 开发。 持久层： 是负责将数据到保存到数据库的那一层代码。即，操作数据库的Java代码为持久层。 而My]]></description>
      <content:encoded><![CDATA[<h1 id="mybatis-介绍" data-numberify>MyBatis 介绍<a class="anchor ms-1" href="#mybatis-介绍"></a></h1>
<p>MyBatis 是一款优秀的持久层框架，用于简化 JDBC 开发。</p>
<blockquote>
<p><strong>持久层：</strong></p>
<ul>
<li>
<p>是负责将数据到保存到数据库的那一层代码。即，操作数据库的Java代码为持久层。</p>
<p>而Mybatis就是对JDBC代码进行了封装。</p>
</li>
<li>
<p>持久层是JavaEE三层架构中的一层。</p>
<p>JavaEE三层架构：表现层、业务层、持久层。</p>
</li>
</ul>
<p><strong>框架：</strong></p>
<ul>
<li>框架就是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。</li>
<li>使用框架的好处：在框架的基础之上构建软件编写更加高效、规范、通用、可扩展。</li>
</ul>
</blockquote>
<p>使用JDBC存在以下问题:</p>
<ul>
<li>
<p>硬编码</p>
<p>手动注册驱动、获取连接、SQL语句等。</p>
</li>
<li>
<p>操作繁琐</p>
<p>手动设置参数、封装结果集等。</p>
</li>
</ul>
<p>使用Mybatis：</p>
<ul>
<li>硬编码可以配置到配置文件。</li>
<li>操作繁琐的地方Mybatis都自动完成。</li>
</ul>
<hr>
<h1 id="配置-mybatis" data-numberify>配置 Mybatis<a class="anchor ms-1" href="#配置-mybatis"></a></h1>
<p>使用Maven导入Mybatis。</p>
<ol>
<li>
<p>在 <code>pom.xml</code> 配置文件中导入坐标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--mybatis 依赖--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>3.5.5<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--mysql 驱动--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>5.1.46<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>编写 <code>mybatis-config.xml</code> 文件：</p>
<p>在模块下的 <code>resources</code> 目录下创建Mybatis的配置文件 <code>mybatis-config.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE configuration
</span></span></span><span class="line"><span class="cl"><span class="cp">        PUBLIC &#34;-//mybatis.org//DTD Config 3.0//EN&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">        &#34;http://mybatis.org/dtd/mybatis-3-config.dtd&#34;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 需要注意配置标签的前后顺序(按照MyBatis官方文档目录中的顺序去定义) --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 别名或包扫描 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;typeAliases&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- name属性的值是实体类所在包 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 包扫描后,别名默认为类名(不区分大小写) --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 使用别名可以简化映射配置文件中 resultType 属性值的编写 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;package</span> <span class="na">name=</span><span class="s">&#34;package.name.pojo&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/typeAliases&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">    environments:配置数据库的连接环境信息,
</span></span></span><span class="line"><span class="cl"><span class="c">      可以配置多个environment信息,
</span></span></span><span class="line"><span class="cl"><span class="c">      通过对应的default属性切换不同的environment
</span></span></span><span class="line"><span class="cl"><span class="c">  --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;environments</span> <span class="na">default=</span><span class="s">&#34;development&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 可以配置多个&lt;environment&gt; --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 使用 id 给每段环境起名 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 在 &lt;environments&gt; 中使用 default=&#39;environment-id&#39; 来指定使用哪儿段配置 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;environment</span> <span class="na">id=</span><span class="s">&#34;development&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;transactionManager</span> <span class="na">type=</span><span class="s">&#34;JDBC&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dataSource</span> <span class="na">type=</span><span class="s">&#34;POOLED&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">          数据库连接信息
</span></span></span><span class="line"><span class="cl"><span class="c">          注意url、username和password
</span></span></span><span class="line"><span class="cl"><span class="c">        --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driver&#34;</span> <span class="na">value=</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;jdbc:mysql:///mybatis1?useSSL=false&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;root&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;1234&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dataSource&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/environment&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;environment</span> <span class="na">id=</span><span class="s">&#34;test&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;transactionManager</span> <span class="na">type=</span><span class="s">&#34;JDBC&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dataSource</span> <span class="na">type=</span><span class="s">&#34;POOLED&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- 数据库连接信息 --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driver&#34;</span> <span class="na">value=</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;jdbc:mysql:///mybatis2?useSSL=false&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;root&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;1234&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dataSource&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/environment&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/environments&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;mappers&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 加载映射文件 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- ...... --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 在下节中讲解 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/mappers&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/configuration&gt;</span>
</span></span></code></pre></div></li>
</ol>
<blockquote>
<p>更多MyBatis配置请查看官方文档：<a href="https://mybatis.net.cn/configuration.html" target="_blank" rel="noopener noreferrer">MyBatis文档——配置<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<hr>
<h1 id="使用-mybatis" data-numberify>使用 Mybatis<a class="anchor ms-1" href="#使用-mybatis"></a></h1>
<ul>
<li>
<p>编写 <code>Mapper</code>类</p>
<p>在 <code>java</code> 目录下创建与 <code>pojo</code> 对应的 <code>Mapper</code>接口 <code>ClassNameMapper.java</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ClassNameMapper</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>编写 SQL 映射文件</p>
<p>在模块的 <code>resources</code> 目录下创建与 <code>pojo</code> 对应的映射配置文件 <code>ClassNameMapper.xml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE mapper PUBLIC &#34;-//mybatis.org//DTD Mapper 3.0//EN&#34; &#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&#34;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- namespace:名称空间 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">&#34;package.name.mapper&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 相应的SQL语句（XML映射） --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mapper&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>在Myb
atis的配置文件 <code>mybatis-config.xml</code> 中加载映射文件：</p>
<ol>
<li>直接加载映射文件：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;mappers&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;mapper</span> <span class="na">resource=</span><span class="s">&#34;com/abc/mapper/ClassNameMapper.xml&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mappers&gt;</span>
</span></span></code></pre></div><p>使用这种方式加载映射文件，多个映射文件需要定义多个 <code>&lt;mapper&gt;</code>，过于繁琐。</p>
<ol start="2">
<li>Mapper代理方式（推荐）：</li>
</ol>
<p>如果 <code>Mapper</code>接口名称和SQL映射文件名称相同，并在同一目录下，则可以使用包扫描的方式简化SQL映射文件的加载。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;mappers&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;package</span> <span class="na">name=</span><span class="s">&#34;com.abc.mapper&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mappers&gt;</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>注意：使用Mapper代理方式加载映射文件，<code>Mapper</code>接口与其对应的配置文件，它们的路径（包名）要相同。</p>
<p>即，在java目录下的 <code>Mapper</code>接口的包名，要和映射配置文件在 <code>resources</code>下的路径要一致。</p>
<p>如 <code>Mapper</code>接口的包名为 <code>com.abc.mapper</code>，那么其映射配置文件的路径则为 <code>com/abc/mapper</code>。</p>
<p>了解 <code>Maven</code>项目结构，请查看：<a href="https://linna-cy.github.io/Maven/#maven%E6%A0%87%E5%87%86%E5%8C%96%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84" target="_blank" rel="noopener noreferrer">Maven标准化项目结构<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<h2 id="实例" data-numberify>实例<a class="anchor ms-1" href="#实例"></a></h2>
<p>在 Mapper 接口中定义方法，方法名就是SQL映射文件中SQL语句的id，并保持参数类型和返回值类型一致。</p>
<p>例如，为 <code>User</code>对象定义 <code>selectAll()</code>和 <code>selectById()</code>方法：</p>
<ul>
<li>
<p>创建 <code>User</code>表:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="n">mybatis</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">USE</span><span class="w"> </span><span class="n">mybatis</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">tb_user</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">username</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">password</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">gender</span><span class="w"> </span><span class="nb">CHAR</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">addr</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;zhangsan&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;123&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;男&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;北京&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;李四&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;234&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;女&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;天津&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;王五&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;11&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;男&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;西安&#39;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><code>pojo</code>包下定义 <code>User</code>实体类:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.pojo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">addr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getGender</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGender</span><span class="o">(</span><span class="n">String</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAddr</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">addr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAddr</span><span class="o">(</span><span class="n">String</span> <span class="n">addr</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">addr</span> <span class="o">=</span> <span class="n">addr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;User{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, username=&#39;&#34;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, password=&#39;&#34;</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, gender=&#39;&#34;</span> <span class="o">+</span> <span class="n">gender</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, addr=&#39;&#34;</span> <span class="o">+</span> <span class="n">addr</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>mapper</code>包下定义 <code>UserMapper</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.pojo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.pojo.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.Select</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">selectAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">selectById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 更多操作接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>在 <code>resources</code>目录下创建与 <code>UserMapper</code>包名对应的路径，并添加 <code>UserMapper.xml</code>映射配置文件:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE mapper
</span></span></span><span class="line"><span class="cl"><span class="cp">        PUBLIC &#34;-//mybatis.org//DTD Mapper 3.0//EN&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">        &#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&#34;&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">&#34;com.linner.mapper.UserMapper&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">      select语句使用&lt;select&gt;
</span></span></span><span class="line"><span class="cl"><span class="c">        id          为对应Mapper类中的方法名
</span></span></span><span class="line"><span class="cl"><span class="c">        resultType  为对应的实体类, 使用了&lt;typeAliases&gt;包扫描, 省略了包名
</span></span></span><span class="line"><span class="cl"><span class="c">     --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectAll&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        SELECT *
</span></span><span class="line"><span class="cl">        FROM tb_user;
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/select&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectById&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        SELECT *
</span></span><span class="line"><span class="cl">        FROM tb_user
</span></span><span class="line"><span class="cl">        WHERE id = #{id};
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/select&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 更多XML映射 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/mapper&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>resources</code>目录下，配置 <code>mybatis-config.xml</code>文件:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE configuration
</span></span></span><span class="line"><span class="cl"><span class="cp">        PUBLIC &#34;-//mybatis.org//DTD Config 3.0//EN&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">        &#34;http://mybatis.org/dtd/mybatis-3-config.dtd&#34;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 别名或包扫描 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 使用别名可以简化映射配置文件中 resultType 属性值的编写 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;typeAliases&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;package</span> <span class="na">name=</span><span class="s">&#34;com.linner.pojo&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/typeAliases&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;environments</span> <span class="na">default=</span><span class="s">&#34;development&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;environment</span> <span class="na">id=</span><span class="s">&#34;development&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;transactionManager</span> <span class="na">type=</span><span class="s">&#34;JDBC&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;dataSource</span> <span class="na">type=</span><span class="s">&#34;POOLED&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="c">&lt;!-- 数据库连接信息 --&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driver&#34;</span> <span class="na">value=</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;jdbc:mysql:///mybatis?useSSL=false&amp;useServerPerpStmts=true&amp;characterEncoding=UTF-8&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;root&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;1234&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/dataSource&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/environment&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/environments&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mappers&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- Mapper代理方式--&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;package</span> <span class="na">name=</span><span class="s">&#34;com.linner.mapper&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/mappers&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/configuration&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>编写测试类:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.linner.test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.mapper.UserMapper</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.linner.pojo.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.io.Resources</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSession</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSessionFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.ibatis.session.SqlSessionFactoryBuilder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserMapperTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSelectAll</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 加载mybatis的核心配置文件,获取SqlSessionFactory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">resource</span> <span class="o">=</span> <span class="s">&#34;./mybatis-config.xml&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">Resources</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">SqlSessionFactory</span> <span class="n">sqlSessionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取SqlSession对象,用它来执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">SqlSession</span> <span class="n">sqlSession</span> <span class="o">=</span> <span class="n">sqlSessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 执行sql语句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 3.1 方式一:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// List&lt;User&gt; users = sqlSession.selectList(&#34;com.linner.mapper.UserMapper.selectAll&#34;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 3.2 方式二:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 3.2.1 获取UserMapper接口的代理对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">UserMapper</span> <span class="n">userMapper</span> <span class="o">=</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">getMapper</span><span class="o">(</span><span class="n">UserMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 3.2.2 执行对应Mapper对象的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">selectAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 4. 处理数据(模拟)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">users</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 释放资源(仅需释放SqlSession对象)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sqlSession</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSelectById</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 模拟接收参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取sqlSessionFactory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">resource</span> <span class="o">=</span> <span class="s">&#34;./mybatis-config.xml&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">Resources</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">SqlSessionFactory</span> <span class="n">sqlSessionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取SqlSession对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">SqlSession</span> <span class="n">sqlSession</span> <span class="o">=</span> <span class="n">sqlSessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取Mapper接口的代理对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">UserMapper</span> <span class="n">userMapper</span> <span class="o">=</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">getMapper</span><span class="o">(</span><span class="n">UserMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 4. 执行方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">selectById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 处理数据(模拟)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sqlSession</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="xml-映射器" data-numberify>XML 映射器<a class="anchor ms-1" href="#xml-映射器"></a></h1>
<p>通过在 <code>XxxMapper.xml</code> 中使用元素来定义各种CRUD操作。</p>
<p>常用的元素如下（按照定义的顺序给出）：</p>
<ul>
<li><code>&lt;sql&gt;</code> – 可被其它语句引用的可重用语句块。</li>
<li><code>&lt;insert&gt;</code> – 映射插入语句。</li>
<li><code>&lt;update&gt;</code> – 映射更新语句。</li>
<li><code>&lt;delete&gt;</code> – 映射删除语句。</li>
<li><code>&lt;select&gt;</code> – 映射查询语句。</li>
</ul>
<h2 id="select" data-numberify>Select<a class="anchor ms-1" href="#select"></a></h2>
<h3 id="查询所有数据" data-numberify>查询所有数据<a class="anchor ms-1" href="#查询所有数据"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectAll&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT *
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">selectAll</span><span class="o">();</span>
</span></span></code></pre></div><ul>
<li><code>id</code>：相应 <code>Mapper</code> 接口中的方法名。</li>
<li><code>resultType</code>：相应 <code>Mapper</code> 接口中的返回值类型（可自动封装为对象，不区分大小写）。</li>
<li><code>Mapper</code> 接口返回值：返回一个<code>List&lt;User&gt;</code>。这个返回值可以是<code>User</code>、<code>List&lt;User&gt;</code>或<code>ArrayList&lt;User&gt;</code>等，MyBatis会根据返回值自动封装。</li>
</ul>
<h3 id="根据id字段查询" data-numberify>根据id字段查询<a class="anchor ms-1" href="#根据id字段查询"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectById&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT * FROM tb_user WHERE id = #{id};
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">User</span> <span class="nf">selectById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span></code></pre></div><p><code>&lt;select&gt;</code>中，<code>#{id}</code>为相应 <code>Mapper</code> 接口中的参数 <code>id</code>。<code>#{id}</code>被称为参数占位符，相当于JDBC中的<code>?</code>占位符。</p>
<h3 id="多条件动态查询" data-numberify>多条件动态查询<a class="anchor ms-1" href="#多条件动态查询"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectByCondition&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT *
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;where&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;username != null and username != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            username = #{username}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;password != null and password != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            AND password = #{password}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;gender != null and gender != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            AND gender = #{gender}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;addr != null and addr != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            AND addr = #{addr}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/where&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><p>多条件查询使用了动态SQL<code>&lt;where&gt;</code>和<code>&lt;if&gt;</code>。如果仅需查询某部分字段，仅仅使用SQL语句在实现上有难度。而Mybatis就提供了<u>动态SQL</u>方便了我们的实现。</p>
<ul>
<li>
<p><code>&lt;if&gt;</code>：能根据<code>User</code>对象的值来决定是否在SQL语句中加入其包含的语句。</p>
</li>
<li>
<p><code>&lt;where&gt;</code>：只会在子元素返回任何内容的情况下才插入<code>WHERE</code>子句。</p>
<p>而且，若子句的开头为<code>AND</code>或<code>OR</code>，<code>&lt;where&gt;</code>元素也会将它们去除。</p>
</li>
</ul>
<h3 id="单条件动态查询" data-numberify>单条件动态查询<a class="anchor ms-1" href="#单条件动态查询"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectByConditionSingle&#34;</span> <span class="na">resultMap=</span><span class="s">&#34;brandResultMap&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT *
</span></span><span class="line"><span class="cl">    FROM tb_brand
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;where&gt;</span><span class="c">&lt;!--使用where标签确保不会出错--&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;choose&gt;</span><span class="c">&lt;!--相当于switch--&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;when</span> <span class="na">test=</span><span class="s">&#34;status != null&#34;</span><span class="nt">&gt;</span><span class="c">&lt;!--相当于case--&gt;</span>
</span></span><span class="line"><span class="cl">                status = #{status}
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/when&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;when</span> <span class="na">test=</span><span class="s">&#34;companyName != null and companyName != &#39;&#39; &#34;</span><span class="nt">&gt;</span><span class="c">&lt;!--相当于case--&gt;</span>
</span></span><span class="line"><span class="cl">                company_name like #{companyName}
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/when&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;when</span> <span class="na">test=</span><span class="s">&#34;brandName != null and brandName != &#39;&#39; &#34;</span><span class="nt">&gt;</span><span class="c">&lt;!--相当于case--&gt;</span>
</span></span><span class="line"><span class="cl">                brand_name like #{brandName}
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/when&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!--没有条件输入很可能会报错,使用&lt;otherwise&gt;保底--&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!--如果没有使用&lt;where&gt;，则必须使用&lt;otherwise&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!--&lt;otherwise&gt;
</span></span></span><span class="line"><span class="cl"><span class="c">                1 = 1
</span></span></span><span class="line"><span class="cl"><span class="c">            &lt;/otherwise&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/choose&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/where&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><p>单条件动态查询使用了<code>&lt;where&gt;</code>、<code>&lt;choose&gt;</code>、<code>&lt;when&gt;</code>和<code>&lt;otherwise&gt;</code>，它们都是MyBatis提供的动态SQL元素。</p>
<p><code>&lt;choose&gt;</code>与<code>&lt;when&gt;</code>（必须）和<code>&lt;otherwise&gt;</code>元素配合使用。它会根据子元素<code>&lt;when&gt;</code>的<code>test</code>属性来判断要选择哪个<code>&lt;when&gt;</code>或<code>&lt;otherwise&gt;</code>元素。</p>
<p>如果<code>&lt;choose&gt;</code>外没有被<code>&lt;where&gt;</code>包裹则必须使用<code>&lt;otherwise&gt;</code>来包裹一个永真的条件SQL语句，以确保SQL语句不会出错。如果被<code>&lt;where&gt;</code>包裹了，<code>&lt;where&gt;</code>会根据需要判断是否要添加<code>WHERE</code>子句。</p>
<p><code>&lt;choose&gt;</code>、<code>&lt;when&gt;</code>和<code>&lt;otherwise&gt;</code>与<code>switch</code>语句的作用十分相似。</p>
<h2 id="insert" data-numberify>Insert<a class="anchor ms-1" href="#insert"></a></h2>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">&#34;add&#34;</span> <span class="na">useGeneratedKeys=</span><span class="s">&#34;true&#34;</span> <span class="na">keyProperty=</span><span class="s">&#34;id&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    INSERT INTO tb_user (username, password, ordered, gender,
</span></span><span class="line"><span class="cl">                          addr)
</span></span><span class="line"><span class="cl">    VALUES (#{username}, #{password}, #{ordered}, #{gender},
</span></span><span class="line"><span class="cl">            #{addr});
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/insert&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span></code></pre></div><p>接口方法直接传入对象即可，对象成员要与 <code>VALUES</code> 子句中的参数一一对应（参数符号中的名称要与对象的成员名称相同）。</p>
<blockquote>
<p>如果XML映射中只有一个参数，那么这个参数的名称不必与接口的参数名称相同。</p>
</blockquote>
<ul>
<li>
<p><code>id</code>：含义与 <code>&lt;insert&gt;</code> 的含义相同，为相应 <code>Mapper</code> 接口中的方法名（以下 <code>id</code>均为此含义，省略）。</p>
</li>
<li>
<p><code>useGeneratedKeys</code>：</p>
<ul>
<li>值为 <code>true</code> 时，Mybatis 会使用 JDBC 的 <code>getGeneratedKeys</code> 方法来取出由数据库内部生成的主键（如自增的主键）。</li>
<li>默认为 <code>false</code>。</li>
</ul>
</li>
<li>
<p><code>keyProperty</code>：<code>getGeneratedKeys</code> 获取到的主键值所要赋予的对象成员名。MyBatis 会使用 <code>getGeneratedKeys</code> 的返回值来设置它的值。</p>
<p>如，<code>keyProperty=&quot;id&quot;</code>——直接将获取到的主键值赋值给 <code>user.id</code>。</p>
<p>如果生成列不止一个，可以用逗号分隔多个属性名称。</p>
</li>
<li>
<p><code>Mapper</code> 接口返回值：<code>boolean</code>，插入成功返回 <code>true</code>，插入失败返回 <code>false</code>。</p>
<p>返回值也可以选择忽略，将<code>add()</code>接口的返回值设置为<code>void</code>即可。</p>
</li>
</ul>
<h2 id="update" data-numberify>Update<a class="anchor ms-1" href="#update"></a></h2>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;update</span> <span class="na">id=</span><span class="s">&#34;update&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    UPDATE tb_user
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;set&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;username != null and username != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            username = #{username},
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;password != null and password != &#39;&#39; &#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            password = #{password},
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;ordered != null&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            ordered = #{ordered},
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;gender != null and (gender == &#39;男&#39; or gender == &#39;女&#39;)&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            gender = #{gender},
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&#34;addr != null and addr != &#39;&#39;&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            addr = #{addr}
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/if&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/set&gt;</span>
</span></span><span class="line"><span class="cl">    WHERE id = #{id};
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/update&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">update</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span></code></pre></div><p>在 <code>&lt;update&gt;</code> 中有一些用 <code>&lt;set&gt;</code> 包裹起来的 <code>&lt;if&gt;</code>。这是因为需要使用 <code>&lt;set&gt;</code> 动态包含需要更新的列，忽略其它不更新的列。从而能根据<code>User</code>对象的值来决定要更新哪些数据，并且动态地改变SQL语句。</p>
<p>Update的Mapper接口返回值是<code>int</code>类型，返回更新的行数。同样可以将接口的返回值设置为<code>void</code>来忽略它。</p>
<h2 id="delete" data-numberify>Delete<a class="anchor ms-1" href="#delete"></a></h2>
<h3 id="删除单行数据" data-numberify>删除单行数据<a class="anchor ms-1" href="#删除单行数据"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;delete</span> <span class="na">id=</span><span class="s">&#34;deleteById&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    DELETE
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl">    WHERE id = #{id};
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/delete&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span></code></pre></div><h3 id="删除多行数据" data-numberify>删除多行数据<a class="anchor ms-1" href="#删除多行数据"></a></h3>
<p><code>xml</code> 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;delete</span> <span class="na">id=</span><span class="s">&#34;deleteByIds&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    DELETE
</span></span><span class="line"><span class="cl">    FROM tb_brand
</span></span><span class="line"><span class="cl">    WHERE id
</span></span><span class="line"><span class="cl">    IN
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">        &lt;foreach&gt;参数:
</span></span></span><span class="line"><span class="cl"><span class="c">            - item: 代表数组参数中的每个元素
</span></span></span><span class="line"><span class="cl"><span class="c">            - separator: 分隔符
</span></span></span><span class="line"><span class="cl"><span class="c">            - open: 插入开始符
</span></span></span><span class="line"><span class="cl"><span class="c">            - close: 插入结束符
</span></span></span><span class="line"><span class="cl"><span class="c">    --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;foreach</span> <span class="na">collection=</span><span class="s">&#34;ids&#34;</span> <span class="na">item=</span><span class="s">&#34;id&#34;</span> <span class="na">separator=</span><span class="s">&#34;,&#34;</span> <span class="na">open=</span><span class="s">&#34;(&#34;</span> <span class="na">close=</span><span class="s">&#34;)&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        #{id}
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/foreach&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/delete&gt;</span>
</span></span></code></pre></div><p><code>Mapper</code> 接口方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">deleteByIds</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">&#34;ids&#34;</span><span class="o">)</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">ids</span><span class="o">);</span>
</span></span></code></pre></div><p>Mybatis提供了 <code>&lt;foreach&gt;</code> 标签遍历数组，拼接SQL语句。<code>&lt;foreach&gt;</code> 同样也是<u>动态SQL</u>。</p>
<blockquote>
<p>更多XML映射器请查看官方文档：<a href="https://mybatis.net.cn/sqlmap-xml.html" target="_blank" rel="noopener noreferrer">MyBatis文档——XML映射器<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<h2 id="结果映射" data-numberify>结果映射<a class="anchor ms-1" href="#结果映射"></a></h2>
<h3 id="resultmap" data-numberify>resultMap<a class="anchor ms-1" href="#resultmap"></a></h3>
<p>假设SQL表中的字段与实体类的成员变量名无法一一对应，会导致SQL语句的传参出现问题。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_id</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_name</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_password</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_gender</span><span class="w"> </span><span class="nb">CHAR</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_addr</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">gender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">addr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// setter 和 getter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>那么可以使用<code>&lt;resultMap&gt;</code>元素来对表字段和成员名做一个映射（结果映射）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">    &lt;resultMap&gt;:
</span></span></span><span class="line"><span class="cl"><span class="c">        - id: 唯一标识
</span></span></span><span class="line"><span class="cl"><span class="c">        - type: 映射的类型,支持别名
</span></span></span><span class="line"><span class="cl"><span class="c">--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;resultMap</span> <span class="na">id=</span><span class="s">&#34;userResultMap&#34;</span> <span class="na">type=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--
</span></span></span><span class="line"><span class="cl"><span class="c">        两种标签:
</span></span></span><span class="line"><span class="cl"><span class="c">            - &lt;id&gt;: 完成主键字段的映射
</span></span></span><span class="line"><span class="cl"><span class="c">                - column: 表的列名
</span></span></span><span class="line"><span class="cl"><span class="c">                - property: 实体类的属性名
</span></span></span><span class="line"><span class="cl"><span class="c">            - &lt;result&gt;: 完成一般字段的映射
</span></span></span><span class="line"><span class="cl"><span class="c">                - column: 表的列名
</span></span></span><span class="line"><span class="cl"><span class="c">                - property: 实体类的属性名
</span></span></span><span class="line"><span class="cl"><span class="c">    --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;id</span> <span class="na">column=</span><span class="s">&#34;user_id&#34;</span> <span class="na">property=</span><span class="s">&#34;id&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&#34;user_name&#34;</span> <span class="na">property=</span><span class="s">&#34;userame&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&#34;user_password&#34;</span> <span class="na">property=</span><span class="s">&#34;password&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&#34;user_gender&#34;</span> <span class="na">property=</span><span class="s">&#34;gender&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&#34;user_addr&#34;</span> <span class="na">property=</span><span class="s">&#34;addr&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/resultMap&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectAll&#34;</span> <span class="na">resultMap=</span><span class="s">&#34;userResultMap&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT *
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><blockquote>
<p>要使用结果映射，需要把<code>&lt;select&gt;</code>中的<code>resultType</code>属性替换为<code>resultMap</code>，并且其属性值为<code>&lt;resultMap&gt;</code>的<code>id</code>值。</p>
</blockquote>
<h3 id="自动映射" data-numberify>自动映射<a class="anchor ms-1" href="#自动映射"></a></h3>
<p>当自动映射查询结果时，MyBatis 会获取结果中返回的列名并在 Java 类中查找相同名字的属性（忽略大小写）。</p>
<p>接上节例子，使用SQL语句的 <code>AS</code> 来实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;selectAll&#34;</span> <span class="na">resultType=</span><span class="s">&#34;user&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    SELECT 
</span></span><span class="line"><span class="cl">        user_id AS &#34;id&#34;,
</span></span><span class="line"><span class="cl">        user_name AS &#34;username&#34;,
</span></span><span class="line"><span class="cl">        user_password AS &#34;password&#34;,
</span></span><span class="line"><span class="cl">        user_gender AS gender,
</span></span><span class="line"><span class="cl">        user_addr AS &#34;addr&#34;
</span></span><span class="line"><span class="cl">    FROM tb_user
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/select&gt;</span>
</span></span></code></pre></div><blockquote>
<ul>
<li>
<p>通常数据库列使用大写字母组成的单词命名，单词间用下划线分隔；而 Java 属性一般遵循驼峰命名法约定。为了在这两种命名方式之间启用自动映射，需要将 <code>mapUnderscoreToCamelCase</code> 设置为 <code>true</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- 配置mybatis自动转换为驼峰式命名 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;settings&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&#34;mapUnderscoreToCamelCase&#34;</span> <span class="na">value=</span><span class="s">&#34;true&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/settings&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>&lt;resultMap&gt;</code>和自动映射可以混用。</p>
</li>
</ul>
</blockquote>
<h2 id="参数" data-numberify>参数<a class="anchor ms-1" href="#参数"></a></h2>
<p>MyBatis有两种参数：</p>
<ul>
<li><code>#{p}</code> —— 会自动转义。</li>
<li><code>${p}</code> —— 不会自动转义。</li>
</ul>
<blockquote>
<p>官方文档：<a href="https://mybatis.net.cn/sqlmap-xml.html#Parameters" target="_blank" rel="noopener noreferrer">MyBatis——XML映射器参数<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<p><strong>MyBatis 参数封装</strong>:</p>
<ul>
<li>
<p>单个参数:</p>
<ol>
<li>
<p>POJO类型: 直接使用,保证 <strong>属性名</strong> 和 <strong>参数占位符名称</strong> 一致</p>
</li>
<li>
<p>Map类型: 直接使用,保证 <strong>键名</strong> 和 <strong>参数占位符名称</strong> 一致</p>
</li>
<li>
<p>Collection: 封装为Map集合</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg0&#34;</span><span class="o">,</span> <span class="n">collection集合</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;collection&#34;</span><span class="o">,</span> <span class="n">collection集合</span><span class="o">)</span>
</span></span></code></pre></div><ul>
<li>使用<code>@Param</code>注解，替换Map集合中默认的arg键名</li>
</ul>
</li>
<li>
<p>List: 封装为Map集合</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg0&#34;</span><span class="o">,</span> <span class="n">list集合</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;collection&#34;</span><span class="o">,</span> <span class="n">list集合</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;list&#34;</span><span class="o">,</span> <span class="n">list集合</span><span class="o">)</span>
</span></span></code></pre></div><ul>
<li>使用<code>@Param</code>注解,替换Map集合中默认的arg键名</li>
</ul>
</li>
<li>
<p>Array: 封装为Map集合</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg0&#34;</span><span class="o">,</span> <span class="n">数组</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;array&#34;</span><span class="o">,</span> <span class="n">数组</span><span class="o">)</span>
</span></span></code></pre></div><ul>
<li>使用<code>@Param</code>注解,替换Map集合中默认的arg键名</li>
</ul>
</li>
<li>
<p>其他类型: 直接使用,且占位符名称和参数名称可以不相同</p>
</li>
</ol>
</li>
<li>
<p>多个参数: 封装为Map集合</p>
<ul>
<li>
<p>每个参数有两个键:</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg0&#34;</span><span class="o">,</span> <span class="n">参数值1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;param1&#34;</span><span class="o">,</span> <span class="n">参数值1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;arg1&#34;</span><span class="o">,</span> <span class="n">参数值2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;param2&#34;</span><span class="o">,</span> <span class="n">参数值2</span><span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>使用<code>@Param</code>注解,替换Map集合中默认的arg键名:</p>
<p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Param</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">)</span> <span class="n">参数类型</span> <span class="n">参数名</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">,</span> <span class="n">参数值1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;param1&#34;</span><span class="o">,</span> <span class="n">参数值1</span><span class="o">)</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<p>示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">User</span> <span class="nf">selectById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">selectByCondition</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="nd">@Param</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">)</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="nd">@Param</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">)</span> <span class="n">String</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="注解实现crud" data-numberify>注解实现CRUD<a class="anchor ms-1" href="#注解实现crud"></a></h2>
<p>对于简单的SQL语句来说，使用注解开发会比配置文件开发更加方便。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Select</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;SELECT * FROM tb_user WHERE id = #{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">User</span> <span class="nf">selectById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span></span></code></pre></div><blockquote>
<p>注意：注解是用来替换映射配置文件方式配置的，所以使用了注解，就不需要再映射配置文件中书写对应的 <code>statement</code>。</p>
</blockquote>
<p>Mybatis 针对 CURD 操作都提供了对应的注解：</p>
<ul>
<li>查询 ：<code>@Select</code></li>
<li>添加 ：<code>@Insert</code></li>
<li>修改 ：<code>@Update</code></li>
<li>删除 ：<code>@Delete</code></li>
</ul>
<p>注解适合用于完成简单功能，而使用配置文件来完成复杂功能。如果使用注解来完成动态SQL之类的复杂功能，就需要使用到MyBatis提供的SQL构建器来完成。详情请阅读官方SQL构建器文档：<a href="https://mybatis.net.cn/statement-builders.html" target="_blank" rel="noopener noreferrer">MyBatis文档——SQL语句构建器<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<hr>
<h1 id="动态sql" data-numberify>动态SQL<a class="anchor ms-1" href="#动态sql"></a></h1>
<p>动态 SQL 是 MyBatis 的强大特性之一。</p>
<p>MyBatis提供的动态SQL元素有：</p>
<ul>
<li><code>&lt;if&gt;</code></li>
<li><code>&lt;choose&gt;</code> (<code>&lt;when&gt;</code>, <code>&lt;otherwise&gt;</code>)</li>
<li><code>&lt;trim&gt;</code> (<code>&lt;where&gt;</code>, <code>&lt;set&gt;</code>)</li>
<li><code>&lt;foreach&gt;</code></li>
</ul>
<blockquote>
<p>更多与动态SQL请查看官方文档：<a href="https://mybatis.net.cn/dynamic-sql.html" target="_blank" rel="noopener noreferrer">MyBatis文档——动态SQL<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</blockquote>
<hr>
<h1 id="sqlsessionfactory工具类抽取" data-numberify>SqlSessionFactory工具类抽取<a class="anchor ms-1" href="#sqlsessionfactory工具类抽取"></a></h1>
<p>MyBatis重复代码会造成一些问题:</p>
<ul>
<li>不利于后期的维护。</li>
<li>SqlSessionFactory工厂类进行重复创建。</li>
</ul>
<p>对于Mybatis的基础操作出现的重复代码，可以使用一个静态代码块来自动加载：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SqlSessionFactoryUtils</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">SqlSessionFactory</span> <span class="n">sqlSessionFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 静态代码块会随着类的加载而自动执行，且只执行一次
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">resource</span> <span class="o">=</span> <span class="s">&#34;mybatis-config.xml&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">Resources</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">sqlSessionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">SqlSessionFactory</span> <span class="nf">getSqlSessionFactory</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">sqlSessionFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>工具类抽取以后，以后在对Mybatis的SqlSession进行操作的时候，就可以直接使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">SqlSessionFactory</span> <span class="n">sf</span> <span class="o">=</span> <span class="n">SqlSessionFactoryUtils</span><span class="o">.</span><span class="na">getSqlSessionFactory</span><span class="o">();</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Druid 数据库连接池</title>
      <link>/docs/spring/java-web/druid/</link>
      <pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/spring/java-web/druid/</guid>
      <description><![CDATA[数据库连接池 数据库连接池是个容器, 负责分配, 管理数据库连接 (Connection). 数据库连接池允许应用程序重复使用一个现有的数据库连接, 而不是再重新建立一个. 从而]]></description>
      <content:encoded><![CDATA[<h1 id="数据库连接池" data-numberify>数据库连接池<a class="anchor ms-1" href="#数据库连接池"></a></h1>
<p>数据库连接池是个容器, 负责分配, 管理数据库连接 (Connection).</p>
<p>数据库连接池允许应用程序重复使用一个现有的数据库连接, 而不是再重新建立一个. 从而减少资源浪费.</p>
<p>数据库连接池会自动释放超过最大空闲时间的数据库连接 (强制释放), 来避免因为没有释放数据库连接而引起的数据库连接遗漏.</p>
<p>使用数据库连接池的好处:</p>
<ul>
<li>资源可以重用</li>
<li>提升系统响应速度</li>
<li>避免数据库连接遗漏</li>
</ul>
<p>在通常情况下使用JDBC, 有可能会反复地创建和销毁 <code>Connection</code>对象. 这样重复创建销毁的过程特别耗费计算机的性能和时间.</p>
<p>而数据库使用了数据库连接池后，就能达到Connection对象的复用.</p>
<p>连接池是在一开始就创建好了一些连接 (Connection) 对象存储起来. 用户需要连接数据库时, 不需要自己创建连接, 而只需要从连接池中获取一个连接进行使用, 使用完毕后再将连接对象归还给连接池; 这样就可以起到资源重用, 也节省了频繁创建连接销毁连接所花费的时间, 从而提升了系统响应的速度.</p>
<p>常见的数据库连接池有:</p>
<ul>
<li>DBCP</li>
<li>C3P0</li>
<li>Druid</li>
</ul>
<hr>
<h1 id="druid" data-numberify>Druid<a class="anchor ms-1" href="#druid"></a></h1>
<h2 id="配置-druid" data-numberify>配置 Druid<a class="anchor ms-1" href="#配置-druid"></a></h2>
<ul>
<li>
<p><a href="https://repo1.maven.org/maven2/com/alibaba/druid/" target="_blank" rel="noopener noreferrer">下载Druid jar包<i class="fas fa-external-link-square-alt ms-1"></i></a>, 并导入:</p>
<p>在项目中, 将下载好的jar包放入项目的 <code>lib</code>目录中.</p>
<ul>
<li>然后点击鼠标右键&ndash;&gt;Add as Library (添加为库).</li>
<li>在添加为库文件的时候，有如下三个选项:
<ul>
<li>
<p>Global Library: 全局有效</p>
</li>
<li>
<p>Project Library: 项目有效</p>
</li>
<li>
<p>Module Library: 模块有效</p>
<p>选择Module Library.</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>在项目目录下定义Druid配置文件 <code>druid.properties</code>:</p>
<pre tabindex="0"><code>driverClassName=com.mysql.jdbc.Driver
url=jdbc:mysql:///db1?useSSL=false&amp;useServerPrepStmts=true
username=root
password=1234
# 初始化连接数量
initialSize=5
# 最大连接数
maxActive=10
# 最大等待时间
maxWait=3000
</code></pre></li>
<li>
<p>加载配置文件:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Properties</span> <span class="n">prop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">prop</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;demo/src/druid.properties&#34;</span><span class="o">));</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="使用-druid" data-numberify>使用 Druid<a class="anchor ms-1" href="#使用-druid"></a></h2>
<p>Java中从数据库连接池获取连接对象, 使用的是官方提供的数据库连接池标准接口, 由第三方组织实现此接口. 该接口提供了获取连接的功能:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Connection</span> <span class="nf">getConnection</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                  <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>因此, 使用Druid获取数据库连接还需要以下两步:</p>
<ul>
<li>
<p>获取数据库连接池对象:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"> <span class="n">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="n">DruidDataSourceFactory</span><span class="o">.</span><span class="na">createDataSource</span><span class="o">(</span><span class="n">prop</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p>从数据库连接池中获取连接 (<code>Connection</code>):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="操作实例" data-numberify>操作实例<a class="anchor ms-1" href="#操作实例"></a></h1>
<h2 id="需求分析" data-numberify>需求分析<a class="anchor ms-1" href="#需求分析"></a></h2>
<p>完成商品品牌数据的增删改查操作</p>
<ul>
<li>查询：查询所有数据</li>
<li>添加：添加品牌</li>
<li>修改：根据id修改</li>
<li>删除：根据id删除</li>
</ul>
<h2 id="环境准备" data-numberify>环境准备<a class="anchor ms-1" href="#环境准备"></a></h2>
<ol>
<li>
<p>创建数据库表:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 删除tb_brand表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">tb_brand</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 创建tb_brand表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tb_brand</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="p">,</span><span class="w"> </span><span class="c1">-- id 主键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">brand_name</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w"> </span><span class="c1">-- 品牌名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">company_name</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w"> </span><span class="c1">-- 企业名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">ordered</span><span class="w"> </span><span class="nb">INT</span><span class="p">,</span><span class="w"> </span><span class="c1">-- 排序字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">description</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span><span class="w"> </span><span class="c1">-- 描述信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="c1">-- 状态：0：禁用  1：启用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 添加数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_brand</span><span class="w"> </span><span class="p">(</span><span class="n">brand_name</span><span class="p">,</span><span class="w"> </span><span class="n">company_name</span><span class="p">,</span><span class="w"> </span><span class="n">ordered</span><span class="p">,</span><span class="w"> </span><span class="n">description</span><span class="p">,</span><span class="w"> </span><span class="n">status</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;三只松鼠&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;三只松鼠股份有限公司&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;好吃不上火&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="s1">&#39;华为&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;华为技术有限公司&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="s1">&#39;小米&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;小米科技有限公司&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">50</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;are you ok&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>创建 <code>pojo</code>包, 并在包中添加 <code>Brand</code>实体类:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">pojo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">* 品牌
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Brand</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span> <span class="c1">// id 主键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">brandName</span><span class="o">;</span> <span class="c1">// 品牌名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">companyName</span><span class="o">;</span> <span class="c1">// 企业名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">ordered</span><span class="o">;</span> <span class="c1">// 排序字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">description</span><span class="o">;</span> <span class="c1">// 描述信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">status</span><span class="o">;</span> <span class="c1">// 状态：0：禁用  1：启用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getBrandName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">brandName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBrandName</span><span class="o">(</span><span class="n">String</span> <span class="n">brandName</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">brandName</span> <span class="o">=</span> <span class="n">brandName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCompanyName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">companyName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCompanyName</span><span class="o">(</span><span class="n">String</span> <span class="n">companyName</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">companyName</span> <span class="o">=</span> <span class="n">companyName</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getOrdered</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ordered</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setOrdered</span><span class="o">(</span><span class="n">Integer</span> <span class="n">ordered</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">ordered</span> <span class="o">=</span> <span class="n">ordered</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">description</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDescription</span><span class="o">(</span><span class="n">String</span> <span class="n">description</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">description</span> <span class="o">=</span> <span class="n">description</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getStatus</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">status</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStatus</span><span class="o">(</span><span class="n">Integer</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">status</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Brand{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, brandName=&#39;&#34;</span> <span class="o">+</span> <span class="n">brandName</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, companyName=&#39;&#34;</span> <span class="o">+</span> <span class="n">companyName</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, ordered=&#34;</span> <span class="o">+</span> <span class="n">ordered</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, description=&#39;&#34;</span> <span class="o">+</span> <span class="n">description</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, status=&#34;</span> <span class="o">+</span> <span class="n">status</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="实现操作" data-numberify>实现操作<a class="anchor ms-1" href="#实现操作"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pojo.Brand</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.alibaba.druid.pool.DruidDataSourceFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.sql.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Properties</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 品牌数据的增删改查操作
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BrandDAO</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取Connection:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// - 导入jar包 &amp; 定义配置文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// - 加载配置文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Properties</span> <span class="n">prop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">prop</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;demo/src/druid.properties&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// - 获取连接池对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">dataSource</span> <span class="o">=</span> <span class="n">DruidDataSourceFactory</span><span class="o">.</span><span class="na">createDataSource</span><span class="o">(</span><span class="n">prop</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 查询所有
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 1. SQL: SELECT * FROM tb_brand
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 2. 参数: 不需要
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 3. 结果: ArrayList&lt;Brand&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Brand</span><span class="o">&gt;</span> <span class="nf">selectAll</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取数据库连接Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *2. 定义SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT * FROM tb_brand&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取pstmt对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">        <span class="c1">// *4. 设置参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *6. 处理结果: ArrayList&lt;Brand&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Brand</span> <span class="n">brand</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Brand</span><span class="o">&gt;</span> <span class="n">brands</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// - 遍历结果集
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 1. 获取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&#34;id&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">brandName</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;brand_name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">companyName</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;company_name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">ordered</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&#34;ordered&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">description</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;description&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">status</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&#34;status&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 2. 封装Brand对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">brand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Brand</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setCompanyName</span><span class="o">(</span><span class="n">companyName</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setOrdered</span><span class="o">(</span><span class="n">ordered</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setDescription</span><span class="o">(</span><span class="n">description</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">brand</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 3. 装载ArrayList集合
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">brands</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">brand</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 7. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 8. 返回结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">brands</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 添加
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 1. SQL:
</span></span></span><span class="line"><span class="cl"><span class="cm">         INSERT INTO tb_brand(
</span></span></span><span class="line"><span class="cl"><span class="cm">            brand_name,
</span></span></span><span class="line"><span class="cl"><span class="cm">            company_name,
</span></span></span><span class="line"><span class="cl"><span class="cm">            ordered,
</span></span></span><span class="line"><span class="cl"><span class="cm">            description,
</span></span></span><span class="line"><span class="cl"><span class="cm">            status)
</span></span></span><span class="line"><span class="cl"><span class="cm">         VALUES(?,?,?,?,?)
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 2. 参数: 除了id之外的所有参数信息
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 3. 结果: boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">Brand</span> <span class="n">brand</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取数据库连接Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *2. 定义SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">                INSERT INTO tb_brand(
</span></span></span><span class="line"><span class="cl"><span class="s">                    brand_name,
</span></span></span><span class="line"><span class="cl"><span class="s">                    company_name,
</span></span></span><span class="line"><span class="cl"><span class="s">                    ordered,
</span></span></span><span class="line"><span class="cl"><span class="s">                    description,
</span></span></span><span class="line"><span class="cl"><span class="s">                    status)
</span></span></span><span class="line"><span class="cl"><span class="s">                VALUES(?,?,?,?,?)&#34;&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取pstmt对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *4. 设置参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getBrandName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">2</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getCompanyName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="n">3</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getOrdered</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">4</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="n">5</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getStatus</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span> <span class="c1">// 返回影响的行数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 7. 返回结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 修改
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 1. SQL:
</span></span></span><span class="line"><span class="cl"><span class="cm">         UPDATE tb_brand
</span></span></span><span class="line"><span class="cl"><span class="cm">         SET brand_name=?,
</span></span></span><span class="line"><span class="cl"><span class="cm">            company_name=?,
</span></span></span><span class="line"><span class="cl"><span class="cm">            ordered=?,
</span></span></span><span class="line"><span class="cl"><span class="cm">            description=?,
</span></span></span><span class="line"><span class="cl"><span class="cm">            status=?
</span></span></span><span class="line"><span class="cl"><span class="cm">         WHERE id=?
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 2. 参数: 所有
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 3. 结果: boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">update</span><span class="o">(</span><span class="n">Brand</span> <span class="n">brand</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取数据库连接Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *2. 定义SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">                UPDATE tb_brand
</span></span></span><span class="line"><span class="cl"><span class="s">                SET brand_name=?,
</span></span></span><span class="line"><span class="cl"><span class="s">                    company_name=?,
</span></span></span><span class="line"><span class="cl"><span class="s">                    ordered=?,
</span></span></span><span class="line"><span class="cl"><span class="s">                    description=?,
</span></span></span><span class="line"><span class="cl"><span class="s">                    status=?
</span></span></span><span class="line"><span class="cl"><span class="s">                WHERE id=?&#34;&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取pstmt对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *4. 设置参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getBrandName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">2</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getCompanyName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="n">3</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getOrdered</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">4</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="n">5</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getStatus</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="n">6</span><span class="o">,</span> <span class="n">brand</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span> <span class="c1">// 返回影响的行数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 8. 返回结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 删除
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 1. SQL:DELETE FROM tb_brand WHERE id=?
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 2. 参数: id
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 3. 结果: boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">deleteById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 获取数据库连接Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *2. 定义SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;DELETE FROM tb_brand WHERE id=?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 获取pstmt对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// *4. 设置参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span> <span class="c1">// 返回影响的行数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 7. 返回结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>JDBC</title>
      <link>/docs/spring/java-web/jdbc/</link>
      <pubDate>Fri, 12 Aug 2022 14:46:53 +0000</pubDate>
      
      <guid>/docs/spring/java-web/jdbc/</guid>
      <description><![CDATA[JDBC 简介 JDBC (Java DataBase Connectivity, Java 数据库连接) 是使用Java语言操作关系型数据库的一套 API. JDBC其实是SUN公司制订的一套操作数据库的标准接口. JDBC中定义]]></description>
      <content:encoded><![CDATA[<h1 id="jdbc-简介" data-numberify>JDBC 简介<a class="anchor ms-1" href="#jdbc-简介"></a></h1>
<p>JDBC (Java DataBase Connectivity, Java 数据库连接) 是使用Java语言操作关系型数据库的一套 API.</p>
<p>JDBC其实是SUN公司制订的一套操作数据库的标准接口. JDBC中定义了所有操作关系型数据库的规则. 由各自的数据库厂商给出实现类 (驱动jar包).</p>
<p>Java, JDBC和各种数据库的关系如下图:</p>
<p><picture><img class="img-fluid " alt="" src="/docs/spring/java-web/jdbc/1662106467207.png" loading="lazy" width="756" height="421" />
</picture>

</p>
<p>使用JDBC的好处:</p>
<ul>
<li>不需要针对不同数据库分别开发.</li>
<li>可随时替换底层数据库, 访问数据库的Java代码基本不变.</li>
</ul>
<hr>
<h1 id="jdbc-使用的基本步骤" data-numberify>JDBC 使用的基本步骤<a class="anchor ms-1" href="#jdbc-使用的基本步骤"></a></h1>
<ol>
<li>
<p>导入JDBC驱动jar包:</p>
<ul>
<li>
<p>下载MySQL jar驱动包, <a href="https://www.runoob.com/java/java-mysql-connect.html#:~:text=Java%20%E8%BF%9E%E6%8E%A5%20MySQL%20%E9%9C%80%E8%A6%81%E9%A9%B1%E5%8A%A8%E5%8C%85%EF%BC%8C%E6%9C%80%E6%96%B0%E7%89%88%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E4%B8%BA%EF%BC%9A%20http%3A%2F%2Fdev.mysql.com%2Fdownloads%2Fconnector%2Fj%2F%20%EF%BC%8C%E8%A7%A3%E5%8E%8B%E5%90%8E%E5%BE%97%E5%88%B0%20jar%20%E5%BA%93%E6%96%87%E4%BB%B6%EF%BC%8C%E7%84%B6%E5%90%8E%E5%9C%A8%E5%AF%B9%E5%BA%94%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AF%BC%E5%85%A5%E8%AF%A5%E5%BA%93%E6%96%87%E4%BB%B6%E3%80%82,%E4%BD%A0%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%E6%9C%AC%E7%AB%99%E6%8F%90%E4%BE%9B%E7%9A%84%20jar%20%E5%8C%85%EF%BC%9A%20mysql-connector-java-5.1.39-bin.jar%20%E6%9C%AC%E5%AE%9E%E4%BE%8B%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF%20Eclipse%EF%BC%8C%E5%AF%BC%E5%85%A5%20jar%20%E5%8C%85%EF%BC%9A" target="_blank" rel="noopener noreferrer">菜鸟教程 Java MySQL 连接<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
</li>
<li>
<p>在项目中, 将下载好的jar包放入项目的 <code>lib</code>目录中.</p>
</li>
<li>
<p>然后点击鼠标右键&ndash;&gt;Add as Library (添加为库).</p>
</li>
<li>
<p>在添加为库文件的时候，有如下三个选项:</p>
<ul>
<li>
<p>Global Library: 全局有效</p>
</li>
<li>
<p>Project Library: 项目有效</p>
</li>
<li>
<p>Module Library: 模块有效</p>
<p>选择Global Library.</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>注册驱动:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="o">);</span>
</span></span></code></pre></div><blockquote>
<p>MySQL提供的 <code>Driver</code>的静态代码块会自动执行 <code>DriverManager.registerDriver()</code> 方法来注册驱动. 所以我们只需加载 <code>Driver</code>即可.
MySQL5之后的驱动包, 可以省略注册驱动的步骤.</p>
</blockquote>
</li>
<li>
<p>获取数据库连接:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span></code></pre></div><ul>
<li>
<p>其中, <code>url</code>, <code>username</code>和 <code>password</code>都是 <code>String</code>类型.</p>
</li>
<li>
<p><code>url</code>格式:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">jdbc:数据库软件名称://ip地址或域名:端口/数据库名称?参数键值对1&amp;参数键值对2...
</span></span></code></pre></div><p>例如, 连接本地mysql中名为test的数据库:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">jdbc:mysql://127.0.0.1:3306/test
</span></span></code></pre></div><p>本地mysql, 且端口为3306, url可简写为:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">jdbc:mysql:///数据库名称?参数键值对
</span></span></code></pre></div><p>常用的参数键值对有:</p>
<pre tabindex="0"><code>useSSL=false            // 禁用安全连接方式, 解决警告提示
useServerPrepStmts=true // 开启预编译(默认为false)
serverTimezone=GMT%2B8  // 设置时区, 东八区(即GMT+8)
serverTimezone=Asia/Shanghai    // 设置时区东八区
useUnicode=true&amp;characterEncoding=UTF-8 // 设置字符集为UTF-8
</code></pre></li>
</ul>
</li>
<li>
<p>获取执行SQL对象:</p>
<p>执行SQL语句需要SQL执行对象 (<code>Statement</code>对象):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Statement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
</span></span></code></pre></div><p><code>Statement</code>对象存在安全问题 (SQL注入等问题), 而使用 <code>PreparedStatement</code>不仅可以提升查询速度, 而且还能防止SQL注入问题.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;...SQL语句...&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p>执行SQL语句:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div><p>用于执行DML, DDL语句.</p>
<p>或者:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div><p>用于执行DQL语句.</p>
</li>
<li>
<p>处理返回结果</p>
</li>
<li>
<p>释放资源:</p>
<p><code>ResultSet</code>、<code>Statement</code>和 <code>Connection</code>对象都要 <code>&lt;i&gt;</code>按照顺序 <code>&lt;/i&gt;</code>释放资源.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">stmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span></code></pre></div></li>
</ol>
<p>大致代码如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.sql.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JDBCDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 接收用户输入的用户名和密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;...&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">pwd</span> <span class="o">=</span> <span class="s">&#34;...&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 1. 注册驱动（装载类，并实例化）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 2. 获取连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;jdbc:mysql://127.0.0.1:3306/test&#34;</span> <span class="o">+</span> 
</span></span><span class="line"><span class="cl">                <span class="s">&#34;?useServerPrepStmts=true&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">&#34;root&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">&#34;1234&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 3. 定义SQL语句 (用?作占位符)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 4. 获取执行SQL的PreparedStatement对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 设置参数（?）的值 pstmt.setXxx(index, value)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">2</span><span class="o">,</span> <span class="n">pwd</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 5. 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">// 6. 处理结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">                ...
</span></span></span><span class="line"><span class="cl"><span class="cm">            */</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 7. 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="preparedstatement-对象" data-numberify>PreparedStatement 对象<a class="anchor ms-1" href="#preparedstatement-对象"></a></h1>
<p>PreparedStatement 对象可以:</p>
<ul>
<li>预编译SQL语句并执行</li>
<li>预防SQL注入问题</li>
</ul>
<p>获取 <code>PreparedStatement</code>需要先传入SQL语句:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// SQL语句中的参数值,使用 ? 占位符替代
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 通过Connection对象获取PreparedStatement, 并传入对应的SQL语句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div><p>接着我们需要设置SQL对象中的参数值:</p>
<p>使用 <code>pstmt.setXxx(index, value)</code>, 给 <code>?</code> 赋值. 其中, <code>index</code>的值从 <code>1</code>开始, <code>value</code>的类型为 <code>Xxx</code>或 <code>xxx</code>.</p>
<p>例如, 给 <code>int</code>类型的 <code>value</code>赋值使用 <code>setInt()</code>, <code>String</code>类型使用 <code>setString()</code>. 除此之外还有 <code>setFloat()</code>, <code>setDouble()</code>, <code>setArray()</code>, <code>setByte()</code>等.</p>
<p>如果 <code>prepareStatement()</code>方法传入的是DML, DDL语句, 则使用 <code>executeUpdate()</code> 方法:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">executeUpdate</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>如果该方法执行的是DML语句 (<code>INSERT</code>, <code>UPDATE</code>和 <code>DELETE</code>), 则返回DML语句操作的行数; 如果是DDL语句则返回 0.</p>
<blockquote>
<p>需要注意, 在开发中很少使用java代码操作DDL语句.</p>
</blockquote>
<p>如果 <code>prepareStatement()</code>方法传入的是DQL语句 (<code>SELECT</code>), 使用的是 <code>executeQuery()</code> 方法:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ResultSet</span> <span class="nf">executeQuery</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>该方法返回的是DQL语句查询后的结果集.</p>
<p>在使用 <code>PreparedStatement</code>对象后, 需要使用 <code>close()</code>方法释放资源.</p>
<h2 id="statement-和-preparedstatement" data-numberify>Statement 和 PreparedStatement<a class="anchor ms-1" href="#statement-和-preparedstatement"></a></h2>
<p><code>Statement</code> 对象的一般用法如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;UPDATE tb_user SET password = \&#34;abc\&#34; WHERE id = 1&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Statement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">stmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span></code></pre></div><p><code>Statement</code>的SQL语句是作为 <code>executeUpdate()</code>和 <code>executeQuery()</code>的参数传入, 而 <code>PreparedStatement</code>则是在创建对象就已经作为 <code>prepareStatement()</code>方法的参数传入.</p>
<p>这是因为 <code>PreparedStatement</code>需要预先传入SQL语句, 来起到预编译SQL语句和预防SQL注入问题.</p>
<h2 id="预编译" data-numberify>预编译<a class="anchor ms-1" href="#预编译"></a></h2>
<p>一般情况下, java执行SQL语句的过程如下:</p>
<p>java程序请求数据库执行SQL语句后:</p>
<ul>
<li>检查: 数据库接收指令, 检查SQL语法</li>
<li>编译: 如果SQL语句无语法错误, 则将该语句编译成可执行的函数</li>
<li>执行: 编译完成后执行SQL语句</li>
</ul>
<p>而检查SQL和编译SQL花费的时间比执行SQL的时间还要长, 如果需要一次性执行多条SQL语句, 那会浪费大量时间和资源. 所以, <code>PreparedStatement</code>的出现解决了这个问题.</p>
<p>通过使用 <code>PreparedStatement</code>对象, 并且在连接数据库的 <code>url</code>中添加 <code>useServerPrepStmts=true</code>参数来开启SQL语句预编译功能. 预编译功能会将我们设置的SQL语句 (如 <code>&quot;SELECT id,username,password FROM tb_user WHERE username = ? AND password = ?&quot;</code>) 预先传给数据库, 让其先完成检查和编译的工作 (先完成耗时的工作), 然后再一次性执行所有SQL语句 (这些SQL语句都是相同的, 只是占位符处设置的值不同).</p>
<h2 id="sql注入" data-numberify>SQL注入<a class="anchor ms-1" href="#sql注入"></a></h2>
<p>SQL注入是指通过把SQL命令插入到Web表单提交, 或输入域名或页面请求的查询字符串, 最终达到欺骗服务器执行恶意的SQL命令.</p>
<p>而 <code>PreparedStatement</code>通过在SQL语句中使用 <code>?</code>占位符, 并且使用相应的 <code>setXxx()</code>方法来设置值 (设置的值如果含有特殊字符, 如 <code>&quot;</code> 和 <code>'</code> 等, 则会进行转义), 防止了SQL注入的发生.</p>
<p>下面代码说明了 <code>PreparedStatement</code>如何防止SQL注入:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// useServerPrepStmts=true开启预编译
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;jdbc:mysql:///test?useSSL=false&amp;useServerPrepStmts=true&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">&#34;root&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">&#34;n546,Lin0&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 接收用户输入的用户名和密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;zhangsan&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">pwd</span> <span class="o">=</span> <span class="s">&#34;&#39; OR &#39;1&#39; = &#39;1&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 定义SQL（用?作占位符）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 获取PreparedStatement对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   - 预编译SQL，性能更高
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//     默认关闭，在url加上参数useServerPrepStmts=true开启
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   - 防止SQL注入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 设置参数（?）的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   - 防注入原理：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//     字符串参数在setString中会被转义，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//     即整个参数被当成sql里面的字符串，而不是java的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 从mysql日志文件可以发现：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// &#39; OR &#39;1&#39; = &#39;1 转义成了 \&#39; OR \&#39;1\&#39; = \&#39;1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">2</span><span class="o">,</span> <span class="n">pwd</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 执行SQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// - 判读登录是否成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;登录成功！&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;登陆失败！&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>下面代码演示了把SQL代码片段插入到SQL命令, 来进行免密登录:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">LoginInject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;jdbc:mysql:///test&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">&#34;root&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">&#34;1234&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 接收用户输入的用户名和密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;abcdefg&#34;</span><span class="o">;</span> <span class="c1">// 用户名随意
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">pwd</span> <span class="o">=</span> <span class="s">&#34;&#39; OR &#39;1&#39; = &#39;1&#34;</span><span class="o">;</span> <span class="c1">// 密码传入SQL代码片段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = &#39;&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;&#39; AND password = &#39;&#34;</span><span class="o">+</span> <span class="n">pwd</span> <span class="o">+</span> <span class="s">&#34;&#39;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将sql语句where部分展开：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// WHERE username = &#39;abcdefg&#39; AND password = &#39;&#39; OR &#39;1&#39; = &#39;1&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 发现where语句条件始终为真
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Statement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">stmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 判读登录是否成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;登录成功！&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;登陆失败！&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 返回的是登录成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">stmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="resultset-对象" data-numberify>ResultSet 对象<a class="anchor ms-1" href="#resultset-对象"></a></h1>
<p><code>ResultSet</code> (结果集对象) 作用: 封装了SQL查询语句的结果, 是 <code>executeQuery()</code>方法的返回值类型.</p>
<p><code>ResultSet</code>对象有三个方法:</p>
<ul>
<li>
<p><code>next()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">boolean</span> <span class="nf">next</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>每次执行时, 将光标从当前位置向前移动一行 (光标从第0行开始), 并且判断当前行是否为有效行 (返回 <code>true</code>则代表为有效行)。</p>
</li>
<li>
<p><code>getXxx()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">xxx</span> <span class="nf">getXxx</span><span class="o">(</span><span class="n">arg</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>arg类型:</p>
<ul>
<li><code>int</code>: 代表列的编号 (按照 <code>SELECT</code>语句中的查询顺序), 从1开始</li>
<li><code>String</code>: 列的名称</li>
</ul>
</li>
<li>
<p><code>close()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">close</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="kd">throws</span> <span class="n">SQLException</span>
</span></span></code></pre></div><p>释放 <code>ResultSet</code>对象.</p>
</li>
</ul>
<p>下面演示了 <code>ResultSet</code>的使用:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id,username,password FROM tb_user&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Statement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// - 处理结果，遍历rs中的所有数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   - rs.next()：光标向下移动一行，并判断当前行是否有效
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// - 获取数据 getXxx()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// getXxx()方法可以使用列索引（从1开始）也可以使用列名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">String</span> <span class="n">usrname</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">passwd</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">3</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;id: &#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;username: &#34;</span> <span class="o">+</span> <span class="n">usrname</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;passwd: &#34;</span> <span class="o">+</span> <span class="n">passwd</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;-----------------------&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// - 释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// ResultSet、Statement和Connection都要按照顺序释放资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 先释放ResultSet, 再释放Statement, 最后是Connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">stmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><hr>
<h1 id="操作实例" data-numberify>操作实例<a class="anchor ms-1" href="#操作实例"></a></h1>
<p>用户账号密码增删改操作.</p>
<p>在编写JDBC代码之前需要先完成创建数据库, 创建 <code>pojo</code>包并编写 <code>User</code>实体类的工作:</p>
<ol>
<li>
<p>创建数据库并运行下方SQL代码:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1">-- 删除tb_user表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">tb_user</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 创建tb_user表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="nf">tb_user</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="kt">INT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="kp">AUTO_INCREMENT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">username</span><span class="w"> </span><span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">password</span><span class="w"> </span><span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 添加数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tb_user</span><span class="w"> </span><span class="k">VALUES</span><span class="p">(</span><span class="no">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;zhangsan&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;123&#39;</span><span class="p">),</span><span class="w"> </span><span class="p">(</span><span class="no">NULL</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;lisi&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;234&#39;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>创建 <code>pojo</code>包, 并在包中添加 <code>User</code>实体类:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">pojo</span><span class="o">;</span> <span class="c1">// pojo包存放实体类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Account{&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;id=&#34;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, username=&#39;&#34;</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;, password=&#39;&#34;</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="增删改操作" data-numberify>增删改操作<a class="anchor ms-1" href="#增删改操作"></a></h2>
<p>JDBC数据访问层的代码放在 <code>DAO</code>包下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">dao</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pojo.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.sql.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDAO</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">URL</span> <span class="o">=</span> <span class="s">&#34;jdbc:mysql:///test&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;?useSSL=false&amp;useServerPrepStmts=true&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">USERNAME</span> <span class="o">=</span> <span class="s">&#34;root&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">PASSWORD</span> <span class="o">=</span> <span class="s">&#34;1234&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据用户名和密码查询
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param username
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param password
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return User
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @throws SQLException
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">User</span> <span class="nf">select</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 参数有null值时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">username</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">password</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 连接数据库
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">URL</span><span class="o">,</span> <span class="n">USERNAME</span><span class="o">,</span> <span class="n">PASSWORD</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取PreparedStatement对象, 并设置SQL语句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;SELECT id, username, password&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">2</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取ResultSet
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">Integer</span> <span class="n">id</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&#34;id&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">pw</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">pw</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据用户名和密码添加数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param username
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param password
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @throws SQLException
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">URL</span><span class="o">,</span> <span class="n">USERNAME</span><span class="o">,</span> <span class="n">PASSWORD</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;INSERT INTO tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; VALUE(null, ?, ?)&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">2</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 根据用户名和密码删除数据
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param username
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param password
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return boolean
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @throws SQLException
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">URL</span><span class="o">,</span> <span class="n">USERNAME</span><span class="o">,</span> <span class="n">PASSWORD</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;DELETE FROM tb_user&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; WHERE username = ?&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34; AND password = ?&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">2</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>SQL 语句</title>
      <link>/blog/2022/01/sql-%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022/01/sql-%E8%AF%AD%E5%8F%A5/</guid>
      <description><![CDATA[基本概念 SQL（Structured Query Language，发音为 sequal）是一种专门用来与数据库沟通的语言。通过 SQL，用户可以对数据库进]]></description>
      <content:encoded><![CDATA[<h1 id="基本概念" data-numberify>基本概念<a class="anchor ms-1" href="#基本概念"></a></h1>
<p><strong>SQL</strong>（<strong>Structured Query Language</strong>，发音为 sequal）是一种专门用来与数据库沟通的语言。通过 SQL，用户可以对数据库进行各种操作。</p>
<blockquote>
<p>标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSISQL。</p>
</blockquote>
<hr>
<h2 id="数据库" data-numberify>数据库<a class="anchor ms-1" href="#数据库"></a></h2>
<p><strong>数据库</strong>（<strong>database</strong>）是一个用于保存有组织的数据的容器或数据集合。</p>
<p>每个数据库都有唯一的标识符。</p>
<hr>
<h3 id="表" data-numberify>表<a class="anchor ms-1" href="#表"></a></h3>
<p><strong>表</strong>（<strong>table</strong>）是某种特定类型数据的结构化清单，用于存储某种特定类型的数据。</p>
<p>在同一个数据库中的每个表都有一个唯一的标识符来标识自己。因此，在同个数据库中，不能拥有两个名称相同的表，但在不同的数据库中可以使用相同的表名。</p>
<hr>
<h3 id="模式" data-numberify>模式<a class="anchor ms-1" href="#模式"></a></h3>
<p><strong>模式</strong>（<strong>schema</strong>）是一种关于数据库和表的布局及特性的信息。它是用来描述数据库中表的特性（如，存储的数据类型、数据的分解方式、各部分的信息的命名），或描述整个数据库（和其中表的关系）。</p>
<hr>
<h3 id="行和列" data-numberify>行和列<a class="anchor ms-1" href="#行和列"></a></h3>
<h4 id="列" data-numberify>列<a class="anchor ms-1" href="#列"></a></h4>
<p><strong>列</strong>（<strong>column</strong>）是表中的一个字段（即，表的组成部分）。所有的表都是由一个或多个列组成的。列存储表中的某部分信息，且这部分信息必须是同一种数据类型（<strong>datatype</strong>）。</p>
<p>数据类型限制（或允许）该列中存储的数据的种类。它还能帮助正确地分类数据，并在优化磁盘使用方面起重要的作用。</p>
<p>利用特定的列，可以对数据进行分类和过滤。所以，数据分解十分重要。</p>
<p>数据类型及其名称是 SQL 不兼容的重要原因之一。对于不同的 DBMS，大多数基本数据类型都得到了一致的支持，但许多高级数据类型却没有。</p>
<hr>
<h4 id="行" data-numberify>行<a class="anchor ms-1" href="#行"></a></h4>
<p>表中每一条记录的数据都是按<strong>行</strong>（<strong>row</strong>）存储的。</p>
<hr>
<h4 id="主键" data-numberify>主键<a class="anchor ms-1" href="#主键"></a></h4>
<p><strong>主键</strong>（<strong>primary key</strong>）是用来唯一标识表中每一行的列（如国际标准书号 ISBN 就可作为主键），可以是一列或多列。</p>
<p>满足以下条件的列即可作为主键：</p>
<ol>
<li>
<p>任意两行都不具有相同的主键值。</p>
</li>
<li>
<p>每一行都必须具有一个主键值（主键列不允许空值 NULL）。</p>
</li>
<li>
<p>主键列中的值不允许修改或更新。</p>
</li>
<li>
<p>主键值不能重用（即使某行从表中删除，它的主键依然不能赋给以后的新行）。</p>
</li>
</ol>
<p>在使用多列作为主键时，上述条件必须应用到所有列，即所有列值的组合必须是唯一的（但不同列中可以存在相同的值）。</p>
<hr>
<h2 id="关系数据库" data-numberify>关系数据库<a class="anchor ms-1" href="#关系数据库"></a></h2>
<p>关系数据库由关系表组成，而关系表的设计就是要把信息分解成多个表，一类数据一个表。各表通过某些共同的值互相关联。</p>
<p>常见的两个关系表都会有至少一个相同类型且表示相同的列，对于其中一个表，该列是这个表的主键，从而能使另一个表甚至关系数据库中的其他表通过这个主键对应到这个表中的行。</p>
<p>一个优秀的关系数据库通常具有以下优点：</p>
<ul>
<li>
<p>关系库中的每个表中的每个行的信息重复很少，减少了时间和空间的浪费。</p>
</li>
<li>
<p>如果信息有更新，仅需更新对应的表中的数据。</p>
</li>
<li>
<p>数据是一致的（没有重复的数据），使得处理数据和生成报表更简单。</p>
</li>
</ul>
<p>总结：关系数据库的<strong>可伸缩性</strong>（<strong>scale</strong>）远比非关系数据库要好。</p>
<blockquote>
<p>可伸缩是指，能够适应不断增加的工作量而不失败。</p>
</blockquote>
<hr>
<h2 id="数据库管理系统" data-numberify>数据库管理系统<a class="anchor ms-1" href="#数据库管理系统"></a></h2>
<p><strong>数据库管理系统</strong>（<strong>DataBase Management System</strong>，<strong>DBMS</strong>）是一种用于创建和操纵数据库的软件。</p>
<p>绝大多数 DBMS 都支持 ANSI SQL，但一些 DBMS 有自己的扩展。不同的 SQL 实现有自己的名称（如 Oracle 的 PL/SQL、微软 SQL Server 的 Transact-SQL 等）。</p>
<p>DBMS 可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存应用中实体的数据，一般会在数据库创建多个表，以保存程序中实体的数据。</p>
<p>数据库管理系统、数据库和表的关系：</p>
<hr>
<h2 id="sql-语句分类" data-numberify>SQL 语句分类<a class="anchor ms-1" href="#sql-语句分类"></a></h2>
<ol>
<li>
<p><strong>DDL</strong>（<strong>Data Definition Language</strong>，<strong>数据定义语言</strong>）：用来定义数据库对象：数据库，表，列等。</p>
<p>关键字：<code>create</code>、<code>drop</code>、<code>alter</code> 等。</p>
</li>
<li>
<p><strong>DML</strong>（<strong>Data Manipulation Language</strong>，<strong>数据操作语言</strong>）：用来对数据库中表的数据进行增删改。</p>
<p>关键字：<code>insert</code>、<code>delete</code>、<code>update</code> 等。</p>
</li>
<li>
<p><strong>DQL</strong>（<strong>Data Query Language</strong>，<strong>数据查询语言</strong>）：用来查询数据库中表的记录。</p>
<p>关键字：<code>select</code>、<code>where</code> 等。</p>
</li>
<li>
<p><strong>DCL</strong>（<strong>Data Control Language</strong>，<strong>数据控制语言</strong>）：用来定义数据库的访问权限和安全级别，及创建用户。</p>
<p>关键字：<code>GRANT</code>、<code>REVOKE</code> 等。</p>
</li>
</ol>
<hr>
<h2 id="sql-语法" data-numberify>SQL 语法<a class="anchor ms-1" href="#sql-语法"></a></h2>
<ul>
<li>
<p>SQL语句可以单行或多行书写，以分号结尾。</p>
</li>
<li>
<p>可使用空格和缩进来增强语句的可读性。</p>
</li>
<li>
<p>大多数数据库的 SQL 语句不区分大小写，关键字建议使用大写（可以提高运行速度）。</p>
</li>
</ul>
<hr>
<h2 id="字段" data-numberify>字段<a class="anchor ms-1" href="#字段"></a></h2>
<p><strong>字段</strong>（<strong>filed</strong>）基本上与列的意思相同，但字段这个术语通常在计算字段这种场合下使用。</p>
<hr>
<h1 id="select-语句" data-numberify>SELECT 语句<a class="anchor ms-1" href="#select-语句"></a></h1>
<p>任何 SQL 语句都是<strong>查询</strong>（<strong>query</strong>）。但此术语一般指 SELECT 语句。</p>
<hr>
<ul>
<li>
<p>检索列：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 从 tab_name 中检索出filed1, filed2 等列（字段）
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 可以检索单个列或多个列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>列的顺序是按照指令中指出的列名的顺序显示。行的顺序是按照存储在物理内存中的顺序显示。</p>
<hr>
</li>
<li>
<p>使用<strong>通配符</strong> <code>*</code> 检索表中的所有列：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 检索出 tab_name 中所有的列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>一般情况下，返回的列是按照存储在物理内存中的顺序显示的，并没有特定顺序。可能是按照数据被添加到表中的顺序显示（在没有增删数据的情况下），也可能不是（在有数据进行过更新或删除，这个顺序将会受到 DBMS 重用回收存储空间的方式的影响）。</p>
<p>使用通配符可以很方便地显示表中所有的列（包括名字未知的列），但这么做可能会降低检索速度和应用程序的性能（因为程序会检索所有表中的所有列）。</p>
</li>
</ul>
<hr>
<h2 id="all-和-distinct" data-numberify>ALL 和 DISTINCT<a class="anchor ms-1" href="#all-和-distinct"></a></h2>
<p>可以在列名前指定 <code>ALL</code>（默认）和 <code>DISTINCT</code> 关键字，它们表示：</p>
<ul>
<li>
<p><code>ALL</code> —— 列出当前指定的列的所有行。</p>
</li>
<li>
<p><code>DISTINCT</code> —— 列出由当前所有列组合的不重复的行。</p>
</li>
</ul>
<p>可以对聚集函数使用 <code>ALL</code> 和 <code>DISTINCT</code> 关键字指定。</p>
<ul>
<li>
<p><code>ALL</code> —— 默认选项，包含所有的行，对聚集函数指定 <code>ALL</code>（可忽略）表示对所有的行执行计算。</p>
</li>
<li>
<p><code>DISTINCT</code> —— 指定 <code>DISTINCT</code>，包含不重复的行。</p>
<ul>
<li>
<p>对聚集函数指定 <code>DISTINCT</code> 表示只对不重复的行进行计算。</p>
</li>
<li>
<p>使用 <code>DISTINCT</code> 必须明确指出列名，而不能使用 <code>*</code>。</p>
</li>
</ul>
</li>
</ul>
<p>列出不重复的行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1, filed2, ... 不重复
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p><code>DISTINCT</code> 作用于所有指定的列，该 SELECT 语句会返回所有不重复的 <code>filed1, filed2, ...</code> 组合的行。使用 <code>DISTINCT *</code> 可以返回由所有列组合的不重复的行。</p>
<hr>
<h2 id="限制返回的行" data-numberify>限制返回的行<a class="anchor ms-1" href="#限制返回的行"></a></h2>
<p>各 DBMS 实现并不相同：</p>
<ul>
<li>
<p>SQL Server：使用 <code>TOP</code> 关键字。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 返回前 n 行
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n 是任一正整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">TOP</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
</li>
<li>
<p>DB2：<code>FETCH FIRST n ROWS ONLY</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 返回前 n 行
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n 是任一正整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FETCH</span><span class="w"> </span><span class="k">FIRST</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="k">ROWS</span><span class="w"> </span><span class="k">ONLY</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
</li>
<li>
<p>Oracle：基于 <code>ROWNUM</code>（行计数器）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 返回前 n 行
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n 是任一正整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">ROWNUM</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
</li>
<li>
<p>MySQL、MariaDB、PostgreSQL and SQLite：使用 <code>LIMIT</code> 子句。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 返回前 n 行
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n 是任一正整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LIMIT</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 返回从第 m 行开始的前 n 行
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n 是任一正整数，m 是任一非负整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LIMIT</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="k">OFFSET</span><span class="w"> </span><span class="n">m</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>在 MySQL、MariaDB 和 SQLite 中，上条指令可简化为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 返回从第 m 行开始的前 n 行
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n 是任一正整数，m 是任一非负整数
</span></span></span><span class="line"><span class="cl"><span class="c1">-- m 指定开始的行数，n 指定返回的行数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LIMIT</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>行是从 0 开始计数。</p>
</li>
</ul>
<hr>
<h2 id="order-by-排序数据" data-numberify>ORDER BY 排序数据<a class="anchor ms-1" href="#order-by-排序数据"></a></h2>
<ol>
<li>
<p>使用 <code>ORDER BY</code> 子句取一个或多个列的名字，据此对数据进行排序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- order1, order2, ... 是排序的依据
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 该语句会先对 order1 进行排序
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 仅在具有多行相同 order1 值时，才按照 order2 排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">order1</span><span class="p">,</span><span class="w"> </span><span class="n">order2</span><span class="p">,</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div><p><code>ORDER BY</code> 子句必须是 SELECT 语句中的最后一条子句。默认是升序排序（从 A 到 Z）。</p>
<hr>
</li>
<li>
<p>按相对列位置进行排序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- n1、n2 …… 是小于或等于指定的列的总数的正整数
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n1、n2 …… 这组数中的每两个数都不相等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">n1</span><span class="p">,</span><span class="w"> </span><span class="n">n2</span><span class="p">,</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div><p>按相对位置排序的好处是不用输入列名，但有可能会造成错用列进行排序（特别是在对 SELECT 清单进行更改时）。</p>
</li>
</ol>
<p>实际列名排序和相对列位置排序可混合使用。</p>
<blockquote>
<p>📌最好的排序方式是，对冗长的列名重命名，然后使用列名进行排序。这样可以减少错误的出现。</p>
</blockquote>
<hr>
<h3 id="指定排序方向" data-numberify>指定排序方向<a class="anchor ms-1" href="#指定排序方向"></a></h3>
<p>指定排序的关键字：<code>ASC</code> —— 升序排序、<code>DESC</code> —— 降序排序。<code>ASC</code> 和 <code>DESC</code> 必须对每一列进行指定，因为它们只会对直接位于其前面的列名指定排序方式。可以对某一列指定 <code>ASC</code>（或 <code>DESC</code>）后对其它列指定 <code>DESC</code>（或 <code>ASC</code>）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- order1, order2, ... 是排序的依据，且都被指定了升序排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">order1</span><span class="w"> </span><span class="k">ASC</span><span class="p">,</span><span class="w"> </span><span class="n">order2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span></code></pre></div><ol>
<li>
<p><code>DESC</code> 关键字指定降序排序。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- order1, order2, ... 是排序的依据，且都被指定了降序排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">order1</span><span class="w"> </span><span class="k">DESC</span><span class="p">,</span><span class="w"> </span><span class="n">order2</span><span class="w"> </span><span class="k">DESC</span><span class="p">,</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>对某些列指定升序排序，对另外某些列指定升序排序。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- asc_order1, asc_order2, ... 都是指定升序排序
</span></span></span><span class="line"><span class="cl"><span class="c1">-- desc_order1, desc_order2, ... 都是指定降序排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">asc_order1</span><span class="w"> </span><span class="k">ASC</span><span class="p">,</span><span class="w"> </span><span class="n">asc_order2</span><span class="p">,</span><span class="w"> </span><span class="p">...,</span><span class="w"> </span><span class="n">desc_order1</span><span class="w"> </span><span class="k">DESC</span><span class="p">,</span><span class="w"> </span><span class="n">desc_order2</span><span class="w"> </span><span class="k">DESC</span><span class="p">,</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div></li>
</ol>
<p>大多数 DBMS 默认使用字典（dictionary）排序（即大小写字母被视为相同），但许多 DBMS 允许改变这种方式。</p>
<hr>
<h2 id="where-过滤数据" data-numberify>WHERE 过滤数据<a class="anchor ms-1" href="#where-过滤数据"></a></h2>
<p>使用 <code>WHERE</code> 子句能够根据指定的<strong>搜索条件</strong>（<strong>search criteria</strong>），检索用户需要的数据。搜索条件也被称为<strong>过滤条件</strong>（<strong>filter condition1</strong>）。</p>
<ul>
<li>
<p>检索单一条件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一列名
</span></span></span><span class="line"><span class="cl"><span class="c1">-- condition1 的类型和 n 的类型要一致
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>数据也可以在应用层进行过滤，但当 DBMS 返回的数据超出实际所需的数据时，会影响应用的性能，并且降低应用的可伸缩性，这还会造成网络宽带的浪费（服务器不得不通过网络发送多余的数据）。</p>
<hr>
</li>
<li>
<p><strong>WHERE 子句操作符</strong>（条件操作符）：</p>
<p>并非所有 DBMS 都支持所有的操作符，某些 DBMS 可能不支持个别操作符。</p>
<table>
<thead>
<tr>
<th><strong>操作符</strong></th>
<th><strong>说明</strong></th>
<th><strong>操作符</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>=</code></td>
<td>等于</td>
<td><code>&gt;</code></td>
<td>大于</td>
</tr>
<tr>
<td><code>&lt;&gt;</code> or <code>!=</code></td>
<td>不等于</td>
<td><code>&gt;=</code></td>
<td>大于等于</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>小于</td>
<td><code>!&gt;</code></td>
<td>不大于</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>小于等于</td>
<td><code>BETWEEN</code></td>
<td>范围在指定的两个值之间</td>
</tr>
<tr>
<td><code>!&lt;</code></td>
<td>不小于</td>
<td><code>IS NULL</code></td>
<td>为 NULL 的值</td>
</tr>
</tbody>
</table>
<hr>
</li>
<li>
<p>使用 <code>BETWEEN</code> 在指定范围内检索：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一列名
</span></span></span><span class="line"><span class="cl"><span class="c1">-- condition1 的类型和 n 、m 的类型要一致
</span></span></span><span class="line"><span class="cl"><span class="c1">-- n 和 m 为低端值和高端值
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 检索时匹配的值包括 n 和 m
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w"> </span><span class="k">BETWEEN</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">m</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
</li>
<li>
<p>使用 <code>IS NULL</code> 检索空值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一列名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w"> </span><span class="k">IS</span><span class="w"> </span><span class="no">NULL</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><code>IS NOT NULL</code> 检索不为空值的行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一列名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w"> </span><span class="k">IS</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
<hr>
<h3 id="逻辑操作符" data-numberify>逻辑操作符<a class="anchor ms-1" href="#逻辑操作符"></a></h3>
<p>可以在一条 <code>WHERE</code> 子句中包含任意数量的<strong>逻辑操作符</strong>（<strong>logical operator</strong>），且允许两者结合以进行复杂、高级的过滤。</p>
<ol>
<li>
<p><code>AND</code> 操作符检索满足所有给定条件的行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition11，condition12 …… 是包含条件操作符的子句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">condition12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">AND</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div><hr>
</li>
<li>
<p><code>OR</code> 操作符检索满足任一条件的行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition11，condition12 …… 是包含条件操作符的子句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="n">condition12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">OR</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div><p>许多 DBMS 在使用 <code>OR</code> 操作符时，当第 1 个条件满足的情况下，就不再计算第 2 个条件。</p>
<hr>
</li>
<li>
<p><code>NOT</code> 操作符是否定操作符，否定跟随在其后的条件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是任意条件子句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="n">condition11</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>大多数 DBMS 允许使用 NOT 否定任何条件。</p>
</li>
</ol>
<hr>
<h3 id="in-指定条件范围" data-numberify>IN 指定条件范围<a class="anchor ms-1" href="#in-指定条件范围"></a></h3>
<p><code>IN</code> 操作符用来指定条件范围，匹配范围中指定的每个条件。<code>IN</code> 操作符后的括号中的合法值用逗号分隔。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一列
</span></span></span><span class="line"><span class="cl"><span class="c1">-- val1, val2, ... 是与 condition1 类型相同的一组合法值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="n">val1</span><span class="p">,</span><span class="w"> </span><span class="n">val2</span><span class="p">,</span><span class="w"> </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><p><code>IN</code> 操作符和 <code>OR</code> 操作符的功能类似，但在某些方面，<code>IN</code> 操作符有其优点。</p>
<ul>
<li>
<p>在有很多合法选项时，<code>IN</code> 操作符可读性更强。</p>
</li>
<li>
<p>与其他 <code>AND</code> 和 <code>OR</code> 操作符组合使用 <code>IN</code> 时，求值顺序更容易管理。</p>
</li>
<li>
<p><code>IN</code> 操作符一般比一组 <code>OR</code> 操作符执行得更快。</p>
</li>
<li>
<p><code>IN</code> 操作符可包含其他 SELECT 语句，能更动态地建立 WHERE 子句。</p>
</li>
</ul>
<hr>
<h3 id="通配符" data-numberify>通配符<a class="anchor ms-1" href="#通配符"></a></h3>
<p><strong>通配符</strong>（<strong>wildcard</strong>）是用于匹配值的一部分的特殊字符。</p>
<p><strong>搜索模式</strong>（<strong>search pattern</strong>）由字面值、通配符或两者组合构成的搜索条件。</p>
<p>利用通配符，可以创建比较特定数据的搜索模式。要使用通配符，必须在搜索子句中使用 <code>LIKE</code> 操作符。且通配符只能用于字符串。</p>
<ul>
<li>
<p>使用通配符搜索一般比其他简单搜索耗费更长的处理时间。</p>
</li>
<li>
<p>不要过度使用通配符。</p>
</li>
<li>
<p>尽量不要把通配符用在搜索模式的开始处（通配符置于开始处是最慢的）。</p>
</li>
<li>
<p>不同类型的通配符可以混合使用。</p>
</li>
</ul>
<hr>
<ol>
<li>
<p><code>%</code> 通配符：表示任何字符出现任意次数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一字符类型的列
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 该语句表示在 condition1 列中搜索以 ABC 开头的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">WHRER</span><span class="w"> </span><span class="n">condition1</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;ABC%&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>
<p>包含 <code>ABC</code> 的字符串：<code>'%ABC%'</code>；</p>
</li>
<li>
<p>以 <code>ABC</code> 结尾的字符串：<code>'ABC%'</code>；</p>
</li>
<li>
<p>以 <code>A</code> 为开头，以 <code>B</code> 为结尾的字符：<code>'A%B'</code>；</p>
</li>
<li>
<p>某些 DBMS 会用空格来填补字段内容，可能会对该搜索模式造成影响。</p>
</li>
<li>
<p>包含 <code>AB</code> 和 <code>CD</code> 的字符串：<code>'%AB%CD%'</code>；</p>
</li>
<li>
<p>……</p>
</li>
</ul>
<hr>
</li>
<li>
<p><code>_</code> 通配符：表示匹配单个任意字符。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一字符类型的列
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 该语句表示匹配以 ABC 结尾，开头为任意一个字符的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;_ABC&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
</li>
<li>
<p><code>[]</code> 通配符：用来指定一个字符集，它必须匹配指定位置的一个字符。</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是表中任一字符类型的列
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 该语句匹配以 A 或 B 其中之一与 C 的组合的字符串（仅有两个字符）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;[AB]C&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>使用 <code>^</code> 可以来否定 <code>[]</code> 定义的字符集：<code>'[^AB]'</code> —— 该模式会匹配除了 <code>A</code> 和 <code>B</code> 之外的任何一个字符。</p>
</li>
</ol>
<h3 id="子查询" data-numberify>子查询<a class="anchor ms-1" href="#子查询"></a></h3>
<p>子查询通过嵌套的<code>SELECT</code>语句，将查询结果作为值返回。</p>
<p><code>SELECT</code>可以嵌套地使用。</p>
<hr>
<h1 id="拼接" data-numberify>拼接<a class="anchor ms-1" href="#拼接"></a></h1>
<p><strong>拼接</strong>（<strong>concatenate</strong>）是指将值联结到一起（将一个值附加到另一个值）构成单个值。</p>
<ul>
<li>
<p>SQL Server 使用 <code>+</code> 号拼接：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1, filed2, filed3, ... 可以是任意同类型的字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">filed2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">filed3</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>DB2、Oracle、PostgreSQL 和 SQLite 使用 <code>||</code>：<code>filed1 || filed2 || filed3 || ...</code>。</p>
</li>
<li>
<p>MySQL 和 MariaDB 使用 <code>Concat()</code> 函数：<code>Concat(filed1, filed2, filed3, ...)</code>。</p>
</li>
</ul>
<p>某些 DBMS 会用空格填充字段，可以使用 <code>RTRIM()</code> 函数来清除这些空格。</p>
<hr>
<h1 id="as-指定别名" data-numberify>AS 指定别名<a class="anchor ms-1" href="#as-指定别名"></a></h1>
<p>使用 <code>AS</code> 关键字赋予字段或值一个<strong>别名</strong>（<strong>alias</strong>）。别名既可以是一个单词，也可以是一个字符串，字符串需用引号括起。使用别名时不应使用表中实际的列名，虽然这样做也算合法，但可能会产生模糊的错误消息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed 是一个字段或值
</span></span></span><span class="line"><span class="cl"><span class="c1">-- alias 是 filed 的别名
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 赋予别名后可以在接下来的子句中使用别名来替代这个字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="k">alias</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="k">alias</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="函数" data-numberify>函数<a class="anchor ms-1" href="#函数"></a></h1>
<h2 id="数值处理函数" data-numberify>数值处理函数<a class="anchor ms-1" href="#数值处理函数"></a></h2>
<p>数值处理函数仅处理数值数据，是最一致、最统一的函数。</p>
<p>常用的数值处理函数：</p>
<table>
<thead>
<tr>
<th><strong>Functions</strong></th>
<th><strong>Explain</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ABC()</code></td>
<td>返回一个数的绝对值。</td>
</tr>
<tr>
<td><code>COS()</code></td>
<td>返回一个角度的余弦。</td>
</tr>
<tr>
<td><code>EXP()</code></td>
<td>返回一个数的指数值。</td>
</tr>
<tr>
<td><code>PI()</code></td>
<td>返回圆周率 $\pi$ 值。</td>
</tr>
<tr>
<td><code>SIN()</code></td>
<td>返回一个角度的正弦。</td>
</tr>
<tr>
<td><code>SQRT()</code></td>
<td>返回一个数的平方根。</td>
</tr>
<tr>
<td><code>TAN()</code></td>
<td>返回一个角度的正切。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="文本处理函数" data-numberify>文本处理函数<a class="anchor ms-1" href="#文本处理函数"></a></h2>
<p>常用的文本处理函数：</p>
<table>
<thead>
<tr>
<th><strong>Functions</strong></th>
<th><strong>Explain</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>LEFT(str, num)</code></td>
<td>返回字符串 <code>str</code> 左边前 <code>num</code> 个字符。</td>
</tr>
<tr>
<td><code>LENGTH(str)</code>、
<code>DATALENGTH(str)</code>
or
<code>LEN(str)</code></td>
<td>返回字符串的长度。</td>
</tr>
<tr>
<td><code>LOWER(str)</code></td>
<td>将字符串转换为小写。</td>
</tr>
<tr>
<td><code>LTRIM(str)</code></td>
<td>去掉字符串左边的空格。</td>
</tr>
<tr>
<td><code>RIGHT(str, num)</code></td>
<td>返回字符串 <code>str</code> 右边前 <code>num</code> 个字符。</td>
</tr>
<tr>
<td><code>RTRIM(str)</code></td>
<td>去掉字符串右边的空格。</td>
</tr>
<tr>
<td><code>SUBSTR(str, n, size)</code> or <code>SUBSTRING(str, n, size)</code></td>
<td>提取字符串的组成部分。
DB2、Oracle、PostgreSQL 和 SQLite 使用 <code>SUBSTR()</code>；
MariaDB、MySQL 和 SQL Server 使用 <code>SUBSTRING()</code>。
<code>n</code> 是指字符串中第 <code>n</code> 个字符（从 1 开始计数），
<code>size</code> 是指截取的字符串长度，截取出的字符串包括第 <code>n</code> 个字符。</td>
</tr>
<tr>
<td><code>SOUNDEX(str)</code></td>
<td>返回字符串的 SOUNDEX 值（描述 <code>str</code> 语音表示的字母数字模式）。
PostgreSQL 不支持。SQLite 要开启 SQLITE_SOUNDEX 编译选项。
使用 <code>SOUNDEX()</code> 函数对两个字符串进行比较，
使得能对字符串进行发音比较而不是字母比较。
如 <code>WHERE SOUNDEX(str1) = SOUNDEX(str2)</code>。</td>
</tr>
<tr>
<td><code>UPPER(str)</code></td>
<td>将字符串转换为大写。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="日期和时间处理函数" data-numberify>日期和时间处理函数<a class="anchor ms-1" href="#日期和时间处理函数"></a></h2>
<p>日期和时间函数在 SQL 中可移植性最差。</p>
<ul>
<li>
<p>SQL Server 使用 <code>DATEPART(part, date)</code> 返回日期中的一部分，<code>part</code>（不是字符型的参数）指定要返回的成分，<code>date</code> 是要从中国年返回成分的日期。</p>
</li>
<li>
<p>PostgreSQL 使用 <code>DATE_PART(part_str, date)</code> 返回日期中的一部分，<code>part_str</code> 指定要返回的成分，<code>date</code> 是要从中国年返回成分的日期。</p>
</li>
<li>
<p>Oracle 和 PostgreSQL 都支持 <code>EXTRACT(part FROM date)</code> 返回日期中的一部分。<code>part</code>（不是字符型）指定要返回的成分，<code>date</code> 是要从中国年返回成分的日期。</p>
</li>
<li>
<p>Oracle 还支持 <code>to_date(date_str, form_str)</code> 将字符串转化成日期，<code>date_str</code> 是某个带有日期格式的字符串，<code>form_str</code> 指定日期的形式。一般这样使用：<code>WHERE date_column BETWEEN to_date('2020-01-01', 'yyyy-mm-dd') AND todate('2020-12-31', 'yyyy-mm-dd')</code>。</p>
</li>
<li>
<p>DB2、MySQL 和 MariaDB 中有 <code>YEAR(date)</code> 和 <code>MONTH(date)</code> 等函数用于提取年份和月份等信息。</p>
</li>
<li>
<p>在 SQLite 可以使用 <code>strftime('%Y', date)</code> 提取年份，也可以提取月份等。</p>
</li>
</ul>
<hr>
<p>MySQL Date 函数：</p>
<table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>NOW()</code></td>
<td>返回当前的日期和时间。</td>
</tr>
<tr>
<td><code>CURDATE()</code></td>
<td>返回当前的日期。</td>
</tr>
<tr>
<td><code>CURTIME()</code></td>
<td>返回当前的时间。</td>
</tr>
<tr>
<td><code>DATE()</code></td>
<td>提取日期或日期/时间表达式的日期部分。</td>
</tr>
<tr>
<td><code>EXTRACT()</code></td>
<td>返回日期/时间的单独部分。</td>
</tr>
<tr>
<td><code>DATE_ADD()</code></td>
<td>向日期添加指定的时间间隔。</td>
</tr>
<tr>
<td><code>DATE_SUB()</code></td>
<td>从日期减去指定的时间间隔。</td>
</tr>
<tr>
<td><code>DATEDIFF()</code></td>
<td>返回两个日期之间的天数。</td>
</tr>
<tr>
<td><code>DATE_FORMAT()</code></td>
<td>用不同的格式显示日期/时间。</td>
</tr>
</tbody>
</table>
<hr>
<p>SQL Server Date 函数：</p>
<table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>GETDATE()</code></td>
<td>返回当前的日期和时间</td>
</tr>
<tr>
<td><code>DATEPART()</code></td>
<td>返回日期/时间的单独部分</td>
</tr>
<tr>
<td><code>DATEADD()</code></td>
<td>在日期中添加或减去指定的时间间隔</td>
</tr>
<tr>
<td><code>DATEDIFF()</code></td>
<td>返回两个日期之间的时间</td>
</tr>
<tr>
<td><code>CONVERT()</code></td>
<td>用不同的格式显示日期/时间</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="汇总数据" data-numberify>汇总数据<a class="anchor ms-1" href="#汇总数据"></a></h2>
<p>使用<strong>聚集函数</strong>（<strong>aggregate function</strong>）可以对某些行进行计算并返回一个值。</p>
<p>SQL 聚集函数：</p>
<table>
<thead>
<tr>
<th><strong>Functions</strong></th>
<th>Explain</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>AVG(filed)</code></td>
<td>返回某字段的平均数，类型必须是数值类型，<code>AVG()</code> 会忽略值为 <code>NULL</code> 的行。</td>
</tr>
<tr>
<td><code>COUNT(filed)</code></td>
<td>返回某字段的行数</td>
</tr>
<tr>
<td><code>MAX(filed)</code></td>
<td>返回某字段的最大值，允许 <code>filed</code> 是日期值，许多 DBMS 还允许 <code>filed</code> 是字符串，如果 <code>filed</code> 是字符串，那么 <code>MAX()</code> 会返回按该列排序后的最后一行。<code>MAX()</code> 忽略值为 <code>NULL</code> 的行。</td>
</tr>
<tr>
<td><code>MIN(filed)</code></td>
<td>返回某字段的最小值，与 <code>MAX()</code> 类似，如果 <code>filed</code> 是字符串，那么 <code>MAX()</code> 会返回按该列排序后的最前面一行。</td>
</tr>
<tr>
<td><code>SUM(filed)</code></td>
<td>返回某列值之和，类型必须是数值类型，<code>SUM()</code> 会忽略值为 <code>NULL</code> 的行。</td>
</tr>
</tbody>
</table>
<p>Usage for Example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="k">AVG</span><span class="p">(</span><span class="n">filed</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">average</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>SELECT 语句可以根据需要包含多个聚集函数。</p>
<hr>
<h1 id="group-by-数据分组" data-numberify>GROUP BY 数据分组<a class="anchor ms-1" href="#group-by-数据分组"></a></h1>
<p><strong>分组</strong>是使用 SELECT 语句的 <code>GROUP BY</code> 子句，将数据分为多个逻辑组，对每个组进行操作。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 显示 filed1, filed2, ... 并根据它们进行分组
</span></span></span><span class="line"><span class="cl"><span class="c1">-- COUNT(*) 表示计算分组中的所有行
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 该语句是先按照 filed1 进行分组，然后再按照 filed2 进行分组
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 使用分组后输出的结果可能是根据 filed1, filed2, ... 排序好的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...,</span><span class="w"> </span><span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div><p><code>GROUP BY</code> 子句指示 DBMS 分组数据，然后对每个组（不是整个结果集）进行聚集。</p>
<p>使用 <code>GROUP BY</code> 的规定：</p>
<ul>
<li>
<p><code>GROUP BY</code> 子句可以包含任意数目的列。所以可以对分组进行嵌套，更细致地进行数据分组。</p>
</li>
<li>
<p>在建立分组后，操作的最小单位只能是分组，而无法再对个别列进行操作。</p>
</li>
<li>
<p><code>GROUP BY</code> 子句中列出的每一列都必须是检索列或有效表达式列（但不能是聚集函数）。在 SELECT 中使用表达式，则必须在 <code>GROUP BY</code> 子句中指定相同的表达式，而不能使用别名。</p>
</li>
<li>
<p>大多数 SQL 实现不允许 <code>GROUP BY</code> 列带有长度可变的数据类型（如文本或备注型字段）。</p>
</li>
<li>
<p>除聚集计算语句外，SELECT 语句中的每一列都必须在 <code>GROUP BY</code> 子句中给出。</p>
</li>
<li>
<p>分组列中所有包含具有 <code>NULL</code> 值的行，都将 <code>NULL</code> 作为一个分组返回。</p>
</li>
<li>
<p><code>GROUP BY</code> 子句必须出现在 <code>WHERE</code> 子句之后，<code>ORDER BY</code> 子句之前。</p>
</li>
</ul>
<blockquote>
<p>📌并非所有 SQL 实现都支持在使用 <code>GROUP BY</code> 子句时，使用相对位置指定列，并且使用它容易在编辑 SQL 语句时出错。</p>
</blockquote>
<hr>
<h2 id="having-过滤分组" data-numberify>HAVING 过滤分组<a class="anchor ms-1" href="#having-过滤分组"></a></h2>
<p>使用 <code>HAVING</code> 子句来过滤分组。<code>HAVING</code> 支持所有 <code>WHERE</code> 子句支持的操作符，两者的区别是 <code>WHERE</code> 仅对行进行过滤，而 <code>HAVING</code> 可以对分组进行过滤（在没有指定 <code>GROUP BY</code> 时，大多数 DBMS 会同等对待 <code>WHERE</code> 和 <code>HAVING</code>，即 <code>HAVING</code> 也可以对行进行过滤）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed_1, filed_2, ... 是聚集操作
</span></span></span><span class="line"><span class="cl"><span class="c1">-- condition1 是相对于每行的条件，condition1_ 是相对于每个分组的条件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="n">filed_1</span><span class="p">,</span><span class="w"> </span><span class="n">filed_2</span><span class="p">,</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">HAVING</span><span class="w"> </span><span class="n">condition1_</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>在同时使用 <code>WHERE</code> 和 <code>GROUP BY</code> 时，被 <code>WHERE</code> 过滤掉的行并不会包括在分组中。</p>
<hr>
<h2 id="分组和排序" data-numberify>分组和排序<a class="anchor ms-1" href="#分组和排序"></a></h2>
<p><code>ORDER BY</code> 与 <code>GROUP BY</code> 的区别</p>
<table>
<thead>
<tr>
<th><strong>ORDER BY</strong></th>
<th><strong>GROUP BY</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>对产生的输出排序</td>
<td>对行分组，但输出可能不是分组的顺序</td>
</tr>
<tr>
<td>任意列都可以使用（甚至非选择的列也可以使用，即 SELECT 没有给出的列也能使用）</td>
<td>只可能使用选择列或表达式列（SELECT 中给出的列），而且必须使用每个选择列表达式（不能使用别名）</td>
</tr>
<tr>
<td>是可选的，任何情况下都能根据需要选择是否使用</td>
<td>在使用聚集函数的情况下，
还要显示列（或表达式），则必须使用</td>
</tr>
</tbody>
</table>
<p><code>GROUP BY</code> 分组不一定是按照分组顺序输出的，所以应该提供明确的 <code>ORDER BY</code> 子句指定排序方式，以确保在任何情况下输出都能正确地排序。</p>
<hr>
<h1 id="子查询-1" data-numberify>子查询<a class="anchor ms-1" href="#子查询-1"></a></h1>
<p><strong>子查询</strong>（<strong>subquery</strong>）是指嵌套在其他查询中的查询。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 每个子查询中的 SELECT 语句有且仅有一个字段
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 在子查询中企图检索多个列将返回错误
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 理论上可以无限嵌套，但实际使用时由于性能的限制，不能嵌套太多的子查询
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                     </span><span class="k">FROM</span><span class="w"> </span><span class="n">table2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                     </span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition12</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed_2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                          </span><span class="k">FROM</span><span class="w"> </span><span class="n">table3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                          </span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition13</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(...));</span><span class="w">
</span></span></span></code></pre></div><p>在 SELECT 语句中，子查询总是从内向外处理（类似递归的处理方式）。</p>
<hr>
<h2 id="使用计算字段进行子查询" data-numberify>使用计算字段进行子查询<a class="anchor ms-1" href="#使用计算字段进行子查询"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed_1, filed_2, ... 是计算字段，是由其 AS 前的圆括号中的子查询建立的
</span></span></span><span class="line"><span class="cl"><span class="c1">-- table1._filed1 是 table1 中名为 _filed1 的列或列表达式
</span></span></span><span class="line"><span class="cl"><span class="c1">-- table2._filed1 是 table2 中名为 _filed2 的列或列表达式
</span></span></span><span class="line"><span class="cl"><span class="c1">-- table1._filed1 和 table2._filed1 是两个不同表格中同名同类型的列，并不是同一个列
</span></span></span><span class="line"><span class="cl"><span class="c1">-- table1._filed2 和 table3._filed2 的关系与 table1._filed1 和 table2._filed1 类似
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 第 1 条子查询的解释是，对所有 table2 中符合 table1._filed1 = table2._filed1 的行进行计数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">FROM</span><span class="w"> </span><span class="n">table2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">WHERE</span><span class="w"> </span><span class="n">table1</span><span class="p">.</span><span class="n">_filed1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">table2</span><span class="p">.</span><span class="n">_filed1</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">filed_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">FROM</span><span class="w"> </span><span class="n">table3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">WHERE</span><span class="w"> </span><span class="n">table1</span><span class="p">.</span><span class="n">_filed2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">table3</span><span class="p">.</span><span class="n">_filed2</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">filed_2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>计算字段用一个句点分隔表名和列名，句点前是表名，句点后是列名，即 <code>tab_name.column</code>，这种写法也叫完全限定列名。在有可能混淆列名时（如使用子查询时）必须使用这种语法。</p>
<hr>
<h1 id="join-联结表" data-numberify>JOIN 联结表<a class="anchor ms-1" href="#join-联结表"></a></h1>
<p><strong>联结</strong>（<strong>join</strong>）是一种机制，用来在一条 SELECT 语句中关联表，可以联结多个表返回一组输出。</p>
<blockquote>
<p>联结不是物理实体，它在实际的数据库表总并不存在，它仅在数据查询的执行期间存在。
对于联结，需要考虑性能，如果联结过多的表，可能会非常耗费资源，使性能下降。
SQL 本身不限制每个联结约束中表的数目，但实际上许多 DBMS 都有限制。</p>
</blockquote>
<p>联结类型：</p>
<ul>
<li>
<p>内联结（inner join）</p>
</li>
<li>
<p>外联结（outer join）</p>
</li>
<li>
<p>自联结（self-join）</p>
</li>
<li>
<p>自然联结（natural join）</p>
</li>
</ul>
<p>可以在一个 SELECT 语句中使用联结多个表，而且每个表的联结类型可以不相同。</p>
<hr>
<h2 id="inner-join-内联结" data-numberify>INNER JOIN 内联结<a class="anchor ms-1" href="#inner-join-内联结"></a></h2>
<p><strong>内联结</strong>（<strong>inner join</strong>）又称为<strong>等值联结</strong>（<strong>equijoin</strong>），是基于两个表之间的项等测试。</p>
<p>许多子查询都可以使用内联结来替代，但是子查询与联结同样需要耗费一定的资源，所以在一个语句中，不应使用过多的子查询和联结。</p>
<hr>
<ol>
<li>
<p>在 <code>FROM</code> 中指定多个列（等值联结）。</p>
<p>对于联结，需要保证所有联结都有 <code>WHERE</code> 子句，并且要保证 <code>WHERE</code> 子句的正确性。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1, filed2, ... 是存在于 table1, table2, ... 中的任意列或列表达式
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 如果在不同表中出现名称相同的列，就需要使用完全限定名来指定
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 完全限定名：tab_name.column_name
</span></span></span><span class="line"><span class="cl"><span class="c1">-- condition1s 中必须给出联结条件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="p">,</span><span class="w"> </span><span class="n">table2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1s</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>如果上述语句没有在 <code>WHERE</code> 中指出配对方式，那么 <code>table1</code> 中的每一行会与 <code>table2</code> 中的每一行进行配对，然后 <code>table1</code> 和 <code>table2</code> 已经配对完成的行会再次与 <code>table3</code> 中的每一行配对，以此类推，直到所有的表都完成了配对。这种由没有联结条件的表联结后返回的结果为<strong>笛卡尔积</strong>（<strong>cartesian product</strong>）。</p>
</li>
<li>
<p>使用 <code>INNER JOIN</code>（内联结）指定要联结的表，联结条件用特定的 <code>ON</code> 子句给出。</p>
<p>同样地，对于这种方式的联结，需要保证所有联结都有有效的 <code>ON</code> 子句。如果没有 <code>ON</code> 子句，也会出现笛卡尔积。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1, filed2, ... 是存在于 table1, table2, ... 中的任意列或列表达式
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 如果在不同表中出现名称相同的列，就需要使用完全限定名来指定
</span></span></span><span class="line"><span class="cl"><span class="c1">-- condition1 中必须给出联结条件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INNER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">table2</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">condition11</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INNER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">table3</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">condition12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INNER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 如果有其他条件的话 WHERE 子句在 INNER JOIN 之后给出
</span></span></span></code></pre></div></li>
</ol>
<p>ANSI SQL 规范首选 <code>INNER JOIN</code> 语法。</p>
<hr>
<h2 id="自联结" data-numberify>自联结<a class="anchor ms-1" href="#自联结"></a></h2>
<p><strong>自联结</strong>（<strong>self-join</strong>）是指在同一个 SELECT 语句中，多次联结同一个表。</p>
<p>对于自联结来说，由于多次引用同一个表，如果不对表起别名的话，会造成系统混乱（同一个表，表名自然相同，所以系统无法区分究竟指的是哪个表，虽然本质上都是同一个表）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T1</span><span class="p">,</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed_1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">AND</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed_2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">value</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>虽然自联结也可以用子查询替换，但对于大多数 DBMS 来说，处理联结远比处理子查询快。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">filed_1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                 </span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                 </span><span class="k">WHERE</span><span class="w"> </span><span class="n">filed_2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">value</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="自然联结" data-numberify>自然联结<a class="anchor ms-1" href="#自然联结"></a></h2>
<p><strong>自然联结</strong>（<strong>natural join</strong>）指每个含义相同的列仅出现一次的联结。自然联结一般是通过对一个表使用通配符，而对其他表的列使用明确的子集来完成。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T1</span><span class="p">,</span><span class="w"> </span><span class="n">table2</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed_1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">AND</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="outer-join-外联结" data-numberify>OUTER JOIN 外联结<a class="anchor ms-1" href="#outer-join-外联结"></a></h2>
<p><strong>外联结</strong>（<strong>outer join</strong>）是指包含无关联行的联结。通常，内联结都是将一个表格中的行与另一个表格中的行通过联结条件进行关联，此时两个表格中没有被联结条件关联起来的行将会被忽略。而外联结则会包含这些没有被联结条件所关联起来的行，并根据需要给某些列赋予 <code>NULL</code> 值。</p>
<p>外联结有三种类型：</p>
<ul>
<li>
<p><code>LEFT OUTER JOIN</code> —— 左外联结，包含左表的所有行（即 <code>FROM</code> 后面紧跟的表，示例中为 <code>T1</code>），即使在右表（示例中为 <code>T2</code>）中没有被匹配（结果为 <code>NULL</code>）。</p>
<p>基本上所有的 DBMS 都支持。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">T1</span><span class="p">,</span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">T2</span><span class="p">.</span><span class="n">filed_1</span><span class="p">,</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed_2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LEFT</span><span class="w"> </span><span class="k">OUTER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">table2</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ON</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><code>RIGHT OUTER JOIN</code> —— 右外联结，包含左表的所有行（即 <code>JOIN</code> 关键字后紧跟的表，示例中为 <code>T2</code>），即使在右表（示例中为 <code>T1</code>）中没有被匹配（结果为 <code>NULL</code>）。</p>
<p>SQLite 不支持。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">T1</span><span class="p">,</span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">T2</span><span class="p">.</span><span class="n">filed_1</span><span class="p">,</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed_2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RIGHT</span><span class="w"> </span><span class="k">OUTER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">table2</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ON</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><code>FULL OUTER JOIN</code> —— 全外联结，只要左表和右表其中一个表中存在匹配，就返回。</p>
<p>MariaDB、MySQL 和 SQLite 都不支持。</p>
</li>
</ul>
<p>左外联结和右外联结可以相互转换。</p>
<hr>
<h2 id="联结聚合函数与分组" data-numberify>联结、聚合函数与分组<a class="anchor ms-1" href="#联结聚合函数与分组"></a></h2>
<p>联结的一种用法是使用聚合函数从另一个表格中汇总数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1 是联结条件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">T2</span><span class="p">.</span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="k">COUNT</span><span class="p">(</span><span class="n">T2</span><span class="p">.</span><span class="n">filed_1</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">name_filed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INNER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">table2</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">T2</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">condition1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">T1</span><span class="p">.</span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">T1</span><span class="p">,</span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...;</span><span class="w">
</span></span></span></code></pre></div><p>对于上述语句也可以指定外联结，仅需将 <code>INNER JOIN</code> 替换成外联结的关键字。</p>
<p>使用外联结从另一个表中汇总数据，那些没有被关联的行经过 <code>COUNT()</code> 函数计算后的返回值将会为 0。</p>
<hr>
<h1 id="union-组合查询" data-numberify>UNION 组合查询<a class="anchor ms-1" href="#union-组合查询"></a></h1>
<p><strong>组合查询</strong>通常称为<strong>并</strong>（<strong>union</strong>）或<strong>符合查询</strong>（<strong>compound query</strong>）。通过组合查询可以同时执行多条 SELECT 语句，并将结果作为一个查询结果集返回。</p>
<p>需要使用组合查询的情况：</p>
<ul>
<li>
<p>在一个查询中从不同的表返回结构数据；</p>
</li>
<li>
<p>对一个表执行多个查询，按一个查询返回数据。</p>
</li>
</ul>
<blockquote>
<p>📌</p>
<ul>
<li>
<p>组合相同表的查询所完成的工作一般可以用 <code>WHERE</code> 子句替代。</p>
<p>理论上使用 <code>WHERE</code> 子句和组合查询从性能上看并没有太大差别，但各实现之间任有差别。</p>
</li>
<li>
<p>第一条 SELECT 中的列名或指定的别名作为整个组合查询的结果集的列名。因此组合查询所返回的结果集的列名是第一条 SELECT 中的列名，且在组合查询中的 <code>ORDER BY</code> 子句中指出的列名应是第一条 SELECT 中第列名。</p>
</li>
<li>
<p>每一个组合查询最多仅能有一条 <code>ORDER BY</code> 子句，且必须位于整个组合查询语句的最后（即最后一条 SELECT 语句）。</p>
<p>即，无法对某条 SELECT 指定一种排序方式，而对另一条 SELECT 指定另一种排序方式，所有的 SELECT 只能用同一种方式排序。</p>
</li>
</ul>
</blockquote>
<p>使用组合查询的规则：</p>
<ul>
<li>
<p>必须由两条或两条以上的 SELECT 语句组成，语句之间用关键字 <code>UNION</code> 分隔。</p>
</li>
<li>
<p>每个查询必须包含相同的列、表达式或聚集函数（数量必须要相同，类型必须要兼容）。</p>
</li>
</ul>
<hr>
<p>使用 <code>UNION</code> 关键字，会自动去除重复的行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1, filed2, ... 和 filed_1, filed_2, ... 数量必须相同，类型要兼容
</span></span></span><span class="line"><span class="cl"><span class="c1">-- table1 和 table2 可以是同个表格，也可以是不同的表格
</span></span></span><span class="line"><span class="cl"><span class="c1">-- ORDER BY 必须位于语句的最后
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition11</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">UNION</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed_1</span><span class="p">,</span><span class="w"> </span><span class="n">filed_2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">UNION</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">filed</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>在上述语句中，将 <code>UNION</code> 替换成 <code>UNION ALL</code>，返回的结果集将包含重复的行。</p>
<hr>
<h1 id="insert-语句" data-numberify>INSERT 语句<a class="anchor ms-1" href="#insert-语句"></a></h1>
<p>INSERT 语句用来将行插入（或添加）到数据库表。</p>
<hr>
<h2 id="插入完整的行" data-numberify>插入完整的行<a class="anchor ms-1" href="#插入完整的行"></a></h2>
<ol>
<li>
<p>简单但不保险的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="p">(</span><span class="n">value1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">value2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">value3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">...,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><p><code>VALUES</code> 后面的括号中，按照表中列的定义次序，指出了要存储到表中的数据，且必须给每一列提供一个值（在没有指定列名的情况下）。如果某列没有值，则该列应该使用 <code>NULL</code>（在允许对该列指定空值的情况下）。各列必须以它们在表定义中出现的次序填充。</p>
<p>这种语法虽然简单但并不安全，因为这种 SQL 语句高度依赖于表中列的定义次序。如果表结构发生变动，那么这样的语句并不能按照预期的情况执行。</p>
<blockquote>
<p>📌在某些 SQL 实现中，<code>INTO</code> 关键字是可选的。但为了确保可移植，还是要提供 <code>INTO</code> 关键字。</p>
</blockquote>
</li>
<li>
<p>保险但比较繁琐的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1 与 value1 对应，filed2 与 value2 对应，以此类推
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tab_name</span><span class="p">(</span><span class="n">filed1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="n">filed2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="n">filed3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="p">...)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="p">(</span><span class="n">value1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">value2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">value3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><p>这种方法需要在表名后面，使用括号将表中的所有列名指出（不用按照表中列的定义顺序）。在插入行时，VALUES 必须以其指定的次序匹配指定的列名，这样即使表结构改变，该 INSERT 语句仍能正确工作。不要使用没有明确给出列的 INSERT 语句。</p>
</li>
</ol>
<p>主键的值必须有唯一性，DBMS 不允许插入主键值重复的行。如果确实需要插入，应先删除原有的记录。</p>
<hr>
<h2 id="插入行的一部分" data-numberify>插入行的一部分<a class="anchor ms-1" href="#插入行的一部分"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1 与 value1 对应，filed2 与 value2 对应，以此类推
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tab_name</span><span class="p">(</span><span class="n">filed1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="n">filed2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="p">...)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="p">(</span><span class="n">value1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">value2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><p>同样使用表名后面的括号指定列，只不过仅需指出需要插入的部分列，并且只需给这些列提供值。</p>
<p>无论是插入完整的行还是插入行的一部分，都必须确保 <code>VALUES</code> 的数目正确。如果不提供列名，则必须给每个表列提供一个值；如果提供列名，则必须给列出的每一个列一个值。否则，就会产生错误。</p>
<p>在 <code>VALUES</code> 中没有指出的列，DBMS 将赋予它们默认值或空值。这些列必须满足：</p>
<ul>
<li>
<p>列定义为允许 <code>NULL</code> 值。</p>
</li>
<li>
<p>在表定义中给出了默认值。</p>
</li>
</ul>
<hr>
<h2 id="insert-select" data-numberify>INSERT SELECT<a class="anchor ms-1" href="#insert-select"></a></h2>
<p>INSERT 还允许利用 SELECT 语句将检索到的结果插入表中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 将 table2 中满足条件的 filed_1, filed_2, ... 列按照对应顺序插入到 table1 中
</span></span></span><span class="line"><span class="cl"><span class="c1">-- table1 和 table2 可以是同一个表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">table1</span><span class="p">(</span><span class="n">filed1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                   </span><span class="n">filed2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                   </span><span class="p">...)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed_1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">filed_2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1s</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>一般 INSERT 只插入一行。而 INSERT SELECT 可以用一条语句插入多行。</p>
<hr>
<h2 id="select-into" data-numberify>SELECT INTO<a class="anchor ms-1" href="#select-into"></a></h2>
<p><code>SELECT ... INTO</code> 用于从一个表中复制数据，然后把数据插入到另一个新表中（<code>INTO</code> 子句后指定的表，该语句执行后会自动创建）。</p>
<blockquote>
<p>📌MySQL 不支持 <code>SELECT ... INTO</code> 语句。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- INTO 后面的 IN 子句代表插入到其他数据库
</span></span></span><span class="line"><span class="cl"><span class="c1">-- IN 子句可省略，默认代表当前数据库
</span></span></span><span class="line"><span class="cl"><span class="c1">-- new_table 的表结构与 old_table 指定列 filed1, filed2, ... 的结构相同
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INTO</span><span class="w"> </span><span class="n">new_table</span><span class="w"> </span><span class="p">[</span><span class="k">IN</span><span class="w"> </span><span class="n">external_db</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">old_table</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p><code>SELECT INTO</code> 语句可以通过使用促使查询没有数据返回的 <code>WHERE</code> 子句创建一个新的空表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INTO</span><span class="w"> </span><span class="n">new_table</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">old_table</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="更新和删除数据" data-numberify>更新和删除数据<a class="anchor ms-1" href="#更新和删除数据"></a></h1>
<blockquote>
<p>在客户端或服务器的 DBMS 中，使用 UPDATE 和 DELETE 语句可能需要特殊的安全权限。</p>
</blockquote>
<hr>
<h2 id="update-语句" data-numberify>UPDATE 语句<a class="anchor ms-1" href="#update-语句"></a></h2>
<p>UPDATE 语句用于更新（修改）表中的数据。</p>
<p>有两种使用 UPDATE 语句的方式：</p>
<ol>
<li>
<p>更新表中的特定行 —— 使用 <code>WHERE</code> 子句过滤：</p>
<p>基本的 UPDATE子句由三部分组成：</p>
<ul>
<li>
<p>要更新的表 —— 使用 <code>UPDATE</code> 关键字指定；</p>
</li>
<li>
<p>列名和它们的新值 —— 使用 <code>SET</code> 关键字指定更新的内容（即使用 “列=值” 对将新值赋给被更新的列）；</p>
</li>
<li>
<p>确定要更新哪些行的过滤 —— 使用 <code>WHERE</code> 子句指定过滤条件。
在 UPDATE 中，<code>WHERE</code> 可以使用 SELECT 子查询。</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1, filed2, ... 是 tab_name 中的列
</span></span></span><span class="line"><span class="cl"><span class="c1">-- value1, value2, ... 是与 filed1, filed2, ... 相对应类型的数据
</span></span></span><span class="line"><span class="cl"><span class="c1">-- filed1 = value1, filed2 = value2, ... 是 “列=值” 对
</span></span></span><span class="line"><span class="cl"><span class="c1">-- condition1s 是过滤的条件，指定了要更新的行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">UPDATE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SET</span><span class="w"> </span><span class="n">filed1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">value1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">filed2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">value2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1s</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>更新表中的所有行 —— 不使用 <code>WHERE</code> 子句。</p>
<p>一般的 UPDATE 字句都要使用 <code>WHERE</code> 字句指定过滤条件，否则 <code>SET</code> 子句指定的更新内容将应用到所有的列。</p>
</li>
</ol>
<blockquote>
<p>📌有的 SQL 实现支持在 UPDATE 语句中使用 FROM 子句，用一个表的数据更新另一个表的行。</p>
</blockquote>
<p>使用 UPDATE 删除某个列的值：将要删除的列置为 <code>NULL</code>（假设表定义允许 <code>NULL</code>）。如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">UPDATE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SET</span><span class="w"> </span><span class="n">del_filed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">NULL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1s</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="delete-语句" data-numberify>DELETE 语句<a class="anchor ms-1" href="#delete-语句"></a></h2>
<p>使用 DELETE 语句可以从一个表中删除（去掉）数据。</p>
<p>有两种使用 DELETE 语句的方式：</p>
<ul>
<li>从表中删除特定的行 —— 使用 <code>WHERE</code> 子句过滤：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- condition1s 是过滤条件，指定了要删除的行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1s</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>从表中删除所有行 —— 不使用 <code>WHERE</code> 子句：
使用 DELETE 语句时应该指定 <code>WHERE</code> 子句，否则它将会删除表中所有的行。
如果确实想删除表中所有行，应该使用速度更快的 <code>TRUNCATE TABLE</code> 语句。</li>
</ul>
<p>DELETE 语句删除的是表中的行，即它的操作对象是行而不是列，如果想要删除列，则要使用 UPDATE 语句将该列置为 <code>NULL</code>。</p>
<hr>
<h2 id="update-和-delete-的使用准则" data-numberify>UPDATE 和 DELETE 的使用准则<a class="anchor ms-1" href="#update-和-delete-的使用准则"></a></h2>
<ul>
<li>
<p><strong>绝对不要使用不带  子句的 UPDATE 或 DELETE 子句</strong>，除非确实打算更新和删除每一行。</p>
</li>
<li>
<p><strong>应保证每个表都有主键</strong>。</p>
</li>
<li>
<p>在使用 UPDATE 或 DELETE 之前，应先用 SELETE 进行测试，确保 <code>WHERE</code> 子句过滤的是正确的记录。:</p>
</li>
<li>
<p>使用强制实施引用完整性的数据库，这样 DBMS 将不允许删除其数据与其他表相关的行。</p>
</li>
<li>
<p>如果 DBMS 允许数据库管理员施加约束，防止执行不带 <code>WHERE</code> 子句的 UPDATE 或 DELETE 子句，那么应该使用它。</p>
</li>
</ul>
<blockquote>
<p>📌如果 SQL 没有撤销（undo）按钮，应该更小心地使用 UPDATE 和 DELETE 语句。</p>
</blockquote>
<hr>
<h1 id="创建和删除数据库" data-numberify>创建和删除数据库<a class="anchor ms-1" href="#创建和删除数据库"></a></h1>
<p>创建数据库使用 <code>CREATE DATABASE</code> 语句。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="n">db_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>删除数据库使用 <code>DROP DATABASE</code> 语句。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="n">db_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>注意：删除数据库后，数据库中的所有数据（表、视图、索引等数据都将会被删除）。</p>
<hr>
<h1 id="sql-通用数据类型" data-numberify>SQL 通用数据类型<a class="anchor ms-1" href="#sql-通用数据类型"></a></h1>
<p>数据类型定义列中存放的值的种类。数据库表中的每个列都要求有名称和数据类型。SQL 开发人员必须在创建 SQL 表时决定表中的每个列将要存储的数据的类型。</p>
<p>不同的 DBMS 数据类型有些不同。有的 DBMS 允许自定义数据类型，有的不允许。</p>
<p>以下是 SQL 通用数据类型：</p>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>CHARACTER(n)</code> 或 <code>CHAR(n)</code></td>
<td>字符/字符串。固定长度 <code>n</code>。</td>
</tr>
<tr>
<td><code>VARCHAR(n)</code> 或  <code>CHARACTER VARYING(n)</code></td>
<td>字符/字符串。可变长度。最大长度 <code>n</code>。</td>
</tr>
<tr>
<td><code>BINARY(n)</code></td>
<td>二进制串。固定长度 <code>n</code>。</td>
</tr>
<tr>
<td><code>BOOLEAN</code></td>
<td>存储 <code>TRUE</code> 或 <code>FALSE</code> 值</td>
</tr>
<tr>
<td><code>VARBINARY(n) </code> 或 <code>BINARY VARYING(n)</code></td>
<td>二进制串。可变长度。最大长度 <code>n</code>。</td>
</tr>
<tr>
<td><code>INTEGER(p)</code></td>
<td>整数值（没有小数点）。精度 <code>p</code>。</td>
</tr>
<tr>
<td><code>SMALLINT</code></td>
<td>整数值（没有小数点）。精度 5。</td>
</tr>
<tr>
<td><code>INTEGER</code></td>
<td>整数值（没有小数点）。精度 10。</td>
</tr>
<tr>
<td><code>BIGINT</code></td>
<td>整数值（没有小数点）。精度 19。</td>
</tr>
<tr>
<td><code>DECIMAL(p,s)</code></td>
<td>精确数值，精度 <code>p</code>，小数点后位数 <code>s</code>。
例如：<code>DECIAML(5,2)</code> 是一个小数点前有 3 位数，小数点后有 2 位数的数字。</td>
</tr>
<tr>
<td><code>NUMERIC(p,s)</code></td>
<td>精确数值，精度 <code>p</code>，小数点后位数 <code>s</code>。（与  DECIMAL 相同）.</td>
</tr>
<tr>
<td><code>FLOAT(p)</code></td>
<td>近似数值，尾数精度 <code>p</code>。一个采用以 10 为基数的指数计数法的浮点数。该类型的 <code>size</code> 参数由一个指定最小精度的单一数字组成。</td>
</tr>
<tr>
<td><code>REAL</code></td>
<td>近似数值，尾数精度 7。</td>
</tr>
<tr>
<td><code>FLOAT</code></td>
<td>近似数值，尾数精度 16。</td>
</tr>
<tr>
<td><code>DOUBLE PRECISION</code></td>
<td>近似数值，尾数精度 16。</td>
</tr>
<tr>
<td><code>DATE</code></td>
<td>存储年、月、日的值。</td>
</tr>
<tr>
<td><code>TIME</code></td>
<td>存储小时、分、秒的值。</td>
</tr>
<tr>
<td><code>TIMESTAMP</code></td>
<td>存储年、月、日、小时、分、秒的值。</td>
</tr>
<tr>
<td><code>INTERVAL</code></td>
<td>由一些整数字段组成，代表一段时间，取决于区间的类型。</td>
</tr>
<tr>
<td><code>ARRAY</code></td>
<td>元素的固定长度的有序集合。</td>
</tr>
<tr>
<td><code>MULTISET</code></td>
<td>元素的可变长度的无序集合。</td>
</tr>
<tr>
<td><code>XML</code></td>
<td>存储 XML 数据。</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>SQL 数据类型快速参考手册</strong>：</p>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>Access</strong></th>
<th><strong>SQL Server</strong></th>
<th><strong>Oracle</strong></th>
<th><strong>MySQL</strong></th>
<th><strong>PostgreSQL</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>boolean</strong></td>
<td><code>Yes/No</code></td>
<td><code>Bit</code></td>
<td><code>Byte</code></td>
<td>N/A</td>
<td><code>Boolean</code></td>
</tr>
<tr>
<td><strong>integer</strong></td>
<td><code>Number (integer)</code></td>
<td><code>Int</code></td>
<td><code>Number</code></td>
<td><code>Int</code>、 <code>Integer</code></td>
<td><code>Int</code>、 <code>Integer</code></td>
</tr>
<tr>
<td><strong>float</strong></td>
<td><code>Number (single)</code></td>
<td><code>Float Real</code></td>
<td><code>Number</code></td>
<td><code>Float</code></td>
<td><code>Numeric</code></td>
</tr>
<tr>
<td><strong>currency</strong></td>
<td><code>Currency</code></td>
<td><code>Money</code></td>
<td>N/A</td>
<td>N/A</td>
<td><code>Money</code></td>
</tr>
<tr>
<td><strong>string (fixed)</strong></td>
<td>N/A</td>
<td><code>Char</code></td>
<td><code>Char</code></td>
<td><code>Char</code></td>
<td><code>Char</code></td>
</tr>
<tr>
<td><strong>string (variable)</strong></td>
<td>Text (&lt;256) Memo (65k+)</td>
<td><code>Varchar</code></td>
<td><code>Varchar</code>、<code>Varchar2</code></td>
<td><code>Varchar</code></td>
<td><code>Varchar</code></td>
</tr>
<tr>
<td><strong>binary object</strong></td>
<td>OLE Object Memo</td>
<td>Binary (fixed up to 8K) Varbinary (&lt;8K) Image (&lt;2GB)</td>
<td>Long Raw</td>
<td>Blob Text</td>
<td>Binary Varbinary</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="时间数据格式" data-numberify>时间数据格式<a class="anchor ms-1" href="#时间数据格式"></a></h2>
<p>MySQL 使用下列数据类型在数据库中存储日期或日期/时间值：</p>
<ul>
<li>
<p>DATE - 格式：<code>YYYY-MM-DD</code></p>
</li>
<li>
<p>DATETIME - 格式：<code>YYYY-MM-DD HH:MM:SS</code></p>
</li>
<li>
<p>TIMESTAMP - 格式：<code>YYYY-MM-DD HH:MM:SS</code></p>
</li>
<li>
<p>YEAR - 格式：<code>YYYY</code> 或 <code>YY</code></p>
</li>
</ul>
<p>SQL Server 使用下列数据类型在数据库中存储日期或日期/时间值：</p>
<ul>
<li>
<p>DATE - 格式：<code>YYYY-MM-DD</code></p>
</li>
<li>
<p>DATETIME - 格式：<code>YYYY-MM-DD HH:MM:SS</code></p>
</li>
<li>
<p>SMALLDATETIME - 格式：<code>YYYY-MM-DD HH:MM:SS</code></p>
</li>
<li>
<p>TIMESTAMP - 格式：唯一的数字</p>
</li>
</ul>
<hr>
<h1 id="创建和操纵表格" data-numberify>创建和操纵表格<a class="anchor ms-1" href="#创建和操纵表格"></a></h1>
<h2 id="create-table-创建表" data-numberify>CREATE TABLE 创建表<a class="anchor ms-1" href="#create-table-创建表"></a></h2>
<p>一般有两种创建表格的方法：</p>
<ol>
<li>
<p>使用 SQL 语句 <code>CTEATE TABLE</code> 创建表格；</p>
</li>
<li>
<p>多数 DBMS 都具有交互式创建和管理数据库表的工具。</p>
<ul>
<li>其本质是交互工具根据用户操作自动生成并执行相应的 SQL 语句。</li>
</ul>
</li>
</ol>
<blockquote>
<p>不同的 SQL 实现中，CREATE TABLE 语句的语法会有所不同（主要区别是在列定义上）。</p>
</blockquote>
<p>使用 <code>CREATE TABLE</code> 创建表，必须给出以下信息：</p>
<ul>
<li>
<p>新表的名字，在关键字 <code>CREATE TABLE</code> 之后给出；</p>
</li>
<li>
<p>表列的名字和定义，在列名后的括号中指出，用逗号分隔；</p>
</li>
<li>
<p>有的 DBMS 还要求指定表的位置。</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column_name1</span><span class="w">    </span><span class="n">DataType1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column_name2</span><span class="w">    </span><span class="n">DataType2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column_name3</span><span class="w">    </span><span class="n">DataType3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">cluumn_name4</span><span class="w">    </span><span class="n">DataType4</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>创建新表时只能指定不存在的表名，SQL 无法通过 <code>CREATE</code> 语句覆盖已有的表。</p>
<h2 id="alter-table-更新表定义" data-numberify>ALTER TABLE 更新表定义<a class="anchor ms-1" href="#alter-table-更新表定义"></a></h2>
<p>使用 ALTER TABLE 时需要考虑的事情：</p>
<ul>
<li>
<p>理想情况下，不要在表中包含数据时对表结构进行更新（特别是不要删除已有的列）。
应该在表的设计过程中充分考虑未来可能的需求，避免今后对表的结构做大改动。</p>
</li>
<li>
<p>所有的 DBMS 都允许给现有的表增加列，不过对所增加列的数据类型（以及 NULL 和 DEFAULT 的使用）有所限制。</p>
</li>
<li>
<p>许多 DBMS 不允许删除或更改表中的列。</p>
</li>
<li>
<p>多数 DBMS 允许重新命名表中的列。</p>
</li>
<li>
<p>许多 DBMS 限制对已经填有数据的列进行更改，对未填有数据的列几乎没有限制。</p>
</li>
</ul>
<p>使用 ALTER TABLE 必须给出的信息：</p>
<ul>
<li>
<p>在 ALTER TABLE 之后给出表名；</p>
</li>
<li>
<p>列出要更改表的操作。</p>
</li>
</ul>
<hr>
<ol>
<li>
<p>增加表列：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="n">filed</span><span class="w"> </span><span class="n">DataType</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>删除列：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">COLUMN</span><span class="w"> </span><span class="n">filed</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>修改列定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">COLUMN</span><span class="w"> </span><span class="k">column_name</span><span class="w"> </span><span class="n">NewDataType</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>在MySQL中使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MODIFY</span><span class="w"> </span><span class="k">column_name</span><span class="w"> </span><span class="n">NewDataType</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
</ol>
<hr>
<p>复杂的表结构更改一般需要执行以下步骤：</p>
<ol>
<li>
<p>用新的列布局创建一个新表；</p>
</li>
<li>
<p>使用 INSERT SELECT 语句从旧表复制数据到新表；</p>
</li>
<li>
<p>检验包含所需数据的新表；</p>
</li>
<li>
<p>重命名旧表（在确定无误的情况下可删除）；</p>
</li>
<li>
<p>用旧表原来的名字重命名新表；</p>
</li>
<li>
<p>根据需要，重新创建触发器、存储过程、索引和外键。</p>
</li>
</ol>
<hr>
<p>使用 ALTER TABLE 的注意事项：</p>
<ul>
<li>
<p>SQLite 对使用 ALTER TABLE 的最重要的限制是：不支持使用 ALTER TABLE 定义主键和外键，必须在最初创建表时指定。</p>
</li>
<li>
<p>在使用 ALTER TABLE 之前应先做好完整的备份（表结构和数据的备份）。</p>
</li>
<li>
<p>表结构的更改不能撤销。</p>
<ul>
<li>
<p>如果增加了不需要的列，也许无法删除它们。</p>
</li>
<li>
<p>如果删除了不应该删除的列，可能会丢失该列中的所有数据。</p>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="drop-table-删除表" data-numberify>DROP TABLE 删除表<a class="anchor ms-1" href="#drop-table-删除表"></a></h2>
<p><code>DROP TABLE</code> 语句用于删除表本身（包括表数据）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>📌删除表时，没有确认步骤，且不能撤销。</p>
</blockquote>
<blockquote>
<p>📌<strong>使用关系规则防止意外删除</strong>：</p>
<p>许多 DBMS 允许强制实施有关规则，防止删除与其他表相关联的表。在实施这些规则时，如果对某个表发布一条 <code>DORP TABLE</code> 语句，且该表是某个关系的组成部分，则 DBMS 将阻止这条语句执行，直到该关系被删除为止。</p>
</blockquote>
<hr>
<h2 id="truncate-table-删除表数据" data-numberify>TRUNCATE TABLE 删除表数据<a class="anchor ms-1" href="#truncate-table-删除表数据"></a></h2>
<p><code>TRUNCATE TABLE</code> 语句用于删除表内的数据（但并不包括表本身）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">TRUNCATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="重命名表" data-numberify>重命名表<a class="anchor ms-1" href="#重命名表"></a></h2>
<p>对于重命名表，每个 DBMS 的支持都有所不同：</p>
<ul>
<li>
<p>DB2、MariaDB、MySQL、Oracle 和 PostgreSQL 使用 <code>RENAME</code> 语句。</p>
</li>
<li>
<p>SQL Server 使用 <code>sp_rename</code> 存储过程。</p>
</li>
<li>
<p>SQLite 使用 <code>ALTER TABLE</code> 语句。</p>
</li>
</ul>
<hr>
<h1 id="sql-约束" data-numberify>SQL 约束<a class="anchor ms-1" href="#sql-约束"></a></h1>
<p>SQL <strong>约束</strong>（Constraints）用于规定表中如何插入或处理数据的规则。如果存在违反约束的数据行为，行为会被约束终止。</p>
<p>约束可以在创建表时规定（通过 <code>CREATE TABLE</code> 语句），或者在表创建之后规定（通过 <code>ALTER TABLE</code> 语句）。</p>
<p>SQL 有如下几种约束：</p>
<table>
<thead>
<tr>
<th><strong>关键字</strong></th>
<th><strong>解释</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>NULL</code></td>
<td>允许存储 NULL 值。
如果不指定 NOT NULL 或 PRIMARY KEY，则默认为 NULL。
在插入行时允许不给出该列的值。此时，会给该项指定为值 NULL。
对于 DB2，在定义允许 NULL 的列中不能指定 NULL。</td>
</tr>
<tr>
<td><code>NOT NULL</code></td>
<td>指示某列不能存储 NULL 值。
如果不向字段添加值，就无法插入新记录或者更新记录。</td>
</tr>
<tr>
<td><code>UNIQUE </code></td>
<td>唯一约束。保证某列的每行必须有唯一的值。
唯一约束可包含 NULL 值，可重复使用，但是不能用来定义外键。</td>
</tr>
<tr>
<td><code>PRIMARY KEY</code></td>
<td>主键约束。NOT NULL 和 UNIQUE 的结合。
确保某列（或多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</td>
</tr>
<tr>
<td><code>FOREIGN KEY</code></td>
<td>外键约束。保证一个表中的数据匹配另一个表中的值的参照完整性。</td>
</tr>
<tr>
<td><code>CHECK</code></td>
<td>保证列中的值符合指定的条件。</td>
</tr>
<tr>
<td><code>DEFAULT</code></td>
<td>规定没有给列赋值时的默认值。
在插入行时如果不给出值，则用默认值赋值。</td>
</tr>
</tbody>
</table>
<p>Example：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">主键约束</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w">  </span><span class="n">Type1</span><span class="w">  </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">默认为允许</span><span class="w"> </span><span class="k">NULL</span><span class="err">，可以不用指出</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w">  </span><span class="n">Type2</span><span class="w">  </span><span class="p">[</span><span class="k">NULL</span><span class="p">],</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">不允许</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="err">的列，必须用</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="err">指出</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column3</span><span class="w">  </span><span class="n">Type3</span><span class="w">  </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">用</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="err">指定默认值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="n">default_val</span><span class="w"> </span><span class="err">是</span><span class="w"> </span><span class="n">Type4</span><span class="w"> </span><span class="err">类型的值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column4</span><span class="w">  </span><span class="n">Type4</span><span class="w">  </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w">  </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">default_val</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="not-null-非空约束" data-numberify>NOT NULL 非空约束<a class="anchor ms-1" href="#not-null-非空约束"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>添加 NOT NULL 约束：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MODIFY</span><span class="w"> </span><span class="k">column_name</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="unique-唯一约束" data-numberify>UNIQUE 唯一约束<a class="anchor ms-1" href="#unique-唯一约束"></a></h2>
<p>每个表可以有多个 UNIQUE 约束。</p>
<p>创建表时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">方法一：直接在列定义中用</span><span class="w"> </span><span class="k">UNIQUE</span><span class="w"> </span><span class="err">关键字指出</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w"> </span><span class="n">Type2</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">UNIQUE</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">方法二：定义列后使用</span><span class="w"> </span><span class="k">UNIQUE</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">UNIQUE</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w"> </span><span class="n">Type2</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">可以不用定义</span><span class="w"> </span><span class="n">u_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="p">[</span><span class="n">u_name</span><span class="p">]</span><span class="w"> </span><span class="k">UNIQUE</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="p">...)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>更新表定义时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">UNIQUE</span><span class="w"> </span><span class="p">(</span><span class="k">column_name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="err">可以省略</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">u_name</span><span class="w"> </span><span class="k">UNIQUE</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>撤销 UNIQUE 约束：</p>
<p>MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">u_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>SQL Server / Oracle / MS Access：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">u_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="primary-key-主键约束" data-numberify>PRIMARY KEY 主键约束<a class="anchor ms-1" href="#primary-key-主键约束"></a></h2>
<p>只要满足以下条件，就可以被用作主键：</p>
<ul>
<li>
<p>任意两行的主键值都不相同（主键必须包含唯一值）。</p>
</li>
<li>
<p>每行都具有一个主键值（主键列不能包含 NULL 值）。</p>
</li>
<li>
<p>包含主键值的列从不修改或更新。</p>
</li>
<li>
<p>主键值不能重用。如果从表中删除某一行，其主键值不分配给新行。</p>
</li>
</ul>
<hr>
<p>创建表时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 在列定义中直接指出主键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 通过 PRIMARY KEY () 定义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">可以不用定义</span><span class="w"> </span><span class="n">pk_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="p">[</span><span class="n">pk_name</span><span class="p">]</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="p">...)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>更新表定义时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="k">column_name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="err">可以省略</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">pk_name</span><span class="w"> </span><span class="k">UNIQUE</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>撤销 PRIMARY KEY 约束：</p>
<p>MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>SQL Server / Oracle / MS Access：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">pk_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="foreign-key-外键约束" data-numberify>FOREIGN KEY 外键约束<a class="anchor ms-1" href="#foreign-key-外键约束"></a></h2>
<p>创建表时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">方法一：使用</span><span class="w"> </span><span class="k">REFERENCES</span><span class="w"> </span><span class="err">关键字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">table1</span><span class="p">(</span><span class="n">column_1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w"> </span><span class="n">Type2</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w"> </span><span class="n">Type2</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">方法二：使用</span><span class="w"> </span><span class="k">FOREIGN</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">FOREIGN</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">column2</span><span class="p">)</span><span class="w"> </span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">table2</span><span class="p">(</span><span class="n">column_2</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">命名</span><span class="w"> </span><span class="k">FOREIGN</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="err">约束</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="p">[</span><span class="n">fk_name</span><span class="p">]</span><span class="w"> </span><span class="k">FOREIGN</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">column3</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">table3</span><span class="p">(</span><span class="n">column_3</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>更新表定义时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">FOREIGN</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">table1</span><span class="p">(</span><span class="n">column_1</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 命名 FOREIGN KEY 约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">fk_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FOREIGN</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">table1</span><span class="p">(</span><span class="n">column_1</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>撤销 FOREIGN KEY 约束：</p>
<p>MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">FOREIGN</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">fk_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>SQL Server / Oracle / MS Access：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">fk_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="check-检查约束" data-numberify>CHECK 检查约束<a class="anchor ms-1" href="#check-检查约束"></a></h2>
<p>CHECK 约束常见用途：</p>
<ul>
<li>
<p>检查最小或最大值。</p>
</li>
<li>
<p>指定范围。</p>
</li>
<li>
<p>只允许特定值。</p>
</li>
</ul>
<hr>
<p>创建表时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">限制</span><span class="w"> </span><span class="n">column1</span><span class="w"> </span><span class="err">的值大于</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w"> </span><span class="n">Type2</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">限制</span><span class="w"> </span><span class="n">column2</span><span class="w"> </span><span class="err">只能取</span><span class="w"> </span><span class="s1">&#39;Y&#39;</span><span class="w"> </span><span class="err">或</span><span class="w"> </span><span class="s1">&#39;N&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">column2</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;[YN]&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 命名 CHECK 约束，并定义多个列的 CHECK 约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">Type1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w"> </span><span class="n">Type2</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">chk_name</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">column2</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;[YN]&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>修改表定义时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 命名 CHECK 约束，并定义多个列的 CHECK 约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">chk_name</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">column2</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;[YN]&#39;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>撤销 CHECK 约束：</p>
<p>MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="n">chk_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>SQL Server / Oracle / MS Access：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">chk_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="default-默认约束" data-numberify>DEFAULT 默认约束<a class="anchor ms-1" href="#default-默认约束"></a></h2>
<p>创建表时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="n">default_val</span><span class="w"> </span><span class="err">是</span><span class="w"> </span><span class="n">Type4</span><span class="w"> </span><span class="err">类型的值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w">  </span><span class="n">Type1</span><span class="w">  </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w">  </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">default_val</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 可以使用类似 GETDATE() 的函数插入系统值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">默认值为当前的日期</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">birthday</span><span class="w">  </span><span class="nb">DATE</span><span class="w">  </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w">  </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">GETDATE</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>更新表结构时：</p>
<p>MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="n">column1</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">default_val</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>SQL Server / MS Access：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ADD</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">default_val</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">column1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Oracle：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MODIFY</span><span class="w"> </span><span class="n">column1</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">default_val</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>撤销 DEFAULT 约束：</p>
<p>MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="n">column1</span><span class="w"> </span><span class="k">DROP</span><span class="w"> </span><span class="k">DEFAULT</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>SQL Server / Oracle / MS Access：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">COLUMN</span><span class="w"> </span><span class="n">column1</span><span class="w"> </span><span class="k">DROP</span><span class="w"> </span><span class="k">DEFAULT</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="auto-increment-字段" data-numberify>AUTO INCREMENT 字段<a class="anchor ms-1" href="#auto-increment-字段"></a></h1>
<p>在定义表时，在列中添加 auto-increment 字段可以在新纪录插入表时对该列生成一个唯一的数字。</p>
<p>定义为 auto-increment 字段的列必须是整数类型。</p>
<p>定义为 auto-increment 的列常常被定义为 <code>PRIMARY KEY</code>。</p>
<hr>
<p>MySQL 使用 <code>AUTO_INCREMENT</code> 关键字来执行 auto-increment 任务：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">定义</span><span class="w"> </span><span class="n">column1</span><span class="w"> </span><span class="err">为</span><span class="w"> </span><span class="n">AUTO</span><span class="w"> </span><span class="k">INCREMENT</span><span class="w"> </span><span class="err">主键字段</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="n">TYPE1</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column2</span><span class="w"> </span><span class="n">TYPE2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column3</span><span class="w"> </span><span class="n">TYPE3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>定义了 AUTO_INCREMENT 字段后，可以不用对该列指定值，或者对该列指定为 NULL 值（会自动添加一个唯一的值）。</p>
<p>MySQL 的 AUTO_INCREMENT 只能在 key 上被定义。PRIMARY KEY 和 UNIQUE 都是有效的定义。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- val2 和 val3 是分别与 column2 和 column3 同类型的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 不对 auto-increment 列指定值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="n">column3</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">val2</span><span class="p">,</span><span class="w"> </span><span class="n">val3</span><span class="w"> </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 指定为 NULL 值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="n">column3</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">val2</span><span class="p">,</span><span class="w"> </span><span class="n">val3</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>AUTO_INCREMENT 默认的开始值是 <code>1</code>，每新增一条记录都会递增 <code>1</code>。</p>
<p>让 AUTO_INCREMENT 序列以其他的值起始：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- number 是任意数字
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="nb">number</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>MySQL 设定起始值只能在建表后使用 <code>ALTER TABLE</code> 语句。也可以在建表后直接使用 <code>ALTER TABLE</code> 语句定义 AUTO_INCREMENT 以及它的起始值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_test</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="nb">number</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- number 是任意数字
</span></span></span></code></pre></div><hr>
<p>MS SQL Server 使用 <code>IDENTITY()</code> 来执行 auto-increment 任务：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- IDENTITY(initial, incremental) 中，
</span></span></span><span class="line"><span class="cl"><span class="c1">-- initial 是初始值，incremental 是递增值
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 即，以 initial 作为初始值，每新增一条记录递增 incremental
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">column1</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">IDENTITY</span><span class="p">(</span><span class="n">initial</span><span class="p">,</span><span class="w"> </span><span class="n">incremental</span><span class="p">)</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><p>插入数据的方法同 MySQL。</p>
<hr>
<p>Oracle 通过创建 <code>sequence</code> 对象（该对象生成数字序列）创建 auto-increment 字段：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">SEQUENCE</span><span class="w"> </span><span class="n">sp_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MINVALUE</span><span class="w"> </span><span class="mi">1</span><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">最小值为</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">START</span><span class="w"> </span><span class="k">WITH</span><span class="w"> </span><span class="mi">1</span><span class="w">  </span><span class="o">#</span><span class="w"> </span><span class="err">起始值为</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INCREMENT</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="mi">1</span><span class="w">  </span><span class="o">#</span><span class="w"> </span><span class="err">每次递增</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CACHE</span><span class="w"> </span><span class="mi">10</span><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="err">缓存</span><span class="w"> </span><span class="mi">10</span><span class="w"> </span><span class="err">个值以提高性能</span><span class="w">
</span></span></span></code></pre></div><p>插入新记录时，必须使用 <code>sequence</code> 对象的 <code>nextval</code> 函数（该函数从 <code>sp_name</code> 序列中取回下一个值）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 假设 tab_name 已被创建，
</span></span></span><span class="line"><span class="cl"><span class="c1">-- 且要对 column1 使用 nextval() 函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="n">column3</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">sp_name</span><span class="p">.</span><span class="n">nextval</span><span class="p">,</span><span class="w"> </span><span class="n">val2</span><span class="p">,</span><span class="w"> </span><span class="n">val3</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="视图" data-numberify>视图<a class="anchor ms-1" href="#视图"></a></h1>
<p>视图是虚拟的表。视图并不包含数据，它只包含使用时动态检索数据的查询。视图的 SELECT 用法与表的用法基本相同。</p>
<p>使用视图的原因：</p>
<ul>
<li>
<p>重用 SQL 语句。</p>
</li>
<li>
<p>简化复杂的 SQL 操作（无需知道视图的基本查询细节）。</p>
</li>
<li>
<p>使用表的一部分而不是整个表。</p>
</li>
<li>
<p>保护数据。
可以授予用户访问表的特定部分的权限，而不是整个表的访问权限。</p>
</li>
<li>
<p>更改数据格式和表示。
视图可返回与底层表的表示和格式不同的数据。</p>
</li>
</ul>
<hr>
<p>视图的使用规则：</p>
<ul>
<li>
<p>视图名必须为一且不能与其他视图或表重名。</p>
</li>
<li>
<p>对于可创建的视图数目没有限制。</p>
</li>
<li>
<p>创建视图，必须具有足够的访问权限（通常由数据库管理人员授予）。</p>
</li>
<li>
<p>视图可以嵌套，但允许的嵌套层数在不同的 DBMS 中有所不同。
嵌套视图、使用多个联结和过滤创建复杂的视图都会使性能下降。在产品环境中使用之前，应该对其进行全面测试。</p>
</li>
<li>
<p>许多 DBMS 禁止在视图查询中使用 <code>ORDER BY</code> 子句。</p>
</li>
<li>
<p>有些 DBMS 要求对返回的所有列进行命名，如果列是计算字段，则需要使用别名。</p>
</li>
<li>
<p>视图不能索引，也不能有关联的触发器或默认值。</p>
</li>
<li>
<p>有些 DBMS 把视图作为只读的查询（不能将数据写回底层表，如 SQLite）。</p>
</li>
<li>
<p>有些 DBMS 禁止对视图中的行进行插入或更新后，该行不再属于该视图的操作。
默认情况下，如果删除视图中的某行的某列后，可能会导致该行不属于该视图。但是某些 DBMS 会防止这种情况发生。</p>
</li>
</ul>
<hr>
<h2 id="create-view-创建视图" data-numberify>CREATE VIEW 创建视图<a class="anchor ms-1" href="#create-view-创建视图"></a></h2>
<p>使用 <code>CREATE VIEW</code> 语句创建视图，通常包含两部分：</p>
<ul>
<li>
<p>视图名；</p>
</li>
<li>
<p><code>SELECT</code> 查询语句。</p>
</li>
</ul>
<p>视图的用途：</p>
<ol>
<li>
<p>利用视图简化复杂的联结：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">VIEW</span><span class="w"> </span><span class="n">view_name</span><span class="w"> </span><span class="k">AS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">table1</span><span class="p">,</span><span class="w"> </span><span class="n">table2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">condition1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>用视图重新格式话检索出的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- filed1, filed2, ... 指需要重命名的字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">VIEW</span><span class="w"> </span><span class="n">view_name</span><span class="w"> </span><span class="k">AS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">filed1</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">alias1</span><span class="p">,</span><span class="w"> </span><span class="n">filed2</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">alias2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>用视图过滤不想要的数据。</p>
</li>
</ol>
<p>一般创建的视图都不会绑定特定的数据，这会提高视图的可重用性。</p>
<p>从视图检索数据时如果使用了一条 <code>WHERE</code> 子句，则两组子句（一组在视图中，另一组是传递给视图的）将自动组合。</p>
<hr>
<h2 id="drop-view-删除视图" data-numberify>DROP VIEW 删除视图<a class="anchor ms-1" href="#drop-view-删除视图"></a></h2>
<p>通过 <code>DROP VIEW</code> 删除视图（仅删除视图的定义，视图中并包含真实的数据）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">VIEW</span><span class="w"> </span><span class="n">view_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="索引" data-numberify>索引<a class="anchor ms-1" href="#索引"></a></h1>
<p>索引通过排序数据以加快搜索和排序操作的速度。</p>
<ul>
<li>
<p>索引改善检索操作的性能，但降低了数据插入、修改和删除的性能。</p>
</li>
<li>
<p>索引数据可能要占用大量的存储空间。</p>
</li>
<li>
<p>用户无法看到索引。</p>
</li>
<li>
<p>并非所有数据都适合做索引。</p>
</li>
<li>
<p>索引用于数据过滤和数据排序。如果经常以某种特定的顺序排序数据，则该数据可能适合做索引。</p>
</li>
<li>
<p>可以在索引中定义多个列。这样的索引仅在以这个列组合排序时有用。</p>
</li>
</ul>
<hr>
<h2 id="create-index-创建索引" data-numberify>CREATE INDEX 创建索引<a class="anchor ms-1" href="#create-index-创建索引"></a></h2>
<p>索引使用 <code>CREATE INDEX</code> 语句创建（不同的 DBMS 创建索引的语句变化很大）。</p>
<p>创建一个允许使用重复值的索引：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">index_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ON</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><p>创建唯一索引（不允许两个行拥有相同的索引值）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">index_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ON</span><span class="w"> </span><span class="n">tab_name</span><span class="w"> </span><span class="p">(</span><span class="n">column1</span><span class="p">,</span><span class="w"> </span><span class="n">column2</span><span class="p">,</span><span class="w"> </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><p>索引必须唯一命名。</p>
<hr>
<h2 id="drop-index-删除索引" data-numberify>DROP INDEX 删除索引<a class="anchor ms-1" href="#drop-index-删除索引"></a></h2>
<p>MySQL:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">tab_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">index_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>MS Access：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">index_name</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">tab_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>MS SQL Server：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">tab_name</span><span class="p">.</span><span class="n">index_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>DB2 / Oracle：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">index_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

