<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Go on Linner&#39;s Blog</title>
    <link>/tags/go/</link>
    <description>Recent content in Go on Linner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020-2024 Linner. All Rights Reserved.
</copyright>
    <lastBuildDate>Sun, 30 Jun 2024 07:12:14 +0000</lastBuildDate><atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gin 中间件</title>
      <link>/docs/golang/gin/middlewares/</link>
      <pubDate>Sun, 30 Jun 2024 07:12:14 +0000</pubDate>
      
      <guid>/docs/golang/gin/middlewares/</guid>
      <description><![CDATA[Gin 中间件的配置方式有许多种，大致为： 在 Handle()、Any()、Match()、GET() 等基本路由方法中配置 HandlerFunc。 在]]></description>
      <content:encoded><![CDATA[<p>Gin 中间件的配置方式有许多种，大致为：</p>
<ol>
<li>在 <code>Handle()</code>、<code>Any()</code>、<code>Match()</code>、<code>GET()</code> 等基本路由方法中配置 <code>HandlerFunc</code>。</li>
<li>在 <code>RouterGroup</code> 的 <code>Group()</code> 方法中配置 <code>HandlerFunc</code>。</li>
<li>使用 <code>Use()</code> 方法配置 <code>HandlerFunc</code>。</li>
</ol>
<hr>
<h1 id="特定请求的中间件" data-numberify>特定请求的中间件<a class="anchor ms-1" href="#特定请求的中间件"></a></h1>
<p>为特定请求配置中间件，可以直接在请求路由的 <code>HandlerFunc</code> 参数中配置。例如：</p>
<ul>
<li>
<p><code>controllers/user</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">userController</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">UserController</span> <span class="nx">userController</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">userController</span><span class="p">)</span> <span class="nf">GetUser</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">id</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">Param</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 获取 Context 内部字典的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">token</span><span class="p">,</span> <span class="nx">exists</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">middlewares</span><span class="p">.</span><span class="nx">TOKEN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">!</span><span class="nx">exists</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;error&#34;</span><span class="p">:</span> <span class="s">&#34;Unauthorized...&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">PureJSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;id&#34;</span><span class="p">:</span> <span class="nx">id</span><span class="p">,</span> <span class="s">&#34;username&#34;</span><span class="p">:</span> <span class="s">&#34;zhangsan&#34;</span><span class="p">,</span> <span class="s">&#34;token&#34;</span><span class="p">:</span> <span class="nx">token</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>middlewares/user</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">userMiddlewares</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">UserMiddlewares</span> <span class="nx">userMiddlewares</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">Authorization</span> <span class="p">=</span> <span class="s">&#34;Authorization&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">userMiddlewares</span><span class="p">)</span> <span class="nf">VerifyToken</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">auth</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSpace</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">GetHeader</span><span class="p">(</span><span class="nx">Authorization</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">auth</span> <span class="o">==</span> <span class="s">&#34;Bearer 123456&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 Context.Set() 设置键值对
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 这个键值对只能在当前处理链中按顺序流转
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 换句话说，这个键值对只是存储在当前 Context 中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">ctx</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">TOKEN</span><span class="p">,</span> <span class="s">&#34;123456&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ctx</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;error&#34;</span><span class="p">:</span> <span class="s">&#34;Unauthorized...&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ctx</span><span class="p">.</span><span class="nf">Abort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><blockquote>
<p>中间件也可专门为其定义一个 <code>middlewares</code> 包来存放项目中所有的中间件。</p>
<p>处理链：即一组按顺序执行的中间件和处理函数。</p>
</blockquote>
</li>
<li>
<p><code>routers/user.go</code>：</p>
<p>将中间函数和处理函数绑定到路由上：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">UserRoutersInit</span><span class="p">(</span><span class="nx">engin</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Engine</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">engin</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="s">&#34;/user&#34;</span><span class="p">,</span> <span class="nx">middlewares</span><span class="p">.</span><span class="nx">UserMiddleware</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/:id&#34;</span><span class="p">,</span> <span class="nx">middlewares</span><span class="p">.</span><span class="nx">UserMiddlewares</span><span class="p">.</span><span class="nx">VerifyToken</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">controllers</span><span class="p">.</span><span class="nx">UserController</span><span class="p">.</span><span class="nx">GetUser</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="全局中间件" data-numberify>全局中间件<a class="anchor ms-1" href="#全局中间件"></a></h1>
<p>全局中间件就是绑定在根路由上的、全局生效的中间件，可以使用 <code>RouterGroup.Use()</code> 方法绑定全局中间件。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Router</span><span class="p">()</span> <span class="p">(</span><span class="nx">engine</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Engine</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">engine</span> <span class="p">=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置全局中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">engine</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">middlewares</span><span class="p">.</span><span class="nx">GlobalMiddlewares</span><span class="p">.</span><span class="nx">VerifyToken</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>如果需要绑定的中间件过多，除了多次调用 <code>User()</code> 方法绑定或在 <code>User()</code> 方法中传入多个中间件外，还能使用 <code>gin.HandlersChain</code> 类型。<code>gin.HandlersChain</code> 的定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">HandlersChain</span> <span class="p">[]</span><span class="nx">HandlerFunc</span>
</span></span></code></pre></div><p>使用 <code>gin.HandlersChain</code> 来聚集多个中间件，然后将它们一次性传入 <code>User()</code> 中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">globalMiddlewares</span> <span class="p">=</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">HandlersChain</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">middlewares</span><span class="p">.</span><span class="nx">GlobalMiddlewares</span><span class="p">.</span><span class="nx">VerifyToken</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">middlewares</span><span class="p">.</span><span class="nx">GlobalMiddlewares</span><span class="p">.</span><span class="nx">VerifyAuthorization</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> 	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Router</span><span class="p">()</span> <span class="p">(</span><span class="nx">engine</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Engine</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">engine</span> <span class="p">=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置全局中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">engine</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">globalMiddlewares</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>通过使用 <code>gin.HandlersChain</code> 聚集并注册全局中间件后，中间函数的执行顺序将按照 <code>gin.HandlersChain</code> 中的顺序执行。</p>
<hr>
<h1 id="分组中间件" data-numberify>分组中间件<a class="anchor ms-1" href="#分组中间件"></a></h1>
<p>分组中间件同样可以使用 <code>RouterGroup.Use()</code> 方法，不同的是调用方法的对象是具体的路由分组对象，也就是 <code>Engin.Group()</code> 调用之后返回的对象。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">engin</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="s">&#34;/user&#34;</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Use</span><span class="p">(</span><span class="nx">middlewares</span><span class="p">.</span><span class="nx">UserMiddlewares</span><span class="p">.</span><span class="nx">VerifyToken</span><span class="p">)</span>
</span></span></code></pre></div><p>除了使用 <code>RouterGroup.Use()</code> 方法，分组中间件还可以在 <code>Engin.Group()</code> 调用的时候注册。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">engin</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="s">&#34;/user&#34;</span><span class="err">，</span> <span class="nx">middlewares</span><span class="p">.</span><span class="nx">UserMiddlewares</span><span class="p">.</span><span class="nx">VerifyToken</span><span class="p">)</span>
</span></span></code></pre></div><p>同样地，也可以使用 <code>gin.HandlersChain</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">groupMiddlewares</span> <span class="p">=</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">HandlersChain</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">middlewares</span><span class="p">.</span><span class="nx">UserMiddlewares</span><span class="p">.</span><span class="nx">VerifyToken</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> 	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">engin</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="s">&#34;/user&#34;</span><span class="err">，</span> <span class="o">...</span><span class="nx">groupMiddlewares</span><span class="p">)</span>
</span></span></code></pre></div><blockquote>
<p>注：<code>User()</code> 方法注册的中间件，和使用其它路由方法（如 <code>Handle()</code>、<code>Any()</code>、<code>GET()</code>、<code>Match()</code> 等等）注册的中间件、处理函数它们之间的调用顺序也是按照注册的顺序执行。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">engin</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="s">&#34;/user&#34;</span><span class="p">,</span> <span class="nx">middlewares</span><span class="p">.</span><span class="nx">UserMiddlewares</span><span class="p">.</span><span class="nx">VerifyToken</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/info/:username&#34;</span><span class="p">,</span> <span class="nx">controllers</span><span class="p">.</span><span class="nx">UserController</span><span class="p">.</span><span class="nx">GetInfo</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">	<span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/list&#34;</span><span class="p">,</span> <span class="nx">controllers</span><span class="p">.</span><span class="nx">UserController</span><span class="p">.</span><span class="nx">GetList</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 在此之前的路由，在执行时不会调用 middlewares.UserMiddlewares.VerifyAuthorization
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 只会调用 middlewares.UserMiddlewares.VerifyToken
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Use</span><span class="p">(</span><span class="nx">middlewares</span><span class="p">.</span><span class="nx">UserMiddlewares</span><span class="p">.</span><span class="nx">VerifyAuthorization</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 在此之前的路由，在执行时会按顺序调用 middlewares.UserMiddlewares.VerifyToken
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 和 middlewares.UserMiddlewares.VerifyAuthorization
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/:id&#34;</span><span class="p">,</span> <span class="nx">controllers</span><span class="p">.</span><span class="nx">UserController</span><span class="p">.</span><span class="nx">GetUser</span><span class="p">)</span>
</span></span></code></pre></div></blockquote>
<hr>
<h1 id="中间件-context" data-numberify>中间件 Context<a class="anchor ms-1" href="#中间件-context"></a></h1>
<p>在中间件中，<code>Context</code> 有一些方法可用于中间件的编写：</p>
<ul>
<li>
<p><code>Context.Next()</code>：将控制权传递给下一个中间件或处理函数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">MyMiddleware</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 执行某些预处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 执行某些后处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><pre tabindex="0"><code></code></pre></li>
<li>
<p><code>Context.Abort()</code>：立即停止执行后续的中间件和处理函数，可以用来处理错误或特殊请求。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ErrorMiddleware</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;error&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#34;true&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">Abort</span><span class="p">()</span>	<span class="c1">// 停止执行后续的中间件和处理函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><pre tabindex="0"><code></code></pre></li>
<li>
<p><code>Context.Set()</code> 和 <code>Context.Get()</code>：在当前请求处理链中存储和检索数据，允许在处理链中不同的中间件和处理函数之间共享信息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">StoreDataMiddleware</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 存储数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;user_id&#34;</span><span class="p">,</span> <span class="mi">123</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">RetrieveDataMiddleware</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">userId</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;user_id&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 使用 userId ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><pre tabindex="0"><code>
`Context.Set()` 和 `Context.Get()` 存储和获取的数据，是存储在当前 `Context` 对象的内部字典（`store` 字段）中。在 Gin 中，对于一条处理链中所有的中间件和处理函数共享同一个 `Context` 对象。
</code></pre></li>
</ul>
<blockquote>
<p><code>Contex</code> 中除了上述的 4 个方法外，还有其它可以用于控制中间件或处理函数执行流的方法。例如以 <code>Abort</code> 开头的 <code>Abort</code> 系方法，它们在终止执行链执行的同时，还提供了其它一些额外的操作。比如说 <code>Context.AbortWithStatus()</code>，在中止执行链的同时设置响应状态码。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Gin 路由</title>
      <link>/docs/golang/gin/routers/</link>
      <pubDate>Sun, 30 Jun 2024 05:42:11 +0000</pubDate>
      
      <guid>/docs/golang/gin/routers/</guid>
      <description><![CDATA[Gin 中许多类型都可以认为它是一个路由（IRoutes）类型，这包括了 RouterGroup、Engine等。并且 IRoutes 接口中定义的方法都会有一个 IRoutes]]></description>
      <content:encoded><![CDATA[<p>Gin 中许多类型都可以认为它是一个路由（<code>IRoutes</code>）类型，这包括了 <code>RouterGroup</code>、<code>Engine</code>等。并且 <code>IRoutes</code> 接口中定义的方法都会有一个 <code>IRoutes</code> 类型的返回值，使得 Gin Routers 可以支持链式调用，让代码更加简洁。</p>
<hr>
<h1 id="路由分组" data-numberify>路由分组<a class="anchor ms-1" href="#路由分组"></a></h1>
<p><code>RouterGroup</code> 是一种路由组对象（<code>Engine</code> 继承自 <code>RouterGroup</code>，所以也可以认为是一个路由组）。通过 <code>Group()</code> 方法可以创建一个新的 <code>RouterGroup</code>。<code>Group()</code> 方法的定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">Group</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="o">*</span><span class="nx">RouterGroup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">RouterGroup</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Handlers</span><span class="p">:</span> <span class="nx">group</span><span class="p">.</span><span class="nf">combineHandlers</span><span class="p">(</span><span class="nx">handlers</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">basePath</span><span class="p">:</span> <span class="nx">group</span><span class="p">.</span><span class="nf">calculateAbsolutePath</span><span class="p">(</span><span class="nx">relativePath</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">engine</span><span class="p">:</span>   <span class="nx">group</span><span class="p">.</span><span class="nx">engine</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ul>
<li><code>relativePath</code>：路由组的相对路径。与 <a href="../request#handle-%e5%92%8c-match"><code>handle()</code> 方法</a> 相同，<code>relativePath</code> 同样需要使用 <code>group.calculateAbsolutePath()</code> 来计算出绝对路径。</li>
<li><code>handlers</code>：路由组的处理方法，一般是将其作为中间处理函数（中间件）来定义。</li>
</ul>
<p><code>RouterGroup</code> 类型的定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">RouterGroup</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Handlers</span> <span class="nx">HandlersChain</span>
</span></span><span class="line"><span class="cl">	<span class="nx">basePath</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">engine</span>   <span class="o">*</span><span class="nx">Engine</span>
</span></span><span class="line"><span class="cl">	<span class="nx">root</span>     <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>其中：</p>
<ul>
<li>使用 <code>root</code> 和 <code>engine</code> 字段来标记当前路由组是否为根路由，以及根路由的地址（<code>Engine</code> 可以认为是当前 Gin 程序中所有路由组的根路由组）；</li>
<li><code>Handlers</code> 记录了当前路由组中所需要的一系列路由处理函数（其中也包括了它上层路由的处理函数）；</li>
<li><code>basePath</code> 指明了当前路由组的绝对路径。</li>
</ul>
<p>路由组的使用方式如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 创建路由组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">user</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="s">&#34;/user&#34;</span><span class="p">,</span> <span class="nx">middlewares</span><span class="p">.</span><span class="nx">UserMiddleware</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">user</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">context</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">context</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;User get\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">user</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">context</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">context</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;User post\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">user</span><span class="p">.</span><span class="nf">PUT</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">context</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">context</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;User put\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">user</span><span class="p">.</span><span class="nf">DELETE</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">context</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">context</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;User delete\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>对于任何一个 <code>RouterGroup</code> 来说，可以继续使用 <code>Group()</code> 方法创建路由，即使该 <code>RouterGroup</code> 也是由其它 <code>RouterGroup</code> 创建的。</p>
<hr>
<h1 id="routers-包" data-numberify>Routers 包<a class="anchor ms-1" href="#routers-包"></a></h1>
<p>一般在项目中，会专门创建一个 <code>routers</code> 包来存放项目中路由配置的相关代码。</p>
<p>将一系列相关的路由抽取为理由组后，可以专门为其在 <code>routers</code> 包下创建一个文件来存放这一系列路由的配置。例如可以将 <code>user</code> 路由中的内容配置在 <code>user.go</code> 中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">UserRoutersInit</span><span class="p">(</span><span class="nx">engin</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Engine</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">user</span> <span class="o">:=</span> <span class="nx">engin</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="s">&#34;/user&#34;</span><span class="p">,</span> <span class="nx">middlewares</span><span class="p">.</span><span class="nx">UserMiddleware</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">user</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">context</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">context</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;User get\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">user</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">context</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">context</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;User post\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">user</span><span class="p">.</span><span class="nf">PUT</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">context</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">context</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;User put\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">user</span><span class="p">.</span><span class="nf">DELETE</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">context</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">context</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;User delete\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 相对路径传入空串，表示请求路径与路由组的路径相同
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 需要注意，不能使用 &#34;/&#34; 来表示 “当前请求路径与路由组的路径相同” 这一含义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>在 <code>routers</code> 包中可以创建一个 <code>routers.go</code> 来配置根路由、设置全局中间件以及初始化其它路由：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Router</span><span class="p">()</span> <span class="p">(</span><span class="nx">engine</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Engine</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 创建根路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">engine</span> <span class="p">=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 初始化其它子路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">UserRoutersInit</span><span class="p">(</span><span class="nx">engine</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>根路由的创建除了使用 <code>gin.Default()</code> 外，还可以使用 <code>gin.New()</code>。<code>gin.Default()</code> 默认使用了 <code>gin.Logger()</code> 和 <code>gin.Recovery()</code>。使用 <code>gin.New()</code> 来创建路由，需要自己手动配置 <code>Logger</code> 和 <code>Recovery</code> 中间件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">engine</span> <span class="p">=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">New</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">engine</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">gin</span><span class="p">.</span><span class="nf">Logger</span><span class="p">(),</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Recovery</span><span class="p">())</span>
</span></span></code></pre></div><blockquote>
<ul>
<li><code>gin.Logger()</code>：日志。</li>
<li><code>gin.Recovery()</code>：错误管理，它会 <code>recover()</code> 任何 <code>panic()</code>，并且返回给客户端 <code>500</code> 响应码。</li>
</ul>
</blockquote>
<hr>
<h1 id="controllers-包" data-numberify>Controllers 包<a class="anchor ms-1" href="#controllers-包"></a></h1>
<p>除了路由，路由处理器也可以定义在专门的 <code>controllers</code> 包中。例如，<code>user</code> 路由，首先在 <code>controllers</code> 包中创建 <code>user.go</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// userController 类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">userController</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// UserController 示例
</span></span></span><span class="line"><span class="cl"><span class="c1">// 通过内部类型，以及定义外部实例，模拟一个简单的单例模式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">UserController</span> <span class="nx">userController</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">userController</span><span class="p">)</span> <span class="nf">GetUser</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">context</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;User get\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">userController</span><span class="p">)</span> <span class="nf">AddUser</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">context</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;User post\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">userController</span><span class="p">)</span> <span class="nf">UpdateUser</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">context</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;User put\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">userController</span><span class="p">)</span> <span class="nf">DeleteUser</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">context</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;User delete\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>接着，修改 <code>routers/user.go</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">user</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">controllers</span><span class="p">.</span><span class="nx">UserController</span><span class="p">.</span><span class="nx">GetUser</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">user</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">controllers</span><span class="p">.</span><span class="nx">UserController</span><span class="p">.</span><span class="nx">AddUser</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">user</span><span class="p">.</span><span class="nf">PUT</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">controllers</span><span class="p">.</span><span class="nx">UserController</span><span class="p">.</span><span class="nx">UpdateUser</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">user</span><span class="p">.</span><span class="nf">DELETE</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">controllers</span><span class="p">.</span><span class="nx">UserController</span><span class="p">.</span><span class="nx">DeleteUser</span><span class="p">)</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Gin 获取请求</title>
      <link>/docs/golang/gin/request/</link>
      <pubDate>Sat, 29 Jun 2024 17:03:06 +0000</pubDate>
      
      <guid>/docs/golang/gin/request/</guid>
      <description><![CDATA[Gin 请求在 Gin 介绍 中做了简单的介绍。 Gin 请求与 RouterGroup 和 IRoutes 息息相关。IRoutes是一个接口类型，它定义了一系列用于配置路由处理的方法： type IRoutes interface { // 用于配]]></description>
      <content:encoded><![CDATA[<p>Gin 请求在 <a href="../introduction#gin-%e8%af%b7%e6%b1%82">Gin 介绍</a> 中做了简单的介绍。</p>
<p>Gin 请求与 <code>RouterGroup</code> 和 <code>IRoutes</code> 息息相关。<code>IRoutes</code>是一个接口类型，它定义了一系列用于配置路由处理的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">IRoutes</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 用于配置路由中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Use</span><span class="p">(</span><span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 路由处理方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Handle</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Any</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GET</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">POST</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">DELETE</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">PATCH</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">PUT</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">OPTIONS</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">HEAD</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Match</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 静态文件处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">StaticFile</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">StaticFileFS</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">FileSystem</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Static</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">	<span class="nf">StaticFS</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">FileSystem</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>而 <code>RouterGroup</code> 是 <code>IRoutes</code> 的一个实现。</p>
<blockquote>
<p>在 Gin 中，路由类型的继承关系为 <code>IRoutes</code> $\leftarrow$ <code>RouterGroup</code> $\leftarrow$ <code>Engine</code>。</p>
</blockquote>
<hr>
<h1 id="基本请求路由方法" data-numberify>基本请求路由方法<a class="anchor ms-1" href="#基本请求路由方法"></a></h1>
<p><code>net/http</code> 中支持的请求方式，Gin 均支持：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">MethodGet</span>     <span class="p">=</span> <span class="s">&#34;GET&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">MethodHead</span>    <span class="p">=</span> <span class="s">&#34;HEAD&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">MethodPost</span>    <span class="p">=</span> <span class="s">&#34;POST&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">MethodPut</span>     <span class="p">=</span> <span class="s">&#34;PUT&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">MethodPatch</span>   <span class="p">=</span> <span class="s">&#34;PATCH&#34;</span> <span class="c1">// RFC 5789
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">MethodDelete</span>  <span class="p">=</span> <span class="s">&#34;DELETE&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">MethodConnect</span> <span class="p">=</span> <span class="s">&#34;CONNECT&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">MethodOptions</span> <span class="p">=</span> <span class="s">&#34;OPTIONS&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">MethodTrace</span>   <span class="p">=</span> <span class="s">&#34;TRACE&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>其中，Gin 给 <code>GET</code>、<code>HEAD</code>、<code>POST</code>、<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>、<code>OPTIONS</code> 提供了对应快捷的路由方法，它们的定义大致如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">POST</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodPost</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">GET</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodGet</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">DELETE</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodDelete</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">PATCH</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodPatch</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">PUT</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodPut</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">OPTIONS</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodOptions</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">HEAD</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodHead</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>除此之外，Gin 还提供了一个可以接收所有请求方式的路由方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 可以接收如下请求方式：
</span></span></span><span class="line"><span class="cl"><span class="c1">// GET, POST, PUT, PATCH, HEAD, OPTIONS, DELETE, CONNECT, TRACE.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">Any</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">method</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">anyMethods</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">returnObj</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>上方 <code>Any()</code>、<code>GET()</code> 等一系列方法的使用方式均相同：</p>
<ul>
<li>
<p><code>relativePath</code>：表示路由接收的请求相对路径。例如 <code>/hello</code>。</p>
</li>
<li>
<p><code>handlers</code>：是一系列请求处理函数 <code>HandlerFunc</code>。可以指定多个 <code>HandlerFunc</code>，它们将按照指定的顺序执行。中间件（middleware）、过滤器（filter）、拦截器（interceptor）等，都可以基于此进行实现。</p>
<p><code>HandlerFunc</code> 的定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">HandlerFunc</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">Context</span><span class="p">)</span>
</span></span></code></pre></div></li>
<li>
<p><code>IRoutes</code>：定义了一系列路由请求方法。</p>
</li>
</ul>
<hr>
<h1 id="handle-和-match" data-numberify>Handle 和 Match<a class="anchor ms-1" href="#handle-和-match"></a></h1>
<p>通过观察上方一系列请求路由方法，可以发现它们都调用了 <code>group.handle()</code> 方法。<code>group.handle()</code> 方法的定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">handle</span><span class="p">(</span><span class="nx">httpMethod</span><span class="p">,</span> <span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="nx">HandlersChain</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">absolutePath</span> <span class="o">:=</span> <span class="nx">group</span><span class="p">.</span><span class="nf">calculateAbsolutePath</span><span class="p">(</span><span class="nx">relativePath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handlers</span> <span class="p">=</span> <span class="nx">group</span><span class="p">.</span><span class="nf">combineHandlers</span><span class="p">(</span><span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">group</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nf">addRoute</span><span class="p">(</span><span class="nx">httpMethod</span><span class="p">,</span> <span class="nx">absolutePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">returnObj</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ul>
<li><code>httpMethod</code>：它的参数一般使用的是 <code>net/http</code> 包下的 <code>MethodXxx</code> 常量。</li>
<li><code>relativePath</code>：请求的相对路径。通过 <code>group.calculateAbsolutePath()</code> 计算出<u>绝对路径</u>，其内部是使用 <code>path</code> 包下的 <code>Join()</code> 实现的。</li>
<li><code>handlers</code>：路由处理方法。<code>HandlersChain</code> 的定义是 <code>type HandlersChain []HandlerFunc</code>。</li>
</ul>
<p>最终是通过 <code>group.engine.addRoute()</code>，也就是 <code>gin.Engine</code> 的 <code>addRoute()</code> 方法，传入请求方式、绝对路径以及请求处理函数来创建一个新的路由。</p>
<h2 id="handle" data-numberify>Handle<a class="anchor ms-1" href="#handle"></a></h2>
<p>Gin 对外提供了一个接口 <code>Handle()</code> 让用户能够直接使用更加基础的 <code>handle()</code> 方法。其定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">Handle</span><span class="p">(</span><span class="nx">httpMethod</span><span class="p">,</span> <span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">matched</span> <span class="o">:=</span> <span class="nx">regEnLetter</span><span class="p">.</span><span class="nf">MatchString</span><span class="p">(</span><span class="nx">httpMethod</span><span class="p">);</span> <span class="p">!</span><span class="nx">matched</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="s">&#34;http method &#34;</span> <span class="o">+</span> <span class="nx">httpMethod</span> <span class="o">+</span> <span class="s">&#34; is not valid&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">httpMethod</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>使用 <code>Handle()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodGet</span><span class="p">,</span> <span class="s">&#34;/hello&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Hello World!&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>等价于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/hello&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Hello World!&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><blockquote>
<p>上述两种获取 GET 请求的方式并没有任何明显的区别。不过 <code>Handle()</code> 可以支持其它更多的请求方式，例如要接收 Gin 没有提供简便路由方法的 <code>TRACE</code> 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodTrace</span><span class="p">,</span> <span class="s">&#34;/trace&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Success!&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></blockquote>
<h2 id="match" data-numberify>Match<a class="anchor ms-1" href="#match"></a></h2>
<p>对于 <code>Handle()</code>、<code>All()</code>、<code>GET()</code> 这些路由方法来说，它们每次调用都只能配置一种请求方式，而 Gin 提供了 <code>Match()</code> 来支持同时配置多种请求方式的路由。<code>Match()</code> 的定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">Match</span><span class="p">(</span><span class="nx">methods</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">method</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">methods</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">returnObj</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>可以发现 <code>methods</code> 参数是一个 <code>[]string</code> 类型的。<code>Match()</code> 通过遍历 <code>methods</code>，然后为其中每一个元素 <code>method</code> 调用 <code>group.handle()</code> 方法。</p>
<p><code>Match()</code> 的示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">Match</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">http</span><span class="p">.</span><span class="nx">MethodPut</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">MethodPost</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span> <span class="s">&#34;/hello&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Hello World!&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><hr>
<h1 id="获取请求数据" data-numberify>获取请求数据<a class="anchor ms-1" href="#获取请求数据"></a></h1>
<p>请求数据的获取需要使用到 <code>gin.Context</code>。</p>
<h2 id="query-参数" data-numberify>Query 参数<a class="anchor ms-1" href="#query-参数"></a></h2>
<p>Query 参数一般和 GET 请求一同使用，获取指定的 Query 参数，可以使用 <code>Query()</code> 或 <code>DefaultQuery()</code> 方法。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/user/info&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 通过 Query() 方法获取指定的 Query 参数值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">idStr</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 类型转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">id</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseInt</span><span class="p">(</span><span class="nx">idStr</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">username</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;username&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取并指定默认值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sexStr</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">DefaultQuery</span><span class="p">(</span><span class="s">&#34;sex&#34;</span><span class="p">,</span> <span class="s">&#34;0&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 类型转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sex</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseInt</span><span class="p">(</span><span class="nx">sexStr</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 响应数据对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">user</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;id&#34;</span><span class="p">:</span>       <span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;username&#34;</span><span class="p">:</span> <span class="nx">username</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;sex&#34;</span><span class="p">:</span>      <span class="nx">sex</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 响应
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X GET <span class="s1">&#39;http://127.0.0.1:8080/user/info?id=123456&amp;username=zhangsan&amp;sex=1&#39;</span>
</span></span></code></pre></div><ul>
<li><code>Query()</code>：获取 Query 参数但不指定默认值。当请求时没有传递指定的参数，或指定参数为空时，其返回值将是一个空串。</li>
<li><code>DefaultQuery()</code>：获取 Query 参数且为其指定默认值。当请求时没有传递指定的参数，其返回值将是指定的默认值；如果指定的参数是空串，那么获取到的返回值也是一个空串。</li>
</ul>
<p><code>Query()</code> 和 <code>DefaultQuery()</code> 内部是通过 <code>GetQuery()</code> 实现的，所以也可以直接使用 <code>GetQuery()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">id</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 通过 GetQuery() 获取 id 参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">GetQuery</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 如果获取成功，就将其转为 int64
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">result</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseInt</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">id</span> <span class="p">=</span> <span class="nx">result</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="绑定-query" data-numberify>绑定 Query<a class="anchor ms-1" href="#绑定-query"></a></h3>
<p>对于一些结构固定的 Query 请求对象，可以直接定义一个结构体并绑定其实例，而无需使用 <code>Query()</code>、<code>DefaultQuery()</code> 或 <code>GetQuery()</code> 手动获取表单中的每一个字段。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 字段使用指针类型，以便获取 null 值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">UserQuery</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Username</span> <span class="o">*</span><span class="kt">string</span> <span class="s">`form:&#34;username&#34; json:&#34;username&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Sex</span>      <span class="o">*</span><span class="kt">uint8</span>  <span class="s">`form:&#34;sex&#34; json:&#34;sex&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/user&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">query</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">UserQuery</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">BindQuery</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 或者，使用以下方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//err := ctx.ShouldBindQuery(&amp;query)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//err := ctx.ShouldBindWith(&amp;query, binding.Query)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><blockquote>
<p>在 Gin 中，绑定 Query 实例时，同样需要在结构体字段中使用 Tags 指定字段的 Query 参数名称，否则它将按照原有的首字母大写形式获取对应值。在指定结构体字段 Query 参数别名时，使用的是 <code>form</code> 这一 Tag。</p>
</blockquote>
<h2 id="form-参数" data-numberify>Form 参数<a class="anchor ms-1" href="#form-参数"></a></h2>
<p>通过 <code>PostForm()</code> 或 <code>DefaultPostForm()</code> 可以获取任何类型的 Form 表单数据，包括 <code>multipart/form-data</code> 和 <code>application/x-www-form-urlencoded</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/user/info&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 通过 PostForm() 方法获取指定的 Form 参数值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">idStr</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">PostForm</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">id</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseInt</span><span class="p">(</span><span class="nx">idStr</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">username</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">PostForm</span><span class="p">(</span><span class="s">&#34;username&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sexStr</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">DefaultPostForm</span><span class="p">(</span><span class="s">&#34;sex&#34;</span><span class="p">,</span> <span class="s">&#34;0&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sex</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseInt</span><span class="p">(</span><span class="nx">sexStr</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 响应数据对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">user</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;id&#34;</span><span class="p">:</span>       <span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;username&#34;</span><span class="p">:</span> <span class="nx">username</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;sex&#34;</span><span class="p">:</span>      <span class="nx">sex</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><code>PostForm()</code> 和 <code>DefaultPostForm()</code> 与 <code>Query()</code> 和 <code>DefaultQuery()</code> 的用法类似。<code>PostForm()</code> 和 <code>DefaultPostForm()</code> 内部同样都有一个相同的实现，它就是 <code>GetPostForm()</code>。<code>GetPostForm()</code> 的用法与 <code>GetQuery()</code> 的用法相似。</p>
<blockquote>
<p>虽然 <code>PostForm()</code>、<code>DefaultPostForm()</code> 和 <code>GetPostForm()</code> 名称中显式指定了是获取在 POST 请求中提交的表单，但在 Gin 中，<code>PostForm()</code> 同样可以用于其它请求方法接收 Form 数据。</p>
</blockquote>
<h3 id="绑定表单" data-numberify>绑定表单<a class="anchor ms-1" href="#绑定表单"></a></h3>
<p>对于一些结构固定的表单请求对象，同样可以直接定义一个结构体并绑定其实例，无需手动获取表单中的每一个字段。方法与绑定 Query 实例相似：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">UserForm</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Username</span> <span class="o">*</span><span class="kt">string</span> <span class="s">`form:&#34;username&#34; json:&#34;username&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Nickname</span> <span class="o">*</span><span class="kt">string</span> <span class="s">`form:&#34;nickname&#34; json:&#34;nickname&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Sex</span>      <span class="o">*</span><span class="kt">uint8</span>  <span class="s">`form:&#34;sex&#34; json:&#34;sex&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/user&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">form</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">UserForm</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">ShouldBind</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">form</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 或者使用 ShouldBindWith() 显示声明绑定 Form
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//err := ctx.ShouldBindWith(&amp;form, binding.Form)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">form</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><h2 id="获取-json-数据" data-numberify>获取 JSON 数据<a class="anchor ms-1" href="#获取-json-数据"></a></h2>
<p>要获取 JSON 数据，需要绑定实例。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">UserDto</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Username</span> <span class="o">*</span><span class="kt">string</span> <span class="s">`form:&#34;username&#34; json:&#34;username&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Nickname</span> <span class="o">*</span><span class="kt">string</span> <span class="s">`form:&#34;nickname&#34; json:&#34;nickname&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Sex</span>      <span class="o">*</span><span class="kt">uint8</span>  <span class="s">`form:&#34;sex&#34; json:&#34;sex&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/user&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">form</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">UserDto</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">ShouldBindJSON</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">form</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 或者使用 ShouldBindWith() 显式声明绑定 JSON
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//err := ctx.ShouldBindWith(&amp;form, binding.JSON)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">form</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><h2 id="获取-uri-参数" data-numberify>获取 URI 参数<a class="anchor ms-1" href="#获取-uri-参数"></a></h2>
<p>获取 URI 参数可以使用 <code>Param()</code> 方法。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/hello/:username&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">username</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">Param</span><span class="p">(</span><span class="s">&#34;username&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;Hello, %s!&#34;</span><span class="p">,</span> <span class="nx">username</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><h3 id="绑定-uri" data-numberify>绑定 URI<a class="anchor ms-1" href="#绑定-uri"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ArticleQo</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Username</span>    <span class="o">*</span><span class="kt">string</span> <span class="s">`uri:&#34;username&#34; json:&#34;username&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ArticleName</span> <span class="o">*</span><span class="kt">string</span> <span class="s">`uri:&#34;article-name&#34; json:&#34;article-name&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/article/:username/:article-name&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">query</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">ArticleQo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">ShouldBindUri</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">query</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><h2 id="数据绑定的注意事项" data-numberify>数据绑定的注意事项<a class="anchor ms-1" href="#数据绑定的注意事项"></a></h2>
<h3 id="contextshouldbindwith" data-numberify>Context.ShouldBindWith<a class="anchor ms-1" href="#contextshouldbindwith"></a></h3>
<p><code>Context.Bind()</code> 和 <code>Context.ShouldBind()</code> 可以绑定任意类型的请求数据，包括 Query、Form、JSON 等等。它们都是通用的数据绑定方法，会根据请求的内容类型（Content-Type）自动选择合适的数据绑定器。</p>
<p>比起 <code>Context.Bind()</code>，<code>Context.ShouldBind()</code> 是一种更高级、更灵活的数据绑定方法，它提供了额外的错误处理机制。<code>Context.Bind()</code> 在绑定失败时会直接结束处理流程，而<code>Context.ShouldBind()</code> 在绑定失败时不直接结束请求处理流程，而是返回一个错误，这允许我们在处理函数中根据这个错误做出进一步的响应操作。更确切地说，<code>ShouldBind</code> 系列的数据绑定方法，在遇到绑定错误时，并不会立即中断请求处理流程；而 <code>Bind</code> 系列会立即终止执行后续的处理逻辑。</p>
<p>从 Gin 实现中来说，<code>Bind</code> 系列的绑定方法几乎都是使用 <code>Context.MustBindWith()</code> 实现的，而 <code>Context.MustBindWith()</code> 内部是使用 <code>Context.ShouldBindWith()</code> 实现的。并且 <code>ShouldBind</code>（不包括 <code>ShouldBindBody</code>）系列的绑定方法几乎都是使用 <code>Context.ShouldBindWith()</code> 方法实现。也就是说，<code>Context.ShouldBindWith()</code> 实现了 <code>Context</code> 中大部份的绑定方法。</p>
<h3 id="binding-tag" data-numberify>Binding Tag<a class="anchor ms-1" href="#binding-tag"></a></h3>
<p>在使用数据绑定时，可以使用 <code>binding</code> Tag 来设定字段的约束条件。例如，在字段上设置 <code>binding:&quot;required&quot;</code> 来规定该字段是必须的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ArticleQo</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Username</span>    <span class="o">*</span><span class="kt">string</span> <span class="s">`form:&#34;name&#34; json:&#34;username&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ArticleName</span> <span class="o">*</span><span class="kt">string</span> <span class="s">`form:&#34;article-name&#34; json:&#34;article-name&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ArticleID</span>   <span class="o">*</span><span class="kt">uint64</span> <span class="s">`form:&#34;article-id&#34; json:&#34;article-id&#34; binding:&#34;required&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/article&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">query</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">ArticleQo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">ShouldBind</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>在发送请求时，必须传入 <code>article-id</code> 这个字段，否则将会出现错误。</p>
<h3 id="shouldbind-和-shouldbindbodywith" data-numberify>ShouldBind 和 ShouldBindBodyWith<a class="anchor ms-1" href="#shouldbind-和-shouldbindbodywith"></a></h3>
<ul>
<li>
<p><code>Context.ShouldBind()</code>：包括 <code>Context.ShouldBindWith()</code>、<code>Context.Bind()</code> 等。它们使用的是 <code>ctx.Request.Body</code> 绑定数据，只能进行一次数据绑定，多次调用时将会出现错误。这是因为第一绑定数据后，<code>ctx.Request.Body</code> 中的数据被读取完毕，<code>ctx.Request.Body</code> 中只剩下了 <code>EOF</code>。</p>
</li>
<li>
<p><code>Context.ShouldBindBodyWith()</code>：支持多次绑定。这是因为 <code>Context.ShouldBindBodyWith()</code> 会在绑定之前将 <code>body</code> 存储到上下文中。也就是相当于在 <code>body</code> 的副本上进行读取。但这会对性能造成轻微影响，应该尽量避免多次调用它。</p>
<blockquote>
<p>只有某些格式需要此功能，如 JSON, XML, MsgPack, ProtoBuf。 对于其他格式, 如 Query, Form, FormPost, FormMultipart 可以多次调用 c.ShouldBind() 而不会造成任任何性能损失。</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="文件上传" data-numberify>文件上传<a class="anchor ms-1" href="#文件上传"></a></h1>
<h2 id="单文件上传" data-numberify>单文件上传<a class="anchor ms-1" href="#单文件上传"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">imageFilesPath</span> <span class="p">=</span> <span class="nf">absPath</span><span class="p">(</span><span class="s">&#34;./static/images&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">maxMultipartMemory</span> <span class="kt">int64</span> <span class="p">=</span> <span class="mi">8</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span> <span class="c1">// 8MiB
</span></span></span><span class="line"><span class="cl"><span class="c1">// 允许上传的文件类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">allowExtMap</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">bool</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;.jpg&#34;</span><span class="p">:</span>  <span class="kc">true</span><span class="p">,</span> <span class="s">&#34;.png&#34;</span><span class="p">:</span>  <span class="kc">true</span><span class="p">,</span> <span class="s">&#34;.gif&#34;</span><span class="p">:</span>  <span class="kc">true</span><span class="p">,</span> <span class="s">&#34;.jpeg&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 设置内存限制为 8MiB（全局），默认为 32MiB
</span></span></span><span class="line"><span class="cl"><span class="c1">// 这个内存限制是限制每次处理文件所占用的最大内存，防止因文件过大占用太多内存
</span></span></span><span class="line"><span class="cl"><span class="c1">//r.MaxMultipartMemory = maxMultipartMemory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/upload&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 在请求中限制每次处理内存大小（作用同上）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nf">ParseMultipartForm</span><span class="p">(</span><span class="nx">maxMultipartMemory</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取从客户端上传的文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">image</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">FormFile</span><span class="p">(</span><span class="s">&#34;image&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">filename</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Filename</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 限制文件上传类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 获取文件名后缀
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">extname</span> <span class="o">:=</span> <span class="nx">path</span><span class="p">.</span><span class="nf">Ext</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 判断文件名后缀是否存在且合法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">allowed</span><span class="p">,</span> <span class="nx">isExisted</span> <span class="o">:=</span> <span class="nx">allowExtMap</span><span class="p">[</span><span class="nx">extname</span><span class="p">];</span> <span class="p">!(</span><span class="nx">isExisted</span> <span class="o">&amp;&amp;</span> <span class="nx">allowed</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">msg</span> <span class="o">:=</span> <span class="s">&#34;The file type is not valid&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logrus</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="nx">msg</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 根据日期创建图片保存目录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">today</span> <span class="o">:=</span> <span class="nx">utils2</span><span class="p">.</span><span class="nf">Today</span><span class="p">(</span><span class="s">&#34;20060102&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dir</span> <span class="o">:=</span> <span class="nf">absPath</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">imageFilesPath</span><span class="p">,</span> <span class="nx">today</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建基础目录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">MkdirAll</span><span class="p">(</span><span class="nx">dir</span><span class="p">,</span> <span class="mo">0666</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Server error&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">})</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 生成唯一的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">uniqueFilename</span> <span class="o">:=</span> <span class="nf">generateUniqueFilename</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 拼接文件保存路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">dst</span> <span class="o">:=</span> <span class="nx">path</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">dir</span><span class="p">,</span> <span class="nx">uniqueFilename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 将文件保存到本地
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">SaveUploadedFile</span><span class="p">(</span><span class="nx">image</span><span class="p">,</span> <span class="nx">dst</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">logrus</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Save image %v&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;originFilename&#34;</span><span class="p">:</span> <span class="nx">filename</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;savedFilename&#34;</span><span class="p">:</span>  <span class="nx">uniqueFilename</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;size&#34;</span><span class="p">:</span>           <span class="nx">image</span><span class="p">.</span><span class="nx">Size</span><span class="p">,</span> <span class="c1">// 文件大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="s">&#34;saved_dir&#34;</span><span class="p">:</span>      <span class="nx">dir</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Success!&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>其中 <code>absPath()</code> 和 <code>generateUniqueFilename()</code> 的实现如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">absPath</span><span class="p">(</span><span class="nx">path</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">dir</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">filepath</span><span class="p">.</span><span class="nf">Abs</span><span class="p">(</span><span class="nx">path</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logrus</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">dir</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">generateUniqueFilename</span><span class="p">(</span><span class="nx">originalName</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取时间戳
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">timestamp</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">UnixNano</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 生成随机字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">randomBytes</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">randomBytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">randomStr</span> <span class="o">:=</span> <span class="nx">base64</span><span class="p">.</span><span class="nx">URLEncoding</span><span class="p">.</span><span class="nf">EncodeToString</span><span class="p">(</span><span class="nx">randomBytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取文件扩展名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">extension</span> <span class="o">:=</span> <span class="nx">filepath</span><span class="p">.</span><span class="nf">Ext</span><span class="p">(</span><span class="nx">originalName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取文件名（去除扩展名）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">baseName</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSuffix</span><span class="p">(</span><span class="nx">originalName</span><span class="p">,</span> <span class="nx">extension</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 生成不冲突的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s_%d_%s%s&#34;</span><span class="p">,</span> <span class="nx">baseName</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">randomStr</span><span class="p">[:</span><span class="mi">8</span><span class="p">],</span> <span class="nx">extension</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>从 Form 表单中获取单个文件，需要使用 <code>Context.FormFile()</code> 获取 <code>multipart.FileHeader</code> 实例的地址：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">image</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">FormFile</span><span class="p">(</span><span class="s">&#34;image&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>通过这个实例，可以获取到 <code>Filename</code>、<code>Size</code> 等信息，使用 <code>Context.SaveUploadedFile()</code> 可以将 <code>multipart.FileHeader</code> 中的文件内容保存到本地：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 获取文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">filename</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Filename</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 将文件保存到本地
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">SaveUploadedFile</span><span class="p">(</span><span class="nx">image</span><span class="p">,</span> <span class="nx">dst</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">logrus</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Save image %v&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;originFilename&#34;</span><span class="p">:</span> <span class="nx">filename</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;savedFilename&#34;</span><span class="p">:</span>  <span class="nx">uniqueFilename</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;size&#34;</span><span class="p">:</span>           <span class="nx">image</span><span class="p">.</span><span class="nx">Size</span><span class="p">,</span> <span class="c1">// 文件大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="s">&#34;saved_dir&#34;</span><span class="p">:</span>      <span class="nx">dir</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>然后使用 <code>path</code> 包中的方法对文件名、文件名后缀以及文件路径进行处理。</p>
<h2 id="多文件上传" data-numberify>多文件上传<a class="anchor ms-1" href="#多文件上传"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">imageFilesPath</span> <span class="p">=</span> <span class="nf">absPath</span><span class="p">(</span><span class="s">&#34;./static/images&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/upload&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取表单
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">form</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">MultipartForm</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 读取上传的多个文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">images</span> <span class="o">:=</span> <span class="nx">form</span><span class="p">.</span><span class="nx">File</span><span class="p">[</span><span class="s">&#34;images[]&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">image</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">images</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">filename</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Filename</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 生成唯一的文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">uniqueFilename</span> <span class="o">:=</span> <span class="nf">generateUniqueFilename</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 拼接文件保存路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">dst</span> <span class="o">:=</span> <span class="nx">path</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">imageFilesPath</span><span class="p">,</span> <span class="nx">uniqueFilename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 将文件保存到本地
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">SaveUploadedFile</span><span class="p">(</span><span class="nx">image</span><span class="p">,</span> <span class="nx">dst</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logrus</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Save image %v&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;originFilename&#34;</span><span class="p">:</span> <span class="nx">filename</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;savedFilename&#34;</span><span class="p">:</span>  <span class="nx">uniqueFilename</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;size&#34;</span><span class="p">:</span>           <span class="nx">image</span><span class="p">.</span><span class="nx">Size</span><span class="p">,</span> <span class="c1">// 文件大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Success!&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>读取上传的多个文件，首先需要获取 <code>multipart.Form</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">form</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">MultipartForm</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>然后再通过 <code>multipart.Form</code> 读取上传的多个文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">images</span> <span class="o">:=</span> <span class="nx">form</span><span class="p">.</span><span class="nx">File</span><span class="p">[</span><span class="s">&#34;images[]&#34;</span><span class="p">]</span>
</span></span></code></pre></div><h2 id="文件读取" data-numberify>文件读取<a class="anchor ms-1" href="#文件读取"></a></h2>
<p>通过调用 <code>multipart.FileHeader</code> 的 <code>Open()</code> 方法，可以获取到一个 <code>multipart.File</code>。<code>multipart.File</code> 实现了 <code>io.ReadCloser</code> 接口。通过 <code>multipart.File</code>，可以对上传后的文件进行一些操作。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/handle-image&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取从客户端上传的文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">image</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">FormFile</span><span class="p">(</span><span class="s">&#34;image&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 打开上传的文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nf">Open</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 结束时关闭文件流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">defer</span> <span class="kd">func</span><span class="p">(</span><span class="nx">file</span> <span class="nx">multipart</span><span class="p">.</span><span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">logrus</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}(</span><span class="nx">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建一个缓冲区来读取文件内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">buffer</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">io</span><span class="p">.</span><span class="nf">Copy</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">buffer</span><span class="p">,</span> <span class="nx">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 假设对文件进行了一些操作...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置文件名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctx</span><span class="p">.</span><span class="nf">Header</span><span class="p">(</span><span class="s">&#34;Content-Disposition&#34;</span><span class="p">,</span> <span class="s">&#34;attachment; filename=&#34;</span><span class="o">+</span><span class="nx">image</span><span class="p">.</span><span class="nx">Filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 响应字节数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctx</span><span class="p">.</span><span class="nf">Data</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;application/octet-stream&#34;</span><span class="p">,</span> <span class="nx">buffer</span><span class="p">.</span><span class="nf">Bytes</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>如果操作的文件过于庞大，将整个文件读入内存，可能导致内存不足的问题。对于大文件，推荐使用流式处理，即逐块读取文件内容，而不是一次性读取所有数据。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">POST</span><span class="p">(</span><span class="s">&#34;/handle-image&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取从客户端上传的文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">image</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">FormFile</span><span class="p">(</span><span class="s">&#34;image&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 打开上传的文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nf">Open</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">(</span><span class="nx">file</span> <span class="nx">multipart</span><span class="p">.</span><span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">logrus</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}(</span><span class="nx">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 使用一个缓冲区来逐块读取和响应数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">buffer</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 循环读取数据并写入响应，每次最多读取 1024 byte 数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">size</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span> <span class="c1">// 读取到数据流结尾，结束循环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 将读取的数据写入响应
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">writeErr</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">Writer</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">buffer</span><span class="p">[:</span><span class="nx">size</span><span class="p">]);</span> <span class="nx">writeErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">writeErr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">.</span><span class="nf">Header</span><span class="p">(</span><span class="s">&#34;Content-Disposition&#34;</span><span class="p">,</span> <span class="s">&#34;attachment; filename=&#34;</span><span class="o">+</span><span class="nx">image</span><span class="p">.</span><span class="nx">Filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">.</span><span class="nf">Header</span><span class="p">(</span><span class="s">&#34;Content-Type&#34;</span><span class="p">,</span> <span class="s">&#34;application/octet-stream&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Gin 响应数据</title>
      <link>/docs/golang/gin/response/</link>
      <pubDate>Sat, 29 Jun 2024 07:48:18 +0000</pubDate>
      
      <guid>/docs/golang/gin/response/</guid>
      <description><![CDATA[Gin 支持各种响应数据类型：JSON、XML、HTML、YAML、Text 等等。响应数据需要使用到 gin.Context 类型。gin.Context 类型的作用有： 获]]></description>
      <content:encoded><![CDATA[<p>Gin 支持各种响应数据类型：JSON、XML、HTML、YAML、Text 等等。响应数据需要使用到 <code>gin.Context</code> 类型。<code>gin.Context</code> 类型的作用有：</p>
<ul>
<li>获取请求数据，包括请求头、Query 参数、Form 数据、Path 参数、请求体等。</li>
<li>响应管理，包括设置 HTTP 状态码、编写响应体、设置响应头等。</li>
<li>中间件支持。<code>Context</code> 可以携带当前处理函数的信息传递到下一个处理函数，直到达到最终的处理函数。在中间件中可以使用 <code>Context</code> 读取、修改 <code>Context</code> 的内容或终止请求处理流程。</li>
<li>Cookie 操作。</li>
<li>读写请求和响应体的原始字节流，以此来处理自定义协议或二进制数据传输。</li>
<li>错误处理。可以记录错误并中断请求处理流程。</li>
</ul>
<hr>
<h1 id="响应-text-类型数据" data-numberify>响应 Text 类型数据<a class="anchor ms-1" href="#响应-text-类型数据"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/hello&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 响应 Text 类型数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">ctx</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;Hello World!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>其中 <code>http.StatusOK</code> 是 <code>net/http</code> 包中 <code>200</code> 响应状态码常量。</p>
<hr>
<h1 id="响应-xml-类型数据" data-numberify>响应 XML 类型数据<a class="anchor ms-1" href="#响应-xml-类型数据"></a></h1>
<p>响应和渲染 XML 类型数据可以使用 <code>ctx.XML()</code> 方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/hello&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">XML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Hello World!&#34;</span><span class="p">,</span> <span class="s">&#34;status&#34;</span><span class="p">:</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>响应结果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;map&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;message&gt;</span>
</span></span><span class="line"><span class="cl">        Hello World!
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/message&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;status&gt;</span>
</span></span><span class="line"><span class="cl">        200
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/status&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/map&gt;</span>
</span></span></code></pre></div><p>其中，<code>ctx.XML()</code> 方法的参数 2 是渲染 XML 的数据对象。其类型为 <code>any</code>，定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">any</span> <span class="p">=</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span></code></pre></div><p>使用 <code>any</code> 可以接收任意类型的数据。</p>
<p><code>gin.H</code> 是 <code>map</code> 类型，其定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">H</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">any</span>
</span></span></code></pre></div><hr>
<h1 id="响应-html-类型数据" data-numberify>响应 HTML 类型数据<a class="anchor ms-1" href="#响应-html-类型数据"></a></h1>
<p>方式 1：使用 <code>ctx.Header()</code> 和 <code>ctx.String()</code> 方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/hello&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">Header</span><span class="p">(</span><span class="s">&#34;Content-Type&#34;</span><span class="p">,</span> <span class="s">&#34;text/html; charset=utf-8&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;&lt;h2&gt;Hello World!&lt;/h2&gt;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>方式 2：<code>ctx.HTML()</code> 方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 从 templates 目录中加载所有的 HTML 模板文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">r</span><span class="p">.</span><span class="nf">LoadHTMLGlob</span><span class="p">(</span><span class="s">&#34;templates/*&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/hello&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;index.html&#34;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>在使用 <code>ctx.HTML()</code> 方法之前，必须先加载 HTML 模板文件。加载 HTML 模板文件的方式有：</p>
<ol>
<li>
<p>按文件名称加载：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">LoadHTMLFiles</span><span class="p">(</span><span class="s">&#34;templates/index.html&#34;</span><span class="p">,</span> <span class="s">&#34;templates/welcome.html&#34;</span><span class="p">)</span>
</span></span></code></pre></div></li>
<li>
<p>按路径配对表达式加载：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">LoadHTMLGlob</span><span class="p">(</span><span class="s">&#34;templates/*&#34;</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="html-渲染" data-numberify>HTML 渲染<a class="anchor ms-1" href="#html-渲染"></a></h2>
<p>Gin 支持对 HTML 模板进行渲染。</p>
<p>例如 <code>templates/welcome.html</code>，其内容如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Welcome!<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>{{ .name }}, Welcome!<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>其中 <code>{{ .name }}</code> 表示将 <code>name</code> 属性中的数据渲染于此。</p>
<p>然后编写一个路由：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">LoadHTMLFiles</span><span class="p">(</span><span class="s">&#34;templates/welcome.html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/welcome&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;welcome.html&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;张三&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><code>ctx.HTML()</code> 方法的第 3 个参数就是要渲染到 HTML 模板中的数据对象。</p>
<p>访问 <code>GET /welcome</code>，获取到的内容如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Welcome!<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>张三, Welcome!<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="响应-yaml-类型数据" data-numberify>响应 YAML 类型数据<a class="anchor ms-1" href="#响应-yaml-类型数据"></a></h1>
<p>响应和渲染 YAML 类型数据可以使用 <code>ctx.YAML()</code> 方法。其使用方式与 <code>ctx.XML()</code> 相同：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/hello&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">YAML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Hello World!&#34;</span><span class="p">,</span> <span class="s">&#34;status&#34;</span><span class="p">:</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>其结果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">message</span><span class="p">:</span><span class="w"> </span><span class="l">Hello World!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">status</span><span class="p">:</span><span class="w"> </span><span class="m">200</span><span class="w">
</span></span></span></code></pre></div><hr>
<h1 id="响应-json-类型数据" data-numberify>响应 JSON 类型数据<a class="anchor ms-1" href="#响应-json-类型数据"></a></h1>
<p>响应 JSON 数据有多种方式：</p>
<ol>
<li><code>ctx.JSON()</code></li>
<li><code>ctx.AsciiJSON()</code></li>
<li><code>ctx.PureJSON()</code></li>
<li><code>ctx.SecureJSON()</code></li>
</ol>
<h2 id="ctxjson" data-numberify>ctx.JSON<a class="anchor ms-1" href="#ctxjson"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/hello&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;&lt;h2&gt;你好，世界!&lt;/h2&gt;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;status&#34;</span><span class="p">:</span>  <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>其结果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;\u003ch2\u003e你好，世界!\u003c/h2\u003e&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="mi">200</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>ctx.JSON()</code> 会使用 Unicode 替换特殊 HTML 字符。</p>
<h2 id="ctxasciijson" data-numberify>ctx.AsciiJSON<a class="anchor ms-1" href="#ctxasciijson"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/hello&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">AsciiJSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;&lt;h2&gt;你好，世界!&lt;/h2&gt;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;status&#34;</span><span class="p">:</span>  <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>响应结果为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;\u003ch2\u003e\u4f60\u597d\uff0c\u4e16\u754c!\u003c/h2\u003e&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="mi">200</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>ctx.AsciiJSON()</code> 即为 ASCII-only JSON，它会将非 ASCII 标准字符进行 Unicode 转义。它同样会使用 Unicode 替换特殊 HTML 字符。</p>
<h2 id="ctxpurejson" data-numberify>ctx.PureJSON<a class="anchor ms-1" href="#ctxpurejson"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/hello&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">PureJSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;&lt;h2&gt;你好，世界!&lt;/h2&gt;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;status&#34;</span><span class="p">:</span>  <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;h2&gt;你好，世界!&lt;/h2&gt;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="mi">200</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>ctx.PureJSON()</code> 与上方两个方法不同的是，它不会对 JSON 串进行任何转义，而是直接将它按照原数据输出。</p>
<h2 id="json-劫持" data-numberify>JSON 劫持<a class="anchor ms-1" href="#json-劫持"></a></h2>
<p>JSON 劫持是 XSS 攻击的一种形式，它发生在一个恶意用户能够插入自己的 JavaScript 代码到 JSON 响应中，从而在用户的浏览器上执行非法的脚本。</p>
<p>例如，一个 HTML 页面将请求后的结果插入到页面标签中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://code.jquery.com/jquery-3.6.0.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Hello!<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Hello World!<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://localhost:8080/hello&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">date</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;h2&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">date</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>假设 <code>GET /hello``GET /hello</code>  请求响应的 <code>message</code> 中包含了非法的脚本代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/hello&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">messages</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;Hello!&#34;</span><span class="p">,</span> <span class="s">&#34;Hi!&#34;</span><span class="p">,</span> <span class="s">&#34;Welcome!&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;&lt;script&gt;alert(&#39;You have been hacked!&#39;)&lt;/script&gt;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">messages</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><code>GET /hello</code> 请求响应成功后，<code>alert('You have been hacked!')</code> 这部分代码将会被执行：</p>
<p><picture><img class="img-fluid " alt="演示 JSON 注入" src="/docs/golang/gin/response/1719672731900.png" loading="lazy" width="563" height="162" />
</picture>

</p>
<h2 id="ctxsecurejson" data-numberify>ctx.SecureJSON<a class="anchor ms-1" href="#ctxsecurejson"></a></h2>
<p><code>ctx.SecureJSON()</code> 能防止 JSON 劫持。如果给定的结构是数组值，则默认预置 <code>&quot;while(1);&quot;</code> 到响应体。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/hello&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">messages</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;Hello!&#34;</span><span class="p">,</span> <span class="s">&#34;Hi!&#34;</span><span class="p">,</span> <span class="s">&#34;Welcome!&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;&lt;script&gt;alert(&#39;You have been hacked!&#39;)&lt;/script&gt;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">SecureJSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">messages</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><blockquote>
<p>注：<code>ctx.SecureJSON()</code> 并不能彻底防范 XSS 攻击。</p>
</blockquote>
<h2 id="struct-的-json-序列化" data-numberify>Struct 的 JSON 序列化<a class="anchor ms-1" href="#struct-的-json-序列化"></a></h2>
<p>由于 <code>ctx.JSON()</code> 等方法，的数据参数 <code>obj</code> 是 <code>any</code> 类型的，因此可以传入自定义的类型的实例。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Id</span>       <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Username</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Sex</span>      <span class="kt">uint8</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/user/info&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">User</span><span class="p">{</span><span class="nx">Id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span> <span class="nx">Username</span><span class="p">:</span> <span class="s">&#34;zhangsan&#34;</span><span class="p">,</span> <span class="nx">Sex</span><span class="p">:</span> <span class="mi">1</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>发送请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X GET <span class="err">&#39;</span>http://127.0.0.1:8080/user/info
</span></span></code></pre></div><p>结果为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;Id&#34;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;Username&#34;</span><span class="p">:</span> <span class="s2">&#34;zhangsan&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;Sex&#34;</span><span class="p">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>由于 Golang 结构体字段必须得首字母大写，才能在其它包中访问。所以，要序列化的结构体字段，其首字母必须得是大写的。但这也导致了序列化后的 JSON 串，字段首字母也同样是大写的。为此，可以通过为结构体字段指定 Tags 来设置 JSON 序列化后的字段名称，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Id</span>       <span class="kt">uint64</span> <span class="s">`json:&#34;id&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Username</span> <span class="kt">string</span> <span class="s">`json:&#34;username&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Sex</span>      <span class="kt">uint8</span>  <span class="s">`json:&#34;sex&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>再次执行请求，结果如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;username&#34;</span><span class="p">:</span> <span class="s2">&#34;zhangsan&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;sex&#34;</span><span class="p">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="响应字节数据" data-numberify>响应字节数据<a class="anchor ms-1" href="#响应字节数据"></a></h1>
<p>通过 <code>Context.Data()</code> 方法可以往 <code>ResponseBody</code> 中写入字节数据。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/favicon&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">favicon</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;./static/favicon.ico&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 结束时关闭文件流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">defer</span> <span class="kd">func</span><span class="p">(</span><span class="nx">file</span> <span class="nx">multipart</span><span class="p">.</span><span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">logrus</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}(</span><span class="nx">favicon</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 获取字节数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">bytes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">io</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">favicon</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 假设对文件进行了一些操作...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 响应字节数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">ctx</span><span class="p">.</span><span class="nf">Data</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;application/octet-stream&#34;</span><span class="p">,</span> <span class="nx">bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>也可以通过 <code>Context.Writer.Write()</code> 方法分次数往 <code>ResponseBody</code> 中写入字节数据。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/favicon&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">favicon</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;./static/favicon.ico&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 结束时关闭文件流
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">defer</span> <span class="kd">func</span><span class="p">(</span><span class="nx">file</span> <span class="nx">multipart</span><span class="p">.</span><span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">logrus</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}(</span><span class="nx">favicon</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 使用一个缓冲区来逐块读取和响应数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">buffer</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 循环读取数据并写入响应，每次最多读取 1024 byte 数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">size</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">favicon</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span> <span class="c1">// 读取到数据流结尾，结束循环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 将读取的数据写入响应
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">writeErr</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">Writer</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">buffer</span><span class="p">[:</span><span class="nx">size</span><span class="p">]);</span> <span class="nx">writeErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">AbortWithError</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">writeErr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span><span class="p">.</span><span class="nf">Header</span><span class="p">(</span><span class="s">&#34;Content-Type&#34;</span><span class="p">,</span> <span class="s">&#34;application/octet-stream&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><hr>
<h1 id="静态文件" data-numberify>静态文件<a class="anchor ms-1" href="#静态文件"></a></h1>
<p>静态文件服务使用的是 <code>IRoutes</code>（或 <code>RouterGroup</code>）中的 <code>Static</code> 中开头的方法进行绑定。</p>
<ul>
<li>
<p>挂载目录：</p>
<ul>
<li>
<p><code>RouterGroup.Static()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">Static</span><span class="p">(</span><span class="s">&#34;/static&#34;</span><span class="p">,</span> <span class="s">&#34;./static&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>当访问 <code>GET /static</code> 时，默认会访问到挂载目录下的 <code>index.html</code> 文件。假设 <code>static</code> 目录中有 <code>welcome.html</code> 文件，可以通过 <code>GET /static/welcome.html</code> 访问到该文件。</p>
</li>
<li>
<p><code>RouterGroup.StaticFS()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">StaticFS</span><span class="p">(</span><span class="s">&#34;/static&#34;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nf">Dir</span><span class="p">(</span><span class="s">&#34;./static&#34;</span><span class="p">))</span>
</span></span></code></pre></div><p>或：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyFileSystem</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 根据实际情况实现一个 Open(string) (http.File, error) 接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="o">*</span><span class="nx">MyFileSystem</span><span class="p">)</span> <span class="nf">Open</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">file</span> <span class="nx">http</span><span class="p">.</span><span class="nx">File</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="s">&#34;./static&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">logrus</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">fs</span> <span class="p">=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">MyFileSystem</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">StaticFS</span><span class="p">(</span><span class="s">&#34;/static&#34;</span><span class="p">,</span> <span class="nx">fs</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>挂载文件：</p>
<ul>
<li>
<p><code>RouterGroup.StaticFile()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">.</span><span class="nf">StaticFile</span><span class="p">(</span><span class="s">&#34;/home&#34;</span><span class="p">,</span> <span class="s">&#34;./static/index.html&#34;</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Gin</title>
      <link>/docs/golang/gin/introduction/</link>
      <pubDate>Sat, 29 Jun 2024 07:15:50 +0000</pubDate>
      
      <guid>/docs/golang/gin/introduction/</guid>
      <description><![CDATA[Gin 是一个用 Golang 编写的 Web 框架。具有速度快、内存占用小等特点。 使用 Gin 下载并安装 Gin： $ go get -u github.com/gin-gonic/gin 引入 Gin： import &#34;github.com/gin-gonic/gin&#34; 如果需要使用诸如 http.StatusOK 之类的 HTTP 状态码常]]></description>
      <content:encoded><![CDATA[<p>Gin 是一个用 Golang 编写的 Web 框架。具有速度快、内存占用小等特点。</p>
<hr>
<h1 id="使用-gin" data-numberify>使用 Gin<a class="anchor ms-1" href="#使用-gin"></a></h1>
<ol>
<li>下载并安装 Gin：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ go get -u github.com/gin-gonic/gin
</span></span></code></pre></div><ol start="2">
<li>引入 Gin：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
</span></span></code></pre></div><p>如果需要使用诸如 <code>http.StatusOK</code> 之类的 HTTP 状态码常量，可以引入 <code>net/http</code> 包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;net/http&#34;</span>
</span></span></code></pre></div><ol start="3">
<li>开始使用 Gin。</li>
</ol>
<p><code>main.go</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 获取 gin.Engine 实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">routers</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 接收 GET /hello 请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">routers</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/hello&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ctx</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;Hello World!&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 捕获并记录错误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nb">recover</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">logrus</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 监听并在 0.0.0.0:8080 上启动服务（默认即为 8080）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">routers</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>接着运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ go run main.go
</span></span></code></pre></div><p>或者，运行以下命令也可获取 Gin 官方代码示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl https://raw.githubusercontent.com/gin-gonic/examples/master/basic/main.go &gt; main.go
</span></span></code></pre></div><hr>
<h1 id="gin-请求" data-numberify>Gin 请求<a class="anchor ms-1" href="#gin-请求"></a></h1>
<p>在如上示例中，使用 <code>routers.GET()</code> 创建了一个接收 <code>GET /hello</code> 请求的路由，并且绑定了其路由的处理函数。<code>GET()</code> 的定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">GET</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodGet</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>其中：</p>
<ul>
<li>
<p><code>RouterGroup</code>：即 <code>gin.RouterGroup</code>。表示一个路由组实例。</p>
<p>由于 <code>gin.Engine</code> 继承了 <code>gin.RouterGroup</code>，所以 <code>gin.Engine</code> 本质上也是一个路由组实例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Engine</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">RouterGroup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>relativePath</code>：表示路由接收的请求相对路径。例如 <code>/hello</code>。</p>
</li>
<li>
<p><code>handlers</code>：是一系列请求处理函数 <code>HandlerFunc</code>。在 <code>GET()</code> 中可以指定多个 <code>HandlerFunc</code>，它们将按照指定的顺序执行。中间件（middleware）、过滤器（filter）、拦截器（interceptor）等，可以基于此进行实现。</p>
</li>
<li>
<p><code>IRoutes</code>：定义了一系列路由请求方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">IRoutes</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">Use</span><span class="p">(</span><span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">Handle</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">  <span class="nf">Any</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">  <span class="nf">GET</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">  <span class="nf">POST</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">  <span class="nf">DELETE</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">  <span class="nf">PATCH</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">  <span class="nf">PUT</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">  <span class="nf">OPTIONS</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">  <span class="nf">HEAD</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">  <span class="nf">Match</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">StaticFile</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">  <span class="nf">StaticFileFS</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">FileSystem</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">  <span class="nf">Static</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl">  <span class="nf">StaticFS</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">FileSystem</span><span class="p">)</span> <span class="nx">IRoutes</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>通过返回 <code>IRoutes</code>，可以使用链式调用风格来配置路由或中间件。</p>
</li>
</ul>
<p>Gin 除了 Get 请求之外，还有可以配置其它请求方式，它们的使用方式差距不大：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">POST</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodPost</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">GET</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodGet</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">DELETE</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodDelete</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">PATCH</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodPatch</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">PUT</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodPut</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">OPTIONS</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodOptions</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">group</span> <span class="o">*</span><span class="nx">RouterGroup</span><span class="p">)</span> <span class="nf">HEAD</span><span class="p">(</span><span class="nx">relativePath</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handlers</span> <span class="o">...</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">IRoutes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodHead</span><span class="p">,</span> <span class="nx">relativePath</span><span class="p">,</span> <span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>创建 Go Module</title>
      <link>/docs/golang/create-module/</link>
      <pubDate>Sat, 08 Jun 2024 06:27:21 +0000</pubDate>
      
      <guid>/docs/golang/create-module/</guid>
      <description><![CDATA[Go Path 在 Golang 1.11 之前，Go 采用的是手动依赖管理，也就是使用 Go Path 的方式管理依赖。 使用 Go Path 会有以下问题： 代码开发必须在 Go Path 的 src 目录下。 依赖手动管理。 依]]></description>
      <content:encoded><![CDATA[<h1 id="go-path" data-numberify>Go Path<a class="anchor ms-1" href="#go-path"></a></h1>
<p>在 Golang 1.11 之前，Go 采用的是手动依赖管理，也就是使用 Go Path 的方式管理依赖。</p>
<p>使用 Go Path 会有以下问题：</p>
<ol>
<li>代码开发必须在 Go Path 的 <code>src</code> 目录下。</li>
<li>依赖手动管理。</li>
<li>依赖包没有版本可言。</li>
</ol>
<hr>
<h1 id="go-modules" data-numberify>Go Modules<a class="anchor ms-1" href="#go-modules"></a></h1>
<p>Go Modules 是 Golang 1.11 新加的特性。Go Modules 的特点如下：</p>
<ul>
<li>模块是相关 Go 包的集合。</li>
<li>Modules 是源代码交换和版本控制的单元。</li>
<li>Go 命令直接支持使用 Modules，包括记录和解析对其他模块的依赖性。</li>
<li>Modules 替换了旧的 Go Path 方法。</li>
</ul>
<p>在使用 Go Modules 之前需要对环境变量进行一些设置：</p>
<ul>
<li>设置 <code>GO111MODULE</code> 为 <code>on</code>；</li>
<li>设置 <code>GOPROXY</code> 为 <code>https://goproxy.cn</code>（七牛云的 Go 代理，）。</li>
</ul>
<p>根据不同平台有不同的设置方式：</p>
<ul>
<li>
<p>Golang 1.13 及以上：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go env -w <span class="nv">GO111MODULE</span><span class="o">=</span>on
</span></span><span class="line"><span class="cl">$ go env -w <span class="nv">GOPROXY</span><span class="o">=</span>https://goproxy.cn,direct
</span></span></code></pre></div></li>
<li>
<p>MacOS 或 Linux</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">export</span> <span class="nv">GO111MODULE</span><span class="o">=</span>on
</span></span><span class="line"><span class="cl">$ <span class="nb">export</span> <span class="nv">GOPROXY</span><span class="o">=</span>https://goproxy.cn
</span></span></code></pre></div><p>或者</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s2">&#34;export GO111MODULE=on&#34;</span> &gt;&gt; ~/.profile
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s2">&#34;export GOPROXY=https://goproxy.cn&#34;</span> &gt;&gt; ~/.profile
</span></span><span class="line"><span class="cl">$ <span class="nb">source</span> ~/.profile
</span></span></code></pre></div></li>
<li>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">C:<span class="se">\&gt;</span> <span class="nv">$env</span>:GO111MODULE <span class="o">=</span> <span class="s2">&#34;on&#34;</span>
</span></span><span class="line"><span class="cl">C:<span class="se">\&gt;</span> <span class="nv">$env</span>:GOPROXY <span class="o">=</span> <span class="s2">&#34;https://goproxy.cn&#34;</span>
</span></span></code></pre></div><p>或者，直接在“高级系统设置”中的“环境变量”中添加对应的环境变量。</p>
</li>
</ul>
<hr>
<h1 id="创建模块" data-numberify>创建模块<a class="anchor ms-1" href="#创建模块"></a></h1>
<p>创建 <code>greetings</code> 模块：</p>
<ol>
<li>
<p>创建一个模块目录（在任意位置都可以，此时不用指定在 Go Path 下），并切换到目录中。</p>
<p>假设工作目录为 <code>example.com</code>，在工作目录下创建 <code>greetings</code> 模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">cd</span> example.com
</span></span><span class="line"><span class="cl">$ mkdir greetings
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> greetings
</span></span></code></pre></div></li>
<li>
<p>使用 <code>go mod init &lt;module-name&gt;</code> 初始化模块。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go mod init example.com/greetings
</span></span></code></pre></div><p><code>go mod init</code> 会在 <code>greetings</code> 目录下创建一个 <code>go.mod</code> 文件。<code>go.mod</code> 用于记录当前模块的名称、Golang SDK 版本以及项目依赖等信息。</p>
<p><code>go.mod</code> 的基本内容如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go.mod" data-lang="go.mod"><span class="line"><span class="cl"><span class="c1">// 模块名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">module</span> <span class="n">example</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">greetings</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Golang SDK 版本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">go</span> <span class="mf">1.22</span><span class="p">.</span><span class="mi">4</span>
</span></span></code></pre></div><p>在后续的使用中，<code>go.mod</code> 还可能包含以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go.mod" data-lang="go.mod"><span class="line"><span class="cl"><span class="c1">// 项目所需依赖
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">require</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="o">//</span> <span class="err">依赖的格式如下：</span>
</span></span><span class="line"><span class="cl">  <span class="n">dependencyName</span> <span class="n">vision</span>
</span></span><span class="line"><span class="cl">  <span class="o">//</span> <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 项目中排除的依赖
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">exclude</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="o">//</span> <span class="err">格式同上</span>
</span></span><span class="line"><span class="cl">  <span class="n">dependencyName</span> <span class="n">vision</span>
</span></span><span class="line"><span class="cl">  <span class="o">//</span> <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 替换第三方依赖
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">replace</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">sourceName</span> <span class="n">vision</span> <span class="o">=&gt;</span> <span class="n">targetName</span> <span class="n">vision</span>
</span></span><span class="line"><span class="cl">  <span class="o">//</span> <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 撤回当前项目中有问题的版本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">retract</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">version</span>
</span></span><span class="line"><span class="cl">  <span class="o">//</span> <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div></li>
<li>
<p>在 <code>greetings</code> 创建对应的 <code>greetings.go</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">grettings</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Hello</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">message</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">message</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;Hi, %v. Welcome!&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">message</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
</ol>
<p>创建 <code>hello</code> 模块：</p>
<ol>
<li>
<p>在 <code>example.com</code> 创建 <code>hello</code> 目录并初始化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir hello
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> hello
</span></span><span class="line"><span class="cl">$ go mod init example.com/hello
</span></span></code></pre></div></li>
<li>
<p>在 <code>hello</code> 目录下创建 <code>hello.go</code> 并编写 <code>main()</code> 来调用 <code>greetings.Hello(name string)</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="s">&#34;example.com/greetings&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">message</span> <span class="o">:=</span> <span class="nx">greetings</span><span class="p">.</span><span class="nf">Hello</span><span class="p">(</span><span class="s">&#34;Linner&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p>由于 <code>hello.go</code> 使用到了 <code>example.com/greetings</code>，所以需要对其进行导入。由于 <code>example.com/greetings</code> 是当前 <code>example.com</code> 中的子模块，<code>example.com/greetings</code> 并未使用任何版本管理工具，所以需要使用 <code>mod replace</code> 为其指定路径。</p>
<p>在 <code>hello</code> 目录下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 指定模块路径（一般实在开发环境下使用）</span>
</span></span><span class="line"><span class="cl">$ go mod edit -replace example.com/greetings<span class="o">=</span>../greetings
</span></span><span class="line"><span class="cl"><span class="c1"># 导入 example.com/greetings</span>
</span></span><span class="line"><span class="cl">$ go get example.com/greetings
</span></span></code></pre></div><p>执行以上命令后，在 <code>hello/go.mod</code> 中会添加如下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go.mod" data-lang="go.mod"><span class="line"><span class="cl"><span class="n">replace</span> <span class="n">example</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">greetings</span> <span class="o">=&gt;</span> <span class="p">..</span><span class="o">/</span><span class="n">greetings</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">require</span> <span class="n">example</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">greetings</span> <span class="n">v0</span><span class="p">.</span><span class="mf">0.0</span><span class="o">-</span><span class="mi">00010101000000</span><span class="o">-</span><span class="mi">000000000000</span> <span class="o">//</span> <span class="n">indirect</span>
</span></span></code></pre></div><p>由于没用使用版本工具发布版本（如使用 Git Tag），所以导入之后，Go Get 会使用一个伪版本号（pseudo-version number）暂替。</p>
</li>
</ol>
<p>完成创建后，可以在 <code>hello</code> 目录中 <code>run</code> 或 <code>build</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">go run .
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go build
</span></span><span class="line"><span class="cl">$ ./hello.exe
</span></span></code></pre></div><blockquote>
<p>Go 中的伪版本号的格式遵循语义化版本控制的原则，并在此基础上增加了一段额外的信息来唯一标识Git提交。通常伪版本号使用如下格式生成：</p>
<pre tabindex="0"><code>v0.0.0-YYYYMMDDHHMMSS-CommitHash
</code></pre><ul>
<li><code>v0.0.0</code> 表示模块尚未定义正式版本，或依赖的是一个无标签的提交；</li>
<li><code>YYYYMMDDHHMMSS</code> 是提交日期的时间戳，精确到秒，确保了时间上的唯一性；</li>
<li><code>CommitHash</code> 是 Git 提交的前几位哈希值，进一步确保了每个提交的唯一性。</li>
</ul>
<p>由于 <code>example.com/greetings</code> 模块并未使用 Git，所以伪版本号是固定的 <code>v0.0.0-00010101000000-000000000000</code>。</p>
</blockquote>
<hr>
<h1 id="go-mod-命令" data-numberify>go mod 命令<a class="anchor ms-1" href="#go-mod-命令"></a></h1>
<p>使用 <code>go help mod</code> 可以查看 <code>go mod</code> 命令的信息：</p>
<pre tabindex="0"><code>$ go mod
Go mod provides access to operations on modules.

Note that support for modules is built into all the go commands,
not just &#39;go mod&#39;. For example, day-to-day adding, removing, upgrading,
and downgrading of dependencies should be done using &#39;go get&#39;.
See &#39;go help modules&#39; for an overview of module functionality.

Usage:

        go mod &lt;command&gt; [arguments]

The commands are:

        download    download modules to local cache
        edit        edit go.mod from tools or scripts
        graph       print module requirement graph
        init        initialize new module in current directory
        tidy        add missing and remove unused modules
        vendor      make vendored copy of dependencies
        verify      verify dependencies have expected content
        why         explain why packages or modules are needed

Use &#34;go help mod &lt;command&gt;&#34; for more information about a command.
</code></pre><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>download</code></td>
<td>下载依赖包到本地缓存</td>
</tr>
<tr>
<td><code>edit</code></td>
<td>编辑 <code>go.mod</code></td>
</tr>
<tr>
<td><code>graph</code></td>
<td>打印模块依赖图</td>
</tr>
<tr>
<td><code>verify</code></td>
<td>在当前目录初始化新的模块</td>
</tr>
<tr>
<td><code>tidy</code></td>
<td>拉取缺少的模块，移除不用的模块</td>
</tr>
<tr>
<td><code>vendor</code></td>
<td>将依赖复制到 <code>vendor</code> 下</td>
</tr>
<tr>
<td><code>verify</code></td>
<td>验证依赖是否正确</td>
</tr>
<tr>
<td><code>why</code></td>
<td>解释为什么包或模块依赖被依赖</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="代码仓库" data-numberify>代码仓库<a class="anchor ms-1" href="#代码仓库"></a></h1>
<p>通常情况下 Go Modules 是和 Git 一同使用的，在 Go 中创建一个模块的标准流程实际是：</p>
<ol>
<li>
<p>初始化。</p>
<p>在模块目录中进行如下操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go mod init &lt;module-name&gt;
</span></span><span class="line"><span class="cl">$ git init
</span></span><span class="line"><span class="cl">$ git commit -am <span class="s2">&#34;init&#34;</span>
</span></span><span class="line"><span class="cl">$ git remote add origin &lt;remote-url&gt;
</span></span><span class="line"><span class="cl">$ git push -u origin main
</span></span></code></pre></div></li>
<li>
<p>开发模块。</p>
<p>模块开发完成后，需要进行发布。Go Modules 中的发布实际就是使用 Git 提交代码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git push
</span></span></code></pre></div></li>
<li>
<p>在任意机器上运行如下命令即可自动安装依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">go get &lt;module-name&gt;<span class="o">[</span>@version<span class="o">]</span>
</span></span></code></pre></div></li>
</ol>
<p>在发布模块的时候需要注意。模块对应的远程仓库需要设置为 Public。如果要导入的模块存放在你的私有仓库中，需要将环境变量 <code>GOPRIVATE</code> 设置为你的远程仓库的用户目录。例如我的 Github 主页是 <a href="https://github.com/Linna-cy/" target="_blank" rel="noopener noreferrer">https://github.com/Linna-cy/<i class="fas fa-external-link-square-alt ms-1"></i></a> 那么我需要设置 <code>GOPRIVATE=github.com/Linna-cy/*</code>。再次运行 <code>go get</code> 命令，在通过用户名密码验证后就能正常从我的私有仓库下载依赖到本地。</p>
<p>一般情况下，在创建模块和远程仓库的时候，会将模块名称设置为 <code>远程仓库地址/用户名/仓库名</code> 的形式。</p>
<hr>
<h1 id="版本管理" data-numberify>版本管理<a class="anchor ms-1" href="#版本管理"></a></h1>
<p>Go Modules 中并没有与版本相关的配置项，而是依靠于 Git 进行版本管理。</p>
<p>如上例，假设模块名称为 <code>github.com/Linna-cy/go-utils</code>，运行 <code>go get github.com/Linna-cy/go-utils</code> 时，在 <code>go.mod</code> 中的结果可能如下：</p>
<pre tabindex="0"><code>require github.com/Linna-cy/go-utils v0.0.0-20240608124125-a86730578714
</code></pre><p>可以观察到，当没有使用 Git 给模块指定版本时，默认的版本号（伪版本号）是通过时间戳等信息生成的。</p>
<blockquote>
<p><code>go get github.com/Linna-cy/go-utils</code> 在没有指定版本时，会自动获取 <code>github.com/Linna-cy/go-utils</code> 的最新版本。而模块 <code>github.com/Linna-cy/go-utils</code> 恰巧没有使用 Gti 设置任何版本，所以获取到的最新的版本就是 Go 自动生成的。</p>
</blockquote>
<h2 id="设置版本号" data-numberify>设置版本号<a class="anchor ms-1" href="#设置版本号"></a></h2>
<p>要设置版本，需要通过 Git Tag 进行设置。例如给 <code>github.com/Linna-cy/go-utils</code> 设置一个 <code>v1.0.0</code> 的版本号并进行发布：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git tag v1.0.0
</span></span><span class="line"><span class="cl">$ git push --tags
</span></span></code></pre></div><p>Git Tag 创建标签时，也可以在标签中包含一些信息（这种标签称为附注标签）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git tag -a &lt;tagname&gt; -m <span class="s2">&#34;Tag message describing the version.&#34;</span>
</span></span></code></pre></div><h2 id="导入依赖" data-numberify>导入依赖<a class="anchor ms-1" href="#导入依赖"></a></h2>
<p>然后就可以导入指定版本的依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go get github.com/Linna-cy/go-utils@v1.0.0
</span></span><span class="line"><span class="cl">go: downloading github.com/Linna-cy/go-utils v1.0.0
</span></span><span class="line"><span class="cl">go: upgraded github.com/Linna-cy/go-utils v0.0.0-20240608124125-a86730578714 <span class="o">=</span>&gt; v1.0.0
</span></span></code></pre></div><p><code>go.mod</code> 中 <code>github.com/Linna-cy/go-utils</code> 将更新为：</p>
<pre tabindex="0"><code>require github.com/Linna-cy/go-utils v1.0.0
</code></pre><p>在 <code>go.mod</code> 更新的同时，还生成了 <code>go.sum</code>，其中除了软件包名和版本号，还包含了软件包的哈希值，以确保具有正确的版本和文件。</p>
<p>依赖导入成功后，就可以在代码中使用 <code>import</code> 进行导入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;github.com/Linna-cy/go-utils&#34;</span>
</span></span></code></pre></div><p>通常情况下，版本号使用语义化版本号（Semantic Versioning，SemVer）。SemVer 的格式通常为 <code>MAJOR.MINOR.PATCH</code>，每个部分都是一个非负整数，并且在数值上递增。其具体含义如下：</p>
<ol>
<li><code>MAJOR</code>（主版本号）：当做了不兼容的 API 修改时，主版本号应该递增。这表明新版本无法向后兼容旧版本，使用者可能需要修改代码才能适配新版本。</li>
<li><code>MINOR</code>（次版本号）：当新增了向后兼容的功能时，次版本号应该递增。这意味着新版本添加了功能，但所有公共接口保持与旧版本兼容，用户无需修改代码即可安全升级。</li>
<li><code>PATCH</code>（修订号）：当进行了向后兼容的错误修正时，修订号应该递增。这类更新修复了问题，但不对公开的 API 做任何改变，因此对用户而言是透明的升级。</li>
</ol>
<h2 id="分支" data-numberify>分支<a class="anchor ms-1" href="#分支"></a></h2>
<p>在使用 Git Tag 给提交标记上版本号后，假设当前标记的版本号是当前主版本下的第一个版本，一般情况下会给当前主版本创建一个新的分支，用于当前主版本后续的修复推送。例如 <code>github.com/Linna-cy/go-utils</code>，在推送版本号之后，还可以：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git checkout -b v1 v1.0.0
</span></span><span class="line"><span class="cl">$ git push -u origin v1
</span></span></code></pre></div><p>其中，<code>checkout</code> 的含义如下（<code>tag-name</code> 是可选的）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git checkout -b &lt;new-branch&gt; <span class="o">[</span>tag-name<span class="o">]</span>
</span></span></code></pre></div><h2 id="迭代和修复" data-numberify>迭代和修复<a class="anchor ms-1" href="#迭代和修复"></a></h2>
<p>一般版本后续的迭代和修复，不会直接在主分支（<code>main</code>、<code>master</code>）上进行修改，而是创建新的分支进行修改。当修改后的内容通过测试，再将其合并到主分支上。</p>
<p>例如 <code>github.com/Linna-cy/go-utils v1.0.0</code> 有 Bug。当我们修复完成后，可以：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 提交示例（根据实际情况进行修改）</span>
</span></span><span class="line"><span class="cl">$ git commit -am <span class="s2">&#34;fix: 修复了 xxx 问题&#34;</span>
</span></span><span class="line"><span class="cl">$ git tag v1.0.1
</span></span><span class="line"><span class="cl">$ git push --tags origin v1
</span></span><span class="line"><span class="cl"><span class="c1"># 如果已经 git push -u origin v1，可以直接 git push --tags</span>
</span></span><span class="line"><span class="cl">$ git push origin v1:v1
</span></span><span class="line"><span class="cl"><span class="c1"># 如果已经 git push -u origin v1，可以直接 git push</span>
</span></span></code></pre></div><p>当修复完成后，在使用了 <code>github.com/Linna-cy/go-utils v1.0.0</code> 的模块中，需要对 <code>github.com/Linna-cy/go-utils</code> 进行更新。更新通常有以下方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 对所有依赖进行更新升级</span>
</span></span><span class="line"><span class="cl">$ go get -u
</span></span><span class="line"><span class="cl">$ go get -u<span class="o">=</span>patch
</span></span><span class="line"><span class="cl"><span class="c1"># 指定包和版本进行更新升级</span>
</span></span><span class="line"><span class="cl">$ go get github.com/Linna-cy/go-utils@v1.0.1
</span></span></code></pre></div><p>如果要对主版本进行迭代，即发布新的主版本，一般步骤如下：</p>
<ol>
<li>
<p>修改 <code>go.mod</code>。</p>
<p>由于主要版本可能会破坏向后兼容性，所以可以通过修改 <code>go.mod</code> 的 <code>module</code> 项的方式，告知两个版本并不兼容。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go.mod" data-lang="go.mod"><span class="line"><span class="cl"><span class="n">module</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;/&lt;</span><span class="n">major</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">go</span> <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span>
</span></span></code></pre></div><p>例如在 <code>github.com/Linna-cy/go-utils</code> 中添加了一系列新的接口，或对原有的接口进行修改，且修改后的接口不兼容旧版本。此时就需要对主版本进行迭代。假设将主版本迭代到 <code>v2</code>，并且发布了新的版本 <code>v2.0.0</code>，此时对应的 <code>go.mod</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go.mod" data-lang="go.mod"><span class="line"><span class="cl"><span class="n">module</span> <span class="n">github</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">Linna</span><span class="o">-</span><span class="n">cy</span><span class="o">/</span><span class="n">go</span><span class="o">-</span><span class="n">utils</span><span class="o">/</span><span class="n">v2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">go</span> <span class="mf">1.22</span><span class="p">.</span><span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 省略其它内容...
</span></span></span></code></pre></div></li>
<li>
<p>发布新版本</p>
<p>假设要发布 <code>github.com/Linna-cy/go-utils v2.0.0</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 提交示例（根据实际情况进行修改）</span>
</span></span><span class="line"><span class="cl">$ git commit -am <span class="s2">&#34;feat: 发布新版本 v2.0.0，xxx&#34;</span>
</span></span><span class="line"><span class="cl">$ git tag -a v2.0.0 -m <span class="s2">&#34;添加了 xxx，修改了 xxx，新版支持 xxx&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 签出分支</span>
</span></span><span class="line"><span class="cl">$ git checkout -b v2 v2.0.0
</span></span><span class="line"><span class="cl">$ git push --tags origin v2
</span></span></code></pre></div></li>
<li>
<p>使用新版本。</p>
</li>
</ol>
<p>原先使用了 <code>github.com/Linna-cy/go-utils</code> 的模块并不会受到影响。如果需要升级模块的主版本，或在其它模块中使用  <code>github.com/Linna-cy/go-utils/v2</code> 需要将 <code>import &quot;github.com/Linna-cy/go-utils&quot;</code> 修改为 <code>import &quot;github.com/Linna-cy/go-utils/v2&quot;</code>。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

