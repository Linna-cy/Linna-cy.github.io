<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>TypeScript on Linner&#39;s Blog</title>
    <link>/series/typescript/</link>
    <description>Recent content in TypeScript on Linner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>Copyright © 2020-2023 Linner. All Rights Reserved.
</copyright>
    <lastBuildDate>Fri, 18 Aug 2023 09:21:24 +0000</lastBuildDate><atom:link href="/series/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TypeScript 介绍</title>
      <link>/docs/node-js/typescript/</link>
      <pubDate>Fri, 18 Aug 2023 09:21:24 +0000</pubDate>
      
      <guid>/docs/node-js/typescript/</guid>
      <description><![CDATA[TypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法，因此现有的 JavaScript 代码可与 TypeScript 一起工作无需任何修改TypeScript 是一种给 JavaScript 添加特性的语言扩展。增加的功能包括： 类]]></description>
      <content:encoded><![CDATA[<p>TypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法，因此现有的 JavaScript 代码可与 TypeScript 一起工作无需任何修改TypeScript 是一种给 JavaScript 添加特性的语言扩展。增加的功能包括：</p>
<ul>
<li>类型批注和编译时类型检查。</li>
<li>类型推断。</li>
<li>类型擦除。</li>
<li>接口。</li>
<li>枚举。</li>
<li>Mixin。</li>
<li>泛型编程。</li>
<li>名字空间。</li>
<li>元组。</li>
<li>Await。</li>
</ul>
<hr>
<h1 id="安装-typescript" data-numberify>安装 TypeScript<a class="anchor ms-1" href="#安装-typescript"></a></h1>
<p>安装TypeScript：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm install -g typescript
</span></span></code></pre></div><p>安装完成后可以使用 <code>tsc</code> 命令来执行 TypeScript 的相关代码。查看 TypeScript 版本号：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">tsc -v
</span></span></code></pre></div><hr>
<h1 id="hello" data-numberify>Hello<a class="anchor ms-1" href="#hello"></a></h1>
<p>新建一个<code>hello.ts</code>（通常使用 <code>.ts</code> 作为 TypeScript 代码文件的扩展名）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello TypeScript!&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p>执行以下命令将 TypeScript 转换为 JavaScript 代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">tsc hello.ts
</span></span></code></pre></div><p>执行完成后会在当前目录下生成一个<code>hello.js</code>（与执行<code>tsc</code>时指定的<code>.ts</code>同名的<code>.js</code>文件）。然后使用<code>node</code>来执行<code>hello.js</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">node hello.js
</span></span></code></pre></div><hr>
<h1 id="变量声明" data-numberify>变量声明<a class="anchor ms-1" href="#变量声明"></a></h1>
<p>在TypeScript中声明变量，可以像JS那样去声明变量，当然也可以为变量指定类型：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">variableName</span><span class="p">]</span> <span class="o">:</span> <span class="p">[</span><span class="nx">variableType</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span>
</span></span></code></pre></div><p>类型断言（Type Assertion）可以用来手动指定一个值的类型，即允许变量从一种类型更改为另一种类型：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">type</span><span class="p">&gt;</span><span class="nx">value</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 或者使用 as
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">value</span> <span class="kr">as</span> <span class="kr">type</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>

